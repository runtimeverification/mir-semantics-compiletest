// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &isize;
    let mut _10: (&isize, &isize);
    let mut _11: &isize;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: isize;
    let mut _17: isize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let _21: ();
    let mut _22: std::fmt::Arguments<'_>;
    let mut _23: &[&str];
    let mut _24: &[core::fmt::rt::Argument<'_>];
    let _25: &[core::fmt::rt::Argument<'_>; 1];
    let _26: [core::fmt::rt::Argument<'_>; 1];
    let mut _27: core::fmt::rt::Argument<'_>;
    let _28: &isize;
    let mut _29: (&isize, &isize);
    let mut _30: &isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: isize;
    let _41: ();
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: [core::fmt::rt::Argument<'_>; 1];
    let mut _47: core::fmt::rt::Argument<'_>;
    let _48: &isize;
    let mut _49: (&isize, &isize);
    let mut _50: &isize;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: isize;
    let mut _56: isize;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let _64: ();
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[core::fmt::rt::Argument<'_>];
    let _68: &[core::fmt::rt::Argument<'_>; 1];
    let _69: [core::fmt::rt::Argument<'_>; 1];
    let mut _70: core::fmt::rt::Argument<'_>;
    let _71: &isize;
    let mut _72: (&isize, &isize);
    let mut _73: &isize;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: isize;
    let mut _79: isize;
    let _81: !;
    let mut _82: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _12: &isize;
        let _13: &isize;
        let _31: &isize;
        let _32: &isize;
        let _51: &isize;
        let _52: &isize;
        let _74: &isize;
        let _75: &isize;
        let mut _83: &isize;
        let mut _84: &[&str; 2];
        let mut _85: &isize;
        let mut _86: &[&str; 2];
        let mut _87: &isize;
        let mut _88: &[&str; 2];
        let mut _89: &isize;
        let mut _90: &[&str; 2];
        scope 2 {
            debug left_val => _12;
            debug right_val => _13;
            let _18: core::panicking::AssertKind;
            scope 3 {
                debug kind => _18;
            }
        }
        scope 4 {
            debug left_val => _31;
            debug right_val => _32;
            let _37: core::panicking::AssertKind;
            scope 5 {
                debug kind => _37;
            }
        }
        scope 6 {
            debug left_val => _51;
            debug right_val => _52;
            let _57: core::panicking::AssertKind;
            scope 7 {
                debug kind => _57;
            }
        }
        scope 8 {
            debug left_val => _74;
            debug right_val => _75;
            let _80: core::panicking::AssertKind;
            scope 9 {
                debug kind => _80;
            }
        }
    }

    bb0: {
        _1 = const 1_isize;
        _1 = Mul(_1, const 2_isize);
        _90 = const _;
        _4 = _90 as &[&str] (Pointer(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = &_1;
        _89 = const _;
        _10 = (move _11, _89);
        _12 = (_10.0: &isize);
        _13 = (_10.1: &isize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<isize, isize>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb5: {
        _1 = Add(_1, const 3_isize);
        _88 = const _;
        _23 = _88 as &[&str] (Pointer(Unsize));
        _28 = &_1;
        _27 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_28) -> [return: bb6, unwind continue];
    }

    bb6: {
        _26 = [move _27];
        _25 = &_26;
        _24 = _25 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _22 = Arguments::<'_>::new_v1(move _23, move _24) -> [return: bb7, unwind continue];
    }

    bb7: {
        _21 = _print(move _22) -> [return: bb8, unwind continue];
    }

    bb8: {
        _30 = &_1;
        _87 = const _;
        _29 = (move _30, _87);
        _31 = (_29.0: &isize);
        _32 = (_29.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb10: {
        _40 = _1;
        _1 = Mul(_1, move _40);
        _86 = const _;
        _43 = _86 as &[&str] (Pointer(Unsize));
        _48 = &_1;
        _47 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_48) -> [return: bb11, unwind continue];
    }

    bb11: {
        _46 = [move _47];
        _45 = &_46;
        _44 = _45 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _42 = Arguments::<'_>::new_v1(move _43, move _44) -> [return: bb12, unwind continue];
    }

    bb12: {
        _41 = _print(move _42) -> [return: bb13, unwind continue];
    }

    bb13: {
        _50 = &_1;
        _85 = const _;
        _49 = (move _50, _85);
        _51 = (_49.0: &isize);
        _52 = (_49.1: &isize);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<isize, isize>(move _57, _51, _52, move _59) -> unwind continue;
    }

    bb15: {
        _60 = Eq(const 5_isize, const 0_isize);
        assert(!move _60, "attempt to divide `{}` by zero", _1) -> [success: bb16, unwind continue];
    }

    bb16: {
        _61 = Eq(const 5_isize, const -1_isize);
        _62 = Eq(_1, const isize::MIN);
        _63 = BitAnd(move _61, move _62);
        assert(!move _63, "attempt to compute `{} / {}`, which would overflow", _1, const 5_isize) -> [success: bb17, unwind continue];
    }

    bb17: {
        _1 = Div(_1, const 5_isize);
        _84 = const _;
        _66 = _84 as &[&str] (Pointer(Unsize));
        _71 = &_1;
        _70 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_71) -> [return: bb18, unwind continue];
    }

    bb18: {
        _69 = [move _70];
        _68 = &_69;
        _67 = _68 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _65 = Arguments::<'_>::new_v1(move _66, move _67) -> [return: bb19, unwind continue];
    }

    bb19: {
        _64 = _print(move _65) -> [return: bb20, unwind continue];
    }

    bb20: {
        _73 = &_1;
        _83 = const _;
        _72 = (move _73, _83);
        _74 = (_72.0: &isize);
        _75 = (_72.1: &isize);
        _78 = (*_74);
        _79 = (*_75);
        _77 = Eq(move _78, move _79);
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _80 = core::panicking::AssertKind::Eq;
        _82 = Option::<Arguments<'_>>::None;
        _81 = core::panicking::assert_failed::<isize, isize>(move _80, _74, _75, move _82) -> unwind continue;
    }

    bb22: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 25_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
