// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deref.rs:4:15: 4:15
    let _1: std::boxed::Box<isize>;      // in scope 0 at ui/deref.rs:5:9: 5:10
    let mut _3: *const isize;            // in scope 0 at ui/deref.rs:5:9: 5:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/deref.rs:5:9: 5:10
        let _2: isize;                   // in scope 1 at ui/deref.rs:6:9: 6:11
        scope 2 {
            debug _y => _2;              // in scope 2 at ui/deref.rs:6:9: 6:11
        }
    }

    bb0: {
        _1 = Box::<isize>::new(const 10_isize) -> bb1; // scope 0 at ui/deref.rs:5:25: 5:37
                                         // mir::Constant
                                         // + span: ui/deref.rs:5:25: 5:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 1 at ui/deref.rs:6:21: 6:23
        _2 = (*_3);                      // scope 1 at ui/deref.rs:6:21: 6:23
        drop(_1) -> bb2;                 // scope 0 at ui/deref.rs:7:1: 7:2
    }

    bb2: {
        return;                          // scope 0 at ui/deref.rs:7:2: 7:2
    }
}
