// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (i32, i32);
    let _2: i32;
    let _3: &i32;
    let mut _4: bool;
    let mut _5: i32;
    let mut _6: bool;
    let mut _7: i32;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: &i32;
    let mut _16: std::option::Option<(i32, i32)>;
    let mut _17: (i32, i32);
    let mut _18: isize;
    let _19: i32;
    let _20: &i32;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: bool;
    let mut _24: i32;
    let _25: ();
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &i32;
    let mut _33: std::option::Option<(i32, i32)>;
    let mut _34: (i32, i32);
    let mut _35: isize;
    let _36: i32;
    let _37: &i32;
    let mut _38: bool;
    let mut _39: i32;
    let mut _40: bool;
    let mut _41: i32;
    let _42: ();
    let mut _43: std::fmt::Arguments<'_>;
    let mut _44: &[&str];
    let mut _45: &[core::fmt::rt::Argument<'_>];
    let _46: &[core::fmt::rt::Argument<'_>; 1];
    let _47: [core::fmt::rt::Argument<'_>; 1];
    let mut _48: core::fmt::rt::Argument<'_>;
    let _49: &i32;
    let mut _51: &std::option::Option<(i32, i32)>;
    let mut _52: &std::option::Option<(i32, i32)>;
    let mut _54: &std::option::Option<(i32, i32)>;
    let mut _55: &std::option::Option<(i32, i32)>;
    let mut _57: &(i32, i32);
    let mut _58: &(i32, i32);
    scope 1 {
        debug a => _2;
        debug a => _3;
        let mut _56: &[&str; 2];
    }
    scope 2 {
        debug a => _19;
        debug a => _20;
        let mut _53: &[&str; 2];
    }
    scope 3 {
        debug a => _36;
        debug a => _37;
        let mut _50: &[&str; 2];
    }

    bb0: {
        _1 = (const 3_i32, const 42_i32);
        _58 = const _;
        _3 = &((*_58).0: i32);
        _5 = (*_3);
        _4 = Gt(move _5, const 10_i32);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb1: {
        _56 = const _;
        _10 = _56 as &[&str] (Pointer(Unsize));
        _15 = &_2;
        _14 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_15) -> [return: bb5, unwind continue];
    }

    bb2: {
        _2 = (_1.0: i32);
        goto -> bb1;
    }

    bb3: {
        _57 = const _;
        _3 = &((*_57).1: i32);
        _7 = (*_3);
        _6 = Gt(move _7, const 10_i32);
        switchInt(move _6) -> [0: bb7, otherwise: bb4];
    }

    bb4: {
        _2 = (_1.1: i32);
        goto -> bb1;
    }

    bb5: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = _print(move _9) -> [return: bb7, unwind continue];
    }

    bb7: {
        _17 = (const 3_i32, const 42_i32);
        _16 = Option::<(i32, i32)>::Some(move _17);
        _18 = discriminant(_16);
        switchInt(move _18) -> [1: bb9, otherwise: bb15];
    }

    bb8: {
        _53 = const _;
        _27 = _53 as &[&str] (Pointer(Unsize));
        _32 = &_19;
        _31 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_32) -> [return: bb13, unwind continue];
    }

    bb9: {
        _55 = const _;
        _20 = &((((*_55) as Some).0: (i32, i32)).0: i32);
        _22 = (*_20);
        _21 = Gt(move _22, const 10_i32);
        switchInt(move _21) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _19 = (((_16 as Some).0: (i32, i32)).0: i32);
        goto -> bb8;
    }

    bb11: {
        _54 = const _;
        _20 = &((((*_54) as Some).0: (i32, i32)).1: i32);
        _24 = (*_20);
        _23 = Gt(move _24, const 10_i32);
        switchInt(move _23) -> [0: bb15, otherwise: bb12];
    }

    bb12: {
        _19 = (((_16 as Some).0: (i32, i32)).1: i32);
        goto -> bb8;
    }

    bb13: {
        _30 = [move _31];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _26 = Arguments::<'_>::new_v1(move _27, move _28) -> [return: bb14, unwind continue];
    }

    bb14: {
        _25 = _print(move _26) -> [return: bb15, unwind continue];
    }

    bb15: {
        _34 = (const 3_i32, const 42_i32);
        _33 = Option::<(i32, i32)>::Some(move _34);
        _35 = discriminant(_33);
        switchInt(move _35) -> [1: bb17, otherwise: bb23];
    }

    bb16: {
        _50 = const _;
        _44 = _50 as &[&str] (Pointer(Unsize));
        _49 = &_36;
        _48 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_49) -> [return: bb21, unwind continue];
    }

    bb17: {
        _52 = const _;
        _37 = &((((*_52) as Some).0: (i32, i32)).0: i32);
        _39 = (*_37);
        _38 = Gt(move _39, const 10_i32);
        switchInt(move _38) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _36 = (((_33 as Some).0: (i32, i32)).0: i32);
        goto -> bb16;
    }

    bb19: {
        _51 = const _;
        _37 = &((((*_51) as Some).0: (i32, i32)).1: i32);
        _41 = (*_37);
        _40 = Gt(move _41, const 10_i32);
        switchInt(move _40) -> [0: bb23, otherwise: bb20];
    }

    bb20: {
        _36 = (((_33 as Some).0: (i32, i32)).1: i32);
        goto -> bb16;
    }

    bb21: {
        _47 = [move _48];
        _46 = &_47;
        _45 = _46 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _43 = Arguments::<'_>::new_v1(move _44, move _45) -> [return: bb22, unwind continue];
    }

    bb22: {
        _42 = _print(move _43) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<(i32, i32)> = {
    let mut _0: &std::option::Option<(i32, i32)>;
    let mut _1: std::option::Option<(i32, i32)>;
    let mut _2: (i32, i32);

    bb0: {
        _2 = (const 3_i32, const 42_i32);
        _1 = Option::<(i32, i32)>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Option<(i32, i32)> = {
    let mut _0: &std::option::Option<(i32, i32)>;
    let mut _1: std::option::Option<(i32, i32)>;
    let mut _2: (i32, i32);

    bb0: {
        _2 = (const 3_i32, const 42_i32);
        _1 = Option::<(i32, i32)>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Option<(i32, i32)> = {
    let mut _0: &std::option::Option<(i32, i32)>;
    let mut _1: std::option::Option<(i32, i32)>;
    let mut _2: (i32, i32);

    bb0: {
        _2 = (const 3_i32, const 42_i32);
        _1 = Option::<(i32, i32)>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &Option<(i32, i32)> = {
    let mut _0: &std::option::Option<(i32, i32)>;
    let mut _1: std::option::Option<(i32, i32)>;
    let mut _2: (i32, i32);

    bb0: {
        _2 = (const 3_i32, const 42_i32);
        _1 = Option::<(i32, i32)>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 3_i32, const 42_i32);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 3_i32, const 42_i32);
        _0 = &_1;
        return;
    }
}
