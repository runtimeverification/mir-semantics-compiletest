// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/inner-or-pat.rs:13:10: 13:10
    let _1: &str;                        // in scope 0 at ui/or-patterns/inner-or-pat.rs:14:9: 14:10
    let mut _2: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:16:16: 16:19
    let mut _3: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:16:22: 16:26
    let mut _4: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:16:29: 16:33
    let mut _5: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:16:37: 16:43
    let mut _6: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:16:46: 16:49
    let mut _7: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:16:54: 16:58
    let mut _8: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:16:61: 16:66
    let mut _9: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:16:71: 16:76
    let mut _10: bool;                   // in scope 0 at ui/or-patterns/inner-or-pat.rs:16:79: 16:83
    let mut _11: bool;                   // in scope 0 at ui/or-patterns/inner-or-pat.rs:17:14: 17:21
    let mut _12: bool;                   // in scope 0 at ui/or-patterns/inner-or-pat.rs:17:24: 17:30
    let mut _13: bool;                   // in scope 0 at ui/or-patterns/inner-or-pat.rs:18:14: 18:19
    let mut _14: bool;                   // in scope 0 at ui/or-patterns/inner-or-pat.rs:18:22: 18:28
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/or-patterns/inner-or-pat.rs:14:9: 14:10
        let _15: &str;                   // in scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        scope 2 {
            debug x => _15;              // in scope 2 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        }
    }

    bb0: {
        _1 = const "foo";                // scope 0 at ui/or-patterns/inner-or-pat.rs:14:13: 14:18
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:14:13: 14:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = <str as PartialEq>::eq(_1, const "h") -> bb1; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:16: 16:19
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:16: 16:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:16: 16:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb26]; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:16: 16:19
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "ho") -> bb3; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:22: 16:26
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:22: 16:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:22: 16:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb4, otherwise: bb27]; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:22: 16:26
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_1, const "yo") -> bb5; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:29: 16:33
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:29: 16:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:29: 16:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _4) -> [0: bb6, otherwise: bb28]; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:29: 16:33
    }

    bb6: {
        _5 = <str as PartialEq>::eq(_1, const "dude") -> bb7; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:37: 16:43
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:37: 16:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:37: 16:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _5) -> [0: bb8, otherwise: bb29]; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:37: 16:43
    }

    bb8: {
        _6 = <str as PartialEq>::eq(_1, const "w") -> bb9; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:46: 16:49
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:46: 16:49
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:46: 16:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _6) -> [0: bb10, otherwise: bb30]; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:46: 16:49
    }

    bb10: {
        _7 = <str as PartialEq>::eq(_1, const "no") -> bb11; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:54: 16:58
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:54: 16:58
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:54: 16:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _7) -> [0: bb12, otherwise: bb31]; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:54: 16:58
    }

    bb12: {
        _8 = <str as PartialEq>::eq(_1, const "nop") -> bb13; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:61: 16:66
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:61: 16:66
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:61: 16:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        switchInt(move _8) -> [0: bb14, otherwise: bb32]; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:61: 16:66
    }

    bb14: {
        _9 = <str as PartialEq>::eq(_1, const "hey") -> bb15; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:71: 16:76
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:71: 16:76
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:71: 16:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        switchInt(move _9) -> [0: bb16, otherwise: bb33]; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:71: 16:76
    }

    bb16: {
        _10 = <str as PartialEq>::eq(_1, const "gg") -> bb17; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:79: 16:83
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:79: 16:83
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:16:79: 16:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        switchInt(move _10) -> [0: bb18, otherwise: bb34]; // scope 1 at ui/or-patterns/inner-or-pat.rs:16:79: 16:83
    }

    bb18: {
        _11 = <str as PartialEq>::eq(_1, const "black") -> bb19; // scope 1 at ui/or-patterns/inner-or-pat.rs:17:14: 17:21
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:17:14: 17:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:17:14: 17:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        switchInt(move _11) -> [0: bb20, otherwise: bb35]; // scope 1 at ui/or-patterns/inner-or-pat.rs:17:14: 17:21
    }

    bb20: {
        _12 = <str as PartialEq>::eq(_1, const "pink") -> bb21; // scope 1 at ui/or-patterns/inner-or-pat.rs:17:24: 17:30
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:17:24: 17:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:17:24: 17:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        switchInt(move _12) -> [0: bb22, otherwise: bb36]; // scope 1 at ui/or-patterns/inner-or-pat.rs:17:24: 17:30
    }

    bb22: {
        _13 = <str as PartialEq>::eq(_1, const "red") -> bb23; // scope 1 at ui/or-patterns/inner-or-pat.rs:18:14: 18:19
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:18:14: 18:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:18:14: 18:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        switchInt(move _13) -> [0: bb24, otherwise: bb37]; // scope 1 at ui/or-patterns/inner-or-pat.rs:18:14: 18:19
    }

    bb24: {
        _14 = <str as PartialEq>::eq(_1, const "blue") -> bb25; // scope 1 at ui/or-patterns/inner-or-pat.rs:18:22: 18:28
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:18:22: 18:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:18:22: 18:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        switchInt(move _14) -> [0: bb39, otherwise: bb38]; // scope 1 at ui/or-patterns/inner-or-pat.rs:18:22: 18:28
    }

    bb26: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb27: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb28: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb29: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb30: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb31: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb32: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb33: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb34: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:16:9: 16:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb35: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:17:9: 17:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb36: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:17:9: 17:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb37: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:18:9: 18:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb38: {
        _15 = _1;                        // scope 1 at ui/or-patterns/inner-or-pat.rs:18:9: 18:10
        goto -> bb39;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:15:5: 21:6
    }

    bb39: {
        return;                          // scope 0 at ui/or-patterns/inner-or-pat.rs:22:2: 22:2
    }
}

fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/inner-or-pat.rs:24:10: 24:10
    let _1: &str;                        // in scope 0 at ui/or-patterns/inner-or-pat.rs:25:9: 25:10
    let mut _2: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:27:14: 27:19
    let mut _3: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:27:22: 27:27
    let mut _4: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:28:14: 28:19
    let mut _5: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:28:27: 28:33
    let mut _6: bool;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:28:40: 28:45
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/or-patterns/inner-or-pat.rs:25:9: 25:10
        let _7: &str;                    // in scope 1 at ui/or-patterns/inner-or-pat.rs:27:9: 27:10
        scope 2 {
            debug x => _7;               // in scope 2 at ui/or-patterns/inner-or-pat.rs:27:9: 27:10
        }
    }

    bb0: {
        _1 = const "foo";                // scope 0 at ui/or-patterns/inner-or-pat.rs:25:13: 25:18
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:25:13: 25:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = <str as PartialEq>::eq(_1, const "foo") -> bb1; // scope 1 at ui/or-patterns/inner-or-pat.rs:27:14: 27:19
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:27:14: 27:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:27:14: 27:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb10]; // scope 1 at ui/or-patterns/inner-or-pat.rs:27:14: 27:19
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "bar") -> bb3; // scope 1 at ui/or-patterns/inner-or-pat.rs:27:22: 27:27
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:27:22: 27:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:27:22: 27:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb4, otherwise: bb11]; // scope 1 at ui/or-patterns/inner-or-pat.rs:27:22: 27:27
    }

    bb4: {
        _4 = <str as PartialEq>::eq(_1, const "red") -> bb5; // scope 1 at ui/or-patterns/inner-or-pat.rs:28:14: 28:19
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:28:14: 28:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:28:14: 28:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _4) -> [0: bb6, otherwise: bb12]; // scope 1 at ui/or-patterns/inner-or-pat.rs:28:14: 28:19
    }

    bb6: {
        _5 = <str as PartialEq>::eq(_1, const "blue") -> bb7; // scope 1 at ui/or-patterns/inner-or-pat.rs:28:27: 28:33
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:28:27: 28:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:28:27: 28:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _5) -> [0: bb8, otherwise: bb13]; // scope 1 at ui/or-patterns/inner-or-pat.rs:28:27: 28:33
    }

    bb8: {
        _6 = <str as PartialEq>::eq(_1, const "red") -> bb9; // scope 1 at ui/or-patterns/inner-or-pat.rs:28:40: 28:45
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:28:40: 28:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:28:40: 28:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _6) -> [0: bb15, otherwise: bb14]; // scope 1 at ui/or-patterns/inner-or-pat.rs:28:40: 28:45
    }

    bb10: {
        _7 = _1;                         // scope 1 at ui/or-patterns/inner-or-pat.rs:27:9: 27:10
        goto -> bb15;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:26:5: 31:6
    }

    bb11: {
        _7 = _1;                         // scope 1 at ui/or-patterns/inner-or-pat.rs:27:9: 27:10
        goto -> bb15;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:26:5: 31:6
    }

    bb12: {
        _7 = _1;                         // scope 1 at ui/or-patterns/inner-or-pat.rs:28:10: 28:11
        goto -> bb15;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:26:5: 31:6
    }

    bb13: {
        _7 = _1;                         // scope 1 at ui/or-patterns/inner-or-pat.rs:28:23: 28:24
        goto -> bb15;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:26:5: 31:6
    }

    bb14: {
        _7 = _1;                         // scope 1 at ui/or-patterns/inner-or-pat.rs:28:36: 28:37
        goto -> bb15;                    // scope 1 at ui/or-patterns/inner-or-pat.rs:26:5: 31:6
    }

    bb15: {
        return;                          // scope 0 at ui/or-patterns/inner-or-pat.rs:32:2: 32:2
    }
}

fn don() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/inner-or-pat.rs:60:10: 60:10
    let _1: don::Foo;                    // in scope 0 at ui/or-patterns/inner-or-pat.rs:68:11: 68:15
    scope 1 {
        debug _foo => _1;                // in scope 1 at ui/or-patterns/inner-or-pat.rs:68:11: 68:15
    }

    bb0: {
        _1 = const Foo::A;               // scope 0 at ui/or-patterns/inner-or-pat.rs:68:11: 68:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/inner-or-pat.rs:68:11: 68:15
                                         // + literal: Const { ty: Foo, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/or-patterns/inner-or-pat.rs:71:2: 71:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/inner-or-pat.rs:73:10: 73:10

    bb0: {
        return;                          // scope 0 at ui/or-patterns/inner-or-pat.rs:73:12: 73:12
    }
}
