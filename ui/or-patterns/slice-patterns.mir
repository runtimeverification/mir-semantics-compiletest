// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/or-patterns/slice-patterns.rs:5:10: 5:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    let mut _3: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    let _4: &usize;                      // in scope 0 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    let mut _6: &str;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    let _7: &str;                        // in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
    let mut _9: &&usize;                 // in scope 0 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
    let _10: &&usize;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    let mut _12: &str;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    let _13: &str;                       // in scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    }

    bb1: {
        _11 = &mut (*_2);                // scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
        _13 = const "Wild";              // scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
        _0 = Formatter::<'_>::write_str(move _11, move _12) -> bb4; // scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:5:10: 5:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize); // scope 0 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _5 = &mut (*_2);                 // scope 1 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
        _7 = const "Arm";                // scope 1 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
        _10 = &_4;                       // scope 1 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _9 = _10;                        // scope 1 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/or-patterns/slice-patterns.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:5:10: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:5:15: 5:15
    }
}

fn <impl at ui/or-patterns/slice-patterns.rs:5:17: 5:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    debug other => _2;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _0: bool;                    // return place in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let _3: isize;                       // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _4: &MatchArm;               // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _6: &MatchArm;               // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _7: bool;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _8: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _9: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _10: bool;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _11: (&MatchArm, &MatchArm); // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _12: &MatchArm;              // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _13: &MatchArm;              // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _14: isize;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _15: isize;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _18: usize;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
    let mut _19: usize;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
    let mut _20: &MatchArm;              // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _21: &MatchArm;              // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _22: &MatchArm;              // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    let mut _23: &MatchArm;              // in scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        let _5: isize;                   // in scope 1 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
            let _16: &usize;             // in scope 2 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
            let _17: &usize;             // in scope 2 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
                debug __arg1_0 => _17;   // in scope 3 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _3 = discriminant((*_4));        // scope 0 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _6 = _2;                         // scope 1 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _5 = discriminant((*_6));        // scope 1 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _8 = _3;                         // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _9 = _5;                         // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _7 = Eq(move _8, move _9);       // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        goto -> bb3;                     // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _13 = _2;                        // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _11 = (move _12, move _13);      // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _20 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _15 = discriminant((*_20));      // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        switchInt(move _15) -> [0: bb4, otherwise: bb5]; // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    }

    bb3: {
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:5:26: 5:26
    }

    bb4: {
        _21 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        _14 = discriminant((*_21));      // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        goto -> bb7;                     // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    }

    bb6: {
        _22 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _16 = &(((*_22) as Arm).0: usize); // scope 2 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _23 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _17 = &(((*_23) as Arm).0: usize); // scope 2 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _18 = (*_16);                    // scope 3 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _19 = (*_17);                    // scope 3 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        _10 = Eq(move _18, move _19);    // scope 3 at ui/or-patterns/slice-patterns.rs:7:9: 7:14
        goto -> bb7;                     // scope 2 at ui/or-patterns/slice-patterns.rs:5:25: 5:26
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
        goto -> bb3;                     // scope 2 at ui/or-patterns/slice-patterns.rs:5:17: 5:26
    }
}

fn <impl at ui/or-patterns/slice-patterns.rs:11:10: 11:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    debug f => _2;                       // in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    let mut _4: &str;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    let mut _5: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    let _6: &str;                        // in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    let _7: &str;                        // in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    let _8: &str;                        // in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    let _9: &str;                        // in scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
        _5 = discriminant((*_1));        // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    }

    bb1: {
        _9 = const "Qux";                // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _9;                         // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/slice-patterns.rs:11:14: 11:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
    }

    bb3: {
        _6 = const "Foo";                // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/slice-patterns.rs:11:14: 11:15
    }

    bb4: {
        _7 = const "Bar";                // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/slice-patterns.rs:11:14: 11:15
    }

    bb5: {
        _8 = const "Baz";                // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/slice-patterns.rs:11:14: 11:15
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb7; // scope 0 at ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:11:10: 11:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:11:15: 11:15
    }
}

fn test(_1: &[Option<Test>]) -> MatchArm {
    debug foo => _1;                     // in scope 0 at ui/or-patterns/slice-patterns.rs:19:9: 19:12
    let mut _0: MatchArm;                // return place in scope 0 at ui/or-patterns/slice-patterns.rs:19:34: 19:42
    let mut _2: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:21:19: 21:28
    let mut _3: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:22:36: 22:45
    let mut _4: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:22:15: 22:24
    let mut _5: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:22:31: 22:58
    let mut _6: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:23:19: 23:28
    let mut _7: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:23:14: 23:41
    let mut _8: isize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:22:10: 22:25
    let mut _9: usize;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:22:9: 22:59
    let mut _10: usize;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:22:9: 22:59
    let mut _11: bool;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:22:9: 22:59
    let mut _12: isize;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:21:14: 21:41
    let mut _13: usize;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:21:9: 21:42
    let mut _14: usize;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:21:9: 21:42
    let mut _15: bool;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:21:9: 21:42

    bb0: {
        _13 = Len((*_1));                // scope 0 at ui/or-patterns/slice-patterns.rs:21:9: 21:42
        _14 = const 1_usize;             // scope 0 at ui/or-patterns/slice-patterns.rs:21:9: 21:42
        _15 = Ge(move _13, move _14);    // scope 0 at ui/or-patterns/slice-patterns.rs:21:9: 21:42
        switchInt(move _15) -> [0: bb9, otherwise: bb1]; // scope 0 at ui/or-patterns/slice-patterns.rs:21:9: 21:42
    }

    bb1: {
        _12 = discriminant((*_1)[-1 of 1]); // scope 0 at ui/or-patterns/slice-patterns.rs:20:11: 20:14
        switchInt(move _12) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/or-patterns/slice-patterns.rs:20:5: 20:14
    }

    bb2: {
        _9 = Len((*_1));                 // scope 0 at ui/or-patterns/slice-patterns.rs:22:9: 22:59
        _10 = const 2_usize;             // scope 0 at ui/or-patterns/slice-patterns.rs:22:9: 22:59
        _11 = Ge(move _9, move _10);     // scope 0 at ui/or-patterns/slice-patterns.rs:22:9: 22:59
        switchInt(move _11) -> [0: bb9, otherwise: bb4]; // scope 0 at ui/or-patterns/slice-patterns.rs:22:9: 22:59
    }

    bb3: {
        _2 = discriminant((((*_1)[-1 of 1] as Some).0: Test)); // scope 0 at ui/or-patterns/slice-patterns.rs:20:11: 20:14
        switchInt(move _2) -> [0: bb11, 3: bb11, otherwise: bb2]; // scope 0 at ui/or-patterns/slice-patterns.rs:20:5: 20:14
    }

    bb4: {
        _8 = discriminant((*_1)[0 of 2]); // scope 0 at ui/or-patterns/slice-patterns.rs:20:11: 20:14
        switchInt(move _8) -> [1: bb6, otherwise: bb5]; // scope 0 at ui/or-patterns/slice-patterns.rs:20:5: 20:14
    }

    bb5: {
        _7 = discriminant((*_1)[-2 of 2]); // scope 0 at ui/or-patterns/slice-patterns.rs:20:11: 20:14
        switchInt(move _7) -> [1: bb10, otherwise: bb9]; // scope 0 at ui/or-patterns/slice-patterns.rs:20:5: 20:14
    }

    bb6: {
        _5 = discriminant((*_1)[-1 of 2]); // scope 0 at ui/or-patterns/slice-patterns.rs:20:11: 20:14
        switchInt(move _5) -> [1: bb7, otherwise: bb5]; // scope 0 at ui/or-patterns/slice-patterns.rs:20:5: 20:14
    }

    bb7: {
        _4 = discriminant((((*_1)[0 of 2] as Some).0: Test)); // scope 0 at ui/or-patterns/slice-patterns.rs:20:11: 20:14
        switchInt(move _4) -> [0: bb8, otherwise: bb5]; // scope 0 at ui/or-patterns/slice-patterns.rs:20:5: 20:14
    }

    bb8: {
        _3 = discriminant((((*_1)[-1 of 2] as Some).0: Test)); // scope 0 at ui/or-patterns/slice-patterns.rs:20:11: 20:14
        switchInt(move _3) -> [1: bb12, 2: bb12, otherwise: bb5]; // scope 0 at ui/or-patterns/slice-patterns.rs:20:5: 20:14
    }

    bb9: {
        _0 = MatchArm::Wild;             // scope 0 at ui/or-patterns/slice-patterns.rs:24:14: 24:28
        goto -> bb14;                    // scope 0 at ui/or-patterns/slice-patterns.rs:24:14: 24:28
    }

    bb10: {
        _6 = discriminant((((*_1)[-2 of 2] as Some).0: Test)); // scope 0 at ui/or-patterns/slice-patterns.rs:20:11: 20:14
        switchInt(move _6) -> [1: bb13, 2: bb13, otherwise: bb9]; // scope 0 at ui/or-patterns/slice-patterns.rs:20:5: 20:14
    }

    bb11: {
        _0 = MatchArm::Arm(const 0_usize); // scope 0 at ui/or-patterns/slice-patterns.rs:21:46: 21:62
        goto -> bb14;                    // scope 0 at ui/or-patterns/slice-patterns.rs:21:46: 21:62
    }

    bb12: {
        _0 = MatchArm::Arm(const 1_usize); // scope 0 at ui/or-patterns/slice-patterns.rs:22:63: 22:79
        goto -> bb14;                    // scope 0 at ui/or-patterns/slice-patterns.rs:22:63: 22:79
    }

    bb13: {
        _0 = MatchArm::Arm(const 2_usize); // scope 0 at ui/or-patterns/slice-patterns.rs:23:49: 23:65
        goto -> bb14;                    // scope 0 at ui/or-patterns/slice-patterns.rs:23:49: 23:65
    }

    bb14: {
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:26:2: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/slice-patterns.rs:28:11: 28:11
    let _1: std::vec::Vec<std::option::Option<Test>>; // in scope 0 at ui/or-patterns/slice-patterns.rs:29:9: 29:12
    let mut _2: std::boxed::Box<[std::option::Option<Test>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[std::option::Option<Test>; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[std::option::Option<Test>; 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:30:9: 30:24
    let mut _9: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:31:9: 31:24
    let mut _10: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:32:9: 32:24
    let mut _11: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:33:9: 33:24
    let mut _12: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _13: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _14: MatchArm;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:37:16: 37:26
    let mut _15: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:37:21: 37:25
    let _16: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:37:21: 37:25
    let mut _17: &std::vec::Vec<std::option::Option<Test>>; // in scope 0 at ui/or-patterns/slice-patterns.rs:37:21: 37:25
    let _18: &std::vec::Vec<std::option::Option<Test>>; // in scope 0 at ui/or-patterns/slice-patterns.rs:37:21: 37:25
    let mut _19: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _24: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _25: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _27: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _28: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _29: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _30: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _31: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _32: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _34: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _35: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _36: MatchArm;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:39:16: 39:57
    let mut _37: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
    let mut _38: &[std::option::Option<Test>; 2]; // in scope 0 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
    let _39: &[std::option::Option<Test>; 2]; // in scope 0 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
    let mut _40: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _45: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _46: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _48: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _49: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _50: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _51: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _52: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _53: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _55: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _56: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _57: MatchArm;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:41:16: 41:31
    let mut _58: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:41:21: 41:30
    let _59: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:41:21: 41:30
    let _60: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:41:22: 41:30
    let mut _61: &std::vec::Vec<std::option::Option<Test>>; // in scope 0 at ui/or-patterns/slice-patterns.rs:41:22: 41:25
    let mut _62: std::ops::RangeTo<usize>; // in scope 0 at ui/or-patterns/slice-patterns.rs:41:26: 41:29
    let mut _63: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _68: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _69: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _71: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _72: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _73: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _74: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _75: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _76: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _78: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _79: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _80: MatchArm;                   // in scope 0 at ui/or-patterns/slice-patterns.rs:43:16: 43:74
    let mut _81: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
    let mut _82: &[std::option::Option<Test>; 3]; // in scope 0 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
    let _83: &[std::option::Option<Test>; 3]; // in scope 0 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
    let mut _84: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _89: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _90: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _92: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _93: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _94: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _95: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _96: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _97: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _99: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _100: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _101: MatchArm;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:45:16: 45:32
    let mut _102: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:45:21: 45:31
    let _103: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:45:21: 45:31
    let _104: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:45:22: 45:31
    let mut _105: &std::vec::Vec<std::option::Option<Test>>; // in scope 0 at ui/or-patterns/slice-patterns.rs:45:22: 45:25
    let mut _106: std::ops::Range<usize>; // in scope 0 at ui/or-patterns/slice-patterns.rs:45:26: 45:30
    let mut _107: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _110: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _111: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _112: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _113: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _115: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _116: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _117: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _118: &MatchArm;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _119: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _120: &MatchArm;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _122: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _123: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _124: MatchArm;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:47:16: 47:91
    let mut _125: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
    let mut _126: &[std::option::Option<Test>; 4]; // in scope 0 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
    let _127: &[std::option::Option<Test>; 4]; // in scope 0 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
    let mut _128: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _131: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _132: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _133: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _134: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _136: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _137: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _138: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _139: &MatchArm;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _140: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _141: &MatchArm;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _143: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _144: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _145: MatchArm;                  // in scope 0 at ui/or-patterns/slice-patterns.rs:50:16: 50:31
    let mut _146: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:50:21: 50:30
    let _147: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:50:21: 50:30
    let _148: &[std::option::Option<Test>]; // in scope 0 at ui/or-patterns/slice-patterns.rs:50:22: 50:30
    let mut _149: &std::vec::Vec<std::option::Option<Test>>; // in scope 0 at ui/or-patterns/slice-patterns.rs:50:22: 50:25
    let mut _150: std::ops::RangeFrom<usize>; // in scope 0 at ui/or-patterns/slice-patterns.rs:50:26: 50:29
    let mut _151: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _154: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _155: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _156: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _157: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _159: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _160: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _161: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _162: &MatchArm;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _163: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _164: &MatchArm;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _165: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _176: *const [std::option::Option<Test>; 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/or-patterns/slice-patterns.rs:29:9: 29:12
        let _20: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _21: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _41: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _42: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _64: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _65: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _85: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _86: &MatchArm;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _108: &MatchArm;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _109: &MatchArm;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _129: &MatchArm;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _130: &MatchArm;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _152: &MatchArm;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _153: &MatchArm;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _166: &MatchArm;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _167: &MatchArm;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _168: &[std::option::Option<Test>; 4]; // in scope 1 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
        let mut _169: &MatchArm;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _170: &MatchArm;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _171: &[std::option::Option<Test>; 3]; // in scope 1 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
        let mut _172: &MatchArm;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _173: &MatchArm;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _174: &[std::option::Option<Test>; 2]; // in scope 1 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
        let mut _175: &MatchArm;         // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _20;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _21;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _26: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _26;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug left_val => _41;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _42;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _47: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _47;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 7 {
            debug left_val => _64;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _65;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _70: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 8 {
                debug kind => _70;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 9 {
            debug left_val => _85;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _86;      // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _91: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 10 {
                debug kind => _91;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 11 {
            debug left_val => _108;      // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _109;     // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _114: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 12 {
                debug kind => _114;      // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 13 {
            debug left_val => _129;      // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _130;     // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _135: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 14 {
                debug kind => _135;      // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 15 {
            debug left_val => _152;      // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _153;     // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _158: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 16 {
                debug kind => _158;      // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [std::option::Option<Test>; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = const Option::<Test>::Some(Test::Foo); // scope 0 at ui/or-patterns/slice-patterns.rs:30:9: 30:24
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:30:9: 30:24
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x00)) }
        _9 = const Option::<Test>::Some(Test::Bar); // scope 0 at ui/or-patterns/slice-patterns.rs:31:9: 31:24
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:31:9: 31:24
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x01)) }
        _10 = const Option::<Test>::Some(Test::Baz); // scope 0 at ui/or-patterns/slice-patterns.rs:32:9: 32:24
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:32:9: 32:24
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x02)) }
        _11 = const Option::<Test>::Some(Test::Qux); // scope 0 at ui/or-patterns/slice-patterns.rs:33:9: 33:24
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:33:9: 33:24
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x03)) }
        _176 = (((_7.0: std::ptr::Unique<[std::option::Option<Test>; 4]>).0: std::ptr::NonNull<[std::option::Option<Test>; 4]>).0: *const [std::option::Option<Test>; 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_176) = [move _8, move _9, move _10, move _11]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[std::option::Option<Test>]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [Option<Test>]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[Option<Test>]>) -> Vec<Option<Test>> {slice::<impl [Option<Test>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = &_1;                       // scope 1 at ui/or-patterns/slice-patterns.rs:37:21: 37:25
        _17 = _18;                       // scope 1 at ui/or-patterns/slice-patterns.rs:37:21: 37:25
        _16 = <Vec<Option<Test>> as Deref>::deref(move _17) -> [return: bb3, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:37:21: 37:25
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:37:21: 37:25
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Option<Test>>) -> &'a <Vec<Option<Test>> as Deref>::Target {<Vec<Option<Test>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = _16;                       // scope 1 at ui/or-patterns/slice-patterns.rs:37:21: 37:25
        _14 = test(move _15) -> [return: bb4, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:37:16: 37:26
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:37:16: 37:20
                                         // + literal: Const { ty: for<'a> fn(&'a [Option<Test>]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = &_14;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _175 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[9])) }
        _19 = _175;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _12 = (move _13, move _19);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _20 = (_12.0: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _21 = (_12.1: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _24 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _25 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _23 = <MatchArm as PartialEq>::eq(move _24, move _25) -> [return: bb5, unwind: bb36]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = Not(move _23);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _22) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _26 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _27 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _28, move _29, move _31, move _33) -> bb36; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb7: {
        _174 = const _;                  // scope 1 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:39:21: 39:56
                                         // + literal: Const { ty: &[Option<Test>; 2], val: Unevaluated(main, [], Some(promoted[8])) }
        _39 = _174;                      // scope 1 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
        _38 = _39;                       // scope 1 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
        _37 = move _38 as &[std::option::Option<Test>] (Pointer(Unsize)); // scope 1 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
        _36 = test(move _37) -> [return: bb8, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:39:16: 39:57
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:39:16: 39:20
                                         // + literal: Const { ty: for<'a> fn(&'a [Option<Test>]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb8: {
        _35 = &_36;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _173 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[7])) }
        _40 = _173;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _34 = (move _35, move _40);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _41 = (_34.0: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _42 = (_34.1: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _45 = _41;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _46 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _44 = <MatchArm as PartialEq>::eq(move _45, move _46) -> [return: bb9, unwind: bb36]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _43 = Not(move _44);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _43) -> [0: bb11, otherwise: bb10]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _47 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _48 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _49, move _50, move _52, move _54) -> bb36; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb11: {
        _61 = &_1;                       // scope 1 at ui/or-patterns/slice-patterns.rs:41:22: 41:25
        _62 = const RangeTo::<usize> {{ end: 3_usize }}; // scope 1 at ui/or-patterns/slice-patterns.rs:41:26: 41:29
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:41:26: 41:29
                                         // + literal: Const { ty: RangeTo<usize>, val: Value(Scalar(0x0000000000000003)) }
        _60 = <Vec<Option<Test>> as Index<RangeTo<usize>>>::index(move _61, move _62) -> [return: bb12, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:41:22: 41:30
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:41:22: 41:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Option<Test>>, RangeTo<usize>) -> &'a <Vec<Option<Test>> as Index<RangeTo<usize>>>::Output {<Vec<Option<Test>> as Index<RangeTo<usize>>>::index}, val: Value(<ZST>) }
    }

    bb12: {
        _59 = _60;                       // scope 1 at ui/or-patterns/slice-patterns.rs:41:21: 41:30
        _58 = _59;                       // scope 1 at ui/or-patterns/slice-patterns.rs:41:21: 41:30
        _57 = test(move _58) -> [return: bb13, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:41:16: 41:31
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:41:16: 41:20
                                         // + literal: Const { ty: for<'a> fn(&'a [Option<Test>]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb13: {
        _56 = &_57;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _172 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[6])) }
        _63 = _172;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _55 = (move _56, move _63);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _64 = (_55.0: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _65 = (_55.1: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _68 = _64;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _69 = _65;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _67 = <MatchArm as PartialEq>::eq(move _68, move _69) -> [return: bb14, unwind: bb36]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _66 = Not(move _67);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _66) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _70 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _74 = _64;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _73 = _74;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _65;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = _76;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _77 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _71 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _72, move _73, move _75, move _77) -> bb36; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb16: {
        _171 = const _;                  // scope 1 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:43:21: 43:73
                                         // + literal: Const { ty: &[Option<Test>; 3], val: Unevaluated(main, [], Some(promoted[5])) }
        _83 = _171;                      // scope 1 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
        _82 = _83;                       // scope 1 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
        _81 = move _82 as &[std::option::Option<Test>] (Pointer(Unsize)); // scope 1 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
        _80 = test(move _81) -> [return: bb17, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:43:16: 43:74
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:43:16: 43:20
                                         // + literal: Const { ty: for<'a> fn(&'a [Option<Test>]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb17: {
        _79 = &_80;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _170 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[4])) }
        _84 = _170;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _78 = (move _79, move _84);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _85 = (_78.0: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _86 = (_78.1: &MatchArm);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _89 = _85;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _90 = _86;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _88 = <MatchArm as PartialEq>::eq(move _89, move _90) -> [return: bb18, unwind: bb36]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _87 = Not(move _88);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _87) -> [0: bb20, otherwise: bb19]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _91 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _95 = _85;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _95;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _86;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = _97;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _92 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _93, move _94, move _96, move _98) -> bb36; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb20: {
        _105 = &_1;                      // scope 1 at ui/or-patterns/slice-patterns.rs:45:22: 45:25
        _106 = std::ops::Range::<usize> { start: const 1_usize, end: const 3_usize }; // scope 1 at ui/or-patterns/slice-patterns.rs:45:26: 45:30
        _104 = <Vec<Option<Test>> as Index<std::ops::Range<usize>>>::index(move _105, move _106) -> [return: bb21, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:45:22: 45:31
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:45:22: 45:31
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Option<Test>>, std::ops::Range<usize>) -> &'a <Vec<Option<Test>> as Index<std::ops::Range<usize>>>::Output {<Vec<Option<Test>> as Index<std::ops::Range<usize>>>::index}, val: Value(<ZST>) }
    }

    bb21: {
        _103 = _104;                     // scope 1 at ui/or-patterns/slice-patterns.rs:45:21: 45:31
        _102 = _103;                     // scope 1 at ui/or-patterns/slice-patterns.rs:45:21: 45:31
        _101 = test(move _102) -> [return: bb22, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:45:16: 45:32
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:45:16: 45:20
                                         // + literal: Const { ty: for<'a> fn(&'a [Option<Test>]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb22: {
        _100 = &_101;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _169 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[3])) }
        _107 = _169;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _99 = (move _100, move _107);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _108 = (_99.0: &MatchArm);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _109 = (_99.1: &MatchArm);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _112 = _108;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _113 = _109;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _111 = <MatchArm as PartialEq>::eq(move _112, move _113) -> [return: bb23, unwind: bb36]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _110 = Not(move _111);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _110) -> [0: bb25, otherwise: bb24]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _114 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _116 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _118 = _108;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _117 = _118;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _120 = _109;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _119 = _120;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _121 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _115 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _116, move _117, move _119, move _121) -> bb36; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb25: {
        _168 = const _;                  // scope 1 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:47:21: 47:90
                                         // + literal: Const { ty: &[Option<Test>; 4], val: Unevaluated(main, [], Some(promoted[2])) }
        _127 = _168;                     // scope 1 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
        _126 = _127;                     // scope 1 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
        _125 = move _126 as &[std::option::Option<Test>] (Pointer(Unsize)); // scope 1 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
        _124 = test(move _125) -> [return: bb26, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:47:16: 47:91
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:47:16: 47:20
                                         // + literal: Const { ty: for<'a> fn(&'a [Option<Test>]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb26: {
        _123 = &_124;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _167 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[1])) }
        _128 = _167;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _122 = (move _123, move _128);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _129 = (_122.0: &MatchArm);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _130 = (_122.1: &MatchArm);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _133 = _129;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _134 = _130;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _132 = <MatchArm as PartialEq>::eq(move _133, move _134) -> [return: bb27, unwind: bb36]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb27: {
        _131 = Not(move _132);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _131) -> [0: bb29, otherwise: bb28]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _135 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _137 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _139 = _129;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _138 = _139;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _141 = _130;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _140 = _141;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _142 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _136 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _137, move _138, move _140, move _142) -> bb36; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb29: {
        _149 = &_1;                      // scope 1 at ui/or-patterns/slice-patterns.rs:50:22: 50:25
        _150 = const RangeFrom::<usize> {{ start: 4_usize }}; // scope 1 at ui/or-patterns/slice-patterns.rs:50:26: 50:29
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:50:26: 50:29
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000004)) }
        _148 = <Vec<Option<Test>> as Index<RangeFrom<usize>>>::index(move _149, move _150) -> [return: bb30, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:50:22: 50:30
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:50:22: 50:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Option<Test>>, RangeFrom<usize>) -> &'a <Vec<Option<Test>> as Index<RangeFrom<usize>>>::Output {<Vec<Option<Test>> as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb30: {
        _147 = _148;                     // scope 1 at ui/or-patterns/slice-patterns.rs:50:21: 50:30
        _146 = _147;                     // scope 1 at ui/or-patterns/slice-patterns.rs:50:21: 50:30
        _145 = test(move _146) -> [return: bb31, unwind: bb36]; // scope 1 at ui/or-patterns/slice-patterns.rs:50:16: 50:31
                                         // mir::Constant
                                         // + span: ui/or-patterns/slice-patterns.rs:50:16: 50:20
                                         // + literal: Const { ty: for<'a> fn(&'a [Option<Test>]) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb31: {
        _144 = &_145;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _166 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[0])) }
        _151 = _166;                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _143 = (move _144, move _151);   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _152 = (_143.0: &MatchArm);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _153 = (_143.1: &MatchArm);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _156 = _152;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _157 = _153;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _155 = <MatchArm as PartialEq>::eq(move _156, move _157) -> [return: bb32, unwind: bb36]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb32: {
        _154 = Not(move _155);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _154) -> [0: bb34, otherwise: bb33]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb33: {
        _158 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _160 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _162 = _152;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _161 = _162;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _164 = _153;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _163 = _164;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _165 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _159 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _160, move _161, move _163, move _165) -> bb36; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_1) -> bb35;                // scope 0 at ui/or-patterns/slice-patterns.rs:51:1: 51:2
    }

    bb35: {
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:51:2: 51:2
    }

    bb36 (cleanup): {
        drop(_1) -> bb37;                // scope 0 at ui/or-patterns/slice-patterns.rs:51:1: 51:2
    }

    bb37 (cleanup): {
        resume;                          // scope 0 at ui/or-patterns/slice-patterns.rs:28:1: 51:2
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/slice-patterns.rs:50:33: 50:47

    bb0: {
        _1 = MatchArm::Wild;             // scope 0 at ui/or-patterns/slice-patterns.rs:50:33: 50:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/slice-patterns.rs:48:9: 48:25

    bb0: {
        _1 = MatchArm::Arm(const 2_usize); // scope 0 at ui/or-patterns/slice-patterns.rs:48:9: 48:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &[Option<Test>; 4] = {
    let mut _0: &[std::option::Option<Test>; 4]; // return place in scope 0 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
    let mut _1: [std::option::Option<Test>; 4]; // in scope 0 at ui/or-patterns/slice-patterns.rs:47:22: 47:90
    let mut _2: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:47:23: 47:38
    let mut _3: Test;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:47:28: 47:37
    let mut _4: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:47:40: 47:55
    let mut _5: Test;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:47:45: 47:54
    let mut _6: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:47:57: 47:72
    let mut _7: Test;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:47:62: 47:71
    let mut _8: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:47:74: 47:89
    let mut _9: Test;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:47:79: 47:88

    bb0: {
        _3 = Test::Bar;                  // scope 0 at ui/or-patterns/slice-patterns.rs:47:28: 47:37
        _2 = Option::<Test>::Some(move _3); // scope 0 at ui/or-patterns/slice-patterns.rs:47:23: 47:38
        _5 = Test::Baz;                  // scope 0 at ui/or-patterns/slice-patterns.rs:47:45: 47:54
        _4 = Option::<Test>::Some(move _5); // scope 0 at ui/or-patterns/slice-patterns.rs:47:40: 47:55
        _7 = Test::Baz;                  // scope 0 at ui/or-patterns/slice-patterns.rs:47:62: 47:71
        _6 = Option::<Test>::Some(move _7); // scope 0 at ui/or-patterns/slice-patterns.rs:47:57: 47:72
        _9 = Test::Bar;                  // scope 0 at ui/or-patterns/slice-patterns.rs:47:79: 47:88
        _8 = Option::<Test>::Some(move _9); // scope 0 at ui/or-patterns/slice-patterns.rs:47:74: 47:89
        _1 = [move _2, move _4, move _6, move _8]; // scope 0 at ui/or-patterns/slice-patterns.rs:47:22: 47:90
        _0 = &_1;                        // scope 0 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:47:21: 47:90
    }
}

promoted[3] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/slice-patterns.rs:45:34: 45:50

    bb0: {
        _1 = MatchArm::Arm(const 2_usize); // scope 0 at ui/or-patterns/slice-patterns.rs:45:34: 45:50
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/slice-patterns.rs:43:76: 43:92

    bb0: {
        _1 = MatchArm::Arm(const 1_usize); // scope 0 at ui/or-patterns/slice-patterns.rs:43:76: 43:92
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &[Option<Test>; 3] = {
    let mut _0: &[std::option::Option<Test>; 3]; // return place in scope 0 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
    let mut _1: [std::option::Option<Test>; 3]; // in scope 0 at ui/or-patterns/slice-patterns.rs:43:22: 43:73
    let mut _2: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:43:23: 43:38
    let mut _3: Test;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:43:28: 43:37
    let mut _4: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:43:40: 43:55
    let mut _5: Test;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:43:45: 43:54
    let mut _6: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:43:57: 43:72
    let mut _7: Test;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:43:62: 43:71

    bb0: {
        _3 = Test::Foo;                  // scope 0 at ui/or-patterns/slice-patterns.rs:43:28: 43:37
        _2 = Option::<Test>::Some(move _3); // scope 0 at ui/or-patterns/slice-patterns.rs:43:23: 43:38
        _5 = Test::Foo;                  // scope 0 at ui/or-patterns/slice-patterns.rs:43:45: 43:54
        _4 = Option::<Test>::Some(move _5); // scope 0 at ui/or-patterns/slice-patterns.rs:43:40: 43:55
        _7 = Test::Bar;                  // scope 0 at ui/or-patterns/slice-patterns.rs:43:62: 43:71
        _6 = Option::<Test>::Some(move _7); // scope 0 at ui/or-patterns/slice-patterns.rs:43:57: 43:72
        _1 = [move _2, move _4, move _6]; // scope 0 at ui/or-patterns/slice-patterns.rs:43:22: 43:73
        _0 = &_1;                        // scope 0 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:43:21: 43:73
    }
}

promoted[6] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/slice-patterns.rs:41:33: 41:49

    bb0: {
        _1 = MatchArm::Arm(const 1_usize); // scope 0 at ui/or-patterns/slice-patterns.rs:41:33: 41:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/slice-patterns.rs:39:59: 39:75

    bb0: {
        _1 = MatchArm::Arm(const 0_usize); // scope 0 at ui/or-patterns/slice-patterns.rs:39:59: 39:75
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[8] in main: &[Option<Test>; 2] = {
    let mut _0: &[std::option::Option<Test>; 2]; // return place in scope 0 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
    let mut _1: [std::option::Option<Test>; 2]; // in scope 0 at ui/or-patterns/slice-patterns.rs:39:22: 39:56
    let mut _2: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:39:23: 39:38
    let mut _3: Test;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:39:28: 39:37
    let mut _4: std::option::Option<Test>; // in scope 0 at ui/or-patterns/slice-patterns.rs:39:40: 39:55
    let mut _5: Test;                    // in scope 0 at ui/or-patterns/slice-patterns.rs:39:45: 39:54

    bb0: {
        _3 = Test::Bar;                  // scope 0 at ui/or-patterns/slice-patterns.rs:39:28: 39:37
        _2 = Option::<Test>::Some(move _3); // scope 0 at ui/or-patterns/slice-patterns.rs:39:23: 39:38
        _5 = Test::Foo;                  // scope 0 at ui/or-patterns/slice-patterns.rs:39:45: 39:54
        _4 = Option::<Test>::Some(move _5); // scope 0 at ui/or-patterns/slice-patterns.rs:39:40: 39:55
        _1 = [move _2, move _4];         // scope 0 at ui/or-patterns/slice-patterns.rs:39:22: 39:56
        _0 = &_1;                        // scope 0 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:39:21: 39:56
    }
}

promoted[9] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/slice-patterns.rs:37:28: 37:44

    bb0: {
        _1 = MatchArm::Arm(const 0_usize); // scope 0 at ui/or-patterns/slice-patterns.rs:37:28: 37:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/or-patterns/slice-patterns.rs:7:5: 7:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/or-patterns/slice-patterns.rs:7:5: 7:8
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:7:5: 7:8
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/or-patterns/slice-patterns.rs:7:5: 7:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/or-patterns/slice-patterns.rs:7:5: 7:8
        return;                          // scope 0 at ui/or-patterns/slice-patterns.rs:7:5: 7:8
    }
}
