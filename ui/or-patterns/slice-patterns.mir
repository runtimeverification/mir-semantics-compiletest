// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/or-patterns/slice-patterns.rs:5:10: 5:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &str;
    scope 1 {
        debug __self_0 => _4;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Wild";
        _0 = Formatter::<'_>::write_str(_2, _8) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize);
        _5 = const "Arm";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn <impl at ui/or-patterns/slice-patterns.rs:5:17: 5:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&MatchArm, &MatchArm);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &MatchArm;
    let mut _15: &MatchArm;
    let mut _16: &MatchArm;
    let mut _17: &MatchArm;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &usize;
            let _11: &usize;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _14 = deref_copy (_7.0: &MatchArm);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _15 = deref_copy (_7.1: &MatchArm);
        _8 = discriminant((*_15));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb7;
    }

    bb6: {
        _16 = deref_copy (_7.0: &MatchArm);
        _10 = &(((*_16) as Arm).0: usize);
        _17 = deref_copy (_7.1: &MatchArm);
        _11 = &(((*_17) as Arm).0: usize);
        _12 = (*_10);
        _13 = (*_11);
        _6 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/or-patterns/slice-patterns.rs:11:10: 11:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;
    let _8: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Qux";
        _3 = _8;
        goto -> bb6;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "Foo";
        _3 = _5;
        goto -> bb6;
    }

    bb4: {
        _6 = const "Bar";
        _3 = _6;
        goto -> bb6;
    }

    bb5: {
        _7 = const "Baz";
        _3 = _7;
        goto -> bb6;
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

fn test(_1: &[Option<Test>]) -> MatchArm {
    debug foo => _1;
    let mut _0: MatchArm;
    let mut _2: isize;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;
    let mut _9: usize;
    let mut _10: usize;
    let mut _11: bool;
    let mut _12: isize;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;

    bb0: {
        _13 = Len((*_1));
        _14 = const 1_usize;
        _15 = Ge(move _13, move _14);
        switchInt(move _15) -> [0: bb9, otherwise: bb1];
    }

    bb1: {
        _12 = discriminant((*_1)[-1 of 1]);
        switchInt(move _12) -> [1: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = Len((*_1));
        _10 = const 2_usize;
        _11 = Ge(move _9, move _10);
        switchInt(move _11) -> [0: bb9, otherwise: bb4];
    }

    bb3: {
        _2 = discriminant((((*_1)[-1 of 1] as Some).0: Test));
        switchInt(move _2) -> [0: bb11, 3: bb11, otherwise: bb2];
    }

    bb4: {
        _8 = discriminant((*_1)[0 of 2]);
        switchInt(move _8) -> [1: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = discriminant((*_1)[-2 of 2]);
        switchInt(move _7) -> [1: bb10, otherwise: bb9];
    }

    bb6: {
        _5 = discriminant((*_1)[-1 of 2]);
        switchInt(move _5) -> [1: bb7, otherwise: bb5];
    }

    bb7: {
        _4 = discriminant((((*_1)[0 of 2] as Some).0: Test));
        switchInt(move _4) -> [0: bb8, otherwise: bb5];
    }

    bb8: {
        _3 = discriminant((((*_1)[-1 of 2] as Some).0: Test));
        switchInt(move _3) -> [1: bb12, 2: bb12, otherwise: bb5];
    }

    bb9: {
        _0 = MatchArm::Wild;
        goto -> bb14;
    }

    bb10: {
        _6 = discriminant((((*_1)[-2 of 2] as Some).0: Test));
        switchInt(move _6) -> [1: bb13, 2: bb13, otherwise: bb9];
    }

    bb11: {
        _0 = MatchArm::Arm(const 0_usize);
        goto -> bb14;
    }

    bb12: {
        _0 = MatchArm::Arm(const 1_usize);
        goto -> bb14;
    }

    bb13: {
        _0 = MatchArm::Arm(const 2_usize);
        goto -> bb14;
    }

    bb14: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<std::option::Option<Test>>;
    let mut _2: std::boxed::Box<[std::option::Option<Test>]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[std::option::Option<Test>; 4]>;
    let mut _7: std::option::Option<Test>;
    let mut _8: Test;
    let mut _9: std::option::Option<Test>;
    let mut _10: Test;
    let mut _11: std::option::Option<Test>;
    let mut _12: Test;
    let mut _13: std::option::Option<Test>;
    let mut _14: Test;
    let mut _15: (&MatchArm, &MatchArm);
    let mut _16: &MatchArm;
    let _17: MatchArm;
    let mut _18: &[std::option::Option<Test>];
    let _19: &[std::option::Option<Test>];
    let _20: &std::vec::Vec<std::option::Option<Test>>;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&MatchArm, &MatchArm);
    let mut _29: &MatchArm;
    let _30: MatchArm;
    let mut _31: &[std::option::Option<Test>];
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&MatchArm, &MatchArm);
    let mut _40: &MatchArm;
    let _41: MatchArm;
    let _42: &[std::option::Option<Test>];
    let _43: &[std::option::Option<Test>];
    let mut _44: &std::vec::Vec<std::option::Option<Test>>;
    let mut _45: std::ops::RangeTo<usize>;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&MatchArm, &MatchArm);
    let mut _54: &MatchArm;
    let _55: MatchArm;
    let mut _56: &[std::option::Option<Test>];
    let mut _59: bool;
    let mut _60: bool;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: (&MatchArm, &MatchArm);
    let mut _65: &MatchArm;
    let _66: MatchArm;
    let _67: &[std::option::Option<Test>];
    let _68: &[std::option::Option<Test>];
    let mut _69: &std::vec::Vec<std::option::Option<Test>>;
    let mut _70: std::ops::Range<usize>;
    let mut _73: bool;
    let mut _74: bool;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: (&MatchArm, &MatchArm);
    let mut _79: &MatchArm;
    let _80: MatchArm;
    let mut _81: &[std::option::Option<Test>];
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&MatchArm, &MatchArm);
    let mut _90: &MatchArm;
    let _91: MatchArm;
    let _92: &[std::option::Option<Test>];
    let _93: &[std::option::Option<Test>];
    let mut _94: &std::vec::Vec<std::option::Option<Test>>;
    let mut _95: std::ops::RangeFrom<usize>;
    let mut _98: bool;
    let mut _99: bool;
    let _101: !;
    let mut _102: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: *const [std::option::Option<Test>; 4];
    let mut _114: *const ();
    let mut _115: usize;
    let mut _116: usize;
    let mut _117: usize;
    let mut _118: usize;
    let mut _119: bool;
    scope 1 {
        debug foo => _1;
        let _21: &MatchArm;
        let _22: &MatchArm;
        let _32: &MatchArm;
        let _33: &MatchArm;
        let _46: &MatchArm;
        let _47: &MatchArm;
        let _57: &MatchArm;
        let _58: &MatchArm;
        let _71: &MatchArm;
        let _72: &MatchArm;
        let _82: &MatchArm;
        let _83: &MatchArm;
        let _96: &MatchArm;
        let _97: &MatchArm;
        let mut _103: &MatchArm;
        let mut _104: &MatchArm;
        let mut _105: &[std::option::Option<Test>; 4];
        let mut _106: &MatchArm;
        let mut _107: &MatchArm;
        let mut _108: &[std::option::Option<Test>; 3];
        let mut _109: &MatchArm;
        let mut _110: &MatchArm;
        let mut _111: &[std::option::Option<Test>; 2];
        let mut _112: &MatchArm;
        scope 3 {
            debug left_val => _21;
            debug right_val => _22;
            let _25: core::panicking::AssertKind;
            scope 4 {
                debug kind => _25;
            }
        }
        scope 5 {
            debug left_val => _32;
            debug right_val => _33;
            let _36: core::panicking::AssertKind;
            scope 6 {
                debug kind => _36;
            }
        }
        scope 7 {
            debug left_val => _46;
            debug right_val => _47;
            let _50: core::panicking::AssertKind;
            scope 8 {
                debug kind => _50;
            }
        }
        scope 9 {
            debug left_val => _57;
            debug right_val => _58;
            let _61: core::panicking::AssertKind;
            scope 10 {
                debug kind => _61;
            }
        }
        scope 11 {
            debug left_val => _71;
            debug right_val => _72;
            let _75: core::panicking::AssertKind;
            scope 12 {
                debug kind => _75;
            }
        }
        scope 13 {
            debug left_val => _82;
            debug right_val => _83;
            let _86: core::panicking::AssertKind;
            scope 14 {
                debug kind => _86;
            }
        }
        scope 15 {
            debug left_val => _96;
            debug right_val => _97;
            let _100: core::panicking::AssertKind;
            scope 16 {
                debug kind => _100;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([std::option::Option<Test>; 4]);
        _4 = AlignOf([std::option::Option<Test>; 4]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [std::option::Option<Test>; 4]);
        _8 = Test::Foo;
        _7 = Option::<Test>::Some(move _8);
        _10 = Test::Bar;
        _9 = Option::<Test>::Some(move _10);
        _12 = Test::Baz;
        _11 = Option::<Test>::Some(move _12);
        _14 = Test::Qux;
        _13 = Option::<Test>::Some(move _14);
        _113 = (((_6.0: std::ptr::Unique<[std::option::Option<Test>; 4]>).0: std::ptr::NonNull<[std::option::Option<Test>; 4]>).0: *const [std::option::Option<Test>; 4]);
        _114 = _113 as *const () (PtrToPtr);
        _115 = _114 as usize (Transmute);
        _116 = AlignOf(std::option::Option<Test>);
        _117 = Sub(_116, const 1_usize);
        _118 = BitAnd(_115, _117);
        _119 = Eq(_118, const 0_usize);
        assert(_119, "misaligned pointer dereference: address must be a multiple of {} but is {}", _116, _115) -> [success: bb38, unwind unreachable];
    }

    bb2: {
        _20 = &_1;
        _19 = <Vec<Option<Test>> as Deref>::deref(_20) -> [return: bb3, unwind: bb36];
    }

    bb3: {
        _18 = _19;
        _17 = test(move _18) -> [return: bb4, unwind: bb36];
    }

    bb4: {
        _16 = &_17;
        _112 = const _;
        _15 = (move _16, _112);
        _21 = (_15.0: &MatchArm);
        _22 = (_15.1: &MatchArm);
        _24 = <MatchArm as PartialEq>::eq(_21, _22) -> [return: bb5, unwind: bb36];
    }

    bb5: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _25, _21, _22, move _27) -> bb36;
    }

    bb7: {
        _111 = const _;
        _31 = _111 as &[std::option::Option<Test>] (Pointer(Unsize));
        _30 = test(move _31) -> [return: bb8, unwind: bb36];
    }

    bb8: {
        _29 = &_30;
        _110 = const _;
        _28 = (move _29, _110);
        _32 = (_28.0: &MatchArm);
        _33 = (_28.1: &MatchArm);
        _35 = <MatchArm as PartialEq>::eq(_32, _33) -> [return: bb9, unwind: bb36];
    }

    bb9: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _36, _32, _33, move _38) -> bb36;
    }

    bb11: {
        _44 = &_1;
        _45 = RangeTo::<usize> { end: const 3_usize };
        _43 = <Vec<Option<Test>> as Index<RangeTo<usize>>>::index(move _44, move _45) -> [return: bb12, unwind: bb36];
    }

    bb12: {
        _42 = _43;
        _41 = test(_42) -> [return: bb13, unwind: bb36];
    }

    bb13: {
        _40 = &_41;
        _109 = const _;
        _39 = (move _40, _109);
        _46 = (_39.0: &MatchArm);
        _47 = (_39.1: &MatchArm);
        _49 = <MatchArm as PartialEq>::eq(_46, _47) -> [return: bb14, unwind: bb36];
    }

    bb14: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _50, _46, _47, move _52) -> bb36;
    }

    bb16: {
        _108 = const _;
        _56 = _108 as &[std::option::Option<Test>] (Pointer(Unsize));
        _55 = test(move _56) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _54 = &_55;
        _107 = const _;
        _53 = (move _54, _107);
        _57 = (_53.0: &MatchArm);
        _58 = (_53.1: &MatchArm);
        _60 = <MatchArm as PartialEq>::eq(_57, _58) -> [return: bb18, unwind: bb36];
    }

    bb18: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _61, _57, _58, move _63) -> bb36;
    }

    bb20: {
        _69 = &_1;
        _70 = std::ops::Range::<usize> { start: const 1_usize, end: const 3_usize };
        _68 = <Vec<Option<Test>> as Index<std::ops::Range<usize>>>::index(move _69, move _70) -> [return: bb21, unwind: bb36];
    }

    bb21: {
        _67 = _68;
        _66 = test(_67) -> [return: bb22, unwind: bb36];
    }

    bb22: {
        _65 = &_66;
        _106 = const _;
        _64 = (move _65, _106);
        _71 = (_64.0: &MatchArm);
        _72 = (_64.1: &MatchArm);
        _74 = <MatchArm as PartialEq>::eq(_71, _72) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _75, _71, _72, move _77) -> bb36;
    }

    bb25: {
        _105 = const _;
        _81 = _105 as &[std::option::Option<Test>] (Pointer(Unsize));
        _80 = test(move _81) -> [return: bb26, unwind: bb36];
    }

    bb26: {
        _79 = &_80;
        _104 = const _;
        _78 = (move _79, _104);
        _82 = (_78.0: &MatchArm);
        _83 = (_78.1: &MatchArm);
        _85 = <MatchArm as PartialEq>::eq(_82, _83) -> [return: bb27, unwind: bb36];
    }

    bb27: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _86, _82, _83, move _88) -> bb36;
    }

    bb29: {
        _94 = &_1;
        _95 = RangeFrom::<usize> { start: const 4_usize };
        _93 = <Vec<Option<Test>> as Index<RangeFrom<usize>>>::index(move _94, move _95) -> [return: bb30, unwind: bb36];
    }

    bb30: {
        _92 = _93;
        _91 = test(_92) -> [return: bb31, unwind: bb36];
    }

    bb31: {
        _90 = &_91;
        _103 = const _;
        _89 = (move _90, _103);
        _96 = (_89.0: &MatchArm);
        _97 = (_89.1: &MatchArm);
        _99 = <MatchArm as PartialEq>::eq(_96, _97) -> [return: bb32, unwind: bb36];
    }

    bb32: {
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _100 = core::panicking::AssertKind::Eq;
        _102 = Option::<Arguments<'_>>::None;
        _101 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _100, _96, _97, move _102) -> bb36;
    }

    bb34: {
        drop(_1) -> [return: bb35, unwind continue];
    }

    bb35: {
        return;
    }

    bb36 (cleanup): {
        drop(_1) -> [return: bb37, unwind terminate];
    }

    bb37 (cleanup): {
        resume;
    }

    bb38: {
        (*_113) = [move _7, move _9, move _11, move _13];
        _2 = move _6 as std::boxed::Box<[std::option::Option<Test>]> (Pointer(Unsize));
        _1 = slice::<impl [Option<Test>]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[Option<Test>; 4] = {
    let mut _0: &[std::option::Option<Test>; 4];
    let mut _1: [std::option::Option<Test>; 4];
    let mut _2: std::option::Option<Test>;
    let mut _3: Test;
    let mut _4: std::option::Option<Test>;
    let mut _5: Test;
    let mut _6: std::option::Option<Test>;
    let mut _7: Test;
    let mut _8: std::option::Option<Test>;
    let mut _9: Test;

    bb0: {
        _3 = Test::Bar;
        _2 = Option::<Test>::Some(move _3);
        _5 = Test::Baz;
        _4 = Option::<Test>::Some(move _5);
        _7 = Test::Baz;
        _6 = Option::<Test>::Some(move _7);
        _9 = Test::Bar;
        _8 = Option::<Test>::Some(move _9);
        _1 = [move _2, move _4, move _6, move _8];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[Option<Test>; 3] = {
    let mut _0: &[std::option::Option<Test>; 3];
    let mut _1: [std::option::Option<Test>; 3];
    let mut _2: std::option::Option<Test>;
    let mut _3: Test;
    let mut _4: std::option::Option<Test>;
    let mut _5: Test;
    let mut _6: std::option::Option<Test>;
    let mut _7: Test;

    bb0: {
        _3 = Test::Foo;
        _2 = Option::<Test>::Some(move _3);
        _5 = Test::Foo;
        _4 = Option::<Test>::Some(move _5);
        _7 = Test::Bar;
        _6 = Option::<Test>::Some(move _7);
        _1 = [move _2, move _4, move _6];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 0_usize);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[Option<Test>; 2] = {
    let mut _0: &[std::option::Option<Test>; 2];
    let mut _1: [std::option::Option<Test>; 2];
    let mut _2: std::option::Option<Test>;
    let mut _3: Test;
    let mut _4: std::option::Option<Test>;
    let mut _5: Test;

    bb0: {
        _3 = Test::Bar;
        _2 = Option::<Test>::Some(move _3);
        _5 = Test::Foo;
        _4 = Option::<Test>::Some(move _5);
        _1 = [move _2, move _4];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 0_usize);
        _0 = &_1;
        return;
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}
