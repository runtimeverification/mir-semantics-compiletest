// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/or-patterns/struct-like.rs:3:10: 3:15>::fmt(_1: &Other, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    debug f => _2;                       // in scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    let mut _4: &str;                    // in scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    let mut _5: isize;                   // in scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    let _6: &str;                        // in scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    let _7: &str;                        // in scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    let _8: &str;                        // in scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
        _5 = discriminant((*_1));        // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    }

    bb1: {
        _8 = const "Three";              // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
        goto -> bb5;                     // scope 0 at ui/or-patterns/struct-like.rs:3:14: 3:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
    }

    bb3: {
        _6 = const "One";                // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
        goto -> bb5;                     // scope 0 at ui/or-patterns/struct-like.rs:3:14: 3:15
    }

    bb4: {
        _7 = const "Two";                // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
        goto -> bb5;                     // scope 0 at ui/or-patterns/struct-like.rs:3:14: 3:15
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb6; // scope 0 at ui/or-patterns/struct-like.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:3:10: 3:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/or-patterns/struct-like.rs:3:15: 3:15
    }
}

fn <impl at ui/or-patterns/struct-like.rs:10:10: 10:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    debug f => _2;                       // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let mut _3: isize;                   // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let _4: &usize;                      // in scope 0 at ui/or-patterns/struct-like.rs:12:11: 12:23
    let _5: &usize;                      // in scope 0 at ui/or-patterns/struct-like.rs:12:25: 12:38
    let mut _6: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let mut _7: &str;                    // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let _8: &str;                        // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let mut _9: &str;                    // in scope 0 at ui/or-patterns/struct-like.rs:12:11: 12:23
    let _10: &str;                       // in scope 0 at ui/or-patterns/struct-like.rs:12:11: 12:23
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at ui/or-patterns/struct-like.rs:12:11: 12:23
    let mut _12: &usize;                 // in scope 0 at ui/or-patterns/struct-like.rs:12:11: 12:23
    let mut _13: &str;                   // in scope 0 at ui/or-patterns/struct-like.rs:12:25: 12:38
    let _14: &str;                       // in scope 0 at ui/or-patterns/struct-like.rs:12:25: 12:38
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/or-patterns/struct-like.rs:12:25: 12:38
    let mut _16: &&usize;                // in scope 0 at ui/or-patterns/struct-like.rs:12:25: 12:38
    let _17: &&usize;                    // in scope 0 at ui/or-patterns/struct-like.rs:12:25: 12:38
    let _18: &std::option::Option<Other>; // in scope 0 at ui/or-patterns/struct-like.rs:13:11: 13:31
    let mut _19: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let mut _20: &str;                   // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let _21: &str;                       // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let mut _22: &str;                   // in scope 0 at ui/or-patterns/struct-like.rs:13:11: 13:31
    let _23: &str;                       // in scope 0 at ui/or-patterns/struct-like.rs:13:11: 13:31
    let mut _24: &dyn std::fmt::Debug;   // in scope 0 at ui/or-patterns/struct-like.rs:13:11: 13:31
    let mut _25: &&std::option::Option<Other>; // in scope 0 at ui/or-patterns/struct-like.rs:13:11: 13:31
    let _26: &&std::option::Option<Other>; // in scope 0 at ui/or-patterns/struct-like.rs:13:11: 13:31
    let mut _27: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let mut _28: &str;                   // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    let _29: &str;                       // in scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/or-patterns/struct-like.rs:12:11: 12:23
        debug __self_1 => _5;            // in scope 1 at ui/or-patterns/struct-like.rs:12:25: 12:38
    }
    scope 2 {
        debug __self_0 => _18;           // in scope 2 at ui/or-patterns/struct-like.rs:13:11: 13:31
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    }

    bb1: {
        _27 = &mut (*_2);                // scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
        _29 = const "Baz";               // scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _28 = _29;                       // scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
        _0 = Formatter::<'_>::write_str(move _27, move _28) -> bb5; // scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/or-patterns/struct-like.rs:10:10: 10:15
    }

    bb3: {
        _4 = &(((*_1) as Foo).0: usize); // scope 0 at ui/or-patterns/struct-like.rs:12:11: 12:23
        _5 = &(((*_1) as Foo).1: usize); // scope 0 at ui/or-patterns/struct-like.rs:12:25: 12:38
        _6 = &mut (*_2);                 // scope 1 at ui/or-patterns/struct-like.rs:10:10: 10:15
        _8 = const "Foo";                // scope 1 at ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/or-patterns/struct-like.rs:10:10: 10:15
        _10 = const "first";             // scope 1 at ui/or-patterns/struct-like.rs:12:11: 12:23
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:12:11: 12:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 1 at ui/or-patterns/struct-like.rs:12:11: 12:23
        _12 = _4;                        // scope 1 at ui/or-patterns/struct-like.rs:12:11: 12:23
        _11 = move _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/or-patterns/struct-like.rs:12:11: 12:23
        _14 = const "second";            // scope 1 at ui/or-patterns/struct-like.rs:12:25: 12:38
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:12:25: 12:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 1 at ui/or-patterns/struct-like.rs:12:25: 12:38
        _17 = &_5;                       // scope 1 at ui/or-patterns/struct-like.rs:12:25: 12:38
        _16 = _17;                       // scope 1 at ui/or-patterns/struct-like.rs:12:25: 12:38
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/or-patterns/struct-like.rs:12:25: 12:38
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _6, move _7, move _9, move _11, move _13, move _15) -> bb5; // scope 1 at ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = &(((*_1) as Bar).0: std::option::Option<Other>); // scope 0 at ui/or-patterns/struct-like.rs:13:11: 13:31
        _19 = &mut (*_2);                // scope 2 at ui/or-patterns/struct-like.rs:10:10: 10:15
        _21 = const "Bar";               // scope 2 at ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21;                       // scope 2 at ui/or-patterns/struct-like.rs:10:10: 10:15
        _23 = const "other";             // scope 2 at ui/or-patterns/struct-like.rs:13:11: 13:31
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:13:11: 13:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _22 = _23;                       // scope 2 at ui/or-patterns/struct-like.rs:13:11: 13:31
        _26 = &_18;                      // scope 2 at ui/or-patterns/struct-like.rs:13:11: 13:31
        _25 = _26;                       // scope 2 at ui/or-patterns/struct-like.rs:13:11: 13:31
        _24 = move _25 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/or-patterns/struct-like.rs:13:11: 13:31
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _19, move _20, move _22, move _24) -> bb5; // scope 2 at ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:10:10: 10:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/or-patterns/struct-like.rs:10:15: 10:15
    }
}

fn test(_1: Option<Test>) -> bool {
    debug x => _1;                       // in scope 0 at ui/or-patterns/struct-like.rs:17:9: 17:10
    let mut _0: bool;                    // return place in scope 0 at ui/or-patterns/struct-like.rs:17:29: 17:33
    let mut _2: isize;                   // in scope 0 at ui/or-patterns/struct-like.rs:21:39: 21:49
    let mut _3: isize;                   // in scope 0 at ui/or-patterns/struct-like.rs:21:34: 21:63
    let mut _4: isize;                   // in scope 0 at ui/or-patterns/struct-like.rs:20:13: 20:66
    let mut _5: isize;                   // in scope 0 at ui/or-patterns/struct-like.rs:19:9: 22:10

    bb0: {
        _5 = discriminant(_1);           // scope 0 at ui/or-patterns/struct-like.rs:18:11: 18:12
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb7]; // scope 0 at ui/or-patterns/struct-like.rs:18:5: 18:12
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/or-patterns/struct-like.rs:26:17: 26:22
        goto -> bb10;                    // scope 0 at ui/or-patterns/struct-like.rs:26:17: 26:22
    }

    bb2: {
        _4 = discriminant(((_1 as Some).0: Test)); // scope 0 at ui/or-patterns/struct-like.rs:18:11: 18:12
        switchInt(move _4) -> [0: bb3, 1: bb5, otherwise: bb9]; // scope 0 at ui/or-patterns/struct-like.rs:18:5: 18:12
    }

    bb3: {
        switchInt(((((_1 as Some).0: Test) as Foo).0: usize)) -> [1024: bb4, 2048: bb4, otherwise: bb9]; // scope 0 at ui/or-patterns/struct-like.rs:20:32: 20:43
    }

    bb4: {
        switchInt(((((_1 as Some).0: Test) as Foo).1: usize)) -> [2048: bb8, 4096: bb8, otherwise: bb9]; // scope 0 at ui/or-patterns/struct-like.rs:20:53: 20:64
    }

    bb5: {
        _3 = discriminant(((((_1 as Some).0: Test) as Bar).0: std::option::Option<Other>)); // scope 0 at ui/or-patterns/struct-like.rs:18:11: 18:12
        switchInt(move _3) -> [1: bb6, otherwise: bb9]; // scope 0 at ui/or-patterns/struct-like.rs:18:5: 18:12
    }

    bb6: {
        _2 = discriminant(((((((_1 as Some).0: Test) as Bar).0: std::option::Option<Other>) as Some).0: Other)); // scope 0 at ui/or-patterns/struct-like.rs:18:11: 18:12
        switchInt(move _2) -> [0: bb8, 1: bb8, otherwise: bb9]; // scope 0 at ui/or-patterns/struct-like.rs:18:5: 18:12
    }

    bb7: {
        unreachable;                     // scope 0 at ui/or-patterns/struct-like.rs:18:11: 18:12
    }

    bb8: {
        _0 = const true;                 // scope 0 at ui/or-patterns/struct-like.rs:22:14: 22:18
        goto -> bb10;                    // scope 0 at ui/or-patterns/struct-like.rs:22:14: 22:18
    }

    bb9: {
        _0 = const false;                // scope 0 at ui/or-patterns/struct-like.rs:24:20: 24:25
        goto -> bb10;                    // scope 0 at ui/or-patterns/struct-like.rs:24:20: 24:25
    }

    bb10: {
        return;                          // scope 0 at ui/or-patterns/struct-like.rs:28:2: 28:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/struct-like.rs:30:11: 30:11
    let mut _1: bool;                    // in scope 0 at ui/or-patterns/struct-like.rs:31:5: 31:65
    let mut _2: bool;                    // in scope 0 at ui/or-patterns/struct-like.rs:31:13: 31:64
    let mut _3: std::option::Option<Test>; // in scope 0 at ui/or-patterns/struct-like.rs:31:18: 31:63
    let mut _4: Test;                    // in scope 0 at ui/or-patterns/struct-like.rs:31:23: 31:62
    let mut _5: !;                       // in scope 0 at ui/or-patterns/struct-like.rs:31:5: 31:65
    let mut _6: bool;                    // in scope 0 at ui/or-patterns/struct-like.rs:32:5: 32:66
    let mut _7: bool;                    // in scope 0 at ui/or-patterns/struct-like.rs:32:13: 32:65
    let mut _8: bool;                    // in scope 0 at ui/or-patterns/struct-like.rs:32:14: 32:65
    let mut _9: std::option::Option<Test>; // in scope 0 at ui/or-patterns/struct-like.rs:32:19: 32:64
    let mut _10: Test;                   // in scope 0 at ui/or-patterns/struct-like.rs:32:24: 32:63
    let mut _11: !;                      // in scope 0 at ui/or-patterns/struct-like.rs:32:5: 32:66
    let mut _12: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:33:5: 33:64
    let mut _13: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:33:13: 33:63
    let mut _14: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:33:14: 33:63
    let mut _15: std::option::Option<Test>; // in scope 0 at ui/or-patterns/struct-like.rs:33:19: 33:62
    let mut _16: Test;                   // in scope 0 at ui/or-patterns/struct-like.rs:33:24: 33:61
    let mut _17: !;                      // in scope 0 at ui/or-patterns/struct-like.rs:33:5: 33:64
    let mut _18: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:34:5: 34:63
    let mut _19: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:34:13: 34:62
    let mut _20: std::option::Option<Test>; // in scope 0 at ui/or-patterns/struct-like.rs:34:18: 34:61
    let mut _21: Test;                   // in scope 0 at ui/or-patterns/struct-like.rs:34:23: 34:60
    let mut _22: std::option::Option<Other>; // in scope 0 at ui/or-patterns/struct-like.rs:34:42: 34:58
    let mut _23: !;                      // in scope 0 at ui/or-patterns/struct-like.rs:34:5: 34:63
    let mut _24: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:35:5: 35:63
    let mut _25: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:35:13: 35:62
    let mut _26: std::option::Option<Test>; // in scope 0 at ui/or-patterns/struct-like.rs:35:18: 35:61
    let mut _27: Test;                   // in scope 0 at ui/or-patterns/struct-like.rs:35:23: 35:60
    let mut _28: std::option::Option<Other>; // in scope 0 at ui/or-patterns/struct-like.rs:35:42: 35:58
    let mut _29: !;                      // in scope 0 at ui/or-patterns/struct-like.rs:35:5: 35:63
    let mut _30: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:36:5: 36:66
    let mut _31: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:36:13: 36:65
    let mut _32: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:36:14: 36:65
    let mut _33: std::option::Option<Test>; // in scope 0 at ui/or-patterns/struct-like.rs:36:19: 36:64
    let mut _34: Test;                   // in scope 0 at ui/or-patterns/struct-like.rs:36:24: 36:63
    let mut _35: std::option::Option<Other>; // in scope 0 at ui/or-patterns/struct-like.rs:36:43: 36:61
    let mut _36: !;                      // in scope 0 at ui/or-patterns/struct-like.rs:36:5: 36:66
    let mut _37: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:37:5: 37:52
    let mut _38: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:37:13: 37:51
    let mut _39: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:37:14: 37:51
    let mut _40: std::option::Option<Test>; // in scope 0 at ui/or-patterns/struct-like.rs:37:19: 37:50
    let mut _41: Test;                   // in scope 0 at ui/or-patterns/struct-like.rs:37:24: 37:49
    let mut _42: std::option::Option<Other>; // in scope 0 at ui/or-patterns/struct-like.rs:37:43: 37:47
    let mut _43: !;                      // in scope 0 at ui/or-patterns/struct-like.rs:37:5: 37:52
    let mut _44: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:38:5: 38:36
    let mut _45: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:38:13: 38:35
    let mut _46: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:38:14: 38:35
    let mut _47: std::option::Option<Test>; // in scope 0 at ui/or-patterns/struct-like.rs:38:19: 38:34
    let mut _48: Test;                   // in scope 0 at ui/or-patterns/struct-like.rs:38:24: 38:33
    let mut _49: !;                      // in scope 0 at ui/or-patterns/struct-like.rs:38:5: 38:36
    let mut _50: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:39:5: 39:25
    let mut _51: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:39:13: 39:24
    let mut _52: bool;                   // in scope 0 at ui/or-patterns/struct-like.rs:39:14: 39:24
    let mut _53: std::option::Option<Test>; // in scope 0 at ui/or-patterns/struct-like.rs:39:19: 39:23
    let mut _54: !;                      // in scope 0 at ui/or-patterns/struct-like.rs:39:5: 39:25

    bb0: {
        _4 = Test::Foo { first: const 1024_usize, second: const 4096_usize }; // scope 0 at ui/or-patterns/struct-like.rs:31:23: 31:62
        _3 = Option::<Test>::Some(move _4); // scope 0 at ui/or-patterns/struct-like.rs:31:18: 31:63
        _2 = test(move _3) -> bb1;       // scope 0 at ui/or-patterns/struct-like.rs:31:13: 31:64
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:31:13: 31:17
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/or-patterns/struct-like.rs:31:5: 31:65
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/or-patterns/struct-like.rs:31:5: 31:65
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: test(Some(Test::Foo { first: 1024, second: 4096 }))"); // scope 0 at ui/or-patterns/struct-like.rs:31:5: 31:65
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:31:5: 31:65
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _10 = Test::Foo { first: const 2048_usize, second: const 8192_usize }; // scope 0 at ui/or-patterns/struct-like.rs:32:24: 32:63
        _9 = Option::<Test>::Some(move _10); // scope 0 at ui/or-patterns/struct-like.rs:32:19: 32:64
        _8 = test(move _9) -> bb4;       // scope 0 at ui/or-patterns/struct-like.rs:32:14: 32:65
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:32:14: 32:18
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = Not(move _8);               // scope 0 at ui/or-patterns/struct-like.rs:32:13: 32:65
        _6 = Not(move _7);               // scope 0 at ui/or-patterns/struct-like.rs:32:5: 32:66
        switchInt(move _6) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/or-patterns/struct-like.rs:32:5: 32:66
    }

    bb5: {
        _11 = core::panicking::panic(const "assertion failed: !test(Some(Test::Foo { first: 2048, second: 8192 }))"); // scope 0 at ui/or-patterns/struct-like.rs:32:5: 32:66
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:32:5: 32:66
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _16 = Test::Foo { first: const 42_usize, second: const 2048_usize }; // scope 0 at ui/or-patterns/struct-like.rs:33:24: 33:61
        _15 = Option::<Test>::Some(move _16); // scope 0 at ui/or-patterns/struct-like.rs:33:19: 33:62
        _14 = test(move _15) -> bb7;     // scope 0 at ui/or-patterns/struct-like.rs:33:14: 33:63
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:33:14: 33:18
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = Not(move _14);             // scope 0 at ui/or-patterns/struct-like.rs:33:13: 33:63
        _12 = Not(move _13);             // scope 0 at ui/or-patterns/struct-like.rs:33:5: 33:64
        switchInt(move _12) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/or-patterns/struct-like.rs:33:5: 33:64
    }

    bb8: {
        _17 = core::panicking::panic(const "assertion failed: !test(Some(Test::Foo { first: 42, second: 2048 }))"); // scope 0 at ui/or-patterns/struct-like.rs:33:5: 33:64
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:33:5: 33:64
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _22 = const Option::<Other>::Some(Other::One); // scope 0 at ui/or-patterns/struct-like.rs:34:42: 34:58
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:34:42: 34:58
                                         // + literal: Const { ty: Option<Other>, val: Value(Scalar(0x00)) }
        _21 = Test::Bar { other: move _22 }; // scope 0 at ui/or-patterns/struct-like.rs:34:23: 34:60
        _20 = Option::<Test>::Some(move _21); // scope 0 at ui/or-patterns/struct-like.rs:34:18: 34:61
        _19 = test(move _20) -> bb10;    // scope 0 at ui/or-patterns/struct-like.rs:34:13: 34:62
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:34:13: 34:17
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb10: {
        _18 = Not(move _19);             // scope 0 at ui/or-patterns/struct-like.rs:34:5: 34:63
        switchInt(move _18) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/or-patterns/struct-like.rs:34:5: 34:63
    }

    bb11: {
        _23 = core::panicking::panic(const "assertion failed: test(Some(Test::Bar { other: Some(Other::One) }))"); // scope 0 at ui/or-patterns/struct-like.rs:34:5: 34:63
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:34:5: 34:63
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _28 = const Option::<Other>::Some(Other::Two); // scope 0 at ui/or-patterns/struct-like.rs:35:42: 35:58
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:35:42: 35:58
                                         // + literal: Const { ty: Option<Other>, val: Value(Scalar(0x01)) }
        _27 = Test::Bar { other: move _28 }; // scope 0 at ui/or-patterns/struct-like.rs:35:23: 35:60
        _26 = Option::<Test>::Some(move _27); // scope 0 at ui/or-patterns/struct-like.rs:35:18: 35:61
        _25 = test(move _26) -> bb13;    // scope 0 at ui/or-patterns/struct-like.rs:35:13: 35:62
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:35:13: 35:17
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb13: {
        _24 = Not(move _25);             // scope 0 at ui/or-patterns/struct-like.rs:35:5: 35:63
        switchInt(move _24) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/or-patterns/struct-like.rs:35:5: 35:63
    }

    bb14: {
        _29 = core::panicking::panic(const "assertion failed: test(Some(Test::Bar { other: Some(Other::Two) }))"); // scope 0 at ui/or-patterns/struct-like.rs:35:5: 35:63
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:35:5: 35:63
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _35 = const Option::<Other>::Some(Other::Three); // scope 0 at ui/or-patterns/struct-like.rs:36:43: 36:61
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:36:43: 36:61
                                         // + literal: Const { ty: Option<Other>, val: Value(Scalar(0x02)) }
        _34 = Test::Bar { other: move _35 }; // scope 0 at ui/or-patterns/struct-like.rs:36:24: 36:63
        _33 = Option::<Test>::Some(move _34); // scope 0 at ui/or-patterns/struct-like.rs:36:19: 36:64
        _32 = test(move _33) -> bb16;    // scope 0 at ui/or-patterns/struct-like.rs:36:14: 36:65
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:36:14: 36:18
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb16: {
        _31 = Not(move _32);             // scope 0 at ui/or-patterns/struct-like.rs:36:13: 36:65
        _30 = Not(move _31);             // scope 0 at ui/or-patterns/struct-like.rs:36:5: 36:66
        switchInt(move _30) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/or-patterns/struct-like.rs:36:5: 36:66
    }

    bb17: {
        _36 = core::panicking::panic(const "assertion failed: !test(Some(Test::Bar { other: Some(Other::Three) }))"); // scope 0 at ui/or-patterns/struct-like.rs:36:5: 36:66
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:36:5: 36:66
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _42 = const Option::<Other>::None; // scope 0 at ui/or-patterns/struct-like.rs:37:43: 37:47
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:37:43: 37:47
                                         // + literal: Const { ty: Option<Other>, val: Value(Scalar(0x03)) }
        _41 = Test::Bar { other: move _42 }; // scope 0 at ui/or-patterns/struct-like.rs:37:24: 37:49
        _40 = Option::<Test>::Some(move _41); // scope 0 at ui/or-patterns/struct-like.rs:37:19: 37:50
        _39 = test(move _40) -> bb19;    // scope 0 at ui/or-patterns/struct-like.rs:37:14: 37:51
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:37:14: 37:18
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb19: {
        _38 = Not(move _39);             // scope 0 at ui/or-patterns/struct-like.rs:37:13: 37:51
        _37 = Not(move _38);             // scope 0 at ui/or-patterns/struct-like.rs:37:5: 37:52
        switchInt(move _37) -> [0: bb21, otherwise: bb20]; // scope 0 at ui/or-patterns/struct-like.rs:37:5: 37:52
    }

    bb20: {
        _43 = core::panicking::panic(const "assertion failed: !test(Some(Test::Bar { other: None }))"); // scope 0 at ui/or-patterns/struct-like.rs:37:5: 37:52
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:37:5: 37:52
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _48 = Test::Baz;                 // scope 0 at ui/or-patterns/struct-like.rs:38:24: 38:33
        _47 = Option::<Test>::Some(move _48); // scope 0 at ui/or-patterns/struct-like.rs:38:19: 38:34
        _46 = test(move _47) -> bb22;    // scope 0 at ui/or-patterns/struct-like.rs:38:14: 38:35
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:38:14: 38:18
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb22: {
        _45 = Not(move _46);             // scope 0 at ui/or-patterns/struct-like.rs:38:13: 38:35
        _44 = Not(move _45);             // scope 0 at ui/or-patterns/struct-like.rs:38:5: 38:36
        switchInt(move _44) -> [0: bb24, otherwise: bb23]; // scope 0 at ui/or-patterns/struct-like.rs:38:5: 38:36
    }

    bb23: {
        _49 = core::panicking::panic(const "assertion failed: !test(Some(Test::Baz))"); // scope 0 at ui/or-patterns/struct-like.rs:38:5: 38:36
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:38:5: 38:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb24: {
        _53 = Option::<Test>::None;      // scope 0 at ui/or-patterns/struct-like.rs:39:19: 39:23
        _52 = test(move _53) -> bb25;    // scope 0 at ui/or-patterns/struct-like.rs:39:14: 39:24
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:39:14: 39:18
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb25: {
        _51 = Not(move _52);             // scope 0 at ui/or-patterns/struct-like.rs:39:13: 39:24
        _50 = Not(move _51);             // scope 0 at ui/or-patterns/struct-like.rs:39:5: 39:25
        switchInt(move _50) -> [0: bb27, otherwise: bb26]; // scope 0 at ui/or-patterns/struct-like.rs:39:5: 39:25
    }

    bb26: {
        _54 = core::panicking::panic(const "assertion failed: !test(None)"); // scope 0 at ui/or-patterns/struct-like.rs:39:5: 39:25
                                         // mir::Constant
                                         // + span: ui/or-patterns/struct-like.rs:39:5: 39:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        return;                          // scope 0 at ui/or-patterns/struct-like.rs:40:2: 40:2
    }
}
