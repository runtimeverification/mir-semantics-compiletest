// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let _5: &i32;
    let _6: ();
    let mut _7: isize;
    let mut _9: u8;
    let _10: ();
    let mut _11: isize;
    let mut _13: u8;
    let _14: ();
    let mut _15: isize;
    let mut _17: &u8;
    let mut _18: isize;
    let _20: ();
    let mut _21: u8;
    let mut _22: isize;
    let _24: ();
    let mut _25: u8;
    let mut _27: isize;
    let _28: ();
    let mut _29: u8;
    let mut _31: isize;
    let _32: ();
    let mut _33: u8;
    let mut _35: isize;
    let _36: ();
    let mut _37: &u8;
    let mut _38: std::iter::Once<&std::result::Result<u8, u8>>;
    let mut _39: std::iter::Once<&std::result::Result<u8, u8>>;
    let mut _41: std::option::Option<&std::result::Result<u8, u8>>;
    let mut _42: &mut std::iter::Once<&std::result::Result<u8, u8>>;
    let mut _43: isize;
    let mut _44: isize;
    let _46: ();
    let mut _47: u8;
    let mut _48: std::iter::Once<&std::result::Result<u8, u8>>;
    let mut _49: std::iter::Once<&std::result::Result<u8, u8>>;
    let mut _51: std::option::Option<&std::result::Result<u8, u8>>;
    let mut _52: &mut std::iter::Once<&std::result::Result<u8, u8>>;
    let mut _53: isize;
    let mut _54: isize;
    let _56: ();
    let mut _57: u8;
    let mut _58: std::iter::Once<&std::result::Result<u8, u8>>;
    let mut _59: std::iter::Once<&std::result::Result<u8, u8>>;
    let mut _61: std::option::Option<&std::result::Result<u8, u8>>;
    let mut _62: &mut std::iter::Once<&std::result::Result<u8, u8>>;
    let mut _63: isize;
    let mut _64: isize;
    let _66: ();
    let mut _67: &u8;
    let _69: ();
    let mut _70: isize;
    let mut _72: u8;
    let _73: ();
    let mut _74: isize;
    let mut _76: u8;
    let _77: ();
    let mut _78: isize;
    let mut _80: &u8;
    let mut _81: isize;
    let _83: ();
    let mut _84: u8;
    let mut _85: isize;
    let _87: ();
    let mut _88: u8;
    let mut _89: isize;
    let _91: ();
    let mut _92: &u8;
    let mut _94: isize;
    let _95: ();
    let mut _96: u8;
    let mut _98: isize;
    let _99: ();
    let mut _100: u8;
    let mut _102: isize;
    let _103: ();
    let mut _104: &u8;
    let mut _105: std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _106: std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _108: std::option::Option<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _109: &mut std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _110: isize;
    let mut _111: isize;
    let _113: ();
    let mut _114: u8;
    let mut _115: std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _116: std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _118: std::option::Option<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _119: &mut std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _120: isize;
    let mut _121: isize;
    let _123: ();
    let mut _124: u8;
    let mut _125: std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _126: std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _128: std::option::Option<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _129: &mut std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
    let mut _130: isize;
    let mut _131: isize;
    let _133: ();
    let mut _134: &u8;
    let mut _136: isize;
    let mut _137: isize;
    let mut _138: isize;
    let mut _139: isize;
    let _140: ();
    let mut _141: u8;
    let mut _142: isize;
    let mut _143: isize;
    let mut _144: isize;
    let mut _145: isize;
    let mut _147: u8;
    let mut _149: &std::result::Result<u8, u8>;
    let mut _150: &i32;
    let mut _151: &std::result::Result<u8, u8>;
    let mut _152: &std::result::Result<u8, u8>;
    let mut _153: &std::result::Result<u8, u8>;
    let mut _154: &std::result::Result<u8, u8>;
    let mut _155: &std::result::Result<u8, u8>;
    let mut _156: &std::result::Result<u8, u8>;
    let mut _157: &std::result::Result<u8, u8>;
    let mut _158: &std::result::Result<u8, u8>;
    let mut _159: &std::result::Result<u8, u8>;
    let mut _160: &std::result::Result<u8, u8>;
    let mut _161: &std::result::Result<u8, u8>;
    let mut _162: &std::result::Result<u8, u8>;
    let mut _163: &std::result::Result<u8, u8>;
    let mut _164: &std::result::Result<u8, u8>;
    let mut _165: &std::result::Result<u8, u8>;
    let mut _166: &std::result::Result<u8, u8>;
    let mut _167: &std::result::Result<u8, u8>;
    let mut _168: &std::result::Result<u8, u8>;
    let mut _169: &std::result::Result<u8, u8>;
    let mut _170: &std::result::Result<u8, u8>;
    let mut _171: &std::result::Result<u8, u8>;
    let mut _172: &std::result::Result<u8, u8>;
    let mut _173: &std::result::Result<u8, u8>;
    let mut _174: &std::result::Result<u8, u8>;
    let mut _175: &std::result::Result<u8, u8>;
    let mut _176: &std::result::Result<u8, u8>;
    let mut _177: &std::result::Result<u8, u8>;
    let mut _178: &std::result::Result<u8, u8>;
    let mut _179: &std::result::Result<u8, u8>;
    let mut _180: &std::result::Result<u8, u8>;
    let mut _181: &std::result::Result<u8, u8>;
    let mut _182: &std::result::Result<u8, u8>;
    let mut _183: &std::result::Result<u8, u8>;
    let mut _184: &std::result::Result<u8, u8>;
    let mut _185: &std::result::Result<u8, u8>;
    let mut _186: &std::result::Result<u8, u8>;
    let mut _187: &std::result::Result<u8, u8>;
    let mut _188: &std::result::Result<u8, u8>;
    let mut _189: &std::result::Result<u8, u8>;
    let mut _190: &std::result::Result<u8, u8>;
    let mut _191: &std::result::Result<u8, u8>;
    let mut _192: &std::result::Result<u8, u8>;
    let mut _193: &std::result::Result<u8, u8>;
    let mut _194: &std::result::Result<u8, u8>;
    let mut _195: &std::result::Result<u8, u8>;
    let mut _196: &std::result::Result<u8, u8>;
    let mut _197: &std::result::Result<u8, u8>;
    let mut _198: &std::result::Result<u8, u8>;
    let mut _199: &std::result::Result<u8, u8>;
    let mut _200: &std::result::Result<u8, u8>;
    let mut _201: &std::result::Result<u8, u8>;
    let mut _202: &std::result::Result<u8, u8>;
    let mut _203: &std::result::Result<u8, u8>;
    let mut _204: &std::result::Result<u8, u8>;
    let mut _205: &std::result::Result<u8, u8>;
    let mut _206: &std::result::Result<u8, u8>;
    let mut _207: &std::result::Result<u8, u8>;
    let mut _208: &std::result::Result<u8, u8>;
    let mut _209: &std::result::Result<u8, u8>;
    let mut _210: &std::result::Result<u8, u8>;
    let mut _211: &std::result::Result<u8, u8>;
    let mut _212: &std::result::Result<u8, u8>;
    let mut _213: &std::result::Result<u8, u8>;
    scope 1 {
        debug e => _5;
    }
    scope 2 {
        debug res => const _;
        let mut _8: u8;
        let _12: u8;
        let _16: &u8;
        let mut _26: u8;
        scope 3 {
            debug x => _8;
        }
        scope 4 {
            debug x => _12;
        }
        scope 5 {
            debug x => _16;
        }
        scope 6 {
            debug x => _19;
            let mut _19: u8;
        }
        scope 7 {
            debug x => _23;
            let _23: u8;
        }
        scope 8 {
            debug x => _26;
            let _30: u8;
            scope 9 {
                debug x => _30;
                let _34: &u8;
                scope 10 {
                    debug x => _34;
                    let mut _40: std::iter::Once<&std::result::Result<u8, u8>>;
                    let mut _50: std::iter::Once<&std::result::Result<u8, u8>>;
                    let mut _60: std::iter::Once<&std::result::Result<u8, u8>>;
                    let _68: main::Wrap<&std::result::Result<u8, u8>>;
                    scope 11 {
                        debug iter => _40;
                        let mut _45: u8;
                        scope 12 {
                            debug x => _45;
                        }
                    }
                    scope 13 {
                        debug iter => _50;
                        let _55: u8;
                        scope 14 {
                            debug x => _55;
                        }
                    }
                    scope 15 {
                        debug iter => _60;
                        let _65: &u8;
                        scope 16 {
                            debug x => _65;
                        }
                    }
                    scope 17 {
                        debug wres => _68;
                        let mut _71: u8;
                        let _75: u8;
                        let _79: &u8;
                        let mut _93: u8;
                        scope 18 {
                            debug x => _71;
                        }
                        scope 19 {
                            debug x => _75;
                        }
                        scope 20 {
                            debug x => _79;
                        }
                        scope 21 {
                            debug x => _82;
                            let mut _82: u8;
                        }
                        scope 22 {
                            debug x => _86;
                            let _86: u8;
                        }
                        scope 23 {
                            debug x => _90;
                            let _90: &u8;
                        }
                        scope 24 {
                            debug x => _93;
                            let _97: u8;
                            scope 25 {
                                debug x => _97;
                                let _101: &u8;
                                scope 26 {
                                    debug x => _101;
                                    let mut _107: std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
                                    let mut _117: std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
                                    let mut _127: std::iter::Once<main::Wrap<&std::result::Result<u8, u8>>>;
                                    let mut _148: &main::Tri<&std::result::Result<u8, u8>>;
                                    scope 27 {
                                        debug iter => _107;
                                        let mut _112: u8;
                                        scope 28 {
                                            debug x => _112;
                                        }
                                    }
                                    scope 29 {
                                        debug iter => _117;
                                        let _122: u8;
                                        scope 30 {
                                            debug x => _122;
                                        }
                                    }
                                    scope 31 {
                                        debug iter => _127;
                                        let _132: &u8;
                                        scope 32 {
                                            debug x => _132;
                                        }
                                    }
                                    scope 33 {
                                        debug tri => const _;
                                        let mut _135: u8;
                                        scope 34 {
                                            debug x => _135;
                                            let mut _146: u8;
                                            scope 35 {
                                                debug x => _146;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _150 = const _;
        _3 = Le(const 1_i32, (*_150));
        switchInt(move _3) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _4 = Le((*_150), const 2_i32);
        switchInt(move _4) -> [0: bb2, otherwise: bb4];
    }

    bb2: {
        _1 = Le(const 3_i32, (*_150));
        switchInt(move _1) -> [0: bb6, otherwise: bb3];
    }

    bb3: {
        _2 = Le((*_150), const 4_i32);
        switchInt(move _2) -> [0: bb6, otherwise: bb5];
    }

    bb4: {
        _5 = _150;
        goto -> bb6;
    }

    bb5: {
        _5 = _150;
        goto -> bb6;
    }

    bb6: {
        _149 = const _;
        _7 = discriminant((*_149));
        switchInt(move _7) -> [0: bb10, 1: bb7, otherwise: bb8];
    }

    bb7: {
        _8 = (((*_149) as Err).0: u8);
        goto -> bb9;
    }

    bb8: {
        unreachable;
    }

    bb9: {
        _9 = _8;
        _6 = std::mem::drop::<u8>(move _9) -> [return: bb11, unwind continue];
    }

    bb10: {
        _8 = (((*_149) as Ok).0: u8);
        goto -> bb9;
    }

    bb11: {
        _11 = discriminant((*_149));
        switchInt(move _11) -> [0: bb14, 1: bb12, otherwise: bb8];
    }

    bb12: {
        _12 = (((*_149) as Err).0: u8);
        goto -> bb13;
    }

    bb13: {
        _13 = _12;
        _10 = std::mem::drop::<u8>(move _13) -> [return: bb15, unwind continue];
    }

    bb14: {
        _12 = (((*_149) as Ok).0: u8);
        goto -> bb13;
    }

    bb15: {
        _15 = discriminant((*_149));
        switchInt(move _15) -> [0: bb18, 1: bb16, otherwise: bb8];
    }

    bb16: {
        _16 = &(((*_149) as Err).0: u8);
        goto -> bb17;
    }

    bb17: {
        _17 = _16;
        _14 = std::mem::drop::<&u8>(move _17) -> [return: bb19, unwind continue];
    }

    bb18: {
        _16 = &(((*_149) as Ok).0: u8);
        goto -> bb17;
    }

    bb19: {
        _18 = discriminant((*_149));
        switchInt(move _18) -> [0: bb21, 1: bb22, otherwise: bb8];
    }

    bb20: {
        _21 = _19;
        _20 = std::mem::drop::<u8>(move _21) -> [return: bb23, unwind continue];
    }

    bb21: {
        _19 = (((*_149) as Ok).0: u8);
        goto -> bb20;
    }

    bb22: {
        _19 = (((*_149) as Err).0: u8);
        goto -> bb20;
    }

    bb23: {
        _22 = discriminant((*_149));
        switchInt(move _22) -> [0: bb25, 1: bb26, otherwise: bb8];
    }

    bb24: {
        _25 = _23;
        _24 = std::mem::drop::<u8>(move _25) -> [return: bb27, unwind continue];
    }

    bb25: {
        _23 = (((*_149) as Ok).0: u8);
        goto -> bb24;
    }

    bb26: {
        _23 = (((*_149) as Err).0: u8);
        goto -> bb24;
    }

    bb27: {
        _27 = discriminant((*_149));
        switchInt(move _27) -> [0: bb30, 1: bb28, otherwise: bb8];
    }

    bb28: {
        _26 = (((*_149) as Err).0: u8);
        goto -> bb29;
    }

    bb29: {
        _29 = _26;
        _28 = std::mem::drop::<u8>(move _29) -> [return: bb31, unwind continue];
    }

    bb30: {
        _26 = (((*_149) as Ok).0: u8);
        goto -> bb29;
    }

    bb31: {
        _31 = discriminant((*_149));
        switchInt(move _31) -> [0: bb34, 1: bb32, otherwise: bb8];
    }

    bb32: {
        _30 = (((*_149) as Err).0: u8);
        goto -> bb33;
    }

    bb33: {
        _33 = _30;
        _32 = std::mem::drop::<u8>(move _33) -> [return: bb35, unwind continue];
    }

    bb34: {
        _30 = (((*_149) as Ok).0: u8);
        goto -> bb33;
    }

    bb35: {
        _35 = discriminant((*_149));
        switchInt(move _35) -> [0: bb38, 1: bb36, otherwise: bb8];
    }

    bb36: {
        _34 = &(((*_149) as Err).0: u8);
        goto -> bb37;
    }

    bb37: {
        _37 = _34;
        _36 = std::mem::drop::<&u8>(move _37) -> [return: bb39, unwind continue];
    }

    bb38: {
        _34 = &(((*_149) as Ok).0: u8);
        goto -> bb37;
    }

    bb39: {
        _39 = once::<&Result<u8, u8>>(_149) -> [return: bb40, unwind continue];
    }

    bb40: {
        _38 = <std::iter::Once<&Result<u8, u8>> as IntoIterator>::into_iter(move _39) -> [return: bb41, unwind continue];
    }

    bb41: {
        _40 = move _38;
        goto -> bb42;
    }

    bb42: {
        _42 = &mut _40;
        _41 = <std::iter::Once<&Result<u8, u8>> as Iterator>::next(_42) -> [return: bb43, unwind continue];
    }

    bb43: {
        _44 = discriminant(_41);
        switchInt(move _44) -> [0: bb46, 1: bb44, otherwise: bb8];
    }

    bb44: {
        _151 = deref_copy ((_41 as Some).0: &std::result::Result<u8, u8>);
        _43 = discriminant((*_151));
        switchInt(move _43) -> [0: bb48, 1: bb45, otherwise: bb8];
    }

    bb45: {
        _152 = deref_copy ((_41 as Some).0: &std::result::Result<u8, u8>);
        _45 = (((*_152) as Err).0: u8);
        goto -> bb47;
    }

    bb46: {
        _49 = once::<&Result<u8, u8>>(_149) -> [return: bb49, unwind continue];
    }

    bb47: {
        _47 = _45;
        _46 = std::mem::drop::<u8>(move _47) -> [return: bb42, unwind continue];
    }

    bb48: {
        _153 = deref_copy ((_41 as Some).0: &std::result::Result<u8, u8>);
        _45 = (((*_153) as Ok).0: u8);
        goto -> bb47;
    }

    bb49: {
        _48 = <std::iter::Once<&Result<u8, u8>> as IntoIterator>::into_iter(move _49) -> [return: bb50, unwind continue];
    }

    bb50: {
        _50 = move _48;
        goto -> bb51;
    }

    bb51: {
        _52 = &mut _50;
        _51 = <std::iter::Once<&Result<u8, u8>> as Iterator>::next(_52) -> [return: bb52, unwind continue];
    }

    bb52: {
        _54 = discriminant(_51);
        switchInt(move _54) -> [0: bb55, 1: bb53, otherwise: bb8];
    }

    bb53: {
        _154 = deref_copy ((_51 as Some).0: &std::result::Result<u8, u8>);
        _53 = discriminant((*_154));
        switchInt(move _53) -> [0: bb57, 1: bb54, otherwise: bb8];
    }

    bb54: {
        _155 = deref_copy ((_51 as Some).0: &std::result::Result<u8, u8>);
        _55 = (((*_155) as Err).0: u8);
        goto -> bb56;
    }

    bb55: {
        _59 = once::<&Result<u8, u8>>(_149) -> [return: bb58, unwind continue];
    }

    bb56: {
        _57 = _55;
        _56 = std::mem::drop::<u8>(move _57) -> [return: bb51, unwind continue];
    }

    bb57: {
        _156 = deref_copy ((_51 as Some).0: &std::result::Result<u8, u8>);
        _55 = (((*_156) as Ok).0: u8);
        goto -> bb56;
    }

    bb58: {
        _58 = <std::iter::Once<&Result<u8, u8>> as IntoIterator>::into_iter(move _59) -> [return: bb59, unwind continue];
    }

    bb59: {
        _60 = move _58;
        goto -> bb60;
    }

    bb60: {
        _62 = &mut _60;
        _61 = <std::iter::Once<&Result<u8, u8>> as Iterator>::next(_62) -> [return: bb61, unwind continue];
    }

    bb61: {
        _64 = discriminant(_61);
        switchInt(move _64) -> [0: bb64, 1: bb62, otherwise: bb8];
    }

    bb62: {
        _157 = deref_copy ((_61 as Some).0: &std::result::Result<u8, u8>);
        _63 = discriminant((*_157));
        switchInt(move _63) -> [0: bb66, 1: bb63, otherwise: bb8];
    }

    bb63: {
        _158 = deref_copy ((_61 as Some).0: &std::result::Result<u8, u8>);
        _65 = &(((*_158) as Err).0: u8);
        goto -> bb65;
    }

    bb64: {
        _68 = Wrap::<&Result<u8, u8>>(_149);
        _159 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _70 = discriminant((*_159));
        switchInt(move _70) -> [0: bb69, 1: bb67, otherwise: bb8];
    }

    bb65: {
        _67 = _65;
        _66 = std::mem::drop::<&u8>(move _67) -> [return: bb60, unwind continue];
    }

    bb66: {
        _160 = deref_copy ((_61 as Some).0: &std::result::Result<u8, u8>);
        _65 = &(((*_160) as Ok).0: u8);
        goto -> bb65;
    }

    bb67: {
        _161 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _71 = (((*_161) as Err).0: u8);
        goto -> bb68;
    }

    bb68: {
        _72 = _71;
        _69 = std::mem::drop::<u8>(move _72) -> [return: bb70, unwind continue];
    }

    bb69: {
        _162 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _71 = (((*_162) as Ok).0: u8);
        goto -> bb68;
    }

    bb70: {
        _163 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _74 = discriminant((*_163));
        switchInt(move _74) -> [0: bb73, 1: bb71, otherwise: bb8];
    }

    bb71: {
        _164 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _75 = (((*_164) as Err).0: u8);
        goto -> bb72;
    }

    bb72: {
        _76 = _75;
        _73 = std::mem::drop::<u8>(move _76) -> [return: bb74, unwind continue];
    }

    bb73: {
        _165 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _75 = (((*_165) as Ok).0: u8);
        goto -> bb72;
    }

    bb74: {
        _166 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _78 = discriminant((*_166));
        switchInt(move _78) -> [0: bb77, 1: bb75, otherwise: bb8];
    }

    bb75: {
        _167 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _79 = &(((*_167) as Err).0: u8);
        goto -> bb76;
    }

    bb76: {
        _80 = _79;
        _77 = std::mem::drop::<&u8>(move _80) -> [return: bb78, unwind continue];
    }

    bb77: {
        _168 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _79 = &(((*_168) as Ok).0: u8);
        goto -> bb76;
    }

    bb78: {
        _169 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _81 = discriminant((*_169));
        switchInt(move _81) -> [0: bb80, 1: bb81, otherwise: bb8];
    }

    bb79: {
        _84 = _82;
        _83 = std::mem::drop::<u8>(move _84) -> [return: bb82, unwind continue];
    }

    bb80: {
        _170 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _82 = (((*_170) as Ok).0: u8);
        goto -> bb79;
    }

    bb81: {
        _171 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _82 = (((*_171) as Err).0: u8);
        goto -> bb79;
    }

    bb82: {
        _172 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _85 = discriminant((*_172));
        switchInt(move _85) -> [0: bb84, 1: bb85, otherwise: bb8];
    }

    bb83: {
        _88 = _86;
        _87 = std::mem::drop::<u8>(move _88) -> [return: bb86, unwind continue];
    }

    bb84: {
        _173 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _86 = (((*_173) as Ok).0: u8);
        goto -> bb83;
    }

    bb85: {
        _174 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _86 = (((*_174) as Err).0: u8);
        goto -> bb83;
    }

    bb86: {
        _175 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _89 = discriminant((*_175));
        switchInt(move _89) -> [0: bb88, 1: bb89, otherwise: bb8];
    }

    bb87: {
        _92 = _90;
        _91 = std::mem::drop::<&u8>(move _92) -> [return: bb90, unwind continue];
    }

    bb88: {
        _176 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _90 = &(((*_176) as Ok).0: u8);
        goto -> bb87;
    }

    bb89: {
        _177 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _90 = &(((*_177) as Err).0: u8);
        goto -> bb87;
    }

    bb90: {
        _178 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _94 = discriminant((*_178));
        switchInt(move _94) -> [0: bb93, 1: bb91, otherwise: bb8];
    }

    bb91: {
        _179 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _93 = (((*_179) as Err).0: u8);
        goto -> bb92;
    }

    bb92: {
        _96 = _93;
        _95 = std::mem::drop::<u8>(move _96) -> [return: bb94, unwind continue];
    }

    bb93: {
        _180 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _93 = (((*_180) as Ok).0: u8);
        goto -> bb92;
    }

    bb94: {
        _181 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _98 = discriminant((*_181));
        switchInt(move _98) -> [0: bb97, 1: bb95, otherwise: bb8];
    }

    bb95: {
        _182 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _97 = (((*_182) as Err).0: u8);
        goto -> bb96;
    }

    bb96: {
        _100 = _97;
        _99 = std::mem::drop::<u8>(move _100) -> [return: bb98, unwind continue];
    }

    bb97: {
        _183 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _97 = (((*_183) as Ok).0: u8);
        goto -> bb96;
    }

    bb98: {
        _184 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _102 = discriminant((*_184));
        switchInt(move _102) -> [0: bb101, 1: bb99, otherwise: bb8];
    }

    bb99: {
        _185 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _101 = &(((*_185) as Err).0: u8);
        goto -> bb100;
    }

    bb100: {
        _104 = _101;
        _103 = std::mem::drop::<&u8>(move _104) -> [return: bb102, unwind continue];
    }

    bb101: {
        _186 = deref_copy (_68.0: &std::result::Result<u8, u8>);
        _101 = &(((*_186) as Ok).0: u8);
        goto -> bb100;
    }

    bb102: {
        _106 = once::<Wrap<&Result<u8, u8>>>(_68) -> [return: bb103, unwind continue];
    }

    bb103: {
        _105 = <std::iter::Once<Wrap<&Result<u8, u8>>> as IntoIterator>::into_iter(move _106) -> [return: bb104, unwind continue];
    }

    bb104: {
        _107 = move _105;
        goto -> bb105;
    }

    bb105: {
        _109 = &mut _107;
        _108 = <std::iter::Once<Wrap<&Result<u8, u8>>> as Iterator>::next(_109) -> [return: bb106, unwind continue];
    }

    bb106: {
        _111 = discriminant(_108);
        switchInt(move _111) -> [0: bb109, 1: bb107, otherwise: bb8];
    }

    bb107: {
        _187 = deref_copy (((_108 as Some).0: main::Wrap<&std::result::Result<u8, u8>>).0: &std::result::Result<u8, u8>);
        _110 = discriminant((*_187));
        switchInt(move _110) -> [0: bb111, 1: bb108, otherwise: bb8];
    }

    bb108: {
        _188 = deref_copy (((_108 as Some).0: main::Wrap<&std::result::Result<u8, u8>>).0: &std::result::Result<u8, u8>);
        _112 = (((*_188) as Err).0: u8);
        goto -> bb110;
    }

    bb109: {
        _116 = once::<Wrap<&Result<u8, u8>>>(_68) -> [return: bb112, unwind continue];
    }

    bb110: {
        _114 = _112;
        _113 = std::mem::drop::<u8>(move _114) -> [return: bb105, unwind continue];
    }

    bb111: {
        _189 = deref_copy (((_108 as Some).0: main::Wrap<&std::result::Result<u8, u8>>).0: &std::result::Result<u8, u8>);
        _112 = (((*_189) as Ok).0: u8);
        goto -> bb110;
    }

    bb112: {
        _115 = <std::iter::Once<Wrap<&Result<u8, u8>>> as IntoIterator>::into_iter(move _116) -> [return: bb113, unwind continue];
    }

    bb113: {
        _117 = move _115;
        goto -> bb114;
    }

    bb114: {
        _119 = &mut _117;
        _118 = <std::iter::Once<Wrap<&Result<u8, u8>>> as Iterator>::next(_119) -> [return: bb115, unwind continue];
    }

    bb115: {
        _121 = discriminant(_118);
        switchInt(move _121) -> [0: bb118, 1: bb116, otherwise: bb8];
    }

    bb116: {
        _190 = deref_copy (((_118 as Some).0: main::Wrap<&std::result::Result<u8, u8>>).0: &std::result::Result<u8, u8>);
        _120 = discriminant((*_190));
        switchInt(move _120) -> [0: bb120, 1: bb117, otherwise: bb8];
    }

    bb117: {
        _191 = deref_copy (((_118 as Some).0: main::Wrap<&std::result::Result<u8, u8>>).0: &std::result::Result<u8, u8>);
        _122 = (((*_191) as Err).0: u8);
        goto -> bb119;
    }

    bb118: {
        _126 = once::<Wrap<&Result<u8, u8>>>(_68) -> [return: bb121, unwind continue];
    }

    bb119: {
        _124 = _122;
        _123 = std::mem::drop::<u8>(move _124) -> [return: bb114, unwind continue];
    }

    bb120: {
        _192 = deref_copy (((_118 as Some).0: main::Wrap<&std::result::Result<u8, u8>>).0: &std::result::Result<u8, u8>);
        _122 = (((*_192) as Ok).0: u8);
        goto -> bb119;
    }

    bb121: {
        _125 = <std::iter::Once<Wrap<&Result<u8, u8>>> as IntoIterator>::into_iter(move _126) -> [return: bb122, unwind continue];
    }

    bb122: {
        _127 = move _125;
        goto -> bb123;
    }

    bb123: {
        _129 = &mut _127;
        _128 = <std::iter::Once<Wrap<&Result<u8, u8>>> as Iterator>::next(_129) -> [return: bb124, unwind continue];
    }

    bb124: {
        _131 = discriminant(_128);
        switchInt(move _131) -> [0: bb127, 1: bb125, otherwise: bb8];
    }

    bb125: {
        _193 = deref_copy (((_128 as Some).0: main::Wrap<&std::result::Result<u8, u8>>).0: &std::result::Result<u8, u8>);
        _130 = discriminant((*_193));
        switchInt(move _130) -> [0: bb129, 1: bb126, otherwise: bb8];
    }

    bb126: {
        _194 = deref_copy (((_128 as Some).0: main::Wrap<&std::result::Result<u8, u8>>).0: &std::result::Result<u8, u8>);
        _132 = &(((*_194) as Err).0: u8);
        goto -> bb128;
    }

    bb127: {
        _148 = const _;
        _139 = discriminant((*_148));
        switchInt(move _139) -> [0: bb130, 1: bb131, 2: bb132, otherwise: bb8];
    }

    bb128: {
        _134 = _132;
        _133 = std::mem::drop::<&u8>(move _134) -> [return: bb123, unwind continue];
    }

    bb129: {
        _195 = deref_copy (((_128 as Some).0: main::Wrap<&std::result::Result<u8, u8>>).0: &std::result::Result<u8, u8>);
        _132 = &(((*_195) as Ok).0: u8);
        goto -> bb128;
    }

    bb130: {
        _196 = deref_copy (((*_148) as A).0: &std::result::Result<u8, u8>);
        _136 = discriminant((*_196));
        switchInt(move _136) -> [0: bb135, 1: bb136, otherwise: bb8];
    }

    bb131: {
        _197 = deref_copy (((*_148) as B).0: &std::result::Result<u8, u8>);
        _137 = discriminant((*_197));
        switchInt(move _137) -> [0: bb137, 1: bb138, otherwise: bb8];
    }

    bb132: {
        _198 = deref_copy (((*_148) as C).0: &std::result::Result<u8, u8>);
        _138 = discriminant((*_198));
        switchInt(move _138) -> [0: bb139, 1: bb133, otherwise: bb8];
    }

    bb133: {
        _199 = deref_copy (((*_148) as C).0: &std::result::Result<u8, u8>);
        _135 = (((*_199) as Err).0: u8);
        goto -> bb134;
    }

    bb134: {
        _141 = _135;
        _140 = std::mem::drop::<u8>(move _141) -> [return: bb140, unwind continue];
    }

    bb135: {
        _200 = deref_copy (((*_148) as A).0: &std::result::Result<u8, u8>);
        _135 = (((*_200) as Ok).0: u8);
        goto -> bb134;
    }

    bb136: {
        _201 = deref_copy (((*_148) as A).0: &std::result::Result<u8, u8>);
        _135 = (((*_201) as Err).0: u8);
        goto -> bb134;
    }

    bb137: {
        _202 = deref_copy (((*_148) as B).0: &std::result::Result<u8, u8>);
        _135 = (((*_202) as Ok).0: u8);
        goto -> bb134;
    }

    bb138: {
        _203 = deref_copy (((*_148) as B).0: &std::result::Result<u8, u8>);
        _135 = (((*_203) as Err).0: u8);
        goto -> bb134;
    }

    bb139: {
        _204 = deref_copy (((*_148) as C).0: &std::result::Result<u8, u8>);
        _135 = (((*_204) as Ok).0: u8);
        goto -> bb134;
    }

    bb140: {
        _145 = discriminant((*_148));
        switchInt(move _145) -> [0: bb141, 1: bb142, 2: bb143, otherwise: bb8];
    }

    bb141: {
        _205 = deref_copy (((*_148) as A).0: &std::result::Result<u8, u8>);
        _142 = discriminant((*_205));
        switchInt(move _142) -> [0: bb146, 1: bb147, otherwise: bb8];
    }

    bb142: {
        _206 = deref_copy (((*_148) as B).0: &std::result::Result<u8, u8>);
        _143 = discriminant((*_206));
        switchInt(move _143) -> [0: bb148, 1: bb149, otherwise: bb8];
    }

    bb143: {
        _207 = deref_copy (((*_148) as C).0: &std::result::Result<u8, u8>);
        _144 = discriminant((*_207));
        switchInt(move _144) -> [0: bb150, 1: bb144, otherwise: bb8];
    }

    bb144: {
        _208 = deref_copy (((*_148) as C).0: &std::result::Result<u8, u8>);
        _146 = (((*_208) as Err).0: u8);
        goto -> bb145;
    }

    bb145: {
        _147 = _146;
        _0 = std::mem::drop::<u8>(move _147) -> [return: bb151, unwind continue];
    }

    bb146: {
        _209 = deref_copy (((*_148) as A).0: &std::result::Result<u8, u8>);
        _146 = (((*_209) as Ok).0: u8);
        goto -> bb145;
    }

    bb147: {
        _210 = deref_copy (((*_148) as A).0: &std::result::Result<u8, u8>);
        _146 = (((*_210) as Err).0: u8);
        goto -> bb145;
    }

    bb148: {
        _211 = deref_copy (((*_148) as B).0: &std::result::Result<u8, u8>);
        _146 = (((*_211) as Ok).0: u8);
        goto -> bb145;
    }

    bb149: {
        _212 = deref_copy (((*_148) as B).0: &std::result::Result<u8, u8>);
        _146 = (((*_212) as Err).0: u8);
        goto -> bb145;
    }

    bb150: {
        _213 = deref_copy (((*_148) as C).0: &std::result::Result<u8, u8>);
        _146 = (((*_213) as Ok).0: u8);
        goto -> bb145;
    }

    bb151: {
        return;
    }
}

promoted[0] in main: &Tri<&Result<u8, u8>> = {
    let mut _0: &main::Tri<&std::result::Result<u8, u8>>;
    let mut _1: main::Tri<&std::result::Result<u8, u8>>;
    let mut _2: &std::result::Result<u8, u8>;
    let mut _3: std::result::Result<u8, u8>;

    bb0: {
        _3 = Result::<u8, u8>::Ok(const 0_u8);
        _2 = &_3;
        _1 = Tri::<&Result<u8, u8>>::A(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Result<u8, u8> = {
    let mut _0: &std::result::Result<u8, u8>;
    let mut _1: std::result::Result<u8, u8>;

    bb0: {
        _1 = Result::<u8, u8>::Ok(const 0_u8);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn f1(_1: &Result<u8, u8>) -> () {
    let mut _0: ();
    let mut _2: u8;
    let mut _3: isize;
    let _4: ();
    let mut _5: u8;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = (((*_1) as Err).0: u8);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = _2;
        _4 = std::mem::drop::<u8>(move _5) -> [return: bb5, unwind continue];
    }

    bb4: {
        _2 = (((*_1) as Ok).0: u8);
        goto -> bb3;
    }

    bb5: {
        return;
    }
}

fn f2(_1: &Result<u8, u8>) -> () {
    let mut _0: ();
    let _2: u8;
    let mut _3: isize;
    let _4: ();
    let mut _5: u8;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = (((*_1) as Err).0: u8);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = _2;
        _4 = std::mem::drop::<u8>(move _5) -> [return: bb5, unwind continue];
    }

    bb4: {
        _2 = (((*_1) as Ok).0: u8);
        goto -> bb3;
    }

    bb5: {
        return;
    }
}

fn f3(_1: &Result<u8, u8>) -> () {
    let mut _0: ();
    let _2: &u8;
    let mut _3: isize;
    let _4: ();
    let mut _5: &u8;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = &(((*_1) as Err).0: u8);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = _2;
        _4 = std::mem::drop::<&u8>(move _5) -> [return: bb5, unwind continue];
    }

    bb4: {
        _2 = &(((*_1) as Ok).0: u8);
        goto -> bb3;
    }

    bb5: {
        return;
    }
}

fn main::<impl at ui/or-patterns/or-patterns-default-binding-modes.rs:67:20: 67:25>::clone(_1: &Wrap<T>) -> Wrap<T> {
    debug self => _1;
    let mut _0: main::Wrap<T>;
    let mut _2: T;
    let _3: &T;

    bb0: {
        _3 = &((*_1).0: T);
        _2 = <T as Clone>::clone(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Wrap::<T>(move _2);
        return;
    }
}

fn fw1(_1: Wrap<&Result<u8, u8>>) -> () {
    let mut _0: ();
    let mut _2: u8;
    let mut _3: isize;
    let _4: ();
    let mut _5: u8;
    let mut _6: &std::result::Result<u8, u8>;
    let mut _7: &std::result::Result<u8, u8>;
    let mut _8: &std::result::Result<u8, u8>;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _6 = deref_copy (_1.0: &std::result::Result<u8, u8>);
        _3 = discriminant((*_6));
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = deref_copy (_1.0: &std::result::Result<u8, u8>);
        _2 = (((*_7) as Err).0: u8);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = _2;
        _4 = std::mem::drop::<u8>(move _5) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = deref_copy (_1.0: &std::result::Result<u8, u8>);
        _2 = (((*_8) as Ok).0: u8);
        goto -> bb3;
    }

    bb5: {
        return;
    }
}

fn fw2(_1: Wrap<&Result<u8, u8>>) -> () {
    let mut _0: ();
    let _2: u8;
    let mut _3: isize;
    let _4: ();
    let mut _5: u8;
    let mut _6: &std::result::Result<u8, u8>;
    let mut _7: &std::result::Result<u8, u8>;
    let mut _8: &std::result::Result<u8, u8>;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _6 = deref_copy (_1.0: &std::result::Result<u8, u8>);
        _3 = discriminant((*_6));
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = deref_copy (_1.0: &std::result::Result<u8, u8>);
        _2 = (((*_7) as Err).0: u8);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = _2;
        _4 = std::mem::drop::<u8>(move _5) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = deref_copy (_1.0: &std::result::Result<u8, u8>);
        _2 = (((*_8) as Ok).0: u8);
        goto -> bb3;
    }

    bb5: {
        return;
    }
}

fn fw3(_1: Wrap<&Result<u8, u8>>) -> () {
    let mut _0: ();
    let _2: &u8;
    let mut _3: isize;
    let _4: ();
    let mut _5: &u8;
    let mut _6: &std::result::Result<u8, u8>;
    let mut _7: &std::result::Result<u8, u8>;
    let mut _8: &std::result::Result<u8, u8>;
    scope 1 {
        debug x => _2;
    }

    bb0: {
        _6 = deref_copy (_1.0: &std::result::Result<u8, u8>);
        _3 = discriminant((*_6));
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = deref_copy (_1.0: &std::result::Result<u8, u8>);
        _2 = &(((*_7) as Err).0: u8);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = _2;
        _4 = std::mem::drop::<&u8>(move _5) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = deref_copy (_1.0: &std::result::Result<u8, u8>);
        _2 = &(((*_8) as Ok).0: u8);
        goto -> bb3;
    }

    bb5: {
        return;
    }
}

fn Wrap(_1: T) -> Wrap<T> {
    let mut _0: main::Wrap<T>;

    bb0: {
        _0 = Wrap::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Wrap(_1: T) -> Wrap<T> {
    let mut _0: main::Wrap<T>;

    bb0: {
        _0 = Wrap::<T>(move _1);
        return;
    }
}

fn Tri::A(_1: P) -> Tri<P> {
    let mut _0: main::Tri<P>;

    bb0: {
        _0 = Tri::<P>::A(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Tri::A(_1: P) -> Tri<P> {
    let mut _0: main::Tri<P>;

    bb0: {
        _0 = Tri::<P>::A(move _1);
        return;
    }
}

fn Tri::B(_1: P) -> Tri<P> {
    let mut _0: main::Tri<P>;

    bb0: {
        _0 = Tri::<P>::B(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Tri::B(_1: P) -> Tri<P> {
    let mut _0: main::Tri<P>;

    bb0: {
        _0 = Tri::<P>::B(move _1);
        return;
    }
}

fn Tri::C(_1: P) -> Tri<P> {
    let mut _0: main::Tri<P>;

    bb0: {
        _0 = Tri::<P>::C(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Tri::C(_1: P) -> Tri<P> {
    let mut _0: main::Tri<P>;

    bb0: {
        _0 = Tri::<P>::C(move _1);
        return;
    }
}
