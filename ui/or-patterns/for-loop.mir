// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/for-loop.rs:4:11: 4:11
    let _1: std::vec::Vec<std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:5:9: 5:10
    let mut _2: std::boxed::Box<[std::result::Result<i32, i32>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[std::result::Result<i32, i32>; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[std::result::Result<i32, i32>; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::result::Result<i32, i32>; // in scope 0 at ui/or-patterns/for-loop.rs:5:18: 5:23
    let mut _9: std::result::Result<i32, i32>; // in scope 0 at ui/or-patterns/for-loop.rs:5:25: 5:31
    let mut _10: std::result::Result<i32, i32>; // in scope 0 at ui/or-patterns/for-loop.rs:5:33: 5:38
    let mut _12: std::slice::Iter<'_, std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:7:30: 7:32
    let mut _13: &std::vec::Vec<std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:7:30: 7:32
    let mut _15: std::option::Option<&std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:7:30: 7:32
    let mut _16: &mut std::slice::Iter<'_, std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:7:30: 7:32
    let mut _17: &mut std::slice::Iter<'_, std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:7:30: 7:32
    let mut _18: isize;                  // in scope 0 at ui/or-patterns/for-loop.rs:7:11: 7:16
    let mut _19: isize;                  // in scope 0 at ui/or-patterns/for-loop.rs:7:5: 9:6
    let _21: ();                         // in scope 0 at ui/or-patterns/for-loop.rs:8:9: 8:18
    let mut _22: &mut std::vec::Vec<i32>; // in scope 0 at ui/or-patterns/for-loop.rs:8:9: 8:18
    let mut _23: i32;                    // in scope 0 at ui/or-patterns/for-loop.rs:8:16: 8:17
    let mut _25: std::vec::IntoIter<std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:11:27: 11:28
    let mut _26: std::vec::Vec<std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:11:27: 11:28
    let mut _28: std::option::Option<std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:11:27: 11:28
    let mut _29: &mut std::vec::IntoIter<std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:11:27: 11:28
    let mut _30: &mut std::vec::IntoIter<std::result::Result<i32, i32>>; // in scope 0 at ui/or-patterns/for-loop.rs:11:27: 11:28
    let mut _31: isize;                  // in scope 0 at ui/or-patterns/for-loop.rs:11:9: 11:14
    let mut _32: isize;                  // in scope 0 at ui/or-patterns/for-loop.rs:11:5: 13:6
    let _34: ();                         // in scope 0 at ui/or-patterns/for-loop.rs:12:9: 12:18
    let mut _35: &mut std::vec::Vec<i32>; // in scope 0 at ui/or-patterns/for-loop.rs:12:9: 12:18
    let mut _36: i32;                    // in scope 0 at ui/or-patterns/for-loop.rs:12:16: 12:17
    let mut _37: (&std::vec::Vec<i32>, &[i32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _38: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _39: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _44: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _45: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _47: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _48: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _49: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _50: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _51: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _52: &[i32; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _54: (&std::vec::Vec<i32>, &[i32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _55: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _56: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _60: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _61: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _62: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _64: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _65: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _66: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _67: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _68: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _69: &[i32; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _70: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _73: &std::result::Result<i32, i32>; // in scope 0 at ui/or-patterns/for-loop.rs:7:30: 7:32
    let mut _74: &std::result::Result<i32, i32>; // in scope 0 at ui/or-patterns/for-loop.rs:7:30: 7:32
    let mut _75: &std::result::Result<i32, i32>; // in scope 0 at ui/or-patterns/for-loop.rs:7:30: 7:32
    let mut _76: bool;                   // in scope 0 at ui/or-patterns/for-loop.rs:16:1: 16:2
    let mut _77: *const [std::result::Result<i32, i32>; 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/or-patterns/for-loop.rs:5:9: 5:10
        let mut _11: std::vec::Vec<i32>; // in scope 1 at ui/or-patterns/for-loop.rs:6:9: 6:14
        scope 3 {
            debug w => _11;              // in scope 3 at ui/or-patterns/for-loop.rs:6:9: 6:14
            let mut _14: std::slice::Iter<'_, std::result::Result<i32, i32>>; // in scope 3 at ui/or-patterns/for-loop.rs:7:30: 7:32
            let mut _24: std::vec::Vec<i32>; // in scope 3 at ui/or-patterns/for-loop.rs:10:9: 10:14
            scope 4 {
                debug iter => _14;       // in scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
                let _20: i32;            // in scope 4 at ui/or-patterns/for-loop.rs:7:14: 7:15
                scope 5 {
                    debug i => _20;      // in scope 5 at ui/or-patterns/for-loop.rs:7:14: 7:15
                }
            }
            scope 6 {
                debug u => _24;          // in scope 6 at ui/or-patterns/for-loop.rs:10:9: 10:14
                let mut _27: std::vec::IntoIter<std::result::Result<i32, i32>>; // in scope 6 at ui/or-patterns/for-loop.rs:11:27: 11:28
                let _40: &std::vec::Vec<i32>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _41: &[i32; 3];      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _57: &std::vec::Vec<i32>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _58: &[i32; 3];      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _71: &[i32; 3];  // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _72: &[i32; 3];  // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 7 {
                    debug iter => _27;   // in scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
                    let _33: i32;        // in scope 7 at ui/or-patterns/for-loop.rs:11:12: 11:13
                    scope 8 {
                        debug i => _33;  // in scope 8 at ui/or-patterns/for-loop.rs:11:12: 11:13
                    }
                }
                scope 9 {
                    debug left_val => _40; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _41; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _46: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 10 {
                        debug kind => _46; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 11 {
                    debug left_val => _57; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _58; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _63: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 12 {
                        debug kind => _63; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _76 = const false;               // scope 0 at ui/or-patterns/for-loop.rs:5:9: 5:10
        _4 = const 24_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [std::result::Result<i32, i32>; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _8 = Result::<i32, i32>::Ok(const 2_i32); // scope 0 at ui/or-patterns/for-loop.rs:5:18: 5:23
        _9 = Result::<i32, i32>::Err(const 3_i32); // scope 0 at ui/or-patterns/for-loop.rs:5:25: 5:31
        _10 = Result::<i32, i32>::Ok(const 5_i32); // scope 0 at ui/or-patterns/for-loop.rs:5:33: 5:38
        _77 = (((_7.0: std::ptr::Unique<[std::result::Result<i32, i32>; 3]>).0: std::ptr::NonNull<[std::result::Result<i32, i32>; 3]>).0: *const [std::result::Result<i32, i32>; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_77) = [move _8, move _9, move _10]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[std::result::Result<i32, i32>]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [Result<i32, i32>]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[Result<i32, i32>]>) -> Vec<Result<i32, i32>> {slice::<impl [Result<i32, i32>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _76 = const true;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:53:9: 53:10
        _11 = Vec::<i32>::new() -> [return: bb3, unwind: bb37]; // scope 1 at ui/or-patterns/for-loop.rs:6:17: 6:27
                                         // mir::Constant
                                         // + span: ui/or-patterns/for-loop.rs:6:17: 6:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = &_1;                       // scope 3 at ui/or-patterns/for-loop.rs:7:30: 7:32
        _12 = <&Vec<Result<i32, i32>> as IntoIterator>::into_iter(move _13) -> [return: bb4, unwind: bb34]; // scope 3 at ui/or-patterns/for-loop.rs:7:30: 7:32
                                         // mir::Constant
                                         // + span: ui/or-patterns/for-loop.rs:7:30: 7:32
                                         // + literal: Const { ty: fn(&Vec<Result<i32, i32>>) -> <&Vec<Result<i32, i32>> as IntoIterator>::IntoIter {<&Vec<Result<i32, i32>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = move _12;                  // scope 3 at ui/or-patterns/for-loop.rs:7:30: 7:32
        goto -> bb5;                     // scope 4 at ui/or-patterns/for-loop.rs:7:5: 9:6
    }

    bb5: {
        _17 = &mut _14;                  // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
        _16 = &mut (*_17);               // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
        _15 = <std::slice::Iter<'_, Result<i32, i32>> as Iterator>::next(move _16) -> [return: bb6, unwind: bb34]; // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
                                         // mir::Constant
                                         // + span: ui/or-patterns/for-loop.rs:7:30: 7:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, Result<i32, i32>>) -> Option<<std::slice::Iter<'_, Result<i32, i32>> as Iterator>::Item> {<std::slice::Iter<'_, Result<i32, i32>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = discriminant(_15);         // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
        switchInt(move _19) -> [0: bb10, 1: bb7, otherwise: bb9]; // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
    }

    bb7: {
        _73 = deref_copy ((_15 as Some).0: &std::result::Result<i32, i32>); // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
        _18 = discriminant((*_73));      // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
        switchInt(move _18) -> [0: bb12, 1: bb8, otherwise: bb9]; // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
    }

    bb8: {
        _74 = deref_copy ((_15 as Some).0: &std::result::Result<i32, i32>); // scope 4 at ui/or-patterns/for-loop.rs:7:23: 7:24
        _20 = (((*_74) as Err).0: i32);  // scope 4 at ui/or-patterns/for-loop.rs:7:23: 7:24
        goto -> bb11;                    // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
    }

    bb9: {
        unreachable;                     // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
    }

    bb10: {
        _24 = Vec::<i32>::new() -> [return: bb13, unwind: bb34]; // scope 3 at ui/or-patterns/for-loop.rs:10:17: 10:27
                                         // mir::Constant
                                         // + span: ui/or-patterns/for-loop.rs:10:17: 10:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _22 = &mut _11;                  // scope 5 at ui/or-patterns/for-loop.rs:8:9: 8:18
        _23 = _20;                       // scope 5 at ui/or-patterns/for-loop.rs:8:16: 8:17
        _21 = Vec::<i32>::push(move _22, move _23) -> [return: bb38, unwind: bb34]; // scope 5 at ui/or-patterns/for-loop.rs:8:9: 8:18
                                         // mir::Constant
                                         // + span: ui/or-patterns/for-loop.rs:8:11: 8:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb12: {
        _75 = deref_copy ((_15 as Some).0: &std::result::Result<i32, i32>); // scope 4 at ui/or-patterns/for-loop.rs:7:14: 7:15
        _20 = (((*_75) as Ok).0: i32);   // scope 4 at ui/or-patterns/for-loop.rs:7:14: 7:15
        goto -> bb11;                    // scope 4 at ui/or-patterns/for-loop.rs:7:30: 7:32
    }

    bb13: {
        _76 = const false;               // scope 6 at ui/or-patterns/for-loop.rs:11:27: 11:28
        _26 = move _1;                   // scope 6 at ui/or-patterns/for-loop.rs:11:27: 11:28
        _25 = <Vec<Result<i32, i32>> as IntoIterator>::into_iter(move _26) -> [return: bb14, unwind: bb33]; // scope 6 at ui/or-patterns/for-loop.rs:11:27: 11:28
                                         // mir::Constant
                                         // + span: ui/or-patterns/for-loop.rs:11:27: 11:28
                                         // + literal: Const { ty: fn(Vec<Result<i32, i32>>) -> <Vec<Result<i32, i32>> as IntoIterator>::IntoIter {<Vec<Result<i32, i32>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb14: {
        _27 = move _25;                  // scope 6 at ui/or-patterns/for-loop.rs:11:27: 11:28
        goto -> bb15;                    // scope 7 at ui/or-patterns/for-loop.rs:11:5: 13:6
    }

    bb15: {
        _30 = &mut _27;                  // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
        _29 = &mut (*_30);               // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
        _28 = <std::vec::IntoIter<Result<i32, i32>> as Iterator>::next(move _29) -> [return: bb16, unwind: bb32]; // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
                                         // mir::Constant
                                         // + span: ui/or-patterns/for-loop.rs:11:27: 11:28
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<Result<i32, i32>>) -> Option<<std::vec::IntoIter<Result<i32, i32>> as Iterator>::Item> {<std::vec::IntoIter<Result<i32, i32>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb16: {
        _32 = discriminant(_28);         // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
        switchInt(move _32) -> [0: bb20, 1: bb17, otherwise: bb19]; // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
    }

    bb17: {
        _31 = discriminant(((_28 as Some).0: std::result::Result<i32, i32>)); // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
        switchInt(move _31) -> [0: bb22, 1: bb18, otherwise: bb19]; // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
    }

    bb18: {
        _33 = ((((_28 as Some).0: std::result::Result<i32, i32>) as Err).0: i32); // scope 7 at ui/or-patterns/for-loop.rs:11:21: 11:22
        goto -> bb21;                    // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
    }

    bb19: {
        unreachable;                     // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
    }

    bb20: {
        drop(_27) -> [return: bb23, unwind: bb33]; // scope 6 at ui/or-patterns/for-loop.rs:13:5: 13:6
    }

    bb21: {
        _35 = &mut _24;                  // scope 8 at ui/or-patterns/for-loop.rs:12:9: 12:18
        _36 = _33;                       // scope 8 at ui/or-patterns/for-loop.rs:12:16: 12:17
        _34 = Vec::<i32>::push(move _35, move _36) -> [return: bb39, unwind: bb32]; // scope 8 at ui/or-patterns/for-loop.rs:12:9: 12:18
                                         // mir::Constant
                                         // + span: ui/or-patterns/for-loop.rs:12:11: 12:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb22: {
        _33 = ((((_28 as Some).0: std::result::Result<i32, i32>) as Ok).0: i32); // scope 7 at ui/or-patterns/for-loop.rs:11:12: 11:13
        goto -> bb21;                    // scope 7 at ui/or-patterns/for-loop.rs:11:27: 11:28
    }

    bb23: {
        _38 = &_11;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _72 = const _;                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _39 = _72;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _37 = (move _38, move _39);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _40 = (_37.0: &std::vec::Vec<i32>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _41 = (_37.1: &[i32; 3]);        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _44 = _40;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _45 = _41;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _43 = <Vec<i32> as PartialEq<[i32; 3]>>::eq(move _44, move _45) -> [return: bb24, unwind: bb33]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 3]) -> bool {<Vec<i32> as PartialEq<[i32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        _42 = Not(move _43);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _42) -> [0: bb26, otherwise: bb25]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _46 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _50 = _40;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _50;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _41;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = _52;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _53 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _47 = core::panicking::assert_failed::<Vec<i32>, [i32; 3]>(move _48, move _49, move _51, move _53) -> bb33; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 3]>}, val: Value(<ZST>) }
    }

    bb26: {
        _55 = &_24;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _71 = const _;                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _56 = _71;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _54 = (move _55, move _56);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _57 = (_54.0: &std::vec::Vec<i32>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _58 = (_54.1: &[i32; 3]);        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _61 = _57;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _62 = _58;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _60 = <Vec<i32> as PartialEq<[i32; 3]>>::eq(move _61, move _62) -> [return: bb27, unwind: bb33]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 3]) -> bool {<Vec<i32> as PartialEq<[i32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb27: {
        _59 = Not(move _60);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _59) -> [0: bb29, otherwise: bb28]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _63 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _65 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = _57;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _66 = _67;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _69 = _58;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _68 = _69;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _64 = core::panicking::assert_failed::<Vec<i32>, [i32; 3]>(move _65, move _66, move _68, move _70) -> bb33; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 3]>}, val: Value(<ZST>) }
    }

    bb29: {
        drop(_24) -> [return: bb30, unwind: bb34]; // scope 3 at ui/or-patterns/for-loop.rs:16:1: 16:2
    }

    bb30: {
        drop(_11) -> [return: bb31, unwind: bb37]; // scope 1 at ui/or-patterns/for-loop.rs:16:1: 16:2
    }

    bb31: {
        _76 = const false;               // scope 0 at ui/or-patterns/for-loop.rs:16:1: 16:2
        return;                          // scope 0 at ui/or-patterns/for-loop.rs:16:2: 16:2
    }

    bb32 (cleanup): {
        drop(_27) -> bb33;               // scope 6 at ui/or-patterns/for-loop.rs:13:5: 13:6
    }

    bb33 (cleanup): {
        drop(_24) -> bb34;               // scope 3 at ui/or-patterns/for-loop.rs:16:1: 16:2
    }

    bb34 (cleanup): {
        drop(_11) -> bb37;               // scope 1 at ui/or-patterns/for-loop.rs:16:1: 16:2
    }

    bb35 (cleanup): {
        resume;                          // scope 0 at ui/or-patterns/for-loop.rs:4:1: 16:2
    }

    bb36 (cleanup): {
        drop(_1) -> bb35;                // scope 0 at ui/or-patterns/for-loop.rs:16:1: 16:2
    }

    bb37 (cleanup): {
        switchInt(_76) -> [0: bb35, otherwise: bb36]; // scope 0 at ui/or-patterns/for-loop.rs:16:1: 16:2
    }

    bb38: {
        goto -> bb5;                     // scope 5 at ui/or-patterns/for-loop.rs:8:9: 8:18
    }

    bb39: {
        goto -> bb15;                    // scope 8 at ui/or-patterns/for-loop.rs:12:9: 12:18
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 3];                // in scope 0 at ui/or-patterns/for-loop.rs:15:19: 15:28

    bb0: {
        _1 = [const 2_i32, const 3_i32, const 5_i32]; // scope 0 at ui/or-patterns/for-loop.rs:15:19: 15:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 3];                // in scope 0 at ui/or-patterns/for-loop.rs:14:19: 14:28

    bb0: {
        _1 = [const 2_i32, const 3_i32, const 5_i32]; // scope 0 at ui/or-patterns/for-loop.rs:14:19: 14:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
