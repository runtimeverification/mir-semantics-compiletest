// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/or-patterns/basic-switchint.rs:6:10: 6:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &str;
    scope 1 {
        debug __self_0 => _4;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = const "Wild";
        _0 = Formatter::<'_>::write_str(_2, _8) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize);
        _5 = const "Arm";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn <impl at ui/or-patterns/basic-switchint.rs:6:17: 6:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let _3: isize;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: (&MatchArm, &MatchArm);
    let mut _8: isize;
    let mut _9: isize;
    let mut _12: usize;
    let mut _13: usize;
    let mut _14: &MatchArm;
    let mut _15: &MatchArm;
    let mut _16: &MatchArm;
    let mut _17: &MatchArm;
    scope 1 {
        debug __self_tag => _3;
        let _4: isize;
        scope 2 {
            debug __arg1_tag => _4;
            let _10: &usize;
            let _11: &usize;
            scope 3 {
                debug __self_0 => _10;
                debug __arg1_0 => _11;
            }
        }
    }

    bb0: {
        _3 = discriminant((*_1));
        _4 = discriminant((*_2));
        _5 = Eq(_3, _4);
        switchInt(move _5) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _7 = (_1, _2);
        _14 = deref_copy (_7.0: &MatchArm);
        _9 = discriminant((*_14));
        switchInt(move _9) -> [0: bb4, otherwise: bb5];
    }

    bb3: {
        return;
    }

    bb4: {
        _15 = deref_copy (_7.1: &MatchArm);
        _8 = discriminant((*_15));
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _6 = const true;
        goto -> bb7;
    }

    bb6: {
        _16 = deref_copy (_7.0: &MatchArm);
        _10 = &(((*_16) as Arm).0: usize);
        _17 = deref_copy (_7.1: &MatchArm);
        _11 = &(((*_17) as Arm).0: usize);
        _12 = (*_10);
        _13 = (*_11);
        _6 = Eq(move _12, move _13);
        goto -> bb7;
    }

    bb7: {
        _0 = move _6;
        goto -> bb3;
    }
}

fn <impl at ui/or-patterns/basic-switchint.rs:12:10: 12:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &usize;
    let _9: &usize;
    let _10: &str;
    let mut _11: &dyn std::fmt::Debug;
    let mut _12: &dyn std::fmt::Debug;
    let _13: &&usize;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
        debug __self_1 => _9;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = &(((*_1) as Two).0: usize);
        _9 = &(((*_1) as Two).1: usize);
        _10 = const "Two";
        _11 = _8 as &dyn std::fmt::Debug (Pointer(Unsize));
        _13 = &_9;
        _12 = _13 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _10, move _11, move _12) -> [return: bb4, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as One).0: usize);
        _5 = const "One";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

fn test_foo(_1: Foo) -> MatchArm {
    debug x => _1;
    let mut _0: MatchArm;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;

    bb0: {
        _10 = discriminant(_1);
        switchInt(move _10) -> [0: bb1, 1: bb7, otherwise: bb19];
    }

    bb1: {
        switchInt(((_1 as One).0: usize)) -> [0: bb13, 1: bb13, 2: bb13, 42: bb14, 255: bb14, 100: bb16, otherwise: bb2];
    }

    bb2: {
        _4 = Le(const 110_usize, ((_1 as One).0: usize));
        switchInt(move _4) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _5 = Le(((_1 as One).0: usize), const 120_usize);
        switchInt(move _5) -> [0: bb4, otherwise: bb16];
    }

    bb4: {
        _2 = Le(const 210_usize, ((_1 as One).0: usize));
        switchInt(move _2) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _3 = Le(((_1 as One).0: usize), const 220_usize);
        switchInt(move _3) -> [0: bb6, otherwise: bb16];
    }

    bb6: {
        _0 = MatchArm::Wild;
        goto -> bb18;
    }

    bb7: {
        switchInt(((_1 as Two).0: usize)) -> [42: bb9, 255: bb9, otherwise: bb8];
    }

    bb8: {
        _8 = Le(const 0_usize, ((_1 as Two).0: usize));
        switchInt(move _8) -> [0: bb11, otherwise: bb10];
    }

    bb9: {
        switchInt(((_1 as Two).1: usize)) -> [1024: bb15, 2048: bb15, otherwise: bb8];
    }

    bb10: {
        _9 = Le(((_1 as Two).0: usize), const 10_usize);
        switchInt(move _9) -> [0: bb11, otherwise: bb17];
    }

    bb11: {
        _6 = Le(const 100_usize, ((_1 as Two).0: usize));
        switchInt(move _6) -> [0: bb6, otherwise: bb12];
    }

    bb12: {
        _7 = Le(((_1 as Two).0: usize), const 110_usize);
        switchInt(move _7) -> [0: bb6, otherwise: bb17];
    }

    bb13: {
        _0 = MatchArm::Arm(const 0_usize);
        goto -> bb18;
    }

    bb14: {
        _0 = MatchArm::Arm(const 1_usize);
        goto -> bb18;
    }

    bb15: {
        _0 = MatchArm::Arm(const 2_usize);
        goto -> bb18;
    }

    bb16: {
        _0 = MatchArm::Arm(const 3_usize);
        goto -> bb18;
    }

    bb17: {
        _0 = MatchArm::Arm(const 4_usize);
        goto -> bb18;
    }

    bb18: {
        return;
    }

    bb19: {
        unreachable;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&MatchArm, &MatchArm);
    let mut _2: &MatchArm;
    let _3: MatchArm;
    let mut _4: Foo;
    let _5: &MatchArm;
    let _6: &MatchArm;
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&MatchArm, &MatchArm);
    let mut _13: &MatchArm;
    let _14: MatchArm;
    let mut _15: Foo;
    let _16: &MatchArm;
    let _17: &MatchArm;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: (&MatchArm, &MatchArm);
    let mut _24: &MatchArm;
    let _25: MatchArm;
    let mut _26: Foo;
    let _27: &MatchArm;
    let _28: &MatchArm;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&MatchArm, &MatchArm);
    let mut _35: &MatchArm;
    let _36: MatchArm;
    let mut _37: Foo;
    let _38: &MatchArm;
    let _39: &MatchArm;
    let mut _40: bool;
    let mut _41: bool;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&MatchArm, &MatchArm);
    let mut _46: &MatchArm;
    let _47: MatchArm;
    let mut _48: Foo;
    let _49: &MatchArm;
    let _50: &MatchArm;
    let mut _51: bool;
    let mut _52: bool;
    let _54: !;
    let mut _55: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _56: (&MatchArm, &MatchArm);
    let mut _57: &MatchArm;
    let _58: MatchArm;
    let mut _59: Foo;
    let _60: &MatchArm;
    let _61: &MatchArm;
    let mut _62: bool;
    let mut _63: bool;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&MatchArm, &MatchArm);
    let mut _68: &MatchArm;
    let _69: MatchArm;
    let mut _70: Foo;
    let _71: &MatchArm;
    let _72: &MatchArm;
    let mut _73: bool;
    let mut _74: bool;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: (&MatchArm, &MatchArm);
    let mut _79: &MatchArm;
    let _80: MatchArm;
    let mut _81: Foo;
    let _82: &MatchArm;
    let _83: &MatchArm;
    let mut _84: bool;
    let mut _85: bool;
    let _87: !;
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _89: (&MatchArm, &MatchArm);
    let mut _90: &MatchArm;
    let _91: MatchArm;
    let mut _92: Foo;
    let _93: &MatchArm;
    let _94: &MatchArm;
    let mut _95: bool;
    let mut _96: bool;
    let _98: !;
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _100: (&MatchArm, &MatchArm);
    let mut _101: &MatchArm;
    let _102: MatchArm;
    let mut _103: Foo;
    let _104: &MatchArm;
    let _105: &MatchArm;
    let mut _106: bool;
    let mut _107: bool;
    let _109: !;
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _111: (&MatchArm, &MatchArm);
    let mut _112: &MatchArm;
    let _113: MatchArm;
    let mut _114: Foo;
    let _115: &MatchArm;
    let _116: &MatchArm;
    let mut _117: bool;
    let mut _118: bool;
    let _120: !;
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _122: (&MatchArm, &MatchArm);
    let mut _123: &MatchArm;
    let _124: MatchArm;
    let mut _125: Foo;
    let _126: &MatchArm;
    let _127: &MatchArm;
    let mut _128: bool;
    let mut _129: bool;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&MatchArm, &MatchArm);
    let mut _134: &MatchArm;
    let _135: MatchArm;
    let mut _136: Foo;
    let _137: &MatchArm;
    let _138: &MatchArm;
    let mut _139: bool;
    let mut _140: bool;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _144: (&MatchArm, &MatchArm);
    let mut _145: &MatchArm;
    let _146: MatchArm;
    let mut _147: Foo;
    let _148: &MatchArm;
    let _149: &MatchArm;
    let mut _150: bool;
    let mut _151: bool;
    let _153: !;
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _155: (&MatchArm, &MatchArm);
    let mut _156: &MatchArm;
    let _157: MatchArm;
    let mut _158: Foo;
    let _159: &MatchArm;
    let _160: &MatchArm;
    let mut _161: bool;
    let mut _162: bool;
    let _164: !;
    let mut _165: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _166: &MatchArm;
    let mut _167: &MatchArm;
    let mut _168: &MatchArm;
    let mut _169: &MatchArm;
    let mut _170: &MatchArm;
    let mut _171: &MatchArm;
    let mut _172: &MatchArm;
    let mut _173: &MatchArm;
    let mut _174: &MatchArm;
    let mut _175: &MatchArm;
    let mut _176: &MatchArm;
    let mut _177: &MatchArm;
    let mut _178: &MatchArm;
    let mut _179: &MatchArm;
    let mut _180: &MatchArm;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }
    scope 5 {
        debug left_val => _27;
        debug right_val => _28;
        let _31: core::panicking::AssertKind;
        scope 6 {
            debug kind => _31;
        }
    }
    scope 7 {
        debug left_val => _38;
        debug right_val => _39;
        let _42: core::panicking::AssertKind;
        scope 8 {
            debug kind => _42;
        }
    }
    scope 9 {
        debug left_val => _49;
        debug right_val => _50;
        let _53: core::panicking::AssertKind;
        scope 10 {
            debug kind => _53;
        }
    }
    scope 11 {
        debug left_val => _60;
        debug right_val => _61;
        let _64: core::panicking::AssertKind;
        scope 12 {
            debug kind => _64;
        }
    }
    scope 13 {
        debug left_val => _71;
        debug right_val => _72;
        let _75: core::panicking::AssertKind;
        scope 14 {
            debug kind => _75;
        }
    }
    scope 15 {
        debug left_val => _82;
        debug right_val => _83;
        let _86: core::panicking::AssertKind;
        scope 16 {
            debug kind => _86;
        }
    }
    scope 17 {
        debug left_val => _93;
        debug right_val => _94;
        let _97: core::panicking::AssertKind;
        scope 18 {
            debug kind => _97;
        }
    }
    scope 19 {
        debug left_val => _104;
        debug right_val => _105;
        let _108: core::panicking::AssertKind;
        scope 20 {
            debug kind => _108;
        }
    }
    scope 21 {
        debug left_val => _115;
        debug right_val => _116;
        let _119: core::panicking::AssertKind;
        scope 22 {
            debug kind => _119;
        }
    }
    scope 23 {
        debug left_val => _126;
        debug right_val => _127;
        let _130: core::panicking::AssertKind;
        scope 24 {
            debug kind => _130;
        }
    }
    scope 25 {
        debug left_val => _137;
        debug right_val => _138;
        let _141: core::panicking::AssertKind;
        scope 26 {
            debug kind => _141;
        }
    }
    scope 27 {
        debug left_val => _148;
        debug right_val => _149;
        let _152: core::panicking::AssertKind;
        scope 28 {
            debug kind => _152;
        }
    }
    scope 29 {
        debug left_val => _159;
        debug right_val => _160;
        let _163: core::panicking::AssertKind;
        scope 30 {
            debug kind => _163;
        }
    }

    bb0: {
        _4 = Foo::One(const 0_usize);
        _3 = test_foo(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _180 = const _;
        _1 = (move _2, _180);
        _5 = (_1.0: &MatchArm);
        _6 = (_1.1: &MatchArm);
        _8 = <MatchArm as PartialEq>::eq(_5, _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _9, _5, _6, move _11) -> unwind continue;
    }

    bb4: {
        _15 = Foo::One(const 42_usize);
        _14 = test_foo(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = &_14;
        _179 = const _;
        _12 = (move _13, _179);
        _16 = (_12.0: &MatchArm);
        _17 = (_12.1: &MatchArm);
        _19 = <MatchArm as PartialEq>::eq(_16, _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _20, _16, _17, move _22) -> unwind continue;
    }

    bb8: {
        _26 = Foo::One(const 43_usize);
        _25 = test_foo(move _26) -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = &_25;
        _178 = const _;
        _23 = (move _24, _178);
        _27 = (_23.0: &MatchArm);
        _28 = (_23.1: &MatchArm);
        _30 = <MatchArm as PartialEq>::eq(_27, _28) -> [return: bb10, unwind continue];
    }

    bb10: {
        _29 = Not(move _30);
        switchInt(move _29) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _31, _27, _28, move _33) -> unwind continue;
    }

    bb12: {
        _37 = Foo::One(const 255_usize);
        _36 = test_foo(move _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        _35 = &_36;
        _177 = const _;
        _34 = (move _35, _177);
        _38 = (_34.0: &MatchArm);
        _39 = (_34.1: &MatchArm);
        _41 = <MatchArm as PartialEq>::eq(_38, _39) -> [return: bb14, unwind continue];
    }

    bb14: {
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _42, _38, _39, move _44) -> unwind continue;
    }

    bb16: {
        _48 = Foo::One(const 256_usize);
        _47 = test_foo(move _48) -> [return: bb17, unwind continue];
    }

    bb17: {
        _46 = &_47;
        _176 = const _;
        _45 = (move _46, _176);
        _49 = (_45.0: &MatchArm);
        _50 = (_45.1: &MatchArm);
        _52 = <MatchArm as PartialEq>::eq(_49, _50) -> [return: bb18, unwind continue];
    }

    bb18: {
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _53 = core::panicking::AssertKind::Eq;
        _55 = Option::<Arguments<'_>>::None;
        _54 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _53, _49, _50, move _55) -> unwind continue;
    }

    bb20: {
        _59 = Foo::Two(const 42_usize, const 1023_usize);
        _58 = test_foo(move _59) -> [return: bb21, unwind continue];
    }

    bb21: {
        _57 = &_58;
        _175 = const _;
        _56 = (move _57, _175);
        _60 = (_56.0: &MatchArm);
        _61 = (_56.1: &MatchArm);
        _63 = <MatchArm as PartialEq>::eq(_60, _61) -> [return: bb22, unwind continue];
    }

    bb22: {
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _64, _60, _61, move _66) -> unwind continue;
    }

    bb24: {
        _70 = Foo::Two(const 255_usize, const 2048_usize);
        _69 = test_foo(move _70) -> [return: bb25, unwind continue];
    }

    bb25: {
        _68 = &_69;
        _174 = const _;
        _67 = (move _68, _174);
        _71 = (_67.0: &MatchArm);
        _72 = (_67.1: &MatchArm);
        _74 = <MatchArm as PartialEq>::eq(_71, _72) -> [return: bb26, unwind continue];
    }

    bb26: {
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _75, _71, _72, move _77) -> unwind continue;
    }

    bb28: {
        _81 = Foo::One(const 100_usize);
        _80 = test_foo(move _81) -> [return: bb29, unwind continue];
    }

    bb29: {
        _79 = &_80;
        _173 = const _;
        _78 = (move _79, _173);
        _82 = (_78.0: &MatchArm);
        _83 = (_78.1: &MatchArm);
        _85 = <MatchArm as PartialEq>::eq(_82, _83) -> [return: bb30, unwind continue];
    }

    bb30: {
        _84 = Not(move _85);
        switchInt(move _84) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _86 = core::panicking::AssertKind::Eq;
        _88 = Option::<Arguments<'_>>::None;
        _87 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _86, _82, _83, move _88) -> unwind continue;
    }

    bb32: {
        _92 = Foo::One(const 115_usize);
        _91 = test_foo(move _92) -> [return: bb33, unwind continue];
    }

    bb33: {
        _90 = &_91;
        _172 = const _;
        _89 = (move _90, _172);
        _93 = (_89.0: &MatchArm);
        _94 = (_89.1: &MatchArm);
        _96 = <MatchArm as PartialEq>::eq(_93, _94) -> [return: bb34, unwind continue];
    }

    bb34: {
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _97 = core::panicking::AssertKind::Eq;
        _99 = Option::<Arguments<'_>>::None;
        _98 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _97, _93, _94, move _99) -> unwind continue;
    }

    bb36: {
        _103 = Foo::One(const 105_usize);
        _102 = test_foo(move _103) -> [return: bb37, unwind continue];
    }

    bb37: {
        _101 = &_102;
        _171 = const _;
        _100 = (move _101, _171);
        _104 = (_100.0: &MatchArm);
        _105 = (_100.1: &MatchArm);
        _107 = <MatchArm as PartialEq>::eq(_104, _105) -> [return: bb38, unwind continue];
    }

    bb38: {
        _106 = Not(move _107);
        switchInt(move _106) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _108 = core::panicking::AssertKind::Eq;
        _110 = Option::<Arguments<'_>>::None;
        _109 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _108, _104, _105, move _110) -> unwind continue;
    }

    bb40: {
        _114 = Foo::One(const 215_usize);
        _113 = test_foo(move _114) -> [return: bb41, unwind continue];
    }

    bb41: {
        _112 = &_113;
        _170 = const _;
        _111 = (move _112, _170);
        _115 = (_111.0: &MatchArm);
        _116 = (_111.1: &MatchArm);
        _118 = <MatchArm as PartialEq>::eq(_115, _116) -> [return: bb42, unwind continue];
    }

    bb42: {
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _119 = core::panicking::AssertKind::Eq;
        _121 = Option::<Arguments<'_>>::None;
        _120 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _119, _115, _116, move _121) -> unwind continue;
    }

    bb44: {
        _125 = Foo::One(const 121_usize);
        _124 = test_foo(move _125) -> [return: bb45, unwind continue];
    }

    bb45: {
        _123 = &_124;
        _169 = const _;
        _122 = (move _123, _169);
        _126 = (_122.0: &MatchArm);
        _127 = (_122.1: &MatchArm);
        _129 = <MatchArm as PartialEq>::eq(_126, _127) -> [return: bb46, unwind continue];
    }

    bb46: {
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _130, _126, _127, move _132) -> unwind continue;
    }

    bb48: {
        _136 = Foo::Two(const 0_usize, const 42_usize);
        _135 = test_foo(move _136) -> [return: bb49, unwind continue];
    }

    bb49: {
        _134 = &_135;
        _168 = const _;
        _133 = (move _134, _168);
        _137 = (_133.0: &MatchArm);
        _138 = (_133.1: &MatchArm);
        _140 = <MatchArm as PartialEq>::eq(_137, _138) -> [return: bb50, unwind continue];
    }

    bb50: {
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _141, _137, _138, move _143) -> unwind continue;
    }

    bb52: {
        _147 = Foo::Two(const 100_usize, const 0_usize);
        _146 = test_foo(move _147) -> [return: bb53, unwind continue];
    }

    bb53: {
        _145 = &_146;
        _167 = const _;
        _144 = (move _145, _167);
        _148 = (_144.0: &MatchArm);
        _149 = (_144.1: &MatchArm);
        _151 = <MatchArm as PartialEq>::eq(_148, _149) -> [return: bb54, unwind continue];
    }

    bb54: {
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _152 = core::panicking::AssertKind::Eq;
        _154 = Option::<Arguments<'_>>::None;
        _153 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _152, _148, _149, move _154) -> unwind continue;
    }

    bb56: {
        _158 = Foo::Two(const 42_usize, const 0_usize);
        _157 = test_foo(move _158) -> [return: bb57, unwind continue];
    }

    bb57: {
        _156 = &_157;
        _166 = const _;
        _155 = (move _156, _166);
        _159 = (_155.0: &MatchArm);
        _160 = (_155.1: &MatchArm);
        _162 = <MatchArm as PartialEq>::eq(_159, _160) -> [return: bb58, unwind continue];
    }

    bb58: {
        _161 = Not(move _162);
        switchInt(move _161) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _163 = core::panicking::AssertKind::Eq;
        _165 = Option::<Arguments<'_>>::None;
        _164 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _163, _159, _160, move _165) -> unwind continue;
    }

    bb60: {
        return;
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 4_usize);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 4_usize);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 3_usize);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 3_usize);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 3_usize);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Wild;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 1_usize);
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &MatchArm = {
    let mut _0: &MatchArm;
    let mut _1: MatchArm;

    bb0: {
        _1 = MatchArm::Arm(const 0_usize);
        _0 = &_1;
        return;
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;

    bb0: {
        _0 = MatchArm::Arm(move _1);
        return;
    }
}

fn Foo::One(_1: usize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::One(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::One(_1: usize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::One(move _1);
        return;
    }
}

fn Foo::Two(_1: usize, _2: usize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Two(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Two(_1: usize, _2: usize) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo::Two(move _1, move _2);
        return;
    }
}
