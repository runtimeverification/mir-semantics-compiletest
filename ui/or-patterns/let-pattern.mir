// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn or_pat_let(_1: Result<u32, u32>) -> u32 {
    debug x => _1;
    let mut _0: u32;
    let _2: u32;
    let mut _3: isize;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = ((_1 as Err).0: u32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = _2;
        return;
    }

    bb4: {
        _2 = ((_1 as Ok).0: u32);
        goto -> bb3;
    }
}

fn or_pat_arg(_1: Result<u32, u32>) -> u32 {
    let mut _0: u32;
    let _2: u32;
    let mut _3: isize;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb4, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _2 = ((_1 as Err).0: u32);
        goto -> bb3;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = _2;
        return;
    }

    bb4: {
        _2 = ((_1 as Ok).0: u32);
        goto -> bb3;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: std::result::Result<u32, u32>;
    let _5: &u32;
    let _6: &u32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u32;
    let mut _10: u32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&u32, &u32);
    let mut _15: &u32;
    let _16: u32;
    let mut _17: std::result::Result<u32, u32>;
    let _18: &u32;
    let _19: &u32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u32;
    let mut _23: u32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&u32, &u32);
    let mut _28: &u32;
    let _29: u32;
    let mut _30: std::result::Result<u32, u32>;
    let _31: &u32;
    let _32: &u32;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: u32;
    let mut _36: u32;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&u32, &u32);
    let mut _41: &u32;
    let _42: u32;
    let mut _43: std::result::Result<u32, u32>;
    let _44: &u32;
    let _45: &u32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: u32;
    let mut _49: u32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: &u32;
    let mut _54: &u32;
    let mut _55: &u32;
    let mut _56: &u32;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _44;
        debug right_val => _45;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }

    bb0: {
        _4 = Result::<u32, u32>::Ok(const 3_u32);
        _3 = or_pat_let(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _56 = const _;
        _1 = (move _2, _56);
        _5 = (_1.0: &u32);
        _6 = (_1.1: &u32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<u32, u32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _17 = Result::<u32, u32>::Err(const 5_u32);
        _16 = or_pat_let(move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = &_16;
        _55 = const _;
        _14 = (move _15, _55);
        _18 = (_14.0: &u32);
        _19 = (_14.1: &u32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u32, u32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        _30 = Result::<u32, u32>::Ok(const 7_u32);
        _29 = or_pat_arg(move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _28 = &_29;
        _54 = const _;
        _27 = (move _28, _54);
        _31 = (_27.0: &u32);
        _32 = (_27.1: &u32);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<u32, u32>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb9: {
        _43 = Result::<u32, u32>::Err(const 9_u32);
        _42 = or_pat_arg(move _43) -> [return: bb10, unwind continue];
    }

    bb10: {
        _41 = &_42;
        _53 = const _;
        _40 = (move _41, _53);
        _44 = (_40.0: &u32);
        _45 = (_40.1: &u32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<u32, u32>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 9_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 7_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 5_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 3_u32;
        _0 = &_1;
        return;
    }
}
