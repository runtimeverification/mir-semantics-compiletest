// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/or-patterns/box-patterns.rs:7:10: 7:15>::fmt(_1: &MatchArm, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    let mut _3: isize;                   // in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    let _4: &usize;                      // in scope 0 at ui/or-patterns/box-patterns.rs:9:9: 9:14
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    let mut _6: &str;                    // in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    let _7: &str;                        // in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/or-patterns/box-patterns.rs:9:9: 9:14
    let mut _9: &&usize;                 // in scope 0 at ui/or-patterns/box-patterns.rs:9:9: 9:14
    let _10: &&usize;                    // in scope 0 at ui/or-patterns/box-patterns.rs:9:9: 9:14
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    let mut _12: &str;                   // in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    let _13: &str;                       // in scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/or-patterns/box-patterns.rs:9:9: 9:14
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    }

    bb1: {
        _11 = &mut (*_2);                // scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
        _13 = const "Wild";              // scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
        _0 = Formatter::<'_>::write_str(move _11, move _12) -> bb4; // scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:7:10: 7:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/or-patterns/box-patterns.rs:7:10: 7:15
    }

    bb3: {
        _4 = &(((*_1) as Arm).0: usize); // scope 0 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _5 = &mut (*_2);                 // scope 1 at ui/or-patterns/box-patterns.rs:7:10: 7:15
        _7 = const "Arm";                // scope 1 at ui/or-patterns/box-patterns.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/or-patterns/box-patterns.rs:7:10: 7:15
        _10 = &_4;                       // scope 1 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _9 = _10;                        // scope 1 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/or-patterns/box-patterns.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/or-patterns/box-patterns.rs:7:15: 7:15
    }
}

fn <impl at ui/or-patterns/box-patterns.rs:7:17: 7:26>::eq(_1: &MatchArm, _2: &MatchArm) -> bool {
    debug self => _1;                    // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    debug other => _2;                   // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _0: bool;                    // return place in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let _3: isize;                       // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _4: &MatchArm;               // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _6: &MatchArm;               // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _7: bool;                    // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _8: isize;                   // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _9: isize;                   // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _10: bool;                   // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _11: (&MatchArm, &MatchArm); // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _12: &MatchArm;              // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _13: &MatchArm;              // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _14: isize;                  // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _15: isize;                  // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _18: usize;                  // in scope 0 at ui/or-patterns/box-patterns.rs:9:9: 9:14
    let mut _19: usize;                  // in scope 0 at ui/or-patterns/box-patterns.rs:9:9: 9:14
    let mut _20: &MatchArm;              // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _21: &MatchArm;              // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _22: &MatchArm;              // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    let mut _23: &MatchArm;              // in scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        let _5: isize;                   // in scope 1 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
            let _16: &usize;             // in scope 2 at ui/or-patterns/box-patterns.rs:9:9: 9:14
            let _17: &usize;             // in scope 2 at ui/or-patterns/box-patterns.rs:9:9: 9:14
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/or-patterns/box-patterns.rs:9:9: 9:14
                debug __arg1_0 => _17;   // in scope 3 at ui/or-patterns/box-patterns.rs:9:9: 9:14
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _3 = discriminant((*_4));        // scope 0 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _6 = _2;                         // scope 1 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _5 = discriminant((*_6));        // scope 1 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _8 = _3;                         // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _9 = _5;                         // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _7 = Eq(move _8, move _9);       // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        goto -> bb3;                     // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _13 = _2;                        // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _11 = (move _12, move _13);      // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _20 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _15 = discriminant((*_20));      // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        switchInt(move _15) -> [0: bb4, otherwise: bb5]; // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    }

    bb3: {
        return;                          // scope 0 at ui/or-patterns/box-patterns.rs:7:26: 7:26
    }

    bb4: {
        _21 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        _14 = discriminant((*_21));      // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        goto -> bb7;                     // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    }

    bb6: {
        _22 = deref_copy (_11.0: &MatchArm); // scope 2 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _16 = &(((*_22) as Arm).0: usize); // scope 2 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _23 = deref_copy (_11.1: &MatchArm); // scope 2 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _17 = &(((*_23) as Arm).0: usize); // scope 2 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _18 = (*_16);                    // scope 3 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _19 = (*_17);                    // scope 3 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        _10 = Eq(move _18, move _19);    // scope 3 at ui/or-patterns/box-patterns.rs:9:9: 9:14
        goto -> bb7;                     // scope 2 at ui/or-patterns/box-patterns.rs:7:25: 7:26
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
        goto -> bb3;                     // scope 2 at ui/or-patterns/box-patterns.rs:7:17: 7:26
    }
}

fn <impl at ui/or-patterns/box-patterns.rs:13:10: 13:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    debug f => _2;                       // in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    let mut _4: &str;                    // in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    let mut _5: isize;                   // in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    let _6: &str;                        // in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    let _7: &str;                        // in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    let _8: &str;                        // in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    let _9: &str;                        // in scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
        _5 = discriminant((*_1));        // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    }

    bb1: {
        _9 = const "Qux";                // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _9;                         // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/box-patterns.rs:13:14: 13:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
    }

    bb3: {
        _6 = const "Foo";                // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/box-patterns.rs:13:14: 13:15
    }

    bb4: {
        _7 = const "Bar";                // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/box-patterns.rs:13:14: 13:15
    }

    bb5: {
        _8 = const "Baz";                // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/box-patterns.rs:13:14: 13:15
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb7; // scope 0 at ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:13:10: 13:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/or-patterns/box-patterns.rs:13:15: 13:15
    }
}

fn test(_1: Option<Box<Test>>) -> MatchArm {
    debug x => _1;                       // in scope 0 at ui/or-patterns/box-patterns.rs:21:9: 21:10
    let mut _0: MatchArm;                // return place in scope 0 at ui/or-patterns/box-patterns.rs:21:34: 21:42
    let mut _2: isize;                   // in scope 0 at ui/or-patterns/box-patterns.rs:23:18: 23:27
    let mut _3: isize;                   // in scope 0 at ui/or-patterns/box-patterns.rs:23:9: 23:44
    let mut _4: std::boxed::Box<Test>;   // in scope 0 at ui/or-patterns/box-patterns.rs:21:9: 21:10
    let mut _5: *const Test;             // in scope 0 at ui/or-patterns/box-patterns.rs:21:9: 21:10

    bb0: {
        _3 = discriminant(_1);           // scope 0 at ui/or-patterns/box-patterns.rs:22:11: 22:12
        switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/or-patterns/box-patterns.rs:22:5: 22:12
    }

    bb1: {
        _0 = MatchArm::Wild;             // scope 0 at ui/or-patterns/box-patterns.rs:26:14: 26:28
        goto -> bb6;                     // scope 0 at ui/or-patterns/box-patterns.rs:26:14: 26:28
    }

    bb2: {
        _4 = deref_copy ((_1 as Some).0: std::boxed::Box<Test>); // scope 0 at ui/or-patterns/box-patterns.rs:22:11: 22:12
        _5 = (((_4.0: std::ptr::Unique<Test>).0: std::ptr::NonNull<Test>).0: *const Test); // scope 0 at ui/or-patterns/box-patterns.rs:22:11: 22:12
        _2 = discriminant((*_5));        // scope 0 at ui/or-patterns/box-patterns.rs:22:11: 22:12
        switchInt(move _2) -> [0: bb3, 1: bb3, 2: bb4, otherwise: bb5]; // scope 0 at ui/or-patterns/box-patterns.rs:22:5: 22:12
    }

    bb3: {
        _0 = MatchArm::Arm(const 0_usize); // scope 0 at ui/or-patterns/box-patterns.rs:23:48: 23:64
        goto -> bb6;                     // scope 0 at ui/or-patterns/box-patterns.rs:23:48: 23:64
    }

    bb4: {
        _0 = MatchArm::Arm(const 1_usize); // scope 0 at ui/or-patterns/box-patterns.rs:24:32: 24:48
        goto -> bb6;                     // scope 0 at ui/or-patterns/box-patterns.rs:24:32: 24:48
    }

    bb5: {
        _0 = MatchArm::Arm(const 2_usize); // scope 0 at ui/or-patterns/box-patterns.rs:25:20: 25:36
        goto -> bb6;                     // scope 0 at ui/or-patterns/box-patterns.rs:25:20: 25:36
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/or-patterns/box-patterns.rs:28:1: 28:2
    }

    bb7: {
        return;                          // scope 0 at ui/or-patterns/box-patterns.rs:28:2: 28:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/box-patterns.rs:30:11: 30:11
    let mut _1: (&MatchArm, &MatchArm);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &MatchArm;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: MatchArm;                    // in scope 0 at ui/or-patterns/box-patterns.rs:31:16: 31:47
    let mut _4: std::option::Option<std::boxed::Box<Test>>; // in scope 0 at ui/or-patterns/box-patterns.rs:31:21: 31:46
    let mut _5: std::boxed::Box<Test>;   // in scope 0 at ui/or-patterns/box-patterns.rs:31:26: 31:45
    let mut _6: Test;                    // in scope 0 at ui/or-patterns/box-patterns.rs:31:35: 31:44
    let mut _7: &MatchArm;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &MatchArm;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &MatchArm;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: MatchArm;                   // in scope 0 at ui/or-patterns/box-patterns.rs:32:16: 32:47
    let mut _25: std::option::Option<std::boxed::Box<Test>>; // in scope 0 at ui/or-patterns/box-patterns.rs:32:21: 32:46
    let mut _26: std::boxed::Box<Test>;  // in scope 0 at ui/or-patterns/box-patterns.rs:32:26: 32:45
    let mut _27: Test;                   // in scope 0 at ui/or-patterns/box-patterns.rs:32:35: 32:44
    let mut _28: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _45: MatchArm;                   // in scope 0 at ui/or-patterns/box-patterns.rs:33:16: 33:47
    let mut _46: std::option::Option<std::boxed::Box<Test>>; // in scope 0 at ui/or-patterns/box-patterns.rs:33:21: 33:46
    let mut _47: std::boxed::Box<Test>;  // in scope 0 at ui/or-patterns/box-patterns.rs:33:26: 33:45
    let mut _48: Test;                   // in scope 0 at ui/or-patterns/box-patterns.rs:33:35: 33:44
    let mut _49: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _50: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _51: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _52: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _54: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _55: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _57: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _58: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _59: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _60: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _61: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _62: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _64: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _65: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _66: MatchArm;                   // in scope 0 at ui/or-patterns/box-patterns.rs:34:16: 34:47
    let mut _67: std::option::Option<std::boxed::Box<Test>>; // in scope 0 at ui/or-patterns/box-patterns.rs:34:21: 34:46
    let mut _68: std::boxed::Box<Test>;  // in scope 0 at ui/or-patterns/box-patterns.rs:34:26: 34:45
    let mut _69: Test;                   // in scope 0 at ui/or-patterns/box-patterns.rs:34:35: 34:44
    let mut _70: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _71: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _72: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _75: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _76: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _78: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _79: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _80: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _81: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _82: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _83: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _85: (&MatchArm, &MatchArm); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _87: MatchArm;                   // in scope 0 at ui/or-patterns/box-patterns.rs:35:16: 35:26
    let mut _88: std::option::Option<std::boxed::Box<Test>>; // in scope 0 at ui/or-patterns/box-patterns.rs:35:21: 35:25
    let mut _89: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _90: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _91: &MatchArm;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _93: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _94: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _95: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _97: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _98: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _99: &MatchArm;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _100: &MatchArm;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _101: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _102: &MatchArm;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _104: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _105: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _106: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _107: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _108: &MatchArm;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _50;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _51;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _56: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _56;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _71;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _72;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _77: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _77;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _90;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _91;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _96: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _96;           // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = const Test::Foo;            // scope 0 at ui/or-patterns/box-patterns.rs:31:35: 31:44
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:31:35: 31:44
                                         // + literal: Const { ty: Test, val: Value(Scalar(0x00)) }
        _5 = Box::<Test>::new(move _6) -> bb1; // scope 0 at ui/or-patterns/box-patterns.rs:31:26: 31:45
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:31:26: 31:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Test) -> Box<Test> {Box::<Test>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Option::<Box<Test>>::Some(move _5); // scope 0 at ui/or-patterns/box-patterns.rs:31:21: 31:46
        _3 = test(move _4) -> bb2;       // scope 0 at ui/or-patterns/box-patterns.rs:31:16: 31:47
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:31:16: 31:20
                                         // + literal: Const { ty: fn(Option<Box<Test>>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _108 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[4])) }
        _7 = _108;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &MatchArm);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &MatchArm);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <MatchArm as PartialEq>::eq(move _12, move _13) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb5: {
        _27 = const Test::Bar;           // scope 0 at ui/or-patterns/box-patterns.rs:32:35: 32:44
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:32:35: 32:44
                                         // + literal: Const { ty: Test, val: Value(Scalar(0x01)) }
        _26 = Box::<Test>::new(move _27) -> bb6; // scope 0 at ui/or-patterns/box-patterns.rs:32:26: 32:45
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:32:26: 32:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Test) -> Box<Test> {Box::<Test>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = Option::<Box<Test>>::Some(move _26); // scope 0 at ui/or-patterns/box-patterns.rs:32:21: 32:46
        _24 = test(move _25) -> bb7;     // scope 0 at ui/or-patterns/box-patterns.rs:32:16: 32:47
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:32:16: 32:20
                                         // + literal: Const { ty: fn(Option<Box<Test>>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb7: {
        _23 = &_24;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _107 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[3])) }
        _28 = _107;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_22.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_22.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = _30;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = <MatchArm as PartialEq>::eq(move _33, move _34) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _37, move _38, move _40, move _42); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb10: {
        _48 = const Test::Baz;           // scope 0 at ui/or-patterns/box-patterns.rs:33:35: 33:44
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:33:35: 33:44
                                         // + literal: Const { ty: Test, val: Value(Scalar(0x02)) }
        _47 = Box::<Test>::new(move _48) -> bb11; // scope 0 at ui/or-patterns/box-patterns.rs:33:26: 33:45
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:33:26: 33:34
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Test) -> Box<Test> {Box::<Test>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _46 = Option::<Box<Test>>::Some(move _47); // scope 0 at ui/or-patterns/box-patterns.rs:33:21: 33:46
        _45 = test(move _46) -> bb12;    // scope 0 at ui/or-patterns/box-patterns.rs:33:16: 33:47
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:33:16: 33:20
                                         // + literal: Const { ty: fn(Option<Box<Test>>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb12: {
        _44 = &_45;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _106 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[2])) }
        _49 = _106;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _49);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _50 = (_43.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _51 = (_43.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _54 = _50;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _55 = _51;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _53 = <MatchArm as PartialEq>::eq(move _54, move _55) -> bb13; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _52 = Not(move _53);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _52) -> [0: bb15, otherwise: bb14]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _56 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _60 = _50;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _63 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _57 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _58, move _59, move _61, move _63); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb15: {
        _69 = const Test::Qux;           // scope 0 at ui/or-patterns/box-patterns.rs:34:35: 34:44
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:34:35: 34:44
                                         // + literal: Const { ty: Test, val: Value(Scalar(0x03)) }
        _68 = Box::<Test>::new(move _69) -> bb16; // scope 0 at ui/or-patterns/box-patterns.rs:34:26: 34:45
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:34:26: 34:34
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Test) -> Box<Test> {Box::<Test>::new}, val: Value(<ZST>) }
    }

    bb16: {
        _67 = Option::<Box<Test>>::Some(move _68); // scope 0 at ui/or-patterns/box-patterns.rs:34:21: 34:46
        _66 = test(move _67) -> bb17;    // scope 0 at ui/or-patterns/box-patterns.rs:34:16: 34:47
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:34:16: 34:20
                                         // + literal: Const { ty: fn(Option<Box<Test>>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb17: {
        _65 = &_66;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _105 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[1])) }
        _70 = _105;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _64 = (move _65, move _70);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _71 = (_64.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _72 = (_64.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _75 = _71;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _76 = _72;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _74 = <MatchArm as PartialEq>::eq(move _75, move _76) -> bb18; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _73 = Not(move _74);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _73) -> [0: bb20, otherwise: bb19]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _77 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _72;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = _83;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _78 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _79, move _80, move _82, move _84); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb20: {
        _88 = const Option::<Box<Test>>::None; // scope 0 at ui/or-patterns/box-patterns.rs:35:21: 35:25
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:35:21: 35:25
                                         // + literal: Const { ty: Option<Box<Test>>, val: Value(Scalar(0x0000000000000000)) }
        _87 = test(move _88) -> bb21;    // scope 0 at ui/or-patterns/box-patterns.rs:35:16: 35:26
                                         // mir::Constant
                                         // + span: ui/or-patterns/box-patterns.rs:35:16: 35:20
                                         // + literal: Const { ty: fn(Option<Box<Test>>) -> MatchArm {test}, val: Value(<ZST>) }
    }

    bb21: {
        _86 = &_87;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _104 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &MatchArm, val: Unevaluated(main, [], Some(promoted[0])) }
        _89 = _104;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _89);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _90 = (_85.0: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _91 = (_85.1: &MatchArm);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _94 = _90;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _95 = _91;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _93 = <MatchArm as PartialEq>::eq(move _94, move _95) -> bb22; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a MatchArm, &'b MatchArm) -> bool {<MatchArm as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _92 = Not(move _93);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _92) -> [0: bb24, otherwise: bb23]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _96 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _100 = _90;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _100;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _102 = _91;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = _102;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _103 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _97 = core::panicking::assert_failed::<MatchArm, MatchArm>(move _98, move _99, move _101, move _103); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a MatchArm, &'b MatchArm, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<MatchArm, MatchArm>}, val: Value(<ZST>) }
    }

    bb24: {
        return;                          // scope 0 at ui/or-patterns/box-patterns.rs:36:2: 36:2
    }
}

promoted[0] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/box-patterns.rs:35:28: 35:42

    bb0: {
        _1 = MatchArm::Wild;             // scope 0 at ui/or-patterns/box-patterns.rs:35:28: 35:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/box-patterns.rs:34:49: 34:65

    bb0: {
        _1 = MatchArm::Arm(const 2_usize); // scope 0 at ui/or-patterns/box-patterns.rs:34:49: 34:65
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/box-patterns.rs:33:49: 33:65

    bb0: {
        _1 = MatchArm::Arm(const 1_usize); // scope 0 at ui/or-patterns/box-patterns.rs:33:49: 33:65
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/box-patterns.rs:32:49: 32:65

    bb0: {
        _1 = MatchArm::Arm(const 0_usize); // scope 0 at ui/or-patterns/box-patterns.rs:32:49: 32:65
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &MatchArm = {
    let mut _0: &MatchArm;               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: MatchArm;                // in scope 0 at ui/or-patterns/box-patterns.rs:31:49: 31:65

    bb0: {
        _1 = MatchArm::Arm(const 0_usize); // scope 0 at ui/or-patterns/box-patterns.rs:31:49: 31:65
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/or-patterns/box-patterns.rs:9:5: 9:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/or-patterns/box-patterns.rs:9:5: 9:8
        return;                          // scope 0 at ui/or-patterns/box-patterns.rs:9:5: 9:8
    }
}

// MIR FOR CTFE
fn MatchArm::Arm(_1: usize) -> MatchArm {
    let mut _0: MatchArm;                // return place in scope 0 at ui/or-patterns/box-patterns.rs:9:5: 9:8

    bb0: {
        _0 = MatchArm::Arm(move _1);     // scope 0 at ui/or-patterns/box-patterns.rs:9:5: 9:8
        return;                          // scope 0 at ui/or-patterns/box-patterns.rs:9:5: 9:8
    }
}
