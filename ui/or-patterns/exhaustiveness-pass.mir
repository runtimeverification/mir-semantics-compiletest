// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (std::option::Option<u8>,);
    let mut _2: std::option::Option<u8>;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: isize;
    let mut _6: (&[u8],);
    let mut _7: &[u8];
    let _8: &[u8];
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let mut _13: bool;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let mut _20: &[u8; 1];
    let mut _21: &[u8];
    let mut _22: &[u8];
    let mut _23: &[u8];
    let mut _24: &[u8];
    let mut _25: &[u8];
    let mut _26: &[u8];

    bb0: {
        _2 = Option::<u8>::Some(const 0_u8);
        _1 = (move _2,);
        _5 = discriminant((_1.0: std::option::Option<u8>));
        switchInt(move _5) -> [0: bb5, 1: bb1, otherwise: bb4];
    }

    bb1: {
        switchInt((((_1.0: std::option::Option<u8>) as Some).0: u8)) -> [0: bb5, 1: bb5, otherwise: bb2];
    }

    bb2: {
        _3 = Le(const 2_u8, (((_1.0: std::option::Option<u8>) as Some).0: u8));
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = Le((((_1.0: std::option::Option<u8>) as Some).0: u8), const u8::MAX);
        switchInt(move _4) -> [0: bb4, otherwise: bb5];
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _20 = const _;
        _8 = <[u8; 1] as Index<RangeFull>>::index(_20, const RangeFull) -> [return: bb6, unwind continue];
    }

    bb6: {
        _7 = _8;
        _6 = (move _7,);
        _21 = deref_copy (_6.0: &[u8]);
        _17 = Len((*_21));
        _18 = const 0_usize;
        _19 = Eq(move _17, move _18);
        switchInt(move _19) -> [0: bb7, otherwise: bb12];
    }

    bb7: {
        _22 = deref_copy (_6.0: &[u8]);
        _14 = Len((*_22));
        _15 = const 1_usize;
        _16 = Eq(move _14, move _15);
        switchInt(move _16) -> [0: bb11, otherwise: bb8];
    }

    bb8: {
        _23 = deref_copy (_6.0: &[u8]);
        switchInt((*_23)[0 of 1]) -> [0: bb12, otherwise: bb9];
    }

    bb9: {
        _24 = deref_copy (_6.0: &[u8]);
        _9 = Le(const 1_u8, (*_24)[0 of 1]);
        switchInt(move _9) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _25 = deref_copy (_6.0: &[u8]);
        _10 = Le((*_25)[0 of 1], const u8::MAX);
        switchInt(move _10) -> [0: bb11, otherwise: bb12];
    }

    bb11: {
        _26 = deref_copy (_6.0: &[u8]);
        _11 = Len((*_26));
        _12 = const 1_usize;
        _13 = Ge(move _11, move _12);
        switchInt(move _13) -> [0: bb4, otherwise: bb12];
    }

    bb12: {
        return;
    }
}

promoted[0] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];
    let mut _1: [u8; 1];

    bb0: {
        _1 = [const 0_u8];
        _0 = &_1;
        return;
    }
}
