// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:6:11: 6:11
    let mut _1: (&[u8],);                // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:11: 26:24
    let mut _2: &[u8];                   // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:12: 26:22
    let _3: &[u8];                       // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:22
    let mut _4: &[u8; 1];                // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18
    let mut _5: std::ops::RangeFull;     // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:19: 26:21
    let mut _6: bool;                    // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:20: 27:27
    let mut _7: bool;                    // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:20: 27:27
    let mut _8: usize;                   // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:31: 27:38
    let mut _9: usize;                   // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:31: 27:38
    let mut _10: bool;                   // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:31: 27:38
    let mut _11: usize;                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:15: 27:28
    let mut _12: usize;                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:15: 27:28
    let mut _13: bool;                   // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:15: 27:28
    let mut _14: usize;                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:10: 27:12
    let mut _15: usize;                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:10: 27:12
    let mut _16: bool;                   // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:10: 27:12
    let mut _17: &[u8; 1];               // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18
    let mut _18: &[u8];                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:11: 26:24
    let mut _19: &[u8];                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:11: 26:24
    let mut _20: &[u8];                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:11: 26:24
    let mut _21: &[u8];                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:11: 26:24
    let mut _22: &[u8];                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:11: 26:24
    let mut _23: &[u8];                  // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:11: 26:24

    bb0: {
        _17 = const _;                   // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18
                                         // mir::Constant
                                         // + span: ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18
                                         // + literal: Const { ty: &[u8; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _17;                        // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18
        _3 = <[u8; 1] as Index<RangeFull>>::index(move _4, move _5) -> bb1; // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:22
                                         // mir::Constant
                                         // + span: ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8; 1], RangeFull) -> &'a <[u8; 1] as Index<RangeFull>>::Output {<[u8; 1] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:12: 26:22
        _1 = (move _2,);                 // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:11: 26:24
        _18 = deref_copy (_1.0: &[u8]);  // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:10: 27:12
        _14 = Len((*_18));               // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:10: 27:12
        _15 = const 0_usize;             // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:10: 27:12
        _16 = Eq(move _14, move _15);    // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:10: 27:12
        switchInt(move _16) -> [0: bb2, otherwise: bb8]; // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:10: 27:12
    }

    bb2: {
        _19 = deref_copy (_1.0: &[u8]);  // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:15: 27:28
        _11 = Len((*_19));               // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:15: 27:28
        _12 = const 1_usize;             // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:15: 27:28
        _13 = Eq(move _11, move _12);    // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:15: 27:28
        switchInt(move _13) -> [0: bb6, otherwise: bb3]; // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:15: 27:28
    }

    bb3: {
        _20 = deref_copy (_1.0: &[u8]);  // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:5: 26:24
        switchInt((*_20)[0 of 1]) -> [0: bb8, otherwise: bb4]; // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:5: 26:24
    }

    bb4: {
        _21 = deref_copy (_1.0: &[u8]);  // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:20: 27:27
        _6 = Le(const 1_u8, (*_21)[0 of 1]); // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:20: 27:27
        switchInt(move _6) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:20: 27:27
    }

    bb5: {
        _22 = deref_copy (_1.0: &[u8]);  // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:20: 27:27
        _7 = Le((*_22)[0 of 1], const u8::MAX); // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:20: 27:27
        switchInt(move _7) -> [0: bb6, otherwise: bb8]; // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:20: 27:27
    }

    bb6: {
        _23 = deref_copy (_1.0: &[u8]);  // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:31: 27:38
        _8 = Len((*_23));                // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:31: 27:38
        _9 = const 1_usize;              // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:31: 27:38
        _10 = Ge(move _8, move _9);      // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:31: 27:38
        switchInt(move _10) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:27:31: 27:38
    }

    bb7: {
        unreachable;                     // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:11: 26:24
    }

    bb8: {
        return;                          // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:38:2: 38:2
    }
}

promoted[0] in main: &[u8; 1] = {
    let mut _0: &[u8; 1];                // return place in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18
    let mut _1: [u8; 1];                 // in scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18

    bb0: {
        _1 = [const 0_u8];               // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18
        _0 = &_1;                        // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18
        return;                          // scope 0 at ui/or-patterns/exhaustiveness-pass.rs:26:13: 26:18
    }
}
