// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn or_at(_1: Result<u32, u32>) -> u32 {
    debug x => _1;
    let mut _0: u32;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let _9: u32;
    let _10: u32;
    let _11: u32;
    let _12: &u32;
    let mut _13: u32;
    let mut _14: u32;
    let mut _15: bool;
    let mut _16: u32;
    let mut _17: u32;
    let mut _18: bool;
    let mut _19: u32;
    let _20: u32;
    scope 1 {
        debug x => _9;
    }
    scope 2 {
        debug x => _10;
    }
    scope 3 {
        debug x => _11;
        debug x => _12;
    }
    scope 4 {
        debug x => _20;
    }

    bb0: {
        _8 = discriminant(_1);
        switchInt(move _8) -> [0: bb1, 1: bb3, otherwise: bb26];
    }

    bb1: {
        switchInt(((_1 as Ok).0: u32)) -> [4: bb11, 1: bb15, 2: bb16, otherwise: bb2];
    }

    bb2: {
        _0 = const 500_u32;
        goto -> bb25;
    }

    bb3: {
        switchInt(((_1 as Err).0: u32)) -> [6: bb12, 8: bb13, otherwise: bb4];
    }

    bb4: {
        _6 = Le(const 0_u32, ((_1 as Err).0: u32));
        switchInt(move _6) -> [0: bb7, otherwise: bb5];
    }

    bb5: {
        _7 = Le(((_1 as Err).0: u32), const 10_u32);
        switchInt(move _7) -> [0: bb7, otherwise: bb18];
    }

    bb6: {
        _4 = Le(const 0_u32, ((_1 as Err).0: u32));
        switchInt(move _4) -> [0: bb2, otherwise: bb9];
    }

    bb7: {
        _2 = Le(const 30_u32, ((_1 as Err).0: u32));
        switchInt(move _2) -> [0: bb6, otherwise: bb8];
    }

    bb8: {
        _3 = Le(((_1 as Err).0: u32), const 40_u32);
        switchInt(move _3) -> [0: bb6, otherwise: bb21];
    }

    bb9: {
        _5 = Le(((_1 as Err).0: u32), const 40_u32);
        switchInt(move _5) -> [0: bb2, otherwise: bb24];
    }

    bb10: {
        _0 = _9;
        goto -> bb25;
    }

    bb11: {
        _9 = ((_1 as Ok).0: u32);
        goto -> bb10;
    }

    bb12: {
        _9 = ((_1 as Err).0: u32);
        goto -> bb10;
    }

    bb13: {
        _9 = ((_1 as Err).0: u32);
        goto -> bb10;
    }

    bb14: {
        _0 = _10;
        goto -> bb25;
    }

    bb15: {
        _10 = ((_1 as Ok).0: u32);
        goto -> bb14;
    }

    bb16: {
        _10 = ((_1 as Ok).0: u32);
        goto -> bb14;
    }

    bb17: {
        _19 = _11;
        _0 = Add(move _19, const 100_u32);
        goto -> bb25;
    }

    bb18: {
        _12 = &((_1 as Err).0: u32);
        _14 = (*_12);
        _15 = Eq(const 2_u32, const 0_u32);
        assert(!move _15, "attempt to calculate the remainder of `{}` with a divisor of zero", _14) -> [success: bb19, unwind continue];
    }

    bb19: {
        _13 = Rem(move _14, const 2_u32);
        switchInt(move _13) -> [0: bb20, otherwise: bb6];
    }

    bb20: {
        _11 = ((_1 as Err).0: u32);
        goto -> bb17;
    }

    bb21: {
        _12 = &((_1 as Err).0: u32);
        _17 = (*_12);
        _18 = Eq(const 2_u32, const 0_u32);
        assert(!move _18, "attempt to calculate the remainder of `{}` with a divisor of zero", _17) -> [success: bb22, unwind continue];
    }

    bb22: {
        _16 = Rem(move _17, const 2_u32);
        switchInt(move _16) -> [0: bb23, otherwise: bb6];
    }

    bb23: {
        _11 = ((_1 as Err).0: u32);
        goto -> bb17;
    }

    bb24: {
        _20 = ((_1 as Err).0: u32);
        _0 = Add(_20, const 200_u32);
        goto -> bb25;
    }

    bb25: {
        return;
    }

    bb26: {
        unreachable;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let mut _4: std::result::Result<u32, u32>;
    let _5: &u32;
    let _6: &u32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: u32;
    let mut _10: u32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&u32, &u32);
    let mut _15: &u32;
    let _16: u32;
    let mut _17: std::result::Result<u32, u32>;
    let _18: &u32;
    let _19: &u32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u32;
    let mut _23: u32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&u32, &u32);
    let mut _28: &u32;
    let _29: u32;
    let mut _30: std::result::Result<u32, u32>;
    let _31: &u32;
    let _32: &u32;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: u32;
    let mut _36: u32;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&u32, &u32);
    let mut _41: &u32;
    let _42: u32;
    let mut _43: std::result::Result<u32, u32>;
    let _44: &u32;
    let _45: &u32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: u32;
    let mut _49: u32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&u32, &u32);
    let mut _54: &u32;
    let _55: u32;
    let mut _56: std::result::Result<u32, u32>;
    let _57: &u32;
    let _58: &u32;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: u32;
    let mut _62: u32;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&u32, &u32);
    let mut _67: &u32;
    let _68: u32;
    let mut _69: std::result::Result<u32, u32>;
    let _70: &u32;
    let _71: &u32;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: u32;
    let mut _75: u32;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&u32, &u32);
    let mut _80: &u32;
    let _81: u32;
    let mut _82: std::result::Result<u32, u32>;
    let _83: &u32;
    let _84: &u32;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: u32;
    let mut _88: u32;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&u32, &u32);
    let mut _93: &u32;
    let _94: u32;
    let mut _95: std::result::Result<u32, u32>;
    let _96: &u32;
    let _97: &u32;
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: u32;
    let mut _101: u32;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: (&u32, &u32);
    let mut _106: &u32;
    let _107: u32;
    let mut _108: std::result::Result<u32, u32>;
    let _109: &u32;
    let _110: &u32;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: u32;
    let mut _114: u32;
    let _116: !;
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _118: (&u32, &u32);
    let mut _119: &u32;
    let _120: u32;
    let mut _121: std::result::Result<u32, u32>;
    let _122: &u32;
    let _123: &u32;
    let mut _124: bool;
    let mut _125: bool;
    let mut _126: u32;
    let mut _127: u32;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: (&u32, &u32);
    let mut _132: &u32;
    let _133: u32;
    let mut _134: std::result::Result<u32, u32>;
    let _135: &u32;
    let _136: &u32;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: u32;
    let mut _140: u32;
    let _142: !;
    let mut _143: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _144: (&u32, &u32);
    let mut _145: &u32;
    let _146: u32;
    let mut _147: std::result::Result<u32, u32>;
    let _148: &u32;
    let _149: &u32;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: u32;
    let mut _153: u32;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: (&u32, &u32);
    let mut _158: &u32;
    let _159: u32;
    let mut _160: std::result::Result<u32, u32>;
    let _161: &u32;
    let _162: &u32;
    let mut _163: bool;
    let mut _164: bool;
    let mut _165: u32;
    let mut _166: u32;
    let _168: !;
    let mut _169: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _170: (&u32, &u32);
    let mut _171: &u32;
    let _172: u32;
    let mut _173: std::result::Result<u32, u32>;
    let _174: &u32;
    let _175: &u32;
    let mut _176: bool;
    let mut _177: bool;
    let mut _178: u32;
    let mut _179: u32;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: (&u32, &u32);
    let mut _184: &u32;
    let _185: u32;
    let mut _186: std::result::Result<u32, u32>;
    let _187: &u32;
    let _188: &u32;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: u32;
    let mut _192: u32;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: (&u32, &u32);
    let mut _197: &u32;
    let _198: u32;
    let mut _199: std::result::Result<u32, u32>;
    let _200: &u32;
    let _201: &u32;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: u32;
    let mut _205: u32;
    let _207: !;
    let mut _208: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _209: &u32;
    let mut _210: &u32;
    let mut _211: &u32;
    let mut _212: &u32;
    let mut _213: &u32;
    let mut _214: &u32;
    let mut _215: &u32;
    let mut _216: &u32;
    let mut _217: &u32;
    let mut _218: &u32;
    let mut _219: &u32;
    let mut _220: &u32;
    let mut _221: &u32;
    let mut _222: &u32;
    let mut _223: &u32;
    let mut _224: &u32;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _31;
        debug right_val => _32;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _44;
        debug right_val => _45;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }
    scope 9 {
        debug left_val => _57;
        debug right_val => _58;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }
    scope 11 {
        debug left_val => _70;
        debug right_val => _71;
        let _76: core::panicking::AssertKind;
        scope 12 {
            debug kind => _76;
        }
    }
    scope 13 {
        debug left_val => _83;
        debug right_val => _84;
        let _89: core::panicking::AssertKind;
        scope 14 {
            debug kind => _89;
        }
    }
    scope 15 {
        debug left_val => _96;
        debug right_val => _97;
        let _102: core::panicking::AssertKind;
        scope 16 {
            debug kind => _102;
        }
    }
    scope 17 {
        debug left_val => _109;
        debug right_val => _110;
        let _115: core::panicking::AssertKind;
        scope 18 {
            debug kind => _115;
        }
    }
    scope 19 {
        debug left_val => _122;
        debug right_val => _123;
        let _128: core::panicking::AssertKind;
        scope 20 {
            debug kind => _128;
        }
    }
    scope 21 {
        debug left_val => _135;
        debug right_val => _136;
        let _141: core::panicking::AssertKind;
        scope 22 {
            debug kind => _141;
        }
    }
    scope 23 {
        debug left_val => _148;
        debug right_val => _149;
        let _154: core::panicking::AssertKind;
        scope 24 {
            debug kind => _154;
        }
    }
    scope 25 {
        debug left_val => _161;
        debug right_val => _162;
        let _167: core::panicking::AssertKind;
        scope 26 {
            debug kind => _167;
        }
    }
    scope 27 {
        debug left_val => _174;
        debug right_val => _175;
        let _180: core::panicking::AssertKind;
        scope 28 {
            debug kind => _180;
        }
    }
    scope 29 {
        debug left_val => _187;
        debug right_val => _188;
        let _193: core::panicking::AssertKind;
        scope 30 {
            debug kind => _193;
        }
    }
    scope 31 {
        debug left_val => _200;
        debug right_val => _201;
        let _206: core::panicking::AssertKind;
        scope 32 {
            debug kind => _206;
        }
    }

    bb0: {
        _4 = Result::<u32, u32>::Ok(const 1_u32);
        _3 = or_at(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _224 = const _;
        _1 = (move _2, _224);
        _5 = (_1.0: &u32);
        _6 = (_1.1: &u32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<u32, u32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _17 = Result::<u32, u32>::Ok(const 2_u32);
        _16 = or_at(move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = &_16;
        _223 = const _;
        _14 = (move _15, _223);
        _18 = (_14.0: &u32);
        _19 = (_14.1: &u32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u32, u32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        _30 = Result::<u32, u32>::Ok(const 3_u32);
        _29 = or_at(move _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _28 = &_29;
        _222 = const _;
        _27 = (move _28, _222);
        _31 = (_27.0: &u32);
        _32 = (_27.1: &u32);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<u32, u32>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb9: {
        _43 = Result::<u32, u32>::Ok(const 4_u32);
        _42 = or_at(move _43) -> [return: bb10, unwind continue];
    }

    bb10: {
        _41 = &_42;
        _221 = const _;
        _40 = (move _41, _221);
        _44 = (_40.0: &u32);
        _45 = (_40.1: &u32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<u32, u32>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb12: {
        _56 = Result::<u32, u32>::Ok(const 5_u32);
        _55 = or_at(move _56) -> [return: bb13, unwind continue];
    }

    bb13: {
        _54 = &_55;
        _220 = const _;
        _53 = (move _54, _220);
        _57 = (_53.0: &u32);
        _58 = (_53.1: &u32);
        _61 = (*_57);
        _62 = (*_58);
        _60 = Eq(move _61, move _62);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<u32, u32>(move _63, _57, _58, move _65) -> unwind continue;
    }

    bb15: {
        _69 = Result::<u32, u32>::Ok(const 6_u32);
        _68 = or_at(move _69) -> [return: bb16, unwind continue];
    }

    bb16: {
        _67 = &_68;
        _219 = const _;
        _66 = (move _67, _219);
        _70 = (_66.0: &u32);
        _71 = (_66.1: &u32);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<u32, u32>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb18: {
        _82 = Result::<u32, u32>::Err(const 1_u32);
        _81 = or_at(move _82) -> [return: bb19, unwind continue];
    }

    bb19: {
        _80 = &_81;
        _218 = const _;
        _79 = (move _80, _218);
        _83 = (_79.0: &u32);
        _84 = (_79.1: &u32);
        _87 = (*_83);
        _88 = (*_84);
        _86 = Eq(move _87, move _88);
        _85 = Not(move _86);
        switchInt(move _85) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<u32, u32>(move _89, _83, _84, move _91) -> unwind continue;
    }

    bb21: {
        _95 = Result::<u32, u32>::Err(const 2_u32);
        _94 = or_at(move _95) -> [return: bb22, unwind continue];
    }

    bb22: {
        _93 = &_94;
        _217 = const _;
        _92 = (move _93, _217);
        _96 = (_92.0: &u32);
        _97 = (_92.1: &u32);
        _100 = (*_96);
        _101 = (*_97);
        _99 = Eq(move _100, move _101);
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<u32, u32>(move _102, _96, _97, move _104) -> unwind continue;
    }

    bb24: {
        _108 = Result::<u32, u32>::Err(const 3_u32);
        _107 = or_at(move _108) -> [return: bb25, unwind continue];
    }

    bb25: {
        _106 = &_107;
        _216 = const _;
        _105 = (move _106, _216);
        _109 = (_105.0: &u32);
        _110 = (_105.1: &u32);
        _113 = (*_109);
        _114 = (*_110);
        _112 = Eq(move _113, move _114);
        _111 = Not(move _112);
        switchInt(move _111) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _115 = core::panicking::AssertKind::Eq;
        _117 = Option::<Arguments<'_>>::None;
        _116 = core::panicking::assert_failed::<u32, u32>(move _115, _109, _110, move _117) -> unwind continue;
    }

    bb27: {
        _121 = Result::<u32, u32>::Err(const 4_u32);
        _120 = or_at(move _121) -> [return: bb28, unwind continue];
    }

    bb28: {
        _119 = &_120;
        _215 = const _;
        _118 = (move _119, _215);
        _122 = (_118.0: &u32);
        _123 = (_118.1: &u32);
        _126 = (*_122);
        _127 = (*_123);
        _125 = Eq(move _126, move _127);
        _124 = Not(move _125);
        switchInt(move _124) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<u32, u32>(move _128, _122, _123, move _130) -> unwind continue;
    }

    bb30: {
        _134 = Result::<u32, u32>::Err(const 5_u32);
        _133 = or_at(move _134) -> [return: bb31, unwind continue];
    }

    bb31: {
        _132 = &_133;
        _214 = const _;
        _131 = (move _132, _214);
        _135 = (_131.0: &u32);
        _136 = (_131.1: &u32);
        _139 = (*_135);
        _140 = (*_136);
        _138 = Eq(move _139, move _140);
        _137 = Not(move _138);
        switchInt(move _137) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _141 = core::panicking::AssertKind::Eq;
        _143 = Option::<Arguments<'_>>::None;
        _142 = core::panicking::assert_failed::<u32, u32>(move _141, _135, _136, move _143) -> unwind continue;
    }

    bb33: {
        _147 = Result::<u32, u32>::Err(const 6_u32);
        _146 = or_at(move _147) -> [return: bb34, unwind continue];
    }

    bb34: {
        _145 = &_146;
        _213 = const _;
        _144 = (move _145, _213);
        _148 = (_144.0: &u32);
        _149 = (_144.1: &u32);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = core::panicking::assert_failed::<u32, u32>(move _154, _148, _149, move _156) -> unwind continue;
    }

    bb36: {
        _160 = Result::<u32, u32>::Err(const 7_u32);
        _159 = or_at(move _160) -> [return: bb37, unwind continue];
    }

    bb37: {
        _158 = &_159;
        _212 = const _;
        _157 = (move _158, _212);
        _161 = (_157.0: &u32);
        _162 = (_157.1: &u32);
        _165 = (*_161);
        _166 = (*_162);
        _164 = Eq(move _165, move _166);
        _163 = Not(move _164);
        switchInt(move _163) -> [0: bb39, otherwise: bb38];
    }

    bb38: {
        _167 = core::panicking::AssertKind::Eq;
        _169 = Option::<Arguments<'_>>::None;
        _168 = core::panicking::assert_failed::<u32, u32>(move _167, _161, _162, move _169) -> unwind continue;
    }

    bb39: {
        _173 = Result::<u32, u32>::Err(const 8_u32);
        _172 = or_at(move _173) -> [return: bb40, unwind continue];
    }

    bb40: {
        _171 = &_172;
        _211 = const _;
        _170 = (move _171, _211);
        _174 = (_170.0: &u32);
        _175 = (_170.1: &u32);
        _178 = (*_174);
        _179 = (*_175);
        _177 = Eq(move _178, move _179);
        _176 = Not(move _177);
        switchInt(move _176) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<u32, u32>(move _180, _174, _175, move _182) -> unwind continue;
    }

    bb42: {
        _186 = Result::<u32, u32>::Err(const 20_u32);
        _185 = or_at(move _186) -> [return: bb43, unwind continue];
    }

    bb43: {
        _184 = &_185;
        _210 = const _;
        _183 = (move _184, _210);
        _187 = (_183.0: &u32);
        _188 = (_183.1: &u32);
        _191 = (*_187);
        _192 = (*_188);
        _190 = Eq(move _191, move _192);
        _189 = Not(move _190);
        switchInt(move _189) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = core::panicking::assert_failed::<u32, u32>(move _193, _187, _188, move _195) -> unwind continue;
    }

    bb45: {
        _199 = Result::<u32, u32>::Err(const 50_u32);
        _198 = or_at(move _199) -> [return: bb46, unwind continue];
    }

    bb46: {
        _197 = &_198;
        _209 = const _;
        _196 = (move _197, _209);
        _200 = (_196.0: &u32);
        _201 = (_196.1: &u32);
        _204 = (*_200);
        _205 = (*_201);
        _203 = Eq(move _204, move _205);
        _202 = Not(move _203);
        switchInt(move _202) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _206 = core::panicking::AssertKind::Eq;
        _208 = Option::<Arguments<'_>>::None;
        _207 = core::panicking::assert_failed::<u32, u32>(move _206, _200, _201, move _208) -> unwind continue;
    }

    bb48: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 500_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 220_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 8_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 207_u32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 6_u32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 205_u32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 104_u32;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 203_u32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 102_u32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 201_u32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 500_u32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 500_u32;
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4_u32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 500_u32;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}
