// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/or-patterns/basic-switch.rs:6:10: 6:15>::fmt(_1: &Test, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    debug f => _2;                       // in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    let mut _4: &str;                    // in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    let mut _5: isize;                   // in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    let _6: &str;                        // in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    let _7: &str;                        // in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    let _8: &str;                        // in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    let _9: &str;                        // in scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
        _5 = discriminant((*_1));        // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    }

    bb1: {
        _9 = const "Qux";                // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _9;                         // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/basic-switch.rs:6:14: 6:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
    }

    bb3: {
        _6 = const "Foo";                // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/basic-switch.rs:6:14: 6:15
    }

    bb4: {
        _7 = const "Bar";                // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/basic-switch.rs:6:14: 6:15
    }

    bb5: {
        _8 = const "Baz";                // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
        goto -> bb6;                     // scope 0 at ui/or-patterns/basic-switch.rs:6:14: 6:15
    }

    bb6: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb7; // scope 0 at ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:6:10: 6:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/or-patterns/basic-switch.rs:6:15: 6:15
    }
}

fn test(_1: Option<Test>) -> bool {
    debug x => _1;                       // in scope 0 at ui/or-patterns/basic-switch.rs:14:9: 14:10
    let mut _0: bool;                    // return place in scope 0 at ui/or-patterns/basic-switch.rs:14:29: 14:33
    let mut _2: isize;                   // in scope 0 at ui/or-patterns/basic-switch.rs:17:14: 17:23
    let mut _3: isize;                   // in scope 0 at ui/or-patterns/basic-switch.rs:17:9: 17:36

    bb0: {
        _3 = discriminant(_1);           // scope 0 at ui/or-patterns/basic-switch.rs:15:11: 15:12
        switchInt(move _3) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/or-patterns/basic-switch.rs:15:5: 15:12
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/or-patterns/basic-switch.rs:21:17: 21:22
        goto -> bb6;                     // scope 0 at ui/or-patterns/basic-switch.rs:21:17: 21:22
    }

    bb2: {
        _2 = discriminant(((_1 as Some).0: Test)); // scope 0 at ui/or-patterns/basic-switch.rs:15:11: 15:12
        switchInt(move _2) -> [1: bb4, 3: bb4, otherwise: bb5]; // scope 0 at ui/or-patterns/basic-switch.rs:15:5: 15:12
    }

    bb3: {
        unreachable;                     // scope 0 at ui/or-patterns/basic-switch.rs:15:11: 15:12
    }

    bb4: {
        _0 = const true;                 // scope 0 at ui/or-patterns/basic-switch.rs:17:40: 17:44
        goto -> bb6;                     // scope 0 at ui/or-patterns/basic-switch.rs:17:40: 17:44
    }

    bb5: {
        _0 = const false;                // scope 0 at ui/or-patterns/basic-switch.rs:19:20: 19:25
        goto -> bb6;                     // scope 0 at ui/or-patterns/basic-switch.rs:19:20: 19:25
    }

    bb6: {
        return;                          // scope 0 at ui/or-patterns/basic-switch.rs:23:2: 23:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/or-patterns/basic-switch.rs:25:11: 25:11
    let mut _1: bool;                    // in scope 0 at ui/or-patterns/basic-switch.rs:26:5: 26:36
    let mut _2: bool;                    // in scope 0 at ui/or-patterns/basic-switch.rs:26:13: 26:35
    let mut _3: bool;                    // in scope 0 at ui/or-patterns/basic-switch.rs:26:14: 26:35
    let mut _4: std::option::Option<Test>; // in scope 0 at ui/or-patterns/basic-switch.rs:26:19: 26:34
    let mut _5: !;                       // in scope 0 at ui/or-patterns/basic-switch.rs:26:5: 26:36
    let mut _6: bool;                    // in scope 0 at ui/or-patterns/basic-switch.rs:27:5: 27:35
    let mut _7: bool;                    // in scope 0 at ui/or-patterns/basic-switch.rs:27:13: 27:34
    let mut _8: std::option::Option<Test>; // in scope 0 at ui/or-patterns/basic-switch.rs:27:18: 27:33
    let mut _9: !;                       // in scope 0 at ui/or-patterns/basic-switch.rs:27:5: 27:35
    let mut _10: bool;                   // in scope 0 at ui/or-patterns/basic-switch.rs:28:5: 28:36
    let mut _11: bool;                   // in scope 0 at ui/or-patterns/basic-switch.rs:28:13: 28:35
    let mut _12: bool;                   // in scope 0 at ui/or-patterns/basic-switch.rs:28:14: 28:35
    let mut _13: std::option::Option<Test>; // in scope 0 at ui/or-patterns/basic-switch.rs:28:19: 28:34
    let mut _14: !;                      // in scope 0 at ui/or-patterns/basic-switch.rs:28:5: 28:36
    let mut _15: bool;                   // in scope 0 at ui/or-patterns/basic-switch.rs:29:5: 29:35
    let mut _16: bool;                   // in scope 0 at ui/or-patterns/basic-switch.rs:29:13: 29:34
    let mut _17: std::option::Option<Test>; // in scope 0 at ui/or-patterns/basic-switch.rs:29:18: 29:33
    let mut _18: !;                      // in scope 0 at ui/or-patterns/basic-switch.rs:29:5: 29:35
    let mut _19: bool;                   // in scope 0 at ui/or-patterns/basic-switch.rs:30:5: 30:25
    let mut _20: bool;                   // in scope 0 at ui/or-patterns/basic-switch.rs:30:13: 30:24
    let mut _21: bool;                   // in scope 0 at ui/or-patterns/basic-switch.rs:30:14: 30:24
    let mut _22: std::option::Option<Test>; // in scope 0 at ui/or-patterns/basic-switch.rs:30:19: 30:23
    let mut _23: !;                      // in scope 0 at ui/or-patterns/basic-switch.rs:30:5: 30:25

    bb0: {
        _4 = const Option::<Test>::Some(Test::Foo); // scope 0 at ui/or-patterns/basic-switch.rs:26:19: 26:34
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:26:19: 26:34
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x00)) }
        _3 = test(move _4) -> bb1;       // scope 0 at ui/or-patterns/basic-switch.rs:26:14: 26:35
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:26:14: 26:18
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 0 at ui/or-patterns/basic-switch.rs:26:13: 26:35
        _1 = Not(move _2);               // scope 0 at ui/or-patterns/basic-switch.rs:26:5: 26:36
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/or-patterns/basic-switch.rs:26:5: 26:36
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: !test(Some(Test::Foo))"); // scope 0 at ui/or-patterns/basic-switch.rs:26:5: 26:36
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:26:5: 26:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _8 = const Option::<Test>::Some(Test::Bar); // scope 0 at ui/or-patterns/basic-switch.rs:27:18: 27:33
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:27:18: 27:33
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x01)) }
        _7 = test(move _8) -> bb4;       // scope 0 at ui/or-patterns/basic-switch.rs:27:13: 27:34
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:27:13: 27:17
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = Not(move _7);               // scope 0 at ui/or-patterns/basic-switch.rs:27:5: 27:35
        switchInt(move _6) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/or-patterns/basic-switch.rs:27:5: 27:35
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: test(Some(Test::Bar))"); // scope 0 at ui/or-patterns/basic-switch.rs:27:5: 27:35
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:27:5: 27:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _13 = const Option::<Test>::Some(Test::Baz); // scope 0 at ui/or-patterns/basic-switch.rs:28:19: 28:34
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:28:19: 28:34
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x02)) }
        _12 = test(move _13) -> bb7;     // scope 0 at ui/or-patterns/basic-switch.rs:28:14: 28:35
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:28:14: 28:18
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = Not(move _12);             // scope 0 at ui/or-patterns/basic-switch.rs:28:13: 28:35
        _10 = Not(move _11);             // scope 0 at ui/or-patterns/basic-switch.rs:28:5: 28:36
        switchInt(move _10) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/or-patterns/basic-switch.rs:28:5: 28:36
    }

    bb8: {
        _14 = core::panicking::panic(const "assertion failed: !test(Some(Test::Baz))"); // scope 0 at ui/or-patterns/basic-switch.rs:28:5: 28:36
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:28:5: 28:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _17 = const Option::<Test>::Some(Test::Qux); // scope 0 at ui/or-patterns/basic-switch.rs:29:18: 29:33
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:29:18: 29:33
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x03)) }
        _16 = test(move _17) -> bb10;    // scope 0 at ui/or-patterns/basic-switch.rs:29:13: 29:34
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:29:13: 29:17
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb10: {
        _15 = Not(move _16);             // scope 0 at ui/or-patterns/basic-switch.rs:29:5: 29:35
        switchInt(move _15) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/or-patterns/basic-switch.rs:29:5: 29:35
    }

    bb11: {
        _18 = core::panicking::panic(const "assertion failed: test(Some(Test::Qux))"); // scope 0 at ui/or-patterns/basic-switch.rs:29:5: 29:35
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:29:5: 29:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _22 = const Option::<Test>::None; // scope 0 at ui/or-patterns/basic-switch.rs:30:19: 30:23
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:30:19: 30:23
                                         // + literal: Const { ty: Option<Test>, val: Value(Scalar(0x04)) }
        _21 = test(move _22) -> bb13;    // scope 0 at ui/or-patterns/basic-switch.rs:30:14: 30:24
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:30:14: 30:18
                                         // + literal: Const { ty: fn(Option<Test>) -> bool {test}, val: Value(<ZST>) }
    }

    bb13: {
        _20 = Not(move _21);             // scope 0 at ui/or-patterns/basic-switch.rs:30:13: 30:24
        _19 = Not(move _20);             // scope 0 at ui/or-patterns/basic-switch.rs:30:5: 30:25
        switchInt(move _19) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/or-patterns/basic-switch.rs:30:5: 30:25
    }

    bb14: {
        _23 = core::panicking::panic(const "assertion failed: !test(None)"); // scope 0 at ui/or-patterns/basic-switch.rs:30:5: 30:25
                                         // mir::Constant
                                         // + span: ui/or-patterns/basic-switch.rs:30:5: 30:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        return;                          // scope 0 at ui/or-patterns/basic-switch.rs:31:2: 31:2
    }
}
