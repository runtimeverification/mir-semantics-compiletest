// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<i32>;
    let mut _3: isize;
    let _5: ();
    let mut _6: &mut std::vec::Vec<i32>;
    let mut _7: i32;
    let mut _8: (&std::vec::Vec<i32>, &[i32; 2]);
    let mut _9: &std::vec::Vec<i32>;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: &std::option::Option<i32>;
    let mut _18: isize;
    let _19: !;
    let mut _20: isize;
    let mut _22: (&i32, &i32);
    let mut _23: &i32;
    let mut _26: bool;
    let mut _27: bool;
    let mut _28: i32;
    let mut _29: i32;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let _33: !;
    scope 1 {
        debug opt => _1;
        let mut _2: std::vec::Vec<i32>;
        scope 2 {
            debug w => _2;
            let _10: &std::vec::Vec<i32>;
            let _11: &[i32; 2];
            let mut _35: &[i32; 2];
            scope 3 {
                debug val => _4;
                let _4: &mut i32;
            }
            scope 4 {
                debug left_val => _10;
                debug right_val => _11;
                let _14: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _14;
                }
            }
            scope 6 {
            }
            scope 7 {
                debug x => _21;
                let _21: i32;
                let _24: &i32;
                let _25: &i32;
                let mut _34: &i32;
                scope 8 {
                    debug left_val => _24;
                    debug right_val => _25;
                    let _30: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _30;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Option::<i32>::Some(const 3_i32);
        _2 = Vec::<i32>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [1: bb2, otherwise: bb8];
    }

    bb2: {
        switchInt(((_1 as Some).0: i32)) -> [3: bb4, 4: bb5, 6: bb6, otherwise: bb8];
    }

    bb3: {
        _6 = &mut _2;
        _7 = (*_4);
        _5 = Vec::<i32>::push(move _6, move _7) -> [return: bb7, unwind: bb24];
    }

    bb4: {
        _4 = &mut ((_1 as Some).0: i32);
        goto -> bb3;
    }

    bb5: {
        _4 = &mut ((_1 as Some).0: i32);
        goto -> bb3;
    }

    bb6: {
        _4 = &mut ((_1 as Some).0: i32);
        goto -> bb3;
    }

    bb7: {
        (*_4) = Add((*_4), const 1_i32);
        goto -> bb1;
    }

    bb8: {
        _9 = &_2;
        _35 = const _;
        _8 = (move _9, _35);
        _10 = (_8.0: &std::vec::Vec<i32>);
        _11 = (_8.1: &[i32; 2]);
        _13 = <Vec<i32> as PartialEq<[i32; 2]>>::eq(_10, _11) -> [return: bb9, unwind: bb24];
    }

    bb9: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<Vec<i32>, [i32; 2]>(move _14, _10, _11, move _16) -> bb24;
    }

    bb11: {
        _17 = &_1;
        _18 = discriminant((*_17));
        switchInt(move _18) -> [0: bb13, 1: bb12, otherwise: bb26];
    }

    bb12: {
        switchInt((((*_17) as Some).0: i32)) -> [6: bb13, 7: bb13, otherwise: bb14];
    }

    bb13: {
        _19 = core::panicking::panic(const "internal error: entered unreachable code") -> bb24;
    }

    bb14: {
        _20 = discriminant(_1);
        switchInt(move _20) -> [1: bb16, otherwise: bb15];
    }

    bb15: {
        _33 = core::panicking::panic(const "internal error: entered unreachable code") -> bb24;
    }

    bb16: {
        switchInt(((_1 as Some).0: i32)) -> [4: bb18, 5: bb19, 6: bb20, otherwise: bb15];
    }

    bb17: {
        _23 = &_21;
        _34 = const _;
        _22 = (move _23, _34);
        _24 = (_22.0: &i32);
        _25 = (_22.1: &i32);
        _28 = (*_24);
        _29 = (*_25);
        _27 = Eq(move _28, move _29);
        _26 = Not(move _27);
        switchInt(move _26) -> [0: bb22, otherwise: bb21];
    }

    bb18: {
        _21 = ((_1 as Some).0: i32);
        goto -> bb17;
    }

    bb19: {
        _21 = ((_1 as Some).0: i32);
        goto -> bb17;
    }

    bb20: {
        _21 = ((_1 as Some).0: i32);
        goto -> bb17;
    }

    bb21: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<i32, i32>(move _30, _24, _25, move _32) -> bb24;
    }

    bb22: {
        drop(_2) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_2) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }

    bb26: {
        unreachable;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 3_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}
