// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/hygienic-labels.rs:37:15: 37:15
    let mut _1: std::ops::Range<i32>;    // in scope 0 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
    let mut _2: std::ops::Range<i32>;    // in scope 0 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
    let mut _3: std::ops::Range<i32>;    // in scope 0 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
    let mut _4: std::option::Option<i32>; // in scope 0 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
    let mut _5: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
    let mut _6: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
    let mut _7: isize;                   // in scope 0 at ui/hygiene/hygienic-labels.rs:38:5: 42:6
    let mut _8: std::ops::Range<i32>;    // in scope 0 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
    let mut _9: std::ops::Range<i32>;    // in scope 0 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
    let mut _10: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
    let mut _11: std::option::Option<i32>; // in scope 0 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
    let mut _12: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
    let mut _13: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
    let mut _14: isize;                  // in scope 0 at ui/hygiene/hygienic-labels.rs:55:5: 59:6
    let mut _15: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
    let mut _16: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
    let mut _18: std::option::Option<i32>; // in scope 0 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
    let mut _19: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
    let mut _20: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
    let mut _21: isize;                  // in scope 0 at ui/hygiene/hygienic-labels.rs:22:9: 24:10
    let mut _22: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
    }
    scope 2 {
        debug iter => _10;               // in scope 2 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
        let mut _17: std::ops::Range<i32>; // in scope 2 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
        scope 3 {
            debug iter => _17;           // in scope 3 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
        }
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 }; // scope 0 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
        _1 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels.rs:38:18: 38:22
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
        _6 = &mut _3;                    // scope 1 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
        _5 = &mut (*_6);                 // scope 1 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
        _4 = <std::ops::Range<i32> as Iterator>::next(move _5) -> bb2; // scope 1 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels.rs:38:18: 38:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_4);           // scope 1 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
        switchInt(move _7) -> [0: bb4, 1: bb4, otherwise: bb3]; // scope 1 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
    }

    bb3: {
        unreachable;                     // scope 1 at ui/hygiene/hygienic-labels.rs:38:18: 38:22
    }

    bb4: {
        _9 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 }; // scope 0 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
        _8 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _9) -> bb5; // scope 0 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels.rs:55:18: 55:22
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = move _8;                   // scope 0 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
        goto -> bb6;                     // scope 2 at ui/hygiene/hygienic-labels.rs:55:5: 59:6
    }

    bb6: {
        _13 = &mut _10;                  // scope 2 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
        _12 = &mut (*_13);               // scope 2 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
        _11 = <std::ops::Range<i32> as Iterator>::next(move _12) -> bb7; // scope 2 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels.rs:55:18: 55:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = discriminant(_11);         // scope 2 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
        switchInt(move _14) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 2 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
    }

    bb8: {
        _16 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 }; // scope 2 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
        _15 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _16) -> bb11; // scope 2 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels.rs:22:22: 22:26
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 2 at ui/hygiene/hygienic-labels.rs:55:18: 55:22
    }

    bb10: {
        return;                          // scope 0 at ui/hygiene/hygienic-labels.rs:60:2: 60:2
    }

    bb11: {
        _17 = move _15;                  // scope 2 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
        _20 = &mut _17;                  // scope 3 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
        _19 = &mut (*_20);               // scope 3 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
        _18 = <std::ops::Range<i32> as Iterator>::next(move _19) -> bb12; // scope 3 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels.rs:22:22: 22:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb12: {
        _21 = discriminant(_18);         // scope 3 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
        switchInt(move _21) -> [0: bb14, 1: bb6, otherwise: bb13]; // scope 3 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
    }

    bb13: {
        unreachable;                     // scope 3 at ui/hygiene/hygienic-labels.rs:22:22: 22:26
    }

    bb14: {
        _22 = begin_panic::<&str>(const "continue doesn't act hygienically inside for loop"); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels.rs:58:16: 58:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
