// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/panic-location.rs:8:11: 8:11
    let _1: std::collections::VecDeque<std::string::String>; // in scope 0 at ui/hygiene/panic-location.rs:9:5: 9:60
    let mut _2: usize;                   // in scope 0 at ui/hygiene/panic-location.rs:9:57: 9:59

    bb0: {
        _2 = const usize::MAX;           // scope 0 at ui/hygiene/panic-location.rs:9:57: 9:59
        _1 = VecDeque::<String>::with_capacity(move _2) -> bb1; // scope 0 at ui/hygiene/panic-location.rs:9:5: 9:60
                                         // mir::Constant
                                         // + span: ui/hygiene/panic-location.rs:9:5: 9:56
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(usize) -> VecDeque<String> {VecDeque::<String>::with_capacity}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/hygiene/panic-location.rs:9:60: 9:61
    }

    bb2: {
        return;                          // scope 0 at ui/hygiene/panic-location.rs:10:2: 10:2
    }
}
