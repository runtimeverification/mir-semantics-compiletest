// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
VectorLike::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:8:45: 8:51

    bb0: {
        _0 = const SIZE;                 // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:8:46: 8:50
        return;                          // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:8:45: 8:51
    }
}

<impl at ui/hygiene/issue-61574-const-parameters.rs:13:9: 13:74>::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:13:67: 13:73

    bb0: {
        _0 = const SIZE;                 // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:13:68: 13:72
        return;                          // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:13:67: 13:73
    }
}

<impl at ui/hygiene/issue-61574-const-parameters.rs:13:9: 13:74>::Output::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:17:41: 17:47

    bb0: {
        _0 = const SIZE;                 // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:17:42: 17:46
        return;                          // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:17:41: 17:47
    }
}

fn <impl at ui/hygiene/issue-61574-const-parameters.rs:13:9: 13:74>::add(_1: VectorLike<T, SIZE>, _2: VectorLike<T, SIZE>) -> VectorLike<T, SIZE> {
    debug self => _1;                    // in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:19:30: 19:34
    let mut _0: VectorLike<T, SIZE>;     // return place in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:19:65: 19:86
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    scope 1 {
    }

    bb0: {
        _3 = core::panicking::panic(const "not implemented") -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:22:13: 22:14
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:22:13: 22:14
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:19:13: 22:14
    }
}

<impl at ui/hygiene/issue-61574-const-parameters.rs:13:9: 13:74>::add::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:19:53: 19:59

    bb0: {
        _0 = const SIZE;                 // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:19:54: 19:58
        return;                          // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:19:53: 19:59
    }
}

<impl at ui/hygiene/issue-61574-const-parameters.rs:13:9: 13:74>::add::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:19:79: 19:85

    bb0: {
        _0 = const SIZE;                 // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:19:80: 19:84
        return;                          // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:19:79: 19:85
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:30:11: 30:11

    bb0: {
        return;                          // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:30:13: 30:13
    }
}

fn VectorLike(_1: [T; SIZE]) -> VectorLike<T, SIZE> {
    let mut _0: VectorLike<T, SIZE>;     // return place in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:8:1: 8:40

    bb0: {
        _0 = VectorLike::<T, SIZE>(move _1); // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:8:1: 8:40
        return;                          // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:8:1: 8:40
    }
}

// MIR FOR CTFE
fn VectorLike(_1: [T; SIZE]) -> VectorLike<T, SIZE> {
    let mut _0: VectorLike<T, SIZE>;     // return place in scope 0 at ui/hygiene/issue-61574-const-parameters.rs:8:1: 8:40

    bb0: {
        _0 = VectorLike::<T, SIZE>(move _1); // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:8:1: 8:40
        return;                          // scope 0 at ui/hygiene/issue-61574-const-parameters.rs:8:1: 8:40
    }
}
