// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/stdlib-prelude-from-opaque-late.rs:7:16: 7:16
    let _1: ();                          // in scope 0 at ui/hygiene/stdlib-prelude-from-opaque-late.rs:8:13: 8:30
    let _2: ();                          // in scope 0 at ui/hygiene/stdlib-prelude-from-opaque-late.rs:9:13: 9:20

    bb0: {
        _1 = std::mem::drop::<i32>(const 0_i32) -> bb1; // scope 0 at ui/hygiene/stdlib-prelude-from-opaque-late.rs:8:13: 8:30
                                         // mir::Constant
                                         // + span: ui/hygiene/stdlib-prelude-from-opaque-late.rs:8:13: 8:27
                                         // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = std::mem::drop::<i32>(const 0_i32) -> bb2; // scope 0 at ui/hygiene/stdlib-prelude-from-opaque-late.rs:9:13: 9:20
                                         // mir::Constant
                                         // + span: ui/hygiene/stdlib-prelude-from-opaque-late.rs:9:13: 9:17
                                         // + literal: Const { ty: fn(i32) {std::mem::drop::<i32>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/hygiene/stdlib-prelude-from-opaque-late.rs:10:10: 10:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/stdlib-prelude-from-opaque-late.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/hygiene/stdlib-prelude-from-opaque-late.rs:16:13: 16:13
    }
}
