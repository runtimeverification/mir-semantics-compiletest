// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Tr::f(_1: &Self) -> &str {
    debug self => _1;
    let mut _0: &str;

    bb0: {
        _0 = const "This shouldn't happen";
        return;
    }
}

fn <impl at ui/hygiene/specialization.rs:12:5: 16:6>::f(_1: &S) -> &str {
    debug self => _1;
    let mut _0: &str;

    bb0: {
        _0 = const "Run me";
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let mut _2: &&str;
    let _3: &str;
    let _4: &&str;
    let _5: &&str;
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &&str;
    let mut _12: &S;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _3 = <S as Tr>::f(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _11 = const _;
        _1 = (move _2, _11);
        _4 = (_1.0: &&str);
        _5 = (_1.1: &&str);
        _7 = <&str as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<&str, &str>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Run me";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &S = {
    let mut _0: &S;
    let mut _1: S;

    bb0: {
        _1 = S;
        _0 = &_1;
        return;
    }
}
