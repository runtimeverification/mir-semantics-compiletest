// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/eager-from-opaque.rs:18:11: 18:11
    let _1: std::fmt::Arguments<'_>;     // in scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
    let mut _2: &[&str];                 // in scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
    let mut _3: &[&str; 1];              // in scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
    let _4: &[&str; 1];                  // in scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
    let mut _5: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
    let mut _6: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
    let _7: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
    let mut _9: &[&str; 1];              // in scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14

    bb0: {
        _9 = const _;                    // scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
                                         // mir::Constant
                                         // + span: ui/hygiene/eager-from-opaque.rs:8:9: 8:14
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _9;                         // scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
        _3 = _4;                         // scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
        _2 = move _3 as &[&str] (Pointer(Unsize)); // scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
        _8 = const _;                    // scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
                                         // mir::Constant
                                         // + span: ui/hygiene/eager-from-opaque.rs:19:5: 19:25
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _8;                         // scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
        _6 = _7;                         // scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
        _5 = move _6 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
        _1 = Arguments::<'_>::new_v1(move _2, move _5) -> bb1; // scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
                                         // mir::Constant
                                         // + span: ui/hygiene/eager-from-opaque.rs:19:5: 19:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/hygiene/eager-from-opaque.rs:20:2: 20:2
    }
}

promoted[0] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25

    bb0: {
        _1 = [];                         // scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
        _0 = &_1;                        // scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
        return;                          // scope 0 at ui/hygiene/eager-from-opaque.rs:19:5: 19:25
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
    let mut _1: [&str; 1];               // in scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14

    bb0: {
        _1 = [const "foo"];              // scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
                                         // mir::Constant
                                         // + span: ui/hygiene/eager-from-opaque.rs:8:9: 8:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
        return;                          // scope 0 at ui/hygiene/eager-from-opaque.rs:8:9: 8:14
    }
}
