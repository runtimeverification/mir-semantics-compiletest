// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: u32;
    let mut _2: i32;
    let mut _3: i32;
    let mut _6: &();
    scope 1 {
        let mut _5: &();
        scope 2 {
            let mut _4: &();
            scope 3 {
            }
        }
    }

    bb0: {
        _6 = const _;
        _1 = <() as T>::f(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const _;
        _2 = <() as T>::f(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = const _;
        _3 = <() as T>::f(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

fn T::f(_1: &Self) -> u32 {
    debug self => _1;
    let mut _0: u32;

    bb0: {
        _0 = const 0_u32;
        return;
    }
}

fn T::f(_1: &Self) -> i32 {
    debug self => _1;
    let mut _0: i32;

    bb0: {
        _0 = const 0_i32;
        return;
    }
}
