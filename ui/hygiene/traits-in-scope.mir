// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Trait1::simple_import(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Trait2::renamed_import(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Trait3::underscore_import(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn Trait4::trait_alias(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();
    let _4: ();
    let mut _5: &();
    let mut _6: &();
    let mut _7: &();
    let mut _8: &();

    bb0: {
        _8 = const _;
        _1 = <() as Trait1>::simple_import(_8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = const _;
        _2 = <() as Trait2>::renamed_import(_7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = const _;
        _3 = <() as Trait3>::underscore_import(_6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = const _;
        _4 = <() as Trait4>::trait_alias(_5) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}
