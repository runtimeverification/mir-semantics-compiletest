// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Trait1::simple_import(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/hygiene/traits-in-scope.rs:12:26: 12:31
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/traits-in-scope.rs:12:33: 12:33

    bb0: {
        return;                          // scope 0 at ui/hygiene/traits-in-scope.rs:12:35: 12:35
    }
}

fn Trait2::renamed_import(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/hygiene/traits-in-scope.rs:15:27: 15:32
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/traits-in-scope.rs:15:34: 15:34

    bb0: {
        return;                          // scope 0 at ui/hygiene/traits-in-scope.rs:15:36: 15:36
    }
}

fn Trait3::underscore_import(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/hygiene/traits-in-scope.rs:18:30: 18:35
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/traits-in-scope.rs:18:37: 18:37

    bb0: {
        return;                          // scope 0 at ui/hygiene/traits-in-scope.rs:18:39: 18:39
    }
}

fn Trait4::trait_alias(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/hygiene/traits-in-scope.rs:21:24: 21:29
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/traits-in-scope.rs:21:31: 21:31

    bb0: {
        return;                          // scope 0 at ui/hygiene/traits-in-scope.rs:21:33: 21:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/traits-in-scope.rs:43:11: 43:11
    let _1: ();                          // in scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:23
    let mut _2: &();                     // in scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:23
    let _3: ();                          // in scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:24
    let mut _4: &();                     // in scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:24
    let _5: ();                          // in scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:27
    let mut _6: &();                     // in scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:27
    let _7: ();                          // in scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:21
    let mut _8: &();                     // in scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:21
    let mut _9: &();                     // in scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:21
    let mut _10: &();                    // in scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:27
    let mut _11: &();                    // in scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:24
    let mut _12: &();                    // in scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:23

    bb0: {
        _12 = const _;                   // scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:23
                                         // mir::Constant
                                         // + span: ui/hygiene/traits-in-scope.rs:49:5: 49:23
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[3])) }
        _2 = _12;                        // scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:23
        _1 = <() as Trait1>::simple_import(move _2) -> bb1; // scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:23
                                         // mir::Constant
                                         // + span: ui/hygiene/traits-in-scope.rs:49:8: 49:21
                                         // + literal: Const { ty: for<'a> fn(&'a ()) {<() as Trait1>::simple_import}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = const _;                   // scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:24
                                         // mir::Constant
                                         // + span: ui/hygiene/traits-in-scope.rs:50:5: 50:24
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[2])) }
        _4 = _11;                        // scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:24
        _3 = <() as Trait2>::renamed_import(move _4) -> bb2; // scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:24
                                         // mir::Constant
                                         // + span: ui/hygiene/traits-in-scope.rs:50:8: 50:22
                                         // + literal: Const { ty: for<'a> fn(&'a ()) {<() as Trait2>::renamed_import}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = const _;                   // scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:27
                                         // mir::Constant
                                         // + span: ui/hygiene/traits-in-scope.rs:51:5: 51:27
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _10;                        // scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:27
        _5 = <() as Trait3>::underscore_import(move _6) -> bb3; // scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:27
                                         // mir::Constant
                                         // + span: ui/hygiene/traits-in-scope.rs:51:8: 51:25
                                         // + literal: Const { ty: for<'a> fn(&'a ()) {<() as Trait3>::underscore_import}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = const _;                    // scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:21
                                         // mir::Constant
                                         // + span: ui/hygiene/traits-in-scope.rs:52:5: 52:21
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _9;                         // scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:21
        _7 = <() as Trait4>::trait_alias(move _8) -> bb4; // scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:21
                                         // mir::Constant
                                         // + span: ui/hygiene/traits-in-scope.rs:52:8: 52:19
                                         // + literal: Const { ty: for<'a> fn(&'a ()) {<() as Trait4>::trait_alias}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/hygiene/traits-in-scope.rs:53:2: 53:2
    }
}

promoted[0] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:21
    let mut _1: ();                      // in scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:7

    bb0: {
        _1 = ();                         // scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:7
        _0 = &_1;                        // scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:21
        return;                          // scope 0 at ui/hygiene/traits-in-scope.rs:52:5: 52:21
    }
}

promoted[1] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:27
    let mut _1: ();                      // in scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:7

    bb0: {
        _1 = ();                         // scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:7
        _0 = &_1;                        // scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:27
        return;                          // scope 0 at ui/hygiene/traits-in-scope.rs:51:5: 51:27
    }
}

promoted[2] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:24
    let mut _1: ();                      // in scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:7

    bb0: {
        _1 = ();                         // scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:7
        _0 = &_1;                        // scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:24
        return;                          // scope 0 at ui/hygiene/traits-in-scope.rs:50:5: 50:24
    }
}

promoted[3] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:23
    let mut _1: ();                      // in scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:7

    bb0: {
        _1 = ();                         // scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:7
        _0 = &_1;                        // scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:23
        return;                          // scope 0 at ui/hygiene/traits-in-scope.rs:49:5: 49:23
    }
}
