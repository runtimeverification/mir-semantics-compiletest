// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: i32;
    let mut _9: i32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 0_i32;
        scope 2 {
            debug x => const 1_i32;
            let _4: &i32;
            let _5: &i32;
            let mut _13: &i32;
            scope 3 {
                debug left_val => _4;
                debug right_val => _5;
                let _10: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _10;
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _3 = &_1;
        _13 = const _;
        _2 = (move _3, _13);
        _4 = (_2.0: &i32);
        _5 = (_2.1: &i32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<i32, i32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in f: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

fn g() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _4: (&(i32, i32), &(i32, i32));
    let mut _5: &(i32, i32);
    let _6: (i32, i32);
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&(i32, i32), &(i32, i32));
    let mut _15: &(i32, i32);
    let _16: (i32, i32);
    let mut _19: bool;
    let mut _20: bool;
    let _22: !;
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: (&(i32, i32), &(i32, i32));
    let mut _27: &(i32, i32);
    let _28: (i32, i32);
    let mut _31: bool;
    let mut _32: bool;
    let _34: !;
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _36: (&(i32, i32), &(i32, i32));
    let mut _37: &(i32, i32);
    let _38: (i32, i32);
    let mut _41: bool;
    let mut _42: bool;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 0_i32;
        let _2: i32;
        scope 2 {
            debug x => const 2_i32;
            let _3: i32;
            scope 3 {
                debug x => const 1_i32;
                scope 4 {
                    debug x => const 3_i32;
                    let _7: &(i32, i32);
                    let _8: &(i32, i32);
                    let _17: &(i32, i32);
                    let _18: &(i32, i32);
                    let _24: i32;
                    let mut _48: &(i32, i32);
                    let mut _49: &(i32, i32);
                    scope 5 {
                        debug left_val => _7;
                        debug right_val => _8;
                        let _11: core::panicking::AssertKind;
                        scope 6 {
                            debug kind => _11;
                        }
                    }
                    scope 7 {
                        debug left_val => _17;
                        debug right_val => _18;
                        let _21: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _21;
                        }
                    }
                    scope 9 {
                        debug x => const 4_i32;
                        let _25: i32;
                        scope 10 {
                            debug x => const 1_i32;
                            let _29: &(i32, i32);
                            let _30: &(i32, i32);
                            let _39: &(i32, i32);
                            let _40: &(i32, i32);
                            let mut _46: &(i32, i32);
                            let mut _47: &(i32, i32);
                            scope 11 {
                                debug left_val => _29;
                                debug right_val => _30;
                                let _33: core::panicking::AssertKind;
                                scope 12 {
                                    debug kind => _33;
                                }
                            }
                            scope 13 {
                                debug left_val => _39;
                                debug right_val => _40;
                                let _43: core::panicking::AssertKind;
                                scope 14 {
                                    debug kind => _43;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 2_i32;
        _3 = const 1_i32;
        _6 = (_2, _1);
        _5 = &_6;
        _49 = const _;
        _4 = (move _5, _49);
        _7 = (_4.0: &(i32, i32));
        _8 = (_4.1: &(i32, i32));
        _10 = <(i32, i32) as PartialEq>::eq(_7, _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _11, _7, _8, move _13) -> unwind continue;
    }

    bb3: {
        _16 = (_2, _3);
        _15 = &_16;
        _48 = const _;
        _14 = (move _15, _48);
        _17 = (_14.0: &(i32, i32));
        _18 = (_14.1: &(i32, i32));
        _20 = <(i32, i32) as PartialEq>::eq(_17, _18) -> [return: bb4, unwind continue];
    }

    bb4: {
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _21 = core::panicking::AssertKind::Eq;
        _23 = Option::<Arguments<'_>>::None;
        _22 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _21, _17, _18, move _23) -> unwind continue;
    }

    bb6: {
        _24 = const 4_i32;
        _25 = const 1_i32;
        _28 = (_24, _1);
        _27 = &_28;
        _47 = const _;
        _26 = (move _27, _47);
        _29 = (_26.0: &(i32, i32));
        _30 = (_26.1: &(i32, i32));
        _32 = <(i32, i32) as PartialEq>::eq(_29, _30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _33 = core::panicking::AssertKind::Eq;
        _35 = Option::<Arguments<'_>>::None;
        _34 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _33, _29, _30, move _35) -> unwind continue;
    }

    bb9: {
        _38 = (_24, _25);
        _37 = &_38;
        _46 = const _;
        _36 = (move _37, _46);
        _39 = (_36.0: &(i32, i32));
        _40 = (_36.1: &(i32, i32));
        _42 = <(i32, i32) as PartialEq>::eq(_39, _40) -> [return: bb10, unwind continue];
    }

    bb10: {
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _43, _39, _40, move _45) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in g: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 4_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in g: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 4_i32, const 0_i32);
        _0 = &_1;
        return;
    }
}

promoted[2] in g: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}

promoted[3] in g: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 0_i32);
        _0 = &_1;
        return;
    }
}

fn foo::f() -> (i32, i32) {
    let mut _0: (i32, i32);
    let _1: i32;
    let mut _3: i32;
    scope 1 {
        debug x => const 0_i32;
        let _2: i32;
        scope 2 {
            debug x => const 1_i32;
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 1_i32;
        _3 = Add(_2, const 10_i32);
        _0 = (_1, move _3);
        return;
    }
}

fn interpolated_pattern() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&(i32, i32), &(i32, i32));
    let mut _4: &(i32, i32);
    let _5: (i32, i32);
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 0_i32;
        let _2: i32;
        scope 2 {
            debug x => const 1_i32;
            let _6: &(i32, i32);
            let _7: &(i32, i32);
            let mut _13: &(i32, i32);
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _10: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _10;
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 1_i32;
        _5 = (_1, _2);
        _4 = &_5;
        _13 = const _;
        _3 = (move _4, _13);
        _6 = (_3.0: &(i32, i32));
        _7 = (_3.1: &(i32, i32));
        _9 = <(i32, i32) as PartialEq>::eq(_6, _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _10, _6, _7, move _12) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in interpolated_pattern: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 0_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}

fn patterns_in_macro_generated_macros() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&(i32, i32), &(i32, i32));
    let mut _16: &(i32, i32);
    let _17: (i32, i32);
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 0_i32;
        let _2: i32;
        scope 2 {
            debug x => const 1_i32;
            let _5: &i32;
            let _6: &i32;
            let _14: i32;
            let mut _26: &i32;
            scope 3 {
                debug left_val => _5;
                debug right_val => _6;
                let _11: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _11;
                }
            }
            scope 5 {
                debug x => const 2_i32;
                scope 6 {
                    debug x => const 3_i32;
                    let _18: &(i32, i32);
                    let _19: &(i32, i32);
                    let mut _25: &(i32, i32);
                    scope 7 {
                        debug left_val => _18;
                        debug right_val => _19;
                        let _22: core::panicking::AssertKind;
                        scope 8 {
                            debug kind => _22;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 1_i32;
        _4 = &_1;
        _26 = const _;
        _3 = (move _4, _26);
        _5 = (_3.0: &i32);
        _6 = (_3.1: &i32);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<i32, i32>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb2: {
        _14 = const 2_i32;
        _17 = (_14, _2);
        _16 = &_17;
        _25 = const _;
        _15 = (move _16, _25);
        _18 = (_15.0: &(i32, i32));
        _19 = (_15.1: &(i32, i32));
        _21 = <(i32, i32) as PartialEq>::eq(_18, _19) -> [return: bb3, unwind continue];
    }

    bb3: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in patterns_in_macro_generated_macros: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in patterns_in_macro_generated_macros: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}

fn match_hygiene() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _3: std::slice::Iter<'_, std::result::Result<i32, i32>>;
    let mut _5: std::option::Option<&std::result::Result<i32, i32>>;
    let mut _6: &mut std::slice::Iter<'_, std::result::Result<i32, i32>>;
    let mut _7: isize;
    let mut _9: isize;
    let mut _11: (&(i32, i32), &(i32, i32));
    let mut _12: &(i32, i32);
    let _13: (i32, i32);
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _22: (&(i32, i32), &(i32, i32));
    let mut _23: &(i32, i32);
    let _24: (i32, i32);
    let mut _27: bool;
    let mut _28: bool;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const 0_i32;
        let _2: i32;
        scope 2 {
            debug x => const 2_i32;
            let mut _4: std::slice::Iter<'_, std::result::Result<i32, i32>>;
            let mut _34: &[std::result::Result<i32, i32>; 2];
            scope 3 {
                debug iter => _4;
                let _8: &std::result::Result<i32, i32>;
                scope 4 {
                    debug result => _8;
                    let _10: i32;
                    let _21: i32;
                    scope 5 {
                        debug x => _10;
                        let _14: &(i32, i32);
                        let _15: &(i32, i32);
                        let mut _33: &(i32, i32);
                        scope 6 {
                            debug left_val => _14;
                            debug right_val => _15;
                            let _18: core::panicking::AssertKind;
                            scope 7 {
                                debug kind => _18;
                            }
                        }
                    }
                    scope 8 {
                        debug x => _21;
                        let _25: &(i32, i32);
                        let _26: &(i32, i32);
                        let mut _32: &(i32, i32);
                        scope 9 {
                            debug left_val => _25;
                            debug right_val => _26;
                            let _29: core::panicking::AssertKind;
                            scope 10 {
                                debug kind => _29;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_i32;
        _2 = const 2_i32;
        _34 = const _;
        _3 = <&[Result<i32, i32>; 2] as IntoIterator>::into_iter(_34) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = move _3;
        goto -> bb2;
    }

    bb2: {
        _6 = &mut _4;
        _5 = <std::slice::Iter<'_, Result<i32, i32>> as Iterator>::next(_6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _8 = ((_5 as Some).0: &std::result::Result<i32, i32>);
        _9 = discriminant((*_8));
        switchInt(move _9) -> [0: bb8, 1: bb7, otherwise: bb5];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _21 = (((*_8) as Err).0: i32);
        _24 = (_2, _21);
        _23 = &_24;
        _32 = const _;
        _22 = (move _23, _32);
        _25 = (_22.0: &(i32, i32));
        _26 = (_22.1: &(i32, i32));
        _28 = <(i32, i32) as PartialEq>::eq(_25, _26) -> [return: bb11, unwind continue];
    }

    bb8: {
        _10 = (((*_8) as Ok).0: i32);
        _13 = (_10, _1);
        _12 = &_13;
        _33 = const _;
        _11 = (move _12, _33);
        _14 = (_11.0: &(i32, i32));
        _15 = (_11.1: &(i32, i32));
        _17 = <(i32, i32) as PartialEq>::eq(_14, _15) -> [return: bb9, unwind continue];
    }

    bb9: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb2, otherwise: bb10];
    }

    bb10: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _18, _14, _15, move _20) -> unwind continue;
    }

    bb11: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb2, otherwise: bb12];
    }

    bb12: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _29, _25, _26, move _31) -> unwind continue;
    }
}

promoted[0] in match_hygiene: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 2_i32, const 1_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in match_hygiene: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 1_i32, const 0_i32);
        _0 = &_1;
        return;
    }
}

promoted[2] in match_hygiene: &[Result<i32, i32>; 2] = {
    let mut _0: &[std::result::Result<i32, i32>; 2];
    let mut _1: [std::result::Result<i32, i32>; 2];
    let mut _2: std::result::Result<i32, i32>;
    let mut _3: std::result::Result<i32, i32>;

    bb0: {
        _2 = Result::<i32, i32>::Ok(const 1_i32);
        _3 = Result::<i32, i32>::Err(const 1_i32);
        _1 = [move _2, move _3];
        _0 = &_1;
        return;
    }
}

fn label_hygiene() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let mut _3: (&(i32, i32), &(i32, i32));
    let mut _4: &(i32, i32);
    let _5: (i32, i32);
    let _6: &(i32, i32);
    let _7: &(i32, i32);
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let _13: ();
    let _14: ();
    let _15: ();
    let mut _16: &(i32, i32);
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _1 = f() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = g() -> [return: bb2, unwind continue];
    }

    bb2: {
        _5 = foo::f() -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = &_5;
        _16 = const _;
        _3 = (move _4, _16);
        _6 = (_3.0: &(i32, i32));
        _7 = (_3.1: &(i32, i32));
        _9 = <(i32, i32) as PartialEq>::eq(_6, _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _10, _6, _7, move _12) -> unwind continue;
    }

    bb6: {
        _13 = interpolated_pattern() -> [return: bb7, unwind continue];
    }

    bb7: {
        _14 = patterns_in_macro_generated_macros() -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = match_hygiene() -> [return: bb9, unwind continue];
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 0_i32, const 11_i32);
        _0 = &_1;
        return;
    }
}
