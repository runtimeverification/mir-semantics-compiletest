// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn type_params::f(_1: T, _2: T) -> (T, bool) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:10:39: 10:41
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:10:47: 10:49
    let mut _0: (T, bool);               // return place in scope 0 at ui/hygiene/generic_params.rs:10:57: 10:67
    let mut _3: T;                       // in scope 0 at ui/hygiene/generic_params.rs:11:14: 11:24
    let mut _4: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:11:14: 11:24
    let mut _5: bool;                    // in scope 0 at ui/hygiene/generic_params.rs:11:26: 11:34
    let mut _6: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:11:26: 11:28
    let mut _7: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:11:32: 11:34

    bb0: {
        _4 = &_1;                        // scope 0 at ui/hygiene/generic_params.rs:11:14: 11:24
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6]; // scope 0 at ui/hygiene/generic_params.rs:11:14: 11:24
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:11:17: 11:22
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 0 at ui/hygiene/generic_params.rs:11:26: 11:28
        _7 = &_2;                        // scope 0 at ui/hygiene/generic_params.rs:11:32: 11:34
        _5 = <T as PartialEq>::eq(move _6, move _7) -> [return: bb2, unwind: bb5]; // scope 0 at ui/hygiene/generic_params.rs:11:26: 11:34
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:11:26: 11:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _3, move _5);         // scope 0 at ui/hygiene/generic_params.rs:11:13: 11:35
        drop(_2) -> [return: bb3, unwind: bb7]; // scope 0 at ui/hygiene/generic_params.rs:12:9: 12:10
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/hygiene/generic_params.rs:12:9: 12:10
    }

    bb4: {
        return;                          // scope 0 at ui/hygiene/generic_params.rs:12:10: 12:10
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/hygiene/generic_params.rs:11:34: 11:35
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/hygiene/generic_params.rs:12:9: 12:10
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/hygiene/generic_params.rs:12:9: 12:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/hygiene/generic_params.rs:10:9: 12:10
    }
}

fn type_params::g(_1: T, _2: T) -> (T, T) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:17:25: 17:27
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:17:33: 17:35
    let mut _0: (T, T);                  // return place in scope 0 at ui/hygiene/generic_params.rs:17:43: 17:50
    let mut _3: T;                       // in scope 0 at ui/hygiene/generic_params.rs:18:14: 18:24
    let mut _4: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:18:14: 18:24
    let mut _5: T;                       // in scope 0 at ui/hygiene/generic_params.rs:18:26: 18:36
    let mut _6: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:18:26: 18:36

    bb0: {
        _4 = &_1;                        // scope 0 at ui/hygiene/generic_params.rs:18:14: 18:24
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6]; // scope 0 at ui/hygiene/generic_params.rs:18:14: 18:24
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:18:17: 18:22
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 0 at ui/hygiene/generic_params.rs:18:26: 18:36
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at ui/hygiene/generic_params.rs:18:26: 18:36
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:18:29: 18:34
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _3, move _5);         // scope 0 at ui/hygiene/generic_params.rs:18:13: 18:37
        drop(_2) -> [return: bb3, unwind: bb7]; // scope 0 at ui/hygiene/generic_params.rs:19:9: 19:10
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/hygiene/generic_params.rs:19:9: 19:10
    }

    bb4: {
        return;                          // scope 0 at ui/hygiene/generic_params.rs:19:10: 19:10
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/hygiene/generic_params.rs:18:36: 18:37
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/hygiene/generic_params.rs:19:9: 19:10
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/hygiene/generic_params.rs:19:9: 19:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/hygiene/generic_params.rs:17:9: 19:10
    }
}

fn type_params::h(_1: T, _2: T) -> (T, T) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:20:24: 20:26
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:20:32: 20:34
    let mut _0: (T, T);                  // return place in scope 0 at ui/hygiene/generic_params.rs:20:42: 20:49
    let mut _3: T;                       // in scope 0 at ui/hygiene/generic_params.rs:21:14: 21:24
    let mut _4: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:21:14: 21:24
    let mut _5: T;                       // in scope 0 at ui/hygiene/generic_params.rs:21:26: 21:36
    let mut _6: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:21:26: 21:36

    bb0: {
        _4 = &_1;                        // scope 0 at ui/hygiene/generic_params.rs:21:14: 21:24
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6]; // scope 0 at ui/hygiene/generic_params.rs:21:14: 21:24
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:21:17: 21:22
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 0 at ui/hygiene/generic_params.rs:21:26: 21:36
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at ui/hygiene/generic_params.rs:21:26: 21:36
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:21:29: 21:34
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _3, move _5);         // scope 0 at ui/hygiene/generic_params.rs:21:13: 21:37
        drop(_2) -> [return: bb3, unwind: bb7]; // scope 0 at ui/hygiene/generic_params.rs:22:9: 22:10
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/hygiene/generic_params.rs:22:9: 22:10
    }

    bb4: {
        return;                          // scope 0 at ui/hygiene/generic_params.rs:22:10: 22:10
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/hygiene/generic_params.rs:21:36: 21:37
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/hygiene/generic_params.rs:22:9: 22:10
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/hygiene/generic_params.rs:22:9: 22:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/hygiene/generic_params.rs:20:9: 22:10
    }
}

fn type_params::j(_1: T, _2: T) -> (T, T) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:27:25: 27:27
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:27:33: 27:35
    let mut _0: (T, T);                  // return place in scope 0 at ui/hygiene/generic_params.rs:27:43: 27:50
    let mut _3: T;                       // in scope 0 at ui/hygiene/generic_params.rs:28:14: 28:24
    let mut _4: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:28:14: 28:24
    let mut _5: T;                       // in scope 0 at ui/hygiene/generic_params.rs:28:26: 28:36
    let mut _6: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:28:26: 28:36

    bb0: {
        _4 = &_1;                        // scope 0 at ui/hygiene/generic_params.rs:28:14: 28:24
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6]; // scope 0 at ui/hygiene/generic_params.rs:28:14: 28:24
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:28:17: 28:22
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 0 at ui/hygiene/generic_params.rs:28:26: 28:36
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at ui/hygiene/generic_params.rs:28:26: 28:36
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:28:29: 28:34
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _3, move _5);         // scope 0 at ui/hygiene/generic_params.rs:28:13: 28:37
        drop(_2) -> [return: bb3, unwind: bb7]; // scope 0 at ui/hygiene/generic_params.rs:29:9: 29:10
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/hygiene/generic_params.rs:29:9: 29:10
    }

    bb4: {
        return;                          // scope 0 at ui/hygiene/generic_params.rs:29:10: 29:10
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/hygiene/generic_params.rs:28:36: 28:37
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/hygiene/generic_params.rs:29:9: 29:10
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/hygiene/generic_params.rs:29:9: 29:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/hygiene/generic_params.rs:27:9: 29:10
    }
}

fn type_params::k(_1: T, _2: T) -> (T, T) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:30:24: 30:26
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:30:32: 30:34
    let mut _0: (T, T);                  // return place in scope 0 at ui/hygiene/generic_params.rs:30:42: 30:49
    let mut _3: T;                       // in scope 0 at ui/hygiene/generic_params.rs:31:14: 31:24
    let mut _4: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:31:14: 31:24
    let mut _5: T;                       // in scope 0 at ui/hygiene/generic_params.rs:31:26: 31:36
    let mut _6: &T;                      // in scope 0 at ui/hygiene/generic_params.rs:31:26: 31:36

    bb0: {
        _4 = &_1;                        // scope 0 at ui/hygiene/generic_params.rs:31:14: 31:24
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb6]; // scope 0 at ui/hygiene/generic_params.rs:31:14: 31:24
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:31:17: 31:22
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 0 at ui/hygiene/generic_params.rs:31:26: 31:36
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at ui/hygiene/generic_params.rs:31:26: 31:36
                                         // mir::Constant
                                         // + span: ui/hygiene/generic_params.rs:31:29: 31:34
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = (move _3, move _5);         // scope 0 at ui/hygiene/generic_params.rs:31:13: 31:37
        drop(_2) -> [return: bb3, unwind: bb7]; // scope 0 at ui/hygiene/generic_params.rs:32:9: 32:10
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/hygiene/generic_params.rs:32:9: 32:10
    }

    bb4: {
        return;                          // scope 0 at ui/hygiene/generic_params.rs:32:10: 32:10
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/hygiene/generic_params.rs:31:36: 31:37
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/hygiene/generic_params.rs:32:9: 32:10
    }

    bb7 (cleanup): {
        drop(_1) -> bb8;                 // scope 0 at ui/hygiene/generic_params.rs:32:9: 32:10
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/hygiene/generic_params.rs:30:9: 32:10
    }
}

fn lifetime_params::f(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:42:38: 42:40
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:42:49: 42:51
    let mut _0: (&(), &());              // return place in scope 0 at ui/hygiene/generic_params.rs:42:64: 42:80
    let mut _3: &();                     // in scope 0 at ui/hygiene/generic_params.rs:43:14: 43:16
    let mut _4: &();                     // in scope 0 at ui/hygiene/generic_params.rs:43:18: 43:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:43:14: 43:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:43:18: 43:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:43:13: 43:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:44:10: 44:10
    }
}

fn lifetime_params::g(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:49:18: 49:20
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:49:29: 49:31
    let mut _0: (&(), &());              // return place in scope 0 at ui/hygiene/generic_params.rs:49:44: 49:60
    let mut _3: &();                     // in scope 0 at ui/hygiene/generic_params.rs:50:14: 50:16
    let mut _4: &();                     // in scope 0 at ui/hygiene/generic_params.rs:50:18: 50:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:50:14: 50:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:50:18: 50:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:50:13: 50:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:51:10: 51:10
    }
}

fn lifetime_params::h(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:52:18: 52:20
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:52:29: 52:31
    let mut _0: (&(), &());              // return place in scope 0 at ui/hygiene/generic_params.rs:52:44: 52:60
    let mut _3: &();                     // in scope 0 at ui/hygiene/generic_params.rs:53:14: 53:16
    let mut _4: &();                     // in scope 0 at ui/hygiene/generic_params.rs:53:18: 53:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:53:14: 53:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:53:18: 53:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:53:13: 53:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:54:10: 54:10
    }
}

fn lifetime_params::j(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:59:18: 59:20
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:59:29: 59:31
    let mut _0: (&(), &());              // return place in scope 0 at ui/hygiene/generic_params.rs:59:44: 59:60
    let mut _3: &();                     // in scope 0 at ui/hygiene/generic_params.rs:60:14: 60:16
    let mut _4: &();                     // in scope 0 at ui/hygiene/generic_params.rs:60:18: 60:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:60:14: 60:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:60:18: 60:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:60:13: 60:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:61:10: 61:10
    }
}

fn lifetime_params::k(_1: &(), _2: &()) -> (&(), &()) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:62:18: 62:20
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:62:29: 62:31
    let mut _0: (&(), &());              // return place in scope 0 at ui/hygiene/generic_params.rs:62:44: 62:60
    let mut _3: &();                     // in scope 0 at ui/hygiene/generic_params.rs:63:14: 63:16
    let mut _4: &();                     // in scope 0 at ui/hygiene/generic_params.rs:63:18: 63:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:63:14: 63:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:63:18: 63:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:63:13: 63:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:64:10: 64:10
    }
}

fn const_params::f(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:74:47: 74:49
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:74:61: 74:63
    let mut _0: ([(); C], [(); C]);      // return place in scope 0 at ui/hygiene/generic_params.rs:74:77: 74:96
    let mut _3: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:75:14: 75:16
    let mut _4: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:75:18: 75:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:75:14: 75:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:75:18: 75:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:75:13: 75:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:76:10: 76:10
    }
}

const_params::f::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:74:56: 74:58

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:74:56: 74:58
        return;                          // scope 0 at ui/hygiene/generic_params.rs:74:56: 74:58
    }
}

const_params::f::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:74:70: 74:71

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:74:70: 74:71
        return;                          // scope 0 at ui/hygiene/generic_params.rs:74:70: 74:71
    }
}

const_params::f::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:74:83: 74:85

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:74:83: 74:85
        return;                          // scope 0 at ui/hygiene/generic_params.rs:74:83: 74:85
    }
}

const_params::f::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:74:93: 74:94

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:74:93: 74:94
        return;                          // scope 0 at ui/hygiene/generic_params.rs:74:93: 74:94
    }
}

fn const_params::g(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:81:31: 81:33
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:81:45: 81:47
    let mut _0: ([(); C], [(); C]);      // return place in scope 0 at ui/hygiene/generic_params.rs:81:61: 81:80
    let mut _3: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:82:14: 82:16
    let mut _4: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:82:18: 82:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:82:14: 82:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:82:18: 82:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:82:13: 82:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:83:10: 83:10
    }
}

const_params::g::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:81:40: 81:42

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:81:40: 81:42
        return;                          // scope 0 at ui/hygiene/generic_params.rs:81:40: 81:42
    }
}

const_params::g::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:81:54: 81:55

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:81:54: 81:55
        return;                          // scope 0 at ui/hygiene/generic_params.rs:81:54: 81:55
    }
}

const_params::g::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:81:67: 81:68

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:81:67: 81:68
        return;                          // scope 0 at ui/hygiene/generic_params.rs:81:67: 81:68
    }
}

const_params::g::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:81:76: 81:78

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:81:76: 81:78
        return;                          // scope 0 at ui/hygiene/generic_params.rs:81:76: 81:78
    }
}

fn const_params::h(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:84:30: 84:32
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:84:44: 84:46
    let mut _0: ([(); C], [(); C]);      // return place in scope 0 at ui/hygiene/generic_params.rs:84:60: 84:79
    let mut _3: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:85:14: 85:16
    let mut _4: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:85:18: 85:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:85:14: 85:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:85:18: 85:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:85:13: 85:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:86:10: 86:10
    }
}

const_params::h::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:84:39: 84:41

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:84:39: 84:41
        return;                          // scope 0 at ui/hygiene/generic_params.rs:84:39: 84:41
    }
}

const_params::h::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:84:53: 84:54

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:84:53: 84:54
        return;                          // scope 0 at ui/hygiene/generic_params.rs:84:53: 84:54
    }
}

const_params::h::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:84:66: 84:67

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:84:66: 84:67
        return;                          // scope 0 at ui/hygiene/generic_params.rs:84:66: 84:67
    }
}

const_params::h::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:84:75: 84:77

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:84:75: 84:77
        return;                          // scope 0 at ui/hygiene/generic_params.rs:84:75: 84:77
    }
}

fn const_params::j(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:91:31: 91:33
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:91:45: 91:47
    let mut _0: ([(); C], [(); C]);      // return place in scope 0 at ui/hygiene/generic_params.rs:91:61: 91:80
    let mut _3: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:92:14: 92:16
    let mut _4: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:92:18: 92:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:92:14: 92:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:92:18: 92:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:92:13: 92:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:93:10: 93:10
    }
}

const_params::j::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:91:40: 91:42

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:91:40: 91:42
        return;                          // scope 0 at ui/hygiene/generic_params.rs:91:40: 91:42
    }
}

const_params::j::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:91:54: 91:55

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:91:54: 91:55
        return;                          // scope 0 at ui/hygiene/generic_params.rs:91:54: 91:55
    }
}

const_params::j::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:91:67: 91:68

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:91:67: 91:68
        return;                          // scope 0 at ui/hygiene/generic_params.rs:91:67: 91:68
    }
}

const_params::j::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:91:76: 91:78

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:91:76: 91:78
        return;                          // scope 0 at ui/hygiene/generic_params.rs:91:76: 91:78
    }
}

fn const_params::k(_1: [(); C], _2: [(); C]) -> ([(); C], [(); C]) {
    debug t1 => _1;                      // in scope 0 at ui/hygiene/generic_params.rs:94:30: 94:32
    debug t2 => _2;                      // in scope 0 at ui/hygiene/generic_params.rs:94:44: 94:46
    let mut _0: ([(); C], [(); C]);      // return place in scope 0 at ui/hygiene/generic_params.rs:94:60: 94:79
    let mut _3: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:95:14: 95:16
    let mut _4: [(); C];                 // in scope 0 at ui/hygiene/generic_params.rs:95:18: 95:20

    bb0: {
        _3 = _1;                         // scope 0 at ui/hygiene/generic_params.rs:95:14: 95:16
        _4 = _2;                         // scope 0 at ui/hygiene/generic_params.rs:95:18: 95:20
        _0 = (move _3, move _4);         // scope 0 at ui/hygiene/generic_params.rs:95:13: 95:21
        return;                          // scope 0 at ui/hygiene/generic_params.rs:96:10: 96:10
    }
}

const_params::k::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:94:39: 94:41

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:94:39: 94:41
        return;                          // scope 0 at ui/hygiene/generic_params.rs:94:39: 94:41
    }
}

const_params::k::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:94:53: 94:54

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:94:53: 94:54
        return;                          // scope 0 at ui/hygiene/generic_params.rs:94:53: 94:54
    }
}

const_params::k::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:94:66: 94:67

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:94:66: 94:67
        return;                          // scope 0 at ui/hygiene/generic_params.rs:94:66: 94:67
    }
}

const_params::k::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/hygiene/generic_params.rs:94:75: 94:77

    bb0: {
        _0 = const C;                    // scope 0 at ui/hygiene/generic_params.rs:94:75: 94:77
        return;                          // scope 0 at ui/hygiene/generic_params.rs:94:75: 94:77
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/generic_params.rs:104:11: 104:11

    bb0: {
        return;                          // scope 0 at ui/hygiene/generic_params.rs:104:13: 104:13
    }
}
