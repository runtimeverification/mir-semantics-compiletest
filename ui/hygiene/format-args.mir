// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static arg0: () = {
    let mut _0: ();

    bb0: {
        _0 = ();
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::fmt::Arguments<'_>;
    let mut _2: &[&str];
    let mut _3: &[core::fmt::rt::Argument<'_>];
    let _4: &[core::fmt::rt::Argument<'_>; 1];
    let _5: [core::fmt::rt::Argument<'_>; 1];
    let mut _6: core::fmt::rt::Argument<'_>;
    let _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let mut _13: &i32;
    let mut _14: &[&str; 2];
    let mut _15: &i32;
    let mut _16: &[&str; 1];

    bb0: {
        _16 = const _;
        _2 = _16 as &[&str] (Pointer(Unsize));
        _15 = const _;
        _6 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_15) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = [move _6];
        _4 = &_5;
        _3 = _4 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _1 = Arguments::<'_>::new_v1(move _2, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _14 = const _;
        _8 = _14 as &[&str] (Pointer(Unsize));
        _13 = const _;
        _12 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_13) -> [return: bb3, unwind continue];
    }

    bb3: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "0 ", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "0 "];
        _0 = &_1;
        return;
    }
}

static arg1: () = {
    let mut _0: ();

    bb0: {
        _0 = ();
        return;
    }
}
