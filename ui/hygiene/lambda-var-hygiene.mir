// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn takes_x(_1: isize) -> () {
    debug _x => _1;                      // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:7:12: 7:14
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/lambda-var-hygiene.rs:7:24: 7:24
    let mut _2: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: isize;                       // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:20: 4:41
    let mut _5: &[closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26]; // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:35
    let _6: [closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26]; // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:35
    let mut _7: &isize;                  // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:35
    let mut _8: (i32,);                  // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:39
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _10;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _7 = &_1;                        // scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:35
        _6 = [closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26] { _x: move _7 }; // scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:35
                                         // closure
                                         // + def_id: DefId(0:6 ~ lambda_var_hygiene[c83b]::takes_x::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((i32,)) -> isize,
                                         //     (&isize,),
                                         // ]
        _5 = &_6;                        // scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:35
        _8 = const (9_i32,);             // scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:39
        _4 = <[closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26] as Fn<(i32,)>>::call(move _5, move _8) -> bb1; // scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:39
                                         // mir::Constant
                                         // + span: ui/hygiene/lambda-var-hygiene.rs:4:21: 4:35
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26], (i32,)) -> <[closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26] as FnOnce<(i32,)>>::Output {<[closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26] as Fn<(i32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(takes_x, [], Some(promoted[0])) }
        _9 = _24;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_2.0: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_2.1: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 8_isize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _16 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/hygiene/lambda-var-hygiene.rs:9:2: 9:2
    }
}

promoted[0] in takes_x: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:8:31: 8:32

    bb0: {
        _1 = const 8_isize;              // scope 0 at ui/hygiene/lambda-var-hygiene.rs:8:31: 8:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn takes_x::{closure#0}(_1: &[closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26], _2: i32) -> isize {
    debug _x => _2;                      // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:23: 4:25
    debug _x => (*((*_1).0: &isize));    // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:7:12: 7:14
    let mut _0: isize;                   // return place in scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:27: 4:27
    let mut _3: &isize;                  // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:21: 4:35

    bb0: {
        _3 = deref_copy ((*_1).0: &isize); // scope 0 at ui/hygiene/lambda-var-hygiene.rs:8:27: 8:29
        _0 = (*_3);                      // scope 0 at ui/hygiene/lambda-var-hygiene.rs:8:27: 8:29
        return;                          // scope 0 at ui/hygiene/lambda-var-hygiene.rs:4:35: 4:35
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/lambda-var-hygiene.rs:10:11: 10:11
    let _1: ();                          // in scope 0 at ui/hygiene/lambda-var-hygiene.rs:11:5: 11:15

    bb0: {
        _1 = takes_x(const 8_isize) -> bb1; // scope 0 at ui/hygiene/lambda-var-hygiene.rs:11:5: 11:15
                                         // mir::Constant
                                         // + span: ui/hygiene/lambda-var-hygiene.rs:11:5: 11:12
                                         // + literal: Const { ty: fn(isize) {takes_x}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/hygiene/lambda-var-hygiene.rs:12:2: 12:2
    }
}
