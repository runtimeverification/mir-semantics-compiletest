// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn takes_x(_1: isize) -> () {
    debug _x => _1;
    let mut _0: ();
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: isize;
    let mut _5: &[closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26];
    let _6: [closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26];
    let mut _7: &isize;
    let mut _8: (i32,);
    let _9: &isize;
    let _10: &isize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: isize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &isize;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }

    bb0: {
        _7 = &_1;
        _6 = [closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26] { _x: move _7 };
        _5 = &_6;
        _8 = (const 9_i32,);
        _4 = <[closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26] as Fn<(i32,)>>::call(move _5, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _18 = const _;
        _2 = (move _3, _18);
        _9 = (_2.0: &isize);
        _10 = (_2.1: &isize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<isize, isize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in takes_x: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 8_isize;
        _0 = &_1;
        return;
    }
}

fn takes_x::{closure#0}(_1: &[closure@ui/hygiene/lambda-var-hygiene.rs:4:22: 4:26], _2: i32) -> isize {
    debug _x => _2;
    debug _x => (*((*_1).0: &isize));
    let mut _0: isize;
    let mut _3: &isize;

    bb0: {
        _3 = deref_copy ((*_1).0: &isize);
        _0 = (*_3);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = takes_x(const 8_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
