// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _3: isize;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: std::ops::Range<i32>;
    let mut _17: std::ops::Range<i32>;
    let mut _19: std::option::Option<i32>;
    let mut _20: &mut std::ops::Range<i32>;
    let mut _21: isize;
    let mut _22: isize;
    let mut _23: (&isize, &isize);
    let mut _24: &isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _35: std::ops::Range<i32>;
    let mut _36: std::ops::Range<i32>;
    let mut _38: std::option::Option<i32>;
    let mut _39: &mut std::ops::Range<i32>;
    let mut _40: isize;
    let mut _41: i32;
    let mut _42: isize;
    let mut _43: (&isize, &isize);
    let mut _44: &isize;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: isize;
    let mut _50: isize;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: std::ops::Range<i32>;
    let mut _56: std::ops::Range<i32>;
    let mut _58: std::option::Option<i32>;
    let mut _59: &mut std::ops::Range<i32>;
    let mut _60: isize;
    let mut _61: std::ops::Range<i32>;
    let mut _62: std::ops::Range<i32>;
    let mut _64: std::option::Option<i32>;
    let mut _65: &mut std::ops::Range<i32>;
    let mut _66: isize;
    let mut _67: isize;
    let mut _68: (&isize, &isize);
    let mut _69: &isize;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: isize;
    let mut _75: isize;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug i => _1;
        let _2: isize;
        scope 2 {
            debug j => _2;
            let _6: &isize;
            let _7: &isize;
            let _15: isize;
            let mut _18: std::ops::Range<i32>;
            let mut _82: &isize;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug k => _15;
                let _25: &isize;
                let _26: &isize;
                let _34: isize;
                let mut _37: std::ops::Range<i32>;
                let mut _81: &isize;
                scope 7 {
                    debug left_val => _25;
                    debug right_val => _26;
                    let _31: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _31;
                    }
                }
                scope 9 {
                    debug l => _34;
                    let _45: &isize;
                    let _46: &isize;
                    let _54: isize;
                    let mut _57: std::ops::Range<i32>;
                    let mut _80: &isize;
                    scope 11 {
                        debug left_val => _45;
                        debug right_val => _46;
                        let _51: core::panicking::AssertKind;
                        scope 12 {
                            debug kind => _51;
                        }
                    }
                    scope 13 {
                        debug n => _54;
                        let _70: &isize;
                        let _71: &isize;
                        let mut _79: &isize;
                        scope 16 {
                            debug left_val => _70;
                            debug right_val => _71;
                            let _76: core::panicking::AssertKind;
                            scope 17 {
                                debug kind => _76;
                            }
                        }
                    }
                    scope 14 {
                        debug iter => _57;
                        let mut _63: std::ops::Range<i32>;
                        scope 15 {
                            debug iter => _63;
                        }
                    }
                }
                scope 10 {
                    debug iter => _37;
                }
            }
            scope 6 {
                debug iter => _18;
            }
        }
    }

    bb0: {
        _1 = const 0_isize;
        _3 = _1;
        _2 = Add(move _3, const 1_isize);
        _5 = &_2;
        _82 = const _;
        _4 = (move _5, _82);
        _6 = (_4.0: &isize);
        _7 = (_4.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _17 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 };
        _16 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = move _16;
        _20 = &mut _18;
        _19 = <std::ops::Range<i32> as Iterator>::next(_20) -> [return: bb5, unwind continue];
    }

    bb5: {
        _21 = discriminant(_19);
        switchInt(move _21) -> [0: bb6, 1: bb6, otherwise: bb1];
    }

    bb6: {
        _22 = _1;
        _15 = Add(move _22, const 1_isize);
        _24 = &_15;
        _81 = const _;
        _23 = (move _24, _81);
        _25 = (_23.0: &isize);
        _26 = (_23.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb8: {
        _36 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 };
        _35 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _36) -> [return: bb9, unwind continue];
    }

    bb9: {
        _37 = move _35;
        goto -> bb10;
    }

    bb10: {
        _39 = &mut _37;
        _38 = <std::ops::Range<i32> as Iterator>::next(_39) -> [return: bb11, unwind continue];
    }

    bb11: {
        _40 = discriminant(_38);
        switchInt(move _40) -> [0: bb14, 1: bb12, otherwise: bb1];
    }

    bb12: {
        _41 = Add(const 1_i32, const 1_i32);
        switchInt(move _41) -> [2: bb14, otherwise: bb13];
    }

    bb13: {
        _1 = Add(_1, const 1_isize);
        goto -> bb10;
    }

    bb14: {
        _42 = _1;
        _34 = Add(move _42, const 1_isize);
        _44 = &_34;
        _80 = const _;
        _43 = (move _44, _80);
        _45 = (_43.0: &isize);
        _46 = (_43.1: &isize);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<isize, isize>(move _51, _45, _46, move _53) -> unwind continue;
    }

    bb16: {
        _56 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 };
        _55 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _56) -> [return: bb17, unwind continue];
    }

    bb17: {
        _57 = move _55;
        goto -> bb18;
    }

    bb18: {
        _59 = &mut _57;
        _58 = <std::ops::Range<i32> as Iterator>::next(_59) -> [return: bb19, unwind continue];
    }

    bb19: {
        _60 = discriminant(_58);
        switchInt(move _60) -> [0: bb21, 1: bb20, otherwise: bb1];
    }

    bb20: {
        _62 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 };
        _61 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _62) -> [return: bb22, unwind continue];
    }

    bb21: {
        _67 = _1;
        _54 = Add(move _67, const 1_isize);
        _69 = &_54;
        _79 = const _;
        _68 = (move _69, _79);
        _70 = (_68.0: &isize);
        _71 = (_68.1: &isize);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb26, otherwise: bb25];
    }

    bb22: {
        _63 = move _61;
        _65 = &mut _63;
        _64 = <std::ops::Range<i32> as Iterator>::next(_65) -> [return: bb23, unwind continue];
    }

    bb23: {
        _66 = discriminant(_64);
        switchInt(move _66) -> [0: bb24, 1: bb18, otherwise: bb1];
    }

    bb24: {
        _1 = Add(_1, const 1_isize);
        goto -> bb18;
    }

    bb25: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<isize, isize>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb26: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}
