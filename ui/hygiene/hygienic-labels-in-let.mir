// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:40:15: 40:15
    let mut _1: isize;                   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:41:9: 41:14
    let mut _3: (isize, bool);           // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:49:9: 49:14
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
    let mut _23: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
    let mut _25: std::option::Option<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
    let mut _26: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
    let mut _27: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
    let mut _28: isize;                  // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:54:9: 58:10
    let mut _29: isize;                  // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:59:9: 59:10
    let mut _30: (isize, bool);          // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:59:9: 59:14
    let mut _31: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _32: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _33: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
    let mut _50: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
    let mut _52: std::option::Option<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
    let mut _53: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
    let mut _54: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
    let mut _55: isize;                  // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:64:9: 68:10
    let mut _56: isize;                  // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:69:9: 69:10
    let mut _57: (isize, bool);          // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:69:9: 69:14
    let mut _58: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _59: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _60: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _63: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _65: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _66: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _68: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _69: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _70: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _71: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _72: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _73: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _76: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
    let mut _77: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
    let mut _79: std::option::Option<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
    let mut _80: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
    let mut _81: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
    let mut _82: isize;                  // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:74:9: 78:10
    let mut _83: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
    let mut _84: std::ops::Range<i32>;   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
    let mut _86: std::option::Option<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
    let mut _87: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
    let mut _88: &mut std::ops::Range<i32>; // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
    let mut _89: isize;                  // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:34:9: 36:10
    let mut _90: (isize, bool);          // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:77:13: 77:19
    let mut _91: isize;                  // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:79:9: 79:10
    let mut _92: (isize, bool);          // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:79:9: 79:14
    let mut _93: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _94: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _95: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _98: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _99: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _100: isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _101: isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _103: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _104: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _105: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _106: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _107: &isize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _108: &isize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/hygiene/hygienic-labels-in-let.rs:41:9: 41:14
        let _2: isize;                   // in scope 1 at ui/hygiene/hygienic-labels-in-let.rs:43:9: 43:10
        scope 2 {
            debug j => _2;               // in scope 2 at ui/hygiene/hygienic-labels-in-let.rs:43:9: 43:10
            let _7: &isize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _8: &isize;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _21: isize;              // in scope 2 at ui/hygiene/hygienic-labels-in-let.rs:53:9: 53:10
            let mut _24: std::ops::Range<i32>; // in scope 2 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
            let mut _113: &isize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _7;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _8;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _13: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _13;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug k => _21;          // in scope 5 at ui/hygiene/hygienic-labels-in-let.rs:53:9: 53:10
                let _34: &isize;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _35: &isize;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _48: isize;          // in scope 5 at ui/hygiene/hygienic-labels-in-let.rs:63:9: 63:10
                let mut _51: std::ops::Range<i32>; // in scope 5 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
                let mut _112: &isize;    // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 7 {
                    debug left_val => _34; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _35; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _40: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 8 {
                        debug kind => _40; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 9 {
                    debug l => _48;      // in scope 9 at ui/hygiene/hygienic-labels-in-let.rs:63:9: 63:10
                    let _61: &isize;     // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _62: &isize;     // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _75: isize;      // in scope 9 at ui/hygiene/hygienic-labels-in-let.rs:73:9: 73:10
                    let mut _78: std::ops::Range<i32>; // in scope 9 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
                    let mut _111: &isize; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 11 {
                        debug left_val => _61; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _62; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _67: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 12 {
                            debug kind => _67; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 13 {
                        debug n => _75;  // in scope 13 at ui/hygiene/hygienic-labels-in-let.rs:73:9: 73:10
                        let _96: &isize; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _97: &isize; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _110: &isize; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 16 {
                            debug left_val => _96; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _97; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _102: core::panicking::AssertKind; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 17 {
                                debug kind => _102; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                    scope 14 {
                        debug iter => _78; // in scope 14 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
                        let mut _85: std::ops::Range<i32>; // in scope 14 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
                        scope 15 {
                            debug iter => _85; // in scope 15 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
                        }
                    }
                }
                scope 10 {
                    debug iter => _51;   // in scope 10 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
                }
            }
            scope 6 {
                debug iter => _24;       // in scope 6 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
            }
        }
    }

    bb0: {
        _1 = const 0_isize;              // scope 0 at ui/hygiene/hygienic-labels-in-let.rs:41:17: 41:18
        _3 = const (1_isize, false);     // scope 1 at ui/hygiene/hygienic-labels-in-let.rs:49:9: 49:14
        _2 = move (_3.0: isize);         // scope 1 at ui/hygiene/hygienic-labels-in-let.rs:49:9: 49:14
        _5 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _113 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[3])) }
        _6 = _113;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &isize);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 1_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<isize, isize>(move _15, move _16, move _18, move _20); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _23 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 }; // scope 2 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
        _22 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _23) -> bb3; // scope 2 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = move _22;                  // scope 2 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
        _27 = &mut _24;                  // scope 6 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
        _26 = &mut (*_27);               // scope 6 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
        _25 = <std::ops::Range<i32> as Iterator>::next(move _26) -> bb4; // scope 6 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _28 = discriminant(_25);         // scope 6 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
        switchInt(move _28) -> [0: bb6, 1: bb6, otherwise: bb5]; // scope 6 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
    }

    bb5: {
        unreachable;                     // scope 6 at ui/hygiene/hygienic-labels-in-let.rs:54:22: 54:26
    }

    bb6: {
        _29 = _1;                        // scope 2 at ui/hygiene/hygienic-labels-in-let.rs:59:9: 59:10
        _30 = CheckedAdd(_29, const 1_isize); // scope 2 at ui/hygiene/hygienic-labels-in-let.rs:59:9: 59:14
        assert(!move (_30.1: bool), "attempt to compute `{} + {}`, which would overflow", move _29, const 1_isize) -> bb7; // scope 2 at ui/hygiene/hygienic-labels-in-let.rs:59:9: 59:14
    }

    bb7: {
        _21 = move (_30.0: isize);       // scope 2 at ui/hygiene/hygienic-labels-in-let.rs:59:9: 59:14
        _32 = &_21;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _112 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[2])) }
        _33 = _112;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _31 = (move _32, move _33);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_31.0: &isize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_31.1: &isize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = (*_34);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = const 1_isize;             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = Eq(move _38, move _39);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _36 = Not(move _37);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb9, otherwise: bb8]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _40 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<isize, isize>(move _42, move _43, move _45, move _47); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb9: {
        _50 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 }; // scope 5 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
        _49 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _50) -> bb10; // scope 5 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb10: {
        _51 = move _49;                  // scope 5 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
        _54 = &mut _51;                  // scope 10 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
        _53 = &mut (*_54);               // scope 10 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
        _52 = <std::ops::Range<i32> as Iterator>::next(move _53) -> bb11; // scope 10 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb11: {
        _55 = discriminant(_52);         // scope 10 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
        switchInt(move _55) -> [0: bb14, 1: bb12, otherwise: bb13]; // scope 10 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
    }

    bb12: {
        goto -> bb14;                    // scope 10 at no-location
    }

    bb13: {
        unreachable;                     // scope 10 at ui/hygiene/hygienic-labels-in-let.rs:64:22: 64:26
    }

    bb14: {
        _56 = _1;                        // scope 5 at ui/hygiene/hygienic-labels-in-let.rs:69:9: 69:10
        _57 = CheckedAdd(_56, const 1_isize); // scope 5 at ui/hygiene/hygienic-labels-in-let.rs:69:9: 69:14
        assert(!move (_57.1: bool), "attempt to compute `{} + {}`, which would overflow", move _56, const 1_isize) -> bb15; // scope 5 at ui/hygiene/hygienic-labels-in-let.rs:69:9: 69:14
    }

    bb15: {
        _48 = move (_57.0: isize);       // scope 5 at ui/hygiene/hygienic-labels-in-let.rs:69:9: 69:14
        _59 = &_48;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _111 = const _;                  // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _60 = _111;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _58 = (move _59, move _60);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _61 = (_58.0: &isize);           // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _62 = (_58.1: &isize);           // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _65 = (*_61);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _66 = const 1_isize;             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _64 = Eq(move _65, move _66);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _63 = Not(move _64);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _63) -> [0: bb17, otherwise: bb16]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _67 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = _61;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _71;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _73 = _62;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = _73;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _68 = core::panicking::assert_failed::<isize, isize>(move _69, move _70, move _72, move _74); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb17: {
        _77 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 }; // scope 9 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
        _76 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _77) -> bb18; // scope 9 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb18: {
        _78 = move _76;                  // scope 9 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
        goto -> bb19;                    // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:74:9: 78:10
    }

    bb19: {
        _81 = &mut _78;                  // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
        _80 = &mut (*_81);               // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
        _79 = <std::ops::Range<i32> as Iterator>::next(move _80) -> bb20; // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb20: {
        _82 = discriminant(_79);         // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
        switchInt(move _82) -> [0: bb23, 1: bb21, otherwise: bb22]; // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
    }

    bb21: {
        _84 = std::ops::Range::<i32> { start: const 0_i32, end: const 1_i32 }; // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
        _83 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _84) -> bb24; // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb22: {
        unreachable;                     // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:74:22: 74:26
    }

    bb23: {
        _91 = _1;                        // scope 9 at ui/hygiene/hygienic-labels-in-let.rs:79:9: 79:10
        _92 = CheckedAdd(_91, const 1_isize); // scope 9 at ui/hygiene/hygienic-labels-in-let.rs:79:9: 79:14
        assert(!move (_92.1: bool), "attempt to compute `{} + {}`, which would overflow", move _91, const 1_isize) -> bb29; // scope 9 at ui/hygiene/hygienic-labels-in-let.rs:79:9: 79:14
    }

    bb24: {
        _85 = move _83;                  // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
        _88 = &mut _85;                  // scope 15 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
        _87 = &mut (*_88);               // scope 15 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
        _86 = <std::ops::Range<i32> as Iterator>::next(move _87) -> bb25; // scope 15 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
                                         // mir::Constant
                                         // + span: ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb25: {
        _89 = discriminant(_86);         // scope 15 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
        switchInt(move _89) -> [0: bb27, 1: bb19, otherwise: bb26]; // scope 15 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
    }

    bb26: {
        unreachable;                     // scope 15 at ui/hygiene/hygienic-labels-in-let.rs:34:22: 34:26
    }

    bb27: {
        _90 = CheckedAdd(_1, const 1_isize); // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:77:13: 77:19
        assert(!move (_90.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_isize) -> bb28; // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:77:13: 77:19
    }

    bb28: {
        _1 = move (_90.0: isize);        // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:77:13: 77:19
        goto -> bb19;                    // scope 14 at ui/hygiene/hygienic-labels-in-let.rs:74:9: 78:10
    }

    bb29: {
        _75 = move (_92.0: isize);       // scope 9 at ui/hygiene/hygienic-labels-in-let.rs:79:9: 79:14
        _94 = &_75;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _110 = const _;                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _95 = _110;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _93 = (move _94, move _95);      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _96 = (_93.0: &isize);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _97 = (_93.1: &isize);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _100 = (*_96);                   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _101 = const 1_isize;            // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _99 = Eq(move _100, move _101);  // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _98 = Not(move _99);             // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _98) -> [0: bb31, otherwise: bb30]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb30: {
        _102 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _104 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _106 = _96;                      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _105 = _106;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _108 = _97;                      // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _107 = _108;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _109 = Option::<Arguments<'_>>::None; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _103 = core::panicking::assert_failed::<isize, isize>(move _104, move _105, move _107, move _109); // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb31: {
        return;                          // scope 0 at ui/hygiene/hygienic-labels-in-let.rs:82:2: 82:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:81:19: 81:20

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/hygiene/hygienic-labels-in-let.rs:81:19: 81:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:71:19: 71:20

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/hygiene/hygienic-labels-in-let.rs:71:19: 71:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:61:19: 61:20

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/hygiene/hygienic-labels-in-let.rs:61:19: 61:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/hygiene/hygienic-labels-in-let.rs:51:19: 51:20

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/hygiene/hygienic-labels-in-let.rs:51:19: 51:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
