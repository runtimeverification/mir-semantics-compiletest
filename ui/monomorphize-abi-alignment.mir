// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/monomorphize-abi-alignment.rs:15:16: 15:21>::clone(_1: &S<T>) -> S<T> {
    debug self => _1;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:15:16: 15:21
    let mut _0: S<T>;                    // return place in scope 0 at ui/monomorphize-abi-alignment.rs:15:16: 15:21
    let mut _2: u8;                      // in scope 0 at ui/monomorphize-abi-alignment.rs:16:15: 16:19
    let mut _3: &u8;                     // in scope 0 at ui/monomorphize-abi-alignment.rs:16:15: 16:19
    let _4: &u8;                         // in scope 0 at ui/monomorphize-abi-alignment.rs:16:15: 16:19
    let mut _5: T;                       // in scope 0 at ui/monomorphize-abi-alignment.rs:16:21: 16:24
    let mut _6: &T;                      // in scope 0 at ui/monomorphize-abi-alignment.rs:16:21: 16:24
    let _7: &T;                          // in scope 0 at ui/monomorphize-abi-alignment.rs:16:21: 16:24

    bb0: {
        _4 = &((*_1).0: u8);             // scope 0 at ui/monomorphize-abi-alignment.rs:16:15: 16:19
        _3 = _4;                         // scope 0 at ui/monomorphize-abi-alignment.rs:16:15: 16:19
        _2 = (*_3);                      // scope 0 at ui/monomorphize-abi-alignment.rs:16:15: 16:19
        _7 = &((*_1).1: T);              // scope 0 at ui/monomorphize-abi-alignment.rs:16:21: 16:24
        _6 = _7;                         // scope 0 at ui/monomorphize-abi-alignment.rs:16:21: 16:24
        _5 = <T as Clone>::clone(move _6) -> bb1; // scope 0 at ui/monomorphize-abi-alignment.rs:16:21: 16:24
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:16:21: 16:24
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = S::<T> { i: move _2, t: move _5 }; // scope 0 at ui/monomorphize-abi-alignment.rs:15:16: 15:21
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:15:21: 15:21
    }
}

fn <impl at ui/monomorphize-abi-alignment.rs:18:1: 18:13>::unwrap(_1: S<T>) -> T {
    debug self => _1;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:19:15: 19:19
    let mut _0: T;                       // return place in scope 0 at ui/monomorphize-abi-alignment.rs:19:24: 19:25

    bb0: {
        _0 = move (_1.1: T);             // scope 0 at ui/monomorphize-abi-alignment.rs:20:9: 20:15
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:21:6: 21:6
    }
}

fn <impl at ui/monomorphize-abi-alignment.rs:24:16: 24:21>::clone(_1: &A) -> A {
    debug self => _1;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:24:16: 24:21
    let mut _0: A;                       // return place in scope 0 at ui/monomorphize-abi-alignment.rs:24:16: 24:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/monomorphize-abi-alignment.rs:24:16: 24:21
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:24:21: 24:21
    }
}

fn <impl at ui/monomorphize-abi-alignment.rs:24:23: 24:32>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:24:23: 24:32
    debug other => _2;                   // in scope 0 at ui/monomorphize-abi-alignment.rs:24:23: 24:32
    let mut _0: bool;                    // return place in scope 0 at ui/monomorphize-abi-alignment.rs:24:23: 24:32
    let mut _3: &(u32, u32);             // in scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
    let mut _4: &(u32, u32);             // in scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20

    bb0: {
        _3 = &((*_1).0: (u32, u32));     // scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
        _4 = &((*_2).0: (u32, u32));     // scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
        _0 = <(u32, u32) as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:25:10: 25:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (u32, u32), &'b (u32, u32)) -> bool {<(u32, u32) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:24:32: 24:32
    }
}

fn <impl at ui/monomorphize-abi-alignment.rs:24:34: 24:39>::fmt(_1: &A, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
    debug f => _2;                       // in scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
    let mut _4: &str;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
    let _5: &str;                        // in scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
    let mut _7: &&(u32, u32);            // in scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
    let _8: &&(u32, u32);                // in scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
    let _9: &(u32, u32);                 // in scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
        _5 = const "A";                  // scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:24:34: 24:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
        _9 = &((*_1).0: (u32, u32));     // scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
        _8 = &_9;                        // scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
        _7 = _8;                         // scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/monomorphize-abi-alignment.rs:25:10: 25:20
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/monomorphize-abi-alignment.rs:24:34: 24:39
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:24:34: 24:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:24:39: 24:39
    }
}

fn <impl at ui/monomorphize-abi-alignment.rs:27:16: 27:21>::clone(_1: &B) -> B {
    debug self => _1;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:27:16: 27:21
    let mut _0: B;                       // return place in scope 0 at ui/monomorphize-abi-alignment.rs:27:16: 27:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/monomorphize-abi-alignment.rs:27:16: 27:21
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:27:21: 27:21
    }
}

fn <impl at ui/monomorphize-abi-alignment.rs:27:23: 27:32>::eq(_1: &B, _2: &B) -> bool {
    debug self => _1;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:27:23: 27:32
    debug other => _2;                   // in scope 0 at ui/monomorphize-abi-alignment.rs:27:23: 27:32
    let mut _0: bool;                    // return place in scope 0 at ui/monomorphize-abi-alignment.rs:27:23: 27:32
    let mut _3: u64;                     // in scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
    let mut _4: u64;                     // in scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13

    bb0: {
        _3 = ((*_1).0: u64);             // scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
        _4 = ((*_2).0: u64);             // scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
        _0 = Eq(move _3, move _4);       // scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:27:32: 27:32
    }
}

fn <impl at ui/monomorphize-abi-alignment.rs:27:34: 27:39>::fmt(_1: &B, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
    debug f => _2;                       // in scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
    let mut _4: &str;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
    let _5: &str;                        // in scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
    let mut _7: &&u64;                   // in scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
    let _8: &&u64;                       // in scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
    let _9: &u64;                        // in scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
        _5 = const "B";                  // scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:27:34: 27:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
        _9 = &((*_1).0: u64);            // scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
        _8 = &_9;                        // scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
        _7 = _8;                         // scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/monomorphize-abi-alignment.rs:28:10: 28:13
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/monomorphize-abi-alignment.rs:27:34: 27:39
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:27:34: 27:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:27:39: 27:39
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/monomorphize-abi-alignment.rs:30:15: 30:15
    let mut _1: (&A, &A);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &A;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: A;                           // in scope 0 at ui/monomorphize-abi-alignment.rs:33:16: 33:27
    let mut _4: S<A>;                    // in scope 0 at ui/monomorphize-abi-alignment.rs:33:16: 33:18
    let mut _5: &S<A>;                   // in scope 0 at ui/monomorphize-abi-alignment.rs:33:16: 33:18
    let mut _6: &A;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: &A;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _8: &A;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: &A;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: &A;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &A;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &A;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &A;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &A;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _21: (&B, &B);               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: B;                          // in scope 0 at ui/monomorphize-abi-alignment.rs:34:16: 34:27
    let mut _24: S<B>;                   // in scope 0 at ui/monomorphize-abi-alignment.rs:34:16: 34:18
    let mut _25: &S<B>;                  // in scope 0 at ui/monomorphize-abi-alignment.rs:34:16: 34:18
    let mut _26: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _27: &B;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _28: &B;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &B;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &B;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: &B;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _42: &A;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _7;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _8;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _13: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _27;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _28;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _33: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _33;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = const {alloc1: &S<A>};      // scope 0 at ui/monomorphize-abi-alignment.rs:33:16: 33:18
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:33:16: 33:18
                                         // + literal: Const { ty: &S<A>, val: Value(Scalar(alloc1)) }
        _4 = (*_5);                      // scope 0 at ui/monomorphize-abi-alignment.rs:33:16: 33:18
        _3 = S::<A>::unwrap(move _4) -> bb1; // scope 0 at ui/monomorphize-abi-alignment.rs:33:16: 33:27
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:33:19: 33:25
                                         // + literal: Const { ty: fn(S<A>) -> A {S::<A>::unwrap}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &A, val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _42;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_1.0: &A);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_1.1: &A);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = _8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = <A as PartialEq>::eq(move _11, move _12) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b A) -> bool {<A as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = Not(move _10);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<A, A>(move _15, move _16, move _18, move _20); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a A, &'b A, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<A, A>}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = const {alloc2: &S<B>};     // scope 0 at ui/monomorphize-abi-alignment.rs:34:16: 34:18
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:34:16: 34:18
                                         // + literal: Const { ty: &S<B>, val: Value(Scalar(alloc2)) }
        _24 = (*_25);                    // scope 0 at ui/monomorphize-abi-alignment.rs:34:16: 34:18
        _23 = S::<B>::unwrap(move _24) -> bb5; // scope 0 at ui/monomorphize-abi-alignment.rs:34:16: 34:27
                                         // mir::Constant
                                         // + span: ui/monomorphize-abi-alignment.rs:34:19: 34:25
                                         // + literal: Const { ty: fn(S<B>) -> B {S::<B>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = &_23;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _41 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &B, val: Unevaluated(main, [], Some(promoted[0])) }
        _26 = _41;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _26);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_21.0: &B);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_21.1: &B);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = _28;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = <B as PartialEq>::eq(move _31, move _32) -> bb6; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a B, &'b B) -> bool {<B as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = Not(move _30);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _33 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<B, B>(move _35, move _36, move _38, move _40); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a B, &'b B, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<B, B>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:35:2: 35:2
    }
}

alloc2 (static: Cb, size: 16, align: 8) {
    69 7a 00 00 00 00 00 00 00 __ __ __ __ __ __ __ │ iz.......░░░░░░░
}

alloc1 (static: Ca, size: 12, align: 4) {
    0d 00 00 00 68 00 00 00 00 __ __ __             │ ....h....░░░
}

promoted[0] in main: &B = {
    let mut _0: &B;                      // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: B;                       // in scope 0 at ui/monomorphize-abi-alignment.rs:34:29: 34:37

    bb0: {
        _1 = B(const 31337_u64);         // scope 0 at ui/monomorphize-abi-alignment.rs:34:29: 34:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &A = {
    let mut _0: &A;                      // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: A;                       // in scope 0 at ui/monomorphize-abi-alignment.rs:33:29: 33:41
    let mut _2: (u32, u32);              // in scope 0 at ui/monomorphize-abi-alignment.rs:33:31: 33:40

    bb0: {
        _2 = (const 13_u32, const 104_u32); // scope 0 at ui/monomorphize-abi-alignment.rs:33:31: 33:40
        _1 = A(move _2);                 // scope 0 at ui/monomorphize-abi-alignment.rs:33:29: 33:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

static Ca: S<A> = {
    let mut _0: S<A>;                    // return place in scope 0 at ui/monomorphize-abi-alignment.rs:31:16: 31:20
    let mut _1: A;                       // in scope 0 at ui/monomorphize-abi-alignment.rs:31:36: 31:48
    let mut _2: (u32, u32);              // in scope 0 at ui/monomorphize-abi-alignment.rs:31:38: 31:47

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/monomorphize-abi-alignment.rs:31:36: 31:48
        StorageLive(_2);                 // scope 0 at ui/monomorphize-abi-alignment.rs:31:38: 31:47
        _2 = (const 13_u32, const 104_u32); // scope 0 at ui/monomorphize-abi-alignment.rs:31:38: 31:47
        _1 = A(move _2);                 // scope 0 at ui/monomorphize-abi-alignment.rs:31:36: 31:48
        StorageDead(_2);                 // scope 0 at ui/monomorphize-abi-alignment.rs:31:47: 31:48
        _0 = S::<A> { i: const 0_u8, t: move _1 }; // scope 0 at ui/monomorphize-abi-alignment.rs:31:23: 31:50
        StorageDead(_1);                 // scope 0 at ui/monomorphize-abi-alignment.rs:31:49: 31:50
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:31:5: 31:51
    }
}

static Cb: S<B> = {
    let mut _0: S<B>;                    // return place in scope 0 at ui/monomorphize-abi-alignment.rs:32:16: 32:20
    let mut _1: B;                       // in scope 0 at ui/monomorphize-abi-alignment.rs:32:36: 32:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/monomorphize-abi-alignment.rs:32:36: 32:44
        _1 = B(const 31337_u64);         // scope 0 at ui/monomorphize-abi-alignment.rs:32:36: 32:44
        _0 = S::<B> { i: const 0_u8, t: move _1 }; // scope 0 at ui/monomorphize-abi-alignment.rs:32:23: 32:46
        StorageDead(_1);                 // scope 0 at ui/monomorphize-abi-alignment.rs:32:45: 32:46
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:32:5: 32:47
    }
}

fn A(_1: (u32, u32)) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/monomorphize-abi-alignment.rs:25:1: 25:9

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/monomorphize-abi-alignment.rs:25:1: 25:9
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:25:1: 25:9
    }
}

// MIR FOR CTFE
fn A(_1: (u32, u32)) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/monomorphize-abi-alignment.rs:25:1: 25:9

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/monomorphize-abi-alignment.rs:25:1: 25:9
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:25:1: 25:9
    }
}

fn B(_1: u64) -> B {
    let mut _0: B;                       // return place in scope 0 at ui/monomorphize-abi-alignment.rs:28:1: 28:9

    bb0: {
        _0 = B(move _1);                 // scope 0 at ui/monomorphize-abi-alignment.rs:28:1: 28:9
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:28:1: 28:9
    }
}

// MIR FOR CTFE
fn B(_1: u64) -> B {
    let mut _0: B;                       // return place in scope 0 at ui/monomorphize-abi-alignment.rs:28:1: 28:9

    bb0: {
        _0 = B(move _1);                 // scope 0 at ui/monomorphize-abi-alignment.rs:28:1: 28:9
        return;                          // scope 0 at ui/monomorphize-abi-alignment.rs:28:1: 28:9
    }
}
