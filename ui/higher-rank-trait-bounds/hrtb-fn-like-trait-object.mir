// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:13:1: 13:46>::call(_1: &Identity, _2: &T) -> &T {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:14:13: 14:18
    debug arg => _2;                     // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:14:20: 14:23
    let mut _0: &T;                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:14:35: 14:40

    bb0: {
        _0 = _2;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:15:9: 15:12
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:16:6: 16:6
    }
}

fn call_repeatedly(_1: &dyn for<'a> FnLike<&'a isize, &'a isize>) -> () {
    debug f => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:19:20: 19:21
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:19:34: 19:34
    let _2: isize;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:20:9: 20:10
    let mut _4: &dyn for<'a> FnLike<&'a isize, &'a isize>; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:13: 21:23
    let mut _5: &isize;                  // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:20: 21:22
    let _6: &isize;                      // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:20: 21:22
    let mut _7: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:20:9: 20:10
        let _3: &isize;                  // in scope 1 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:9: 21:10
        scope 2 {
            debug y => _3;               // in scope 2 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:9: 21:10
            let _10: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _24: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = const 3_isize;              // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:20:13: 20:14
        _4 = _1;                         // scope 1 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:13: 21:23
        _6 = &_2;                        // scope 1 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:20: 21:22
        _5 = _6;                         // scope 1 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:20: 21:22
        _3 = <dyn for<'a> FnLike<&'a isize, &'a isize> as FnLike<&isize, &isize>>::call(move _4, move _5) -> bb1; // scope 1 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:13: 21:23
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:21:15: 21:19
                                         // + literal: Const { ty: for<'b> fn(&'b dyn for<'a> FnLike<&'a isize, &'a isize>, &isize) -> &isize {<dyn for<'a> FnLike<&'a isize, &'a isize> as FnLike<&isize, &isize>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _24 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &isize, val: Unevaluated(call_repeatedly, [], Some(promoted[0])) }
        _8 = _24;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = _3;                         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = const 3_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:23:2: 23:2
    }
}

promoted[0] in call_repeatedly: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: isize;                   // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:22:16: 22:17

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:22:16: 22:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:25:11: 25:11
    let _1: ();                          // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:5: 26:31
    let mut _2: &dyn for<'a> FnLike<&'a isize, &'a isize>; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
    let mut _3: &Identity;               // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
    let _4: &Identity;                   // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
    let mut _5: &Identity;               // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30

    bb0: {
        _5 = const _;                    // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
                                         // + literal: Const { ty: &Identity, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _5;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
        _3 = _4;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
        _2 = move _3 as &dyn for<'a> FnLike<&'a isize, &'a isize> (Pointer(Unsize)); // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
        _1 = call_repeatedly(move _2) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:5: 26:31
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:5: 26:20
                                         // + literal: Const { ty: for<'b, 'c> fn(&'b (dyn for<'a> FnLike<&'a isize, &'a isize> + 'c)) {call_repeatedly}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:27:2: 27:2
    }
}

promoted[0] in main: &Identity = {
    let mut _0: &Identity;               // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
    let mut _1: Identity;                // in scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:22: 26:30

    bb0: {
        _1 = Identity;                   // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:22: 26:30
        _0 = &_1;                        // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-fn-like-trait-object.rs:26:21: 26:30
    }
}
