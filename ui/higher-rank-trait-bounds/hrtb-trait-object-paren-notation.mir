// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:12:1: 12:49>::call(_1: &Identity, _2: (&T,)) -> &T {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:13:13: 13:18
    let mut _0: &T;                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:13:21: 13:24
    scope 1 {
        debug arg => _0;                 // in scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:13:21: 13:24
    }

    bb0: {
        _0 = (_2.0: &T);                 // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:13:21: 13:24
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:15:6: 15:6
    }
}

fn call_repeatedly(_1: &dyn for<'a> FnLike<(&'a i32,), &'a i32>) -> () {
    debug f => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:18:20: 18:21
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:18:34: 18:34
    let _2: i32;                         // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:19:9: 19:10
    let mut _4: &dyn for<'a> FnLike<(&'a i32,), &'a i32>; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:13: 20:26
    let mut _5: (&i32,);                 // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:20: 20:25
    let mut _6: &i32;                    // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:21: 20:23
    let _7: &i32;                        // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:21: 20:23
    let mut _8: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:19:9: 19:10
        let _3: &i32;                    // in scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:9: 20:10
        scope 2 {
            debug y => _3;               // in scope 2 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:9: 20:10
            let _11: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _12: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _25: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
            scope 3 {
                debug left_val => _11;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _12;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _17: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _17;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = const 3_i32;                // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:19:13: 19:14
        _4 = _1;                         // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:13: 20:26
        _7 = &_2;                        // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:21: 20:23
        _6 = _7;                         // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:21: 20:23
        _5 = (move _6,);                 // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:20: 20:25
        _3 = <dyn for<'a> FnLike<(&'a i32,), &'a i32> as FnLike<(&i32,), &i32>>::call(move _4, move _5) -> bb1; // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:13: 20:26
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:20:15: 20:19
                                         // + literal: Const { ty: for<'b> fn(&'b dyn for<'a> FnLike<(&'a i32,), &'a i32>, (&i32,)) -> &i32 {<dyn for<'a> FnLike<(&'a i32,), &'a i32> as FnLike<(&i32,), &i32>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _25 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(call_repeatedly, [], Some(promoted[0])) }
        _9 = _25;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _10 = _3;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_8.0: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_8.1: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = const 3_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<i32, i32>(move _19, move _20, move _22, move _24); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:22:2: 22:2
    }
}

promoted[0] in call_repeatedly: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i32;                     // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:21:16: 21:17

    bb0: {
        _1 = const 3_i32;                // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:21:16: 21:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:24:11: 24:11
    let _1: ();                          // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:5: 25:31
    let mut _2: &dyn for<'a> FnLike<(&'a i32,), &'a i32>; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
    let mut _3: &Identity;               // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
    let _4: &Identity;                   // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
    let mut _5: &Identity;               // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30

    bb0: {
        _5 = const _;                    // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
                                         // + literal: Const { ty: &Identity, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _5;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
        _3 = _4;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
        _2 = move _3 as &dyn for<'a> FnLike<(&'a i32,), &'a i32> (Pointer(Unsize)); // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
        _1 = call_repeatedly(move _2) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:5: 25:31
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:5: 25:20
                                         // + literal: Const { ty: for<'b, 'c> fn(&'b (dyn for<'a> FnLike<(&'a i32,), &'a i32> + 'c)) {call_repeatedly}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:26:2: 26:2
    }
}

promoted[0] in main: &Identity = {
    let mut _0: &Identity;               // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
    let mut _1: Identity;                // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:22: 25:30

    bb0: {
        _1 = Identity;                   // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:22: 25:30
        _0 = &_1;                        // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-paren-notation.rs:25:21: 25:30
    }
}
