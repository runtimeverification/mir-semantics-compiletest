// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:13:1: 13:38>::project(_1: &Yoke<Y>, _2: for<'a> fn(<Y as Yokeable<'a>>::Output, &'a ()) -> <Y2 as Yokeable<'a>>::Output) -> Yoke<Y2> {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:14:42: 14:47
    debug _f => _2;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:14:49: 14:51
    let mut _0: Yoke<Y2>;                // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:15:43: 15:51
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _3 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn _upcast(_1: Yoke<Y>) -> Yoke<Box<dyn IsCovariant<'_>>> {
    debug x => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:21:15: 21:16
    let mut _0: Yoke<std::boxed::Box<dyn IsCovariant<'_>>>; // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:21:30: 21:75
    let mut _2: &Yoke<Y>;                // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:5: 27:7
    let mut _3: for<'a> fn(<Y as Yokeable<'a>>::Output, &'a ()) -> <std::boxed::Box<dyn IsCovariant<'_>> as Yokeable<'a>>::Output; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:15: 27:6
    let mut _4: [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:15: 25:24]; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:15: 27:6

    bb0: {
        _2 = &_1;                        // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:5: 27:7
        _3 = move _4 as for<'a> fn(<Y as Yokeable<'a>>::Output, &'a ()) -> <std::boxed::Box<dyn IsCovariant<'_>> as Yokeable<'a>>::Output (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:15: 27:6
        _0 = Yoke::<Y>::project::<Box<dyn IsCovariant<'_>>>(move _2, move _3) -> [return: bb1, unwind: bb3]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:5: 27:7
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:7: 25:14
                                         // + literal: Const { ty: for<'b> fn(&'b Yoke<Y>, for<'a> fn(<Y as Yokeable<'a>>::Output, &'a ()) -> <Box<dyn IsCovariant<'_>> as Yokeable<'a>>::Output) -> Yoke<Box<dyn IsCovariant<'_>>> {Yoke::<Y>::project::<Box<dyn IsCovariant<'_>>>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:28:1: 28:2
    }

    bb2: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:28:2: 28:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:28:1: 28:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:21:1: 28:2
    }
}

fn _upcast::{closure#0}(_1: &[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:15: 25:24], _2: <Y as Yokeable<'_>>::Output, _3: &()) -> Box<dyn IsCovariant<'_>> {
    debug data => _2;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:16: 25:20
    let mut _0: std::boxed::Box<dyn IsCovariant<'_>>; // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:25:25: 25:25
    let mut _4: std::boxed::Box<dyn IsCovariant<'_>>; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:26:9: 26:23
    let mut _5: std::boxed::Box<<Y as Yokeable<'_>>::Output>; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:26:9: 26:23
    let mut _6: <Y as Yokeable<'_>>::Output; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:26:18: 26:22

    bb0: {
        _6 = move _2;                    // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:26:18: 26:22
        _5 = Box::<<Y as Yokeable<'_>>::Output>::new(move _6) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:26:9: 26:23
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:26:9: 26:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(<Y as Yokeable<'_>>::Output) -> Box<<Y as Yokeable<'_>>::Output> {Box::<<Y as Yokeable<'_>>::Output>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _5 as std::boxed::Box<dyn IsCovariant<'_>> (Pointer(Unsize)); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:26:9: 26:23
        _0 = move _4 as std::boxed::Box<dyn IsCovariant<'_>> (Pointer(Unsize)); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:26:9: 26:23
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:27:6: 27:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:35:11: 35:11

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-90638.rs:35:13: 35:13
    }
}
