// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:8:1: 8:38>::foo(_1: &&T) -> &T {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:10:12: 10:20
    let mut _0: &T;                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:10:12: 10:20

    bb0: {
        _0 = deref_copy (*_1);           // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:11:9: 11:13
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:12:6: 12:6
    }
}

fn uncallable(_1: T, _2: F) -> () {
    debug x => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:15:25: 15:26
    debug f => _2;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:15:31: 15:32
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:16:1: 16:1
    let _3: ();                          // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:5: 20:15
    let mut _4: &F;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:5: 20:6
    let mut _5: (<T as Foo<'_>>::Bar,);  // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:5: 20:15
    let mut _6: <T as Foo<'_>>::Bar;     // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:7: 20:14
    let mut _7: &T;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:7: 20:14

    bb0: {
        _4 = &_2;                        // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:5: 20:6
        _7 = &_1;                        // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:7: 20:14
        _6 = <T as Foo<'_>>::foo(move _7) -> [return: bb1, unwind: bb5]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:7: 20:14
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:9: 20:12
                                         // + literal: Const { ty: fn(&T) -> <T as Foo<'_>>::Bar {<T as Foo<'_>>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = (move _6,);                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:5: 20:15
        _3 = <F as Fn<(<T as Foo<'_>>::Bar,)>>::call(move _4, move _5) -> [return: bb2, unwind: bb5]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:5: 20:15
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:20:5: 20:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a F, (<T as Foo<'_>>::Bar,)) -> <F as FnOnce<(<T as Foo<'_>>::Bar,)>>::Output {<F as Fn<(<T as Foo<'_>>::Bar,)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb6]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:21:1: 21:2
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:21:1: 21:2
    }

    bb4: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:21:2: 21:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:21:1: 21:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:21:1: 21:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:15:1: 21:2
    }
}

fn catalyst(_1: &i32) -> () {
    debug x => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:23:17: 23:18
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:23:26: 23:26
    let mut _2: &i32;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:12: 24:13
    let mut _3: [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:15: 24:18]; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:15: 24:21

    bb0: {
        _2 = _1;                         // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:12: 24:13
        _0 = broken::<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:15: 24:18]>(move _2, move _3) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:5: 24:22
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:5: 24:11
                                         // + literal: Const { ty: for<'a> fn(&'a i32, [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:15: 24:18]) {broken::<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:15: 24:18]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:25:2: 25:2
    }
}

fn catalyst::{closure#0}(_1: &[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:15: 24:18], _2: &i32) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:19: 24:19

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:24:21: 24:21
    }
}

fn broken(_1: &i32, _2: F) -> () {
    debug x => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:27:28: 27:29
    debug f => _2;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:27:37: 27:38
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:27:43: 27:43
    let _3: ();                          // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:5: 28:28
    let mut _4: &i32;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:16: 28:17
    let mut _5: [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:22]; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:27
    let mut _6: &F;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:27

    bb0: {
        _4 = _1;                         // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:16: 28:17
        _6 = &_2;                        // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:27
        _5 = [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:22] { f: move _6 }; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:27
                                         // closure
                                         // + def_id: DefId(0:22 ~ issue_44005[8d0c]::broken::{closure#0})
                                         // + substs: [
                                         //     F,
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a i32,)),
                                         //     (&F,),
                                         // ]
        _3 = uncallable::<&i32, [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:22]>(move _4, move _5) -> [return: bb1, unwind: bb3]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:5: 28:28
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:5: 28:15
                                         // + literal: Const { ty: fn(&i32, [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:22]) {uncallable::<&i32, [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:22]>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:29:1: 29:2
    }

    bb2: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:29:2: 29:2
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:29:1: 29:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:27:1: 29:2
    }
}

fn broken::{closure#0}(_1: &[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:22], _2: &i32) -> () {
    debug y => _2;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:20: 28:21
    debug f => (*((*_1).0: &F));         // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:27:37: 27:38
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:23: 28:23
    let mut _3: &F;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:23: 28:24
    let mut _4: (&i32,);                 // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:23: 28:27
    let mut _5: &i32;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:25: 28:26
    let mut _6: &F;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:19: 28:27

    bb0: {
        _6 = deref_copy ((*_1).0: &F);   // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:23: 28:24
        _3 = _6;                         // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:23: 28:24
        _5 = _2;                         // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:25: 28:26
        _4 = (move _5,);                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:23: 28:27
        _0 = <F as Fn<(&i32,)>>::call(move _3, move _4) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:23: 28:27
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:23: 28:24
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a F, (&i32,)) -> <F as FnOnce<(&i32,)>>::Output {<F as Fn<(&i32,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:28:27: 28:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:31:11: 31:11

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-44005.rs:31:13: 31:13
    }
}
