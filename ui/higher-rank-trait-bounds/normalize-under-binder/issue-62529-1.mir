// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:26:1: 26:44>::inject(_1: &()) -> &mut T {
    let mut _0: &mut T;                  // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:28:26: 28:52
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _2 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:35:1: 35:20>::new() -> Annotate<Q> {
    let mut _0: Annotate<Q>;             // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:36:17: 36:21

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:38:6: 38:6
    }
}

fn annotate(_1: Annotate<Q>, _2: F) -> Wrapper<Q, F> {
    debug _q => _1;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:44:19: 44:21
    debug func => _2;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:44:36: 44:40
    let mut _0: Wrapper<Q, F>;           // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:49:9: 49:16
    let mut _3: std::marker::PhantomData<Q>; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:49:42: 49:66
    let mut _4: F;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:49:68: 49:72
    scope 1 {
        debug wrapper => _0;             // in scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:49:9: 49:16
    }

    bb0: {
        _4 = move _2;                    // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:49:68: 49:72
        _0 = Wrapper::<Q, F>(move _3, move _4); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:49:34: 49:73
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:51:2: 51:2
    }
}

fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:54:1: 54:37>::execute(_1: Wrapper<Q, F>, _2: <<Q as Inject>::I as FamilyLt<'_>>::Out) -> () {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:61:16: 61:20
    debug value => _2;                   // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:61:22: 61:27
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:61:72: 61:72
    let mut _3: F;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:62:9: 62:17
    let mut _4: (<<Q as Inject>::I as FamilyLt<'_>>::Out,); // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:62:9: 62:24
    let mut _5: <<Q as Inject>::I as FamilyLt<'_>>::Out; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:62:18: 62:23

    bb0: {
        _3 = move (_1.1: F);             // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:62:9: 62:17
        _5 = move _2;                    // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:62:18: 62:23
        _4 = (move _5,);                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:62:9: 62:24
        _0 = <F as FnOnce<(<<Q as Inject>::I as FamilyLt<'_>>::Out,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:62:9: 62:24
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:62:9: 62:17
                                         // + literal: Const { ty: extern "rust-call" fn(F, (<<Q as Inject>::I as FamilyLt<'_>>::Out,)) -> <F as FnOnce<(<<Q as Inject>::I as FamilyLt<'_>>::Out,)>>::Output {<F as FnOnce<(<<Q as Inject>::I as FamilyLt<'_>>::Out,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:63:6: 63:6
    }
}

fn task(_1: P) -> Task {
    debug processor => _1;               // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:71:12: 71:21
    let mut _0: Task;                    // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:71:29: 71:33
    let mut _2: std::boxed::Box<dyn std::ops::FnOnce()>; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:21: 77:11
    let mut _3: std::boxed::Box<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 74:37]>; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:21: 77:11
    let mut _4: [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 74:37]; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 77:10

    bb0: {
        _4 = [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 74:37] { processor: move _1 }; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 77:10
                                         // closure
                                         // + def_id: DefId(0:53 ~ issue_62529_1[58fd]::task::{closure#0})
                                         // + substs: [
                                         //     P,
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (P,),
                                         // ]
        _3 = Box::<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 74:37]>::new(move _4) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:21: 77:11
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:21: 74:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 74:37]) -> Box<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 74:37]> {Box::<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 74:37]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn std::ops::FnOnce()> (Pointer(Unsize)); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:21: 77:11
        _0 = Task { _processor: move _2 }; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:73:5: 78:6
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:79:2: 79:2
    }
}

fn task::{closure#0}(_1: [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 74:37]) -> () {
    debug processor => (_1.0: P);        // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:71:12: 71:21
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:38: 74:38
    let _2: <<<P as Execute>::E as Inject>::I as FamilyLt<'_>>::Out; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:17: 75:18
    let mut _3: &();                     // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
    let _4: &();                         // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
    let _5: ();                          // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:76:13: 76:33
    let mut _6: P;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:76:13: 76:22
    let mut _7: <<<P as Execute>::E as Inject>::I as FamilyLt<'_>>::Out; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:76:31: 76:32
    let mut _8: &();                     // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
    let mut _9: bool;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:77:9: 77:10
    scope 1 {
        debug q => _2;                   // in scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:17: 75:18
    }

    bb0: {
        _9 = const false;                // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:17: 75:18
        _9 = const true;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:17: 75:18
        _8 = const _;                    // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
                                         // + literal: Const { ty: &(), val: Unevaluated(task::{closure#0}, [P, <closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _4 = _8;                         // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
        _3 = _4;                         // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
        _2 = <<P as Execute>::E as Inject>::inject(move _3) -> [return: bb1, unwind: bb5]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:21: 75:38
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:21: 75:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a ()) -> <<<P as Execute>::E as Inject>::I as FamilyLt<'a>>::Out {<<P as Execute>::E as Inject>::inject}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = const false;                // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:76:13: 76:22
        _6 = move (_1.0: P);             // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:76:13: 76:22
        _7 = move _2;                    // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:76:31: 76:32
        _5 = <P as Execute>::execute(move _6, move _7) -> [return: bb2, unwind: bb5]; // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:76:13: 76:33
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:76:23: 76:30
                                         // + literal: Const { ty: for<'a> fn(P, <<<P as Execute>::E as Inject>::I as FamilyLt<'a>>::Out) {<P as Execute>::execute}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:77:10: 77:10
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:74:30: 77:10
    }

    bb4 (cleanup): {
        drop((_1.0: P)) -> bb3;          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:77:9: 77:10
    }

    bb5 (cleanup): {
        switchInt(_9) -> [0: bb3, otherwise: bb4]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:77:9: 77:10
    }
}

promoted[0] in task::{closure#0}: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
    let mut _1: ();                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:35: 75:37

    bb0: {
        _1 = ();                         // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:35: 75:37
        _0 = &_1;                        // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:75:34: 75:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:81:11: 81:11
    let _1: Task;                        // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:82:5: 87:7
    let mut _2: impl Execute + 'static;  // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:82:10: 87:6
    let mut _3: Annotate<RefMutFamily<usize>>; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:83:9: 83:47
    let mut _4: [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:84:9: 84:28]; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:84:9: 86:10

    bb0: {
        _3 = Annotate::<RefMutFamily<usize>>::new() -> bb1; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:83:9: 83:47
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:83:9: 83:45
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Annotate<RefMutFamily<usize>> {Annotate::<RefMutFamily<usize>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = annotate::<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:84:9: 84:28], RefMutFamily<usize>>(move _3, move _4) -> bb2; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:82:10: 87:6
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:82:10: 82:18
                                         // + literal: Const { ty: fn(Annotate<RefMutFamily<usize>>, [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:84:9: 84:28]) -> impl Execute + 'static {annotate::<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:84:9: 84:28], RefMutFamily<usize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = task::<impl Execute + 'static>(move _2) -> bb3; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:82:5: 87:7
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:82:5: 82:9
                                         // + literal: Const { ty: fn(impl Execute + 'static) -> Task {task::<impl Execute + 'static>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:87:7: 87:8
    }

    bb4: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:88:2: 88:2
    }
}

fn main::{closure#0}(_1: [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:84:9: 84:28], _2: &mut usize) -> () {
    debug value => _2;                   // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:84:10: 84:15
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:84:29: 84:29

    bb0: {
        (*_2) = const 2_usize;           // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:85:13: 85:23
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:86:10: 86:10
    }
}

fn RefMutFamily(_1: PhantomData<T>, _2: ()) -> RefMutFamily<T> {
    let mut _0: RefMutFamily<T>;         // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:8:1: 8:23

    bb0: {
        _0 = RefMutFamily::<T>(move _1, move _2); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:8:1: 8:23
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:8:1: 8:23
    }
}

// MIR FOR CTFE
fn RefMutFamily(_1: PhantomData<T>, _2: ()) -> RefMutFamily<T> {
    let mut _0: RefMutFamily<T>;         // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:8:1: 8:23

    bb0: {
        _0 = RefMutFamily::<T>(move _1, move _2); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:8:1: 8:23
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:8:1: 8:23
    }
}

fn Annotate(_1: PhantomData<Q>) -> Annotate<Q> {
    let mut _0: Annotate<Q>;             // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:34:1: 34:19

    bb0: {
        _0 = Annotate::<Q>(move _1);     // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:34:1: 34:19
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:34:1: 34:19
    }
}

// MIR FOR CTFE
fn Annotate(_1: PhantomData<Q>) -> Annotate<Q> {
    let mut _0: Annotate<Q>;             // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:34:1: 34:19

    bb0: {
        _0 = Annotate::<Q>(move _1);     // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:34:1: 34:19
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:34:1: 34:19
    }
}

fn Wrapper(_1: PhantomData<Q>, _2: F) -> Wrapper<Q, F> {
    let mut _0: Wrapper<Q, F>;           // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:53:1: 53:21

    bb0: {
        _0 = Wrapper::<Q, F>(move _1, move _2); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:53:1: 53:21
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:53:1: 53:21
    }
}

// MIR FOR CTFE
fn Wrapper(_1: PhantomData<Q>, _2: F) -> Wrapper<Q, F> {
    let mut _0: Wrapper<Q, F>;           // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:53:1: 53:21

    bb0: {
        _0 = Wrapper::<Q, F>(move _1, move _2); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:53:1: 53:21
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-1.rs:53:1: 53:21
    }
}
