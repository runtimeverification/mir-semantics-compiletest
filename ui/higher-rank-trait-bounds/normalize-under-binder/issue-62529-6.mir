// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:5:11: 5:11
    let _1: ();                          // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:6:5: 6:33
    let mut _2: &mut StateMachine2<'_>;  // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:6:5: 6:33
    let mut _3: StateMachine2<'_>;       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:6:5: 6:24

    bb0: {
        _3 = StateMachine2::<'_>::Init;  // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:6:5: 6:24
        _2 = &mut _3;                    // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:6:5: 6:33
        _1 = StateMachine2::<'_>::resume(move _2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:6:5: 6:33
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:6:25: 6:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut StateMachine2<'_>) {StateMachine2::<'_>::resume}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_3) -> bb2;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:6:33: 6:34
    }

    bb2: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:7:2: 7:2
    }

    bb3 (cleanup): {
        drop(_3) -> bb4;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:6:33: 6:34
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:5:1: 7:2
    }
}

fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:17:1: 17:27>::take(_1: &StateMachine2<'_>) -> StateMachine2<'_> {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:18:13: 18:18
    let mut _0: StateMachine2<'_>;       // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:18:23: 18:27

    bb0: {
        _0 = StateMachine2::<'_>::Init;  // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:19:9: 19:28
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:20:6: 20:6
    }
}

fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:23:1: 23:27>::resume(_1: &mut StateMachine2<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:24:15: 24:24
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:24:29: 24:31
    let mut _2: StateMachine2<'_>;       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:26:15: 26:26
    let mut _3: &StateMachine2<'_>;      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:26:15: 26:26
    let mut _4: isize;                   // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:27:13: 27:33
    let _5: Backed<'_, *mut std::string::String>; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:27:30: 27:31
    let _6: Backed<'_, ()>;              // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:17: 28:31
    let mut _7: Backed<'_, *mut std::string::String>; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:17: 28:18
    let mut _8: [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:24: 28:27]; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:24: 28:30
    let mut _9: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _10: bool;                   // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:32:5: 32:6
    let mut _11: isize;                  // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:32:5: 32:6
    scope 1 {
        debug p => _5;                   // in scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:27:30: 27:31
    }

    bb0: {
        _10 = const false;               // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:26:15: 26:26
        _3 = &(*_1);                     // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:26:15: 26:26
        _10 = const true;                // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:26:15: 26:26
        _2 = StateMachine2::<'_>::take(move _3) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:26:15: 26:26
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:26:20: 26:24
                                         // + literal: Const { ty: for<'a> fn(&'a StateMachine2<'_>) -> StateMachine2<'_> {StateMachine2::<'_>::take}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:26:15: 26:26
        switchInt(move _4) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:26:9: 26:26
    }

    bb2: {
        _9 = begin_panic::<&str>(const "Resume after completed.") -> bb9; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:30:25: 30:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _10 = const false;               // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:27:30: 27:31
        _5 = move ((_2 as AfterTwoYields).0: Backed<'_, *mut std::string::String>); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:27:30: 27:31
        _7 = move _5;                    // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:17: 28:18
        _6 = Backed::<'_, *mut String>::with::<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:24: 28:27]>(move _7, move _8) -> [return: bb4, unwind: bb9]; // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:17: 28:31
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:19: 28:23
                                         // + literal: Const { ty: fn(Backed<'_, *mut String>, [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:24: 28:27]) -> Backed<'_, ()> {Backed::<'_, *mut String>::with::<[closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:24: 28:27]>}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_6) -> [return: bb5, unwind: bb9]; // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:31: 28:32
    }

    bb5: {
        _10 = const false;               // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:32:5: 32:6
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:32:6: 32:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:24:5: 32:6
    }

    bb7 (cleanup): {
        switchInt(_10) -> [0: bb6, otherwise: bb8]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:32:5: 32:6
    }

    bb8 (cleanup): {
        drop(((_2 as AfterTwoYields).0: Backed<'_, *mut std::string::String>)) -> bb6; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:32:5: 32:6
    }

    bb9 (cleanup): {
        _11 = discriminant(_2);          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:32:5: 32:6
        switchInt(move _11) -> [1: bb7, otherwise: bb6]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:32:5: 32:6
    }
}

fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:23:1: 23:27>::resume::{closure#0}(_1: [closure@ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:24: 28:27], _2: &mut String) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:28: 28:28

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:28:30: 28:30
    }
}

fn Unpack::unpack(_1: &Self) -> <Self as Unpack<'_>>::Unpacked {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:38:15: 38:20
    let mut _0: <Self as Unpack<'_>>::Unpacked; // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:38:25: 38:39
    let mut _2: &&Self;                  // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:39:43: 39:48
    let _3: &&Self;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:39:43: 39:48
    scope 1 {
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:39:43: 39:48
        _2 = _3;                         // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:39:43: 39:48
        _0 = transmute_copy::<&Self, <Self as Unpack<'_>>::Unpacked>(move _2) -> bb1; // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:39:18: 39:49
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:39:18: 39:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a &Self) -> <Self as Unpack<'_>>::Unpacked {transmute_copy::<&Self, <Self as Unpack<'_>>::Unpacked>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:40:6: 40:6
    }
}

fn Pack::pack(_1: &Self) -> <Self as Pack>::Packed {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:46:13: 46:18
    let mut _0: <Self as Pack>::Packed;  // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:46:23: 46:35
    let mut _2: &&Self;                  // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:47:43: 47:48
    let _3: &&Self;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:47:43: 47:48
    scope 1 {
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:47:43: 47:48
        _2 = _3;                         // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:47:43: 47:48
        _0 = transmute_copy::<&Self, <Self as Pack>::Packed>(move _2) -> bb1; // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:47:18: 47:49
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:47:18: 47:42
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a &Self) -> <Self as Pack>::Packed {transmute_copy::<&Self, <Self as Pack>::Packed>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:48:6: 48:6
    }
}

fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:69:1: 69:42>::with(_1: Backed<'_, U>, _2: F) -> Backed<'_, ()> {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:70:16: 70:20
    debug f => _2;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:70:22: 70:23
    let mut _0: Backed<'_, ()>;          // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:70:31: 70:45
    let _3: ();                          // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:13: 74:19
    let mut _4: F;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:22: 74:23
    let mut _5: (<U as Unpack<'_>>::Unpacked,); // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:22: 74:40
    let mut _6: <U as Unpack<'_>>::Unpacked; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:24: 74:39
    let mut _7: &U;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:24: 74:39
    let mut _8: std::cell::RefMut<'_, std::option::Option<std::string::String>>; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:75:16: 75:22
    let mut _9: ();                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:75:24: 75:30
    let mut _10: bool;                   // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:39: 74:40
    scope 1 {
        debug result => _3;              // in scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:13: 74:19
    }

    bb0: {
        _10 = const false;               // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:13: 74:19
        _10 = const true;                // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:22: 74:23
        _4 = move _2;                    // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:22: 74:23
        _7 = &(_1.1: U);                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:24: 74:39
        _6 = <U as Unpack<'_>>::unpack(move _7) -> [return: bb1, unwind: bb7]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:24: 74:39
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:31: 74:37
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> <U as Unpack<'_>>::Unpacked {<U as Unpack<'_>>::unpack}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = (move _6,);                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:22: 74:40
        _10 = const false;               // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:22: 74:40
        _3 = <F as FnOnce<(<U as Unpack<'_>>::Unpacked,)>>::call_once(move _4, move _5) -> [return: bb2, unwind: bb7]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:22: 74:40
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:22: 74:23
                                         // + literal: Const { ty: extern "rust-call" fn(F, (<U as Unpack<'_>>::Unpacked,)) -> <F as FnOnce<(<U as Unpack<'_>>::Unpacked,)>>::Output {<F as FnOnce<(<U as Unpack<'_>>::Unpacked,)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = const false;               // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:39: 74:40
        _8 = move (_1.0: std::cell::RefMut<'_, std::option::Option<std::string::String>>); // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:75:16: 75:22
        _0 = Backed::<'_, ()>(move _8, move _9); // scope 1 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:75:9: 75:31
        drop((_1.1: U)) -> bb5;          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:76:5: 76:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:76:5: 76:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:70:5: 76:6
    }

    bb5: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:76:6: 76:6
    }

    bb6 (cleanup): {
        drop(_4) -> bb3;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:39: 74:40
    }

    bb7 (cleanup): {
        switchInt(_10) -> [0: bb3, otherwise: bb6]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:74:39: 74:40
    }
}

fn Backed(_1: RefMut<'_, Option<String>>, _2: U) -> Backed<'_, U> {
    let mut _0: Backed<'_, U>;           // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:67:1: 67:21

    bb0: {
        _0 = Backed::<'_, U>(move _1, move _2); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:67:1: 67:21
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:67:1: 67:21
    }
}

// MIR FOR CTFE
fn Backed(_1: RefMut<'_, Option<String>>, _2: U) -> Backed<'_, U> {
    let mut _0: Backed<'_, U>;           // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:67:1: 67:21

    bb0: {
        _0 = Backed::<'_, U>(move _1, move _2); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:67:1: 67:21
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-62529-6.rs:67:1: 67:21
    }
}
