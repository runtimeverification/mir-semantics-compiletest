// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:9:1: 9:10>::use_data(_1: &Data, _2: impl for<'a> FnOnce(<Box<&'a i32> as Deref>::Target)) -> () {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:10:17: 10:22
    debug user => _2;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:10:24: 10:28
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:10:85: 10:85
    let mut _3: impl for<'a> FnOnce(<Box<&'a i32> as Deref>::Target); // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:9: 11:13
    let mut _4: (&i32,);                 // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:9: 11:26
    let mut _5: &i32;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:14: 11:25
    let mut _6: std::boxed::Box<&i32>;   // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:10:17: 10:22
    let mut _7: &i32;                    // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:10:17: 10:22
    let mut _8: *const &i32;             // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:10:17: 10:22

    bb0: {
        _3 = move _2;                    // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:9: 11:13
        _6 = deref_copy ((*_1).0: std::boxed::Box<&i32>); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:14: 11:25
        _8 = (((_6.0: std::ptr::Unique<&i32>).0: std::ptr::NonNull<&i32>).0: *const &i32); // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:14: 11:25
        _7 = deref_copy (*_8);           // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:14: 11:25
        _5 = _7;                         // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:14: 11:25
        _4 = (move _5,);                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:9: 11:26
        _0 = <impl for<'a> FnOnce(<Box<&'a i32> as Deref>::Target) as FnOnce<(&i32,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:9: 11:26
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:11:9: 11:13
                                         // + literal: Const { ty: extern "rust-call" fn(impl for<'a> FnOnce(<Box<&'a i32> as Deref>::Target), (&i32,)) -> <impl for<'a> FnOnce(<Box<&'a i32> as Deref>::Target) as FnOnce<(&i32,)>>::Output {<impl for<'a> FnOnce(<Box<&'a i32> as Deref>::Target) as FnOnce<(&i32,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:12:6: 12:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:15:11: 15:11

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-76956.rs:15:13: 15:13
    }
}
