// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: T) -> usize {
    debug t => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:3:11: 3:12
    let mut _0: usize;                   // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:3:20: 3:25
    let mut _2: &<&T as std::iter::IntoIterator>::IntoIter; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:8:5: 8:24
    let _3: <&T as std::iter::IntoIterator>::IntoIter; // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:8:5: 8:18
    let mut _4: &T;                      // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:8:5: 8:18

    bb0: {
        _4 = &_1;                        // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:8:5: 8:18
        _3 = <&T as IntoIterator>::into_iter(move _4) -> [return: bb1, unwind: bb6]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:8:5: 8:18
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:8:7: 8:16
                                         // + literal: Const { ty: fn(&T) -> <&T as IntoIterator>::IntoIter {<&T as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:8:5: 8:24
        _0 = <<&T as IntoIterator>::IntoIter as ExactSizeIterator>::len(move _2) -> [return: bb2, unwind: bb5]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:8:5: 8:24
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:8:19: 8:22
                                         // + literal: Const { ty: for<'a> fn(&'a <&T as IntoIterator>::IntoIter) -> usize {<<&T as IntoIterator>::IntoIter as ExactSizeIterator>::len}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind: bb6]; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:9:1: 9:2
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:9:1: 9:2
    }

    bb4: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:9:2: 9:2
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:9:1: 9:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:9:1: 9:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:3:1: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:11:11: 11:11
    let _1: usize;                       // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:12:5: 12:28
    let mut _2: std::vec::Vec<u32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59

    bb0: {
        _2 = Vec::<u32>::new() -> bb1;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = foo::<Vec<u32>>(move _2) -> bb2; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:12:5: 12:28
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:12:5: 12:20
                                         // + literal: Const { ty: fn(Vec<u32>) -> usize {foo::<Vec<u32>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:13:2: 13:2
    }
}

fn test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:19:5: 19:5

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:25:6: 25:6
    }
}

fn another::main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:27:15: 27:15
    let _1: ();                          // in scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:28:9: 28:29

    bb0: {
        _1 = test::<Vec<u8>, [u8]>() -> bb1; // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:28:9: 28:29
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:28:9: 28:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() {test::<Vec<u8>, [u8]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/normalize-under-binder/issue-56556.rs:29:6: 29:6
    }
}
