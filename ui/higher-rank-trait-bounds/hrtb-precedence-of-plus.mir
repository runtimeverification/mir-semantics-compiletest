// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn adder(_1: isize) -> Box<dyn Fn(isize) -> isize> {
    debug y => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:9:10: 9:11
    let mut _0: std::boxed::Box<dyn std::ops::Fn(isize) -> isize>; // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:9:23: 9:60
    let mut _2: std::boxed::Box<dyn std::ops::Fn(isize) -> isize>; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:5: 10:29
    let mut _3: std::boxed::Box<[closure@ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:22]>; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:5: 10:29
    let mut _4: [closure@ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:22]; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:28

    bb0: {
        _4 = [closure@ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:22] { y: _1 }; // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:28
                                         // closure
                                         // + def_id: DefId(0:4 ~ hrtb_precedence_of_plus[051e]::adder::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((isize,)) -> isize,
                                         //     (isize,),
                                         // ]
        _3 = Box::<[closure@ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:22]>::new(move _4) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:5: 10:29
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:5: 10:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([closure@ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:22]) -> Box<[closure@ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:22]> {Box::<[closure@ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:22]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<dyn std::ops::Fn(isize) -> isize> (Pointer(Unsize)); // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:5: 10:29
        _0 = move _2 as std::boxed::Box<dyn std::ops::Fn(isize) -> isize> (Pointer(Unsize)); // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:5: 10:29
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:11:2: 11:2
    }
}

fn adder::{closure#0}(_1: &[closure@ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:14: 10:22], _2: isize) -> isize {
    debug x => _2;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:20: 10:21
    debug y => ((*_1).0: isize);         // in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:9:10: 9:11
    let mut _0: isize;                   // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:23: 10:23
    let mut _3: isize;                   // in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:23: 10:24
    let mut _4: isize;                   // in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:27: 10:28
    let mut _5: (isize, bool);           // in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:23: 10:28

    bb0: {
        _3 = ((*_1).0: isize);           // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:23: 10:24
        _4 = _2;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:27: 10:28
        _5 = CheckedAdd(_3, _4);         // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:23: 10:28
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, move _4) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:23: 10:28
    }

    bb1: {
        _0 = move (_5.0: isize);         // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:23: 10:28
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:10:28: 10:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-precedence-of-plus.rs:13:13: 13:13
    }
}
