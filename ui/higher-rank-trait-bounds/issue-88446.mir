// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/higher-rank-trait-bounds/issue-88446.rs:19:1: 19:30>::map_project_with_capture(_1: for<'a> fn(T, PhantomData<&'a ()>) -> <<M2 as DataMarker<'_>>::Yokeable as Yokeable<'a>>::Output) -> DataPayload<'_, M2> {
    let mut _0: DataPayload<'_, M2>;     // return place in scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:25:10: 25:34
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _2 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:33:11: 33:11
    let mut _1: DataPayload<'_, ()>;     // in scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:34:30: 34:99
    let mut _2: for<'a> fn(&(), std::marker::PhantomData<&'a ()>) -> <() as Yokeable<'a>>::Output; // in scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:34:84: 34:98
    let mut _3: [closure@ui/higher-rank-trait-bounds/issue-88446.rs:34:84: 34:90]; // in scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:34:84: 34:98
    scope 1 {
    }

    bb0: {
        _2 = move _3 as for<'a> fn(&(), std::marker::PhantomData<&'a ()>) -> <() as Yokeable<'a>>::Output (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:34:84: 34:98
        _1 = DataPayload::<'static, ()>::map_project_with_capture::<(), &()>(move _2) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:34:30: 34:99
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/issue-88446.rs:34:30: 34:83
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(for<'a> fn(&(), PhantomData<&'a ()>) -> <<() as DataMarker<'static>>::Yokeable as Yokeable<'a>>::Output) -> DataPayload<'static, ()> {DataPayload::<'static, ()>::map_project_with_capture::<(), &()>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:35:2: 35:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/higher-rank-trait-bounds/issue-88446.rs:34:84: 34:90], _2: &(), _3: PhantomData<&()>) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:34:91: 34:91
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _4 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn DataPayload(_1: &M) -> DataPayload<'_, M> {
    let mut _0: DataPayload<'_, M>;      // return place in scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:17:1: 17:29

    bb0: {
        _0 = DataPayload::<'_, M>(move _1); // scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:17:1: 17:29
        return;                          // scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:17:1: 17:29
    }
}

// MIR FOR CTFE
fn DataPayload(_1: &M) -> DataPayload<'_, M> {
    let mut _0: DataPayload<'_, M>;      // return place in scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:17:1: 17:29

    bb0: {
        _0 = DataPayload::<'_, M>(move _1); // scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:17:1: 17:29
        return;                          // scope 0 at ui/higher-rank-trait-bounds/issue-88446.rs:17:1: 17:29
    }
}
