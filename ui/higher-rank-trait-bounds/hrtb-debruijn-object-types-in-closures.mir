// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Typer::method(_1: &Self, _2: &isize) -> &isize {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:6:15: 6:20
    debug data => _2;                    // in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:6:22: 6:26
    let mut _0: &isize;                  // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:6:44: 6:55

    bb0: {
        _0 = _2;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:6:58: 6:62
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:6:64: 6:64
    }
}

fn Typer::dummy(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:7:14: 7:19
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:7:21: 7:21

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:7:24: 7:24
    }
}

fn g(_1: F) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:10:15: 10:15

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:10:44: 10:45
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:10:45: 10:45
    }
}

fn h() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:12:8: 12:8
    let mut _1: [closure@ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:7: 13:14]; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:7: 13:28

    bb0: {
        _0 = g::<[closure@ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:7: 13:14]>(move _1) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:5: 13:29
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:5: 13:6
                                         // + literal: Const { ty: fn([closure@ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:7: 13:14]) {g::<[closure@ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:7: 13:14]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:14:2: 14:2
    }
}

fn h::{closure#0}(_1: [closure@ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:7: 13:14], _2: &dyn Typer<'_>) -> () {
    debug typer => _2;                   // in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:8: 13:13
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:15: 13:15
    let mut _3: &dyn Typer<'_>;          // in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:15: 13:28

    bb0: {
        _3 = _2;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:15: 13:28
        _0 = <dyn Typer<'_> as Typer<'_>>::dummy(move _3) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:15: 13:28
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:21: 13:26
                                         // + literal: Const { ty: for<'a> fn(&'a dyn Typer<'_>) {<dyn Typer<'_> as Typer<'_>>::dummy}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:13:28: 13:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-debruijn-object-types-in-closures.rs:16:14: 16:14
    }
}
