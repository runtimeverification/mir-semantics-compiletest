// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:4:22: 4:23
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:4:28: 4:28
    let _2: isize;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:5:9: 5:10
    let _3: ();                          // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:5: 6:10
    let mut _4: &F;                      // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:5: 6:6
    let mut _5: (&isize,);               // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:5: 6:10
    let mut _6: &isize;                  // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:7: 6:9
    let _7: &isize;                      // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:7: 6:9
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:5:9: 5:10
    }

    bb0: {
        _2 = const 22_isize;             // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:5:13: 5:15
        _4 = &_1;                        // scope 1 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:5: 6:6
        _7 = &_2;                        // scope 1 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:7: 6:9
        _6 = _7;                         // scope 1 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:7: 6:9
        _5 = (move _6,);                 // scope 1 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:5: 6:10
        _3 = <F as Fn<(&isize,)>>::call(move _4, move _5) -> [return: bb1, unwind: bb3]; // scope 1 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:5: 6:10
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:6:5: 6:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a F, (&isize,)) -> <F as FnOnce<(&isize,)>>::Output {<F as Fn<(&isize,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:7:1: 7:2
    }

    bb2: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:7:2: 7:2
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:7:1: 7:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:4:1: 7:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:9:11: 9:11
    let _1: ();                          // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:5: 10:40
    let mut _2: [closure@ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:9: 10:20]; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:9: 10:39

    bb0: {
        _1 = foo::<[closure@ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:9: 10:20]>(move _2) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:5: 10:40
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:5: 10:8
                                         // + literal: Const { ty: fn([closure@ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:9: 10:20]) {foo::<[closure@ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:9: 10:20]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:11:2: 11:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:9: 10:20], _2: &isize) -> () {
    debug x => _2;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:10: 10:11
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:21: 10:21
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
    let mut _6: &[&str; 2];              // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
    let _7: &[&str; 2];                  // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:36: 10:38
    let mut _13: &isize;                 // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:36: 10:38
    let _14: &isize;                     // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:36: 10:38
    let mut _15: &[&str; 2];             // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34

    bb0: {
        _15 = const _;                   // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
        _6 = _7;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
        _14 = _2;                        // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:36: 10:38
        _13 = _14;                       // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:36: 10:38
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _13) -> bb1; // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:36: 10:38
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:36: 10:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _print(move _4) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:39: 10:39
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
    let mut _1: [&str; 2];               // in scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-unboxed-closure-trait.rs:10:30: 10:34
    }
}
