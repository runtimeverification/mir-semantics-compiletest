// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn PrinterSupport::ast_map(_1: &Self) -> Option<&usize> {
    debug self => _1;                    // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:10:16: 10:21
    let mut _0: std::option::Option<&usize>; // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:10:26: 10:45

    bb0: {
        _0 = const Option::<&usize>::None; // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:10:48: 10:52
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:10:48: 10:52
                                         // + literal: Const { ty: Option<&usize>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:10:54: 10:54
    }
}

fn foo(_1: Option<&usize>, _2: G) -> () {
    debug f => _1;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:20:17: 20:18
    debug g => _2;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:20:41: 20:42
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:20:47: 20:47
    let _3: NoAnn<'_>;                   // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:21:9: 21:19
    let mut _4: std::option::Option<&usize>; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:21:33: 21:34
    let mut _5: G;                       // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:5: 22:6
    let mut _6: (&dyn PrinterSupport<'_>,); // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:5: 22:19
    let mut _7: &dyn PrinterSupport<'_>; // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:7: 22:18
    let mut _8: &NoAnn<'_>;              // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:7: 22:18
    let _9: &NoAnn<'_>;                  // in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:7: 22:18
    scope 1 {
        debug annotation => _3;          // in scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:21:9: 21:19
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:21:33: 21:34
        _3 = NoAnn::<'_> { f: move _4 }; // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:21:22: 21:36
        _5 = move _2;                    // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:5: 22:6
        _9 = &_3;                        // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:7: 22:18
        _8 = _9;                         // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:7: 22:18
        _7 = move _8 as &dyn PrinterSupport<'_> (Pointer(Unsize)); // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:7: 22:18
        _6 = (move _7,);                 // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:5: 22:19
        _0 = <G as FnOnce<(&dyn PrinterSupport<'_>,)>>::call_once(move _5, move _6) -> bb1; // scope 1 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:5: 22:19
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:22:5: 22:6
                                         // + literal: Const { ty: extern "rust-call" fn(G, (&dyn PrinterSupport<'_>,)) -> <G as FnOnce<(&dyn PrinterSupport<'_>,)>>::Output {<G as FnOnce<(&dyn PrinterSupport<'_>,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:23:2: 23:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:25:11: 25:11

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/hrtb-trait-object-passed-to-closure.rs:25:13: 25:13
    }
}
