// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/higher-rank-trait-bounds/issue-100689.rs:13:1: 13:24>::uwu(_1: Foo<'_>, _2: impl for<'b> FnMut(&'b Foo<'a>)) -> () {
    debug foo => _1;                     // in scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:22:9: 22:12
    debug f => _2;                       // in scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:23:9: 23:14
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:24:7: 24:7
    let _3: ();                          // in scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:9: 25:16
    let mut _4: &mut impl for<'b> FnMut(&'b Foo<'a>); // in scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:9: 25:10
    let mut _5: (&Foo<'_>,);             // in scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:9: 25:16
    let mut _6: &Foo<'_>;                // in scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:11: 25:15
    let _7: &Foo<'_>;                    // in scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:11: 25:15

    bb0: {
        _4 = &mut _2;                    // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:9: 25:10
        _7 = &_1;                        // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:11: 25:15
        _6 = _7;                         // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:11: 25:15
        _5 = (move _6,);                 // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:9: 25:16
        _3 = <impl for<'b> FnMut(&'b Foo<'a>) as FnMut<(&Foo<'_>,)>>::call_mut(move _4, move _5) -> [return: bb1, unwind: bb3]; // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:25:9: 25:16
                                         // mir::Constant
                                         // + span: ui/higher-rank-trait-bounds/issue-100689.rs:25:9: 25:10
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut impl for<'b> FnMut(&'b Foo<'a>), (&Foo<'_>,)) -> <impl for<'b> FnMut(&'b Foo<'a>) as FnOnce<(&Foo<'_>,)>>::Output {<impl for<'b> FnMut(&'b Foo<'a>) as FnMut<(&Foo<'_>,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:26:5: 26:6
    }

    bb2: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:26:6: 26:6
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:26:5: 26:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:21:5: 26:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:29:11: 29:11

    bb0: {
        return;                          // scope 0 at ui/higher-rank-trait-bounds/issue-100689.rs:29:13: 29:13
    }
}
