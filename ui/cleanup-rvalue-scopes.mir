// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut FLAGS: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const 0_u64;
        return;
    }
}

fn AddFlags(_1: u64) -> AddFlags {
    debug bits => _1;
    let mut _0: AddFlags;

    bb0: {
        _0 = AddFlags { bits: _1 };
        return;
    }
}

fn arg(_1: u64, _2: &AddFlags) -> () {
    debug exp => _1;
    debug _x => _2;
    let mut _0: ();
    let _3: ();

    bb0: {
        _3 = check_flags(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn pass(_1: T) -> T {
    debug v => _1;
    let mut _0: T;

    bb0: {
        _0 = move _1;
        return;
    }
}

fn check_flags(_1: u64) -> () {
    debug exp => _1;
    let mut _0: ();
    let mut _3: *mut u64;
    let mut _4: *mut u64;
    let _5: ();
    let mut _6: std::fmt::Arguments<'_>;
    let mut _7: &[&str];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 2];
    let _10: [core::fmt::rt::Argument<'_>; 2];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &u64;
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &u64;
    let mut _15: (&u64, &u64);
    let mut _16: &u64;
    let mut _17: &u64;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u64;
    let mut _23: u64;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        let _2: u64;
        let mut _34: *const ();
        let mut _35: usize;
        let mut _36: usize;
        let mut _37: usize;
        let mut _38: usize;
        let mut _39: bool;
        scope 2 {
            debug x => _2;
            let _18: &u64;
            let _19: &u64;
            let mut _27: &[&str; 3];
            let mut _28: *const ();
            let mut _29: usize;
            let mut _30: usize;
            let mut _31: usize;
            let mut _32: usize;
            let mut _33: bool;
            scope 3 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _24;
                }
            }
        }
    }

    bb0: {
        _3 = const {alloc1: *mut u64};
        _34 = _3 as *const () (PtrToPtr);
        _35 = _34 as usize (Transmute);
        _36 = AlignOf(u64);
        _37 = Sub(_36, const 1_usize);
        _38 = BitAnd(_35, _37);
        _39 = Eq(_38, const 0_usize);
        assert(_39, "misaligned pointer dereference: address must be a multiple of {} but is {}", _36, _35) -> [success: bb8, unwind unreachable];
    }

    bb1: {
        _14 = &_1;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = [move _11, move _13];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _6 = Arguments::<'_>::new_v1(move _7, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = _print(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _16 = &_2;
        _17 = &_1;
        _15 = (move _16, move _17);
        _18 = (_15.0: &u64);
        _19 = (_15.1: &u64);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u64, u64>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        return;
    }

    bb7: {
        (*_4) = const 0_u64;
        _27 = const _;
        _7 = _27 as &[&str] (Pointer(Unsize));
        _12 = &_2;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<u64>(_12) -> [return: bb1, unwind continue];
    }

    bb8: {
        _2 = (*_3);
        _4 = const {alloc1: *mut u64};
        _28 = _4 as *const () (PtrToPtr);
        _29 = _28 as usize (Transmute);
        _30 = AlignOf(u64);
        _31 = Sub(_30, const 1_usize);
        _32 = BitAnd(_29, _31);
        _33 = Eq(_32, const 0_usize);
        assert(_33, "misaligned pointer dereference: address must be a multiple of {} but is {}", _30, _29) -> [success: bb7, unwind unreachable];
    }
}

alloc1 (static: FLAGS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in check_flags: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "flags ", const ", expected ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/cleanup-rvalue-scopes.rs:39:1: 39:14>::check_flags(_1: &AddFlags, _2: u64) -> &AddFlags {
    debug self => _1;
    debug exp => _2;
    let mut _0: &AddFlags;
    let _3: ();

    bb0: {
        _3 = check_flags(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _1;
        return;
    }
}

fn <impl at ui/cleanup-rvalue-scopes.rs:39:1: 39:14>::bits(_1: &AddFlags) -> u64 {
    debug self => _1;
    let mut _0: u64;

    bb0: {
        _0 = ((*_1).0: u64);
        return;
    }
}

fn <impl at ui/cleanup-rvalue-scopes.rs:50:1: 50:23>::drop(_1: &mut AddFlags) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: u64;
    let mut _3: *mut u64;
    let mut _4: u64;
    let mut _5: *mut u64;
    scope 1 {
        let mut _6: *const ();
        let mut _7: usize;
        let mut _8: usize;
        let mut _9: usize;
        let mut _10: usize;
        let mut _11: bool;
        let mut _12: *const ();
        let mut _13: usize;
        let mut _14: usize;
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: bool;
    }

    bb0: {
        _3 = const {alloc1: *mut u64};
        _12 = _3 as *const () (PtrToPtr);
        _13 = _12 as usize (Transmute);
        _14 = AlignOf(u64);
        _15 = Sub(_14, const 1_usize);
        _16 = BitAnd(_13, _15);
        _17 = Eq(_16, const 0_usize);
        assert(_17, "misaligned pointer dereference: address must be a multiple of {} but is {}", _14, _13) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_5) = Add(move _2, move _4);
        return;
    }

    bb2: {
        _2 = (*_3);
        _4 = ((*_1).0: u64);
        _5 = const {alloc1: *mut u64};
        _6 = _5 as *const () (PtrToPtr);
        _7 = _6 as usize (Transmute);
        _8 = AlignOf(u64);
        _9 = Sub(_8, const 1_usize);
        _10 = BitAnd(_7, _9);
        _11 = Eq(_10, const 0_usize);
        assert(_11, "misaligned pointer dereference: address must be a multiple of {} but is {}", _8, _7) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: FLAGS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 0];
    let _6: [core::fmt::rt::Argument<'_>; 0];
    let _7: AddFlags;
    let _8: ();
    let _9: ();
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 0];
    let _15: [core::fmt::rt::Argument<'_>; 0];
    let _16: &AddFlags;
    let _17: AddFlags;
    let _18: ();
    let _19: ();
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _23: &[core::fmt::rt::Argument<'_>];
    let _24: &[core::fmt::rt::Argument<'_>; 0];
    let _25: [core::fmt::rt::Argument<'_>; 0];
    let _26: &&AddFlags;
    let _27: &AddFlags;
    let _28: AddFlags;
    let _29: ();
    let _30: ();
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 0];
    let _36: [core::fmt::rt::Argument<'_>; 0];
    let _37: Box<AddFlags>;
    let mut _38: AddFlags;
    let _39: ();
    let _40: ();
    let _41: ();
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let _45: &[core::fmt::rt::Argument<'_>; 0];
    let _46: [core::fmt::rt::Argument<'_>; 0];
    let _47: Box<&AddFlags>;
    let mut _48: &AddFlags;
    let _49: AddFlags;
    let _50: ();
    let _51: ();
    let _52: ();
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[core::fmt::rt::Argument<'_>];
    let _56: &[core::fmt::rt::Argument<'_>; 0];
    let _57: [core::fmt::rt::Argument<'_>; 0];
    let _58: Box<&AddFlags>;
    let mut _59: &AddFlags;
    let _60: AddFlags;
    let _61: ();
    let _62: ();
    let _63: ();
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[core::fmt::rt::Argument<'_>];
    let _67: &[core::fmt::rt::Argument<'_>; 0];
    let _68: [core::fmt::rt::Argument<'_>; 0];
    let _69: AddFlags;
    let mut _70: AddFlags;
    let _71: ();
    let _72: ();
    let _73: ();
    let mut _74: std::fmt::Arguments<'_>;
    let mut _75: &[&str];
    let mut _76: &[core::fmt::rt::Argument<'_>];
    let _77: &[core::fmt::rt::Argument<'_>; 0];
    let _78: [core::fmt::rt::Argument<'_>; 0];
    let _79: &AddFlags;
    let mut _80: AddFlags;
    let _81: ();
    let _82: ();
    let _83: ();
    let mut _84: std::fmt::Arguments<'_>;
    let mut _85: &[&str];
    let mut _86: &[core::fmt::rt::Argument<'_>];
    let _87: &[core::fmt::rt::Argument<'_>; 0];
    let _88: [core::fmt::rt::Argument<'_>; 0];
    let _89: &u64;
    let mut _90: AddFlags;
    let _91: ();
    let _92: ();
    let _93: ();
    let mut _94: std::fmt::Arguments<'_>;
    let mut _95: &[&str];
    let mut _96: &[core::fmt::rt::Argument<'_>];
    let _97: &[core::fmt::rt::Argument<'_>; 0];
    let _98: [core::fmt::rt::Argument<'_>; 0];
    let _99: u64;
    let mut _100: &AddFlags;
    let _101: AddFlags;
    let _102: ();
    let _103: ();
    let _104: ();
    let mut _105: std::fmt::Arguments<'_>;
    let mut _106: &[&str];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let _108: &[core::fmt::rt::Argument<'_>; 0];
    let _109: [core::fmt::rt::Argument<'_>; 0];
    let _110: &i32;
    let mut _111: (AddFlags, i32);
    let mut _112: AddFlags;
    let _113: ();
    let _114: ();
    let _115: ();
    let mut _116: std::fmt::Arguments<'_>;
    let mut _117: &[&str];
    let mut _118: &[core::fmt::rt::Argument<'_>];
    let _119: &[core::fmt::rt::Argument<'_>; 0];
    let _120: [core::fmt::rt::Argument<'_>; 0];
    let _121: &AddFlags;
    let mut _122: std::boxed::Box<AddFlags>;
    let mut _123: AddFlags;
    let _124: ();
    let _125: ();
    let _126: ();
    let mut _127: std::fmt::Arguments<'_>;
    let mut _128: &[&str];
    let mut _129: &[core::fmt::rt::Argument<'_>];
    let _130: &[core::fmt::rt::Argument<'_>; 0];
    let _131: [core::fmt::rt::Argument<'_>; 0];
    let _132: AddFlags;
    let mut _133: std::boxed::Box<AddFlags>;
    let mut _134: AddFlags;
    let _135: ();
    let _136: ();
    let _137: ();
    let mut _138: std::fmt::Arguments<'_>;
    let mut _139: &[&str];
    let mut _140: &[core::fmt::rt::Argument<'_>];
    let _141: &[core::fmt::rt::Argument<'_>; 0];
    let _142: [core::fmt::rt::Argument<'_>; 0];
    let _143: ();
    let _144: AddFlags;
    let _145: ();
    let _146: ();
    let _147: ();
    let mut _148: std::fmt::Arguments<'_>;
    let mut _149: &[&str];
    let mut _150: &[core::fmt::rt::Argument<'_>];
    let _151: &[core::fmt::rt::Argument<'_>; 0];
    let _152: [core::fmt::rt::Argument<'_>; 0];
    let _153: Box<AddFlags>;
    let mut _154: AddFlags;
    let _155: ();
    let _156: ();
    let _157: ();
    let mut _158: std::fmt::Arguments<'_>;
    let mut _159: &[&str];
    let mut _160: &[core::fmt::rt::Argument<'_>];
    let _161: &[core::fmt::rt::Argument<'_>; 0];
    let _162: [core::fmt::rt::Argument<'_>; 0];
    let _163: [AddFlags; 1];
    let mut _164: AddFlags;
    let _165: usize;
    let mut _166: usize;
    let mut _167: bool;
    let _168: ();
    let _169: ();
    let _170: ();
    let mut _171: std::fmt::Arguments<'_>;
    let mut _172: &[&str];
    let mut _173: &[core::fmt::rt::Argument<'_>];
    let _174: &[core::fmt::rt::Argument<'_>; 0];
    let _175: [core::fmt::rt::Argument<'_>; 0];
    let mut _176: AddFlags;
    let _177: ();
    let _178: ();
    let _179: ();
    let mut _180: std::fmt::Arguments<'_>;
    let mut _181: &[&str];
    let mut _182: &[core::fmt::rt::Argument<'_>];
    let _183: &[core::fmt::rt::Argument<'_>; 0];
    let _184: [core::fmt::rt::Argument<'_>; 0];
    let mut _185: (AddFlags, i32);
    let mut _186: AddFlags;
    let _187: ();
    let _188: ();
    let _189: ();
    let mut _190: std::fmt::Arguments<'_>;
    let mut _191: &[&str];
    let mut _192: &[core::fmt::rt::Argument<'_>];
    let _193: &[core::fmt::rt::Argument<'_>; 0];
    let _194: [core::fmt::rt::Argument<'_>; 0];
    let _195: &();
    let mut _196: ();
    let _197: &AddFlags;
    let _198: AddFlags;
    let _199: ();
    let _200: ();
    let _201: ();
    let mut _202: std::fmt::Arguments<'_>;
    let mut _203: &[&str];
    let mut _204: &[core::fmt::rt::Argument<'_>];
    let _205: &[core::fmt::rt::Argument<'_>; 0];
    let _206: [core::fmt::rt::Argument<'_>; 0];
    let _207: &u64;
    let mut _208: u64;
    let mut _209: &AddFlags;
    let _210: &AddFlags;
    let mut _211: &AddFlags;
    let _212: AddFlags;
    let _213: ();
    let _214: ();
    let _215: ();
    let mut _216: std::fmt::Arguments<'_>;
    let mut _217: &[&str];
    let mut _218: &[core::fmt::rt::Argument<'_>];
    let _219: &[core::fmt::rt::Argument<'_>; 0];
    let _220: [core::fmt::rt::Argument<'_>; 0];
    let _221: u64;
    let mut _222: AddFlags;
    let _223: ();
    let _224: ();
    let mut _225: &[&str; 1];
    let mut _226: &[&str; 1];
    let mut _227: &[&str; 1];
    let mut _228: &[&str; 1];
    let mut _229: &[&str; 1];
    let mut _230: &[&str; 1];
    let mut _231: &[&str; 1];
    let mut _232: &[&str; 1];
    let mut _233: &[&str; 1];
    let mut _234: &[&str; 1];
    let mut _235: &[&str; 1];
    let mut _236: &[&str; 1];
    let mut _237: &[&str; 1];
    let mut _238: &[&str; 1];
    let mut _239: &[&str; 1];
    let mut _240: &[&str; 1];
    let mut _241: &[&str; 1];
    let mut _242: &[&str; 1];
    let mut _243: &[&str; 1];
    let mut _244: &[&str; 1];
    let mut _245: &[&str; 1];
    let mut _246: &mut std::boxed::Box<AddFlags>;
    let mut _247: ();
    let mut _248: *const AddFlags;
    let mut _249: *const AddFlags;
    let mut _250: *const ();
    let mut _251: usize;
    let mut _252: usize;
    let mut _253: usize;
    let mut _254: usize;
    let mut _255: bool;
    let mut _256: *const ();
    let mut _257: usize;
    let mut _258: usize;
    let mut _259: usize;
    let mut _260: usize;
    let mut _261: bool;
    scope 1 {
        debug _x => _7;
    }
    scope 2 {
        debug _x => _16;
    }
    scope 3 {
        debug _x => _26;
    }
    scope 4 {
        debug _x => _37;
    }
    scope 5 {
        debug _x => _47;
    }
    scope 6 {
        debug _x => _58;
    }
    scope 7 {
        debug _x => _69;
    }
    scope 8 {
        debug _x => _79;
    }
    scope 9 {
        debug _x => _89;
    }
    scope 10 {
        debug bits => _99;
    }
    scope 11 {
        debug _y => _110;
    }
    scope 12 {
        debug _x => _121;
    }
    scope 13 {
        debug _x => _132;
    }
    scope 14 {
    }
    scope 15 {
    }
    scope 16 {
    }
    scope 17 {
    }
    scope 18 {
    }
    scope 19 {
        debug _x => _195;
    }
    scope 20 {
        debug _x => _207;
    }
    scope 21 {
        debug bits => _221;
    }

    bb0: {
        _245 = const _;
        _3 = _245 as &[&str] (Pointer(Unsize));
        _6 = core::fmt::rt::Argument::<'_>::none() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = AddFlags(const 1_u64) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = check_flags(const 0_u64) -> [return: bb5, unwind: bb173];
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind continue];
    }

    bb6: {
        _9 = check_flags(const 1_u64) -> [return: bb7, unwind continue];
    }

    bb7: {
        _244 = const _;
        _12 = _244 as &[&str] (Pointer(Unsize));
        _15 = core::fmt::rt::Argument::<'_>::none() -> [return: bb8, unwind continue];
    }

    bb8: {
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb9, unwind continue];
    }

    bb9: {
        _10 = _print(move _11) -> [return: bb10, unwind continue];
    }

    bb10: {
        _17 = AddFlags(const 1_u64) -> [return: bb11, unwind continue];
    }

    bb11: {
        _16 = &_17;
        _18 = check_flags(const 0_u64) -> [return: bb12, unwind: bb172];
    }

    bb12: {
        drop(_17) -> [return: bb13, unwind continue];
    }

    bb13: {
        _19 = check_flags(const 1_u64) -> [return: bb14, unwind continue];
    }

    bb14: {
        _243 = const _;
        _22 = _243 as &[&str] (Pointer(Unsize));
        _25 = core::fmt::rt::Argument::<'_>::none() -> [return: bb15, unwind continue];
    }

    bb15: {
        _24 = &_25;
        _23 = _24 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_v1(move _22, move _23) -> [return: bb16, unwind continue];
    }

    bb16: {
        _20 = _print(move _21) -> [return: bb17, unwind continue];
    }

    bb17: {
        _28 = AddFlags(const 1_u64) -> [return: bb18, unwind continue];
    }

    bb18: {
        _27 = &_28;
        _26 = &_27;
        _29 = check_flags(const 0_u64) -> [return: bb19, unwind: bb171];
    }

    bb19: {
        drop(_28) -> [return: bb20, unwind continue];
    }

    bb20: {
        _30 = check_flags(const 1_u64) -> [return: bb21, unwind continue];
    }

    bb21: {
        _242 = const _;
        _33 = _242 as &[&str] (Pointer(Unsize));
        _36 = core::fmt::rt::Argument::<'_>::none() -> [return: bb22, unwind continue];
    }

    bb22: {
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _34) -> [return: bb23, unwind continue];
    }

    bb23: {
        _31 = _print(move _32) -> [return: bb24, unwind continue];
    }

    bb24: {
        _38 = AddFlags(const 1_u64) -> [return: bb25, unwind continue];
    }

    bb25: {
        _37 = Box::<AddFlags> { f: move _38 };
        _39 = check_flags(const 0_u64) -> [return: bb26, unwind: bb170];
    }

    bb26: {
        drop(_37) -> [return: bb27, unwind continue];
    }

    bb27: {
        _40 = check_flags(const 1_u64) -> [return: bb28, unwind continue];
    }

    bb28: {
        _241 = const _;
        _43 = _241 as &[&str] (Pointer(Unsize));
        _46 = core::fmt::rt::Argument::<'_>::none() -> [return: bb29, unwind continue];
    }

    bb29: {
        _45 = &_46;
        _44 = _45 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _42 = Arguments::<'_>::new_v1(move _43, move _44) -> [return: bb30, unwind continue];
    }

    bb30: {
        _41 = _print(move _42) -> [return: bb31, unwind continue];
    }

    bb31: {
        _49 = AddFlags(const 1_u64) -> [return: bb32, unwind continue];
    }

    bb32: {
        _48 = &_49;
        _47 = Box::<&AddFlags> { f: move _48 };
        _50 = check_flags(const 0_u64) -> [return: bb33, unwind: bb169];
    }

    bb33: {
        drop(_49) -> [return: bb34, unwind continue];
    }

    bb34: {
        _51 = check_flags(const 1_u64) -> [return: bb35, unwind continue];
    }

    bb35: {
        _240 = const _;
        _54 = _240 as &[&str] (Pointer(Unsize));
        _57 = core::fmt::rt::Argument::<'_>::none() -> [return: bb36, unwind continue];
    }

    bb36: {
        _56 = &_57;
        _55 = _56 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _53 = Arguments::<'_>::new_v1(move _54, move _55) -> [return: bb37, unwind continue];
    }

    bb37: {
        _52 = _print(move _53) -> [return: bb38, unwind continue];
    }

    bb38: {
        _60 = AddFlags(const 1_u64) -> [return: bb39, unwind continue];
    }

    bb39: {
        _59 = &_60;
        _58 = Box::<&AddFlags> { f: move _59 };
        _61 = check_flags(const 0_u64) -> [return: bb40, unwind: bb168];
    }

    bb40: {
        drop(_60) -> [return: bb41, unwind continue];
    }

    bb41: {
        _62 = check_flags(const 1_u64) -> [return: bb42, unwind continue];
    }

    bb42: {
        _239 = const _;
        _65 = _239 as &[&str] (Pointer(Unsize));
        _68 = core::fmt::rt::Argument::<'_>::none() -> [return: bb43, unwind continue];
    }

    bb43: {
        _67 = &_68;
        _66 = _67 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _64 = Arguments::<'_>::new_v1(move _65, move _66) -> [return: bb44, unwind continue];
    }

    bb44: {
        _63 = _print(move _64) -> [return: bb45, unwind continue];
    }

    bb45: {
        _70 = AddFlags(const 1_u64) -> [return: bb46, unwind continue];
    }

    bb46: {
        _69 = pass::<AddFlags>(move _70) -> [return: bb47, unwind continue];
    }

    bb47: {
        _71 = check_flags(const 0_u64) -> [return: bb48, unwind: bb167];
    }

    bb48: {
        drop(_69) -> [return: bb49, unwind continue];
    }

    bb49: {
        _72 = check_flags(const 1_u64) -> [return: bb50, unwind continue];
    }

    bb50: {
        _238 = const _;
        _75 = _238 as &[&str] (Pointer(Unsize));
        _78 = core::fmt::rt::Argument::<'_>::none() -> [return: bb51, unwind continue];
    }

    bb51: {
        _77 = &_78;
        _76 = _77 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _74 = Arguments::<'_>::new_v1(move _75, move _76) -> [return: bb52, unwind continue];
    }

    bb52: {
        _73 = _print(move _74) -> [return: bb53, unwind continue];
    }

    bb53: {
        _80 = AddFlags(const 1_u64) -> [return: bb54, unwind continue];
    }

    bb54: {
        _79 = &_80;
        _81 = check_flags(const 0_u64) -> [return: bb55, unwind: bb166];
    }

    bb55: {
        drop(_80) -> [return: bb56, unwind continue];
    }

    bb56: {
        _82 = check_flags(const 1_u64) -> [return: bb57, unwind continue];
    }

    bb57: {
        _237 = const _;
        _85 = _237 as &[&str] (Pointer(Unsize));
        _88 = core::fmt::rt::Argument::<'_>::none() -> [return: bb58, unwind continue];
    }

    bb58: {
        _87 = &_88;
        _86 = _87 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _84 = Arguments::<'_>::new_v1(move _85, move _86) -> [return: bb59, unwind continue];
    }

    bb59: {
        _83 = _print(move _84) -> [return: bb60, unwind continue];
    }

    bb60: {
        _90 = AddFlags(const 1_u64) -> [return: bb61, unwind continue];
    }

    bb61: {
        _89 = &(_90.0: u64);
        _91 = check_flags(const 0_u64) -> [return: bb62, unwind: bb165];
    }

    bb62: {
        drop(_90) -> [return: bb63, unwind continue];
    }

    bb63: {
        _92 = check_flags(const 1_u64) -> [return: bb64, unwind continue];
    }

    bb64: {
        _236 = const _;
        _95 = _236 as &[&str] (Pointer(Unsize));
        _98 = core::fmt::rt::Argument::<'_>::none() -> [return: bb65, unwind continue];
    }

    bb65: {
        _97 = &_98;
        _96 = _97 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _94 = Arguments::<'_>::new_v1(move _95, move _96) -> [return: bb66, unwind continue];
    }

    bb66: {
        _93 = _print(move _94) -> [return: bb67, unwind continue];
    }

    bb67: {
        _101 = AddFlags(const 1_u64) -> [return: bb68, unwind continue];
    }

    bb68: {
        _100 = &_101;
        _99 = ((*_100).0: u64);
        _102 = check_flags(const 0_u64) -> [return: bb69, unwind: bb164];
    }

    bb69: {
        drop(_101) -> [return: bb70, unwind continue];
    }

    bb70: {
        _103 = check_flags(const 1_u64) -> [return: bb71, unwind continue];
    }

    bb71: {
        _235 = const _;
        _106 = _235 as &[&str] (Pointer(Unsize));
        _109 = core::fmt::rt::Argument::<'_>::none() -> [return: bb72, unwind continue];
    }

    bb72: {
        _108 = &_109;
        _107 = _108 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _105 = Arguments::<'_>::new_v1(move _106, move _107) -> [return: bb73, unwind continue];
    }

    bb73: {
        _104 = _print(move _105) -> [return: bb74, unwind continue];
    }

    bb74: {
        _112 = AddFlags(const 1_u64) -> [return: bb75, unwind continue];
    }

    bb75: {
        _111 = (move _112, const 22_i32);
        _110 = &(_111.1: i32);
        _113 = check_flags(const 0_u64) -> [return: bb76, unwind: bb163];
    }

    bb76: {
        drop(_111) -> [return: bb77, unwind continue];
    }

    bb77: {
        _114 = check_flags(const 1_u64) -> [return: bb78, unwind continue];
    }

    bb78: {
        _234 = const _;
        _117 = _234 as &[&str] (Pointer(Unsize));
        _120 = core::fmt::rt::Argument::<'_>::none() -> [return: bb79, unwind continue];
    }

    bb79: {
        _119 = &_120;
        _118 = _119 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _116 = Arguments::<'_>::new_v1(move _117, move _118) -> [return: bb80, unwind continue];
    }

    bb80: {
        _115 = _print(move _116) -> [return: bb81, unwind continue];
    }

    bb81: {
        _123 = AddFlags(const 1_u64) -> [return: bb82, unwind continue];
    }

    bb82: {
        _122 = std::boxed::Box::<AddFlags>::new(move _123) -> [return: bb83, unwind continue];
    }

    bb83: {
        _248 = (((_122.0: std::ptr::Unique<AddFlags>).0: std::ptr::NonNull<AddFlags>).0: *const AddFlags);
        _256 = _248 as *const () (PtrToPtr);
        _257 = _256 as usize (Transmute);
        _258 = AlignOf(AddFlags);
        _259 = Sub(_258, const 1_usize);
        _260 = BitAnd(_257, _259);
        _261 = Eq(_260, const 0_usize);
        assert(_261, "misaligned pointer dereference: address must be a multiple of {} but is {}", _258, _257) -> [success: bb177, unwind unreachable];
    }

    bb84: {
        drop(_122) -> [return: bb85, unwind continue];
    }

    bb85: {
        _125 = check_flags(const 1_u64) -> [return: bb86, unwind continue];
    }

    bb86: {
        _233 = const _;
        _128 = _233 as &[&str] (Pointer(Unsize));
        _131 = core::fmt::rt::Argument::<'_>::none() -> [return: bb87, unwind continue];
    }

    bb87: {
        _130 = &_131;
        _129 = _130 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _127 = Arguments::<'_>::new_v1(move _128, move _129) -> [return: bb88, unwind continue];
    }

    bb88: {
        _126 = _print(move _127) -> [return: bb89, unwind continue];
    }

    bb89: {
        _134 = AddFlags(const 1_u64) -> [return: bb90, unwind continue];
    }

    bb90: {
        _133 = std::boxed::Box::<AddFlags>::new(move _134) -> [return: bb91, unwind continue];
    }

    bb91: {
        _249 = (((_133.0: std::ptr::Unique<AddFlags>).0: std::ptr::NonNull<AddFlags>).0: *const AddFlags);
        _250 = _249 as *const () (PtrToPtr);
        _251 = _250 as usize (Transmute);
        _252 = AlignOf(AddFlags);
        _253 = Sub(_252, const 1_usize);
        _254 = BitAnd(_251, _253);
        _255 = Eq(_254, const 0_usize);
        assert(_255, "misaligned pointer dereference: address must be a multiple of {} but is {}", _252, _251) -> [success: bb176, unwind unreachable];
    }

    bb92: {
        drop(_132) -> [return: bb93, unwind continue];
    }

    bb93: {
        _136 = check_flags(const 1_u64) -> [return: bb94, unwind continue];
    }

    bb94: {
        _232 = const _;
        _139 = _232 as &[&str] (Pointer(Unsize));
        _142 = core::fmt::rt::Argument::<'_>::none() -> [return: bb95, unwind continue];
    }

    bb95: {
        _141 = &_142;
        _140 = _141 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _138 = Arguments::<'_>::new_v1(move _139, move _140) -> [return: bb96, unwind continue];
    }

    bb96: {
        _137 = _print(move _138) -> [return: bb97, unwind continue];
    }

    bb97: {
        _143 = check_flags(const 0_u64) -> [return: bb98, unwind continue];
    }

    bb98: {
        _144 = AddFlags(const 1_u64) -> [return: bb99, unwind continue];
    }

    bb99: {
        _145 = check_flags(const 0_u64) -> [return: bb100, unwind: bb160];
    }

    bb100: {
        drop(_144) -> [return: bb101, unwind continue];
    }

    bb101: {
        _146 = check_flags(const 1_u64) -> [return: bb102, unwind continue];
    }

    bb102: {
        _231 = const _;
        _149 = _231 as &[&str] (Pointer(Unsize));
        _152 = core::fmt::rt::Argument::<'_>::none() -> [return: bb103, unwind continue];
    }

    bb103: {
        _151 = &_152;
        _150 = _151 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _148 = Arguments::<'_>::new_v1(move _149, move _150) -> [return: bb104, unwind continue];
    }

    bb104: {
        _147 = _print(move _148) -> [return: bb105, unwind continue];
    }

    bb105: {
        _154 = AddFlags(const 1_u64) -> [return: bb106, unwind continue];
    }

    bb106: {
        _153 = Box::<AddFlags> { f: move _154 };
        _155 = check_flags(const 0_u64) -> [return: bb107, unwind: bb159];
    }

    bb107: {
        drop(_153) -> [return: bb108, unwind continue];
    }

    bb108: {
        _156 = check_flags(const 1_u64) -> [return: bb109, unwind continue];
    }

    bb109: {
        _230 = const _;
        _159 = _230 as &[&str] (Pointer(Unsize));
        _162 = core::fmt::rt::Argument::<'_>::none() -> [return: bb110, unwind continue];
    }

    bb110: {
        _161 = &_162;
        _160 = _161 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _158 = Arguments::<'_>::new_v1(move _159, move _160) -> [return: bb111, unwind continue];
    }

    bb111: {
        _157 = _print(move _158) -> [return: bb112, unwind continue];
    }

    bb112: {
        _164 = AddFlags(const 1_u64) -> [return: bb113, unwind continue];
    }

    bb113: {
        _163 = [move _164];
        _165 = const 0_usize;
        _166 = const 1_usize;
        _167 = Lt(_165, _166);
        assert(move _167, "index out of bounds: the length is {} but the index is {}", move _166, _165) -> [success: bb114, unwind: bb158];
    }

    bb114: {
        _168 = check_flags(const 0_u64) -> [return: bb115, unwind: bb158];
    }

    bb115: {
        drop(_163) -> [return: bb116, unwind continue];
    }

    bb116: {
        _169 = check_flags(const 1_u64) -> [return: bb117, unwind continue];
    }

    bb117: {
        _229 = const _;
        _172 = _229 as &[&str] (Pointer(Unsize));
        _175 = core::fmt::rt::Argument::<'_>::none() -> [return: bb118, unwind continue];
    }

    bb118: {
        _174 = &_175;
        _173 = _174 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _171 = Arguments::<'_>::new_v1(move _172, move _173) -> [return: bb119, unwind continue];
    }

    bb119: {
        _170 = _print(move _171) -> [return: bb120, unwind continue];
    }

    bb120: {
        _176 = AddFlags(const 1_u64) -> [return: bb121, unwind continue];
    }

    bb121: {
        drop(_176) -> [return: bb122, unwind continue];
    }

    bb122: {
        _177 = check_flags(const 1_u64) -> [return: bb123, unwind continue];
    }

    bb123: {
        _178 = check_flags(const 0_u64) -> [return: bb124, unwind continue];
    }

    bb124: {
        _228 = const _;
        _181 = _228 as &[&str] (Pointer(Unsize));
        _184 = core::fmt::rt::Argument::<'_>::none() -> [return: bb125, unwind continue];
    }

    bb125: {
        _183 = &_184;
        _182 = _183 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _180 = Arguments::<'_>::new_v1(move _181, move _182) -> [return: bb126, unwind continue];
    }

    bb126: {
        _179 = _print(move _180) -> [return: bb127, unwind continue];
    }

    bb127: {
        _186 = AddFlags(const 1_u64) -> [return: bb128, unwind continue];
    }

    bb128: {
        _185 = (move _186, const 22_i32);
        drop(_185) -> [return: bb129, unwind continue];
    }

    bb129: {
        _187 = check_flags(const 1_u64) -> [return: bb130, unwind continue];
    }

    bb130: {
        _188 = check_flags(const 0_u64) -> [return: bb131, unwind continue];
    }

    bb131: {
        _227 = const _;
        _191 = _227 as &[&str] (Pointer(Unsize));
        _194 = core::fmt::rt::Argument::<'_>::none() -> [return: bb132, unwind continue];
    }

    bb132: {
        _193 = &_194;
        _192 = _193 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _190 = Arguments::<'_>::new_v1(move _191, move _192) -> [return: bb133, unwind continue];
    }

    bb133: {
        _189 = _print(move _190) -> [return: bb134, unwind continue];
    }

    bb134: {
        _198 = AddFlags(const 1_u64) -> [return: bb135, unwind continue];
    }

    bb135: {
        _197 = &_198;
        _196 = arg(const 0_u64, _197) -> [return: bb136, unwind: bb157];
    }

    bb136: {
        _195 = &_196;
        drop(_198) -> [return: bb137, unwind continue];
    }

    bb137: {
        _199 = check_flags(const 1_u64) -> [return: bb138, unwind continue];
    }

    bb138: {
        _200 = check_flags(const 0_u64) -> [return: bb139, unwind continue];
    }

    bb139: {
        _226 = const _;
        _203 = _226 as &[&str] (Pointer(Unsize));
        _206 = core::fmt::rt::Argument::<'_>::none() -> [return: bb140, unwind continue];
    }

    bb140: {
        _205 = &_206;
        _204 = _205 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _202 = Arguments::<'_>::new_v1(move _203, move _204) -> [return: bb141, unwind continue];
    }

    bb141: {
        _201 = _print(move _202) -> [return: bb142, unwind continue];
    }

    bb142: {
        _212 = AddFlags(const 1_u64) -> [return: bb143, unwind continue];
    }

    bb143: {
        _211 = &_212;
        _210 = AddFlags::check_flags(move _211, const 0_u64) -> [return: bb144, unwind: bb156];
    }

    bb144: {
        _209 = _210;
        _208 = AddFlags::bits(move _209) -> [return: bb145, unwind: bb156];
    }

    bb145: {
        _207 = &_208;
        drop(_212) -> [return: bb146, unwind continue];
    }

    bb146: {
        _213 = check_flags(const 1_u64) -> [return: bb147, unwind continue];
    }

    bb147: {
        _214 = check_flags(const 0_u64) -> [return: bb148, unwind continue];
    }

    bb148: {
        _225 = const _;
        _217 = _225 as &[&str] (Pointer(Unsize));
        _220 = core::fmt::rt::Argument::<'_>::none() -> [return: bb149, unwind continue];
    }

    bb149: {
        _219 = &_220;
        _218 = _219 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _216 = Arguments::<'_>::new_v1(move _217, move _218) -> [return: bb150, unwind continue];
    }

    bb150: {
        _215 = _print(move _216) -> [return: bb151, unwind continue];
    }

    bb151: {
        _222 = AddFlags(const 1_u64) -> [return: bb152, unwind continue];
    }

    bb152: {
        _221 = (_222.0: u64);
        drop(_222) -> [return: bb153, unwind continue];
    }

    bb153: {
        _223 = check_flags(const 1_u64) -> [return: bb154, unwind continue];
    }

    bb154: {
        _224 = check_flags(const 0_u64) -> [return: bb155, unwind continue];
    }

    bb155: {
        return;
    }

    bb156 (cleanup): {
        drop(_212) -> [return: bb174, unwind terminate];
    }

    bb157 (cleanup): {
        drop(_198) -> [return: bb174, unwind terminate];
    }

    bb158 (cleanup): {
        drop(_163) -> [return: bb174, unwind terminate];
    }

    bb159 (cleanup): {
        drop(_153) -> [return: bb174, unwind terminate];
    }

    bb160 (cleanup): {
        drop(_144) -> [return: bb174, unwind terminate];
    }

    bb161 (cleanup): {
        drop(_132) -> [return: bb174, unwind terminate];
    }

    bb162 (cleanup): {
        drop(_122) -> [return: bb174, unwind terminate];
    }

    bb163 (cleanup): {
        drop(_111) -> [return: bb174, unwind terminate];
    }

    bb164 (cleanup): {
        drop(_101) -> [return: bb174, unwind terminate];
    }

    bb165 (cleanup): {
        drop(_90) -> [return: bb174, unwind terminate];
    }

    bb166 (cleanup): {
        drop(_80) -> [return: bb174, unwind terminate];
    }

    bb167 (cleanup): {
        drop(_69) -> [return: bb174, unwind terminate];
    }

    bb168 (cleanup): {
        drop(_60) -> [return: bb174, unwind terminate];
    }

    bb169 (cleanup): {
        drop(_49) -> [return: bb174, unwind terminate];
    }

    bb170 (cleanup): {
        drop(_37) -> [return: bb174, unwind terminate];
    }

    bb171 (cleanup): {
        drop(_28) -> [return: bb174, unwind terminate];
    }

    bb172 (cleanup): {
        drop(_17) -> [return: bb174, unwind terminate];
    }

    bb173 (cleanup): {
        drop(_7) -> [return: bb174, unwind terminate];
    }

    bb174 (cleanup): {
        resume;
    }

    bb175: {
        _135 = check_flags(const 0_u64) -> [return: bb92, unwind: bb161];
    }

    bb176: {
        _132 = move (*_249);
        _246 = &mut _133;
        _247 = <std::boxed::Box<AddFlags> as Drop>::drop(move _246) -> [return: bb175, unwind: bb161];
    }

    bb177: {
        _121 = &(*_248);
        _124 = check_flags(const 0_u64) -> [return: bb84, unwind: bb162];
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_stmt(AddFlags(1))\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_stmt(AddFlags(1).check_flags(0).bits())\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_stmt(arg(0, &AddFlags(1)))\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_stmt((AddFlags(1), 22))\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_stmt(AddFlags(1))\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _ = &(([AddFlags(1)])[0]) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _ = &((Box { f: AddFlags(1) }).f) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _ = { { check_flags(0); &AddFlags(1) } } ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let box _x = std::boxed::Box::new(AddFlags(1)) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let box ref _x = std::boxed::Box::new(AddFlags(1)) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let (_, ref _y) = (AddFlags(1), 22) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let &AddFlags { bits } = &AddFlags(1) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let AddFlags { bits: ref _x } = AddFlags(1) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let ref _x = AddFlags(1) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _x = pass(AddFlags(1)) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _x = Box { f: &AddFlags(1) } ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _x = Box { f: &AddFlags(1) } ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _x = Box { f: AddFlags(1) } ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _x = &&AddFlags(1) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _x = &AddFlags(1) ; })\n"];
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "end_of_block({ let _x = AddFlags(1) ; })\n"];
        _0 = &_1;
        return;
    }
}
