// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
EntriesBuffer::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:36: 4:52

    bb0: {
        _0 = const _;                    // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:36: 4:52
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:36: 4:52
    }
}

EntriesBuffer::0::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:55: 4:56

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:55: 4:56
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:55: 4:56
    }
}

fn <impl at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:6:1: 6:19>::iter_child_buffers(_1: &mut EntriesBuffer) -> impl Iterator<Item = &mut [u8; HashesEntry::LEN]> {
    debug self => _1;                    // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:7:31: 7:40
    let mut _0: impl std::iter::Iterator<Item = &mut [u8; HashesEntry::LEN]>; // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:7:45: 7:94
    let mut _2: &mut [[u8; 1]];          // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:8:9: 8:26
    let mut _3: &mut [[u8; 1]; 5];       // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:8:9: 8:26
    let mut _4: std::boxed::Box<[[u8; 1]; 5]>; // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:7:31: 7:40
    let mut _5: *const [[u8; 1]; 5];     // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:7:31: 7:40

    bb0: {
        _4 = deref_copy ((*_1).0: std::boxed::Box<[[u8; 1]; 5]>); // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:8:9: 8:26
        _5 = (((_4.0: std::ptr::Unique<[[u8; 1]; 5]>).0: std::ptr::NonNull<[[u8; 1]; 5]>).0: *const [[u8; 1]; 5]); // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:8:9: 8:26
        _3 = &mut (*_5);                 // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:8:9: 8:26
        _2 = move _3 as &mut [[u8; 1]] (Pointer(Unsize)); // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:8:9: 8:26
        _0 = core::slice::<impl [[u8; 1]]>::iter_mut(move _2) -> bb1; // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:8:9: 8:26
                                         // mir::Constant
                                         // + span: ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:8:16: 8:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut [[u8; 1]]) -> std::slice::IterMut<'a, [u8; 1]> {core::slice::<impl [[u8; 1]]>::iter_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:9:6: 9:6
    }
}

<impl at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:6:1: 6:19>::iter_child_buffers::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:7:76: 7:92

    bb0: {
        _0 = const _;                    // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:7:76: 7:92
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:7:76: 7:92
    }
}

fn <impl at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:6:1: 6:19>::iter_child_buffers_explicit(_1: &mut EntriesBuffer) -> impl Iterator<Item = &mut [u8; HashesEntry::<'_>::LEN]> {
    debug self => _1;                    // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:12:9: 12:18
    let mut _0: impl std::iter::Iterator<Item = &mut [u8; HashesEntry::<'_>::LEN]>; // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:13:10: 13:65
    let mut _2: &mut [[u8; 1]];          // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:14:9: 14:26
    let mut _3: &mut [[u8; 1]; 5];       // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:14:9: 14:26
    let mut _4: std::boxed::Box<[[u8; 1]; 5]>; // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:12:9: 12:18
    let mut _5: *const [[u8; 1]; 5];     // in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:12:9: 12:18

    bb0: {
        _4 = deref_copy ((*_1).0: std::boxed::Box<[[u8; 1]; 5]>); // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:14:9: 14:26
        _5 = (((_4.0: std::ptr::Unique<[[u8; 1]; 5]>).0: std::ptr::NonNull<[[u8; 1]; 5]>).0: *const [[u8; 1]; 5]); // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:14:9: 14:26
        _3 = &mut (*_5);                 // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:14:9: 14:26
        _2 = move _3 as &mut [[u8; 1]] (Pointer(Unsize)); // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:14:9: 14:26
        _0 = core::slice::<impl [[u8; 1]]>::iter_mut(move _2) -> bb1; // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:14:9: 14:26
                                         // mir::Constant
                                         // + span: ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:14:16: 14:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut [[u8; 1]]) -> std::slice::IterMut<'a, [u8; 1]> {core::slice::<impl [[u8; 1]]>::iter_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:15:6: 15:6
    }
}

<impl at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:6:1: 6:19>::iter_child_buffers_explicit::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:13:41: 13:63

    bb0: {
        _0 = const _;                    // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:13:41: 13:63
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:13:41: 13:63
    }
}

const <impl at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:20:1: 20:21>::LEN: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:21:20: 21:25

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:21:28: 21:29
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:21:5: 21:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:24:11: 24:11

    bb0: {
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:24:13: 24:13
    }
}

fn EntriesBuffer(_1: Box<[[u8; 1]; 5]>) -> EntriesBuffer {
    let mut _0: EntriesBuffer;           // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:1: 4:25

    bb0: {
        _0 = EntriesBuffer(move _1);     // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:1: 4:25
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:1: 4:25
    }
}

// MIR FOR CTFE
fn EntriesBuffer(_1: Box<[[u8; 1]; 5]>) -> EntriesBuffer {
    let mut _0: EntriesBuffer;           // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:1: 4:25

    bb0: {
        _0 = EntriesBuffer(move _1);     // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:1: 4:25
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:4:1: 4:25
    }
}

fn HashesEntry(_1: &[u8]) -> HashesEntry<'_> {
    let mut _0: HashesEntry<'_>;         // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:18:1: 18:27

    bb0: {
        _0 = HashesEntry::<'_>(move _1); // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:18:1: 18:27
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:18:1: 18:27
    }
}

// MIR FOR CTFE
fn HashesEntry(_1: &[u8]) -> HashesEntry<'_> {
    let mut _0: HashesEntry<'_>;         // return place in scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:18:1: 18:27

    bb0: {
        _0 = HashesEntry::<'_>(move _1); // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:18:1: 18:27
        return;                          // scope 0 at ui/impl-header-lifetime-elision/constant-used-as-arraylen.rs:18:1: 18:27
    }
}
