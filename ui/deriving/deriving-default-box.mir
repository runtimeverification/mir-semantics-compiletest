// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-default-box.rs:4:10: 4:17>::default() -> A {
    let mut _0: A;                       // return place in scope 0 at ui/deriving/deriving-default-box.rs:4:10: 4:17
    let mut _1: std::boxed::Box<[bool]>; // in scope 0 at ui/deriving/deriving-default-box.rs:6:5: 6:21

    bb0: {
        _1 = <Box<[bool]> as Default>::default() -> bb1; // scope 0 at ui/deriving/deriving-default-box.rs:6:5: 6:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-box.rs:6:5: 6:21
                                         // + literal: Const { ty: fn() -> Box<[bool]> {<Box<[bool]> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = A { foo: move _1 };         // scope 0 at ui/deriving/deriving-default-box.rs:4:10: 4:17
        return;                          // scope 0 at ui/deriving/deriving-default-box.rs:4:17: 4:17
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-default-box.rs:9:15: 9:15
    let _1: A;                           // in scope 0 at ui/deriving/deriving-default-box.rs:10:9: 10:10
    let mut _3: std::boxed::Box<[bool; 0]>; // in scope 0 at ui/deriving/deriving-default-box.rs:11:23: 11:48
    let mut _4: [bool; 0];               // in scope 0 at ui/deriving/deriving-default-box.rs:11:45: 11:47
    let mut _5: (&std::boxed::Box<[bool]>, &std::boxed::Box<[bool]>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &std::boxed::Box<[bool]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &std::boxed::Box<[bool]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &std::boxed::Box<[bool]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &std::boxed::Box<[bool]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &std::boxed::Box<[bool]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &std::boxed::Box<[bool]>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &std::boxed::Box<[bool]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &std::boxed::Box<[bool]>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/deriving/deriving-default-box.rs:10:9: 10:10
        let _2: std::boxed::Box<[bool]>; // in scope 1 at ui/deriving/deriving-default-box.rs:11:9: 11:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/deriving/deriving-default-box.rs:11:9: 11:10
            let _8: &std::boxed::Box<[bool]>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _9: &std::boxed::Box<[bool]>; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _8;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _9;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _14: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _14;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = <A as Default>::default() -> bb1; // scope 0 at ui/deriving/deriving-default-box.rs:10:16: 10:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-box.rs:10:16: 10:32
                                         // + literal: Const { ty: fn() -> A {<A as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Box::<[bool; 0]>::new(move _4) -> [return: bb2, unwind: bb9]; // scope 1 at ui/deriving/deriving-default-box.rs:11:23: 11:48
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-box.rs:11:23: 11:44
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn([bool; 0]) -> Box<[bool; 0]> {Box::<[bool; 0]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = move _3 as std::boxed::Box<[bool]> (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-default-box.rs:11:23: 11:48
        _6 = &(_1.0: std::boxed::Box<[bool]>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &std::boxed::Box<[bool]>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &std::boxed::Box<[bool]>); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <Box<[bool]> as PartialEq>::eq(move _12, move _13) -> [return: bb3, unwind: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<[bool]>, &'b Box<[bool]>) -> bool {<Box<[bool]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Not(move _11);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<Box<[bool]>, Box<[bool]>>(move _16, move _17, move _19, move _21) -> bb8; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Box<[bool]>, &'b Box<[bool]>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Box<[bool]>, Box<[bool]>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_2) -> [return: bb6, unwind: bb9]; // scope 1 at ui/deriving/deriving-default-box.rs:13:1: 13:2
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/deriving/deriving-default-box.rs:13:1: 13:2
    }

    bb7: {
        return;                          // scope 0 at ui/deriving/deriving-default-box.rs:13:2: 13:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb9;                 // scope 1 at ui/deriving/deriving-default-box.rs:13:1: 13:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/deriving/deriving-default-box.rs:13:1: 13:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-default-box.rs:9:1: 13:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/deriving/deriving-default-box.rs:11:36: 11:37

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/deriving/deriving-default-box.rs:11:36: 11:37
        return;                          // scope 0 at ui/deriving/deriving-default-box.rs:11:36: 11:37
    }
}
