// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-show-2.rs:5:10: 5:15>::fmt(_1: &A, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    scope 1 {
    }

    bb0: {
        unreachable;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:7:10: 7:15>::fmt(_1: &B, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "B3";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "B1";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "B2";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:9:10: 9:15>::fmt(_1: &C, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &isize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&isize;
    let _8: &B;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&B;
    let _12: &std::string::String;
    let _13: &str;
    let mut _14: &dyn std::fmt::Debug;
    let _15: &&std::string::String;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }
    scope 3 {
        debug __self_0 => _12;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = &(((*_1) as C3).0: std::string::String);
        _13 = const "C3";
        _15 = &_12;
        _14 = _15 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _13, move _14) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as C1).0: isize);
        _5 = const "C1";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as C2).0: B);
        _9 = const "C2";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:11:10: 11:15>::fmt(_1: &D, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &isize;
    let _4: &str;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&isize;
    scope 1 {
        debug __self_0 => _3;
    }

    bb0: {
        _3 = &(((*_1) as D1).0: isize);
        _4 = const "D1";
        _5 = const "a";
        _7 = &_3;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _4, _5, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:13:10: 13:15>::fmt(_1: &E, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "E";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:15:10: 15:15>::fmt(_1: &F, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&isize;
    let _6: &isize;

    bb0: {
        _3 = const "F";
        _6 = &((*_1).0: isize);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:17:10: 17:15>::fmt(_1: &G, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &isize;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&isize;
    let _8: &isize;

    bb0: {
        _3 = const "G";
        _5 = &((*_1).0: isize);
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _8 = &((*_1).1: isize);
        _7 = &_8;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _3, move _4, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:19:10: 19:15>::fmt(_1: &H, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &&isize;
    let _7: &isize;

    bb0: {
        _3 = const "H";
        _4 = const "a";
        _7 = &((*_1).0: isize);
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field1_finish(_2, _3, _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:21:10: 21:15>::fmt(_1: &I, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&isize;
    let _10: &isize;

    bb0: {
        _3 = const "I";
        _4 = const "a";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "b";
        _10 = &((*_1).1: isize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:23:10: 23:15>::fmt(_1: &J, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&Custom;
    let _6: &Custom;

    bb0: {
        _3 = const "J";
        _6 = &((*_1).0: Custom);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:27:1: 27:27>::fmt(_1: &Custom, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[&str; 1];

    bb0: {
        _5 = const _;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(_2, move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in <impl at ui/deriving/deriving-show-2.rs:27:1: 27:27>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "yay"];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:37:1: 37:34>::to_show(_1: &T) -> String {
    debug self => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &&T;
    let mut _10: &[&str; 1];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = &_1;
        _8 = core::fmt::rt::Argument::<'_>::new_debug::<&T>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = move _2;
        return;
    }
}

promoted[0] in <impl at ui/deriving/deriving-show-2.rs:37:1: 37:34>::to_show: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &std::string::String);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let mut _4: &std::string::String;
    let _5: std::string::String;
    let _6: &str;
    let _7: &std::string::String;
    let _8: &std::string::String;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&std::string::String, &std::string::String);
    let mut _15: &std::string::String;
    let _16: std::string::String;
    let mut _17: &std::string::String;
    let _18: std::string::String;
    let _19: &str;
    let _20: &std::string::String;
    let _21: &std::string::String;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&std::string::String, &std::string::String);
    let mut _28: &std::string::String;
    let _29: std::string::String;
    let mut _30: &std::string::String;
    let _31: std::string::String;
    let _32: &str;
    let _33: &std::string::String;
    let _34: &std::string::String;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&std::string::String, &std::string::String);
    let mut _41: &std::string::String;
    let _42: std::string::String;
    let mut _43: &std::string::String;
    let _44: std::string::String;
    let _45: &str;
    let _46: &std::string::String;
    let _47: &std::string::String;
    let mut _48: bool;
    let mut _49: bool;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&std::string::String, &std::string::String);
    let mut _54: &std::string::String;
    let _55: std::string::String;
    let mut _56: &std::string::String;
    let _57: std::string::String;
    let _58: &str;
    let _59: &std::string::String;
    let _60: &std::string::String;
    let mut _61: bool;
    let mut _62: bool;
    let _64: !;
    let mut _65: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _66: (&std::string::String, &std::string::String);
    let mut _67: &std::string::String;
    let _68: std::string::String;
    let mut _69: &std::string::String;
    let _70: std::string::String;
    let _71: &str;
    let _72: &std::string::String;
    let _73: &std::string::String;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: (&std::string::String, &std::string::String);
    let mut _80: &std::string::String;
    let _81: std::string::String;
    let mut _82: &std::string::String;
    let _83: std::string::String;
    let _84: &str;
    let _85: &std::string::String;
    let _86: &std::string::String;
    let mut _87: bool;
    let mut _88: bool;
    let _90: !;
    let mut _91: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _92: (&std::string::String, &std::string::String);
    let mut _93: &std::string::String;
    let _94: std::string::String;
    let mut _95: &std::string::String;
    let _96: std::string::String;
    let _97: &str;
    let _98: &std::string::String;
    let _99: &std::string::String;
    let mut _100: bool;
    let mut _101: bool;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _105: (&std::string::String, &std::string::String);
    let mut _106: &std::string::String;
    let _107: std::string::String;
    let mut _108: &std::string::String;
    let _109: std::string::String;
    let _110: &str;
    let _111: &std::string::String;
    let _112: &std::string::String;
    let mut _113: bool;
    let mut _114: bool;
    let _116: !;
    let mut _117: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _118: (&std::string::String, &std::string::String);
    let mut _119: &std::string::String;
    let _120: std::string::String;
    let mut _121: &std::string::String;
    let _122: std::string::String;
    let _123: &str;
    let _124: &std::string::String;
    let _125: &std::string::String;
    let mut _126: bool;
    let mut _127: bool;
    let _129: !;
    let mut _130: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _131: &J;
    let mut _132: &I;
    let mut _133: &G;
    let mut _134: &F;
    let mut _135: &E;
    let mut _136: &D;
    let mut _137: &C;
    let mut _138: &C;
    let mut _139: &B;
    let mut _140: &B;
    scope 1 {
        debug left_val => _7;
        debug right_val => _8;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }
    scope 5 {
        debug left_val => _33;
        debug right_val => _34;
        let _37: core::panicking::AssertKind;
        scope 6 {
            debug kind => _37;
        }
    }
    scope 7 {
        debug left_val => _46;
        debug right_val => _47;
        let _50: core::panicking::AssertKind;
        scope 8 {
            debug kind => _50;
        }
    }
    scope 9 {
        debug left_val => _59;
        debug right_val => _60;
        let _63: core::panicking::AssertKind;
        scope 10 {
            debug kind => _63;
        }
    }
    scope 11 {
        debug left_val => _72;
        debug right_val => _73;
        let _76: core::panicking::AssertKind;
        scope 12 {
            debug kind => _76;
        }
    }
    scope 13 {
        debug left_val => _85;
        debug right_val => _86;
        let _89: core::panicking::AssertKind;
        scope 14 {
            debug kind => _89;
        }
    }
    scope 15 {
        debug left_val => _98;
        debug right_val => _99;
        let _102: core::panicking::AssertKind;
        scope 16 {
            debug kind => _102;
        }
    }
    scope 17 {
        debug left_val => _111;
        debug right_val => _112;
        let _115: core::panicking::AssertKind;
        scope 18 {
            debug kind => _115;
        }
    }
    scope 19 {
        debug left_val => _124;
        debug right_val => _125;
        let _128: core::panicking::AssertKind;
        scope 20 {
            debug kind => _128;
        }
    }

    bb0: {
        _140 = const _;
        _3 = <B as ToDebug>::to_show(_140) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _6 = const "B1";
        _5 = <str as ToString>::to_string(_6) -> [return: bb2, unwind: bb90];
    }

    bb2: {
        _4 = &_5;
        _1 = (move _2, move _4);
        _7 = (_1.0: &std::string::String);
        _8 = (_1.1: &std::string::String);
        _10 = <String as PartialEq>::eq(_7, _8) -> [return: bb3, unwind: bb89];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<String, String>(move _11, _7, _8, move _13) -> bb89;
    }

    bb5: {
        drop(_5) -> [return: bb6, unwind: bb90];
    }

    bb6: {
        drop(_3) -> [return: bb7, unwind continue];
    }

    bb7: {
        _139 = const _;
        _16 = <B as ToDebug>::to_show(_139) -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = &_16;
        _19 = const "B2";
        _18 = <str as ToString>::to_string(_19) -> [return: bb9, unwind: bb88];
    }

    bb9: {
        _17 = &_18;
        _14 = (move _15, move _17);
        _20 = (_14.0: &std::string::String);
        _21 = (_14.1: &std::string::String);
        _23 = <String as PartialEq>::eq(_20, _21) -> [return: bb10, unwind: bb87];
    }

    bb10: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<String, String>(move _24, _20, _21, move _26) -> bb87;
    }

    bb12: {
        drop(_18) -> [return: bb13, unwind: bb88];
    }

    bb13: {
        drop(_16) -> [return: bb14, unwind continue];
    }

    bb14: {
        _138 = const _;
        _29 = <C as ToDebug>::to_show(_138) -> [return: bb15, unwind continue];
    }

    bb15: {
        _28 = &_29;
        _32 = const "C1(3)";
        _31 = <str as ToString>::to_string(_32) -> [return: bb16, unwind: bb86];
    }

    bb16: {
        _30 = &_31;
        _27 = (move _28, move _30);
        _33 = (_27.0: &std::string::String);
        _34 = (_27.1: &std::string::String);
        _36 = <String as PartialEq>::eq(_33, _34) -> [return: bb17, unwind: bb85];
    }

    bb17: {
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<String, String>(move _37, _33, _34, move _39) -> bb85;
    }

    bb19: {
        drop(_31) -> [return: bb20, unwind: bb86];
    }

    bb20: {
        drop(_29) -> [return: bb21, unwind continue];
    }

    bb21: {
        _137 = const _;
        _42 = <C as ToDebug>::to_show(_137) -> [return: bb22, unwind continue];
    }

    bb22: {
        _41 = &_42;
        _45 = const "C2(B2)";
        _44 = <str as ToString>::to_string(_45) -> [return: bb23, unwind: bb84];
    }

    bb23: {
        _43 = &_44;
        _40 = (move _41, move _43);
        _46 = (_40.0: &std::string::String);
        _47 = (_40.1: &std::string::String);
        _49 = <String as PartialEq>::eq(_46, _47) -> [return: bb24, unwind: bb83];
    }

    bb24: {
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<String, String>(move _50, _46, _47, move _52) -> bb83;
    }

    bb26: {
        drop(_44) -> [return: bb27, unwind: bb84];
    }

    bb27: {
        drop(_42) -> [return: bb28, unwind continue];
    }

    bb28: {
        _136 = const _;
        _55 = <D as ToDebug>::to_show(_136) -> [return: bb29, unwind continue];
    }

    bb29: {
        _54 = &_55;
        _58 = const "D1 { a: 2 }";
        _57 = <str as ToString>::to_string(_58) -> [return: bb30, unwind: bb82];
    }

    bb30: {
        _56 = &_57;
        _53 = (move _54, move _56);
        _59 = (_53.0: &std::string::String);
        _60 = (_53.1: &std::string::String);
        _62 = <String as PartialEq>::eq(_59, _60) -> [return: bb31, unwind: bb81];
    }

    bb31: {
        _61 = Not(move _62);
        switchInt(move _61) -> [0: bb33, otherwise: bb32];
    }

    bb32: {
        _63 = core::panicking::AssertKind::Eq;
        _65 = Option::<Arguments<'_>>::None;
        _64 = core::panicking::assert_failed::<String, String>(move _63, _59, _60, move _65) -> bb81;
    }

    bb33: {
        drop(_57) -> [return: bb34, unwind: bb82];
    }

    bb34: {
        drop(_55) -> [return: bb35, unwind continue];
    }

    bb35: {
        _135 = const _;
        _68 = <E as ToDebug>::to_show(_135) -> [return: bb36, unwind continue];
    }

    bb36: {
        _67 = &_68;
        _71 = const "E";
        _70 = <str as ToString>::to_string(_71) -> [return: bb37, unwind: bb80];
    }

    bb37: {
        _69 = &_70;
        _66 = (move _67, move _69);
        _72 = (_66.0: &std::string::String);
        _73 = (_66.1: &std::string::String);
        _75 = <String as PartialEq>::eq(_72, _73) -> [return: bb38, unwind: bb79];
    }

    bb38: {
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<String, String>(move _76, _72, _73, move _78) -> bb79;
    }

    bb40: {
        drop(_70) -> [return: bb41, unwind: bb80];
    }

    bb41: {
        drop(_68) -> [return: bb42, unwind continue];
    }

    bb42: {
        _134 = const _;
        _81 = <F as ToDebug>::to_show(_134) -> [return: bb43, unwind continue];
    }

    bb43: {
        _80 = &_81;
        _84 = const "F(3)";
        _83 = <str as ToString>::to_string(_84) -> [return: bb44, unwind: bb78];
    }

    bb44: {
        _82 = &_83;
        _79 = (move _80, move _82);
        _85 = (_79.0: &std::string::String);
        _86 = (_79.1: &std::string::String);
        _88 = <String as PartialEq>::eq(_85, _86) -> [return: bb45, unwind: bb77];
    }

    bb45: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _89 = core::panicking::AssertKind::Eq;
        _91 = Option::<Arguments<'_>>::None;
        _90 = core::panicking::assert_failed::<String, String>(move _89, _85, _86, move _91) -> bb77;
    }

    bb47: {
        drop(_83) -> [return: bb48, unwind: bb78];
    }

    bb48: {
        drop(_81) -> [return: bb49, unwind continue];
    }

    bb49: {
        _133 = const _;
        _94 = <G as ToDebug>::to_show(_133) -> [return: bb50, unwind continue];
    }

    bb50: {
        _93 = &_94;
        _97 = const "G(3, 4)";
        _96 = <str as ToString>::to_string(_97) -> [return: bb51, unwind: bb76];
    }

    bb51: {
        _95 = &_96;
        _92 = (move _93, move _95);
        _98 = (_92.0: &std::string::String);
        _99 = (_92.1: &std::string::String);
        _101 = <String as PartialEq>::eq(_98, _99) -> [return: bb52, unwind: bb75];
    }

    bb52: {
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<String, String>(move _102, _98, _99, move _104) -> bb75;
    }

    bb54: {
        drop(_96) -> [return: bb55, unwind: bb76];
    }

    bb55: {
        drop(_94) -> [return: bb56, unwind continue];
    }

    bb56: {
        _132 = const _;
        _107 = <I as ToDebug>::to_show(_132) -> [return: bb57, unwind continue];
    }

    bb57: {
        _106 = &_107;
        _110 = const "I { a: 2, b: 4 }";
        _109 = <str as ToString>::to_string(_110) -> [return: bb58, unwind: bb74];
    }

    bb58: {
        _108 = &_109;
        _105 = (move _106, move _108);
        _111 = (_105.0: &std::string::String);
        _112 = (_105.1: &std::string::String);
        _114 = <String as PartialEq>::eq(_111, _112) -> [return: bb59, unwind: bb73];
    }

    bb59: {
        _113 = Not(move _114);
        switchInt(move _113) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _115 = core::panicking::AssertKind::Eq;
        _117 = Option::<Arguments<'_>>::None;
        _116 = core::panicking::assert_failed::<String, String>(move _115, _111, _112, move _117) -> bb73;
    }

    bb61: {
        drop(_109) -> [return: bb62, unwind: bb74];
    }

    bb62: {
        drop(_107) -> [return: bb63, unwind continue];
    }

    bb63: {
        _131 = const _;
        _120 = <J as ToDebug>::to_show(_131) -> [return: bb64, unwind continue];
    }

    bb64: {
        _119 = &_120;
        _123 = const "J(yay)";
        _122 = <str as ToString>::to_string(_123) -> [return: bb65, unwind: bb72];
    }

    bb65: {
        _121 = &_122;
        _118 = (move _119, move _121);
        _124 = (_118.0: &std::string::String);
        _125 = (_118.1: &std::string::String);
        _127 = <String as PartialEq>::eq(_124, _125) -> [return: bb66, unwind: bb71];
    }

    bb66: {
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _128 = core::panicking::AssertKind::Eq;
        _130 = Option::<Arguments<'_>>::None;
        _129 = core::panicking::assert_failed::<String, String>(move _128, _124, _125, move _130) -> bb71;
    }

    bb68: {
        drop(_122) -> [return: bb69, unwind: bb72];
    }

    bb69: {
        drop(_120) -> [return: bb70, unwind continue];
    }

    bb70: {
        return;
    }

    bb71 (cleanup): {
        drop(_122) -> [return: bb72, unwind terminate];
    }

    bb72 (cleanup): {
        drop(_120) -> [return: bb91, unwind terminate];
    }

    bb73 (cleanup): {
        drop(_109) -> [return: bb74, unwind terminate];
    }

    bb74 (cleanup): {
        drop(_107) -> [return: bb91, unwind terminate];
    }

    bb75 (cleanup): {
        drop(_96) -> [return: bb76, unwind terminate];
    }

    bb76 (cleanup): {
        drop(_94) -> [return: bb91, unwind terminate];
    }

    bb77 (cleanup): {
        drop(_83) -> [return: bb78, unwind terminate];
    }

    bb78 (cleanup): {
        drop(_81) -> [return: bb91, unwind terminate];
    }

    bb79 (cleanup): {
        drop(_70) -> [return: bb80, unwind terminate];
    }

    bb80 (cleanup): {
        drop(_68) -> [return: bb91, unwind terminate];
    }

    bb81 (cleanup): {
        drop(_57) -> [return: bb82, unwind terminate];
    }

    bb82 (cleanup): {
        drop(_55) -> [return: bb91, unwind terminate];
    }

    bb83 (cleanup): {
        drop(_44) -> [return: bb84, unwind terminate];
    }

    bb84 (cleanup): {
        drop(_42) -> [return: bb91, unwind terminate];
    }

    bb85 (cleanup): {
        drop(_31) -> [return: bb86, unwind terminate];
    }

    bb86 (cleanup): {
        drop(_29) -> [return: bb91, unwind terminate];
    }

    bb87 (cleanup): {
        drop(_18) -> [return: bb88, unwind terminate];
    }

    bb88 (cleanup): {
        drop(_16) -> [return: bb91, unwind terminate];
    }

    bb89 (cleanup): {
        drop(_5) -> [return: bb90, unwind terminate];
    }

    bb90 (cleanup): {
        drop(_3) -> [return: bb91, unwind terminate];
    }

    bb91 (cleanup): {
        resume;
    }
}

promoted[0] in main: &J = {
    let mut _0: &J;
    let mut _1: J;
    let mut _2: Custom;

    bb0: {
        _2 = Custom;
        _1 = J(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &I = {
    let mut _0: &I;
    let mut _1: I;

    bb0: {
        _1 = I { a: const 2_isize, b: const 4_isize };
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &G = {
    let mut _0: &G;
    let mut _1: G;

    bb0: {
        _1 = G(const 3_isize, const 4_isize);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &F = {
    let mut _0: &F;
    let mut _1: F;

    bb0: {
        _1 = F(const 3_isize);
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &E = {
    let mut _0: &E;
    let mut _1: E;

    bb0: {
        _1 = E;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &D = {
    let mut _0: &D;
    let mut _1: D;

    bb0: {
        _1 = D::D1 { a: const 2_isize };
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &C = {
    let mut _0: &C;
    let mut _1: C;
    let mut _2: B;

    bb0: {
        _2 = B::B2;
        _1 = C::C2(move _2);
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &C = {
    let mut _0: &C;
    let mut _1: C;

    bb0: {
        _1 = C::C1(const 3_isize);
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &B = {
    let mut _0: &B;
    let mut _1: B;

    bb0: {
        _1 = B::B2;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &B = {
    let mut _0: &B;
    let mut _1: B;

    bb0: {
        _1 = B::B1;
        _0 = &_1;
        return;
    }
}

fn C::C1(_1: isize) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C1(move _1);
        return;
    }
}

// MIR FOR CTFE
fn C::C1(_1: isize) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C1(move _1);
        return;
    }
}

fn C::C2(_1: B) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C2(move _1);
        return;
    }
}

// MIR FOR CTFE
fn C::C2(_1: B) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C2(move _1);
        return;
    }
}

fn C::C3(_1: String) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C3(move _1);
        return;
    }
}

// MIR FOR CTFE
fn C::C3(_1: String) -> C {
    let mut _0: C;

    bb0: {
        _0 = C::C3(move _1);
        return;
    }
}

fn F(_1: isize) -> F {
    let mut _0: F;

    bb0: {
        _0 = F(move _1);
        return;
    }
}

// MIR FOR CTFE
fn F(_1: isize) -> F {
    let mut _0: F;

    bb0: {
        _0 = F(move _1);
        return;
    }
}

fn G(_1: isize, _2: isize) -> G {
    let mut _0: G;

    bb0: {
        _0 = G(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn G(_1: isize, _2: isize) -> G {
    let mut _0: G;

    bb0: {
        _0 = G(move _1, move _2);
        return;
    }
}

fn J(_1: Custom) -> J {
    let mut _0: J;

    bb0: {
        _0 = J(move _1);
        return;
    }
}

// MIR FOR CTFE
fn J(_1: Custom) -> J {
    let mut _0: J;

    bb0: {
        _0 = J(move _1);
        return;
    }
}
