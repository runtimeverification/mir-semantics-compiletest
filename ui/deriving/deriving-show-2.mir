// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-show-2.rs:5:10: 5:15>::fmt(_1: &A, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:5:10: 5:15
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 1 at ui/deriving/deriving-show-2.rs:5:10: 5:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:7:10: 7:15>::fmt(_1: &B, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    let mut _5: isize;                   // in scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    let _6: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
        _5 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    }

    bb1: {
        _8 = const "B3";                 // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-show-2.rs:7:14: 7:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
    }

    bb3: {
        _6 = const "B1";                 // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-show-2.rs:7:14: 7:15
    }

    bb4: {
        _7 = const "B2";                 // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-show-2.rs:7:14: 7:15
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb6; // scope 0 at ui/deriving/deriving-show-2.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:7:15: 7:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:9:10: 9:15>::fmt(_1: &C, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let mut _3: isize;                   // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let _4: &isize;                      // in scope 0 at ui/deriving/deriving-show-2.rs:10:13: 10:18
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show-2.rs:10:13: 10:18
    let mut _9: &&isize;                 // in scope 0 at ui/deriving/deriving-show-2.rs:10:13: 10:18
    let _10: &&isize;                    // in scope 0 at ui/deriving/deriving-show-2.rs:10:13: 10:18
    let _11: &B;                         // in scope 0 at ui/deriving/deriving-show-2.rs:10:24: 10:25
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let mut _13: &str;                   // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let _14: &str;                       // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-show-2.rs:10:24: 10:25
    let mut _16: &&B;                    // in scope 0 at ui/deriving/deriving-show-2.rs:10:24: 10:25
    let _17: &&B;                        // in scope 0 at ui/deriving/deriving-show-2.rs:10:24: 10:25
    let _18: &std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:10:31: 10:37
    let mut _19: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let mut _20: &str;                   // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let _21: &str;                       // in scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    let mut _22: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-show-2.rs:10:31: 10:37
    let mut _23: &&std::string::String;  // in scope 0 at ui/deriving/deriving-show-2.rs:10:31: 10:37
    let _24: &&std::string::String;      // in scope 0 at ui/deriving/deriving-show-2.rs:10:31: 10:37
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/deriving/deriving-show-2.rs:10:13: 10:18
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/deriving/deriving-show-2.rs:10:24: 10:25
    }
    scope 3 {
        debug __self_0 => _18;           // in scope 3 at ui/deriving/deriving-show-2.rs:10:31: 10:37
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    }

    bb1: {
        _18 = &(((*_1) as C3).0: std::string::String); // scope 0 at ui/deriving/deriving-show-2.rs:10:31: 10:37
        _19 = &mut (*_2);                // scope 3 at ui/deriving/deriving-show-2.rs:9:10: 9:15
        _21 = const "C3";                // scope 3 at ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21;                       // scope 3 at ui/deriving/deriving-show-2.rs:9:10: 9:15
        _24 = &_18;                      // scope 3 at ui/deriving/deriving-show-2.rs:10:31: 10:37
        _23 = _24;                       // scope 3 at ui/deriving/deriving-show-2.rs:10:31: 10:37
        _22 = move _23 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at ui/deriving/deriving-show-2.rs:10:31: 10:37
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _19, move _20, move _22) -> bb5; // scope 3 at ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-show-2.rs:9:10: 9:15
    }

    bb3: {
        _4 = &(((*_1) as C1).0: isize);  // scope 0 at ui/deriving/deriving-show-2.rs:10:13: 10:18
        _5 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-show-2.rs:9:10: 9:15
        _7 = const "C1";                 // scope 1 at ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/deriving/deriving-show-2.rs:9:10: 9:15
        _10 = &_4;                       // scope 1 at ui/deriving/deriving-show-2.rs:10:13: 10:18
        _9 = _10;                        // scope 1 at ui/deriving/deriving-show-2.rs:10:13: 10:18
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-show-2.rs:10:13: 10:18
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb5; // scope 1 at ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &(((*_1) as C2).0: B);     // scope 0 at ui/deriving/deriving-show-2.rs:10:24: 10:25
        _12 = &mut (*_2);                // scope 2 at ui/deriving/deriving-show-2.rs:9:10: 9:15
        _14 = const "C2";                // scope 2 at ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/deriving/deriving-show-2.rs:9:10: 9:15
        _17 = &_11;                      // scope 2 at ui/deriving/deriving-show-2.rs:10:24: 10:25
        _16 = _17;                       // scope 2 at ui/deriving/deriving-show-2.rs:10:24: 10:25
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-show-2.rs:10:24: 10:25
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _12, move _13, move _15) -> bb5; // scope 2 at ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:9:10: 9:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:9:15: 9:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:11:10: 11:15>::fmt(_1: &D, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:11:10: 11:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:11:10: 11:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:11:10: 11:15
    let _3: &isize;                      // in scope 0 at ui/deriving/deriving-show-2.rs:12:14: 12:22
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:11:10: 11:15
    let mut _5: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:11:10: 11:15
    let _6: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:11:10: 11:15
    let mut _7: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:12:14: 12:22
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:12:14: 12:22
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show-2.rs:12:14: 12:22
    let mut _10: &&isize;                // in scope 0 at ui/deriving/deriving-show-2.rs:12:14: 12:22
    let _11: &&isize;                    // in scope 0 at ui/deriving/deriving-show-2.rs:12:14: 12:22
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/deriving/deriving-show-2.rs:12:14: 12:22
    }

    bb0: {
        _3 = &(((*_1) as D1).0: isize);  // scope 0 at ui/deriving/deriving-show-2.rs:12:14: 12:22
        _4 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-show-2.rs:11:10: 11:15
        _6 = const "D1";                 // scope 1 at ui/deriving/deriving-show-2.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:11:10: 11:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/deriving/deriving-show-2.rs:11:10: 11:15
        _8 = const "a";                  // scope 1 at ui/deriving/deriving-show-2.rs:12:14: 12:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:12:14: 12:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/deriving/deriving-show-2.rs:12:14: 12:22
        _11 = &_3;                       // scope 1 at ui/deriving/deriving-show-2.rs:12:14: 12:22
        _10 = _11;                       // scope 1 at ui/deriving/deriving-show-2.rs:12:14: 12:22
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-show-2.rs:12:14: 12:22
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _4, move _5, move _7, move _9) -> bb1; // scope 1 at ui/deriving/deriving-show-2.rs:11:10: 11:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:11:10: 11:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:11:15: 11:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:13:10: 13:15>::fmt(_1: &E, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15
        _5 = const "E";                  // scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:13:10: 13:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/deriving/deriving-show-2.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:13:10: 13:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:13:15: 13:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:15:10: 15:15>::fmt(_1: &F, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show-2.rs:16:10: 16:15
    let mut _7: &&isize;                 // in scope 0 at ui/deriving/deriving-show-2.rs:16:10: 16:15
    let _8: &&isize;                     // in scope 0 at ui/deriving/deriving-show-2.rs:16:10: 16:15
    let _9: &isize;                      // in scope 0 at ui/deriving/deriving-show-2.rs:16:10: 16:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
        _5 = const "F";                  // scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:15:10: 15:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
        _9 = &((*_1).0: isize);          // scope 0 at ui/deriving/deriving-show-2.rs:16:10: 16:15
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-show-2.rs:16:10: 16:15
        _7 = _8;                         // scope 0 at ui/deriving/deriving-show-2.rs:16:10: 16:15
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show-2.rs:16:10: 16:15
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-show-2.rs:15:10: 15:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:15:10: 15:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:15:15: 15:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:17:10: 17:15>::fmt(_1: &G, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show-2.rs:18:10: 18:15
    let mut _7: &isize;                  // in scope 0 at ui/deriving/deriving-show-2.rs:18:10: 18:15
    let _8: &isize;                      // in scope 0 at ui/deriving/deriving-show-2.rs:18:10: 18:15
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show-2.rs:18:17: 18:22
    let mut _10: &&isize;                // in scope 0 at ui/deriving/deriving-show-2.rs:18:17: 18:22
    let _11: &&isize;                    // in scope 0 at ui/deriving/deriving-show-2.rs:18:17: 18:22
    let _12: &isize;                     // in scope 0 at ui/deriving/deriving-show-2.rs:18:17: 18:22

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
        _5 = const "G";                  // scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:17:10: 17:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
        _8 = &((*_1).0: isize);          // scope 0 at ui/deriving/deriving-show-2.rs:18:10: 18:15
        _7 = _8;                         // scope 0 at ui/deriving/deriving-show-2.rs:18:10: 18:15
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show-2.rs:18:10: 18:15
        _12 = &((*_1).1: isize);         // scope 0 at ui/deriving/deriving-show-2.rs:18:17: 18:22
        _11 = &_12;                      // scope 0 at ui/deriving/deriving-show-2.rs:18:17: 18:22
        _10 = _11;                       // scope 0 at ui/deriving/deriving-show-2.rs:18:17: 18:22
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show-2.rs:18:17: 18:22
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _3, move _4, move _6, move _9) -> bb1; // scope 0 at ui/deriving/deriving-show-2.rs:17:10: 17:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:17:10: 17:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:17:15: 17:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:19:10: 19:15>::fmt(_1: &H, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
    let mut _9: &&isize;                 // in scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
    let _10: &&isize;                    // in scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
    let _11: &isize;                     // in scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
        _5 = const "H";                  // scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:19:10: 19:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
        _7 = const "a";                  // scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:20:12: 20:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
        _11 = &((*_1).0: isize);         // scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
        _10 = &_11;                      // scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
        _9 = _10;                        // scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show-2.rs:20:12: 20:20
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/deriving/deriving-show-2.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:19:10: 19:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:19:15: 19:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:21:10: 21:15>::fmt(_1: &I, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
    let mut _9: &isize;                  // in scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
    let _10: &isize;                     // in scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
    let mut _11: &str;                   // in scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
    let _12: &str;                       // in scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
    let mut _14: &&isize;                // in scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
    let _15: &&isize;                    // in scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
    let _16: &isize;                     // in scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
        _5 = const "I";                  // scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:21:10: 21:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
        _7 = const "a";                  // scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:22:12: 22:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
        _10 = &((*_1).0: isize);         // scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
        _9 = _10;                        // scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show-2.rs:22:12: 22:20
        _12 = const "b";                 // scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:22:22: 22:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
        _16 = &((*_1).1: isize);         // scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
        _15 = &_16;                      // scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
        _14 = _15;                       // scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show-2.rs:22:22: 22:30
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/deriving/deriving-show-2.rs:21:10: 21:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:21:10: 21:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:21:15: 21:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:23:10: 23:15>::fmt(_1: &J, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show-2.rs:24:10: 24:16
    let mut _7: &&Custom;                // in scope 0 at ui/deriving/deriving-show-2.rs:24:10: 24:16
    let _8: &&Custom;                    // in scope 0 at ui/deriving/deriving-show-2.rs:24:10: 24:16
    let _9: &Custom;                     // in scope 0 at ui/deriving/deriving-show-2.rs:24:10: 24:16

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
        _5 = const "J";                  // scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:23:10: 23:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
        _9 = &((*_1).0: Custom);         // scope 0 at ui/deriving/deriving-show-2.rs:24:10: 24:16
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-show-2.rs:24:10: 24:16
        _7 = _8;                         // scope 0 at ui/deriving/deriving-show-2.rs:24:10: 24:16
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show-2.rs:24:10: 24:16
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-show-2.rs:23:10: 23:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:23:10: 23:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:23:15: 23:15
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:27:1: 27:27>::fmt(_1: &Custom, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:28:12: 28:17
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show-2.rs:28:19: 28:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show-2.rs:28:46: 28:57
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _5: &[&str];                 // in scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
    let mut _6: &[&str; 1];              // in scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
    let _7: &[&str; 1];                  // in scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _11: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _12: &[&str; 1];             // in scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _12 = const _;                   // scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:29:19: 29:24
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<Custom as Debug>::fmt, [], Some(promoted[1])) }
        _7 = _12;                        // scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
        _6 = _7;                         // scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
        _11 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(<Custom as Debug>::fmt, [], Some(promoted[0])) }
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Formatter::<'_>::write_fmt(move _3, move _4) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:30:6: 30:6
    }
}

promoted[0] in <impl at ui/deriving/deriving-show-2.rs:27:1: 27:27>::fmt: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    }
}

promoted[1] in <impl at ui/deriving/deriving-show-2.rs:27:1: 27:27>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
    let mut _1: [&str; 1];               // in scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24

    bb0: {
        _1 = [const "yay"];              // scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:29:19: 29:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:29:19: 29:24
    }
}

fn <impl at ui/deriving/deriving-show-2.rs:37:1: 37:34>::to_show(_1: &T) -> String {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show-2.rs:38:16: 38:21
    let mut _0: std::string::String;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _3: &[&str];                 // in scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
    let mut _4: &[&str; 1];              // in scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
    let _5: &[&str; 1];                  // in scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-show-2.rs:39:25: 39:29
    let mut _11: &&T;                    // in scope 0 at ui/deriving/deriving-show-2.rs:39:25: 39:29
    let _12: &&T;                        // in scope 0 at ui/deriving/deriving-show-2.rs:39:25: 39:29
    let mut _13: &[&str; 1];             // in scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
    scope 1 {
        debug res => _0;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _13 = const _;                   // scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:39:17: 39:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<T as ToDebug>::to_show, [T], Some(promoted[0])) }
        _5 = _13;                        // scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
        _12 = &_1;                       // scope 0 at ui/deriving/deriving-show-2.rs:39:25: 39:29
        _11 = _12;                       // scope 0 at ui/deriving/deriving-show-2.rs:39:25: 39:29
        _10 = core::fmt::ArgumentV1::<'_>::new_debug::<&T>(move _11) -> bb1; // scope 0 at ui/deriving/deriving-show-2.rs:39:25: 39:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:39:25: 39:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &T) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<&T>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = format(move _2) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:40:6: 40:6
    }
}

promoted[0] in <impl at ui/deriving/deriving-show-2.rs:37:1: 37:34>::to_show: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
    let mut _1: [&str; 1];               // in scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:39:17: 39:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:39:17: 39:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:43:15: 43:15
    let mut _1: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:31
    let mut _4: &B;                      // in scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:31
    let mut _5: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: std::string::String;         // in scope 0 at ui/deriving/deriving-show-2.rs:44:33: 44:49
    let mut _7: &str;                    // in scope 0 at ui/deriving/deriving-show-2.rs:44:33: 44:49
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-show-2.rs:44:33: 44:37
    let _9: &std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _24: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _25: std::string::String;        // in scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:31
    let mut _26: &B;                     // in scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:31
    let mut _27: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _28: std::string::String;        // in scope 0 at ui/deriving/deriving-show-2.rs:45:33: 45:49
    let mut _29: &str;                   // in scope 0 at ui/deriving/deriving-show-2.rs:45:33: 45:49
    let _30: &str;                       // in scope 0 at ui/deriving/deriving-show-2.rs:45:33: 45:37
    let _31: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _32: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _34: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _35: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _36: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _38: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _39: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _40: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _41: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _42: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _43: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _45: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _46: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _47: std::string::String;        // in scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:34
    let mut _48: &C;                     // in scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:34
    let mut _49: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _50: std::string::String;        // in scope 0 at ui/deriving/deriving-show-2.rs:46:36: 46:55
    let mut _51: &str;                   // in scope 0 at ui/deriving/deriving-show-2.rs:46:36: 46:55
    let _52: &str;                       // in scope 0 at ui/deriving/deriving-show-2.rs:46:36: 46:43
    let _53: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _54: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _57: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _58: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _60: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _61: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _62: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _63: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _64: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _65: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _67: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _68: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _69: std::string::String;        // in scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:38
    let mut _70: &C;                     // in scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:38
    let mut _71: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _72: std::string::String;        // in scope 0 at ui/deriving/deriving-show-2.rs:47:40: 47:60
    let mut _73: &str;                   // in scope 0 at ui/deriving/deriving-show-2.rs:47:40: 47:60
    let _74: &str;                       // in scope 0 at ui/deriving/deriving-show-2.rs:47:40: 47:48
    let _75: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _76: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _77: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _78: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _79: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _80: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _82: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _83: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _84: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _85: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _86: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _87: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _88: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _89: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _90: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _91: std::string::String;        // in scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:39
    let mut _92: &D;                     // in scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:39
    let mut _93: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _94: std::string::String;        // in scope 0 at ui/deriving/deriving-show-2.rs:48:41: 48:66
    let mut _95: &str;                   // in scope 0 at ui/deriving/deriving-show-2.rs:48:41: 48:66
    let _96: &str;                       // in scope 0 at ui/deriving/deriving-show-2.rs:48:41: 48:54
    let _97: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _98: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _99: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _100: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _101: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _102: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _104: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _105: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _106: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _107: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _108: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _109: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _111: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _112: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _113: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:27
    let mut _114: &E;                    // in scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:27
    let mut _115: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _116: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:49:29: 49:44
    let mut _117: &str;                  // in scope 0 at ui/deriving/deriving-show-2.rs:49:29: 49:44
    let _118: &str;                      // in scope 0 at ui/deriving/deriving-show-2.rs:49:29: 49:32
    let _119: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _120: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _121: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _122: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _123: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _124: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _126: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _127: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _128: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _129: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _130: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _131: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _133: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _134: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _135: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:30
    let mut _136: &F;                    // in scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:30
    let mut _137: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _138: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:50:32: 50:50
    let mut _139: &str;                  // in scope 0 at ui/deriving/deriving-show-2.rs:50:32: 50:50
    let _140: &str;                      // in scope 0 at ui/deriving/deriving-show-2.rs:50:32: 50:38
    let _141: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _142: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _143: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _144: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _145: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _146: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _148: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _149: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _150: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _151: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _152: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _153: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _155: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _156: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _157: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:33
    let mut _158: &G;                    // in scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:33
    let mut _159: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _160: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:51:35: 51:56
    let mut _161: &str;                  // in scope 0 at ui/deriving/deriving-show-2.rs:51:35: 51:56
    let _162: &str;                      // in scope 0 at ui/deriving/deriving-show-2.rs:51:35: 51:44
    let _163: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _164: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _165: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _166: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _167: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _168: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _170: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _171: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _172: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _173: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _174: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _175: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _176: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _177: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _178: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _179: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:41
    let mut _180: &I;                    // in scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:41
    let mut _181: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _182: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:52:43: 52:73
    let mut _183: &str;                  // in scope 0 at ui/deriving/deriving-show-2.rs:52:43: 52:73
    let _184: &str;                      // in scope 0 at ui/deriving/deriving-show-2.rs:52:43: 52:61
    let _185: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _186: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _187: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _188: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _189: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _190: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _192: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _193: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _194: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _195: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _196: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _197: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _199: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _200: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _201: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:35
    let mut _202: &J;                    // in scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:35
    let mut _203: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _204: std::string::String;       // in scope 0 at ui/deriving/deriving-show-2.rs:53:37: 53:57
    let mut _205: &str;                  // in scope 0 at ui/deriving/deriving-show-2.rs:53:37: 53:57
    let _206: &str;                      // in scope 0 at ui/deriving/deriving-show-2.rs:53:37: 53:45
    let _207: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _208: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _209: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _210: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _211: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _212: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _214: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _215: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _216: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _217: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _218: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _219: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _220: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _221: &J;                    // in scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:35
    let mut _222: &I;                    // in scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:41
    let mut _223: &G;                    // in scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:33
    let mut _224: &F;                    // in scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:30
    let mut _225: &E;                    // in scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:27
    let mut _226: &D;                    // in scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:39
    let mut _227: &C;                    // in scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:38
    let mut _228: &C;                    // in scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:34
    let mut _229: &B;                    // in scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:31
    let mut _230: &B;                    // in scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:31
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _31;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _32;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _37: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _37;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _53;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _54;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _59: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _59;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _75;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _76;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _81: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _81;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _97;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _98;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _103: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _103;          // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _119;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _120;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _125: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _125;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _141;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _142;         // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _147: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _147;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _163;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _164;         // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _169: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _169;          // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _185;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _186;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _191: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _191;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _207;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _208;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _213: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _213;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _230 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:31
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:44:16: 44:31
                                         // + literal: Const { ty: &B, val: Unevaluated(main, [], Some(promoted[9])) }
        _4 = _230;                       // scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:31
        _3 = <B as ToDebug>::to_show(move _4) -> bb1; // scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:31
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:44:22: 44:29
                                         // + literal: Const { ty: for<'a> fn(&'a B) -> String {<B as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = const "B1";                 // scope 0 at ui/deriving/deriving-show-2.rs:44:33: 44:37
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:44:33: 44:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at ui/deriving/deriving-show-2.rs:44:33: 44:49
        _6 = <str as ToString>::to_string(move _7) -> [return: bb2, unwind: bb90]; // scope 0 at ui/deriving/deriving-show-2.rs:44:33: 44:49
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:44:38: 44:47
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_1.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <String as PartialEq>::eq(move _13, move _14) -> [return: bb3, unwind: bb89]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = Not(move _12);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<String, String>(move _17, move _18, move _20, move _22) -> bb89; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_6) -> [return: bb6, unwind: bb90]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        _229 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:31
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:45:16: 45:31
                                         // + literal: Const { ty: &B, val: Unevaluated(main, [], Some(promoted[8])) }
        _26 = _229;                      // scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:31
        _25 = <B as ToDebug>::to_show(move _26) -> bb8; // scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:31
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:45:22: 45:29
                                         // + literal: Const { ty: for<'a> fn(&'a B) -> String {<B as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = &_25;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _30 = const "B2";                // scope 0 at ui/deriving/deriving-show-2.rs:45:33: 45:37
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:45:33: 45:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _29 = _30;                       // scope 0 at ui/deriving/deriving-show-2.rs:45:33: 45:49
        _28 = <str as ToString>::to_string(move _29) -> [return: bb9, unwind: bb88]; // scope 0 at ui/deriving/deriving-show-2.rs:45:33: 45:49
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:45:38: 45:47
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb9: {
        _27 = &_28;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _23 = (move _24, move _27);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _31 = (_23.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _32 = (_23.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _35 = _31;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _36 = _32;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _34 = <String as PartialEq>::eq(move _35, move _36) -> [return: bb10, unwind: bb87]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _33 = Not(move _34);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _33) -> [0: bb12, otherwise: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _37 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = _31;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = _43;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _38 = core::panicking::assert_failed::<String, String>(move _39, move _40, move _42, move _44) -> bb87; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_28) -> [return: bb13, unwind: bb88]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13: {
        drop(_25) -> bb14;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb14: {
        _228 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:46:16: 46:34
                                         // + literal: Const { ty: &C, val: Unevaluated(main, [], Some(promoted[7])) }
        _48 = _228;                      // scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:34
        _47 = <C as ToDebug>::to_show(move _48) -> bb15; // scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:46:25: 46:32
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> String {<C as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb15: {
        _46 = &_47;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _52 = const "C1(3)";             // scope 0 at ui/deriving/deriving-show-2.rs:46:36: 46:43
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:46:36: 46:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _51 = _52;                       // scope 0 at ui/deriving/deriving-show-2.rs:46:36: 46:55
        _50 = <str as ToString>::to_string(move _51) -> [return: bb16, unwind: bb86]; // scope 0 at ui/deriving/deriving-show-2.rs:46:36: 46:55
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:46:44: 46:53
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb16: {
        _49 = &_50;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _45 = (move _46, move _49);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _53 = (_45.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _54 = (_45.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _57 = _53;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _58 = _54;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _56 = <String as PartialEq>::eq(move _57, move _58) -> [return: bb17, unwind: bb85]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb17: {
        _55 = Not(move _56);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _55) -> [0: bb19, otherwise: bb18]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _59 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _63;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _54;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = _65;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _60 = core::panicking::assert_failed::<String, String>(move _61, move _62, move _64, move _66) -> bb85; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_50) -> [return: bb20, unwind: bb86]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb20: {
        drop(_47) -> bb21;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb21: {
        _227 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:38
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:47:16: 47:38
                                         // + literal: Const { ty: &C, val: Unevaluated(main, [], Some(promoted[6])) }
        _70 = _227;                      // scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:38
        _69 = <C as ToDebug>::to_show(move _70) -> bb22; // scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:38
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:47:29: 47:36
                                         // + literal: Const { ty: for<'a> fn(&'a C) -> String {<C as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb22: {
        _68 = &_69;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _74 = const "C2(B2)";            // scope 0 at ui/deriving/deriving-show-2.rs:47:40: 47:48
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:47:40: 47:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _73 = _74;                       // scope 0 at ui/deriving/deriving-show-2.rs:47:40: 47:60
        _72 = <str as ToString>::to_string(move _73) -> [return: bb23, unwind: bb84]; // scope 0 at ui/deriving/deriving-show-2.rs:47:40: 47:60
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:47:49: 47:58
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb23: {
        _71 = &_72;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _67 = (move _68, move _71);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _75 = (_67.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _76 = (_67.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _79 = _75;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _80 = _76;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _78 = <String as PartialEq>::eq(move _79, move _80) -> [return: bb24, unwind: bb83]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        _77 = Not(move _78);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _77) -> [0: bb26, otherwise: bb25]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _81 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _83 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _85 = _75;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _84 = _85;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _87 = _76;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _86 = _87;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _88 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _82 = core::panicking::assert_failed::<String, String>(move _83, move _84, move _86, move _88) -> bb83; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb26: {
        drop(_72) -> [return: bb27, unwind: bb84]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27: {
        drop(_69) -> bb28;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb28: {
        _226 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:39
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:48:16: 48:39
                                         // + literal: Const { ty: &D, val: Unevaluated(main, [], Some(promoted[5])) }
        _92 = _226;                      // scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:39
        _91 = <D as ToDebug>::to_show(move _92) -> bb29; // scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:39
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:48:30: 48:37
                                         // + literal: Const { ty: for<'a> fn(&'a D) -> String {<D as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb29: {
        _90 = &_91;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _96 = const "D1 { a: 2 }";       // scope 0 at ui/deriving/deriving-show-2.rs:48:41: 48:54
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:48:41: 48:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _95 = _96;                       // scope 0 at ui/deriving/deriving-show-2.rs:48:41: 48:66
        _94 = <str as ToString>::to_string(move _95) -> [return: bb30, unwind: bb82]; // scope 0 at ui/deriving/deriving-show-2.rs:48:41: 48:66
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:48:55: 48:64
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb30: {
        _93 = &_94;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _89 = (move _90, move _93);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _97 = (_89.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _98 = (_89.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _101 = _97;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _102 = _98;                      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _100 = <String as PartialEq>::eq(move _101, move _102) -> [return: bb31, unwind: bb81]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb31: {
        _99 = Not(move _100);            // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _99) -> [0: bb33, otherwise: bb32]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _103 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _105 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _107 = _97;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _106 = _107;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _109 = _98;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _108 = _109;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _110 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _104 = core::panicking::assert_failed::<String, String>(move _105, move _106, move _108, move _110) -> bb81; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb33: {
        drop(_94) -> [return: bb34, unwind: bb82]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb34: {
        drop(_91) -> bb35;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35: {
        _225 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:27
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:49:16: 49:27
                                         // + literal: Const { ty: &E, val: Unevaluated(main, [], Some(promoted[4])) }
        _114 = _225;                     // scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:27
        _113 = <E as ToDebug>::to_show(move _114) -> bb36; // scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:27
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:49:18: 49:25
                                         // + literal: Const { ty: for<'a> fn(&'a E) -> String {<E as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb36: {
        _112 = &_113;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _118 = const "E";                // scope 0 at ui/deriving/deriving-show-2.rs:49:29: 49:32
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:49:29: 49:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _117 = _118;                     // scope 0 at ui/deriving/deriving-show-2.rs:49:29: 49:44
        _116 = <str as ToString>::to_string(move _117) -> [return: bb37, unwind: bb80]; // scope 0 at ui/deriving/deriving-show-2.rs:49:29: 49:44
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:49:33: 49:42
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb37: {
        _115 = &_116;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _111 = (move _112, move _115);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _119 = (_111.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _120 = (_111.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _123 = _119;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _124 = _120;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _122 = <String as PartialEq>::eq(move _123, move _124) -> [return: bb38, unwind: bb79]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb38: {
        _121 = Not(move _122);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _121) -> [0: bb40, otherwise: bb39]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb39: {
        _125 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _127 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _129 = _119;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _128 = _129;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _131 = _120;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _130 = _131;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _132 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _126 = core::panicking::assert_failed::<String, String>(move _127, move _128, move _130, move _132) -> bb79; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb40: {
        drop(_116) -> [return: bb41, unwind: bb80]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb41: {
        drop(_113) -> bb42;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb42: {
        _224 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:50:16: 50:30
                                         // + literal: Const { ty: &F, val: Unevaluated(main, [], Some(promoted[3])) }
        _136 = _224;                     // scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:30
        _135 = <F as ToDebug>::to_show(move _136) -> bb43; // scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:50:21: 50:28
                                         // + literal: Const { ty: for<'a> fn(&'a F) -> String {<F as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb43: {
        _134 = &_135;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _140 = const "F(3)";             // scope 0 at ui/deriving/deriving-show-2.rs:50:32: 50:38
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:50:32: 50:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _139 = _140;                     // scope 0 at ui/deriving/deriving-show-2.rs:50:32: 50:50
        _138 = <str as ToString>::to_string(move _139) -> [return: bb44, unwind: bb78]; // scope 0 at ui/deriving/deriving-show-2.rs:50:32: 50:50
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:50:39: 50:48
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb44: {
        _137 = &_138;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _133 = (move _134, move _137);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _141 = (_133.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _142 = (_133.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _145 = _141;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _146 = _142;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _144 = <String as PartialEq>::eq(move _145, move _146) -> [return: bb45, unwind: bb77]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb45: {
        _143 = Not(move _144);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _143) -> [0: bb47, otherwise: bb46]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb46: {
        _147 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _149 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _151 = _141;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _150 = _151;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _153 = _142;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _152 = _153;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _154 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _148 = core::panicking::assert_failed::<String, String>(move _149, move _150, move _152, move _154) -> bb77; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb47: {
        drop(_138) -> [return: bb48, unwind: bb78]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb48: {
        drop(_135) -> bb49;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb49: {
        _223 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:33
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:51:16: 51:33
                                         // + literal: Const { ty: &G, val: Unevaluated(main, [], Some(promoted[2])) }
        _158 = _223;                     // scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:33
        _157 = <G as ToDebug>::to_show(move _158) -> bb50; // scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:33
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:51:24: 51:31
                                         // + literal: Const { ty: for<'a> fn(&'a G) -> String {<G as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb50: {
        _156 = &_157;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _162 = const "G(3, 4)";          // scope 0 at ui/deriving/deriving-show-2.rs:51:35: 51:44
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:51:35: 51:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _161 = _162;                     // scope 0 at ui/deriving/deriving-show-2.rs:51:35: 51:56
        _160 = <str as ToString>::to_string(move _161) -> [return: bb51, unwind: bb76]; // scope 0 at ui/deriving/deriving-show-2.rs:51:35: 51:56
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:51:45: 51:54
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb51: {
        _159 = &_160;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _155 = (move _156, move _159);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _163 = (_155.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _164 = (_155.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _167 = _163;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _168 = _164;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _166 = <String as PartialEq>::eq(move _167, move _168) -> [return: bb52, unwind: bb75]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb52: {
        _165 = Not(move _166);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _165) -> [0: bb54, otherwise: bb53]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb53: {
        _169 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _171 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _173 = _163;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _172 = _173;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _175 = _164;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _174 = _175;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _176 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _170 = core::panicking::assert_failed::<String, String>(move _171, move _172, move _174, move _176) -> bb75; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb54: {
        drop(_160) -> [return: bb55, unwind: bb76]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb55: {
        drop(_157) -> bb56;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb56: {
        _222 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:52:16: 52:41
                                         // + literal: Const { ty: &I, val: Unevaluated(main, [], Some(promoted[1])) }
        _180 = _222;                     // scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:41
        _179 = <I as ToDebug>::to_show(move _180) -> bb57; // scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:52:32: 52:39
                                         // + literal: Const { ty: for<'a> fn(&'a I) -> String {<I as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb57: {
        _178 = &_179;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _184 = const "I { a: 2, b: 4 }"; // scope 0 at ui/deriving/deriving-show-2.rs:52:43: 52:61
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:52:43: 52:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _183 = _184;                     // scope 0 at ui/deriving/deriving-show-2.rs:52:43: 52:73
        _182 = <str as ToString>::to_string(move _183) -> [return: bb58, unwind: bb74]; // scope 0 at ui/deriving/deriving-show-2.rs:52:43: 52:73
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:52:62: 52:71
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb58: {
        _181 = &_182;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _177 = (move _178, move _181);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _185 = (_177.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _186 = (_177.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _189 = _185;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _190 = _186;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _188 = <String as PartialEq>::eq(move _189, move _190) -> [return: bb59, unwind: bb73]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb59: {
        _187 = Not(move _188);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _187) -> [0: bb61, otherwise: bb60]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb60: {
        _191 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _193 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _195 = _185;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _194 = _195;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _197 = _186;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _196 = _197;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _198 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _192 = core::panicking::assert_failed::<String, String>(move _193, move _194, move _196, move _198) -> bb73; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb61: {
        drop(_182) -> [return: bb62, unwind: bb74]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb62: {
        drop(_179) -> bb63;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb63: {
        _221 = const _;                  // scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:35
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:53:16: 53:35
                                         // + literal: Const { ty: &J, val: Unevaluated(main, [], Some(promoted[0])) }
        _202 = _221;                     // scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:35
        _201 = <J as ToDebug>::to_show(move _202) -> bb64; // scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:35
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:53:26: 53:33
                                         // + literal: Const { ty: for<'a> fn(&'a J) -> String {<J as ToDebug>::to_show}, val: Value(<ZST>) }
    }

    bb64: {
        _200 = &_201;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _206 = const "J(yay)";           // scope 0 at ui/deriving/deriving-show-2.rs:53:37: 53:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:53:37: 53:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _205 = _206;                     // scope 0 at ui/deriving/deriving-show-2.rs:53:37: 53:57
        _204 = <str as ToString>::to_string(move _205) -> [return: bb65, unwind: bb72]; // scope 0 at ui/deriving/deriving-show-2.rs:53:37: 53:57
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show-2.rs:53:46: 53:55
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb65: {
        _203 = &_204;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _199 = (move _200, move _203);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _207 = (_199.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _208 = (_199.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _211 = _207;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _212 = _208;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _210 = <String as PartialEq>::eq(move _211, move _212) -> [return: bb66, unwind: bb71]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb66: {
        _209 = Not(move _210);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _209) -> [0: bb68, otherwise: bb67]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb67: {
        _213 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _215 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _217 = _207;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _216 = _217;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _219 = _208;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _218 = _219;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _220 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _214 = core::panicking::assert_failed::<String, String>(move _215, move _216, move _218, move _220) -> bb71; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb68: {
        drop(_204) -> [return: bb69, unwind: bb72]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb69: {
        drop(_201) -> bb70;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb70: {
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:54:2: 54:2
    }

    bb71 (cleanup): {
        drop(_204) -> bb72;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb72 (cleanup): {
        drop(_201) -> bb91;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb73 (cleanup): {
        drop(_182) -> bb74;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb74 (cleanup): {
        drop(_179) -> bb91;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb75 (cleanup): {
        drop(_160) -> bb76;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb76 (cleanup): {
        drop(_157) -> bb91;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb77 (cleanup): {
        drop(_138) -> bb78;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb78 (cleanup): {
        drop(_135) -> bb91;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb79 (cleanup): {
        drop(_116) -> bb80;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb80 (cleanup): {
        drop(_113) -> bb91;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb81 (cleanup): {
        drop(_94) -> bb82;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb82 (cleanup): {
        drop(_91) -> bb91;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb83 (cleanup): {
        drop(_72) -> bb84;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb84 (cleanup): {
        drop(_69) -> bb91;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb85 (cleanup): {
        drop(_50) -> bb86;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb86 (cleanup): {
        drop(_47) -> bb91;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb87 (cleanup): {
        drop(_28) -> bb88;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb88 (cleanup): {
        drop(_25) -> bb91;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb89 (cleanup): {
        drop(_6) -> bb90;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb90 (cleanup): {
        drop(_3) -> bb91;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb91 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-show-2.rs:43:1: 54:2
    }
}

promoted[0] in main: &J = {
    let mut _0: &J;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:35
    let mut _1: J;                       // in scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:25
    let mut _2: Custom;                  // in scope 0 at ui/deriving/deriving-show-2.rs:53:18: 53:24

    bb0: {
        _2 = Custom;                     // scope 0 at ui/deriving/deriving-show-2.rs:53:18: 53:24
        _1 = J(move _2);                 // scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:25
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:35
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:53:16: 53:35
    }
}

promoted[1] in main: &I = {
    let mut _0: &I;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:41
    let mut _1: I;                       // in scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:31

    bb0: {
        _1 = I { a: const 2_isize, b: const 4_isize }; // scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:31
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:41
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:52:16: 52:41
    }
}

promoted[2] in main: &G = {
    let mut _0: &G;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:33
    let mut _1: G;                       // in scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:23

    bb0: {
        _1 = G(const 3_isize, const 4_isize); // scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:23
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:33
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:51:16: 51:33
    }
}

promoted[3] in main: &F = {
    let mut _0: &F;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:30
    let mut _1: F;                       // in scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:20

    bb0: {
        _1 = F(const 3_isize);           // scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:20
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:30
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:50:16: 50:30
    }
}

promoted[4] in main: &E = {
    let mut _0: &E;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:27
    let mut _1: E;                       // in scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:17

    bb0: {
        _1 = E;                          // scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:17
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:27
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:49:16: 49:27
    }
}

promoted[5] in main: &D = {
    let mut _0: &D;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:39
    let mut _1: D;                       // in scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:29

    bb0: {
        _1 = D::D1 { a: const 2_isize }; // scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:29
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:39
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:48:16: 48:39
    }
}

promoted[6] in main: &C = {
    let mut _0: &C;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:38
    let mut _1: C;                       // in scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:28
    let mut _2: B;                       // in scope 0 at ui/deriving/deriving-show-2.rs:47:22: 47:27

    bb0: {
        _2 = B::B2;                      // scope 0 at ui/deriving/deriving-show-2.rs:47:22: 47:27
        _1 = C::C2(move _2);             // scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:28
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:38
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:47:16: 47:38
    }
}

promoted[7] in main: &C = {
    let mut _0: &C;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:34
    let mut _1: C;                       // in scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:24

    bb0: {
        _1 = C::C1(const 3_isize);       // scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:24
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:34
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:46:16: 46:34
    }
}

promoted[8] in main: &B = {
    let mut _0: &B;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:31
    let mut _1: B;                       // in scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:21

    bb0: {
        _1 = B::B2;                      // scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:21
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:31
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:45:16: 45:31
    }
}

promoted[9] in main: &B = {
    let mut _0: &B;                      // return place in scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:31
    let mut _1: B;                       // in scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:21

    bb0: {
        _1 = B::B1;                      // scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:21
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:31
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:44:16: 44:31
    }
}

fn C::C1(_1: isize) -> C {
    let mut _0: C;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:10:10: 10:12

    bb0: {
        _0 = C::C1(move _1);             // scope 0 at ui/deriving/deriving-show-2.rs:10:10: 10:12
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:10:10: 10:12
    }
}

// MIR FOR CTFE
fn C::C1(_1: isize) -> C {
    let mut _0: C;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:10:10: 10:12

    bb0: {
        _0 = C::C1(move _1);             // scope 0 at ui/deriving/deriving-show-2.rs:10:10: 10:12
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:10:10: 10:12
    }
}

fn C::C2(_1: B) -> C {
    let mut _0: C;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:10:21: 10:23

    bb0: {
        _0 = C::C2(move _1);             // scope 0 at ui/deriving/deriving-show-2.rs:10:21: 10:23
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:10:21: 10:23
    }
}

// MIR FOR CTFE
fn C::C2(_1: B) -> C {
    let mut _0: C;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:10:21: 10:23

    bb0: {
        _0 = C::C2(move _1);             // scope 0 at ui/deriving/deriving-show-2.rs:10:21: 10:23
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:10:21: 10:23
    }
}

fn C::C3(_1: String) -> C {
    let mut _0: C;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:10:28: 10:30

    bb0: {
        _0 = C::C3(move _1);             // scope 0 at ui/deriving/deriving-show-2.rs:10:28: 10:30
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:10:28: 10:30
    }
}

// MIR FOR CTFE
fn C::C3(_1: String) -> C {
    let mut _0: C;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:10:28: 10:30

    bb0: {
        _0 = C::C3(move _1);             // scope 0 at ui/deriving/deriving-show-2.rs:10:28: 10:30
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:10:28: 10:30
    }
}

fn F(_1: isize) -> F {
    let mut _0: F;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:16:1: 16:9

    bb0: {
        _0 = F(move _1);                 // scope 0 at ui/deriving/deriving-show-2.rs:16:1: 16:9
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:16:1: 16:9
    }
}

// MIR FOR CTFE
fn F(_1: isize) -> F {
    let mut _0: F;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:16:1: 16:9

    bb0: {
        _0 = F(move _1);                 // scope 0 at ui/deriving/deriving-show-2.rs:16:1: 16:9
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:16:1: 16:9
    }
}

fn G(_1: isize, _2: isize) -> G {
    let mut _0: G;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:18:1: 18:9

    bb0: {
        _0 = G(move _1, move _2);        // scope 0 at ui/deriving/deriving-show-2.rs:18:1: 18:9
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:18:1: 18:9
    }
}

// MIR FOR CTFE
fn G(_1: isize, _2: isize) -> G {
    let mut _0: G;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:18:1: 18:9

    bb0: {
        _0 = G(move _1, move _2);        // scope 0 at ui/deriving/deriving-show-2.rs:18:1: 18:9
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:18:1: 18:9
    }
}

fn J(_1: Custom) -> J {
    let mut _0: J;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:24:1: 24:9

    bb0: {
        _0 = J(move _1);                 // scope 0 at ui/deriving/deriving-show-2.rs:24:1: 24:9
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:24:1: 24:9
    }
}

// MIR FOR CTFE
fn J(_1: Custom) -> J {
    let mut _0: J;                       // return place in scope 0 at ui/deriving/deriving-show-2.rs:24:1: 24:9

    bb0: {
        _0 = J(move _1);                 // scope 0 at ui/deriving/deriving-show-2.rs:24:1: 24:9
        return;                          // scope 0 at ui/deriving/deriving-show-2.rs:24:1: 24:9
    }
}
