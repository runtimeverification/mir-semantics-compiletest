// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/issue-6341.rs:4:10: 4:19>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-6341.rs:4:10: 4:19
    debug other => _2;                   // in scope 0 at ui/deriving/issue-6341.rs:4:10: 4:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/issue-6341.rs:4:10: 4:19
    let mut _3: usize;                   // in scope 0 at ui/deriving/issue-6341.rs:5:12: 5:20
    let mut _4: usize;                   // in scope 0 at ui/deriving/issue-6341.rs:5:12: 5:20

    bb0: {
        _3 = ((*_1).0: usize);           // scope 0 at ui/deriving/issue-6341.rs:5:12: 5:20
        _4 = ((*_2).0: usize);           // scope 0 at ui/deriving/issue-6341.rs:5:12: 5:20
        _0 = Eq(move _3, move _4);       // scope 0 at ui/deriving/issue-6341.rs:5:12: 5:20
        return;                          // scope 0 at ui/deriving/issue-6341.rs:4:19: 4:19
    }
}

fn <impl at ui/deriving/issue-6341.rs:7:1: 7:16>::drop(_1: &mut A) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-6341.rs:8:13: 8:22
    let mut _0: ();                      // return place in scope 0 at ui/deriving/issue-6341.rs:8:24: 8:24

    bb0: {
        return;                          // scope 0 at ui/deriving/issue-6341.rs:8:26: 8:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/issue-6341.rs:11:15: 11:15

    bb0: {
        return;                          // scope 0 at ui/deriving/issue-6341.rs:11:17: 11:17
    }
}
