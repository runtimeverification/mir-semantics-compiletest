// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19>::eq(_1: &S, _2: &S) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _4: &S;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _6: &S;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _11: (&S, &S);               // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _12: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _13: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _14: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _15: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _20: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
    let mut _21: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
    let mut _22: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
    let mut _23: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    let mut _24: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    let mut _25: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    let mut _26: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _27: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _28: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _29: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _30: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    let mut _31: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
            let _16: &isize;             // in scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
            let _17: &isize;             // in scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
            let _18: &isize;             // in scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
            let _19: &isize;             // in scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
                debug __self_1 => _17;   // in scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
                debug __arg1_0 => _18;   // in scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
                debug __arg1_1 => _19;   // in scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _6 = _2;                         // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _8 = _3;                         // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _9 = _5;                         // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _13 = _2;                        // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _11 = (move _12, move _13);      // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _26 = deref_copy (_11.0: &S);    // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _15 = discriminant((*_26));      // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        switchInt(move _15) -> [0: bb4, otherwise: bb5]; // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:19: 3:19
    }

    bb4: {
        _27 = deref_copy (_11.1: &S);    // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        _14 = discriminant((*_27));      // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        goto -> bb9;                     // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    }

    bb6: {
        _28 = deref_copy (_11.0: &S);    // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _16 = &(((*_28) as X).0: isize); // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _29 = deref_copy (_11.0: &S);    // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _17 = &(((*_29) as X).1: isize); // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _30 = deref_copy (_11.1: &S);    // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _18 = &(((*_30) as X).0: isize); // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _31 = deref_copy (_11.1: &S);    // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _19 = &(((*_31) as X).1: isize); // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _21 = (*_16);                    // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _22 = (*_18);                    // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _20 = Eq(move _21, move _22);    // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        switchInt(move _20) -> [0: bb7, otherwise: bb8]; // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    }

    bb7: {
        _10 = const false;               // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        goto -> bb9;                     // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    }

    bb8: {
        _24 = (*_17);                    // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _25 = (*_19);                    // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _23 = Eq(move _24, move _25);    // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _10 = move _23;                  // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        goto -> bb9;                     // scope 3 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:10: 3:19
    }
}

fn <impl at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26>::fmt(_1: &S, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    let mut _3: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    let _4: &isize;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
    let _5: &isize;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    let mut _6: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    let mut _7: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    let mut _9: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
    let _10: &str;                       // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
    let mut _12: &isize;                 // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
    let mut _13: &str;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    let _14: &str;                       // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    let mut _16: &&isize;                // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    let _17: &&isize;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    let mut _18: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    let mut _19: &str;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    let _20: &str;                       // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        debug __self_1 => _5;            // in scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    }

    bb1: {
        _18 = &mut (*_2);                // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
        _20 = const "Y";                 // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
        _0 = Formatter::<'_>::write_str(move _18, move _19) -> bb4; // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
    }

    bb3: {
        _4 = &(((*_1) as X).0: isize);   // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _5 = &(((*_1) as X).1: isize);   // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _6 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
        _8 = const "X";                  // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
        _10 = const "x";                 // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _12 = _4;                        // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _11 = move _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:9: 5:17
        _14 = const "y";                 // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _17 = &_5;                       // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _16 = _17;                       // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:5:19: 5:27
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _6, move _7, move _9, move _11, move _13, move _15) -> bb4; // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:21: 3:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:3:26: 3:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:9:15: 9:15
    let _1: S;                           // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:10:9: 10:10
    let mut _2: (&S, &S);                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &S;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &S;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &S;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &S;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &S;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &S;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &S;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &S;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:5: 12:23
    let mut _20: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:13: 12:22
    let mut _21: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:14: 12:22
    let mut _22: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:15: 12:16
    let mut _23: &S;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:20: 12:21
    let mut _24: !;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:5: 12:23
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:10:9: 10:10
        let _5: &S;                      // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &S;                      // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = S::X { x: const 1_isize, y: const 2_isize }; // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:10:13: 10:32
        _3 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _4 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &S);                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &S);                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <S as PartialEq>::eq(move _9, move _10) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a S, &'b S) -> bool {<S as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<S, S>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a S, &'b S, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<S, S>}, val: Value(<ZST>) }
    }

    bb3: {
        _22 = &_1;                       // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:15: 12:16
        _23 = &_1;                       // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:20: 12:21
        _21 = <S as PartialEq>::ne(move _22, move _23) -> bb4; // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:14: 12:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:14: 12:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a S, &'b S) -> bool {<S as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = Not(move _21);             // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:13: 12:22
        _19 = Not(move _20);             // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:5: 12:23
        switchInt(move _19) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:5: 12:23
    }

    bb5: {
        _24 = core::panicking::panic(const "assertion failed: !(x != x)"); // scope 1 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:5: 12:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:12:5: 12:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-like-enum-variant.rs:13:2: 13:2
    }
}
