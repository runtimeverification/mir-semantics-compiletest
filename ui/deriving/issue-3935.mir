// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/issue-3935.rs:3:10: 3:19>::eq(_1: &Bike, _2: &Bike) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-3935.rs:3:10: 3:19
    debug other => _2;                   // in scope 0 at ui/deriving/issue-3935.rs:3:10: 3:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/issue-3935.rs:3:10: 3:19
    let mut _3: &std::string::String;    // in scope 0 at ui/deriving/issue-3935.rs:5:5: 5:17
    let mut _4: &std::string::String;    // in scope 0 at ui/deriving/issue-3935.rs:5:5: 5:17

    bb0: {
        _3 = &((*_1).0: std::string::String); // scope 0 at ui/deriving/issue-3935.rs:5:5: 5:17
        _4 = &((*_2).0: std::string::String); // scope 0 at ui/deriving/issue-3935.rs:5:5: 5:17
        _0 = <String as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/deriving/issue-3935.rs:5:5: 5:17
                                         // mir::Constant
                                         // + span: ui/deriving/issue-3935.rs:5:5: 5:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/issue-3935.rs:3:19: 3:19
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/issue-3935.rs:8:15: 8:15
    let _1: Bike;                        // in scope 0 at ui/deriving/issue-3935.rs:9:9: 9:18
    let mut _2: std::string::String;     // in scope 0 at ui/deriving/issue-3935.rs:9:34: 9:55
    let mut _3: &str;                    // in scope 0 at ui/deriving/issue-3935.rs:9:34: 9:55
    let _4: &str;                        // in scope 0 at ui/deriving/issue-3935.rs:9:34: 9:43
    let mut _6: std::string::String;     // in scope 0 at ui/deriving/issue-3935.rs:10:32: 10:51
    let mut _7: &str;                    // in scope 0 at ui/deriving/issue-3935.rs:10:32: 10:51
    let _8: &str;                        // in scope 0 at ui/deriving/issue-3935.rs:10:32: 10:39
    let mut _9: bool;                    // in scope 0 at ui/deriving/issue-3935.rs:12:5: 12:34
    let mut _10: bool;                   // in scope 0 at ui/deriving/issue-3935.rs:12:13: 12:33
    let mut _11: &Bike;                  // in scope 0 at ui/deriving/issue-3935.rs:12:13: 12:22
    let mut _12: &Bike;                  // in scope 0 at ui/deriving/issue-3935.rs:12:26: 12:33
    let mut _13: !;                      // in scope 0 at ui/deriving/issue-3935.rs:12:5: 12:34
    scope 1 {
        debug town_bike => _1;           // in scope 1 at ui/deriving/issue-3935.rs:9:9: 9:18
        let _5: Bike;                    // in scope 1 at ui/deriving/issue-3935.rs:10:9: 10:16
        scope 2 {
            debug my_bike => _5;         // in scope 2 at ui/deriving/issue-3935.rs:10:9: 10:16
        }
    }

    bb0: {
        _4 = const "schwinn";            // scope 0 at ui/deriving/issue-3935.rs:9:34: 9:43
                                         // mir::Constant
                                         // + span: ui/deriving/issue-3935.rs:9:34: 9:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/deriving/issue-3935.rs:9:34: 9:55
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/deriving/issue-3935.rs:9:34: 9:55
                                         // mir::Constant
                                         // + span: ui/deriving/issue-3935.rs:9:44: 9:53
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Bike { name: move _2 };     // scope 0 at ui/deriving/issue-3935.rs:9:21: 9:57
        _8 = const "surly";              // scope 1 at ui/deriving/issue-3935.rs:10:32: 10:39
                                         // mir::Constant
                                         // + span: ui/deriving/issue-3935.rs:10:32: 10:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/deriving/issue-3935.rs:10:32: 10:51
        _6 = <str as ToString>::to_string(move _7) -> [return: bb2, unwind: bb9]; // scope 1 at ui/deriving/issue-3935.rs:10:32: 10:51
                                         // mir::Constant
                                         // + span: ui/deriving/issue-3935.rs:10:40: 10:49
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Bike { name: move _6 };     // scope 1 at ui/deriving/issue-3935.rs:10:19: 10:53
        _11 = &_1;                       // scope 2 at ui/deriving/issue-3935.rs:12:13: 12:22
        _12 = &_5;                       // scope 2 at ui/deriving/issue-3935.rs:12:26: 12:33
        _10 = <Bike as PartialEq>::ne(move _11, move _12) -> [return: bb3, unwind: bb8]; // scope 2 at ui/deriving/issue-3935.rs:12:13: 12:33
                                         // mir::Constant
                                         // + span: ui/deriving/issue-3935.rs:12:13: 12:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Bike, &'b Bike) -> bool {<Bike as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = Not(move _10);              // scope 2 at ui/deriving/issue-3935.rs:12:5: 12:34
        switchInt(move _9) -> [0: bb5, otherwise: bb4]; // scope 2 at ui/deriving/issue-3935.rs:12:5: 12:34
    }

    bb4: {
        _13 = core::panicking::panic(const "assertion failed: town_bike != my_bike") -> bb8; // scope 2 at ui/deriving/issue-3935.rs:12:5: 12:34
                                         // mir::Constant
                                         // + span: ui/deriving/issue-3935.rs:12:5: 12:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        drop(_5) -> [return: bb6, unwind: bb9]; // scope 1 at ui/deriving/issue-3935.rs:13:1: 13:2
    }

    bb6: {
        drop(_1) -> bb7;                 // scope 0 at ui/deriving/issue-3935.rs:13:1: 13:2
    }

    bb7: {
        return;                          // scope 0 at ui/deriving/issue-3935.rs:13:2: 13:2
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 1 at ui/deriving/issue-3935.rs:13:1: 13:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/deriving/issue-3935.rs:13:1: 13:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/deriving/issue-3935.rs:8:1: 13:2
    }
}
