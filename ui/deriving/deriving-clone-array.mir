// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Array::arr::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/deriving/deriving-clone-array.rs:7:16: 7:19

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/deriving/deriving-clone-array.rs:7:16: 7:19
        return;                          // scope 0 at ui/deriving/deriving-clone-array.rs:7:16: 7:19
    }
}

Array::arr::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/deriving/deriving-clone-array.rs:7:22: 7:23

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/deriving/deriving-clone-array.rs:7:22: 7:23
        return;                          // scope 0 at ui/deriving/deriving-clone-array.rs:7:22: 7:23
    }
}

fn <impl at ui/deriving/deriving-clone-array.rs:5:16: 5:21>::clone(_1: &Array) -> Array {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-clone-array.rs:5:16: 5:21
    let mut _0: Array;                   // return place in scope 0 at ui/deriving/deriving-clone-array.rs:5:16: 5:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/deriving/deriving-clone-array.rs:5:16: 5:21
        return;                          // scope 0 at ui/deriving/deriving-clone-array.rs:5:21: 5:21
    }
}

<impl at ui/deriving/deriving-clone-array.rs:5:16: 5:21>::clone::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/deriving/deriving-clone-array.rs:7:16: 7:19

    bb0: {
        _0 = const 256_usize;            // scope 0 at ui/deriving/deriving-clone-array.rs:7:16: 7:19
        return;                          // scope 0 at ui/deriving/deriving-clone-array.rs:7:16: 7:19
    }
}

<impl at ui/deriving/deriving-clone-array.rs:5:16: 5:21>::clone::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/deriving/deriving-clone-array.rs:7:22: 7:23

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/deriving/deriving-clone-array.rs:7:22: 7:23
        return;                          // scope 0 at ui/deriving/deriving-clone-array.rs:7:22: 7:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-clone-array.rs:10:15: 10:15

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-clone-array.rs:10:17: 10:17
    }
}
