// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _4: &Foo;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _6: &Foo;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _11: (&Foo, &Foo);           // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _12: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _13: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _14: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _15: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _21: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
    let mut _22: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
    let mut _23: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
    let mut _24: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    let mut _25: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    let mut _26: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    let mut _31: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
    let mut _32: f64;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
    let mut _33: f64;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
    let mut _34: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    let mut _35: f64;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    let mut _36: f64;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    let mut _37: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _38: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _39: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _40: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _41: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _42: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _43: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _44: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _45: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _46: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    let mut _47: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
            let _17: &isize;             // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
            let _18: &isize;             // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
            let _19: &isize;             // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
            let _20: &isize;             // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
            let _27: &f64;               // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
            let _28: &f64;               // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
            let _29: &f64;               // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
            let _30: &f64;               // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
                debug __self_1 => _18;   // in scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
                debug __arg1_0 => _19;   // in scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
                debug __arg1_1 => _20;   // in scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
            }
            scope 4 {
                debug __self_0 => _27;   // in scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
                debug __self_1 => _28;   // in scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
                debug __arg1_0 => _29;   // in scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
                debug __arg1_1 => _30;   // in scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _6 = _2;                         // scope 1 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _8 = _3;                         // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _9 = _5;                         // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _13 = _2;                        // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _11 = (move _12, move _13);      // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _37 = deref_copy (_11.0: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _16 = discriminant((*_37));      // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb14]; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:19: 3:19
    }

    bb4: {
        _38 = deref_copy (_11.1: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _14 = discriminant((*_38));      // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    }

    bb5: {
        unreachable;                     // scope 5 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    }

    bb6: {
        _39 = deref_copy (_11.1: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        _15 = discriminant((*_39));      // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        switchInt(move _15) -> [1: bb10, otherwise: bb5]; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    }

    bb7: {
        _40 = deref_copy (_11.0: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        _17 = &(((*_40) as Bar).0: isize); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        _41 = deref_copy (_11.0: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _18 = &(((*_41) as Bar).1: isize); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _42 = deref_copy (_11.1: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        _19 = &(((*_42) as Bar).0: isize); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        _43 = deref_copy (_11.1: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _20 = &(((*_43) as Bar).1: isize); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _22 = (*_17);                    // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        _23 = (*_19);                    // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        _21 = Eq(move _22, move _23);    // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        switchInt(move _21) -> [0: bb8, otherwise: bb9]; // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    }

    bb8: {
        _10 = const false;               // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        goto -> bb13;                    // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    }

    bb9: {
        _25 = (*_18);                    // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _26 = (*_20);                    // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _24 = Eq(move _25, move _26);    // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _10 = move _24;                  // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        goto -> bb13;                    // scope 3 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    }

    bb10: {
        _44 = deref_copy (_11.0: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        _27 = &(((*_44) as Baz).0: f64); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        _45 = deref_copy (_11.0: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _28 = &(((*_45) as Baz).1: f64); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _46 = deref_copy (_11.1: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        _29 = &(((*_46) as Baz).0: f64); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        _47 = deref_copy (_11.1: &Foo);  // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _30 = &(((*_47) as Baz).1: f64); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _32 = (*_27);                    // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        _33 = (*_29);                    // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        _31 = Eq(move _32, move _33);    // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        switchInt(move _31) -> [0: bb11, otherwise: bb12]; // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    }

    bb11: {
        _10 = const false;               // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        goto -> bb13;                    // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    }

    bb12: {
        _35 = (*_28);                    // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _36 = (*_30);                    // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _34 = Eq(move _35, move _36);    // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _10 = move _34;                  // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        goto -> bb13;                    // scope 4 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    }

    bb13: {
        _0 = move _10;                   // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    }

    bb14: {
        unreachable;                     // scope 5 at ui/deriving/deriving-via-extension-enum.rs:3:10: 3:19
    }
}

fn <impl at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    let mut _3: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    let _4: &isize;                      // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
    let _5: &isize;                      // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    let mut _6: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    let mut _7: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
    let mut _10: &isize;                 // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    let mut _12: &&isize;                // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    let _13: &&isize;                    // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    let _14: &f64;                       // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
    let _15: &f64;                       // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    let mut _16: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    let mut _17: &str;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    let _18: &str;                       // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    let mut _19: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
    let mut _20: &f64;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    let mut _22: &&f64;                  // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    let _23: &&f64;                      // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        debug __self_1 => _5;            // in scope 1 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
    }
    scope 2 {
        debug __self_0 => _14;           // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        debug __self_1 => _15;           // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    }

    bb1: {
        _14 = &(((*_1) as Baz).0: f64);  // scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        _15 = &(((*_1) as Baz).1: f64);  // scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _16 = &mut (*_2);                // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
        _18 = const "Baz";               // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _17 = _18;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
        _20 = _14;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        _19 = move _20 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:9: 6:12
        _23 = &_15;                      // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _22 = _23;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:6:14: 6:17
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _16, move _17, move _19, move _21) -> bb4; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
    }

    bb3: {
        _4 = &(((*_1) as Bar).0: isize); // scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        _5 = &(((*_1) as Bar).1: isize); // scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _6 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
        _8 = const "Bar";                // scope 1 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
        _10 = _4;                        // scope 1 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-via-extension-enum.rs:5:9: 5:14
        _13 = &_5;                       // scope 1 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _12 = _13;                       // scope 1 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _11 = move _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-via-extension-enum.rs:5:16: 5:21
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _6, move _7, move _9, move _11) -> bb4; // scope 1 at ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:3:21: 3:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-enum.rs:3:26: 3:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-via-extension-enum.rs:9:15: 9:15
    let _1: Foo;                         // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:10:9: 10:10
    let mut _3: (&Foo, &Foo);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:13:5: 13:23
    let mut _21: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:13:13: 13:22
    let mut _22: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:13:14: 13:22
    let mut _23: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:13:15: 13:16
    let mut _24: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:13:20: 13:21
    let mut _25: !;                      // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:13:5: 13:23
    let mut _26: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:14:5: 14:22
    let mut _27: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:14:13: 14:21
    let mut _28: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:14:13: 14:21
    let mut _29: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:14:18: 14:20
    let _30: &Foo;                       // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:14:18: 14:20
    let mut _31: !;                      // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:14:5: 14:22
    let mut _32: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:15:5: 15:23
    let mut _33: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:15:13: 15:22
    let mut _34: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:15:14: 15:22
    let mut _35: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:15:14: 15:22
    let mut _36: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:15:19: 15:21
    let _37: &Foo;                       // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:15:19: 15:21
    let mut _38: !;                      // in scope 0 at ui/deriving/deriving-via-extension-enum.rs:15:5: 15:23
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/deriving/deriving-via-extension-enum.rs:10:9: 10:10
        let _2: Foo;                     // in scope 1 at ui/deriving/deriving-via-extension-enum.rs:11:9: 11:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/deriving/deriving-via-extension-enum.rs:11:9: 11:10
            let _6: &Foo;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _7: &Foo;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _6;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _7;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _12: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _12;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Foo::Bar(const 1_isize, const 2_isize); // scope 0 at ui/deriving/deriving-via-extension-enum.rs:10:13: 10:27
        _2 = Foo::Bar(const 1_isize, const 2_isize); // scope 1 at ui/deriving/deriving-via-extension-enum.rs:11:13: 11:27
        _4 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &Foo);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &Foo);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <Foo as PartialEq>::eq(move _10, move _11) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<Foo, Foo>(move _14, move _15, move _17, move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = &_1;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:13:15: 13:16
        _24 = &_2;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:13:20: 13:21
        _22 = <Foo as PartialEq>::ne(move _23, move _24) -> bb4; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:13:14: 13:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:13:14: 13:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = Not(move _22);             // scope 2 at ui/deriving/deriving-via-extension-enum.rs:13:13: 13:22
        _20 = Not(move _21);             // scope 2 at ui/deriving/deriving-via-extension-enum.rs:13:5: 13:23
        switchInt(move _20) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:13:5: 13:23
    }

    bb5: {
        _25 = core::panicking::panic(const "assertion failed: !(a != b)"); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:13:5: 13:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:13:5: 13:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _28 = &_1;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:14:13: 14:21
        _30 = &_2;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:14:18: 14:20
        _29 = _30;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:14:18: 14:20
        _27 = <Foo as PartialEq>::eq(move _28, move _29) -> bb7; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:14:13: 14:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:14:15: 14:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _26 = Not(move _27);             // scope 2 at ui/deriving/deriving-via-extension-enum.rs:14:5: 14:22
        switchInt(move _26) -> [0: bb9, otherwise: bb8]; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:14:5: 14:22
    }

    bb8: {
        _31 = core::panicking::panic(const "assertion failed: a.eq(&b)"); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:14:5: 14:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:14:5: 14:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _35 = &_1;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:15:14: 15:22
        _37 = &_2;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:15:19: 15:21
        _36 = _37;                       // scope 2 at ui/deriving/deriving-via-extension-enum.rs:15:19: 15:21
        _34 = <Foo as PartialEq>::ne(move _35, move _36) -> bb10; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:15:14: 15:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:15:16: 15:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb10: {
        _33 = Not(move _34);             // scope 2 at ui/deriving/deriving-via-extension-enum.rs:15:13: 15:22
        _32 = Not(move _33);             // scope 2 at ui/deriving/deriving-via-extension-enum.rs:15:5: 15:23
        switchInt(move _32) -> [0: bb12, otherwise: bb11]; // scope 2 at ui/deriving/deriving-via-extension-enum.rs:15:5: 15:23
    }

    bb11: {
        _38 = core::panicking::panic(const "assertion failed: !a.ne(&b)"); // scope 2 at ui/deriving/deriving-via-extension-enum.rs:15:5: 15:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-enum.rs:15:5: 15:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-enum.rs:16:2: 16:2
    }
}

fn Foo::Bar(_1: isize, _2: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:5: 5:8

    bb0: {
        _0 = Foo::Bar(move _1, move _2); // scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:5: 5:8
        return;                          // scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:5: 5:8
    }
}

// MIR FOR CTFE
fn Foo::Bar(_1: isize, _2: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:5: 5:8

    bb0: {
        _0 = Foo::Bar(move _1, move _2); // scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:5: 5:8
        return;                          // scope 0 at ui/deriving/deriving-via-extension-enum.rs:5:5: 5:8
    }
}

fn Foo::Baz(_1: f64, _2: f64) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:5: 6:8

    bb0: {
        _0 = Foo::Baz(move _1, move _2); // scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:5: 6:8
        return;                          // scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:5: 6:8
    }
}

// MIR FOR CTFE
fn Foo::Baz(_1: f64, _2: f64) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:5: 6:8

    bb0: {
        _0 = Foo::Baz(move _1, move _2); // scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:5: 6:8
        return;                          // scope 0 at ui/deriving/deriving-via-extension-enum.rs:6:5: 6:8
    }
}
