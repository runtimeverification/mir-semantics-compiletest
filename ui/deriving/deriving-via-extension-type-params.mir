// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-type-params.rs:2:10: 2:19>::eq(_1: &Foo<T>, _2: &Foo<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:10: 2:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:10: 2:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:10: 2:19
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let mut _4: bool;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let mut _5: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let mut _6: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let mut _8: &T;                      // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let mut _9: &T;                      // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    let mut _11: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    let mut _12: isize;                  // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13

    bb0: {
        _5 = ((*_1).0: isize);           // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
        _6 = ((*_2).0: isize);           // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
        _4 = Eq(move _5, move _6);       // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    }

    bb2: {
        _11 = ((*_1).2: isize);          // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _12 = ((*_2).2: isize);          // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _10 = Eq(move _11, move _12);    // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _0 = move _10;                   // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:19: 2:19
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    }

    bb5: {
        _8 = &((*_1).1: T);              // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        _9 = &((*_2).1: T);              // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        _7 = <T as PartialEq>::eq(move _8, move _9) -> bb7; // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    }

    bb7: {
        _3 = move _7;                    // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    }
}

fn <impl at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25>::hash(_1: &Foo<T>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25
    let _3: ();                          // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let mut _4: &isize;                  // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let _5: &isize;                      // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let mut _6: &mut __H;                // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25
    let _7: ();                          // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let mut _8: &T;                      // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let _9: &T;                          // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let mut _10: &mut __H;               // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25
    let mut _11: &isize;                 // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    let _12: &isize;                     // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    let mut _13: &mut __H;               // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25

    bb0: {
        _5 = &((*_1).0: isize);          // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
        _4 = _5;                         // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
        _6 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25
        _3 = <isize as Hash>::hash::<__H>(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &((*_1).1: T);              // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        _8 = _9;                         // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        _10 = &mut (*_2);                // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25
        _7 = <T as Hash>::hash::<__H>(move _8, move _10) -> bb2; // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b mut __H) {<T as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &((*_1).2: isize);         // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _11 = _12;                       // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _13 = &mut (*_2);                // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:21: 2:25
        _0 = <isize as Hash>::hash::<__H>(move _11, move _13) -> bb3; // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:25: 2:25
    }
}

fn <impl at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32>::fmt(_1: &Foo<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let mut _9: &isize;                  // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let _10: &isize;                     // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
    let mut _11: &str;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let _12: &str;                       // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let mut _14: &T;                     // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let _15: &T;                         // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
    let mut _16: &str;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    let _17: &str;                       // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    let mut _19: &&isize;                // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    let _20: &&isize;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
    let _21: &isize;                     // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
        _5 = const "Foo";                // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
        _7 = const "x";                  // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
        _10 = &((*_1).0: isize);         // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
        _9 = _10;                        // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:4:5: 4:13
        _12 = const "y";                 // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        _15 = &((*_1).1: T);             // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        _14 = _15;                       // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:5:5: 5:9
        _17 = const "z";                 // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = _17;                       // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _21 = &((*_1).2: isize);         // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _20 = &_21;                      // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _19 = _20;                       // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _18 = move _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:6:5: 6:13
        _0 = Formatter::<'_>::debug_struct_field3_finish(move _3, move _4, move _6, move _8, move _11, move _13, move _16, move _18) -> bb1; // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:2:27: 2:32
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:2:32: 2:32
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:9:15: 9:15
    let _1: Foo<f64>;                    // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:10:9: 10:10
    let mut _3: (&Foo<f64>, &Foo<f64>);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &Foo<f64>;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &Foo<f64>;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &Foo<f64>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &Foo<f64>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &Foo<f64>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &Foo<f64>;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &Foo<f64>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &Foo<f64>;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:13:5: 13:23
    let mut _21: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:13:13: 13:22
    let mut _22: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:13:14: 13:22
    let mut _23: &Foo<f64>;              // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:13:15: 13:16
    let mut _24: &Foo<f64>;              // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:13:20: 13:21
    let mut _25: !;                      // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:13:5: 13:23
    let mut _26: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:14:5: 14:22
    let mut _27: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:14:13: 14:21
    let mut _28: &Foo<f64>;              // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:14:13: 14:21
    let mut _29: &Foo<f64>;              // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:14:18: 14:20
    let _30: &Foo<f64>;                  // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:14:18: 14:20
    let mut _31: !;                      // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:14:5: 14:22
    let mut _32: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:15:5: 15:23
    let mut _33: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:15:13: 15:22
    let mut _34: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:15:14: 15:22
    let mut _35: &Foo<f64>;              // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:15:14: 15:22
    let mut _36: &Foo<f64>;              // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:15:19: 15:21
    let _37: &Foo<f64>;                  // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:15:19: 15:21
    let mut _38: !;                      // in scope 0 at ui/deriving/deriving-via-extension-type-params.rs:15:5: 15:23
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/deriving/deriving-via-extension-type-params.rs:10:9: 10:10
        let _2: Foo<f64>;                // in scope 1 at ui/deriving/deriving-via-extension-type-params.rs:11:9: 11:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/deriving/deriving-via-extension-type-params.rs:11:9: 11:10
            let _6: &Foo<f64>;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _7: &Foo<f64>;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _6;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _7;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _12: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _12;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Foo::<f64> { x: const 1_isize, y: const 2f64, z: const 3_isize }; // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:10:13: 10:42
        _2 = Foo::<f64> { x: const 1_isize, y: const 2f64, z: const 3_isize }; // scope 1 at ui/deriving/deriving-via-extension-type-params.rs:11:13: 11:42
        _4 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &Foo<f64>);          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &Foo<f64>);          // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <Foo<f64> as PartialEq>::eq(move _10, move _11) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo<f64>, &'b Foo<f64>) -> bool {<Foo<f64> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<Foo<f64>, Foo<f64>>(move _14, move _15, move _17, move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo<f64>, &'b Foo<f64>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo<f64>, Foo<f64>>}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = &_1;                       // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:13:15: 13:16
        _24 = &_2;                       // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:13:20: 13:21
        _22 = <Foo<f64> as PartialEq>::ne(move _23, move _24) -> bb4; // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:13:14: 13:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:13:14: 13:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo<f64>, &'b Foo<f64>) -> bool {<Foo<f64> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = Not(move _22);             // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:13:13: 13:22
        _20 = Not(move _21);             // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:13:5: 13:23
        switchInt(move _20) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:13:5: 13:23
    }

    bb5: {
        _25 = core::panicking::panic(const "assertion failed: !(a != b)"); // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:13:5: 13:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:13:5: 13:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _28 = &_1;                       // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:14:13: 14:21
        _30 = &_2;                       // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:14:18: 14:20
        _29 = _30;                       // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:14:18: 14:20
        _27 = <Foo<f64> as PartialEq>::eq(move _28, move _29) -> bb7; // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:14:13: 14:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:14:15: 14:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo<f64>, &'b Foo<f64>) -> bool {<Foo<f64> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _26 = Not(move _27);             // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:14:5: 14:22
        switchInt(move _26) -> [0: bb9, otherwise: bb8]; // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:14:5: 14:22
    }

    bb8: {
        _31 = core::panicking::panic(const "assertion failed: a.eq(&b)"); // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:14:5: 14:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:14:5: 14:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _35 = &_1;                       // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:15:14: 15:22
        _37 = &_2;                       // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:15:19: 15:21
        _36 = _37;                       // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:15:19: 15:21
        _34 = <Foo<f64> as PartialEq>::ne(move _35, move _36) -> bb10; // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:15:14: 15:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:15:16: 15:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo<f64>, &'b Foo<f64>) -> bool {<Foo<f64> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb10: {
        _33 = Not(move _34);             // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:15:13: 15:22
        _32 = Not(move _33);             // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:15:5: 15:23
        switchInt(move _32) -> [0: bb12, otherwise: bb11]; // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:15:5: 15:23
    }

    bb11: {
        _38 = core::panicking::panic(const "assertion failed: !a.ne(&b)"); // scope 2 at ui/deriving/deriving-via-extension-type-params.rs:15:5: 15:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-type-params.rs:15:5: 15:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-type-params.rs:16:2: 16:2
    }
}
