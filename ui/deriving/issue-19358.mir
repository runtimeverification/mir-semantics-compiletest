// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Trait::dummy(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-19358.rs:5:24: 5:29
    let mut _0: ();                      // return place in scope 0 at ui/deriving/issue-19358.rs:5:31: 5:31

    bb0: {
        return;                          // scope 0 at ui/deriving/issue-19358.rs:5:34: 5:34
    }
}

fn <impl at ui/deriving/issue-19358.rs:7:10: 7:15>::fmt(_1: &Foo<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
    let _5: &str;                        // in scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
    let mut _6: &str;                    // in scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
    let _7: &str;                        // in scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
    let mut _9: &&T;                     // in scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
    let _10: &&T;                        // in scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
    let _11: &T;                         // in scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
        _5 = const "Foo";                // scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
        _7 = const "foo";                // scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:9:5: 9:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
        _11 = &((*_1).0: T);             // scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
        _10 = &_11;                      // scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
        _9 = _10;                        // scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/issue-19358.rs:9:5: 9:11
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/deriving/issue-19358.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/issue-19358.rs:7:15: 7:15
    }
}

fn <impl at ui/deriving/issue-19358.rs:12:10: 12:15>::fmt(_1: &Bar<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
    debug f => _2;                       // in scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
    let _5: &str;                        // in scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
    let mut _6: &str;                    // in scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
    let _7: &str;                        // in scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
    let mut _9: &&T;                     // in scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
    let _10: &&T;                        // in scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
    let _11: &T;                         // in scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
        _5 = const "Bar";                // scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
        _7 = const "bar";                // scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:14:5: 14:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
        _11 = &((*_1).0: T);             // scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
        _10 = &_11;                      // scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
        _9 = _10;                        // scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/issue-19358.rs:14:5: 14:11
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/deriving/issue-19358.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:12:10: 12:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/issue-19358.rs:12:15: 12:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/issue-19358.rs:19:11: 19:11
    let _1: Foo<isize>;                  // in scope 0 at ui/deriving/issue-19358.rs:20:9: 20:10
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/deriving/issue-19358.rs:22:14: 22:25
    let mut _6: &[&str; 3];              // in scope 0 at ui/deriving/issue-19358.rs:22:14: 22:25
    let _7: &[&str; 3];                  // in scope 0 at ui/deriving/issue-19358.rs:22:14: 22:25
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/issue-19358.rs:22:27: 22:28
    let mut _13: &Foo<isize>;            // in scope 0 at ui/deriving/issue-19358.rs:22:27: 22:28
    let _14: &Foo<isize>;                // in scope 0 at ui/deriving/issue-19358.rs:22:27: 22:28
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/issue-19358.rs:22:30: 22:31
    let mut _16: &Bar<isize>;            // in scope 0 at ui/deriving/issue-19358.rs:22:30: 22:31
    let _17: &Bar<isize>;                // in scope 0 at ui/deriving/issue-19358.rs:22:30: 22:31
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/deriving/issue-19358.rs:20:9: 20:10
        let _2: Bar<isize>;              // in scope 1 at ui/deriving/issue-19358.rs:21:9: 21:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/deriving/issue-19358.rs:21:9: 21:10
            let mut _18: &[&str; 3];     // in scope 2 at ui/deriving/issue-19358.rs:22:14: 22:25
        }
    }

    bb0: {
        _1 = Foo::<isize> { foo: const 12_isize }; // scope 0 at ui/deriving/issue-19358.rs:20:13: 20:28
        _2 = Bar::<isize> { bar: const 12_isize }; // scope 1 at ui/deriving/issue-19358.rs:21:13: 21:28
        _18 = const _;                   // scope 2 at ui/deriving/issue-19358.rs:22:14: 22:25
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:22:14: 22:25
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _18;                        // scope 2 at ui/deriving/issue-19358.rs:22:14: 22:25
        _6 = _7;                         // scope 2 at ui/deriving/issue-19358.rs:22:14: 22:25
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 2 at ui/deriving/issue-19358.rs:22:14: 22:25
        _14 = &_1;                       // scope 2 at ui/deriving/issue-19358.rs:22:27: 22:28
        _13 = _14;                       // scope 2 at ui/deriving/issue-19358.rs:22:27: 22:28
        _12 = core::fmt::ArgumentV1::<'_>::new_debug::<Foo<isize>>(move _13) -> bb1; // scope 2 at ui/deriving/issue-19358.rs:22:27: 22:28
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:22:27: 22:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Foo<isize>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Foo<isize>>}, val: Value(<ZST>) }
    }

    bb1: {
        _17 = &_2;                       // scope 2 at ui/deriving/issue-19358.rs:22:30: 22:31
        _16 = _17;                       // scope 2 at ui/deriving/issue-19358.rs:22:30: 22:31
        _15 = core::fmt::ArgumentV1::<'_>::new_debug::<Bar<isize>>(move _16) -> bb2; // scope 2 at ui/deriving/issue-19358.rs:22:30: 22:31
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:22:30: 22:31
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b Bar<isize>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Bar<isize>>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = [move _12, move _15];      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb3; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = _print(move _4) -> bb4;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/issue-19358.rs:23:2: 23:2
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/deriving/issue-19358.rs:22:14: 22:25
    let mut _1: [&str; 3];               // in scope 0 at ui/deriving/issue-19358.rs:22:14: 22:25

    bb0: {
        _1 = [const "", const " ", const "\n"]; // scope 0 at ui/deriving/issue-19358.rs:22:14: 22:25
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:22:14: 22:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:22:14: 22:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/deriving/issue-19358.rs:22:14: 22:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/issue-19358.rs:22:14: 22:25
        return;                          // scope 0 at ui/deriving/issue-19358.rs:22:14: 22:25
    }
}
