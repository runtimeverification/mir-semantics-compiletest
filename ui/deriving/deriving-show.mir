// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-show.rs:3:10: 3:15>::fmt(_1: &Unit, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Unit";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show.rs:6:10: 6:15>::fmt(_1: &Tuple, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &isize;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &usize;

    bb0: {
        _3 = const "Tuple";
        _5 = &((*_1).0: isize);
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _8 = &((*_1).1: usize);
        _7 = &_8;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _3, move _4, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show.rs:9:10: 9:15>::fmt(_1: &Struct, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let _4: &str;
    let mut _5: &dyn std::fmt::Debug;
    let _6: &isize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let _9: &&usize;
    let _10: &usize;

    bb0: {
        _3 = const "Struct";
        _4 = const "x";
        _6 = &((*_1).0: isize);
        _5 = _6 as &dyn std::fmt::Debug (Pointer(Unsize));
        _7 = const "y";
        _10 = &((*_1).1: usize);
        _9 = &_10;
        _8 = _9 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _3, _4, move _5, _7, move _8) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show.rs:12:10: 12:15>::fmt(_1: &Enum, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &str;
    let _5: &isize;
    let _6: &usize;
    let _7: &str;
    let mut _8: &dyn std::fmt::Debug;
    let mut _9: &dyn std::fmt::Debug;
    let _10: &&usize;
    let _11: &isize;
    let _12: &usize;
    let _13: &str;
    let _14: &str;
    let mut _15: &dyn std::fmt::Debug;
    let _16: &str;
    let mut _17: &dyn std::fmt::Debug;
    let _18: &&usize;
    scope 1 {
        debug __self_0 => _5;
        debug __self_1 => _6;
    }
    scope 2 {
        debug __self_0 => _11;
        debug __self_1 => _12;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _11 = &(((*_1) as StructVariant).0: isize);
        _12 = &(((*_1) as StructVariant).1: usize);
        _13 = const "StructVariant";
        _14 = const "x";
        _15 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _16 = const "y";
        _18 = &_12;
        _17 = _18 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_struct_field2_finish(_2, _13, _14, move _15, _16, move _17) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = const "Nullary";
        _0 = Formatter::<'_>::write_str(_2, _4) -> [return: bb5, unwind continue];
    }

    bb4: {
        _5 = &(((*_1) as Variant).0: isize);
        _6 = &(((*_1) as Variant).1: usize);
        _7 = const "Variant";
        _8 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _10 = &_6;
        _9 = _10 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _7, move _8, move _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn <impl at ui/deriving/deriving-show.rs:19:10: 19:15>::fmt(_1: &Pointers, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &*const dyn std::marker::Send;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&*mut dyn std::marker::Sync;
    let _8: &*mut dyn std::marker::Sync;

    bb0: {
        _3 = const "Pointers";
        _5 = &((*_1).0: *const dyn std::marker::Send);
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _8 = &((*_1).1: *mut dyn std::marker::Sync);
        _7 = &_8;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field2_finish(_2, _3, move _4, move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &std::string::String);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let _4: std::string::String;
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let mut _11: &std::string::String;
    let _12: std::string::String;
    let _13: &str;
    let _14: &std::string::String;
    let _15: &std::string::String;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&std::string::String, &std::string::String);
    let mut _22: &std::string::String;
    let _23: std::string::String;
    let _24: std::string::String;
    let mut _25: std::fmt::Arguments<'_>;
    let mut _26: &[&str];
    let mut _27: &[core::fmt::rt::Argument<'_>];
    let _28: &[core::fmt::rt::Argument<'_>; 1];
    let _29: [core::fmt::rt::Argument<'_>; 1];
    let mut _30: core::fmt::rt::Argument<'_>;
    let mut _31: &std::string::String;
    let _32: std::string::String;
    let _33: &str;
    let _34: &std::string::String;
    let _35: &std::string::String;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&std::string::String, &std::string::String);
    let mut _42: &std::string::String;
    let _43: std::string::String;
    let _44: std::string::String;
    let mut _45: std::fmt::Arguments<'_>;
    let mut _46: &[&str];
    let mut _47: &[core::fmt::rt::Argument<'_>];
    let _48: &[core::fmt::rt::Argument<'_>; 1];
    let _49: [core::fmt::rt::Argument<'_>; 1];
    let mut _50: core::fmt::rt::Argument<'_>;
    let mut _51: &std::string::String;
    let _52: std::string::String;
    let _53: &str;
    let _54: &std::string::String;
    let _55: &std::string::String;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&std::string::String, &std::string::String);
    let mut _62: &std::string::String;
    let _63: std::string::String;
    let _64: std::string::String;
    let mut _65: std::fmt::Arguments<'_>;
    let mut _66: &[&str];
    let mut _67: &[core::fmt::rt::Argument<'_>];
    let _68: &[core::fmt::rt::Argument<'_>; 1];
    let _69: [core::fmt::rt::Argument<'_>; 1];
    let mut _70: core::fmt::rt::Argument<'_>;
    let mut _71: &std::string::String;
    let _72: std::string::String;
    let _73: &str;
    let _74: &std::string::String;
    let _75: &std::string::String;
    let mut _76: bool;
    let mut _77: bool;
    let _79: !;
    let mut _80: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _81: (&std::string::String, &std::string::String);
    let mut _82: &std::string::String;
    let _83: std::string::String;
    let _84: std::string::String;
    let mut _85: std::fmt::Arguments<'_>;
    let mut _86: &[&str];
    let mut _87: &[core::fmt::rt::Argument<'_>];
    let _88: &[core::fmt::rt::Argument<'_>; 1];
    let _89: [core::fmt::rt::Argument<'_>; 1];
    let mut _90: core::fmt::rt::Argument<'_>;
    let mut _91: &std::string::String;
    let _92: std::string::String;
    let _93: &str;
    let _94: &std::string::String;
    let _95: &std::string::String;
    let mut _96: bool;
    let mut _97: bool;
    let _99: !;
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: (&std::string::String, &std::string::String);
    let mut _102: &std::string::String;
    let _103: std::string::String;
    let _104: std::string::String;
    let mut _105: std::fmt::Arguments<'_>;
    let mut _106: &[&str];
    let mut _107: &[core::fmt::rt::Argument<'_>];
    let _108: &[core::fmt::rt::Argument<'_>; 1];
    let _109: [core::fmt::rt::Argument<'_>; 1];
    let mut _110: core::fmt::rt::Argument<'_>;
    let mut _111: &std::string::String;
    let _112: std::string::String;
    let _113: &str;
    let _114: &std::string::String;
    let _115: &std::string::String;
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: &Enum;
    let mut _122: &[&str; 1];
    let mut _123: &Enum;
    let mut _124: &[&str; 1];
    let mut _125: &Enum;
    let mut _126: &[&str; 1];
    let mut _127: &Struct;
    let mut _128: &[&str; 1];
    let mut _129: &Tuple;
    let mut _130: &[&str; 1];
    let mut _131: &Unit;
    let mut _132: &[&str; 1];
    scope 1 {
        debug res => _4;
    }
    scope 2 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 3 {
            debug kind => _18;
        }
    }
    scope 4 {
        debug res => _24;
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _38: core::panicking::AssertKind;
        scope 6 {
            debug kind => _38;
        }
    }
    scope 7 {
        debug res => _44;
    }
    scope 8 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 9 {
            debug kind => _58;
        }
    }
    scope 10 {
        debug res => _64;
    }
    scope 11 {
        debug left_val => _74;
        debug right_val => _75;
        let _78: core::panicking::AssertKind;
        scope 12 {
            debug kind => _78;
        }
    }
    scope 13 {
        debug res => _84;
    }
    scope 14 {
        debug left_val => _94;
        debug right_val => _95;
        let _98: core::panicking::AssertKind;
        scope 15 {
            debug kind => _98;
        }
    }
    scope 16 {
        debug res => _104;
    }
    scope 17 {
        debug left_val => _114;
        debug right_val => _115;
        let _118: core::panicking::AssertKind;
        scope 18 {
            debug kind => _118;
        }
    }

    bb0: {
        _132 = const _;
        _6 = _132 as &[&str] (Pointer(Unsize));
        _131 = const _;
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<Unit>(_131) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = format(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = move _4;
        _2 = &_3;
        _13 = const "Unit";
        _12 = <str as ToString>::to_string(_13) -> [return: bb4, unwind: bb66];
    }

    bb4: {
        _11 = &_12;
        _1 = (move _2, move _11);
        _14 = (_1.0: &std::string::String);
        _15 = (_1.1: &std::string::String);
        _17 = <String as PartialEq>::eq(_14, _15) -> [return: bb5, unwind: bb65];
    }

    bb5: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<String, String>(move _18, _14, _15, move _20) -> bb65;
    }

    bb7: {
        drop(_12) -> [return: bb8, unwind: bb66];
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind continue];
    }

    bb9: {
        _130 = const _;
        _26 = _130 as &[&str] (Pointer(Unsize));
        _129 = const _;
        _30 = core::fmt::rt::Argument::<'_>::new_debug::<Tuple>(_129) -> [return: bb10, unwind continue];
    }

    bb10: {
        _29 = [move _30];
        _28 = &_29;
        _27 = _28 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _25 = Arguments::<'_>::new_v1(move _26, move _27) -> [return: bb11, unwind continue];
    }

    bb11: {
        _24 = format(move _25) -> [return: bb12, unwind continue];
    }

    bb12: {
        _23 = move _24;
        _22 = &_23;
        _33 = const "Tuple(1, 2)";
        _32 = <str as ToString>::to_string(_33) -> [return: bb13, unwind: bb64];
    }

    bb13: {
        _31 = &_32;
        _21 = (move _22, move _31);
        _34 = (_21.0: &std::string::String);
        _35 = (_21.1: &std::string::String);
        _37 = <String as PartialEq>::eq(_34, _35) -> [return: bb14, unwind: bb63];
    }

    bb14: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<String, String>(move _38, _34, _35, move _40) -> bb63;
    }

    bb16: {
        drop(_32) -> [return: bb17, unwind: bb64];
    }

    bb17: {
        drop(_23) -> [return: bb18, unwind continue];
    }

    bb18: {
        _128 = const _;
        _46 = _128 as &[&str] (Pointer(Unsize));
        _127 = const _;
        _50 = core::fmt::rt::Argument::<'_>::new_debug::<Struct>(_127) -> [return: bb19, unwind continue];
    }

    bb19: {
        _49 = [move _50];
        _48 = &_49;
        _47 = _48 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _45 = Arguments::<'_>::new_v1(move _46, move _47) -> [return: bb20, unwind continue];
    }

    bb20: {
        _44 = format(move _45) -> [return: bb21, unwind continue];
    }

    bb21: {
        _43 = move _44;
        _42 = &_43;
        _53 = const "Struct { x: 1, y: 2 }";
        _52 = <str as ToString>::to_string(_53) -> [return: bb22, unwind: bb62];
    }

    bb22: {
        _51 = &_52;
        _41 = (move _42, move _51);
        _54 = (_41.0: &std::string::String);
        _55 = (_41.1: &std::string::String);
        _57 = <String as PartialEq>::eq(_54, _55) -> [return: bb23, unwind: bb61];
    }

    bb23: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<String, String>(move _58, _54, _55, move _60) -> bb61;
    }

    bb25: {
        drop(_52) -> [return: bb26, unwind: bb62];
    }

    bb26: {
        drop(_43) -> [return: bb27, unwind continue];
    }

    bb27: {
        _126 = const _;
        _66 = _126 as &[&str] (Pointer(Unsize));
        _125 = const _;
        _70 = core::fmt::rt::Argument::<'_>::new_debug::<Enum>(_125) -> [return: bb28, unwind continue];
    }

    bb28: {
        _69 = [move _70];
        _68 = &_69;
        _67 = _68 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _65 = Arguments::<'_>::new_v1(move _66, move _67) -> [return: bb29, unwind continue];
    }

    bb29: {
        _64 = format(move _65) -> [return: bb30, unwind continue];
    }

    bb30: {
        _63 = move _64;
        _62 = &_63;
        _73 = const "Nullary";
        _72 = <str as ToString>::to_string(_73) -> [return: bb31, unwind: bb60];
    }

    bb31: {
        _71 = &_72;
        _61 = (move _62, move _71);
        _74 = (_61.0: &std::string::String);
        _75 = (_61.1: &std::string::String);
        _77 = <String as PartialEq>::eq(_74, _75) -> [return: bb32, unwind: bb59];
    }

    bb32: {
        _76 = Not(move _77);
        switchInt(move _76) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _78 = core::panicking::AssertKind::Eq;
        _80 = Option::<Arguments<'_>>::None;
        _79 = core::panicking::assert_failed::<String, String>(move _78, _74, _75, move _80) -> bb59;
    }

    bb34: {
        drop(_72) -> [return: bb35, unwind: bb60];
    }

    bb35: {
        drop(_63) -> [return: bb36, unwind continue];
    }

    bb36: {
        _124 = const _;
        _86 = _124 as &[&str] (Pointer(Unsize));
        _123 = const _;
        _90 = core::fmt::rt::Argument::<'_>::new_debug::<Enum>(_123) -> [return: bb37, unwind continue];
    }

    bb37: {
        _89 = [move _90];
        _88 = &_89;
        _87 = _88 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _85 = Arguments::<'_>::new_v1(move _86, move _87) -> [return: bb38, unwind continue];
    }

    bb38: {
        _84 = format(move _85) -> [return: bb39, unwind continue];
    }

    bb39: {
        _83 = move _84;
        _82 = &_83;
        _93 = const "Variant(1, 2)";
        _92 = <str as ToString>::to_string(_93) -> [return: bb40, unwind: bb58];
    }

    bb40: {
        _91 = &_92;
        _81 = (move _82, move _91);
        _94 = (_81.0: &std::string::String);
        _95 = (_81.1: &std::string::String);
        _97 = <String as PartialEq>::eq(_94, _95) -> [return: bb41, unwind: bb57];
    }

    bb41: {
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb43, otherwise: bb42];
    }

    bb42: {
        _98 = core::panicking::AssertKind::Eq;
        _100 = Option::<Arguments<'_>>::None;
        _99 = core::panicking::assert_failed::<String, String>(move _98, _94, _95, move _100) -> bb57;
    }

    bb43: {
        drop(_92) -> [return: bb44, unwind: bb58];
    }

    bb44: {
        drop(_83) -> [return: bb45, unwind continue];
    }

    bb45: {
        _122 = const _;
        _106 = _122 as &[&str] (Pointer(Unsize));
        _121 = const _;
        _110 = core::fmt::rt::Argument::<'_>::new_debug::<Enum>(_121) -> [return: bb46, unwind continue];
    }

    bb46: {
        _109 = [move _110];
        _108 = &_109;
        _107 = _108 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _105 = Arguments::<'_>::new_v1(move _106, move _107) -> [return: bb47, unwind continue];
    }

    bb47: {
        _104 = format(move _105) -> [return: bb48, unwind continue];
    }

    bb48: {
        _103 = move _104;
        _102 = &_103;
        _113 = const "StructVariant { x: 1, y: 2 }";
        _112 = <str as ToString>::to_string(_113) -> [return: bb49, unwind: bb56];
    }

    bb49: {
        _111 = &_112;
        _101 = (move _102, move _111);
        _114 = (_101.0: &std::string::String);
        _115 = (_101.1: &std::string::String);
        _117 = <String as PartialEq>::eq(_114, _115) -> [return: bb50, unwind: bb55];
    }

    bb50: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<String, String>(move _118, _114, _115, move _120) -> bb55;
    }

    bb52: {
        drop(_112) -> [return: bb53, unwind: bb56];
    }

    bb53: {
        drop(_103) -> [return: bb54, unwind continue];
    }

    bb54: {
        return;
    }

    bb55 (cleanup): {
        drop(_112) -> [return: bb56, unwind terminate];
    }

    bb56 (cleanup): {
        drop(_103) -> [return: bb67, unwind terminate];
    }

    bb57 (cleanup): {
        drop(_92) -> [return: bb58, unwind terminate];
    }

    bb58 (cleanup): {
        drop(_83) -> [return: bb67, unwind terminate];
    }

    bb59 (cleanup): {
        drop(_72) -> [return: bb60, unwind terminate];
    }

    bb60 (cleanup): {
        drop(_63) -> [return: bb67, unwind terminate];
    }

    bb61 (cleanup): {
        drop(_52) -> [return: bb62, unwind terminate];
    }

    bb62 (cleanup): {
        drop(_43) -> [return: bb67, unwind terminate];
    }

    bb63 (cleanup): {
        drop(_32) -> [return: bb64, unwind terminate];
    }

    bb64 (cleanup): {
        drop(_23) -> [return: bb67, unwind terminate];
    }

    bb65 (cleanup): {
        drop(_12) -> [return: bb66, unwind terminate];
    }

    bb66 (cleanup): {
        drop(_3) -> [return: bb67, unwind terminate];
    }

    bb67 (cleanup): {
        resume;
    }
}

promoted[0] in main: &Enum = {
    let mut _0: &Enum;
    let mut _1: Enum;

    bb0: {
        _1 = Enum::StructVariant { x: const 1_isize, y: const 2_usize };
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Enum = {
    let mut _0: &Enum;
    let mut _1: Enum;

    bb0: {
        _1 = Enum::Variant(const 1_isize, const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &Enum = {
    let mut _0: &Enum;
    let mut _1: Enum;

    bb0: {
        _1 = Enum::Nullary;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &Struct = {
    let mut _0: &Struct;
    let mut _1: Struct;

    bb0: {
        _1 = Struct { x: const 1_isize, y: const 2_usize };
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &Tuple = {
    let mut _0: &Tuple;
    let mut _1: Tuple;

    bb0: {
        _1 = Tuple(const 1_isize, const 2_usize);
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &Unit = {
    let mut _0: &Unit;
    let mut _1: Unit;

    bb0: {
        _1 = Unit;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn Tuple(_1: isize, _2: usize) -> Tuple {
    let mut _0: Tuple;

    bb0: {
        _0 = Tuple(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Tuple(_1: isize, _2: usize) -> Tuple {
    let mut _0: Tuple;

    bb0: {
        _0 = Tuple(move _1, move _2);
        return;
    }
}

fn Enum::Variant(_1: isize, _2: usize) -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Variant(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Enum::Variant(_1: isize, _2: usize) -> Enum {
    let mut _0: Enum;

    bb0: {
        _0 = Enum::Variant(move _1, move _2);
        return;
    }
}

fn Pointers(_1: *const dyn Send, _2: *mut dyn Sync) -> Pointers {
    let mut _0: Pointers;

    bb0: {
        _0 = Pointers(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Pointers(_1: *const dyn Send, _2: *mut dyn Sync) -> Pointers {
    let mut _0: Pointers;

    bb0: {
        _0 = Pointers(move _1, move _2);
        return;
    }
}
