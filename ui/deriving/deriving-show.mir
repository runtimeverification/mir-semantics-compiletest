// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-show.rs:3:10: 3:15>::fmt(_1: &Unit, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15
        _5 = const "Unit";               // scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/deriving/deriving-show.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:3:10: 3:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show.rs:3:15: 3:15
    }
}

fn <impl at ui/deriving/deriving-show.rs:6:10: 6:15>::fmt(_1: &Tuple, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show.rs:7:14: 7:19
    let mut _7: &isize;                  // in scope 0 at ui/deriving/deriving-show.rs:7:14: 7:19
    let _8: &isize;                      // in scope 0 at ui/deriving/deriving-show.rs:7:14: 7:19
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show.rs:7:21: 7:26
    let mut _10: &&usize;                // in scope 0 at ui/deriving/deriving-show.rs:7:21: 7:26
    let _11: &&usize;                    // in scope 0 at ui/deriving/deriving-show.rs:7:21: 7:26
    let _12: &usize;                     // in scope 0 at ui/deriving/deriving-show.rs:7:21: 7:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
        _5 = const "Tuple";              // scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:6:10: 6:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
        _8 = &((*_1).0: isize);          // scope 0 at ui/deriving/deriving-show.rs:7:14: 7:19
        _7 = _8;                         // scope 0 at ui/deriving/deriving-show.rs:7:14: 7:19
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:7:14: 7:19
        _12 = &((*_1).1: usize);         // scope 0 at ui/deriving/deriving-show.rs:7:21: 7:26
        _11 = &_12;                      // scope 0 at ui/deriving/deriving-show.rs:7:21: 7:26
        _10 = _11;                       // scope 0 at ui/deriving/deriving-show.rs:7:21: 7:26
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:7:21: 7:26
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _3, move _4, move _6, move _9) -> bb1; // scope 0 at ui/deriving/deriving-show.rs:6:10: 6:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:6:10: 6:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show.rs:6:15: 6:15
    }
}

fn <impl at ui/deriving/deriving-show.rs:9:10: 9:15>::fmt(_1: &Struct, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
    let mut _9: &isize;                  // in scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
    let _10: &isize;                     // in scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
    let mut _11: &str;                   // in scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
    let _12: &str;                       // in scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
    let mut _14: &&usize;                // in scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
    let _15: &&usize;                    // in scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
    let _16: &usize;                     // in scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
        _5 = const "Struct";             // scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:9:10: 9:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
        _7 = const "x";                  // scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:10:17: 10:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
        _10 = &((*_1).0: isize);         // scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
        _9 = _10;                        // scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:10:17: 10:25
        _12 = const "y";                 // scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:10:27: 10:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
        _16 = &((*_1).1: usize);         // scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
        _15 = &_16;                      // scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
        _14 = _15;                       // scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:10:27: 10:35
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/deriving/deriving-show.rs:9:10: 9:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:9:10: 9:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show.rs:9:15: 9:15
    }
}

fn <impl at ui/deriving/deriving-show.rs:12:10: 12:15>::fmt(_1: &Enum, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let mut _3: isize;                   // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let mut _5: &str;                    // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let _6: &str;                        // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let _7: &isize;                      // in scope 0 at ui/deriving/deriving-show.rs:15:13: 15:18
    let _8: &usize;                      // in scope 0 at ui/deriving/deriving-show.rs:15:20: 15:25
    let mut _9: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let mut _10: &str;                   // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let _11: &str;                       // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-show.rs:15:13: 15:18
    let mut _13: &isize;                 // in scope 0 at ui/deriving/deriving-show.rs:15:13: 15:18
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-show.rs:15:20: 15:25
    let mut _15: &&usize;                // in scope 0 at ui/deriving/deriving-show.rs:15:20: 15:25
    let _16: &&usize;                    // in scope 0 at ui/deriving/deriving-show.rs:15:20: 15:25
    let _17: &isize;                     // in scope 0 at ui/deriving/deriving-show.rs:16:21: 16:29
    let _18: &usize;                     // in scope 0 at ui/deriving/deriving-show.rs:16:31: 16:40
    let mut _19: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let mut _20: &str;                   // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let _21: &str;                       // in scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    let mut _22: &str;                   // in scope 0 at ui/deriving/deriving-show.rs:16:21: 16:29
    let _23: &str;                       // in scope 0 at ui/deriving/deriving-show.rs:16:21: 16:29
    let mut _24: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-show.rs:16:21: 16:29
    let mut _25: &isize;                 // in scope 0 at ui/deriving/deriving-show.rs:16:21: 16:29
    let mut _26: &str;                   // in scope 0 at ui/deriving/deriving-show.rs:16:31: 16:40
    let _27: &str;                       // in scope 0 at ui/deriving/deriving-show.rs:16:31: 16:40
    let mut _28: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-show.rs:16:31: 16:40
    let mut _29: &&usize;                // in scope 0 at ui/deriving/deriving-show.rs:16:31: 16:40
    let _30: &&usize;                    // in scope 0 at ui/deriving/deriving-show.rs:16:31: 16:40
    scope 1 {
        debug __self_0 => _7;            // in scope 1 at ui/deriving/deriving-show.rs:15:13: 15:18
        debug __self_1 => _8;            // in scope 1 at ui/deriving/deriving-show.rs:15:20: 15:25
    }
    scope 2 {
        debug __self_0 => _17;           // in scope 2 at ui/deriving/deriving-show.rs:16:21: 16:29
        debug __self_1 => _18;           // in scope 2 at ui/deriving/deriving-show.rs:16:31: 16:40
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    }

    bb1: {
        _17 = &(((*_1) as StructVariant).0: isize); // scope 0 at ui/deriving/deriving-show.rs:16:21: 16:29
        _18 = &(((*_1) as StructVariant).1: usize); // scope 0 at ui/deriving/deriving-show.rs:16:31: 16:40
        _19 = &mut (*_2);                // scope 2 at ui/deriving/deriving-show.rs:12:10: 12:15
        _21 = const "StructVariant";     // scope 2 at ui/deriving/deriving-show.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21;                       // scope 2 at ui/deriving/deriving-show.rs:12:10: 12:15
        _23 = const "x";                 // scope 2 at ui/deriving/deriving-show.rs:16:21: 16:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:16:21: 16:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _22 = _23;                       // scope 2 at ui/deriving/deriving-show.rs:16:21: 16:29
        _25 = _17;                       // scope 2 at ui/deriving/deriving-show.rs:16:21: 16:29
        _24 = move _25 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-show.rs:16:21: 16:29
        _27 = const "y";                 // scope 2 at ui/deriving/deriving-show.rs:16:31: 16:40
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:16:31: 16:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _26 = _27;                       // scope 2 at ui/deriving/deriving-show.rs:16:31: 16:40
        _30 = &_18;                      // scope 2 at ui/deriving/deriving-show.rs:16:31: 16:40
        _29 = _30;                       // scope 2 at ui/deriving/deriving-show.rs:16:31: 16:40
        _28 = move _29 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-show.rs:16:31: 16:40
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _19, move _20, move _22, move _24, move _26, move _28) -> bb5; // scope 2 at ui/deriving/deriving-show.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:12:10: 12:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
    }

    bb3: {
        _4 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
        _6 = const "Nullary";            // scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
        _0 = Formatter::<'_>::write_str(move _4, move _5) -> bb5; // scope 0 at ui/deriving/deriving-show.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:12:10: 12:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = &(((*_1) as Variant).0: isize); // scope 0 at ui/deriving/deriving-show.rs:15:13: 15:18
        _8 = &(((*_1) as Variant).1: usize); // scope 0 at ui/deriving/deriving-show.rs:15:20: 15:25
        _9 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-show.rs:12:10: 12:15
        _11 = const "Variant";           // scope 1 at ui/deriving/deriving-show.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 1 at ui/deriving/deriving-show.rs:12:10: 12:15
        _13 = _7;                        // scope 1 at ui/deriving/deriving-show.rs:15:13: 15:18
        _12 = move _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-show.rs:15:13: 15:18
        _16 = &_8;                       // scope 1 at ui/deriving/deriving-show.rs:15:20: 15:25
        _15 = _16;                       // scope 1 at ui/deriving/deriving-show.rs:15:20: 15:25
        _14 = move _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-show.rs:15:20: 15:25
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _9, move _10, move _12, move _14) -> bb5; // scope 1 at ui/deriving/deriving-show.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:12:10: 12:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-show.rs:12:15: 12:15
    }
}

fn <impl at ui/deriving/deriving-show.rs:19:10: 19:15>::fmt(_1: &Pointers, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show.rs:20:17: 20:32
    let mut _7: &*const dyn std::marker::Send; // in scope 0 at ui/deriving/deriving-show.rs:20:17: 20:32
    let _8: &*const dyn std::marker::Send; // in scope 0 at ui/deriving/deriving-show.rs:20:17: 20:32
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-show.rs:20:34: 20:47
    let mut _10: &&*mut dyn std::marker::Sync; // in scope 0 at ui/deriving/deriving-show.rs:20:34: 20:47
    let _11: &&*mut dyn std::marker::Sync; // in scope 0 at ui/deriving/deriving-show.rs:20:34: 20:47
    let _12: &*mut dyn std::marker::Sync; // in scope 0 at ui/deriving/deriving-show.rs:20:34: 20:47

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
        _5 = const "Pointers";           // scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:19:10: 19:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
        _8 = &((*_1).0: *const dyn std::marker::Send); // scope 0 at ui/deriving/deriving-show.rs:20:17: 20:32
        _7 = _8;                         // scope 0 at ui/deriving/deriving-show.rs:20:17: 20:32
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:20:17: 20:32
        _12 = &((*_1).1: *mut dyn std::marker::Sync); // scope 0 at ui/deriving/deriving-show.rs:20:34: 20:47
        _11 = &_12;                      // scope 0 at ui/deriving/deriving-show.rs:20:34: 20:47
        _10 = _11;                       // scope 0 at ui/deriving/deriving-show.rs:20:34: 20:47
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:20:34: 20:47
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _3, move _4, move _6, move _9) -> bb1; // scope 0 at ui/deriving/deriving-show.rs:19:10: 19:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:19:10: 19:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-show.rs:19:15: 19:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-show.rs:28:15: 28:15
    let mut _1: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _4: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _6: &[&str];                 // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _7: &[&str; 1];              // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let _8: &[&str; 1];                  // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
    let mut _14: &Unit;                  // in scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
    let _15: &Unit;                      // in scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
    let mut _16: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _17: std::string::String;        // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let mut _18: &str;                   // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let _19: &str;                       // in scope 0 at ui/deriving/deriving-show.rs:29:14: 29:20
    let _20: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _21: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _24: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _25: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _27: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _28: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _29: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _30: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _31: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _32: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _34: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _35: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _36: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _37: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _38: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _39: &[&str];                // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _40: &[&str; 1];             // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let _41: &[&str; 1];                 // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _42: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _43: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _44: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _45: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _46: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
    let mut _47: &Tuple;                 // in scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
    let _48: &Tuple;                     // in scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
    let mut _49: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _50: std::string::String;        // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let mut _51: &str;                   // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let _52: &str;                       // in scope 0 at ui/deriving/deriving-show.rs:30:21: 30:34
    let _53: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _54: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _57: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _58: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _60: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _61: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _62: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _63: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _64: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _65: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _67: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _68: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _69: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _70: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _71: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _72: &[&str];                // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _73: &[&str; 1];             // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let _74: &[&str; 1];                 // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _75: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _76: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _77: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _78: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _79: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
    let mut _80: &Struct;                // in scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
    let _81: &Struct;                    // in scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
    let mut _82: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _83: std::string::String;        // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let mut _84: &str;                   // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let _85: &str;                       // in scope 0 at ui/deriving/deriving-show.rs:31:31: 31:54
    let _86: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _87: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _90: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _91: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _93: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _94: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _95: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _96: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _97: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _98: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _100: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _101: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _102: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _103: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _104: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _105: &[&str];               // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _106: &[&str; 1];            // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let _107: &[&str; 1];                // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _108: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _109: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _110: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _111: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _112: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
    let mut _113: &Enum;                 // in scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
    let _114: &Enum;                     // in scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
    let mut _115: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _116: std::string::String;       // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let mut _117: &str;                  // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let _118: &str;                      // in scope 0 at ui/deriving/deriving-show.rs:32:23: 32:32
    let _119: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _120: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _121: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _122: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _123: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _124: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _126: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _127: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _128: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _129: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _130: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _131: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _133: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _134: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _135: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _136: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _137: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _138: &[&str];               // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _139: &[&str; 1];            // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let _140: &[&str; 1];                // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _141: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _142: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _143: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _144: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _145: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
    let mut _146: &Enum;                 // in scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
    let _147: &Enum;                     // in scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
    let mut _148: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _149: std::string::String;       // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let mut _150: &str;                  // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let _151: &str;                      // in scope 0 at ui/deriving/deriving-show.rs:33:29: 33:44
    let _152: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _153: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _154: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _155: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _156: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _157: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _159: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _160: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _161: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _162: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _163: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _164: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _165: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _166: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _167: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _168: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _169: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _170: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _171: &[&str];               // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _172: &[&str; 1];            // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let _173: &[&str; 1];                // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _174: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _175: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _176: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _177: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _178: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
    let mut _179: &Enum;                 // in scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
    let _180: &Enum;                     // in scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
    let mut _181: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _182: std::string::String;       // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let mut _183: &str;                  // in scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
    let _184: &str;                      // in scope 0 at ui/deriving/deriving-show.rs:34:44: 34:74
    let _185: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _186: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _187: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _188: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _189: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _190: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _192: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _193: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _194: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _195: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _196: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _197: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _198: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _199: &Enum;                 // in scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
    let mut _200: &[&str; 1];            // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _201: &Enum;                 // in scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
    let mut _202: &[&str; 1];            // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _203: &Enum;                 // in scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
    let mut _204: &[&str; 1];            // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _205: &Struct;               // in scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
    let mut _206: &[&str; 1];            // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _207: &Tuple;                // in scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
    let mut _208: &[&str; 1];            // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _209: &Unit;                 // in scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
    let mut _210: &[&str; 1];            // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    scope 1 {
        debug res => _4;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 2 {
        debug left_val => _20;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _21;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _26: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _26;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 4 {
        debug res => _37;                // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 5 {
        debug left_val => _53;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _54;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _59: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _59;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug res => _70;                // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 8 {
        debug left_val => _86;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _87;          // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _92: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 9 {
            debug kind => _92;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 10 {
        debug res => _103;               // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 11 {
        debug left_val => _119;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _120;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _125: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _125;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug res => _136;               // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 14 {
        debug left_val => _152;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _153;         // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _158: core::panicking::AssertKind; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 15 {
            debug kind => _158;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 16 {
        debug res => _169;               // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 17 {
        debug left_val => _185;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _186;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _191: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _191;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _210 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[11])) }
        _8 = _210;                       // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _7 = _8;                         // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _209 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:29:8: 29:12
                                         // + literal: Const { ty: &Unit, val: Unevaluated(main, [], Some(promoted[10])) }
        _15 = _209;                      // scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
        _14 = _15;                       // scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<Unit>(move _14) -> bb1; // scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:29:8: 29:12
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Unit) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Unit>}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = [move _13];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = &_12;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = format(move _5) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = move _4;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const "Unit";              // scope 0 at ui/deriving/deriving-show.rs:29:14: 29:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:29:14: 29:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _18 = _19;                       // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
        _17 = <str as ToString>::to_string(move _18) -> [return: bb4, unwind: bb66]; // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:51: 24:60
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = &_17;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _16);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _20 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _21 = (_1.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _24 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _25 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _23 = <String as PartialEq>::eq(move _24, move _25) -> [return: bb5, unwind: bb65]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = Not(move _23);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _22) -> [0: bb7, otherwise: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _26 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _30;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = _32;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _27 = core::panicking::assert_failed::<String, String>(move _28, move _29, move _31, move _33) -> bb65; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_17) -> [return: bb8, unwind: bb66]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        drop(_3) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        _208 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[9])) }
        _41 = _208;                      // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _40 = _41;                       // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _39 = move _40 as &[&str] (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _207 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:30:8: 30:19
                                         // + literal: Const { ty: &Tuple, val: Unevaluated(main, [], Some(promoted[8])) }
        _48 = _207;                      // scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
        _47 = _48;                       // scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
        _46 = core::fmt::ArgumentV1::<'_>::new_debug::<Tuple>(move _47) -> bb10; // scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:30:8: 30:19
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b Tuple) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Tuple>}, val: Value(<ZST>) }
    }

    bb10: {
        _45 = [move _46];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _44 = &_45;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _43 = _44;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _42 = move _43 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _38 = Arguments::<'_>::new_v1(move _39, move _42) -> bb11; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _37 = format(move _38) -> bb12;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb12: {
        _36 = move _37;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _35 = &_36;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _52 = const "Tuple(1, 2)";       // scope 0 at ui/deriving/deriving-show.rs:30:21: 30:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:30:21: 30:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _51 = _52;                       // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
        _50 = <str as ToString>::to_string(move _51) -> [return: bb13, unwind: bb64]; // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:51: 24:60
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb13: {
        _49 = &_50;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _34 = (move _35, move _49);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _53 = (_34.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _54 = (_34.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _57 = _53;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _58 = _54;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _56 = <String as PartialEq>::eq(move _57, move _58) -> [return: bb14, unwind: bb63]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _55 = Not(move _56);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _55) -> [0: bb16, otherwise: bb15]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _59 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _63;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _54;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = _65;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _60 = core::panicking::assert_failed::<String, String>(move _61, move _62, move _64, move _66) -> bb63; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_50) -> [return: bb17, unwind: bb64]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        drop(_36) -> bb18;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18: {
        _206 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[7])) }
        _74 = _206;                      // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _73 = _74;                       // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _72 = move _73 as &[&str] (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _205 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:31:8: 31:29
                                         // + literal: Const { ty: &Struct, val: Unevaluated(main, [], Some(promoted[6])) }
        _81 = _205;                      // scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
        _80 = _81;                       // scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
        _79 = core::fmt::ArgumentV1::<'_>::new_debug::<Struct>(move _80) -> bb19; // scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:31:8: 31:29
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b Struct) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Struct>}, val: Value(<ZST>) }
    }

    bb19: {
        _78 = [move _79];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _77 = &_78;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _76 = _77;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _75 = move _76 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _71 = Arguments::<'_>::new_v1(move _72, move _75) -> bb20; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb20: {
        _70 = format(move _71) -> bb21;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb21: {
        _69 = move _70;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _68 = &_69;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _85 = const "Struct { x: 1, y: 2 }"; // scope 0 at ui/deriving/deriving-show.rs:31:31: 31:54
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:31:31: 31:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _84 = _85;                       // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
        _83 = <str as ToString>::to_string(move _84) -> [return: bb22, unwind: bb62]; // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:51: 24:60
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb22: {
        _82 = &_83;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _67 = (move _68, move _82);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _86 = (_67.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _87 = (_67.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _90 = _86;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _91 = _87;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _89 = <String as PartialEq>::eq(move _90, move _91) -> [return: bb23, unwind: bb61]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _88 = Not(move _89);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _88) -> [0: bb25, otherwise: bb24]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _92 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = _86;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _96;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _98 = _87;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = _98;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _93 = core::panicking::assert_failed::<String, String>(move _94, move _95, move _97, move _99) -> bb61; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_83) -> [return: bb26, unwind: bb62]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb26: {
        drop(_69) -> bb27;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27: {
        _204 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[5])) }
        _107 = _204;                     // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _106 = _107;                     // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _105 = move _106 as &[&str] (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _203 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:32:8: 32:21
                                         // + literal: Const { ty: &Enum, val: Unevaluated(main, [], Some(promoted[4])) }
        _114 = _203;                     // scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
        _113 = _114;                     // scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
        _112 = core::fmt::ArgumentV1::<'_>::new_debug::<Enum>(move _113) -> bb28; // scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:32:8: 32:21
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b Enum) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Enum>}, val: Value(<ZST>) }
    }

    bb28: {
        _111 = [move _112];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _110 = &_111;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _109 = _110;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _108 = move _109 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _104 = Arguments::<'_>::new_v1(move _105, move _108) -> bb29; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb29: {
        _103 = format(move _104) -> bb30; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb30: {
        _102 = move _103;                // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _101 = &_102;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _118 = const "Nullary";          // scope 0 at ui/deriving/deriving-show.rs:32:23: 32:32
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:32:23: 32:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _117 = _118;                     // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
        _116 = <str as ToString>::to_string(move _117) -> [return: bb31, unwind: bb60]; // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:51: 24:60
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb31: {
        _115 = &_116;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _100 = (move _101, move _115);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _119 = (_100.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _120 = (_100.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _123 = _119;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _124 = _120;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _122 = <String as PartialEq>::eq(move _123, move _124) -> [return: bb32, unwind: bb59]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb32: {
        _121 = Not(move _122);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _121) -> [0: bb34, otherwise: bb33]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb33: {
        _125 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _127 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _129 = _119;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _128 = _129;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _131 = _120;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _130 = _131;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _132 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _126 = core::panicking::assert_failed::<String, String>(move _127, move _128, move _130, move _132) -> bb59; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_116) -> [return: bb35, unwind: bb60]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35: {
        drop(_102) -> bb36;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb36: {
        _202 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[3])) }
        _140 = _202;                     // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _139 = _140;                     // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _138 = move _139 as &[&str] (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _201 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:33:8: 33:27
                                         // + literal: Const { ty: &Enum, val: Unevaluated(main, [], Some(promoted[2])) }
        _147 = _201;                     // scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
        _146 = _147;                     // scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
        _145 = core::fmt::ArgumentV1::<'_>::new_debug::<Enum>(move _146) -> bb37; // scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:33:8: 33:27
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b Enum) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Enum>}, val: Value(<ZST>) }
    }

    bb37: {
        _144 = [move _145];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _143 = &_144;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _142 = _143;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _141 = move _142 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _137 = Arguments::<'_>::new_v1(move _138, move _141) -> bb38; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb38: {
        _136 = format(move _137) -> bb39; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb39: {
        _135 = move _136;                // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _134 = &_135;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _151 = const "Variant(1, 2)";    // scope 0 at ui/deriving/deriving-show.rs:33:29: 33:44
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:33:29: 33:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _150 = _151;                     // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
        _149 = <str as ToString>::to_string(move _150) -> [return: bb40, unwind: bb58]; // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:51: 24:60
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb40: {
        _148 = &_149;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _133 = (move _134, move _148);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _152 = (_133.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _153 = (_133.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _156 = _152;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _157 = _153;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _155 = <String as PartialEq>::eq(move _156, move _157) -> [return: bb41, unwind: bb57]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb41: {
        _154 = Not(move _155);           // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _154) -> [0: bb43, otherwise: bb42]; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb42: {
        _158 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _160 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _162 = _152;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _161 = _162;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _164 = _153;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _163 = _164;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _165 = Option::<Arguments<'_>>::None; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _159 = core::panicking::assert_failed::<String, String>(move _160, move _161, move _163, move _165) -> bb57; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb43: {
        drop(_149) -> [return: bb44, unwind: bb58]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb44: {
        drop(_135) -> bb45;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb45: {
        _200 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _173 = _200;                     // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _172 = _173;                     // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _171 = move _172 as &[&str] (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        _199 = const _;                  // scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:34:8: 34:42
                                         // + literal: Const { ty: &Enum, val: Unevaluated(main, [], Some(promoted[0])) }
        _180 = _199;                     // scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
        _179 = _180;                     // scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
        _178 = core::fmt::ArgumentV1::<'_>::new_debug::<Enum>(move _179) -> bb46; // scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:34:8: 34:42
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'b> fn(&'b Enum) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Enum>}, val: Value(<ZST>) }
    }

    bb46: {
        _177 = [move _178];              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _176 = &_177;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _175 = _176;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _174 = move _175 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _170 = Arguments::<'_>::new_v1(move _171, move _174) -> bb47; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb47: {
        _169 = format(move _170) -> bb48; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb48: {
        _168 = move _169;                // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _167 = &_168;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _184 = const "StructVariant { x: 1, y: 2 }"; // scope 0 at ui/deriving/deriving-show.rs:34:44: 34:74
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:34:44: 34:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _183 = _184;                     // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
        _182 = <str as ToString>::to_string(move _183) -> [return: bb49, unwind: bb56]; // scope 0 at ui/deriving/deriving-show.rs:24:41: 24:62
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:51: 24:60
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb49: {
        _181 = &_182;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _166 = (move _167, move _181);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _185 = (_166.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _186 = (_166.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _189 = _185;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _190 = _186;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _188 = <String as PartialEq>::eq(move _189, move _190) -> [return: bb50, unwind: bb55]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb50: {
        _187 = Not(move _188);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _187) -> [0: bb52, otherwise: bb51]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb51: {
        _191 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _193 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _195 = _185;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _194 = _195;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _197 = _186;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _196 = _197;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _198 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _192 = core::panicking::assert_failed::<String, String>(move _193, move _194, move _196, move _198) -> bb55; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb52: {
        drop(_182) -> [return: bb53, unwind: bb56]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb53: {
        drop(_168) -> bb54;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb54: {
        return;                          // scope 0 at ui/deriving/deriving-show.rs:35:2: 35:2
    }

    bb55 (cleanup): {
        drop(_182) -> bb56;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb56 (cleanup): {
        drop(_168) -> bb67;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb57 (cleanup): {
        drop(_149) -> bb58;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb58 (cleanup): {
        drop(_135) -> bb67;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb59 (cleanup): {
        drop(_116) -> bb60;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb60 (cleanup): {
        drop(_102) -> bb67;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb61 (cleanup): {
        drop(_83) -> bb62;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb62 (cleanup): {
        drop(_69) -> bb67;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb63 (cleanup): {
        drop(_50) -> bb64;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb64 (cleanup): {
        drop(_36) -> bb67;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb65 (cleanup): {
        drop(_17) -> bb66;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb66 (cleanup): {
        drop(_3) -> bb67;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb67 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-show.rs:28:1: 35:2
    }
}

promoted[0] in main: &Enum = {
    let mut _0: &Enum;                   // return place in scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
    let mut _1: Enum;                    // in scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42

    bb0: {
        _1 = Enum::StructVariant { x: const 1_isize, y: const 2_usize }; // scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
        return;                          // scope 0 at ui/deriving/deriving-show.rs:34:8: 34:42
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _1: [&str; 1];               // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        return;                          // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    }
}

promoted[2] in main: &Enum = {
    let mut _0: &Enum;                   // return place in scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
    let mut _1: Enum;                    // in scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27

    bb0: {
        _1 = Enum::Variant(const 1_isize, const 2_usize); // scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
        return;                          // scope 0 at ui/deriving/deriving-show.rs:33:8: 33:27
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _1: [&str; 1];               // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        return;                          // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    }
}

promoted[4] in main: &Enum = {
    let mut _0: &Enum;                   // return place in scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
    let mut _1: Enum;                    // in scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21

    bb0: {
        _1 = Enum::Nullary;              // scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
        return;                          // scope 0 at ui/deriving/deriving-show.rs:32:8: 32:21
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _1: [&str; 1];               // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        return;                          // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    }
}

promoted[6] in main: &Struct = {
    let mut _0: &Struct;                 // return place in scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
    let mut _1: Struct;                  // in scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29

    bb0: {
        _1 = Struct { x: const 1_isize, y: const 2_usize }; // scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
        return;                          // scope 0 at ui/deriving/deriving-show.rs:31:8: 31:29
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _1: [&str; 1];               // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        return;                          // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    }
}

promoted[8] in main: &Tuple = {
    let mut _0: &Tuple;                  // return place in scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
    let mut _1: Tuple;                   // in scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19

    bb0: {
        _1 = Tuple(const 1_isize, const 2_usize); // scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
        return;                          // scope 0 at ui/deriving/deriving-show.rs:30:8: 30:19
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _1: [&str; 1];               // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        return;                          // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    }
}

promoted[10] in main: &Unit = {
    let mut _0: &Unit;                   // return place in scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
    let mut _1: Unit;                    // in scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12

    bb0: {
        _1 = Unit;                       // scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
        return;                          // scope 0 at ui/deriving/deriving-show.rs:29:8: 29:12
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    let mut _1: [&str; 1];               // in scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-show.rs:24:28: 24:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
        return;                          // scope 0 at ui/deriving/deriving-show.rs:24:28: 24:34
    }
}

fn Tuple(_1: isize, _2: usize) -> Tuple {
    let mut _0: Tuple;                   // return place in scope 0 at ui/deriving/deriving-show.rs:7:1: 7:13

    bb0: {
        _0 = Tuple(move _1, move _2);    // scope 0 at ui/deriving/deriving-show.rs:7:1: 7:13
        return;                          // scope 0 at ui/deriving/deriving-show.rs:7:1: 7:13
    }
}

// MIR FOR CTFE
fn Tuple(_1: isize, _2: usize) -> Tuple {
    let mut _0: Tuple;                   // return place in scope 0 at ui/deriving/deriving-show.rs:7:1: 7:13

    bb0: {
        _0 = Tuple(move _1, move _2);    // scope 0 at ui/deriving/deriving-show.rs:7:1: 7:13
        return;                          // scope 0 at ui/deriving/deriving-show.rs:7:1: 7:13
    }
}

fn Enum::Variant(_1: isize, _2: usize) -> Enum {
    let mut _0: Enum;                    // return place in scope 0 at ui/deriving/deriving-show.rs:15:5: 15:12

    bb0: {
        _0 = Enum::Variant(move _1, move _2); // scope 0 at ui/deriving/deriving-show.rs:15:5: 15:12
        return;                          // scope 0 at ui/deriving/deriving-show.rs:15:5: 15:12
    }
}

// MIR FOR CTFE
fn Enum::Variant(_1: isize, _2: usize) -> Enum {
    let mut _0: Enum;                    // return place in scope 0 at ui/deriving/deriving-show.rs:15:5: 15:12

    bb0: {
        _0 = Enum::Variant(move _1, move _2); // scope 0 at ui/deriving/deriving-show.rs:15:5: 15:12
        return;                          // scope 0 at ui/deriving/deriving-show.rs:15:5: 15:12
    }
}

fn Pointers(_1: *const dyn Send, _2: *mut dyn Sync) -> Pointers {
    let mut _0: Pointers;                // return place in scope 0 at ui/deriving/deriving-show.rs:20:1: 20:16

    bb0: {
        _0 = Pointers(move _1, move _2); // scope 0 at ui/deriving/deriving-show.rs:20:1: 20:16
        return;                          // scope 0 at ui/deriving/deriving-show.rs:20:1: 20:16
    }
}

// MIR FOR CTFE
fn Pointers(_1: *const dyn Send, _2: *mut dyn Sync) -> Pointers {
    let mut _0: Pointers;                // return place in scope 0 at ui/deriving/deriving-show.rs:20:1: 20:16

    bb0: {
        _0 = Pointers(move _1, move _2); // scope 0 at ui/deriving/deriving-show.rs:20:1: 20:16
        return;                          // scope 0 at ui/deriving/deriving-show.rs:20:1: 20:16
    }
}
