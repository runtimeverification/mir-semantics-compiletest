// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-struct-empty.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn <impl at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Foo";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&Foo, &Foo);
    let _2: &Foo;
    let _3: &Foo;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: !;
    let mut _13: &Foo;
    let mut _14: &Foo;
    let mut _15: &Foo;
    let mut _16: &Foo;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }

    bb0: {
        _16 = const _;
        _15 = const _;
        _1 = (_16, _15);
        _2 = (_1.0: &Foo);
        _3 = (_1.1: &Foo);
        _5 = <Foo as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<Foo, Foo>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _14 = const _;
        _13 = const _;
        _11 = <Foo as PartialEq>::ne(_14, _13) -> [return: bb4, unwind continue];
    }

    bb4: {
        _10 = Not(move _11);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _12 = core::panicking::panic(const "assertion failed: !(Foo != Foo)") -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &Foo = {
    let mut _0: &Foo;
    let mut _1: Foo;

    bb0: {
        _1 = Foo;
        _0 = &_1;
        return;
    }
}
