// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-struct-empty.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:10: 2:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:10: 2:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:10: 2:19

    bb0: {
        _0 = const true;                 // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:10: 2:19
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:19: 2:19
    }
}

fn <impl at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
        _5 = const "Foo";                // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-empty.rs:2:21: 2:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:2:26: 2:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:5:15: 5:15
    let mut _1: (&Foo, &Foo);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &Foo;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &Foo;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _6: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _8: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _9: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _11: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _12: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _13: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _14: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _15: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _16: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _18: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:3: 7:25
    let mut _19: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:11: 7:24
    let mut _20: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:12: 7:24
    let mut _21: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16
    let mut _22: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23
    let mut _23: !;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:3: 7:25
    let mut _24: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23
    let mut _25: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16
    let mut _26: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _10: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _10;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _27 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[3])) }
        _2 = _27;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[2])) }
        _3 = _26;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &Foo);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &Foo);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _8 = _4;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _7 = <Foo as PartialEq>::eq(move _8, move _9) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = Not(move _7);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _6) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _10 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _12 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = _4;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _13 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _11 = core::panicking::assert_failed::<Foo, Foo>(move _12, move _13, move _15, move _17); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb3: {
        _25 = const _;                   // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[1])) }
        _21 = _25;                       // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16
        _24 = const _;                   // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[0])) }
        _22 = _24;                       // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23
        _20 = <Foo as PartialEq>::ne(move _21, move _22) -> bb4; // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:12: 7:24
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-empty.rs:7:12: 7:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb4: {
        _19 = Not(move _20);             // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:11: 7:24
        _18 = Not(move _19);             // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:3: 7:25
        switchInt(move _18) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:3: 7:25
    }

    bb5: {
        _23 = core::panicking::panic(const "assertion failed: !(Foo != Foo)"); // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:3: 7:25
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-empty.rs:7:3: 7:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:8:2: 8:2
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23
    let mut _1: Foo;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23

    bb0: {
        _1 = Foo;                        // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:20: 7:23
    }
}

promoted[1] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16
    let mut _1: Foo;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16

    bb0: {
        _1 = Foo;                        // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:7:13: 7:16
    }
}

promoted[2] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:6:19: 6:22

    bb0: {
        _1 = Foo;                        // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:6:19: 6:22
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: Foo;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:6:14: 6:17

    bb0: {
        _1 = Foo;                        // scope 0 at ui/deriving/deriving-via-extension-struct-empty.rs:6:14: 6:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
