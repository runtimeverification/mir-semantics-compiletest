// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:10:1: 10:27>::eq(_1: &FailCmp, _2: &FailCmp) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:11:11: 11:16
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:11:34: 11:38
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _3 = begin_panic::<&str>(const "eq"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:11:48: 11:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:14:1: 14:28>::partial_cmp(_1: &FailCmp, _2: &FailCmp) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:15:20: 15:25
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:15:43: 15:59
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _3 = begin_panic::<&str>(const "partial_cmp"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:15:69: 15:82
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:20:1: 20:21>::cmp(_1: &FailCmp, _2: &FailCmp) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:21:12: 21:17
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:21:35: 21:43
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _3 = begin_panic::<&str>(const "cmp"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:21:53: 21:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:24:10: 24:19>::eq(_1: &ShortCircuit, _2: &ShortCircuit) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:10: 24:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:10: 24:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:10: 24:19
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _4: isize;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _5: isize;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _6: bool;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let mut _7: &FailCmp;                // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let mut _8: &FailCmp;                // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15

    bb0: {
        _4 = ((*_1).0: isize);           // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _5 = ((*_2).0: isize);           // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _3 = Eq(move _4, move _5);       // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    }

    bb2: {
        _7 = &((*_1).1: FailCmp);        // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _8 = &((*_2).1: FailCmp);        // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _6 = <FailCmp as PartialEq>::eq(move _7, move _8) -> bb4; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a FailCmp, &'b FailCmp) -> bool {<FailCmp as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:19: 24:19
    }

    bb4: {
        _0 = move _6;                    // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:24:20: 24:30>::partial_cmp(_1: &ShortCircuit, _2: &ShortCircuit) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:20: 24:30
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:20: 24:30
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:20: 24:30
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _4: &isize;                  // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let _5: &isize;                      // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _6: &isize;                  // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let _7: &isize;                      // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _8: i8;                      // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _10: &FailCmp;               // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let _11: &FailCmp;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let mut _12: &FailCmp;               // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let _13: &FailCmp;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let _14: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    scope 1 {
        debug cmp => _14;                // in scope 1 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    }

    bb0: {
        _5 = &((*_1).0: isize);          // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _4 = _5;                         // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _7 = &((*_2).0: isize);          // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _6 = _7;                         // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _3 = <isize as PartialOrd>::partial_cmp(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant(_3);           // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        switchInt(move _9) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    }

    bb2: {
        _14 = _3;                        // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _0 = _14;                        // scope 1 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:12: 26:13
    }

    bb3: {
        _8 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        switchInt(move _8) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    }

    bb4: {
        _11 = &((*_1).1: FailCmp);       // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _10 = _11;                       // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _13 = &((*_2).1: FailCmp);       // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _12 = _13;                       // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _0 = <FailCmp as PartialOrd>::partial_cmp(move _10, move _12) -> bb5; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a FailCmp, &'b FailCmp) -> Option<std::cmp::Ordering> {<FailCmp as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:30: 24:30
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:24:31: 24:33>::assert_receiver_is_total_eq(_1: &ShortCircuit) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:31: 24:33
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:31: 24:33
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:33: 24:33
    }
}

fn <impl at ui/deriving/deriving-cmp-shortcircuit.rs:24:34: 24:37>::cmp(_1: &ShortCircuit, _2: &ShortCircuit) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:34: 24:37
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:34: 24:37
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:34: 24:37
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _4: &isize;                  // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let _5: &isize;                      // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _6: &isize;                  // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let _7: &isize;                      // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _8: i8;                      // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    let mut _9: &FailCmp;                // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let _10: &FailCmp;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let mut _11: &FailCmp;               // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let _12: &FailCmp;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
    let _13: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    scope 1 {
        debug cmp => _13;                // in scope 1 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    }

    bb0: {
        _5 = &((*_1).0: isize);          // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _4 = _5;                         // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _7 = &((*_2).0: isize);          // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _6 = _7;                         // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _3 = <isize as Ord>::cmp(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = discriminant(_3);           // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
    }

    bb2: {
        _13 = _3;                        // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        _0 = _13;                        // scope 1 at ui/deriving/deriving-cmp-shortcircuit.rs:26:5: 26:13
        goto -> bb4;                     // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:26:12: 26:13
    }

    bb3: {
        _10 = &((*_1).1: FailCmp);       // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _9 = _10;                        // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _12 = &((*_2).1: FailCmp);       // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _11 = _12;                       // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
        _0 = <FailCmp as Ord>::cmp(move _9, move _11) -> bb4; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:27:5: 27:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a FailCmp, &'b FailCmp) -> std::cmp::Ordering {<FailCmp as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:24:37: 24:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:30:15: 30:15
    let _1: ShortCircuit;                // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:31:9: 31:10
    let mut _2: FailCmp;                 // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:31:37: 31:44
    let mut _4: FailCmp;                 // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:32:37: 32:44
    let mut _5: bool;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:34:5: 34:20
    let mut _6: bool;                    // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:34:13: 34:19
    let mut _7: &ShortCircuit;           // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:34:13: 34:14
    let mut _8: &ShortCircuit;           // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:34:18: 34:19
    let mut _9: !;                       // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:34:5: 34:20
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:35:5: 35:19
    let mut _11: bool;                   // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:35:13: 35:18
    let mut _12: &ShortCircuit;          // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:35:13: 35:14
    let mut _13: &ShortCircuit;          // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:35:17: 35:18
    let mut _14: !;                      // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:35:5: 35:19
    let mut _15: (&std::cmp::Ordering, &std::cmp::Ordering); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _16: &std::cmp::Ordering;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _17: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:36:16: 36:25
    let mut _18: &ShortCircuit;          // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:36:16: 36:25
    let mut _19: &ShortCircuit;          // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:36:22: 36:24
    let _20: &ShortCircuit;              // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:36:22: 36:24
    let mut _21: &std::cmp::Ordering;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: &std::cmp::Ordering;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: &std::cmp::Ordering;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &std::cmp::Ordering;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &std::cmp::Ordering;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &std::cmp::Ordering;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &std::cmp::Ordering;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/deriving/deriving-cmp-shortcircuit.rs:31:9: 31:10
        let _3: ShortCircuit;            // in scope 1 at ui/deriving/deriving-cmp-shortcircuit.rs:32:9: 32:10
        scope 2 {
            debug b => _3;               // in scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:32:9: 32:10
            let _22: &std::cmp::Ordering; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _23: &std::cmp::Ordering; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _36: &std::cmp::Ordering; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _22;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _23;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _28: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _28;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = ShortCircuit { x: const 1_isize, y: move _2 }; // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:31:13: 31:46
        _3 = ShortCircuit { x: const 2_isize, y: move _4 }; // scope 1 at ui/deriving/deriving-cmp-shortcircuit.rs:32:13: 32:46
        _7 = &_1;                        // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:34:13: 34:14
        _8 = &_3;                        // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:34:18: 34:19
        _6 = <ShortCircuit as PartialEq>::ne(move _7, move _8) -> bb1; // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:34:13: 34:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:34:13: 34:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ShortCircuit, &'b ShortCircuit) -> bool {<ShortCircuit as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Not(move _6);               // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:34:5: 34:20
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:34:5: 34:20
    }

    bb2: {
        _9 = core::panicking::panic(const "assertion failed: a != b"); // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:34:5: 34:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:34:5: 34:20
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = &_1;                       // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:35:13: 35:14
        _13 = &_3;                       // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:35:17: 35:18
        _11 = <ShortCircuit as PartialOrd>::lt(move _12, move _13) -> bb4; // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:35:13: 35:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:35:13: 35:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ShortCircuit, &'b ShortCircuit) -> bool {<ShortCircuit as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = Not(move _11);             // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:35:5: 35:19
        switchInt(move _10) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:35:5: 35:19
    }

    bb5: {
        _14 = core::panicking::panic(const "assertion failed: a < b"); // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:35:5: 35:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:35:5: 35:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _18 = &_1;                       // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:36:16: 36:25
        _20 = &_3;                       // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:36:22: 36:24
        _19 = _20;                       // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:36:22: 36:24
        _17 = <ShortCircuit as Ord>::cmp(move _18, move _19) -> bb7; // scope 2 at ui/deriving/deriving-cmp-shortcircuit.rs:36:16: 36:25
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-shortcircuit.rs:36:18: 36:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a ShortCircuit, &'b ShortCircuit) -> std::cmp::Ordering {<ShortCircuit as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = &_17;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _36 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &std::cmp::Ordering, val: Unevaluated(main, [], Some(promoted[0])) }
        _21 = _36;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _15 = (move _16, move _21);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_15.0: &std::cmp::Ordering); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_15.1: &std::cmp::Ordering); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = <std::cmp::Ordering as PartialEq>::eq(move _26, move _27) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::cmp::Ordering, &'b std::cmp::Ordering) -> bool {<std::cmp::Ordering as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _24 = Not(move _25);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb10, otherwise: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _28 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _30, move _31, move _33, move _35); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a std::cmp::Ordering, &'b std::cmp::Ordering, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:37:2: 37:2
    }
}

promoted[0] in main: &std::cmp::Ordering = {
    let mut _0: &std::cmp::Ordering;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:36:27: 36:53

    bb0: {
        _1 = Less;                       // scope 0 at ui/deriving/deriving-cmp-shortcircuit.rs:36:27: 36:53
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
