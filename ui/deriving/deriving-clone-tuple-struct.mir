// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-clone-tuple-struct.rs:6:10: 6:15>::clone(_1: &S) -> S {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:6:10: 6:15
    let mut _0: S;                       // return place in scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:6:10: 6:15

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:6:15: 6:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:9:15: 9:15

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:9:17: 9:17
    }
}

fn S(_1: (), _2: ()) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:7:1: 7:9

    bb0: {
        _0 = S(move _1, move _2);        // scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:7:1: 7:9
        return;                          // scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:7:1: 7:9
    }
}

// MIR FOR CTFE
fn S(_1: (), _2: ()) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:7:1: 7:9

    bb0: {
        _0 = S(move _1, move _2);        // scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:7:1: 7:9
        return;                          // scope 0 at ui/deriving/deriving-clone-tuple-struct.rs:7:1: 7:9
    }
}
