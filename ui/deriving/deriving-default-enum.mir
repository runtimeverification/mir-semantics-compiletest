// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-default-enum.rs:4:10: 4:15>::fmt(_1: &NotDefault, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15
        _5 = const "NotDefault";         // scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:4:10: 4:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/deriving/deriving-default-enum.rs:4:10: 4:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:4:10: 4:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:4:15: 4:15
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:4:17: 4:26>::eq(_1: &NotDefault, _2: &NotDefault) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:4:17: 4:26
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:4:17: 4:26
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-default-enum.rs:4:17: 4:26

    bb0: {
        _0 = const true;                 // scope 0 at ui/deriving/deriving-default-enum.rs:4:17: 4:26
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:4:26: 4:26
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:7:10: 7:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    let mut _3: isize;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    let mut _5: &str;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    let _6: &str;                        // in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    let _7: &NotDefault;                 // in scope 0 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
    let mut _8: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    let mut _9: &str;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    let _10: &str;                       // in scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    let mut _11: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
    let mut _12: &&NotDefault;           // in scope 0 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
    let _13: &&NotDefault;               // in scope 0 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
    scope 1 {
        debug __self_0 => _7;            // in scope 1 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    }

    bb1: {
        _7 = &(((*_1) as Beta).0: NotDefault); // scope 0 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _8 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
        _10 = const "Beta";              // scope 1 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 1 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
        _13 = &_7;                       // scope 1 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _12 = _13;                       // scope 1 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _11 = move _12 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _8, move _9, move _11) -> bb4; // scope 1 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:7:10: 7:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
    }

    bb3: {
        _4 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
        _6 = const "Alpha";              // scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:7:10: 7:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
        _0 = Formatter::<'_>::write_str(move _4, move _5) -> bb4; // scope 0 at ui/deriving/deriving-default-enum.rs:7:10: 7:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:7:10: 7:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:7:15: 7:15
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:7:17: 7:24>::default() -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-default-enum.rs:7:17: 7:24

    bb0: {
        _0 = const Foo::Alpha;           // scope 0 at ui/deriving/deriving-default-enum.rs:10:5: 10:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:10:5: 10:10
                                         // + literal: Const { ty: Foo, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:7:24: 7:24
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:7:26: 7:35>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _4: &Foo;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _6: &Foo;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _11: (&Foo, &Foo);           // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _12: &Foo;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _13: &Foo;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _14: isize;                  // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _15: isize;                  // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _18: &NotDefault;            // in scope 0 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
    let mut _19: &NotDefault;            // in scope 0 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
    let mut _20: &Foo;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _21: &Foo;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _22: &Foo;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    let mut _23: &Foo;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
            let _16: &NotDefault;        // in scope 2 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
            let _17: &NotDefault;        // in scope 2 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
            scope 3 {
                debug __self_0 => _16;   // in scope 3 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
                debug __arg1_0 => _17;   // in scope 3 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _6 = _2;                         // scope 1 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _8 = _3;                         // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _9 = _5;                         // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _7 = Eq(move _8, move _9);       // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _13 = _2;                        // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _11 = (move _12, move _13);      // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _20 = deref_copy (_11.0: &Foo);  // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _15 = discriminant((*_20));      // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        switchInt(move _15) -> [1: bb5, otherwise: bb4]; // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:7:35: 7:35
    }

    bb4: {
        _10 = const true;                // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        goto -> bb7;                     // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    }

    bb5: {
        _21 = deref_copy (_11.1: &Foo);  // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        _14 = discriminant((*_21));      // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        switchInt(move _14) -> [1: bb6, otherwise: bb4]; // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    }

    bb6: {
        _22 = deref_copy (_11.0: &Foo);  // scope 2 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _16 = &(((*_22) as Beta).0: NotDefault); // scope 2 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _23 = deref_copy (_11.1: &Foo);  // scope 2 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _17 = &(((*_23) as Beta).0: NotDefault); // scope 2 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _18 = _16;                       // scope 3 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _19 = _17;                       // scope 3 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
        _10 = <NotDefault as PartialEq>::eq(move _18, move _19) -> bb7; // scope 3 at ui/deriving/deriving-default-enum.rs:12:10: 12:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:12:10: 12:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a NotDefault, &'b NotDefault) -> bool {<NotDefault as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = move _10;                   // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-default-enum.rs:7:26: 7:35
    }
}

fn <impl at ui/deriving/deriving-default-enum.rs:16:10: 16:17>::default() -> MyOption<T> {
    let mut _0: MyOption<T>;             // return place in scope 0 at ui/deriving/deriving-default-enum.rs:16:10: 16:17

    bb0: {
        _0 = MyOption::<T>::None;        // scope 0 at ui/deriving/deriving-default-enum.rs:19:5: 19:9
                                         // adt
                                         // + user_ty: UserType(0)
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:16:17: 16:17
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-default-enum.rs:24:11: 24:11
    let mut _1: (&Foo, &Foo);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: Foo;                         // in scope 0 at ui/deriving/deriving-default-enum.rs:25:16: 25:30
    let mut _4: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &Foo;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &Foo;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: bool;                   // in scope 0 at ui/deriving/deriving-default-enum.rs:26:5: 26:73
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 347:10
    let mut _21: MyOption<NotDefault>;   // in scope 0 at ui/deriving/deriving-default-enum.rs:26:22: 26:55
    let mut _22: isize;                  // in scope 0 at ui/deriving/deriving-default-enum.rs:26:57: 26:71
    let mut _23: !;                      // in scope 0 at ui/deriving/deriving-default-enum.rs:26:5: 26:73
    let mut _24: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = <Foo as Default>::default() -> bb1; // scope 0 at ui/deriving/deriving-default-enum.rs:25:16: 25:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:25:16: 25:28
                                         // + literal: Const { ty: fn() -> Foo {<Foo as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _24;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &Foo);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &Foo);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <Foo as PartialEq>::eq(move _9, move _10) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<Foo, Foo>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = <MyOption<NotDefault> as Default>::default() -> bb5; // scope 0 at ui/deriving/deriving-default-enum.rs:26:22: 26:55
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:26:22: 26:53
                                         // + literal: Const { ty: fn() -> MyOption<NotDefault> {<MyOption<NotDefault> as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = discriminant(_21);         // scope 0 at ui/deriving/deriving-default-enum.rs:26:22: 26:55
        switchInt(move _22) -> [0: bb7, otherwise: bb6]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:344:9: 344:9
    }

    bb6: {
        _20 = const false;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:346:18: 346:23
        goto -> bb8;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:346:18: 346:23
    }

    bb7: {
        _20 = const true;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:345:48: 345:52
        goto -> bb8;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:345:48: 345:52
    }

    bb8: {
        _19 = Not(move _20);             // scope 0 at ui/deriving/deriving-default-enum.rs:26:5: 26:73
        switchInt(move _19) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/deriving/deriving-default-enum.rs:26:5: 26:73
    }

    bb9: {
        _23 = core::panicking::panic(const "assertion failed: matches!(MyOption :: < NotDefault > :: default(), MyOption :: None)"); // scope 0 at ui/deriving/deriving-default-enum.rs:26:5: 26:73
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-default-enum.rs:26:5: 26:73
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:27:2: 27:2
    }
}

promoted[0] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo;                     // in scope 0 at ui/deriving/deriving-default-enum.rs:25:32: 25:42

    bb0: {
        _1 = Foo::Alpha;                 // scope 0 at ui/deriving/deriving-default-enum.rs:25:32: 25:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Foo::Beta(_1: NotDefault) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-default-enum.rs:12:5: 12:9

    bb0: {
        _0 = Foo::Beta(move _1);         // scope 0 at ui/deriving/deriving-default-enum.rs:12:5: 12:9
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:12:5: 12:9
    }
}

// MIR FOR CTFE
fn Foo::Beta(_1: NotDefault) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-default-enum.rs:12:5: 12:9

    bb0: {
        _0 = Foo::Beta(move _1);         // scope 0 at ui/deriving/deriving-default-enum.rs:12:5: 12:9
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:12:5: 12:9
    }
}

fn MyOption::Some(_1: T) -> MyOption<T> {
    let mut _0: MyOption<T>;             // return place in scope 0 at ui/deriving/deriving-default-enum.rs:21:5: 21:9

    bb0: {
        _0 = MyOption::<T>::Some(move _1); // scope 0 at ui/deriving/deriving-default-enum.rs:21:5: 21:9
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:21:5: 21:9
    }
}

// MIR FOR CTFE
fn MyOption::Some(_1: T) -> MyOption<T> {
    let mut _0: MyOption<T>;             // return place in scope 0 at ui/deriving/deriving-default-enum.rs:21:5: 21:9

    bb0: {
        _0 = MyOption::<T>::Some(move _1); // scope 0 at ui/deriving/deriving-default-enum.rs:21:5: 21:9
        return;                          // scope 0 at ui/deriving/deriving-default-enum.rs:21:5: 21:9
    }
}
