// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-in-fn.rs:5:15: 5:15
    let _1: main::Foo;                   // in scope 0 at ui/deriving/deriving-in-fn.rs:11:9: 11:10
    let _2: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _5: &[&str];                 // in scope 0 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
    let mut _6: &[&str; 1];              // in scope 0 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
    let _7: &[&str; 1];                  // in scope 0 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-in-fn.rs:12:21: 12:22
    let mut _13: &main::Foo;             // in scope 0 at ui/deriving/deriving-in-fn.rs:12:21: 12:22
    let _14: &main::Foo;                 // in scope 0 at ui/deriving/deriving-in-fn.rs:12:21: 12:22
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/deriving/deriving-in-fn.rs:11:9: 11:10
        let _3: std::string::String;     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let mut _15: &[&str; 1];         // in scope 1 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
        scope 2 {
            debug res => _3;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
    }

    bb0: {
        _1 = Foo { foo: const 10_isize }; // scope 0 at ui/deriving/deriving-in-fn.rs:11:13: 11:28
        _15 = const _;                   // scope 1 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-in-fn.rs:12:13: 12:19
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _15;                        // scope 1 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
        _6 = _7;                         // scope 1 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
        _14 = &_1;                       // scope 1 at ui/deriving/deriving-in-fn.rs:12:21: 12:22
        _13 = _14;                       // scope 1 at ui/deriving/deriving-in-fn.rs:12:21: 12:22
        _12 = core::fmt::ArgumentV1::<'_>::new_debug::<Foo>(move _13) -> bb1; // scope 1 at ui/deriving/deriving-in-fn.rs:12:21: 12:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-in-fn.rs:12:21: 12:22
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Foo) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = &_11;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = _10;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = format(move _4) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = move _3;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        drop(_2) -> bb4;                 // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:120:5: 120:6
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/deriving-in-fn.rs:13:2: 13:2
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
    let mut _1: [&str; 1];               // in scope 0 at ui/deriving/deriving-in-fn.rs:12:13: 12:19

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-in-fn.rs:12:13: 12:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
        return;                          // scope 0 at ui/deriving/deriving-in-fn.rs:12:13: 12:19
    }
}

fn main::<impl at ui/deriving/deriving-in-fn.rs:6:14: 6:19>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
    let mut _9: &&isize;                 // in scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
    let _10: &&isize;                    // in scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
    let _11: &isize;                     // in scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
        _5 = const "Foo";                // scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-in-fn.rs:6:14: 6:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
        _7 = const "foo";                // scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-in-fn.rs:8:9: 8:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
        _11 = &((*_1).0: isize);         // scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
        _10 = &_11;                      // scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
        _9 = _10;                        // scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-in-fn.rs:8:9: 8:19
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/deriving/deriving-in-fn.rs:6:14: 6:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-in-fn.rs:6:14: 6:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-in-fn.rs:6:19: 6:19
    }
}
