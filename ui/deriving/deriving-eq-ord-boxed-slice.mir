// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::boxed::Box<[u8]>;
    let mut _4: &std::boxed::Box<[u8]>;

    bb0: {
        _3 = &((*_1).0: std::boxed::Box<[u8]>);
        _4 = &((*_2).0: std::boxed::Box<[u8]>);
        _0 = <Box<[u8]> as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:21: 2:31>::partial_cmp(_1: &Foo, _2: &Foo) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: &std::boxed::Box<[u8]>;
    let _4: &std::boxed::Box<[u8]>;

    bb0: {
        _3 = &((*_1).0: std::boxed::Box<[u8]>);
        _4 = &((*_2).0: std::boxed::Box<[u8]>);
        _0 = <Box<[u8]> as PartialOrd>::partial_cmp(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:33: 2:35>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:37: 2:40>::cmp(_1: &Foo, _2: &Foo) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let _3: &std::boxed::Box<[u8]>;
    let _4: &std::boxed::Box<[u8]>;

    bb0: {
        _3 = &((*_1).0: std::boxed::Box<[u8]>);
        _4 = &((*_2).0: std::boxed::Box<[u8]>);
        _0 = <Box<[u8]> as Ord>::cmp(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::boxed::Box<[u8]>;
    let _6: &std::boxed::Box<[u8]>;

    bb0: {
        _3 = const "Foo";
        _6 = &((*_1).0: std::boxed::Box<[u8]>);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let mut _2: std::boxed::Box<[u8]>;
    let mut _3: std::boxed::Box<[u8; 3]>;
    let mut _4: [u8; 3];
    let mut _6: std::boxed::Box<[u8]>;
    let mut _7: std::boxed::Box<[u8; 3]>;
    let mut _8: [u8; 3];
    let mut _9: (&Foo, &Foo);
    let mut _10: &Foo;
    let mut _11: &Foo;
    let mut _14: bool;
    let mut _15: bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &bool;
    let _27: bool;
    let mut _28: &Foo;
    let mut _29: &Foo;
    let _30: ();
    let mut _31: std::fmt::Arguments<'_>;
    let mut _32: &[&str];
    let mut _33: &[core::fmt::rt::Argument<'_>];
    let _34: &[core::fmt::rt::Argument<'_>; 1];
    let _35: [core::fmt::rt::Argument<'_>; 1];
    let mut _36: core::fmt::rt::Argument<'_>;
    let _37: &bool;
    let _38: bool;
    let mut _39: &Foo;
    let mut _40: &Foo;
    let _41: ();
    let mut _42: std::fmt::Arguments<'_>;
    let mut _43: &[&str];
    let mut _44: &[core::fmt::rt::Argument<'_>];
    let _45: &[core::fmt::rt::Argument<'_>; 1];
    let _46: [core::fmt::rt::Argument<'_>; 1];
    let mut _47: core::fmt::rt::Argument<'_>;
    let _48: &bool;
    let _49: bool;
    let mut _50: &Foo;
    let mut _51: &Foo;
    let _52: ();
    let mut _53: std::fmt::Arguments<'_>;
    let mut _54: &[&str];
    let mut _55: &[core::fmt::rt::Argument<'_>];
    let _56: &[core::fmt::rt::Argument<'_>; 1];
    let _57: [core::fmt::rt::Argument<'_>; 1];
    let mut _58: core::fmt::rt::Argument<'_>;
    let _59: &bool;
    let _60: bool;
    let mut _61: &Foo;
    let mut _62: &Foo;
    let _63: ();
    let mut _64: std::fmt::Arguments<'_>;
    let mut _65: &[&str];
    let mut _66: &[core::fmt::rt::Argument<'_>];
    let _67: &[core::fmt::rt::Argument<'_>; 1];
    let _68: [core::fmt::rt::Argument<'_>; 1];
    let mut _69: core::fmt::rt::Argument<'_>;
    let _70: &bool;
    let _71: bool;
    let mut _72: &Foo;
    let mut _73: &Foo;
    let _74: ();
    let mut _75: std::fmt::Arguments<'_>;
    let mut _76: &[&str];
    let mut _77: &[core::fmt::rt::Argument<'_>];
    let _78: &[core::fmt::rt::Argument<'_>; 1];
    let _79: [core::fmt::rt::Argument<'_>; 1];
    let mut _80: core::fmt::rt::Argument<'_>;
    let _81: &bool;
    let _82: bool;
    let mut _83: &Foo;
    let mut _84: &Foo;
    scope 1 {
        debug a => _1;
        let _5: Foo;
        scope 2 {
            debug b => _5;
            let _12: &Foo;
            let _13: &Foo;
            let mut _85: &[&str; 2];
            let mut _86: &[&str; 2];
            let mut _87: &[&str; 2];
            let mut _88: &[&str; 2];
            let mut _89: &[&str; 2];
            let mut _90: &[&str; 2];
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _4 = [const 0_u8, const 1_u8, const 2_u8];
        _3 = Box::<[u8; 3]>::new(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _1 = Foo(move _2);
        _8 = [const 0_u8, const 1_u8, const 2_u8];
        _7 = Box::<[u8; 3]>::new(move _8) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _6 = move _7 as std::boxed::Box<[u8]> (Pointer(Unsize));
        _5 = Foo(move _6);
        _10 = &_1;
        _11 = &_5;
        _9 = (move _10, move _11);
        _12 = (_9.0: &Foo);
        _13 = (_9.1: &Foo);
        _15 = <Foo as PartialEq>::eq(_12, _13) -> [return: bb3, unwind: bb32];
    }

    bb3: {
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<Foo, Foo>(move _16, _12, _13, move _18) -> bb32;
    }

    bb5: {
        _90 = const _;
        _21 = _90 as &[&str] (Pointer(Unsize));
        _28 = &_1;
        _29 = &_5;
        _27 = <Foo as PartialEq>::ne(move _28, move _29) -> [return: bb6, unwind: bb32];
    }

    bb6: {
        _26 = &_27;
        _25 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_26) -> [return: bb7, unwind: bb32];
    }

    bb7: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb8, unwind: bb32];
    }

    bb8: {
        _19 = _print(move _20) -> [return: bb9, unwind: bb32];
    }

    bb9: {
        _89 = const _;
        _32 = _89 as &[&str] (Pointer(Unsize));
        _39 = &_1;
        _40 = &_5;
        _38 = <Foo as PartialOrd>::lt(move _39, move _40) -> [return: bb10, unwind: bb32];
    }

    bb10: {
        _37 = &_38;
        _36 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_37) -> [return: bb11, unwind: bb32];
    }

    bb11: {
        _35 = [move _36];
        _34 = &_35;
        _33 = _34 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _31 = Arguments::<'_>::new_v1(move _32, move _33) -> [return: bb12, unwind: bb32];
    }

    bb12: {
        _30 = _print(move _31) -> [return: bb13, unwind: bb32];
    }

    bb13: {
        _88 = const _;
        _43 = _88 as &[&str] (Pointer(Unsize));
        _50 = &_1;
        _51 = &_5;
        _49 = <Foo as PartialOrd>::le(move _50, move _51) -> [return: bb14, unwind: bb32];
    }

    bb14: {
        _48 = &_49;
        _47 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_48) -> [return: bb15, unwind: bb32];
    }

    bb15: {
        _46 = [move _47];
        _45 = &_46;
        _44 = _45 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _42 = Arguments::<'_>::new_v1(move _43, move _44) -> [return: bb16, unwind: bb32];
    }

    bb16: {
        _41 = _print(move _42) -> [return: bb17, unwind: bb32];
    }

    bb17: {
        _87 = const _;
        _54 = _87 as &[&str] (Pointer(Unsize));
        _61 = &_1;
        _62 = &_5;
        _60 = <Foo as PartialEq>::eq(move _61, move _62) -> [return: bb18, unwind: bb32];
    }

    bb18: {
        _59 = &_60;
        _58 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_59) -> [return: bb19, unwind: bb32];
    }

    bb19: {
        _57 = [move _58];
        _56 = &_57;
        _55 = _56 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _53 = Arguments::<'_>::new_v1(move _54, move _55) -> [return: bb20, unwind: bb32];
    }

    bb20: {
        _52 = _print(move _53) -> [return: bb21, unwind: bb32];
    }

    bb21: {
        _86 = const _;
        _65 = _86 as &[&str] (Pointer(Unsize));
        _72 = &_1;
        _73 = &_5;
        _71 = <Foo as PartialOrd>::gt(move _72, move _73) -> [return: bb22, unwind: bb32];
    }

    bb22: {
        _70 = &_71;
        _69 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_70) -> [return: bb23, unwind: bb32];
    }

    bb23: {
        _68 = [move _69];
        _67 = &_68;
        _66 = _67 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _64 = Arguments::<'_>::new_v1(move _65, move _66) -> [return: bb24, unwind: bb32];
    }

    bb24: {
        _63 = _print(move _64) -> [return: bb25, unwind: bb32];
    }

    bb25: {
        _85 = const _;
        _76 = _85 as &[&str] (Pointer(Unsize));
        _83 = &_1;
        _84 = &_5;
        _82 = <Foo as PartialOrd>::ge(move _83, move _84) -> [return: bb26, unwind: bb32];
    }

    bb26: {
        _81 = &_82;
        _80 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_81) -> [return: bb27, unwind: bb32];
    }

    bb27: {
        _79 = [move _80];
        _78 = &_79;
        _77 = _78 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _75 = Arguments::<'_>::new_v1(move _76, move _77) -> [return: bb28, unwind: bb32];
    }

    bb28: {
        _74 = _print(move _75) -> [return: bb29, unwind: bb32];
    }

    bb29: {
        drop(_5) -> [return: bb30, unwind: bb33];
    }

    bb30: {
        drop(_1) -> [return: bb31, unwind continue];
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_5) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
