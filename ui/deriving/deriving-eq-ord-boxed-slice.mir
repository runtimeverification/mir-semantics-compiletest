// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:10: 2:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:10: 2:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:10: 2:19
    let mut _3: &std::boxed::Box<[u8]>;  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let mut _4: &std::boxed::Box<[u8]>;  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21

    bb0: {
        _3 = &((*_1).0: std::boxed::Box<[u8]>); // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _4 = &((*_2).0: std::boxed::Box<[u8]>); // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _0 = <Box<[u8]> as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<[u8]>, &'b Box<[u8]>) -> bool {<Box<[u8]> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:19: 2:19
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:21: 2:31>::partial_cmp(_1: &Foo, _2: &Foo) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:21: 2:31
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:21: 2:31
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:21: 2:31
    let mut _3: &std::boxed::Box<[u8]>;  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let _4: &std::boxed::Box<[u8]>;      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let mut _5: &std::boxed::Box<[u8]>;  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let _6: &std::boxed::Box<[u8]>;      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21

    bb0: {
        _4 = &((*_1).0: std::boxed::Box<[u8]>); // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _3 = _4;                         // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _6 = &((*_2).0: std::boxed::Box<[u8]>); // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _5 = _6;                         // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _0 = <Box<[u8]> as PartialOrd>::partial_cmp(move _3, move _5) -> bb1; // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<[u8]>, &'b Box<[u8]>) -> Option<std::cmp::Ordering> {<Box<[u8]> as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:31: 2:31
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:33: 2:35>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:33: 2:35
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:33: 2:35
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:35: 2:35
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:37: 2:40>::cmp(_1: &Foo, _2: &Foo) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:37: 2:40
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:37: 2:40
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:37: 2:40
    let mut _3: &std::boxed::Box<[u8]>;  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let _4: &std::boxed::Box<[u8]>;      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let mut _5: &std::boxed::Box<[u8]>;  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let _6: &std::boxed::Box<[u8]>;      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21

    bb0: {
        _4 = &((*_1).0: std::boxed::Box<[u8]>); // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _3 = _4;                         // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _6 = &((*_2).0: std::boxed::Box<[u8]>); // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _5 = _6;                         // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _0 = <Box<[u8]> as Ord>::cmp(move _3, move _5) -> bb1; // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<[u8]>, &'b Box<[u8]>) -> std::cmp::Ordering {<Box<[u8]> as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:40: 2:40
    }
}

fn <impl at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let mut _7: &&std::boxed::Box<[u8]>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let _8: &&std::boxed::Box<[u8]>;     // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
    let _9: &std::boxed::Box<[u8]>;      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
        _5 = const "Foo";                // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
        _9 = &((*_1).0: std::boxed::Box<[u8]>); // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _7 = _8;                         // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:12: 3:21
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:2:42: 2:47
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:2:47: 2:47
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:5:15: 5:15
    let _1: Foo;                         // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:6:9: 6:10
    let mut _2: std::boxed::Box<[u8]>;   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:6:17: 6:36
    let mut _3: std::boxed::Box<[u8; 3]>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:6:17: 6:36
    let mut _4: [u8; 3];                 // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:6:26: 6:35
    let mut _6: std::boxed::Box<[u8]>;   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:7:17: 7:36
    let mut _7: std::boxed::Box<[u8; 3]>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:7:17: 7:36
    let mut _8: [u8; 3];                 // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:7:26: 7:35
    let mut _9: (&Foo, &Foo);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _26: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _27: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _28: &[&str];                // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
    let mut _29: &[&str; 2];             // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
    let _30: &[&str; 2];                 // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
    let mut _31: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _32: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _33: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _34: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _35: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
    let mut _36: &bool;                  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
    let _37: &bool;                      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
    let _38: bool;                       // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
    let mut _39: &Foo;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:21
    let mut _40: &Foo;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:25: 9:26
    let _41: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _42: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _43: &[&str];                // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
    let mut _44: &[&str; 2];             // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
    let _45: &[&str; 2];                 // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
    let mut _46: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _47: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _48: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _49: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _50: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
    let mut _51: &bool;                  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
    let _52: &bool;                      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
    let _53: bool;                       // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
    let mut _54: &Foo;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:21
    let mut _55: &Foo;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:24: 10:25
    let _56: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _57: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _58: &[&str];                // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
    let mut _59: &[&str; 2];             // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
    let _60: &[&str; 2];                 // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
    let mut _61: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _62: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _63: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _64: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _65: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
    let mut _66: &bool;                  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
    let _67: &bool;                      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
    let _68: bool;                       // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
    let mut _69: &Foo;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:21
    let mut _70: &Foo;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:25: 11:26
    let _71: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _72: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _73: &[&str];                // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
    let mut _74: &[&str; 2];             // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
    let _75: &[&str; 2];                 // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
    let mut _76: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _77: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _78: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _79: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _80: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
    let mut _81: &bool;                  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
    let _82: &bool;                      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
    let _83: bool;                       // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
    let mut _84: &Foo;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:21
    let mut _85: &Foo;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:25: 12:26
    let _86: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _87: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _88: &[&str];                // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
    let mut _89: &[&str; 2];             // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
    let _90: &[&str; 2];                 // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
    let mut _91: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _92: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _93: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _94: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _95: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
    let mut _96: &bool;                  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
    let _97: &bool;                      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
    let _98: bool;                       // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
    let mut _99: &Foo;                   // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:21
    let mut _100: &Foo;                  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:24: 13:25
    let _101: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _102: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _103: &[&str];               // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
    let mut _104: &[&str; 2];            // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
    let _105: &[&str; 2];                // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
    let mut _106: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _107: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _108: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _109: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _110: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
    let mut _111: &bool;                 // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
    let _112: &bool;                     // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
    let _113: bool;                      // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
    let mut _114: &Foo;                  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:21
    let mut _115: &Foo;                  // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:25: 14:26
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/deriving/deriving-eq-ord-boxed-slice.rs:6:9: 6:10
        let _5: Foo;                     // in scope 1 at ui/deriving/deriving-eq-ord-boxed-slice.rs:7:9: 7:10
        scope 2 {
            debug b => _5;               // in scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:7:9: 7:10
            let _12: &Foo;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _13: &Foo;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _116: &[&str; 2];    // in scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
            let mut _117: &[&str; 2];    // in scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
            let mut _118: &[&str; 2];    // in scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
            let mut _119: &[&str; 2];    // in scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
            let mut _120: &[&str; 2];    // in scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
            let mut _121: &[&str; 2];    // in scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
            scope 3 {
                debug left_val => _12;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _13;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _18;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = [const 0_u8, const 1_u8, const 2_u8]; // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:6:26: 6:35
        _3 = Box::<[u8; 3]>::new(move _4) -> bb1; // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:6:17: 6:36
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:6:17: 6:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([u8; 3]) -> Box<[u8; 3]> {Box::<[u8; 3]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = move _3 as std::boxed::Box<[u8]> (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:6:17: 6:36
        _1 = Foo(move _2);               // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:6:13: 6:37
        _8 = [const 0_u8, const 1_u8, const 2_u8]; // scope 1 at ui/deriving/deriving-eq-ord-boxed-slice.rs:7:26: 7:35
        _7 = Box::<[u8; 3]>::new(move _8) -> [return: bb2, unwind: bb33]; // scope 1 at ui/deriving/deriving-eq-ord-boxed-slice.rs:7:17: 7:36
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:7:17: 7:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn([u8; 3]) -> Box<[u8; 3]> {Box::<[u8; 3]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _7 as std::boxed::Box<[u8]> (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-eq-ord-boxed-slice.rs:7:17: 7:36
        _5 = Foo(move _6);               // scope 1 at ui/deriving/deriving-eq-ord-boxed-slice.rs:7:13: 7:37
        _10 = &_1;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _11 = &_5;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_9.0: &Foo);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_9.1: &Foo);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <Foo as PartialEq>::eq(move _16, move _17) -> [return: bb3, unwind: bb32]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<Foo, Foo>(move _20, move _21, move _23, move _25) -> bb32; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb5: {
        _121 = const _;                  // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[5])) }
        _30 = _121;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
        _29 = _30;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
        _28 = move _29 as &[&str] (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
        _39 = &_1;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:21
        _40 = &_5;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:25: 9:26
        _38 = <Foo as PartialEq>::ne(move _39, move _40) -> [return: bb6, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb6: {
        _37 = &_38;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
        _36 = _37;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
        _35 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _36) -> [return: bb7, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:9:20: 9:26
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb7: {
        _34 = [move _35];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _33 = &_34;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _32 = _33;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _31 = move _32 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _27 = Arguments::<'_>::new_v1(move _28, move _31) -> [return: bb8, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _26 = _print(move _27) -> [return: bb9, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb9: {
        _120 = const _;                  // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[4])) }
        _45 = _120;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
        _44 = _45;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
        _43 = move _44 as &[&str] (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
        _54 = &_1;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:21
        _55 = &_5;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:24: 10:25
        _53 = <Foo as PartialOrd>::lt(move _54, move _55) -> [return: bb10, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb10: {
        _52 = &_53;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
        _51 = _52;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
        _50 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _51) -> [return: bb11, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:10:20: 10:25
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb11: {
        _49 = [move _50];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _48 = &_49;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _47 = _48;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _46 = move _47 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _42 = Arguments::<'_>::new_v1(move _43, move _46) -> [return: bb12, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _41 = _print(move _42) -> [return: bb13, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb13: {
        _119 = const _;                  // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[3])) }
        _60 = _119;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
        _59 = _60;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
        _58 = move _59 as &[&str] (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
        _69 = &_1;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:21
        _70 = &_5;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:25: 11:26
        _68 = <Foo as PartialOrd>::le(move _69, move _70) -> [return: bb14, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb14: {
        _67 = &_68;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
        _66 = _67;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
        _65 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _66) -> [return: bb15, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:11:20: 11:26
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb15: {
        _64 = [move _65];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _63 = &_64;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _62 = _63;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _61 = move _62 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _57 = Arguments::<'_>::new_v1(move _58, move _61) -> [return: bb16, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb16: {
        _56 = _print(move _57) -> [return: bb17, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb17: {
        _118 = const _;                  // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[2])) }
        _75 = _118;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
        _74 = _75;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
        _73 = move _74 as &[&str] (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
        _84 = &_1;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:21
        _85 = &_5;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:25: 12:26
        _83 = <Foo as PartialEq>::eq(move _84, move _85) -> [return: bb18, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _82 = &_83;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
        _81 = _82;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
        _80 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _81) -> [return: bb19, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:12:20: 12:26
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb19: {
        _79 = [move _80];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _78 = &_79;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _77 = _78;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _76 = move _77 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _72 = Arguments::<'_>::new_v1(move _73, move _76) -> [return: bb20, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb20: {
        _71 = _print(move _72) -> [return: bb21, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb21: {
        _117 = const _;                  // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _90 = _117;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
        _89 = _90;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
        _88 = move _89 as &[&str] (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
        _99 = &_1;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:21
        _100 = &_5;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:24: 13:25
        _98 = <Foo as PartialOrd>::gt(move _99, move _100) -> [return: bb22, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb22: {
        _97 = &_98;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
        _96 = _97;                       // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
        _95 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _96) -> [return: bb23, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:13:20: 13:25
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb23: {
        _94 = [move _95];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _93 = &_94;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _92 = _93;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _91 = move _92 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _87 = Arguments::<'_>::new_v1(move _88, move _91) -> [return: bb24, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb24: {
        _86 = _print(move _87) -> [return: bb25, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb25: {
        _116 = const _;                  // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _105 = _116;                     // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
        _104 = _105;                     // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
        _103 = move _104 as &[&str] (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
        _114 = &_1;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:21
        _115 = &_5;                      // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:25: 14:26
        _113 = <Foo as PartialOrd>::ge(move _114, move _115) -> [return: bb26, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb26: {
        _112 = &_113;                    // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
        _111 = _112;                     // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
        _110 = core::fmt::ArgumentV1::<'_>::new_display::<bool>(move _111) -> [return: bb27, unwind: bb32]; // scope 2 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:14:20: 14:26
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: for<'b> fn(&'b bool) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<bool>}, val: Value(<ZST>) }
    }

    bb27: {
        _109 = [move _110];              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _108 = &_109;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _107 = _108;                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _106 = move _107 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _102 = Arguments::<'_>::new_v1(move _103, move _106) -> [return: bb28, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb28: {
        _101 = _print(move _102) -> [return: bb29, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb29: {
        drop(_5) -> [return: bb30, unwind: bb33]; // scope 1 at ui/deriving/deriving-eq-ord-boxed-slice.rs:15:1: 15:2
    }

    bb30: {
        drop(_1) -> bb31;                // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:15:1: 15:2
    }

    bb31: {
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:15:2: 15:2
    }

    bb32 (cleanup): {
        drop(_5) -> bb33;                // scope 1 at ui/deriving/deriving-eq-ord-boxed-slice.rs:15:1: 15:2
    }

    bb33 (cleanup): {
        drop(_1) -> bb34;                // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:15:1: 15:2
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:5:1: 15:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
    let mut _1: [&str; 2];               // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:14:14: 14:18
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
    let mut _1: [&str; 2];               // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:13:14: 13:18
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
    let mut _1: [&str; 2];               // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:12:14: 12:18
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
    let mut _1: [&str; 2];               // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:11:14: 11:18
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
    let mut _1: [&str; 2];               // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:10:14: 10:18
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
    let mut _1: [&str; 2];               // in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:9:14: 9:18
    }
}

fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:1: 3:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:1: 3:11
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:1: 3:11
    }
}

// MIR FOR CTFE
fn Foo(_1: Box<[u8]>) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:1: 3:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:1: 3:11
        return;                          // scope 0 at ui/deriving/deriving-eq-ord-boxed-slice.rs:3:1: 3:11
    }
}
