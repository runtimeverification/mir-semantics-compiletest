// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static CLONED: AtomicBool = {
    let mut _0: std::sync::atomic::AtomicBool; // return place in scope 0 at ui/deriving/deriving-copyclone.rs:13:16: 13:26

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/deriving/deriving-copyclone.rs:13:29: 13:51
        _0 = AtomicBool::new(const false) -> bb1; // scope 0 at ui/deriving/deriving-copyclone.rs:13:29: 13:51
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:13:29: 13:44
                                         // + literal: Const { ty: fn(bool) -> AtomicBool {AtomicBool::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-copyclone.rs:13:1: 13:52
    }
}

fn <impl at ui/deriving/deriving-copyclone.rs:15:1: 15:20>::clone(_1: &Liar) -> Liar {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-copyclone.rs:16:14: 16:19
    let mut _0: Liar;                    // return place in scope 0 at ui/deriving/deriving-copyclone.rs:16:24: 16:28
    let _2: ();                          // in scope 0 at ui/deriving/deriving-copyclone.rs:18:9: 18:45
    let mut _3: &std::sync::atomic::AtomicBool; // in scope 0 at ui/deriving/deriving-copyclone.rs:18:9: 18:45
    let _4: &std::sync::atomic::AtomicBool; // in scope 0 at ui/deriving/deriving-copyclone.rs:18:9: 18:15
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/deriving/deriving-copyclone.rs:18:28: 18:44

    bb0: {
        _4 = const {alloc1: &AtomicBool}; // scope 0 at ui/deriving/deriving-copyclone.rs:18:9: 18:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:18:9: 18:15
                                         // + literal: Const { ty: &AtomicBool, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/deriving/deriving-copyclone.rs:18:9: 18:45
        _5 = const SeqCst;               // scope 0 at ui/deriving/deriving-copyclone.rs:18:28: 18:44
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:18:28: 18:44
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicBool::store(move _3, const true, move _5) -> bb1; // scope 0 at ui/deriving/deriving-copyclone.rs:18:9: 18:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:18:16: 18:21
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, bool, std::sync::atomic::Ordering) {AtomicBool::store}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-copyclone.rs:21:6: 21:6
    }
}

alloc1 (static: CLONED, size: 1, align: 1) {
    00                                              │ .
}

fn <impl at ui/deriving/deriving-copyclone.rs:25:16: 25:21>::clone(_1: &Innocent) -> Innocent {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-copyclone.rs:25:16: 25:21
    let mut _0: Innocent;                // return place in scope 0 at ui/deriving/deriving-copyclone.rs:25:16: 25:21
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-copyclone.rs:25:21: 25:21
    }
}

fn <impl at ui/deriving/deriving-copyclone.rs:28:1: 28:14>::new() -> Innocent {
    let mut _0: Innocent;                // return place in scope 0 at ui/deriving/deriving-copyclone.rs:29:17: 29:21

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-copyclone.rs:31:6: 31:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-copyclone.rs:34:11: 34:11
    let mut _1: Innocent;                // in scope 0 at ui/deriving/deriving-copyclone.rs:35:13: 35:36
    let mut _2: &Innocent;               // in scope 0 at ui/deriving/deriving-copyclone.rs:35:13: 35:36
    let _3: Innocent;                    // in scope 0 at ui/deriving/deriving-copyclone.rs:35:13: 35:28
    let mut _4: bool;                    // in scope 0 at ui/deriving/deriving-copyclone.rs:37:5: 37:44
    let mut _5: bool;                    // in scope 0 at ui/deriving/deriving-copyclone.rs:37:13: 37:43
    let mut _6: bool;                    // in scope 0 at ui/deriving/deriving-copyclone.rs:37:14: 37:43
    let mut _7: &std::sync::atomic::AtomicBool; // in scope 0 at ui/deriving/deriving-copyclone.rs:37:14: 37:43
    let _8: &std::sync::atomic::AtomicBool; // in scope 0 at ui/deriving/deriving-copyclone.rs:37:14: 37:20
    let mut _9: std::sync::atomic::Ordering; // in scope 0 at ui/deriving/deriving-copyclone.rs:37:26: 37:42
    let mut _10: !;                      // in scope 0 at ui/deriving/deriving-copyclone.rs:37:5: 37:44
    scope 1 {
    }

    bb0: {
        _3 = Innocent::new() -> bb1;     // scope 0 at ui/deriving/deriving-copyclone.rs:35:13: 35:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:35:13: 35:26
                                         // + literal: Const { ty: fn() -> Innocent {Innocent::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at ui/deriving/deriving-copyclone.rs:35:13: 35:36
        _1 = <Innocent as Clone>::clone(move _2) -> bb2; // scope 0 at ui/deriving/deriving-copyclone.rs:35:13: 35:36
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:35:29: 35:34
                                         // + literal: Const { ty: for<'a> fn(&'a Innocent) -> Innocent {<Innocent as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const {alloc1: &AtomicBool}; // scope 1 at ui/deriving/deriving-copyclone.rs:37:14: 37:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:37:14: 37:20
                                         // + literal: Const { ty: &AtomicBool, val: Value(Scalar(alloc1)) }
        _7 = _8;                         // scope 1 at ui/deriving/deriving-copyclone.rs:37:14: 37:43
        _9 = const SeqCst;               // scope 1 at ui/deriving/deriving-copyclone.rs:37:26: 37:42
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:37:26: 37:42
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _6 = AtomicBool::load(move _7, move _9) -> bb3; // scope 1 at ui/deriving/deriving-copyclone.rs:37:14: 37:43
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:37:21: 37:25
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicBool, std::sync::atomic::Ordering) -> bool {AtomicBool::load}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = Not(move _6);               // scope 1 at ui/deriving/deriving-copyclone.rs:37:13: 37:43
        _4 = Not(move _5);               // scope 1 at ui/deriving/deriving-copyclone.rs:37:5: 37:44
        switchInt(move _4) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/deriving/deriving-copyclone.rs:37:5: 37:44
    }

    bb4: {
        _10 = core::panicking::panic(const "assertion failed: !CLONED.load(Ordering::SeqCst)"); // scope 1 at ui/deriving/deriving-copyclone.rs:37:5: 37:44
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-copyclone.rs:37:5: 37:44
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-copyclone.rs:38:2: 38:2
    }
}

alloc1 (static: CLONED, size: 1, align: 1) {
    00                                              │ .
}

fn Innocent(_1: Liar) -> Innocent {
    let mut _0: Innocent;                // return place in scope 0 at ui/deriving/deriving-copyclone.rs:26:1: 26:16

    bb0: {
        _0 = Innocent(move _1);          // scope 0 at ui/deriving/deriving-copyclone.rs:26:1: 26:16
        return;                          // scope 0 at ui/deriving/deriving-copyclone.rs:26:1: 26:16
    }
}

// MIR FOR CTFE
fn Innocent(_1: Liar) -> Innocent {
    let mut _0: Innocent;                // return place in scope 0 at ui/deriving/deriving-copyclone.rs:26:1: 26:16

    bb0: {
        _0 = Innocent(move _1);          // scope 0 at ui/deriving/deriving-copyclone.rs:26:1: 26:16
        return;                          // scope 0 at ui/deriving/deriving-copyclone.rs:26:1: 26:16
    }
}
