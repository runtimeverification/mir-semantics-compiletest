// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-clone-generic-tuple-struct.rs:4:10: 4:15>::clone(_1: &S<T>) -> S<T> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:4:10: 4:15
    let mut _0: S<T>;                    // return place in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:4:10: 4:15
    let mut _2: T;                       // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:13: 6:14
    let mut _3: &T;                      // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:13: 6:14
    let _4: &T;                          // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:13: 6:14
    let mut _5: ();                      // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:16: 6:18
    let mut _6: &();                     // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:16: 6:18
    let _7: &();                         // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:16: 6:18

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:13: 6:14
        _3 = _4;                         // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:13: 6:14
        _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:13: 6:14
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-tuple-struct.rs:6:13: 6:14
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: ());             // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:16: 6:18
        _6 = _7;                         // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:16: 6:18
        _5 = (*_6);                      // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:16: 6:18
        _0 = S::<T>(move _2, move _5);   // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:4:10: 4:15
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:4:15: 4:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:8:15: 8:15
    let mut _1: S<i32>;                  // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
    let mut _2: &S<i32>;                 // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
    let mut _3: &S<i32>;                 // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
    scope 1 {
    }

    bb0: {
        _3 = const _;                    // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
                                         // + literal: Const { ty: &S<i32>, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
        _1 = <S<i32> as Clone>::clone(move _2) -> bb1; // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-tuple-struct.rs:9:22: 9:27
                                         // + literal: Const { ty: for<'a> fn(&'a S<i32>) -> S<i32> {<S<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:10:2: 10:2
    }
}

promoted[0] in main: &S<i32> = {
    let mut _0: &S<i32>;                 // return place in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
    let mut _1: S<i32>;                  // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:21
    let mut _2: ();                      // in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:18: 9:20

    bb0: {
        _2 = ();                         // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:18: 9:20
        _1 = S::<i32>(const 1_i32, move _2); // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:21
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:9:13: 9:29
    }
}

fn S(_1: T, _2: ()) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:1: 6:12

    bb0: {
        _0 = S::<T>(move _1, move _2);   // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:1: 6:12
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:1: 6:12
    }
}

// MIR FOR CTFE
fn S(_1: T, _2: ()) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:1: 6:12

    bb0: {
        _0 = S::<T>(move _1, move _2);   // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:1: 6:12
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-tuple-struct.rs:6:1: 6:12
    }
}
