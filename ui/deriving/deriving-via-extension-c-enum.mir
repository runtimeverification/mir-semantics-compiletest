// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
    let mut _4: &Foo;                    // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
    let mut _6: &Foo;                    // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
    let mut _7: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        _6 = _2;                         // scope 1 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        _7 = _3;                         // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        _8 = _5;                         // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        _0 = Eq(move _7, move _8);       // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:3:10: 3:19
        return;                          // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:19: 3:19
    }
}

fn <impl at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    let mut _5: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    let _6: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
        _5 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    }

    bb1: {
        _8 = const "Boo";                // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:25: 3:26
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
    }

    bb3: {
        _6 = const "Bar";                // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:25: 3:26
    }

    bb4: {
        _7 = const "Baz";                // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:25: 3:26
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb6; // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:3:21: 3:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:3:26: 3:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:10:15: 10:15
    let _1: Foo;                         // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:11:9: 11:10
    let mut _3: (&Foo, &Foo);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:14:5: 14:23
    let mut _21: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:14:13: 14:22
    let mut _22: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:14:14: 14:22
    let mut _23: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:14:15: 14:16
    let mut _24: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:14:20: 14:21
    let mut _25: !;                      // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:14:5: 14:23
    let mut _26: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:15:5: 15:22
    let mut _27: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:15:13: 15:21
    let mut _28: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:15:13: 15:21
    let mut _29: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:15:18: 15:20
    let _30: &Foo;                       // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:15:18: 15:20
    let mut _31: !;                      // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:15:5: 15:22
    let mut _32: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:16:5: 16:23
    let mut _33: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:16:13: 16:22
    let mut _34: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:16:14: 16:22
    let mut _35: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:16:14: 16:22
    let mut _36: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:16:19: 16:21
    let _37: &Foo;                       // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:16:19: 16:21
    let mut _38: !;                      // in scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:16:5: 16:23
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/deriving/deriving-via-extension-c-enum.rs:11:9: 11:10
        let _2: Foo;                     // in scope 1 at ui/deriving/deriving-via-extension-c-enum.rs:12:9: 12:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:12:9: 12:10
            let _6: &Foo;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _7: &Foo;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _6;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _7;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _12: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _12;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Foo::Bar;                   // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:11:13: 11:21
        _2 = Foo::Bar;                   // scope 1 at ui/deriving/deriving-via-extension-c-enum.rs:12:13: 12:21
        _4 = &_1;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &Foo);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &Foo);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <Foo as PartialEq>::eq(move _10, move _11) -> bb1; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Not(move _9);               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _12 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<Foo, Foo>(move _14, move _15, move _17, move _19); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb3: {
        _23 = &_1;                       // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:14:15: 14:16
        _24 = &_2;                       // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:14:20: 14:21
        _22 = <Foo as PartialEq>::ne(move _23, move _24) -> bb4; // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:14:14: 14:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:14:14: 14:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = Not(move _22);             // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:14:13: 14:22
        _20 = Not(move _21);             // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:14:5: 14:23
        switchInt(move _20) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:14:5: 14:23
    }

    bb5: {
        _25 = core::panicking::panic(const "assertion failed: !(a != b)"); // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:14:5: 14:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:14:5: 14:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _28 = &_1;                       // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:15:13: 15:21
        _30 = &_2;                       // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:15:18: 15:20
        _29 = _30;                       // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:15:18: 15:20
        _27 = <Foo as PartialEq>::eq(move _28, move _29) -> bb7; // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:15:13: 15:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:15:15: 15:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _26 = Not(move _27);             // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:15:5: 15:22
        switchInt(move _26) -> [0: bb9, otherwise: bb8]; // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:15:5: 15:22
    }

    bb8: {
        _31 = core::panicking::panic(const "assertion failed: a.eq(&b)"); // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:15:5: 15:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:15:5: 15:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _35 = &_1;                       // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:16:14: 16:22
        _37 = &_2;                       // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:16:19: 16:21
        _36 = _37;                       // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:16:19: 16:21
        _34 = <Foo as PartialEq>::ne(move _35, move _36) -> bb10; // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:16:14: 16:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:16:16: 16:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb10: {
        _33 = Not(move _34);             // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:16:13: 16:22
        _32 = Not(move _33);             // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:16:5: 16:23
        switchInt(move _32) -> [0: bb12, otherwise: bb11]; // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:16:5: 16:23
    }

    bb11: {
        _38 = core::panicking::panic(const "assertion failed: !a.ne(&b)"); // scope 2 at ui/deriving/deriving-via-extension-c-enum.rs:16:5: 16:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-c-enum.rs:16:5: 16:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-c-enum.rs:17:2: 17:2
    }
}
