// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-with-repr-packed.rs:7:16: 7:21>::clone(_1: &Aligned) -> Aligned {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:7:16: 7:21
    let mut _0: Aligned;                 // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:7:16: 7:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/deriving/deriving-with-repr-packed.rs:7:16: 7:21
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:7:21: 7:21
    }
}

fn check_align(_1: *const Aligned) -> () {
    debug ptr => _1;                     // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:11:16: 11:19
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:11:37: 11:37
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:16: 12:57
    let mut _5: usize;                   // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:16: 12:28
    let mut _6: *const Aligned;          // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:16: 12:19
    let mut _7: usize;                   // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:31: 12:57
    let mut _8: bool;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:16: 12:57
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _10;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = _1;                         // scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:16: 12:19
        _5 = move _6 as usize (PointerExposeAddress); // scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:16: 12:28
        _7 = align_of::<Aligned>() -> bb1; // scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:31: 12:57
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:12:31: 12:55
                                         // + literal: Const { ty: fn() -> usize {align_of::<Aligned>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = Eq(_7, const 0_usize);      // scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:16: 12:57
        assert(!move _8, "attempt to calculate the remainder of `{}` with a divisor of zero", _5) -> bb2; // scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:16: 12:57
    }

    bb2: {
        _4 = Rem(move _5, move _7);      // scope 0 at ui/deriving/deriving-with-repr-packed.rs:12:16: 12:57
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(check_align, [], Some(promoted[0])) }
        _9 = _24;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_2.0: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_2.1: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 0_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<usize, usize>(move _18, move _19, move _21, move _23); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:14:2: 14:2
    }
}

promoted[0] in check_align: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:13:16: 13:17

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/deriving/deriving-with-repr-packed.rs:13:16: 13:17
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn <impl at ui/deriving/deriving-with-repr-packed.rs:16:1: 16:27>::eq(_1: &Aligned, _2: &Aligned) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:17:11: 17:16
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:17:18: 17:23
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:17:35: 17:39
    let _3: ();                          // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:18:9: 18:26
    let mut _4: *const Aligned;          // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:18:21: 18:25
    let _5: ();                          // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:19:9: 19:27
    let mut _6: *const Aligned;          // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:19:21: 19:26
    let mut _7: usize;                   // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:20:9: 20:15
    let mut _8: usize;                   // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:20:19: 20:26

    bb0: {
        _4 = &raw const (*_1);           // scope 0 at ui/deriving/deriving-with-repr-packed.rs:18:21: 18:25
        _3 = check_align(move _4) -> bb1; // scope 0 at ui/deriving/deriving-with-repr-packed.rs:18:9: 18:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:18:9: 18:20
                                         // + literal: Const { ty: fn(*const Aligned) {check_align}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &raw const (*_2);           // scope 0 at ui/deriving/deriving-with-repr-packed.rs:19:21: 19:26
        _5 = check_align(move _6) -> bb2; // scope 0 at ui/deriving/deriving-with-repr-packed.rs:19:9: 19:27
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:19:9: 19:20
                                         // + literal: Const { ty: fn(*const Aligned) {check_align}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = ((*_1).0: usize);           // scope 0 at ui/deriving/deriving-with-repr-packed.rs:20:9: 20:15
        _8 = ((*_2).0: usize);           // scope 0 at ui/deriving/deriving-with-repr-packed.rs:20:19: 20:26
        _0 = Eq(move _7, move _8);       // scope 0 at ui/deriving/deriving-with-repr-packed.rs:20:9: 20:26
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:21:6: 21:6
    }
}

fn <impl at ui/deriving/deriving-with-repr-packed.rs:25:16: 25:21>::clone(_1: &Packed) -> Packed {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:25:16: 25:21
    let mut _0: Packed;                  // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:25:16: 25:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/deriving/deriving-with-repr-packed.rs:25:16: 25:21
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:25:21: 25:21
    }
}

fn <impl at ui/deriving/deriving-with-repr-packed.rs:25:23: 25:32>::eq(_1: &Packed, _2: &Packed) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:25:23: 25:32
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:25:23: 25:32
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:25:23: 25:32
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
    let mut _4: &Aligned;                // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
    let _5: Aligned;                     // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
    let mut _6: &Aligned;                // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
    let _7: Aligned;                     // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
    let mut _8: bool;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
    let mut _9: &Aligned;                // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
    let _10: Aligned;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
    let mut _11: &Aligned;               // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
    let _12: Aligned;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31

    bb0: {
        _5 = ((*_1).0: Aligned);         // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
        _4 = &_5;                        // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
        _7 = ((*_2).0: Aligned);         // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
        _6 = &_7;                        // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
        _3 = <Aligned as PartialEq>::eq(move _4, move _6) -> bb4; // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:26:15: 26:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Aligned, &'b Aligned) -> bool {<Aligned as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
    }

    bb2: {
        _10 = ((*_1).1: Aligned);        // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
        _9 = &_10;                       // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
        _12 = ((*_2).1: Aligned);        // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
        _11 = &_12;                      // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
        _8 = <Aligned as PartialEq>::eq(move _9, move _11) -> bb5; // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Aligned, &'b Aligned) -> bool {<Aligned as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:25:32: 25:32
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
    }

    bb5: {
        _0 = move _8;                    // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:24: 26:31
    }
}

fn <impl at ui/deriving/deriving-with-repr-packed.rs:28:10: 28:19>::eq(_1: &Dealigned<T>, _2: &Dealigned<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:28:10: 28:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:28:10: 28:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:28:10: 28:19
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:21: 30:23
    let mut _4: u8;                      // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:21: 30:23
    let mut _5: u8;                      // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:21: 30:23
    let mut _6: bool;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
    let mut _7: &T;                      // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
    let mut _8: &T;                      // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26

    bb0: {
        _4 = ((*_1).0: u8);              // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:21: 30:23
        _5 = ((*_2).0: u8);              // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:21: 30:23
        _3 = Eq(move _4, move _5);       // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:21: 30:23
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
    }

    bb2: {
        _7 = &((*_1).1: T);              // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
        _8 = &((*_2).1: T);              // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
        _6 = <T as PartialEq>::eq(move _7, move _8) -> bb4; // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:28:19: 28:19
    }

    bb4: {
        _0 = move _6;                    // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:25: 30:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:32:11: 32:11
    let _1: Dealigned<Packed>;           // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:33:9: 33:11
    let mut _2: Packed;                  // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:33:27: 33:57
    let mut _3: Aligned;                 // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:33:34: 33:44
    let mut _4: Aligned;                 // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:33:46: 33:56
    let mut _6: &Dealigned<Packed>;      // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:34:14: 34:16
    let mut _7: &Dealigned<Packed>;      // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:34:20: 34:22
    let mut _8: bool;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:35:5: 35:16
    let mut _9: bool;                    // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:35:13: 35:15
    let mut _10: !;                      // in scope 0 at ui/deriving/deriving-with-repr-packed.rs:35:5: 35:16
    scope 1 {
        debug d1 => _1;                  // in scope 1 at ui/deriving/deriving-with-repr-packed.rs:33:9: 33:11
        let _5: bool;                    // in scope 1 at ui/deriving/deriving-with-repr-packed.rs:34:9: 34:11
        scope 2 {
            debug ck => _5;              // in scope 2 at ui/deriving/deriving-with-repr-packed.rs:34:9: 34:11
        }
    }

    bb0: {
        _3 = const Aligned(1_usize);     // scope 0 at ui/deriving/deriving-with-repr-packed.rs:33:34: 33:44
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:33:34: 33:44
                                         // + literal: Const { ty: Aligned, val: Value(Scalar(0x0000000000000001)) }
        _4 = const Aligned(2_usize);     // scope 0 at ui/deriving/deriving-with-repr-packed.rs:33:46: 33:56
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:33:46: 33:56
                                         // + literal: Const { ty: Aligned, val: Value(Scalar(0x0000000000000002)) }
        _2 = Packed(move _3, move _4);   // scope 0 at ui/deriving/deriving-with-repr-packed.rs:33:27: 33:57
        _1 = Dealigned::<Packed>(const 0_u8, move _2); // scope 0 at ui/deriving/deriving-with-repr-packed.rs:33:14: 33:58
        _6 = &_1;                        // scope 1 at ui/deriving/deriving-with-repr-packed.rs:34:14: 34:16
        _7 = &_1;                        // scope 1 at ui/deriving/deriving-with-repr-packed.rs:34:20: 34:22
        _5 = <Dealigned<Packed> as PartialEq>::eq(move _6, move _7) -> bb1; // scope 1 at ui/deriving/deriving-with-repr-packed.rs:34:14: 34:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:34:14: 34:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Dealigned<Packed>, &'b Dealigned<Packed>) -> bool {<Dealigned<Packed> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = _5;                         // scope 2 at ui/deriving/deriving-with-repr-packed.rs:35:13: 35:15
        _8 = Not(move _9);               // scope 2 at ui/deriving/deriving-with-repr-packed.rs:35:5: 35:16
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/deriving/deriving-with-repr-packed.rs:35:5: 35:16
    }

    bb2: {
        _10 = core::panicking::panic(const "assertion failed: ck"); // scope 2 at ui/deriving/deriving-with-repr-packed.rs:35:5: 35:16
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-with-repr-packed.rs:35:5: 35:16
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:36:2: 36:2
    }
}

fn Aligned(_1: usize) -> Aligned {
    let mut _0: Aligned;                 // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:8:1: 8:15

    bb0: {
        _0 = Aligned(move _1);           // scope 0 at ui/deriving/deriving-with-repr-packed.rs:8:1: 8:15
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:8:1: 8:15
    }
}

// MIR FOR CTFE
fn Aligned(_1: usize) -> Aligned {
    let mut _0: Aligned;                 // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:8:1: 8:15

    bb0: {
        _0 = Aligned(move _1);           // scope 0 at ui/deriving/deriving-with-repr-packed.rs:8:1: 8:15
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:8:1: 8:15
    }
}

fn Packed(_1: Aligned, _2: Aligned) -> Packed {
    let mut _0: Packed;                  // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:1: 26:14

    bb0: {
        _0 = Packed(move _1, move _2);   // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:1: 26:14
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:1: 26:14
    }
}

// MIR FOR CTFE
fn Packed(_1: Aligned, _2: Aligned) -> Packed {
    let mut _0: Packed;                  // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:1: 26:14

    bb0: {
        _0 = Packed(move _1, move _2);   // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:1: 26:14
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:26:1: 26:14
    }
}

fn Dealigned(_1: u8, _2: T) -> Dealigned<T> {
    let mut _0: Dealigned<T>;            // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:1: 30:20

    bb0: {
        _0 = Dealigned::<T>(move _1, move _2); // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:1: 30:20
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:1: 30:20
    }
}

// MIR FOR CTFE
fn Dealigned(_1: u8, _2: T) -> Dealigned<T> {
    let mut _0: Dealigned<T>;            // return place in scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:1: 30:20

    bb0: {
        _0 = Dealigned::<T>(move _1, move _2); // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:1: 30:20
        return;                          // scope 0 at ui/deriving/deriving-with-repr-packed.rs:30:1: 30:20
    }
}
