// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-self-lifetime-totalord-totaleq.rs:4:10: 4:19>::eq(_1: &A<'_>, _2: &A<'_>) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &&isize;
    let mut _4: &&isize;

    bb0: {
        _3 = &((*_1).0: &isize);
        _4 = &((*_2).0: &isize);
        _0 = <&isize as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-self-lifetime-totalord-totaleq.rs:4:21: 4:23>::assert_receiver_is_total_eq(_1: &A<'_>) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/deriving/deriving-self-lifetime-totalord-totaleq.rs:4:25: 4:35>::partial_cmp(_1: &A<'_>, _2: &A<'_>) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: &&isize;
    let _4: &&isize;

    bb0: {
        _3 = &((*_1).0: &isize);
        _4 = &((*_2).0: &isize);
        _0 = <&isize as PartialOrd>::partial_cmp(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/deriving-self-lifetime-totalord-totaleq.rs:4:37: 4:40>::cmp(_1: &A<'_>, _2: &A<'_>) -> std::cmp::Ordering {
    debug self => _1;
    debug other => _2;
    let mut _0: std::cmp::Ordering;
    let _3: &&isize;
    let _4: &&isize;

    bb0: {
        _3 = &((*_1).0: &isize);
        _4 = &((*_2).0: &isize);
        _0 = <&isize as Ord>::cmp(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: A<'_>;
    let _2: A<'_>;
    let mut _3: (A<'_>, A<'_>);
    let mut _4: A<'_>;
    let mut _5: A<'_>;
    let mut _6: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _7: &std::cmp::Ordering;
    let _8: std::cmp::Ordering;
    let mut _9: &A<'_>;
    let _10: &A<'_>;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _19: &std::cmp::Ordering;
    let _20: std::cmp::Ordering;
    let mut _21: &A<'_>;
    let _22: &A<'_>;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _30: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _31: &std::cmp::Ordering;
    let _32: std::cmp::Ordering;
    let mut _33: &A<'_>;
    let _34: &A<'_>;
    let mut _37: bool;
    let mut _38: bool;
    let _40: !;
    let mut _41: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: (&std::cmp::Ordering, &std::cmp::Ordering);
    let mut _43: &std::cmp::Ordering;
    let _44: std::cmp::Ordering;
    let mut _45: &A<'_>;
    let _46: &A<'_>;
    let mut _49: bool;
    let mut _50: bool;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: &isize;
    let mut _59: &isize;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _11: &std::cmp::Ordering;
        let _12: &std::cmp::Ordering;
        let _23: &std::cmp::Ordering;
        let _24: &std::cmp::Ordering;
        let _35: &std::cmp::Ordering;
        let _36: &std::cmp::Ordering;
        let _47: &std::cmp::Ordering;
        let _48: &std::cmp::Ordering;
        let mut _54: &std::cmp::Ordering;
        let mut _55: &std::cmp::Ordering;
        let mut _56: &std::cmp::Ordering;
        let mut _57: &std::cmp::Ordering;
        scope 2 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 3 {
                debug kind => _15;
            }
        }
        scope 4 {
            debug left_val => _23;
            debug right_val => _24;
            let _27: core::panicking::AssertKind;
            scope 5 {
                debug kind => _27;
            }
        }
        scope 6 {
            debug left_val => _35;
            debug right_val => _36;
            let _39: core::panicking::AssertKind;
            scope 7 {
                debug kind => _39;
            }
        }
        scope 8 {
            debug left_val => _47;
            debug right_val => _48;
            let _51: core::panicking::AssertKind;
            scope 9 {
                debug kind => _51;
            }
        }
    }

    bb0: {
        _59 = const _;
        _4 = A::<'_> { x: _59 };
        _58 = const _;
        _5 = A::<'_> { x: _58 };
        _3 = (move _4, move _5);
        _1 = move (_3.0: A<'_>);
        _2 = move (_3.1: A<'_>);
        _9 = &_1;
        _10 = &_1;
        _8 = <A<'_> as Ord>::cmp(move _9, _10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_8;
        _57 = const _;
        _6 = (move _7, _57);
        _11 = (_6.0: &std::cmp::Ordering);
        _12 = (_6.1: &std::cmp::Ordering);
        _14 = <std::cmp::Ordering as PartialEq>::eq(_11, _12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _15, _11, _12, move _17) -> unwind continue;
    }

    bb4: {
        _21 = &_2;
        _22 = &_2;
        _20 = <A<'_> as Ord>::cmp(move _21, _22) -> [return: bb5, unwind continue];
    }

    bb5: {
        _19 = &_20;
        _56 = const _;
        _18 = (move _19, _56);
        _23 = (_18.0: &std::cmp::Ordering);
        _24 = (_18.1: &std::cmp::Ordering);
        _26 = <std::cmp::Ordering as PartialEq>::eq(_23, _24) -> [return: bb6, unwind continue];
    }

    bb6: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _27, _23, _24, move _29) -> unwind continue;
    }

    bb8: {
        _33 = &_1;
        _34 = &_2;
        _32 = <A<'_> as Ord>::cmp(move _33, _34) -> [return: bb9, unwind continue];
    }

    bb9: {
        _31 = &_32;
        _55 = const _;
        _30 = (move _31, _55);
        _35 = (_30.0: &std::cmp::Ordering);
        _36 = (_30.1: &std::cmp::Ordering);
        _38 = <std::cmp::Ordering as PartialEq>::eq(_35, _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _39 = core::panicking::AssertKind::Eq;
        _41 = Option::<Arguments<'_>>::None;
        _40 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _39, _35, _36, move _41) -> unwind continue;
    }

    bb12: {
        _45 = &_2;
        _46 = &_1;
        _44 = <A<'_> as Ord>::cmp(move _45, _46) -> [return: bb13, unwind continue];
    }

    bb13: {
        _43 = &_44;
        _54 = const _;
        _42 = (move _43, _54);
        _47 = (_42.0: &std::cmp::Ordering);
        _48 = (_42.1: &std::cmp::Ordering);
        _50 = <std::cmp::Ordering as PartialEq>::eq(_47, _48) -> [return: bb14, unwind continue];
    }

    bb14: {
        _49 = Not(move _50);
        switchInt(move _49) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _51, _47, _48, move _53) -> unwind continue;
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &std::cmp::Ordering = {
    let mut _0: &std::cmp::Ordering;
    let mut _1: std::cmp::Ordering;

    bb0: {
        _1 = Greater;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &std::cmp::Ordering = {
    let mut _0: &std::cmp::Ordering;
    let mut _1: std::cmp::Ordering;

    bb0: {
        _1 = Less;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &std::cmp::Ordering = {
    let mut _0: &std::cmp::Ordering;
    let mut _1: std::cmp::Ordering;

    bb0: {
        _1 = Equal;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &std::cmp::Ordering = {
    let mut _0: &std::cmp::Ordering;
    let mut _1: std::cmp::Ordering;

    bb0: {
        _1 = Equal;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}
