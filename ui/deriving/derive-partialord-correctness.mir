// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/derive-partialord-correctness.rs:4:10: 4:20>::partial_cmp(_1: &FloatWrapper, _2: &FloatWrapper) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/derive-partialord-correctness.rs:4:10: 4:20
    debug other => _2;                   // in scope 0 at ui/deriving/derive-partialord-correctness.rs:4:10: 4:20
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/derive-partialord-correctness.rs:4:10: 4:20
    let mut _3: &f64;                    // in scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
    let _4: &f64;                        // in scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
    let mut _5: &f64;                    // in scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
    let _6: &f64;                        // in scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24

    bb0: {
        _4 = &((*_1).0: f64);            // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
        _3 = _4;                         // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
        _6 = &((*_2).0: f64);            // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
        _5 = _6;                         // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
        _0 = <f64 as PartialOrd>::partial_cmp(move _3, move _5) -> bb1; // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
                                         // mir::Constant
                                         // + span: ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a f64, &'b f64) -> Option<std::cmp::Ordering> {<f64 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/derive-partialord-correctness.rs:4:20: 4:20
    }
}

fn <impl at ui/deriving/derive-partialord-correctness.rs:4:22: 4:31>::eq(_1: &FloatWrapper, _2: &FloatWrapper) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/derive-partialord-correctness.rs:4:22: 4:31
    debug other => _2;                   // in scope 0 at ui/deriving/derive-partialord-correctness.rs:4:22: 4:31
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/derive-partialord-correctness.rs:4:22: 4:31
    let mut _3: f64;                     // in scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
    let mut _4: f64;                     // in scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24

    bb0: {
        _3 = ((*_1).0: f64);             // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
        _4 = ((*_2).0: f64);             // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
        _0 = Eq(move _3, move _4);       // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:21: 5:24
        return;                          // scope 0 at ui/deriving/derive-partialord-correctness.rs:4:31: 4:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/derive-partialord-correctness.rs:7:11: 7:11
    let mut _1: bool;                    // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:5: 8:82
    let mut _2: bool;                    // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:13: 8:81
    let mut _3: bool;                    // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:13: 8:31
    let mut _4: bool;                    // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:35: 8:81
    let mut _5: &FloatWrapper;           // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:36: 8:59
    let mut _6: &FloatWrapper;           // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:63: 8:80
    let mut _7: !;                       // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:5: 8:82
    let mut _8: &FloatWrapper;           // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:63: 8:80
    let mut _9: &FloatWrapper;           // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:36: 8:59

    bb0: {
        _3 = const false;                // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:13: 8:31
        _9 = const _;                    // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:36: 8:59
                                         // mir::Constant
                                         // + span: ui/deriving/derive-partialord-correctness.rs:8:36: 8:59
                                         // + literal: Const { ty: &FloatWrapper, val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _9;                         // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:36: 8:59
        _8 = const _;                    // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:63: 8:80
                                         // mir::Constant
                                         // + span: ui/deriving/derive-partialord-correctness.rs:8:63: 8:80
                                         // + literal: Const { ty: &FloatWrapper, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _8;                         // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:63: 8:80
        _4 = <FloatWrapper as PartialOrd>::ge(move _5, move _6) -> bb1; // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:35: 8:81
                                         // mir::Constant
                                         // + span: ui/deriving/derive-partialord-correctness.rs:8:35: 8:81
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a FloatWrapper, &'b FloatWrapper) -> bool {<FloatWrapper as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Eq(move _3, move _4);       // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:13: 8:81
        _1 = Not(move _2);               // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:5: 8:82
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:5: 8:82
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: (0.0 / 0.0 >= 0.0) == (FloatWrapper(0.0 / 0.0) >= FloatWrapper(0.0))"); // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:5: 8:82
                                         // mir::Constant
                                         // + span: ui/deriving/derive-partialord-correctness.rs:8:5: 8:82
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/derive-partialord-correctness.rs:9:2: 9:2
    }
}

promoted[0] in main: &FloatWrapper = {
    let mut _0: &FloatWrapper;           // return place in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:63: 8:80
    let mut _1: FloatWrapper;            // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:63: 8:80

    bb0: {
        _1 = FloatWrapper(const 0f64);   // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:63: 8:80
        _0 = &_1;                        // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:63: 8:80
        return;                          // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:63: 8:80
    }
}

promoted[1] in main: &FloatWrapper = {
    let mut _0: &FloatWrapper;           // return place in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:36: 8:59
    let mut _1: FloatWrapper;            // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:36: 8:59
    let mut _2: f64;                     // in scope 0 at ui/deriving/derive-partialord-correctness.rs:8:49: 8:58

    bb0: {
        _2 = Div(const 0f64, const 0f64); // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:49: 8:58
        _1 = FloatWrapper(move _2);      // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:36: 8:59
        _0 = &_1;                        // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:36: 8:59
        return;                          // scope 0 at ui/deriving/derive-partialord-correctness.rs:8:36: 8:59
    }
}

fn FloatWrapper(_1: f64) -> FloatWrapper {
    let mut _0: FloatWrapper;            // return place in scope 0 at ui/deriving/derive-partialord-correctness.rs:5:1: 5:20

    bb0: {
        _0 = FloatWrapper(move _1);      // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:1: 5:20
        return;                          // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:1: 5:20
    }
}

// MIR FOR CTFE
fn FloatWrapper(_1: f64) -> FloatWrapper {
    let mut _0: FloatWrapper;            // return place in scope 0 at ui/deriving/derive-partialord-correctness.rs:5:1: 5:20

    bb0: {
        _0 = FloatWrapper(move _1);      // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:1: 5:20
        return;                          // scope 0 at ui/deriving/derive-partialord-correctness.rs:5:1: 5:20
    }
}
