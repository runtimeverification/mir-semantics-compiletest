// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/derive-partialord-correctness.rs:4:10: 4:20>::partial_cmp(_1: &FloatWrapper, _2: &FloatWrapper) -> Option<std::cmp::Ordering> {
    debug self => _1;
    debug other => _2;
    let mut _0: std::option::Option<std::cmp::Ordering>;
    let _3: &f64;
    let _4: &f64;

    bb0: {
        _3 = &((*_1).0: f64);
        _4 = &((*_2).0: f64);
        _0 = <f64 as PartialOrd>::partial_cmp(_3, _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/deriving/derive-partialord-correctness.rs:4:22: 4:31>::eq(_1: &FloatWrapper, _2: &FloatWrapper) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: f64;
    let mut _4: f64;

    bb0: {
        _3 = ((*_1).0: f64);
        _4 = ((*_2).0: f64);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: bool;
    let mut _4: f64;
    let mut _5: bool;
    let mut _6: !;
    let mut _7: &FloatWrapper;
    let mut _8: &FloatWrapper;

    bb0: {
        _4 = Div(const 0f64, const 0f64);
        _3 = Ge(move _4, const 0f64);
        _8 = const _;
        _7 = const _;
        _5 = <FloatWrapper as PartialOrd>::ge(_8, _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Eq(move _3, move _5);
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: (0.0 / 0.0 >= 0.0) == (FloatWrapper(0.0 / 0.0) >= FloatWrapper(0.0))") -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &FloatWrapper = {
    let mut _0: &FloatWrapper;
    let mut _1: FloatWrapper;

    bb0: {
        _1 = FloatWrapper(const 0f64);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &FloatWrapper = {
    let mut _0: &FloatWrapper;
    let mut _1: FloatWrapper;
    let mut _2: f64;

    bb0: {
        _2 = Div(const 0f64, const 0f64);
        _1 = FloatWrapper(move _2);
        _0 = &_1;
        return;
    }
}

fn FloatWrapper(_1: f64) -> FloatWrapper {
    let mut _0: FloatWrapper;

    bb0: {
        _0 = FloatWrapper(move _1);
        return;
    }
}

// MIR FOR CTFE
fn FloatWrapper(_1: f64) -> FloatWrapper {
    let mut _0: FloatWrapper;

    bb0: {
        _0 = FloatWrapper(move _1);
        return;
    }
}
