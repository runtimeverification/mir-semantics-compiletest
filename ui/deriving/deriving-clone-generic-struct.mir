// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-clone-generic-struct.rs:6:10: 6:15>::clone(_1: &S<T>) -> S<T> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:6:10: 6:15
    let mut _0: S<T>;                    // return place in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:6:10: 6:15
    let mut _2: ();                      // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:8:5: 8:12
    let mut _3: &();                     // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:8:5: 8:12
    let _4: &();                         // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:8:5: 8:12
    let mut _5: ();                      // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:9:5: 9:12
    let mut _6: &();                     // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:9:5: 9:12
    let _7: &();                         // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:9:5: 9:12
    let mut _8: T;                       // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:10:5: 10:11
    let mut _9: &T;                      // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:10:5: 10:11
    let _10: &T;                         // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:10:5: 10:11

    bb0: {
        _4 = &((*_1).0: ());             // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:8:5: 8:12
        _3 = _4;                         // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:8:5: 8:12
        _2 = (*_3);                      // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:8:5: 8:12
        _7 = &((*_1).1: ());             // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:9:5: 9:12
        _6 = _7;                         // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:9:5: 9:12
        _5 = (*_6);                      // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:9:5: 9:12
        _10 = &((*_1).2: T);             // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:10:5: 10:11
        _9 = _10;                        // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:10:5: 10:11
        _8 = <T as Clone>::clone(move _9) -> bb1; // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:10:5: 10:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-struct.rs:10:5: 10:11
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = S::<T> { foo: move _2, bar: move _5, baz: move _8 }; // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:6:10: 6:15
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:6:15: 6:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:13:15: 13:15
    let mut _1: S<i32>;                  // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
    let mut _2: &S<i32>;                 // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
    let mut _3: &S<i32>;                 // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
    scope 1 {
    }

    bb0: {
        _3 = const _;                    // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
                                         // + literal: Const { ty: &S<i32>, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
        _1 = <S<i32> as Clone>::clone(move _2) -> bb1; // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-struct.rs:14:44: 14:49
                                         // + literal: Const { ty: for<'a> fn(&'a S<i32>) -> S<i32> {<S<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:15:2: 15:2
    }
}

promoted[0] in main: &S<i32> = {
    let mut _0: &S<i32>;                 // return place in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
    let mut _1: S<i32>;                  // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:43
    let mut _2: ();                      // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:22: 14:24
    let mut _3: ();                      // in scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:31: 14:33

    bb0: {
        _2 = ();                         // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:22: 14:24
        _3 = ();                         // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:31: 14:33
        _1 = S::<i32> { foo: move _2, bar: move _3, baz: const 1_i32 }; // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:43
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-struct.rs:14:13: 14:51
    }
}
