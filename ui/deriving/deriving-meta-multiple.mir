// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-meta-multiple.rs:12:10: 12:14>::hash(_1: &Foo, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-meta-multiple.rs:12:10: 12:14
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-meta-multiple.rs:12:10: 12:14
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-meta-multiple.rs:12:10: 12:14
    let _3: ();                          // in scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
    let mut _4: &usize;                  // in scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
    let _5: &usize;                      // in scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
    let mut _6: &mut __H;                // in scope 0 at ui/deriving/deriving-meta-multiple.rs:12:10: 12:14
    let mut _7: &isize;                  // in scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
    let _8: &isize;                      // in scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
    let mut _9: &mut __H;                // in scope 0 at ui/deriving/deriving-meta-multiple.rs:12:10: 12:14

    bb0: {
        _5 = &((*_1).0: usize);          // scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
        _4 = _5;                         // scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
        _6 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-meta-multiple.rs:12:10: 12:14
        _3 = <usize as Hash>::hash::<__H>(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b mut __H) {<usize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &((*_1).1: isize);          // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        _7 = _8;                         // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        _9 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-meta-multiple.rs:12:10: 12:14
        _0 = <isize as Hash>::hash::<__H>(move _7, move _9) -> bb2; // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/deriving/deriving-meta-multiple.rs:12:14: 12:14
    }
}

fn <impl at ui/deriving/deriving-meta-multiple.rs:11:10: 11:15>::clone(_1: &Foo) -> Foo {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-meta-multiple.rs:11:10: 11:15
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-meta-multiple.rs:11:10: 11:15
    let mut _2: usize;                   // in scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
    let mut _3: &usize;                  // in scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
    let _4: &usize;                      // in scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
    let mut _5: isize;                   // in scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
    let mut _6: &isize;                  // in scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
    let _7: &isize;                      // in scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15

    bb0: {
        _4 = &((*_1).0: usize);          // scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
        _3 = _4;                         // scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
        _2 = (*_3);                      // scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
        _7 = &((*_1).1: isize);          // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        _6 = _7;                         // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        _5 = (*_6);                      // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        _0 = Foo { bar: move _2, baz: move _5 }; // scope 0 at ui/deriving/deriving-meta-multiple.rs:11:10: 11:15
        return;                          // scope 0 at ui/deriving/deriving-meta-multiple.rs:11:15: 11:15
    }
}

fn <impl at ui/deriving/deriving-meta-multiple.rs:10:10: 10:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-meta-multiple.rs:10:10: 10:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-meta-multiple.rs:10:10: 10:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-meta-multiple.rs:10:10: 10:19
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
    let mut _4: usize;                   // in scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
    let mut _5: usize;                   // in scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
    let mut _6: bool;                    // in scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
    let mut _7: isize;                   // in scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15

    bb0: {
        _4 = ((*_1).0: usize);           // scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
        _5 = ((*_2).0: usize);           // scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
        _3 = Eq(move _4, move _5);       // scope 0 at ui/deriving/deriving-meta-multiple.rs:14:5: 14:15
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
    }

    bb2: {
        _7 = ((*_1).1: isize);           // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        _8 = ((*_2).1: isize);           // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        _6 = Eq(move _7, move _8);       // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        _0 = move _6;                    // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-meta-multiple.rs:15:5: 15:15
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-meta-multiple.rs:10:19: 10:19
    }
}

fn hash(_1: &T) -> () {
    debug _t => _1;                      // in scope 0 at ui/deriving/deriving-meta-multiple.rs:18:18: 18:20
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-meta-multiple.rs:18:26: 18:26

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-meta-multiple.rs:18:28: 18:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-meta-multiple.rs:20:15: 20:15
    let _1: Foo;                         // in scope 0 at ui/deriving/deriving-meta-multiple.rs:21:9: 21:10
    let _2: bool;                        // in scope 0 at ui/deriving/deriving-meta-multiple.rs:23:5: 23:11
    let mut _3: &Foo;                    // in scope 0 at ui/deriving/deriving-meta-multiple.rs:23:5: 23:6
    let mut _4: &Foo;                    // in scope 0 at ui/deriving/deriving-meta-multiple.rs:23:10: 23:11
    let _5: Foo;                         // in scope 0 at ui/deriving/deriving-meta-multiple.rs:24:5: 24:14
    let mut _6: &Foo;                    // in scope 0 at ui/deriving/deriving-meta-multiple.rs:24:5: 24:14
    let _7: ();                          // in scope 0 at ui/deriving/deriving-meta-multiple.rs:25:5: 25:13
    let mut _8: &Foo;                    // in scope 0 at ui/deriving/deriving-meta-multiple.rs:25:10: 25:12
    let _9: &Foo;                        // in scope 0 at ui/deriving/deriving-meta-multiple.rs:25:10: 25:12
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/deriving/deriving-meta-multiple.rs:21:9: 21:10
    }

    bb0: {
        _1 = Foo { bar: const 4_usize, baz: const -3_isize }; // scope 0 at ui/deriving/deriving-meta-multiple.rs:21:13: 21:34
        _3 = &_1;                        // scope 1 at ui/deriving/deriving-meta-multiple.rs:23:5: 23:6
        _4 = &_1;                        // scope 1 at ui/deriving/deriving-meta-multiple.rs:23:10: 23:11
        _2 = <Foo as PartialEq>::eq(move _3, move _4) -> bb1; // scope 1 at ui/deriving/deriving-meta-multiple.rs:23:5: 23:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-meta-multiple.rs:23:5: 23:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at ui/deriving/deriving-meta-multiple.rs:24:5: 24:14
        _5 = <Foo as Clone>::clone(move _6) -> bb2; // scope 1 at ui/deriving/deriving-meta-multiple.rs:24:5: 24:14
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-meta-multiple.rs:24:7: 24:12
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> Foo {<Foo as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &_1;                        // scope 1 at ui/deriving/deriving-meta-multiple.rs:25:10: 25:12
        _8 = _9;                         // scope 1 at ui/deriving/deriving-meta-multiple.rs:25:10: 25:12
        _7 = hash::<Foo>(move _8) -> bb3; // scope 1 at ui/deriving/deriving-meta-multiple.rs:25:5: 25:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-meta-multiple.rs:25:5: 25:9
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {hash::<Foo>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-meta-multiple.rs:26:2: 26:2
    }
}
