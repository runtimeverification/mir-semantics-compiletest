// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-all-codegen.rs:21:10: 21:15>::clone(_1: &Empty) -> Empty {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:10: 21:15
    let mut _0: Empty;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:21:10: 21:15

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:21:15: 21:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:21:23: 21:28>::fmt(_1: &Empty, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28
        _5 = const "Empty";              // scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:21:23: 21:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:21:23: 21:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:21:23: 21:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:21:28: 21:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:21:30: 21:37>::default() -> Empty {
    let mut _0: Empty;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:21:30: 21:37

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:21:37: 21:37
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:21:39: 21:43>::hash(_1: &Empty, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:39: 21:43
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:39: 21:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:21:39: 21:43

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:21:43: 21:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:21:45: 21:54>::eq(_1: &Empty, _2: &Empty) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:45: 21:54
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:45: 21:54
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:21:45: 21:54

    bb0: {
        _0 = const true;                 // scope 0 at ui/deriving/deriving-all-codegen.rs:21:45: 21:54
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:21:54: 21:54
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:21:56: 21:58>::assert_receiver_is_total_eq(_1: &Empty) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:56: 21:58
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:21:56: 21:58

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:21:58: 21:58
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:21:60: 21:70>::partial_cmp(_1: &Empty, _2: &Empty) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:60: 21:70
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:60: 21:70
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:21:60: 21:70

    bb0: {
        _0 = const Option::<std::cmp::Ordering>::Some(Equal); // scope 0 at ui/deriving/deriving-all-codegen.rs:21:60: 21:70
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:21:60: 21:70
                                         // + literal: Const { ty: Option<std::cmp::Ordering>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:21:70: 21:70
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:21:72: 21:75>::cmp(_1: &Empty, _2: &Empty) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:72: 21:75
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:21:72: 21:75
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:21:72: 21:75

    bb0: {
        _0 = const Equal;                // scope 0 at ui/deriving/deriving-all-codegen.rs:21:72: 21:75
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:21:72: 21:75
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:21:75: 21:75
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:26:10: 26:15>::clone(_1: &Point) -> Point {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:10: 26:15
    let mut _0: Point;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:26:10: 26:15
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/deriving/deriving-all-codegen.rs:26:10: 26:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:26:15: 26:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:26:23: 26:28>::fmt(_1: &Point, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _9: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let _10: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _11: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _12: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let mut _14: &&u32;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _15: &&u32;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _16: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
        _5 = const "Point";              // scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:26:23: 26:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
        _7 = const "x";                  // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _10 = &((*_1).0: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _9 = _10;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _12 = const "y";                 // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _16 = &((*_1).1: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _15 = &_16;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _14 = _15;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:26:23: 26:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:26:23: 26:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:26:28: 26:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:26:30: 26:37>::default() -> Point {
    let mut _0: Point;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:26:30: 26:37
    let mut _1: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _2: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11

    bb0: {
        _1 = <u32 as Default>::default() -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <u32 as Default>::default() -> bb2; // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Point { x: move _1, y: move _2 }; // scope 0 at ui/deriving/deriving-all-codegen.rs:26:30: 26:37
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:26:37: 26:37
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:26:39: 26:43>::hash(_1: &Point, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:39: 26:43
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:39: 26:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:26:39: 26:43
    let _3: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let _5: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _6: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:39: 26:43
    let mut _7: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _8: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let mut _9: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:39: 26:43

    bb0: {
        _5 = &((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _6 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:26:39: 26:43
        _3 = <u32 as Hash>::hash::<__H>(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &((*_1).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _7 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _9 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:26:39: 26:43
        _0 = <u32 as Hash>::hash::<__H>(move _7, move _9) -> bb2; // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:26:43: 26:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:26:45: 26:54>::eq(_1: &Point, _2: &Point) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:45: 26:54
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:45: 26:54
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:26:45: 26:54
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _4: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _5: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _6: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let mut _7: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let mut _8: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11

    bb0: {
        _4 = ((*_1).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _5 = ((*_2).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _3 = Eq(move _4, move _5);       // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    }

    bb2: {
        _7 = ((*_1).1: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _8 = ((*_2).1: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _6 = Eq(move _7, move _8);       // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _0 = move _6;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:26:54: 26:54
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:26:56: 26:58>::assert_receiver_is_total_eq(_1: &Point) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:56: 26:58
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:26:56: 26:58
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:26:58: 26:58
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:26:60: 26:70>::partial_cmp(_1: &Point, _2: &Point) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:60: 26:70
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:60: 26:70
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:26:60: 26:70
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let _5: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _6: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let _7: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _8: i8;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _10: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _11: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let mut _12: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _13: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _14: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    scope 1 {
        debug cmp => _14;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    }

    bb0: {
        _5 = &((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _7 = &((*_2).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _3 = <u32 as PartialOrd>::partial_cmp(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant(_3);           // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        switchInt(move _9) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    }

    bb2: {
        _14 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _0 = _14;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:28:10: 28:11
    }

    bb3: {
        _8 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        switchInt(move _8) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    }

    bb4: {
        _11 = &((*_1).1: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _10 = _11;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _13 = &((*_2).1: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _12 = _13;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _0 = <u32 as PartialOrd>::partial_cmp(move _10, move _12) -> bb5; // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:26:70: 26:70
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:26:72: 26:75>::cmp(_1: &Point, _2: &Point) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:72: 26:75
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:26:72: 26:75
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:26:72: 26:75
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let _5: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _6: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let _7: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _8: i8;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    let mut _9: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _10: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let mut _11: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _12: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
    let _13: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    scope 1 {
        debug cmp => _13;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    }

    bb0: {
        _5 = &((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _7 = &((*_2).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _3 = <u32 as Ord>::cmp(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:28:5: 28:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = discriminant(_3);           // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
    }

    bb2: {
        _13 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        _0 = _13;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:28:5: 28:11
        goto -> bb4;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:28:10: 28:11
    }

    bb3: {
        _10 = &((*_1).1: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _9 = _10;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _12 = &((*_2).1: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _11 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
        _0 = <u32 as Ord>::cmp(move _9, move _11) -> bb4; // scope 0 at ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:29:5: 29:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:26:75: 26:75
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:34:10: 34:15>::clone(_1: &PackedPoint) -> PackedPoint {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:10: 34:15
    let mut _0: PackedPoint;             // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:34:10: 34:15
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/deriving/deriving-all-codegen.rs:34:10: 34:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:34:15: 34:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:34:23: 34:28>::fmt(_1: &PackedPoint, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _9: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _10: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _11: u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _12: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _13: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let mut _15: &&u32;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _16: &&u32;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _17: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _18: u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
        _5 = const "PackedPoint";        // scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:34:23: 34:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
        _7 = const "x";                  // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _11 = ((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _10 = &_11;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _9 = _10;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _13 = const "y";                 // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _18 = ((*_1).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _17 = &_18;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _16 = &_17;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _15 = _16;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _14 = move _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _12, move _14) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:34:23: 34:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:34:23: 34:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:34:28: 34:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:34:30: 34:37>::default() -> PackedPoint {
    let mut _0: PackedPoint;             // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:34:30: 34:37
    let mut _1: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _2: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11

    bb0: {
        _1 = <u32 as Default>::default() -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <u32 as Default>::default() -> bb2; // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = PackedPoint { x: move _1, y: move _2 }; // scope 0 at ui/deriving/deriving-all-codegen.rs:34:30: 34:37
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:34:37: 34:37
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:34:39: 34:43>::hash(_1: &PackedPoint, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:39: 34:43
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:39: 34:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:34:39: 34:43
    let _3: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _5: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _6: u32;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _7: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:39: 34:43
    let mut _8: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _9: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _10: u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let mut _11: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:39: 34:43

    bb0: {
        _6 = ((*_1).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _5 = &_6;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _7 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:34:39: 34:43
        _3 = <u32 as Hash>::hash::<__H>(move _4, move _7) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = ((*_1).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _9 = &_10;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _8 = _9;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _11 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:34:39: 34:43
        _0 = <u32 as Hash>::hash::<__H>(move _8, move _11) -> bb2; // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:34:43: 34:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:34:45: 34:54>::eq(_1: &PackedPoint, _2: &PackedPoint) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:45: 34:54
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:45: 34:54
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:34:45: 34:54
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _4: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _5: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _6: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let mut _7: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let mut _8: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11

    bb0: {
        _4 = ((*_1).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _5 = ((*_2).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _3 = Eq(move _4, move _5);       // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    }

    bb2: {
        _7 = ((*_1).1: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _8 = ((*_2).1: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _6 = Eq(move _7, move _8);       // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _0 = move _6;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:34:54: 34:54
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:34:56: 34:58>::assert_receiver_is_total_eq(_1: &PackedPoint) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:56: 34:58
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:34:56: 34:58
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:34:58: 34:58
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:34:60: 34:70>::partial_cmp(_1: &PackedPoint, _2: &PackedPoint) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:60: 34:70
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:60: 34:70
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:34:60: 34:70
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _5: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _6: u32;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _7: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _8: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _9: u32;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _10: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _11: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _12: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _13: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _14: u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let mut _15: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _16: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _17: u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _18: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    scope 1 {
        debug cmp => _18;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    }

    bb0: {
        _6 = ((*_1).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _5 = &_6;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _9 = ((*_2).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _7 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _3 = <u32 as PartialOrd>::partial_cmp(move _4, move _7) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = discriminant(_3);          // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        switchInt(move _11) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    }

    bb2: {
        _18 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _0 = _18;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:37:10: 37:11
    }

    bb3: {
        _10 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        switchInt(move _10) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    }

    bb4: {
        _14 = ((*_1).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _13 = &_14;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _12 = _13;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _17 = ((*_2).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _16 = &_17;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _15 = _16;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _0 = <u32 as PartialOrd>::partial_cmp(move _12, move _15) -> bb5; // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:34:70: 34:70
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:34:72: 34:75>::cmp(_1: &PackedPoint, _2: &PackedPoint) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:72: 34:75
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:34:72: 34:75
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:34:72: 34:75
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _5: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _6: u32;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _7: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _8: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let _9: u32;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _10: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    let mut _11: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _12: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _13: u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let mut _14: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _15: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _16: u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
    let _17: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    scope 1 {
        debug cmp => _17;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    }

    bb0: {
        _6 = ((*_1).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _5 = &_6;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _9 = ((*_2).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _7 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _3 = <u32 as Ord>::cmp(move _4, move _7) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:37:5: 37:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = discriminant(_3);          // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
    }

    bb2: {
        _17 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        _0 = _17;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:37:5: 37:11
        goto -> bb4;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:37:10: 37:11
    }

    bb3: {
        _13 = ((*_1).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _12 = &_13;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _11 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _16 = ((*_2).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _15 = &_16;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _14 = _15;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
        _0 = <u32 as Ord>::cmp(move _11, move _14) -> bb4; // scope 0 at ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:38:5: 38:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:34:75: 34:75
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:43:10: 43:15>::clone(_1: &Big) -> Big {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:10: 43:15
    let mut _0: Big;                     // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:43:10: 43:15
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/deriving/deriving-all-codegen.rs:43:10: 43:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:43:15: 43:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:43:23: 43:28>::fmt(_1: &Big, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let _3: &[&str; 8];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let _4: &[&str; 8];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _6: &[&dyn std::fmt::Debug; 8]; // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let _7: &[&dyn std::fmt::Debug; 8];  // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let _8: [&dyn std::fmt::Debug; 8];   // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _10: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let _11: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _13: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let _14: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _16: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let _17: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _19: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let _20: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _21: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _22: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let _23: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _24: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _25: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let _26: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _27: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _28: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let _29: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _30: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let mut _31: &&u32;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let _32: &&u32;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let _33: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let mut _34: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _35: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let _36: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _37: &[&str];                // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _38: &[&str; 8];             // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _39: &[&dyn std::fmt::Debug]; // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _40: &[&str; 8];             // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    scope 1 {
        debug names => _3;               // in scope 1 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        let _5: &[&dyn std::fmt::Debug]; // in scope 1 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        scope 2 {
            debug values => _5;          // in scope 2 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        }
    }

    bb0: {
        _40 = const _;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:43:23: 43:28
                                         // + literal: Const { ty: &[&str; 8], val: Unevaluated(<Big as Debug>::fmt, [], Some(promoted[0])) }
        _4 = _40;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _11 = &((*_1).0: u32);           // scope 1 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _10 = _11;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _14 = &((*_1).1: u32);           // scope 1 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _13 = _14;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _12 = move _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _17 = &((*_1).2: u32);           // scope 1 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _16 = _17;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _20 = &((*_1).3: u32);           // scope 1 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _19 = _20;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _18 = move _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _23 = &((*_1).4: u32);           // scope 1 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _22 = _23;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _21 = move _22 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _26 = &((*_1).5: u32);           // scope 1 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _25 = _26;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _24 = move _25 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _29 = &((*_1).6: u32);           // scope 1 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _28 = _29;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _27 = move _28 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _33 = &((*_1).7: u32);           // scope 1 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _32 = &_33;                      // scope 1 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _31 = _32;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _30 = move _31 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _8 = [move _9, move _12, move _15, move _18, move _21, move _24, move _27, move _30]; // scope 1 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _7 = &_8;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _6 = _7;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _5 = move _6 as &[&dyn std::fmt::Debug] (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _34 = &mut (*_2);                // scope 2 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _36 = const "Big";               // scope 2 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:43:23: 43:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _35 = _36;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _38 = _3;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _37 = move _38 as &[&str] (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _39 = _5;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        _0 = Formatter::<'_>::debug_struct_fields_finish(move _34, move _35, move _37, move _39) -> bb1; // scope 2 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:43:23: 43:28
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c [&'d str], &'e [&'f (dyn Debug + 'f)]) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_fields_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:43:28: 43:28
    }
}

promoted[0] in <impl at ui/deriving/deriving-all-codegen.rs:43:23: 43:28>::fmt: &[&str; 8] = {
    let mut _0: &[&str; 8];              // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _1: [&str; 8];               // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    let mut _2: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _3: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _5: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _7: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _8: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _9: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _10: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _11: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _12: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _13: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _14: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let mut _15: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75

    bb0: {
        _3 = const "b2";                 // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = &(*_3);                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _5 = const "b3";                 // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _7 = const "b4";                 // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = &(*_7);                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _9 = const "b5";                 // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = &(*_9);                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _11 = const "b6";                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = &(*_11);                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _13 = const "b7";                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = &(*_13);                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _15 = const "b8";                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = &(*_15);                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _1 = [const "b1", move _2, move _4, move _6, move _8, move _10, move _12, move _14]; // scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:5: 45:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:43:23: 43:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:43:30: 43:37>::default() -> Big {
    let mut _0: Big;                     // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:43:30: 43:37
    let mut _1: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _2: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _3: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _4: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _5: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _6: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _7: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _8: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75

    bb0: {
        _1 = <u32 as Default>::default() -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:5: 45:12
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <u32 as Default>::default() -> bb2; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <u32 as Default>::default() -> bb3; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <u32 as Default>::default() -> bb4; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <u32 as Default>::default() -> bb5; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = <u32 as Default>::default() -> bb6; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = <u32 as Default>::default() -> bb7; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = <u32 as Default>::default() -> bb8; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // + literal: Const { ty: fn() -> u32 {<u32 as Default>::default}, val: Value(<ZST>) }
    }

    bb8: {
        _0 = Big { b1: move _1, b2: move _2, b3: move _3, b4: move _4, b5: move _5, b6: move _6, b7: move _7, b8: move _8 }; // scope 0 at ui/deriving/deriving-all-codegen.rs:43:30: 43:37
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:43:37: 43:37
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:43:39: 43:43>::hash(_1: &Big, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    let _3: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let _5: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _6: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    let _7: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _8: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let _9: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _10: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    let _11: ();                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _12: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let _13: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _14: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    let _15: ();                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _16: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let _17: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _18: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    let _19: ();                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _20: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let _21: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _22: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    let _23: ();                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _24: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let _25: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _26: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    let _27: ();                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _28: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let _29: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _30: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
    let mut _31: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let _32: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let mut _33: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43

    bb0: {
        _5 = &((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _6 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
        _3 = <u32 as Hash>::hash::<__H>(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:5: 45:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &((*_1).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _8 = _9;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _10 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
        _7 = <u32 as Hash>::hash::<__H>(move _8, move _10) -> bb2; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = &((*_1).2: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _12 = _13;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _14 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
        _11 = <u32 as Hash>::hash::<__H>(move _12, move _14) -> bb3; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = &((*_1).3: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _16 = _17;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _18 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
        _15 = <u32 as Hash>::hash::<__H>(move _16, move _18) -> bb4; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = &((*_1).4: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _20 = _21;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _22 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
        _19 = <u32 as Hash>::hash::<__H>(move _20, move _22) -> bb5; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = &((*_1).5: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _24 = _25;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _26 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
        _23 = <u32 as Hash>::hash::<__H>(move _24, move _26) -> bb6; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = &((*_1).6: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _28 = _29;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _30 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
        _27 = <u32 as Hash>::hash::<__H>(move _28, move _30) -> bb7; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb7: {
        _32 = &((*_1).7: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _31 = _32;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _33 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:43:39: 43:43
        _0 = <u32 as Hash>::hash::<__H>(move _31, move _33) -> bb8; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:43:43: 43:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:43:45: 43:54>::eq(_1: &Big, _2: &Big) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:45: 43:54
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:45: 43:54
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:43:45: 43:54
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _4: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _5: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _6: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _8: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _9: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _10: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _11: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _12: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _13: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _14: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _15: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _16: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _17: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _18: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _19: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _20: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _21: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _22: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _23: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _24: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _25: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _26: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _27: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _28: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _29: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _30: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let mut _31: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let mut _32: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75

    bb0: {
        _10 = ((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _11 = ((*_2).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _9 = Eq(move _10, move _11);     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        switchInt(move _9) -> [0: bb19, otherwise: bb20]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    }

    bb2: {
        _31 = ((*_1).7: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _32 = ((*_2).7: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _30 = Eq(move _31, move _32);    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _0 = move _30;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:43:54: 43:54
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    }

    bb5: {
        _28 = ((*_1).6: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _29 = ((*_2).6: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _27 = Eq(move _28, move _29);    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _3 = move _27;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    }

    bb7: {
        _4 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        goto -> bb9;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    }

    bb8: {
        _25 = ((*_1).5: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _26 = ((*_2).5: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _24 = Eq(move _25, move _26);    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _4 = move _24;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        goto -> bb9;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    }

    bb9: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    }

    bb10: {
        _5 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        goto -> bb12;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    }

    bb11: {
        _22 = ((*_1).4: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _23 = ((*_2).4: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _21 = Eq(move _22, move _23);    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _5 = move _21;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        goto -> bb12;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    }

    bb12: {
        switchInt(move _5) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    }

    bb13: {
        _6 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        goto -> bb15;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    }

    bb14: {
        _19 = ((*_1).3: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _20 = ((*_2).3: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _18 = Eq(move _19, move _20);    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _6 = move _18;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        goto -> bb15;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    }

    bb15: {
        switchInt(move _6) -> [0: bb10, otherwise: bb11]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    }

    bb16: {
        _7 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        goto -> bb18;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    }

    bb17: {
        _16 = ((*_1).2: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _17 = ((*_2).2: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _15 = Eq(move _16, move _17);    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _7 = move _15;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        goto -> bb18;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    }

    bb18: {
        switchInt(move _7) -> [0: bb13, otherwise: bb14]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    }

    bb19: {
        _8 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        goto -> bb21;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    }

    bb20: {
        _13 = ((*_1).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _14 = ((*_2).1: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _12 = Eq(move _13, move _14);    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _8 = move _12;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        goto -> bb21;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    }

    bb21: {
        switchInt(move _8) -> [0: bb16, otherwise: bb17]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:43:56: 43:58>::assert_receiver_is_total_eq(_1: &Big) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:56: 43:58
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:43:56: 43:58
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:43:58: 43:58
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:43:60: 43:70>::partial_cmp(_1: &Big, _2: &Big) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:60: 43:70
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:60: 43:70
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:43:60: 43:70
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let _5: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _6: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let _7: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _8: i8;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _10: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _11: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let _12: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _13: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let _14: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _15: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _17: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _18: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let _19: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _20: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let _21: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _22: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _23: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _24: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _25: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let _26: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _27: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let _28: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _29: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _30: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _31: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _32: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let _33: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _34: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let _35: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _36: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _37: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _38: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _39: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let _40: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _41: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let _42: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _43: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _44: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _45: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _46: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let _47: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _48: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let _49: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _50: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _51: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _52: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let _53: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let mut _54: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let _55: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let _56: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let _57: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let _58: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let _59: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let _60: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let _61: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let _62: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    scope 1 {
        debug cmp => _56;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    }
    scope 2 {
        debug cmp => _57;                // in scope 2 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    }
    scope 3 {
        debug cmp => _58;                // in scope 3 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    }
    scope 4 {
        debug cmp => _59;                // in scope 4 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    }
    scope 5 {
        debug cmp => _60;                // in scope 5 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    }
    scope 6 {
        debug cmp => _61;                // in scope 6 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    }
    scope 7 {
        debug cmp => _62;                // in scope 7 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    }

    bb0: {
        _5 = &((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _7 = &((*_2).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _3 = <u32 as PartialOrd>::partial_cmp(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:5: 45:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant(_3);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        switchInt(move _9) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    }

    bb2: {
        _62 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _0 = _62;                        // scope 7 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        goto -> bb29;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:11: 45:12
    }

    bb3: {
        _8 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        switchInt(move _8) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    }

    bb4: {
        _12 = &((*_1).1: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _11 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _14 = &((*_2).1: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _13 = _14;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _10 = <u32 as PartialOrd>::partial_cmp(move _11, move _13) -> bb5; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = discriminant(_10);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        switchInt(move _16) -> [1: bb7, otherwise: bb6]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    }

    bb6: {
        _61 = _10;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _0 = _61;                        // scope 6 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        goto -> bb29;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:20: 45:21
    }

    bb7: {
        _15 = discriminant(((_10 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        switchInt(move _15) -> [0: bb8, otherwise: bb6]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    }

    bb8: {
        _19 = &((*_1).2: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _18 = _19;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _21 = &((*_2).2: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _20 = _21;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _17 = <u32 as PartialOrd>::partial_cmp(move _18, move _20) -> bb9; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb9: {
        _23 = discriminant(_17);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        switchInt(move _23) -> [1: bb11, otherwise: bb10]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    }

    bb10: {
        _60 = _17;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _0 = _60;                        // scope 5 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        goto -> bb29;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:29: 45:30
    }

    bb11: {
        _22 = discriminant(((_17 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        switchInt(move _22) -> [0: bb12, otherwise: bb10]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    }

    bb12: {
        _26 = &((*_1).3: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _25 = _26;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _28 = &((*_2).3: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _27 = _28;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _24 = <u32 as PartialOrd>::partial_cmp(move _25, move _27) -> bb13; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb13: {
        _30 = discriminant(_24);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        switchInt(move _30) -> [1: bb15, otherwise: bb14]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    }

    bb14: {
        _59 = _24;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _0 = _59;                        // scope 4 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        goto -> bb29;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:38: 45:39
    }

    bb15: {
        _29 = discriminant(((_24 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        switchInt(move _29) -> [0: bb16, otherwise: bb14]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    }

    bb16: {
        _33 = &((*_1).4: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _32 = _33;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _35 = &((*_2).4: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _34 = _35;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _31 = <u32 as PartialOrd>::partial_cmp(move _32, move _34) -> bb17; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb17: {
        _37 = discriminant(_31);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        switchInt(move _37) -> [1: bb19, otherwise: bb18]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    }

    bb18: {
        _58 = _31;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _0 = _58;                        // scope 3 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        goto -> bb29;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:47: 45:48
    }

    bb19: {
        _36 = discriminant(((_31 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        switchInt(move _36) -> [0: bb20, otherwise: bb18]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    }

    bb20: {
        _40 = &((*_1).5: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _39 = _40;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _42 = &((*_2).5: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _41 = _42;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _38 = <u32 as PartialOrd>::partial_cmp(move _39, move _41) -> bb21; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb21: {
        _44 = discriminant(_38);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        switchInt(move _44) -> [1: bb23, otherwise: bb22]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    }

    bb22: {
        _57 = _38;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _0 = _57;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        goto -> bb29;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:56: 45:57
    }

    bb23: {
        _43 = discriminant(((_38 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        switchInt(move _43) -> [0: bb24, otherwise: bb22]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    }

    bb24: {
        _47 = &((*_1).6: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _46 = _47;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _49 = &((*_2).6: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _48 = _49;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _45 = <u32 as PartialOrd>::partial_cmp(move _46, move _48) -> bb25; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb25: {
        _51 = discriminant(_45);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        switchInt(move _51) -> [1: bb27, otherwise: bb26]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    }

    bb26: {
        _56 = _45;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _0 = _56;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        goto -> bb29;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:65: 45:66
    }

    bb27: {
        _50 = discriminant(((_45 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        switchInt(move _50) -> [0: bb28, otherwise: bb26]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    }

    bb28: {
        _53 = &((*_1).7: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _52 = _53;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _55 = &((*_2).7: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _54 = _55;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _0 = <u32 as PartialOrd>::partial_cmp(move _52, move _54) -> bb29; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb29: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:43:70: 43:70
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:43:72: 43:75>::cmp(_1: &Big, _2: &Big) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:72: 43:75
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:43:72: 43:75
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:43:72: 43:75
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let _5: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _6: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let _7: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _8: i8;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    let mut _9: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _10: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let _11: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _12: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let _13: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _14: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let mut _15: std::cmp::Ordering;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _16: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let _17: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _18: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let _19: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _20: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let mut _21: std::cmp::Ordering;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _22: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let _23: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _24: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let _25: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _26: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let mut _27: std::cmp::Ordering;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _28: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let _29: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _30: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let _31: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _32: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let mut _33: std::cmp::Ordering;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _34: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let _35: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _36: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let _37: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _38: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let mut _39: std::cmp::Ordering;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _40: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let _41: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _42: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let _43: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _44: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let mut _45: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let _46: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let mut _47: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let _48: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
    let _49: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    let _50: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    let _51: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    let _52: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    let _53: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    let _54: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    let _55: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    scope 1 {
        debug cmp => _49;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    }
    scope 2 {
        debug cmp => _50;                // in scope 2 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    }
    scope 3 {
        debug cmp => _51;                // in scope 3 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    }
    scope 4 {
        debug cmp => _52;                // in scope 4 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    }
    scope 5 {
        debug cmp => _53;                // in scope 5 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    }
    scope 6 {
        debug cmp => _54;                // in scope 6 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    }
    scope 7 {
        debug cmp => _55;                // in scope 7 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    }

    bb0: {
        _5 = &((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _7 = &((*_2).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _3 = <u32 as Ord>::cmp(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:5: 45:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = discriminant(_3);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
    }

    bb2: {
        _55 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        _0 = _55;                        // scope 7 at ui/deriving/deriving-all-codegen.rs:45:5: 45:12
        goto -> bb22;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:11: 45:12
    }

    bb3: {
        _11 = &((*_1).1: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _10 = _11;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _13 = &((*_2).1: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _12 = _13;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _9 = <u32 as Ord>::cmp(move _10, move _12) -> bb4; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:14: 45:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = discriminant(_9);          // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
    }

    bb5: {
        _54 = _9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        _0 = _54;                        // scope 6 at ui/deriving/deriving-all-codegen.rs:45:14: 45:21
        goto -> bb22;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:20: 45:21
    }

    bb6: {
        _17 = &((*_1).2: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _16 = _17;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _19 = &((*_2).2: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _18 = _19;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _15 = <u32 as Ord>::cmp(move _16, move _18) -> bb7; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:23: 45:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb7: {
        _20 = discriminant(_15);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        switchInt(move _20) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
    }

    bb8: {
        _53 = _15;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        _0 = _53;                        // scope 5 at ui/deriving/deriving-all-codegen.rs:45:23: 45:30
        goto -> bb22;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:29: 45:30
    }

    bb9: {
        _23 = &((*_1).3: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _22 = _23;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _25 = &((*_2).3: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _24 = _25;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _21 = <u32 as Ord>::cmp(move _22, move _24) -> bb10; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:32: 45:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb10: {
        _26 = discriminant(_21);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        switchInt(move _26) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
    }

    bb11: {
        _52 = _21;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        _0 = _52;                        // scope 4 at ui/deriving/deriving-all-codegen.rs:45:32: 45:39
        goto -> bb22;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:38: 45:39
    }

    bb12: {
        _29 = &((*_1).4: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _28 = _29;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _31 = &((*_2).4: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _30 = _31;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _27 = <u32 as Ord>::cmp(move _28, move _30) -> bb13; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:41: 45:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb13: {
        _32 = discriminant(_27);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        switchInt(move _32) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
    }

    bb14: {
        _51 = _27;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        _0 = _51;                        // scope 3 at ui/deriving/deriving-all-codegen.rs:45:41: 45:48
        goto -> bb22;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:47: 45:48
    }

    bb15: {
        _35 = &((*_1).5: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _34 = _35;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _37 = &((*_2).5: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _36 = _37;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _33 = <u32 as Ord>::cmp(move _34, move _36) -> bb16; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:50: 45:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb16: {
        _38 = discriminant(_33);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        switchInt(move _38) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
    }

    bb17: {
        _50 = _33;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        _0 = _50;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:45:50: 45:57
        goto -> bb22;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:56: 45:57
    }

    bb18: {
        _41 = &((*_1).6: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _40 = _41;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _43 = &((*_2).6: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _42 = _43;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _39 = <u32 as Ord>::cmp(move _40, move _42) -> bb19; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:59: 45:66
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb19: {
        _44 = discriminant(_39);         // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        switchInt(move _44) -> [0: bb21, otherwise: bb20]; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
    }

    bb20: {
        _49 = _39;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        _0 = _49;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:45:59: 45:66
        goto -> bb22;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:45:65: 45:66
    }

    bb21: {
        _46 = &((*_1).7: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _45 = _46;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _48 = &((*_2).7: u32);           // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _47 = _48;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
        _0 = <u32 as Ord>::cmp(move _45, move _47) -> bb22; // scope 0 at ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:45:68: 45:75
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb22: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:43:75: 43:75
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:50:10: 50:15>::clone(_1: &NonCopy) -> NonCopy {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:50:10: 50:15
    let mut _0: NonCopy;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:50:10: 50:15
    let mut _2: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:51:16: 51:19
    let mut _3: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:51:16: 51:19
    let _4: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:51:16: 51:19

    bb0: {
        _4 = &((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:51:16: 51:19
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:51:16: 51:19
        _2 = (*_3);                      // scope 0 at ui/deriving/deriving-all-codegen.rs:51:16: 51:19
        _0 = NonCopy(move _2);           // scope 0 at ui/deriving/deriving-all-codegen.rs:50:10: 50:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:50:15: 50:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:55:10: 55:15>::clone(_1: &PackedNonCopy) -> PackedNonCopy {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:55:10: 55:15
    let mut _0: PackedNonCopy;           // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:55:10: 55:15
    let mut _2: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:57:22: 57:25
    let mut _3: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:57:22: 57:25
    let _4: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:57:22: 57:25
    let _5: u32;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:57:22: 57:25

    bb0: {
        _5 = ((*_1).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:57:22: 57:25
        _4 = &_5;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:57:22: 57:25
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:57:22: 57:25
        _2 = (*_3);                      // scope 0 at ui/deriving/deriving-all-codegen.rs:57:22: 57:25
        _0 = PackedNonCopy(move _2);     // scope 0 at ui/deriving/deriving-all-codegen.rs:55:10: 55:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:55:15: 55:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:61:10: 61:15>::clone(_1: &ManualCopy) -> ManualCopy {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:61:10: 61:15
    let mut _0: ManualCopy;              // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:61:10: 61:15
    let mut _2: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:62:19: 62:22
    let mut _3: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:62:19: 62:22
    let _4: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:62:19: 62:22

    bb0: {
        _4 = &((*_1).0: u32);            // scope 0 at ui/deriving/deriving-all-codegen.rs:62:19: 62:22
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:62:19: 62:22
        _2 = (*_3);                      // scope 0 at ui/deriving/deriving-all-codegen.rs:62:19: 62:22
        _0 = ManualCopy(move _2);        // scope 0 at ui/deriving/deriving-all-codegen.rs:61:10: 61:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:61:15: 61:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:67:10: 67:15>::clone(_1: &PackedManualCopy) -> PackedManualCopy {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:67:10: 67:15
    let mut _0: PackedManualCopy;        // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:67:10: 67:15
    let mut _2: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:69:25: 69:28
    let mut _3: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:69:25: 69:28
    let _4: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:69:25: 69:28
    let _5: u32;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:69:25: 69:28

    bb0: {
        _5 = ((*_1).0: u32);             // scope 0 at ui/deriving/deriving-all-codegen.rs:69:25: 69:28
        _4 = &_5;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:69:25: 69:28
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:69:25: 69:28
        _2 = (*_3);                      // scope 0 at ui/deriving/deriving-all-codegen.rs:69:25: 69:28
        _0 = PackedManualCopy(move _2);  // scope 0 at ui/deriving/deriving-all-codegen.rs:67:10: 67:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:67:15: 67:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:73:10: 73:15>::fmt(_1: &Unsized, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let mut _7: &&[u32];                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let _8: &&[u32];                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let _9: &[u32];                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
        _5 = const "Unsized";            // scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:73:10: 73:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
        _9 = &((*_1).0: [u32]);          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _7 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:73:10: 73:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:73:10: 73:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:73:15: 73:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:73:17: 73:21>::hash(_1: &Unsized, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:17: 73:21
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:17: 73:21
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:73:17: 73:21
    let mut _3: &[u32];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let _4: &[u32];                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let mut _5: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:17: 73:21

    bb0: {
        _4 = &((*_1).0: [u32]);          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _5 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:73:17: 73:21
        _0 = <[u32] as Hash>::hash::<__H>(move _3, move _5) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:74:16: 74:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u32], &'b mut __H) {<[u32] as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:73:21: 73:21
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:73:23: 73:32>::eq(_1: &Unsized, _2: &Unsized) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:23: 73:32
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:23: 73:32
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:73:23: 73:32
    let mut _3: &[u32];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let mut _4: &[u32];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21

    bb0: {
        _3 = &((*_1).0: [u32]);          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _4 = &((*_2).0: [u32]);          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _0 = <[u32] as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:74:16: 74:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u32], &'b [u32]) -> bool {<[u32] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:73:32: 73:32
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:73:34: 73:36>::assert_receiver_is_total_eq(_1: &Unsized) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:34: 73:36
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:73:34: 73:36
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:73:36: 73:36
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:73:38: 73:48>::partial_cmp(_1: &Unsized, _2: &Unsized) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:38: 73:48
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:38: 73:48
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:73:38: 73:48
    let mut _3: &[u32];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let _4: &[u32];                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let mut _5: &[u32];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let _6: &[u32];                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21

    bb0: {
        _4 = &((*_1).0: [u32]);          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _6 = &((*_2).0: [u32]);          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _5 = _6;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _0 = <[u32] as PartialOrd>::partial_cmp(move _3, move _5) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:74:16: 74:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u32], &'b [u32]) -> Option<std::cmp::Ordering> {<[u32] as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:73:48: 73:48
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:73:50: 73:53>::cmp(_1: &Unsized, _2: &Unsized) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:50: 73:53
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:73:50: 73:53
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:73:50: 73:53
    let mut _3: &[u32];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let _4: &[u32];                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let mut _5: &[u32];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
    let _6: &[u32];                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21

    bb0: {
        _4 = &((*_1).0: [u32]);          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _6 = &((*_2).0: [u32]);          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _5 = _6;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
        _0 = <[u32] as Ord>::cmp(move _3, move _5) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:74:16: 74:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:74:16: 74:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u32], &'b [u32]) -> std::cmp::Ordering {<[u32] as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:73:53: 73:53
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:78:10: 78:15>::fmt(_1: &PackedUnsizedU8, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
    let mut _7: &&[u8];                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
    let _8: &&[u8];                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
    let _9: &[u8];                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
        _5 = const "PackedUnsizedU8";    // scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:78:10: 78:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
        _9 = &((*_1).0: [u8]);           // scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
        _7 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:78:10: 78:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:78:10: 78:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:78:15: 78:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:78:17: 78:21>::hash(_1: &PackedUnsizedU8, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:78:17: 78:21
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:78:17: 78:21
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:78:17: 78:21
    let mut _3: &[u8];                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
    let _4: &[u8];                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
    let mut _5: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:78:17: 78:21

    bb0: {
        _4 = &((*_1).0: [u8]);           // scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
        _5 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:78:17: 78:21
        _0 = <[u8] as Hash>::hash::<__H>(move _3, move _5) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:80:24: 80:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:80:24: 80:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8], &'b mut __H) {<[u8] as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:78:21: 78:21
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:91:10: 91:15>::clone(_1: &Generic<T, U>) -> Generic<T, U> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:10: 91:15
    let mut _0: Generic<T, U>;           // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:91:10: 91:15
    let mut _2: T;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _3: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let _4: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _5: <T as Trait>::A;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _6: &<T as Trait>::A;        // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _7: &<T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _8: U;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let mut _9: &U;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _10: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _5 = <<T as Trait>::A as Clone>::clone(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // + literal: Const { ty: for<'a> fn(&'a <T as Trait>::A) -> <T as Trait>::A {<<T as Trait>::A as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &((*_1).2: U);             // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _9 = _10;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _8 = <U as Clone>::clone(move _9) -> [return: bb3, unwind: bb4]; // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> U {<U as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Generic::<T, U> { t: move _2, ta: move _5, u: move _8 }; // scope 0 at ui/deriving/deriving-all-codegen.rs:91:10: 91:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:15: 91:15
    }

    bb4 (cleanup): {
        drop(_5) -> bb5;                 // scope 0 at ui/deriving/deriving-all-codegen.rs:91:14: 91:15
    }

    bb5 (cleanup): {
        drop(_2) -> bb6;                 // scope 0 at ui/deriving/deriving-all-codegen.rs:91:14: 91:15
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:10: 91:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:91:23: 91:28>::fmt(_1: &Generic<T, U>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _9: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let _10: &T;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _11: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _12: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _14: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _15: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _16: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _17: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let mut _18: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let mut _19: &&U;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _20: &&U;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _21: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
        _5 = const "Generic";            // scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:91:23: 91:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
        _7 = const "t";                  // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _10 = &((*_1).0: T);             // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _9 = _10;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _12 = const "ta";                // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _15 = &((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _14 = _15;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _17 = const "u";                 // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _16 = _17;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _21 = &((*_1).2: U);             // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _20 = &_21;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _19 = _20;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _18 = move _19 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _0 = Formatter::<'_>::debug_struct_field3_finish(move _3, move _4, move _6, move _8, move _11, move _13, move _16, move _18) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:91:23: 91:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:91:23: 91:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:28: 91:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:91:30: 91:37>::default() -> Generic<T, U> {
    let mut _0: Generic<T, U>;           // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:91:30: 91:37
    let mut _1: T;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _2: <T as Trait>::A;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _3: U;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9

    bb0: {
        _1 = <T as Default>::default() -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <<T as Trait>::A as Default>::default() -> [return: bb2, unwind: bb5]; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // + literal: Const { ty: fn() -> <T as Trait>::A {<<T as Trait>::A as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <U as Default>::default() -> [return: bb3, unwind: bb4]; // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // + literal: Const { ty: fn() -> U {<U as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = Generic::<T, U> { t: move _1, ta: move _2, u: move _3 }; // scope 0 at ui/deriving/deriving-all-codegen.rs:91:30: 91:37
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:37: 91:37
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/deriving/deriving-all-codegen.rs:91:36: 91:37
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/deriving/deriving-all-codegen.rs:91:36: 91:37
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:30: 91:37
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:91:39: 91:43>::hash(_1: &Generic<T, U>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:39: 91:43
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:39: 91:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:91:39: 91:43
    let _3: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _4: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let _5: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _6: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:39: 91:43
    let _7: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _8: &<T as Trait>::A;        // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _9: &<T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _10: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:39: 91:43
    let mut _11: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _12: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let mut _13: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:39: 91:43

    bb0: {
        _5 = &((*_1).0: T);              // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _6 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:91:39: 91:43
        _3 = <T as Hash>::hash::<__H>(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b mut __H) {<T as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _8 = _9;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _10 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:91:39: 91:43
        _7 = <<T as Trait>::A as Hash>::hash::<__H>(move _8, move _10) -> bb2; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as Trait>::A, &'b mut __H) {<<T as Trait>::A as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &((*_1).2: U);             // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _11 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _13 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:91:39: 91:43
        _0 = <U as Hash>::hash::<__H>(move _11, move _13) -> bb3; // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b mut __H) {<U as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:43: 91:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:91:45: 91:54>::eq(_1: &Generic<T, U>, _2: &Generic<T, U>) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:45: 91:54
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:45: 91:54
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:91:45: 91:54
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _4: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _5: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _6: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _8: &<T as Trait>::A;        // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _9: &<T as Trait>::A;        // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let mut _11: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let mut _12: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9

    bb0: {
        _5 = &((*_1).0: T);              // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _6 = &((*_2).0: T);              // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _4 = <T as PartialEq>::eq(move _5, move _6) -> bb7; // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    }

    bb2: {
        _11 = &((*_1).2: U);             // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _12 = &((*_2).2: U);             // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _10 = <U as PartialEq>::eq(move _11, move _12) -> bb9; // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> bool {<U as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:54: 91:54
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    }

    bb5: {
        _8 = &((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _9 = &((*_2).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _7 = <<T as Trait>::A as PartialEq>::eq(move _8, move _9) -> bb8; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as Trait>::A, &'b <T as Trait>::A) -> bool {<<T as Trait>::A as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    }

    bb7: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    }

    bb8: {
        _3 = move _7;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    }

    bb9: {
        _0 = move _10;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:91:56: 91:58>::assert_receiver_is_total_eq(_1: &Generic<T, U>) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:56: 91:58
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:91:56: 91:58
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:58: 91:58
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:91:60: 91:70>::partial_cmp(_1: &Generic<T, U>, _2: &Generic<T, U>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:60: 91:70
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:60: 91:70
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:91:60: 91:70
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _4: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let _5: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _6: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let _7: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _8: i8;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _10: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _11: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _12: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _13: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _14: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _15: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _17: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _18: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let mut _19: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _20: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _21: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _22: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    scope 1 {
        debug cmp => _21;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    }
    scope 2 {
        debug cmp => _22;                // in scope 2 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    }

    bb0: {
        _5 = &((*_1).0: T);              // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _7 = &((*_2).0: T);              // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _3 = <T as PartialOrd>::partial_cmp(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> Option<std::cmp::Ordering> {<T as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant(_3);           // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        switchInt(move _9) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    }

    bb2: {
        _22 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _0 = _22;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        goto -> bb9;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:93:8: 93:9
    }

    bb3: {
        _8 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        switchInt(move _8) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    }

    bb4: {
        _12 = &((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _11 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _14 = &((*_2).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _13 = _14;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _10 = <<T as Trait>::A as PartialOrd>::partial_cmp(move _11, move _13) -> bb5; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as Trait>::A, &'b <T as Trait>::A) -> Option<std::cmp::Ordering> {<<T as Trait>::A as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = discriminant(_10);         // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        switchInt(move _16) -> [1: bb7, otherwise: bb6]; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    }

    bb6: {
        _21 = _10;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _0 = _21;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        goto -> bb9;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:94:12: 94:13
    }

    bb7: {
        _15 = discriminant(((_10 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        switchInt(move _15) -> [0: bb8, otherwise: bb6]; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    }

    bb8: {
        _18 = &((*_1).2: U);             // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _17 = _18;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _20 = &((*_2).2: U);             // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _19 = _20;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _0 = <U as PartialOrd>::partial_cmp(move _17, move _19) -> bb9; // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> Option<std::cmp::Ordering> {<U as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:70: 91:70
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:91:72: 91:75>::cmp(_1: &Generic<T, U>, _2: &Generic<T, U>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:72: 91:75
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:91:72: 91:75
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:91:72: 91:75
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _4: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let _5: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _6: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let _7: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _8: i8;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    let mut _9: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _10: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _11: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _12: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _13: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _14: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let mut _15: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _16: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let mut _17: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _18: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
    let _19: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    let _20: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    scope 1 {
        debug cmp => _19;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    }
    scope 2 {
        debug cmp => _20;                // in scope 2 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    }

    bb0: {
        _5 = &((*_1).0: T);              // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _7 = &((*_2).0: T);              // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _6 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _3 = <T as Ord>::cmp(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:93:5: 93:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> std::cmp::Ordering {<T as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = discriminant(_3);           // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        switchInt(move _8) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
    }

    bb2: {
        _20 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        _0 = _20;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:93:5: 93:9
        goto -> bb7;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:93:8: 93:9
    }

    bb3: {
        _11 = &((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _10 = _11;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _13 = &((*_2).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _12 = _13;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _9 = <<T as Trait>::A as Ord>::cmp(move _10, move _12) -> bb4; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:94:5: 94:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as Trait>::A, &'b <T as Trait>::A) -> std::cmp::Ordering {<<T as Trait>::A as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = discriminant(_9);          // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
    }

    bb5: {
        _19 = _9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        _0 = _19;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:94:5: 94:13
        goto -> bb7;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:94:12: 94:13
    }

    bb6: {
        _16 = &((*_1).2: U);             // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _15 = _16;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _18 = &((*_2).2: U);             // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _17 = _18;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
        _0 = <U as Ord>::cmp(move _15, move _17) -> bb7; // scope 0 at ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:95:5: 95:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> std::cmp::Ordering {<U as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:91:75: 91:75
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:103:10: 103:15>::clone(_1: &PackedGeneric<T, U>) -> PackedGeneric<T, U> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:10: 103:15
    let mut _0: PackedGeneric<T, U>;     // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:103:10: 103:15
    let mut _2: T;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _3: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _4: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _5: T;                           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _6: <T as Trait>::A;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _7: &<T as Trait>::A;        // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _8: &<T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _9: <T as Trait>::A;             // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _10: U;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let mut _11: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _12: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _13: U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45

    bb0: {
        _5 = ((*_1).0: T);               // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _4 = &_5;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _3 = _4;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = ((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _7 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _6 = <<T as Trait>::A as Clone>::clone(move _7) -> bb2; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // + literal: Const { ty: for<'a> fn(&'a <T as Trait>::A) -> <T as Trait>::A {<<T as Trait>::A as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = ((*_1).2: U);              // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _12 = &_13;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _11 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _10 = <U as Clone>::clone(move _11) -> bb3; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> U {<U as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = PackedGeneric::<T, U>(move _2, move _6, move _10); // scope 0 at ui/deriving/deriving-all-codegen.rs:103:10: 103:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:103:15: 103:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:103:23: 103:28>::fmt(_1: &PackedGeneric<T, U>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _7: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _8: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _9: T;                           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _10: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _11: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _12: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _13: <T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let mut _15: &&U;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _16: &&U;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _17: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _18: U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
        _5 = const "PackedGeneric";      // scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:103:23: 103:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
        _9 = ((*_1).0: T);               // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _7 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _13 = ((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _12 = &_13;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _11 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _10 = move _11 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _18 = ((*_1).2: U);              // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _17 = &_18;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _16 = &_17;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _15 = _16;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _14 = move _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _0 = Formatter::<'_>::debug_tuple_field3_finish(move _3, move _4, move _6, move _10, move _14) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:103:23: 103:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:103:23: 103:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd), &'e (dyn Debug + 'e)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:103:28: 103:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:103:30: 103:37>::default() -> PackedGeneric<T, U> {
    let mut _0: PackedGeneric<T, U>;     // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:103:30: 103:37
    let mut _1: T;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _2: <T as Trait>::A;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _3: U;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45

    bb0: {
        _1 = <T as Default>::default() -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // + literal: Const { ty: fn() -> T {<T as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <<T as Trait>::A as Default>::default() -> [return: bb2, unwind: bb5]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // + literal: Const { ty: fn() -> <T as Trait>::A {<<T as Trait>::A as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <U as Default>::default() -> [return: bb3, unwind: bb4]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // + literal: Const { ty: fn() -> U {<U as Default>::default}, val: Value(<ZST>) }
    }

    bb3: {
        _0 = PackedGeneric::<T, U>(move _1, move _2, move _3); // scope 0 at ui/deriving/deriving-all-codegen.rs:103:30: 103:37
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:103:37: 103:37
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/deriving/deriving-all-codegen.rs:103:36: 103:37
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/deriving/deriving-all-codegen.rs:103:36: 103:37
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:103:30: 103:37
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:103:39: 103:43>::hash(_1: &PackedGeneric<T, U>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:39: 103:43
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:39: 103:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:103:39: 103:43
    let _3: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _4: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _5: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _6: T;                           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _7: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:39: 103:43
    let _8: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _9: &<T as Trait>::A;        // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _10: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _11: <T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _12: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:39: 103:43
    let mut _13: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _14: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _15: U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let mut _16: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:39: 103:43

    bb0: {
        _6 = ((*_1).0: T);               // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _5 = &_6;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _7 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:103:39: 103:43
        _3 = <T as Hash>::hash::<__H>(move _4, move _7) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b mut __H) {<T as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = ((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _10 = &_11;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _9 = _10;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _12 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:103:39: 103:43
        _8 = <<T as Trait>::A as Hash>::hash::<__H>(move _9, move _12) -> bb2; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as Trait>::A, &'b mut __H) {<<T as Trait>::A as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = ((*_1).2: U);              // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _14 = &_15;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _13 = _14;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _16 = &mut (*_2);                // scope 0 at ui/deriving/deriving-all-codegen.rs:103:39: 103:43
        _0 = <U as Hash>::hash::<__H>(move _13, move _16) -> bb3; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b mut __H) {<U as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:103:43: 103:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:103:45: 103:54>::eq(_1: &PackedGeneric<T, U>, _2: &PackedGeneric<T, U>) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:45: 103:54
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:45: 103:54
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:103:45: 103:54
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _4: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _5: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _6: T;                           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _7: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _8: T;                           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _9: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _10: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _11: <T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _12: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _13: <T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _14: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let mut _15: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _16: U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let mut _17: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _18: U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45

    bb0: {
        _6 = ((*_1).0: T);               // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _5 = &_6;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _8 = ((*_2).0: T);               // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _7 = &_8;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _4 = <T as PartialEq>::eq(move _5, move _7) -> bb7; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    }

    bb2: {
        _16 = ((*_1).2: U);              // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _15 = &_16;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _18 = ((*_2).2: U);              // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _17 = &_18;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _14 = <U as PartialEq>::eq(move _15, move _17) -> bb9; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> bool {<U as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:103:54: 103:54
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    }

    bb5: {
        _11 = ((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _10 = &_11;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _13 = ((*_2).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _12 = &_13;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _9 = <<T as Trait>::A as PartialEq>::eq(move _10, move _12) -> bb8; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as Trait>::A, &'b <T as Trait>::A) -> bool {<<T as Trait>::A as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    }

    bb7: {
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    }

    bb8: {
        _3 = move _9;                    // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    }

    bb9: {
        _0 = move _14;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:103:56: 103:58>::assert_receiver_is_total_eq(_1: &PackedGeneric<T, U>) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:56: 103:58
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:103:56: 103:58
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:103:58: 103:58
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:103:60: 103:70>::partial_cmp(_1: &PackedGeneric<T, U>, _2: &PackedGeneric<T, U>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:60: 103:70
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:60: 103:70
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:103:60: 103:70
    let mut _3: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _4: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _5: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _6: T;                           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _7: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _8: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _9: T;                           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _10: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _11: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _12: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _13: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _14: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _15: <T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _16: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _17: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _18: <T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _19: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _20: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _21: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _22: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _23: U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let mut _24: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _25: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _26: U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _27: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _28: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    scope 1 {
        debug cmp => _27;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    }
    scope 2 {
        debug cmp => _28;                // in scope 2 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    }

    bb0: {
        _6 = ((*_1).0: T);               // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _5 = &_6;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _9 = ((*_2).0: T);               // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _7 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _3 = <T as PartialOrd>::partial_cmp(move _4, move _7) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> Option<std::cmp::Ordering> {<T as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = discriminant(_3);          // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        switchInt(move _11) -> [1: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    }

    bb2: {
        _28 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _0 = _28;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        goto -> bb9;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    }

    bb3: {
        _10 = discriminant(((_3 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        switchInt(move _10) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    }

    bb4: {
        _15 = ((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _14 = &_15;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _13 = _14;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _18 = ((*_2).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _17 = &_18;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _16 = _17;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _12 = <<T as Trait>::A as PartialOrd>::partial_cmp(move _13, move _16) -> bb5; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as Trait>::A, &'b <T as Trait>::A) -> Option<std::cmp::Ordering> {<<T as Trait>::A as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _20 = discriminant(_12);         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        switchInt(move _20) -> [1: bb7, otherwise: bb6]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    }

    bb6: {
        _27 = _12;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _0 = _27;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        goto -> bb9;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:105:41: 105:42
    }

    bb7: {
        _19 = discriminant(((_12 as Some).0: std::cmp::Ordering)); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        switchInt(move _19) -> [0: bb8, otherwise: bb6]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    }

    bb8: {
        _23 = ((*_1).2: U);              // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _22 = &_23;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _21 = _22;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _26 = ((*_2).2: U);              // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _25 = &_26;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _24 = _25;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _0 = <U as PartialOrd>::partial_cmp(move _21, move _24) -> bb9; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> Option<std::cmp::Ordering> {<U as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:103:70: 103:70
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:103:72: 103:75>::cmp(_1: &PackedGeneric<T, U>, _2: &PackedGeneric<T, U>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:72: 103:75
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:103:72: 103:75
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:103:72: 103:75
    let mut _3: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _4: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _5: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _6: T;                           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _7: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _8: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let _9: T;                           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _10: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    let mut _11: std::cmp::Ordering;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _12: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _13: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _14: <T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _15: &<T as Trait>::A;       // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _16: &<T as Trait>::A;           // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _17: <T as Trait>::A;            // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _18: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let mut _19: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _20: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _21: U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let mut _22: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _23: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _24: U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
    let _25: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    let _26: std::cmp::Ordering;         // in scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    scope 1 {
        debug cmp => _25;                // in scope 1 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    }
    scope 2 {
        debug cmp => _26;                // in scope 2 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    }

    bb0: {
        _6 = ((*_1).0: T);               // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _5 = &_6;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _9 = ((*_2).0: T);               // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _8 = &_9;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _7 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _3 = <T as Ord>::cmp(move _4, move _7) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:35: 105:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> std::cmp::Ordering {<T as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = discriminant(_3);          // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    }

    bb2: {
        _26 = _3;                        // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        _0 = _26;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
        goto -> bb7;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:105:35: 105:36
    }

    bb3: {
        _14 = ((*_1).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _13 = &_14;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _12 = _13;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _17 = ((*_2).1: <T as Trait>::A); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _16 = &_17;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _15 = _16;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _11 = <<T as Trait>::A as Ord>::cmp(move _12, move _15) -> bb4; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:38: 105:42
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a <T as Trait>::A, &'b <T as Trait>::A) -> std::cmp::Ordering {<<T as Trait>::A as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = discriminant(_11);         // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        switchInt(move _18) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
    }

    bb5: {
        _25 = _11;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        _0 = _25;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:105:38: 105:42
        goto -> bb7;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:105:41: 105:42
    }

    bb6: {
        _21 = ((*_1).2: U);              // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _20 = &_21;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _19 = _20;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _24 = ((*_2).2: U);              // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _23 = &_24;                      // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _22 = _23;                       // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
        _0 = <U as Ord>::cmp(move _19, move _22) -> bb7; // scope 0 at ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:105:44: 105:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> std::cmp::Ordering {<U as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:103:75: 103:75
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:108:10: 108:15>::clone(_1: &Enum0) -> Enum0 {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:10: 108:15
    let mut _0: Enum0;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:108:10: 108:15

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:108:15: 108:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:108:23: 108:28>::fmt(_1: &Enum0, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:23: 108:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:23: 108:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:108:23: 108:28
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 1 at ui/deriving/deriving-all-codegen.rs:108:23: 108:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:108:30: 108:34>::hash(_1: &Enum0, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:30: 108:34
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:30: 108:34
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:108:30: 108:34
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 1 at ui/deriving/deriving-all-codegen.rs:108:30: 108:34
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:108:36: 108:45>::eq(_1: &Enum0, _2: &Enum0) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:36: 108:45
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:36: 108:45
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:108:36: 108:45
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 1 at ui/deriving/deriving-all-codegen.rs:108:36: 108:45
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:108:47: 108:49>::assert_receiver_is_total_eq(_1: &Enum0) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:47: 108:49
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:108:47: 108:49

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:108:49: 108:49
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:108:51: 108:61>::partial_cmp(_1: &Enum0, _2: &Enum0) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:51: 108:61
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:51: 108:61
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:108:51: 108:61
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 1 at ui/deriving/deriving-all-codegen.rs:108:51: 108:61
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:108:63: 108:66>::cmp(_1: &Enum0, _2: &Enum0) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:63: 108:66
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:108:63: 108:66
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:108:63: 108:66
    scope 1 {
    }

    bb0: {
        unreachable;                     // scope 1 at ui/deriving/deriving-all-codegen.rs:108:63: 108:66
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:112:10: 112:15>::clone(_1: &Enum1) -> Enum1 {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:10: 112:15
    let mut _0: Enum1;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:112:10: 112:15
    let _2: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _3: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    scope 1 {
        debug __self_0 => _2;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    }

    bb0: {
        _2 = &(((*_1) as Single).0: u32); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _4 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _3 = (*_4);                      // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _0 = Enum1::Single { x: move _3 }; // scope 1 at ui/deriving/deriving-all-codegen.rs:112:10: 112:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:112:15: 112:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:112:17: 112:22>::fmt(_1: &Enum1, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
    let _3: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
    let mut _5: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
    let _6: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
    let mut _7: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _10: &&u32;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let _11: &&u32;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    }

    bb0: {
        _3 = &(((*_1) as Single).0: u32); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _4 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
        _6 = const "Single";             // scope 1 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:112:17: 112:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
        _8 = const "x";                  // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:114:14: 114:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _11 = &_3;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _10 = _11;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _4, move _5, move _7, move _9) -> bb1; // scope 1 at ui/deriving/deriving-all-codegen.rs:112:17: 112:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:112:17: 112:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:112:22: 112:22
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:112:24: 112:28>::hash(_1: &Enum1, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:24: 112:28
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:24: 112:28
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:112:24: 112:28
    let _3: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _4: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _5: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:24: 112:28
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    }

    bb0: {
        _3 = &(((*_1) as Single).0: u32); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _4 = _3;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _5 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-all-codegen.rs:112:24: 112:28
        _0 = <u32 as Hash>::hash::<__H>(move _4, move _5) -> bb1; // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:114:14: 114:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:112:28: 112:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:112:30: 112:39>::eq(_1: &Enum1, _2: &Enum1) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
    let mut _3: (&Enum1, &Enum1);        // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
    let mut _4: &Enum1;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
    let mut _5: &Enum1;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
    let _6: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let _7: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _8: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _9: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _10: &Enum1;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
    let mut _11: &Enum1;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        debug __arg1_0 => _7;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
        _5 = _2;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
        _3 = (move _4, move _5);         // scope 0 at ui/deriving/deriving-all-codegen.rs:112:30: 112:39
        _10 = deref_copy (_3.0: &Enum1); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _6 = &(((*_10) as Single).0: u32); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _11 = deref_copy (_3.1: &Enum1); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _7 = &(((*_11) as Single).0: u32); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _8 = (*_6);                      // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _9 = (*_7);                      // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _0 = Eq(move _8, move _9);       // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:112:39: 112:39
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:112:41: 112:43>::assert_receiver_is_total_eq(_1: &Enum1) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:41: 112:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:112:41: 112:43
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:112:43: 112:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:112:45: 112:55>::partial_cmp(_1: &Enum1, _2: &Enum1) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
    let mut _3: (&Enum1, &Enum1);        // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
    let mut _4: &Enum1;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
    let mut _5: &Enum1;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
    let _6: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let _7: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _8: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _9: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _10: &Enum1;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
    let mut _11: &Enum1;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        debug __arg1_0 => _7;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
        _5 = _2;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
        _3 = (move _4, move _5);         // scope 0 at ui/deriving/deriving-all-codegen.rs:112:45: 112:55
        _10 = deref_copy (_3.0: &Enum1); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _6 = &(((*_10) as Single).0: u32); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _11 = deref_copy (_3.1: &Enum1); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _7 = &(((*_11) as Single).0: u32); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _8 = _6;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _9 = _7;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _0 = <u32 as PartialOrd>::partial_cmp(move _8, move _9) -> bb1; // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:114:14: 114:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:112:55: 112:55
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:112:57: 112:60>::cmp(_1: &Enum1, _2: &Enum1) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
    let mut _3: (&Enum1, &Enum1);        // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
    let mut _4: &Enum1;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
    let mut _5: &Enum1;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
    let _6: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let _7: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _8: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _9: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    let mut _10: &Enum1;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
    let mut _11: &Enum1;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        debug __arg1_0 => _7;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
        _5 = _2;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
        _3 = (move _4, move _5);         // scope 0 at ui/deriving/deriving-all-codegen.rs:112:57: 112:60
        _10 = deref_copy (_3.0: &Enum1); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _6 = &(((*_10) as Single).0: u32); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _11 = deref_copy (_3.1: &Enum1); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _7 = &(((*_11) as Single).0: u32); // scope 0 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _8 = _6;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _9 = _7;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
        _0 = <u32 as Ord>::cmp(move _8, move _9) -> bb1; // scope 1 at ui/deriving/deriving-all-codegen.rs:114:14: 114:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:114:14: 114:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:112:60: 112:60
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:118:10: 118:15>::clone(_1: &Fieldless1) -> Fieldless1 {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:10: 118:15
    let mut _0: Fieldless1;              // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:118:10: 118:15

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:118:15: 118:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:118:17: 118:22>::fmt(_1: &Fieldless1, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22
        _5 = const "A";                  // scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:118:17: 118:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/deriving/deriving-all-codegen.rs:118:17: 118:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:118:17: 118:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:118:22: 118:22
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:118:24: 118:31>::default() -> Fieldless1 {
    let mut _0: Fieldless1;              // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:118:24: 118:31

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:118:31: 118:31
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:118:33: 118:37>::hash(_1: &Fieldless1, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:33: 118:37
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:33: 118:37
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:118:33: 118:37

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:118:37: 118:37
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:118:39: 118:48>::eq(_1: &Fieldless1, _2: &Fieldless1) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:39: 118:48
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:39: 118:48
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:118:39: 118:48

    bb0: {
        _0 = const true;                 // scope 0 at ui/deriving/deriving-all-codegen.rs:118:39: 118:48
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:118:48: 118:48
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:118:50: 118:52>::assert_receiver_is_total_eq(_1: &Fieldless1) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:50: 118:52
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:118:50: 118:52

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:118:52: 118:52
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:118:54: 118:64>::partial_cmp(_1: &Fieldless1, _2: &Fieldless1) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:54: 118:64
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:54: 118:64
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:118:54: 118:64

    bb0: {
        _0 = const Option::<std::cmp::Ordering>::Some(Equal); // scope 0 at ui/deriving/deriving-all-codegen.rs:118:54: 118:64
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:118:54: 118:64
                                         // + literal: Const { ty: Option<std::cmp::Ordering>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:118:64: 118:64
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:118:66: 118:69>::cmp(_1: &Fieldless1, _2: &Fieldless1) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:66: 118:69
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:118:66: 118:69
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:118:66: 118:69

    bb0: {
        _0 = const Equal;                // scope 0 at ui/deriving/deriving-all-codegen.rs:118:66: 118:69
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:118:66: 118:69
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:118:69: 118:69
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:125:10: 125:15>::clone(_1: &Fieldless) -> Fieldless {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:10: 125:15
    let mut _0: Fieldless;               // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:125:10: 125:15

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/deriving/deriving-all-codegen.rs:125:10: 125:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:125:15: 125:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:125:23: 125:28>::fmt(_1: &Fieldless, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    let mut _5: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    let _6: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
        _5 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    }

    bb1: {
        _8 = const "C";                  // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:125:23: 125:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:125:27: 125:28
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
    }

    bb3: {
        _6 = const "A";                  // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:125:23: 125:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:125:27: 125:28
    }

    bb4: {
        _7 = const "B";                  // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:125:23: 125:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:125:27: 125:28
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb6; // scope 0 at ui/deriving/deriving-all-codegen.rs:125:23: 125:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:125:23: 125:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:125:28: 125:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:125:30: 125:37>::default() -> Fieldless {
    let mut _0: Fieldless;               // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:125:30: 125:37

    bb0: {
        _0 = const Fieldless::A;         // scope 0 at ui/deriving/deriving-all-codegen.rs:128:5: 128:6
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:128:5: 128:6
                                         // + literal: Const { ty: Fieldless, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:125:37: 125:37
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:125:39: 125:43>::hash(_1: &Fieldless, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
    let mut _4: &Fieldless;              // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
    let mut _5: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
    let _6: &isize;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
    let mut _7: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
        _6 = &_3;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
        _5 = _6;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
        _7 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
        _0 = <isize as Hash>::hash::<__H>(move _5, move _7) -> bb1; // scope 1 at ui/deriving/deriving-all-codegen.rs:125:39: 125:43
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:125:39: 125:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:125:43: 125:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:125:45: 125:54>::eq(_1: &Fieldless, _2: &Fieldless) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
    let mut _4: &Fieldless;              // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
    let mut _6: &Fieldless;              // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
    let mut _7: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        _7 = _3;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        _8 = _5;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        _0 = Eq(move _7, move _8);       // scope 2 at ui/deriving/deriving-all-codegen.rs:125:45: 125:54
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:125:54: 125:54
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:125:56: 125:58>::assert_receiver_is_total_eq(_1: &Fieldless) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:56: 125:58
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:125:56: 125:58

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:125:58: 125:58
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:125:60: 125:70>::partial_cmp(_1: &Fieldless, _2: &Fieldless) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    let mut _4: &Fieldless;              // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    let mut _6: &Fieldless;              // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    let mut _7: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    let _8: &isize;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    let mut _9: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    let _10: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        _8 = &_3;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        _7 = _8;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        _10 = &_5;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        _9 = _10;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
        _0 = <isize as PartialOrd>::partial_cmp(move _7, move _9) -> bb1; // scope 2 at ui/deriving/deriving-all-codegen.rs:125:60: 125:70
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:125:60: 125:70
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:125:70: 125:70
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:125:72: 125:75>::cmp(_1: &Fieldless, _2: &Fieldless) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    let mut _4: &Fieldless;              // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    let mut _6: &Fieldless;              // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    let mut _7: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    let _8: &isize;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    let mut _9: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    let _10: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        _8 = &_3;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        _7 = _8;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        _10 = &_5;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        _9 = _10;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
        _0 = <isize as Ord>::cmp(move _7, move _9) -> bb1; // scope 2 at ui/deriving/deriving-all-codegen.rs:125:72: 125:75
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:125:72: 125:75
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:125:75: 125:75
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:134:10: 134:15>::clone(_1: &Mixed) -> Mixed {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:10: 134:15
    let mut _0: Mixed;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:134:10: 134:15
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 3 at ui/deriving/deriving-all-codegen.rs:134:10: 134:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:134:15: 134:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:134:23: 134:28>::fmt(_1: &Mixed, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _3: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _5: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let _6: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _7: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _8: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let _9: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let _10: &u32;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let mut _11: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _12: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let _13: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _14: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let mut _15: &&u32;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let _16: &&u32;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let _17: &std::option::Option<u32>;  // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let _18: &std::option::Option<i32>;  // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _19: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _20: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let _21: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    let mut _22: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let _23: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _24: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _25: &std::option::Option<u32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _26: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let _27: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _28: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _29: &&std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let _30: &&std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    scope 1 {
        debug __self_0 => _10;           // in scope 1 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    }
    scope 2 {
        debug __self_0 => _17;           // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        debug __self_1 => _18;           // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    }

    bb1: {
        _17 = &(((*_1) as S).0: std::option::Option<u32>); // scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _18 = &(((*_1) as S).1: std::option::Option<i32>); // scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _19 = &mut (*_2);                // scope 2 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
        _21 = const "S";                 // scope 2 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
        _23 = const "d1";                // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _22 = _23;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _25 = _17;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _24 = move _25 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _27 = const "d2";                // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _26 = _27;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _30 = &_18;                      // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _29 = _30;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _28 = move _29 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _19, move _20, move _22, move _24, move _26, move _28) -> bb6; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
    }

    bb3: {
        _4 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
        _6 = const "P";                  // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
        _0 = Formatter::<'_>::write_str(move _4, move _5) -> bb6; // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
        _9 = const "Q";                  // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
        _0 = Formatter::<'_>::write_str(move _7, move _8) -> bb6; // scope 0 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &(((*_1) as R).0: u32);    // scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _11 = &mut (*_2);                // scope 1 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
        _13 = const "R";                 // scope 1 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
        _16 = &_10;                      // scope 1 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _15 = _16;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _14 = move _15 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _11, move _12, move _14) -> bb6; // scope 1 at ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:23: 134:28
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:134:28: 134:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:134:30: 134:37>::default() -> Mixed {
    let mut _0: Mixed;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:134:30: 134:37

    bb0: {
        _0 = Mixed::P;                   // scope 0 at ui/deriving/deriving-all-codegen.rs:137:5: 137:6
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:134:37: 134:37
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:134:39: 134:43>::hash(_1: &Mixed, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let mut _4: &Mixed;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let _5: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let mut _6: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let _7: &isize;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let mut _8: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let mut _11: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let mut _12: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let _15: ();                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _16: &std::option::Option<u32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _17: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    let mut _18: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _19: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        let _10: &u32;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        let _13: &std::option::Option<u32>; // in scope 1 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        let _14: &std::option::Option<i32>; // in scope 1 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        scope 2 {
            debug __self_0 => _10;       // in scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        }
        scope 3 {
            debug __self_0 => _13;       // in scope 3 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
            debug __self_1 => _14;       // in scope 3 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        _7 = &_3;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        _6 = _7;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        _8 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        _5 = <isize as Hash>::hash::<__H>(move _6, move _8) -> bb1; // scope 1 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:39: 134:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant((*_1));        // scope 1 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        switchInt(move _9) -> [2: bb2, 3: bb3, otherwise: bb5]; // scope 1 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
    }

    bb2: {
        _10 = &(((*_1) as R).0: u32);    // scope 1 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _11 = _10;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _12 = &mut (*_2);                // scope 2 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        _0 = <u32 as Hash>::hash::<__H>(move _11, move _12) -> bb5; // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:139:7: 139:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = &(((*_1) as S).0: std::option::Option<u32>); // scope 1 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _14 = &(((*_1) as S).1: std::option::Option<i32>); // scope 1 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _16 = _13;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _17 = &mut (*_2);                // scope 3 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        _15 = <Option<u32> as Hash>::hash::<__H>(move _16, move _17) -> bb4; // scope 3 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u32>, &'b mut __H) {<Option<u32> as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = _14;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _19 = &mut (*_2);                // scope 3 at ui/deriving/deriving-all-codegen.rs:134:39: 134:43
        _0 = <Option<i32> as Hash>::hash::<__H>(move _18, move _19) -> bb5; // scope 3 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b mut __H) {<Option<i32> as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:134:43: 134:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:134:45: 134:54>::eq(_1: &Mixed, _2: &Mixed) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _4: &Mixed;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _6: &Mixed;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _11: (&Mixed, &Mixed);       // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _12: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _13: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _14: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _15: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _19: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let mut _20: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let mut _25: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _26: &std::option::Option<u32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _27: &std::option::Option<u32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _28: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _29: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _30: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _31: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _32: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _33: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _34: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _35: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _36: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _37: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _38: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    let mut _39: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
            let _17: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
            let _18: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
            let _21: &std::option::Option<u32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
            let _22: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
            let _23: &std::option::Option<u32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
            let _24: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
                debug __arg1_0 => _18;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                debug __self_1 => _22;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                debug __arg1_0 => _23;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                debug __arg1_1 => _24;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _8 = _3;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _9 = _5;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _7 = Eq(move _8, move _9);       // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _13 = _2;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _11 = (move _12, move _13);      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _31 = deref_copy (_11.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _16 = discriminant((*_31));      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        switchInt(move _16) -> [2: bb5, 3: bb6, otherwise: bb4]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:134:54: 134:54
    }

    bb4: {
        _10 = const true;                // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        goto -> bb13;                    // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    }

    bb5: {
        _32 = deref_copy (_11.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _14 = discriminant((*_32));      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        switchInt(move _14) -> [2: bb7, otherwise: bb4]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    }

    bb6: {
        _33 = deref_copy (_11.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        _15 = discriminant((*_33));      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        switchInt(move _15) -> [3: bb8, otherwise: bb4]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    }

    bb7: {
        _34 = deref_copy (_11.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _17 = &(((*_34) as R).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _35 = deref_copy (_11.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _18 = &(((*_35) as R).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _19 = (*_17);                    // scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _20 = (*_18);                    // scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _10 = Eq(move _19, move _20);    // scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        goto -> bb13;                    // scope 2 at ui/deriving/deriving-all-codegen.rs:134:53: 134:54
    }

    bb8: {
        _36 = deref_copy (_11.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _21 = &(((*_36) as S).0: std::option::Option<u32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _37 = deref_copy (_11.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _22 = &(((*_37) as S).1: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _38 = deref_copy (_11.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _23 = &(((*_38) as S).0: std::option::Option<u32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _39 = deref_copy (_11.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _24 = &(((*_39) as S).1: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _26 = _21;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _27 = _23;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _25 = <Option<u32> as PartialEq>::eq(move _26, move _27) -> bb11; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u32>, &'b Option<u32>) -> bool {<Option<u32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _10 = const false;               // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        goto -> bb13;                    // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    }

    bb10: {
        _29 = _22;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _30 = _24;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _28 = <Option<i32> as PartialEq>::eq(move _29, move _30) -> bb12; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb11: {
        switchInt(move _25) -> [0: bb9, otherwise: bb10]; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    }

    bb12: {
        _10 = move _28;                  // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        goto -> bb13;                    // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    }

    bb13: {
        _0 = move _10;                   // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-all-codegen.rs:134:45: 134:54
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:134:56: 134:58>::assert_receiver_is_total_eq(_1: &Mixed) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:56: 134:58
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:134:56: 134:58
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:134:58: 134:58
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:134:60: 134:70>::partial_cmp(_1: &Mixed, _2: &Mixed) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _4: &Mixed;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _6: &Mixed;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _7: (&Mixed, &Mixed);        // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _8: &Mixed;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _9: &Mixed;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _10: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _11: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _12: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _15: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let mut _16: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let mut _21: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _22: &std::option::Option<u32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _23: &std::option::Option<u32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _24: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _25: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _26: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _27: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _29: &isize;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let _30: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _31: &isize;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let _32: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _33: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _34: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _35: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _36: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _37: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _38: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _39: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _40: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    let mut _41: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
            let _13: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
            let _14: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
            let _17: &std::option::Option<u32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
            let _18: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
            let _19: &std::option::Option<u32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
            let _20: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
            scope 3 {
                debug __self_0 => _13;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
                debug __arg1_0 => _14;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
            }
            scope 4 {
                debug __self_0 => _17;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                debug __self_1 => _18;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                debug __arg1_0 => _19;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                debug __arg1_1 => _20;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                let _28: std::option::Option<std::cmp::Ordering>; // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                scope 5 {
                    debug cmp => _28;    // in scope 5 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                }
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _8 = _1;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _9 = _2;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _7 = (move _8, move _9);         // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _33 = deref_copy (_7.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _12 = discriminant((*_33));      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        switchInt(move _12) -> [2: bb2, 3: bb3, otherwise: bb1]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    }

    bb1: {
        _30 = &_3;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _29 = _30;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _32 = &_5;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _31 = _32;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _0 = <isize as PartialOrd>::partial_cmp(move _29, move _31) -> bb10; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:60: 134:70
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb2: {
        _34 = deref_copy (_7.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _10 = discriminant((*_34));      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        switchInt(move _10) -> [2: bb4, otherwise: bb1]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    }

    bb3: {
        _35 = deref_copy (_7.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        _11 = discriminant((*_35));      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
        switchInt(move _11) -> [3: bb5, otherwise: bb1]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:60: 134:70
    }

    bb4: {
        _36 = deref_copy (_7.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _13 = &(((*_36) as R).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _37 = deref_copy (_7.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _14 = &(((*_37) as R).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _15 = _13;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _16 = _14;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _0 = <u32 as PartialOrd>::partial_cmp(move _15, move _16) -> bb10; // scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:139:7: 139:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _38 = deref_copy (_7.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _17 = &(((*_38) as S).0: std::option::Option<u32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _39 = deref_copy (_7.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _18 = &(((*_39) as S).1: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _40 = deref_copy (_7.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _19 = &(((*_40) as S).0: std::option::Option<u32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _41 = deref_copy (_7.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _20 = &(((*_41) as S).1: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _22 = _17;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _23 = _19;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _21 = <Option<u32> as PartialOrd>::partial_cmp(move _22, move _23) -> bb6; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u32>, &'b Option<u32>) -> Option<std::cmp::Ordering> {<Option<u32> as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = discriminant(_21);         // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        switchInt(move _25) -> [1: bb8, otherwise: bb7]; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    }

    bb7: {
        _28 = _21;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _0 = _28;                        // scope 5 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        goto -> bb10;                    // scope 4 at ui/deriving/deriving-all-codegen.rs:140:23: 140:24
    }

    bb8: {
        _24 = discriminant(((_21 as Some).0: std::cmp::Ordering)); // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        switchInt(move _24) -> [0: bb9, otherwise: bb7]; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    }

    bb9: {
        _26 = _18;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _27 = _20;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _0 = <Option<i32> as PartialOrd>::partial_cmp(move _26, move _27) -> bb10; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> Option<std::cmp::Ordering> {<Option<i32> as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:134:70: 134:70
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:134:72: 134:75>::cmp(_1: &Mixed, _2: &Mixed) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _4: &Mixed;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _6: &Mixed;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _7: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _8: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let _9: &isize;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _10: &isize;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let _11: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _12: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _13: (&Mixed, &Mixed);       // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _14: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _15: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _17: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _18: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _21: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let mut _22: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
    let mut _27: std::cmp::Ordering;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _28: &std::option::Option<u32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _29: &std::option::Option<u32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _30: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    let mut _31: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _32: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
    let mut _35: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _36: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _37: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _38: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _39: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _40: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _41: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _42: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    let mut _43: &Mixed;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
            let _19: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
            let _20: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
            let _23: &std::option::Option<u32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
            let _24: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
            let _25: &std::option::Option<u32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
            let _26: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
            let _34: std::cmp::Ordering; // in scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
                debug __arg1_0 => _20;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
            }
            scope 4 {
                debug __self_0 => _23;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                debug __self_1 => _24;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                debug __arg1_0 => _25;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                debug __arg1_1 => _26;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                let _33: std::cmp::Ordering; // in scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                scope 5 {
                    debug cmp => _33;    // in scope 5 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                }
            }
            scope 6 {
                debug cmp => _34;        // in scope 6 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _9 = &_3;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _8 = _9;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _11 = &_5;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _10 = _11;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _7 = <isize as Ord>::cmp(move _8, move _10) -> bb1; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:72: 134:75
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = discriminant(_7);          // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    }

    bb2: {
        _34 = _7;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _0 = _34;                        // scope 6 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        goto -> bb12;                    // scope 2 at ui/deriving/deriving-all-codegen.rs:134:74: 134:75
    }

    bb3: {
        _14 = _1;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _15 = _2;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _13 = (move _14, move _15);      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _35 = deref_copy (_13.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _18 = discriminant((*_35));      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        switchInt(move _18) -> [2: bb5, 3: bb6, otherwise: bb4]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    }

    bb4: {
        _0 = const Equal;                // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:134:72: 134:75
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        goto -> bb12;                    // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    }

    bb5: {
        _36 = deref_copy (_13.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _16 = discriminant((*_36));      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        switchInt(move _16) -> [2: bb7, otherwise: bb4]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    }

    bb6: {
        _37 = deref_copy (_13.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        _17 = discriminant((*_37));      // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
        switchInt(move _17) -> [3: bb8, otherwise: bb4]; // scope 2 at ui/deriving/deriving-all-codegen.rs:134:72: 134:75
    }

    bb7: {
        _38 = deref_copy (_13.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _19 = &(((*_38) as R).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _39 = deref_copy (_13.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _20 = &(((*_39) as R).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _21 = _19;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _22 = _20;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
        _0 = <u32 as Ord>::cmp(move _21, move _22) -> bb12; // scope 3 at ui/deriving/deriving-all-codegen.rs:139:7: 139:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:139:7: 139:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb8: {
        _40 = deref_copy (_13.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _23 = &(((*_40) as S).0: std::option::Option<u32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _41 = deref_copy (_13.0: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _24 = &(((*_41) as S).1: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _42 = deref_copy (_13.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _25 = &(((*_42) as S).0: std::option::Option<u32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _43 = deref_copy (_13.1: &Mixed); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _26 = &(((*_43) as S).1: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _28 = _23;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _29 = _25;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _27 = <Option<u32> as Ord>::cmp(move _28, move _29) -> bb9; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:9: 140:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u32>, &'b Option<u32>) -> std::cmp::Ordering {<Option<u32> as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb9: {
        _30 = discriminant(_27);         // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        switchInt(move _30) -> [0: bb11, otherwise: bb10]; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
    }

    bb10: {
        _33 = _27;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        _0 = _33;                        // scope 5 at ui/deriving/deriving-all-codegen.rs:140:9: 140:24
        goto -> bb12;                    // scope 4 at ui/deriving/deriving-all-codegen.rs:140:23: 140:24
    }

    bb11: {
        _31 = _24;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _32 = _26;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
        _0 = <Option<i32> as Ord>::cmp(move _31, move _32) -> bb12; // scope 4 at ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:140:26: 140:41
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> std::cmp::Ordering {<Option<i32> as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:134:75: 134:75
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:145:10: 145:15>::clone(_1: &Fielded) -> Fielded {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:10: 145:15
    let mut _0: Fielded;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:145:10: 145:15
    let mut _2: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:10: 145:15
    let _3: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _4: u32;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _5: &u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let _6: &bool;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _8: &bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let _9: &std::option::Option<i32>;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _10: std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _11: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    }
    scope 2 {
        debug __self_0 => _6;            // in scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    }
    scope 3 {
        debug __self_0 => _9;            // in scope 3 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-all-codegen.rs:145:10: 145:15
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:145:10: 145:15
    }

    bb1: {
        _9 = &(((*_1) as Z).0: std::option::Option<i32>); // scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _11 = _9;                        // scope 3 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _10 = <Option<i32> as Clone>::clone(move _11) -> bb5; // scope 3 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // + literal: Const { ty: for<'a> fn(&'a Option<i32>) -> Option<i32> {<Option<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:145:10: 145:15
    }

    bb3: {
        _3 = &(((*_1) as X).0: u32);     // scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _5 = _3;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _4 = (*_5);                      // scope 1 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _0 = Fielded::X(move _4);        // scope 1 at ui/deriving/deriving-all-codegen.rs:145:10: 145:15
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:145:14: 145:15
    }

    bb4: {
        _6 = &(((*_1) as Y).0: bool);    // scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _8 = _6;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _7 = (*_8);                      // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _0 = Fielded::Y(move _7);        // scope 2 at ui/deriving/deriving-all-codegen.rs:145:10: 145:15
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:145:14: 145:15
    }

    bb5: {
        _0 = Fielded::Z(move _10);       // scope 3 at ui/deriving/deriving-all-codegen.rs:145:10: 145:15
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:145:14: 145:15
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:145:15: 145:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:145:17: 145:22>::fmt(_1: &Fielded, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let mut _3: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let _4: &u32;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _9: &&u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let _10: &&u32;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let _11: &bool;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let mut _13: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let _14: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _16: &&bool;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let _17: &&bool;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let _18: &std::option::Option<i32>;  // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _19: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let mut _20: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let _21: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    let mut _22: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _23: &&std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let _24: &&std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    }
    scope 3 {
        debug __self_0 => _18;           // in scope 3 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    }

    bb1: {
        _18 = &(((*_1) as Z).0: std::option::Option<i32>); // scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _19 = &mut (*_2);                // scope 3 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
        _21 = const "Z";                 // scope 3 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
        _24 = &_18;                      // scope 3 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _23 = _24;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _22 = move _23 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _19, move _20, move _22) -> bb5; // scope 3 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
    }

    bb3: {
        _4 = &(((*_1) as X).0: u32);     // scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _5 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
        _7 = const "X";                  // scope 1 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
        _10 = &_4;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _9 = _10;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb5; // scope 1 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &(((*_1) as Y).0: bool);   // scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _12 = &mut (*_2);                // scope 2 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
        _14 = const "Y";                 // scope 2 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
        _17 = &_11;                      // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _16 = _17;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _12, move _13, move _15) -> bb5; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:145:17: 145:22
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:145:22: 145:22
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:145:24: 145:28>::hash(_1: &Fielded, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let mut _4: &Fielded;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let _5: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let mut _6: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let _7: &isize;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let mut _8: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let mut _11: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _12: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let mut _14: &bool;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _15: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    let mut _17: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _18: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        let _10: &u32;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        let _13: &bool;                  // in scope 1 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        let _16: &std::option::Option<i32>; // in scope 1 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        scope 2 {
            debug __self_0 => _10;       // in scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        }
        scope 3 {
            debug __self_0 => _13;       // in scope 3 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        }
        scope 4 {
            debug __self_0 => _16;       // in scope 4 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        _7 = &_3;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        _6 = _7;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        _8 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        _5 = <isize as Hash>::hash::<__H>(move _6, move _8) -> bb1; // scope 1 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:145:24: 145:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant((*_1));        // scope 1 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        switchInt(move _9) -> [0: bb4, 1: bb5, 2: bb2, otherwise: bb3]; // scope 1 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    }

    bb2: {
        _16 = &(((*_1) as Z).0: std::option::Option<i32>); // scope 1 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _17 = _16;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _18 = &mut (*_2);                // scope 4 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        _0 = <Option<i32> as Hash>::hash::<__H>(move _17, move _18) -> bb6; // scope 4 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b mut __H) {<Option<i32> as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 1 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
    }

    bb4: {
        _10 = &(((*_1) as X).0: u32);    // scope 1 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _11 = _10;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _12 = &mut (*_2);                // scope 2 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        _0 = <u32 as Hash>::hash::<__H>(move _11, move _12) -> bb6; // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:147:7: 147:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b mut __H) {<u32 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &(((*_1) as Y).0: bool);   // scope 1 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _14 = _13;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _15 = &mut (*_2);                // scope 3 at ui/deriving/deriving-all-codegen.rs:145:24: 145:28
        _0 = <bool as Hash>::hash::<__H>(move _14, move _15) -> bb6; // scope 3 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:148:7: 148:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b mut __H) {<bool as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:145:28: 145:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:145:30: 145:39>::eq(_1: &Fielded, _2: &Fielded) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _4: &Fielded;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _6: &Fielded;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _11: (&Fielded, &Fielded);   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _12: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _13: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _14: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _15: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _17: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _20: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _21: u32;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _24: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _25: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _28: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _29: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _30: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _31: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _32: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _33: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _34: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _35: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _36: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _37: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _38: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    let mut _39: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
            let _18: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
            let _19: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
            let _22: &bool;              // in scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
            let _23: &bool;              // in scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
            let _26: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
            let _27: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
            scope 3 {
                debug __self_0 => _18;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
                debug __arg1_0 => _19;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
            }
            scope 4 {
                debug __self_0 => _22;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
                debug __arg1_0 => _23;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
            }
            scope 5 {
                debug __self_0 => _26;   // in scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                debug __arg1_0 => _27;   // in scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
            }
            scope 6 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _8 = _3;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _9 = _5;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _7 = Eq(move _8, move _9);       // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _13 = _2;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _11 = (move _12, move _13);      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _30 = deref_copy (_11.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _17 = discriminant((*_30));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        switchInt(move _17) -> [0: bb4, 1: bb6, 2: bb7, otherwise: bb12]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:145:39: 145:39
    }

    bb4: {
        _31 = deref_copy (_11.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _14 = discriminant((*_31));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        switchInt(move _14) -> [0: bb8, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    }

    bb5: {
        unreachable;                     // scope 6 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    }

    bb6: {
        _32 = deref_copy (_11.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _15 = discriminant((*_32));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        switchInt(move _15) -> [1: bb9, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    }

    bb7: {
        _33 = deref_copy (_11.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        _16 = discriminant((*_33));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        switchInt(move _16) -> [2: bb10, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    }

    bb8: {
        _34 = deref_copy (_11.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _18 = &(((*_34) as X).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _35 = deref_copy (_11.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _19 = &(((*_35) as X).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _20 = (*_18);                    // scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _21 = (*_19);                    // scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _10 = Eq(move _20, move _21);    // scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        goto -> bb11;                    // scope 2 at ui/deriving/deriving-all-codegen.rs:145:38: 145:39
    }

    bb9: {
        _36 = deref_copy (_11.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _22 = &(((*_36) as Y).0: bool);  // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _37 = deref_copy (_11.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _23 = &(((*_37) as Y).0: bool);  // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _24 = (*_22);                    // scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _25 = (*_23);                    // scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _10 = Eq(move _24, move _25);    // scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        goto -> bb11;                    // scope 2 at ui/deriving/deriving-all-codegen.rs:145:38: 145:39
    }

    bb10: {
        _38 = deref_copy (_11.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _26 = &(((*_38) as Z).0: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _39 = deref_copy (_11.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _27 = &(((*_39) as Z).0: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _28 = _26;                       // scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _29 = _27;                       // scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _10 = <Option<i32> as PartialEq>::eq(move _28, move _29) -> bb11; // scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = move _10;                   // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    }

    bb12: {
        unreachable;                     // scope 6 at ui/deriving/deriving-all-codegen.rs:145:30: 145:39
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:145:41: 145:43>::assert_receiver_is_total_eq(_1: &Fielded) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:41: 145:43
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:145:41: 145:43
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:145:43: 145:43
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:145:45: 145:55>::partial_cmp(_1: &Fielded, _2: &Fielded) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _4: &Fielded;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _6: &Fielded;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _7: (&Fielded, &Fielded);    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _8: &Fielded;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _9: &Fielded;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _10: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _11: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _12: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _13: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _16: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _17: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _20: &bool;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _21: &bool;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _24: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _25: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _26: &isize;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let _27: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _28: &isize;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let _29: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _30: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _31: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _32: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _33: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _34: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _35: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _36: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _37: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _38: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    let mut _39: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
            let _14: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
            let _15: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
            let _18: &bool;              // in scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
            let _19: &bool;              // in scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
            let _22: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
            let _23: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
            scope 3 {
                debug __self_0 => _14;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
                debug __arg1_0 => _15;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
            }
            scope 4 {
                debug __self_0 => _18;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
                debug __arg1_0 => _19;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
            }
            scope 5 {
                debug __self_0 => _22;   // in scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                debug __arg1_0 => _23;   // in scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _8 = _1;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _9 = _2;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _7 = (move _8, move _9);         // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _30 = deref_copy (_7.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _13 = discriminant((*_30));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        switchInt(move _13) -> [0: bb1, 1: bb3, 2: bb4, otherwise: bb9]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    }

    bb1: {
        _31 = deref_copy (_7.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _10 = discriminant((*_31));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        switchInt(move _10) -> [0: bb5, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    }

    bb2: {
        _27 = &_3;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _26 = _27;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _29 = &_5;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _28 = _29;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _0 = <isize as PartialOrd>::partial_cmp(move _26, move _28) -> bb8; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:145:45: 145:55
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb3: {
        _32 = deref_copy (_7.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _11 = discriminant((*_32));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        switchInt(move _11) -> [1: bb6, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    }

    bb4: {
        _33 = deref_copy (_7.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        _12 = discriminant((*_33));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
        switchInt(move _12) -> [2: bb7, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    }

    bb5: {
        _34 = deref_copy (_7.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _14 = &(((*_34) as X).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _35 = deref_copy (_7.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _15 = &(((*_35) as X).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _16 = _14;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _17 = _15;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _0 = <u32 as PartialOrd>::partial_cmp(move _16, move _17) -> bb8; // scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:147:7: 147:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> Option<std::cmp::Ordering> {<u32 as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb6: {
        _36 = deref_copy (_7.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _18 = &(((*_36) as Y).0: bool);  // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _37 = deref_copy (_7.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _19 = &(((*_37) as Y).0: bool);  // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _20 = _18;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _21 = _19;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _0 = <bool as PartialOrd>::partial_cmp(move _20, move _21) -> bb8; // scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:148:7: 148:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b bool) -> Option<std::cmp::Ordering> {<bool as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb7: {
        _38 = deref_copy (_7.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _22 = &(((*_38) as Z).0: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _39 = deref_copy (_7.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _23 = &(((*_39) as Z).0: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _24 = _22;                       // scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _25 = _23;                       // scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _0 = <Option<i32> as PartialOrd>::partial_cmp(move _24, move _25) -> bb8; // scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> Option<std::cmp::Ordering> {<Option<i32> as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:145:55: 145:55
    }

    bb9: {
        unreachable;                     // scope 2 at ui/deriving/deriving-all-codegen.rs:145:45: 145:55
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:145:57: 145:60>::cmp(_1: &Fielded, _2: &Fielded) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _4: &Fielded;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _6: &Fielded;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _7: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _8: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let _9: &isize;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _10: &isize;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let _11: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _12: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _13: (&Fielded, &Fielded);   // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _14: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _15: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _17: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _18: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _19: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _22: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _23: &u32;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
    let mut _26: &bool;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _27: &bool;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
    let mut _30: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _31: &std::option::Option<i32>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
    let mut _33: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _34: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _35: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _36: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _37: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _38: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _39: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _40: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _41: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    let mut _42: &Fielded;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
            let _20: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
            let _21: &u32;               // in scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
            let _24: &bool;              // in scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
            let _25: &bool;              // in scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
            let _28: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
            let _29: &std::option::Option<i32>; // in scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
            let _32: std::cmp::Ordering; // in scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
            scope 3 {
                debug __self_0 => _20;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
                debug __arg1_0 => _21;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
            }
            scope 4 {
                debug __self_0 => _24;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
                debug __arg1_0 => _25;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
            }
            scope 5 {
                debug __self_0 => _28;   // in scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                debug __arg1_0 => _29;   // in scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
            }
            scope 6 {
            }
            scope 7 {
                debug cmp => _32;        // in scope 7 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _9 = &_3;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _8 = _9;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _11 = &_5;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _10 = _11;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _7 = <isize as Ord>::cmp(move _8, move _10) -> bb1; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:145:57: 145:60
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = discriminant(_7);          // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    }

    bb2: {
        _32 = _7;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _0 = _32;                        // scope 7 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        goto -> bb11;                    // scope 2 at ui/deriving/deriving-all-codegen.rs:145:59: 145:60
    }

    bb3: {
        _14 = _1;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _15 = _2;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _13 = (move _14, move _15);      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _33 = deref_copy (_13.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _19 = discriminant((*_33));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        switchInt(move _19) -> [0: bb4, 1: bb6, 2: bb7, otherwise: bb12]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    }

    bb4: {
        _34 = deref_copy (_13.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _16 = discriminant((*_34));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        switchInt(move _16) -> [0: bb8, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    }

    bb5: {
        unreachable;                     // scope 6 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    }

    bb6: {
        _35 = deref_copy (_13.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _17 = discriminant((*_35));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        switchInt(move _17) -> [1: bb9, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    }

    bb7: {
        _36 = deref_copy (_13.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        _18 = discriminant((*_36));      // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
        switchInt(move _18) -> [2: bb10, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    }

    bb8: {
        _37 = deref_copy (_13.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _20 = &(((*_37) as X).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _38 = deref_copy (_13.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _21 = &(((*_38) as X).0: u32);   // scope 2 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _22 = _20;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _23 = _21;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
        _0 = <u32 as Ord>::cmp(move _22, move _23) -> bb11; // scope 3 at ui/deriving/deriving-all-codegen.rs:147:7: 147:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:147:7: 147:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u32, &'b u32) -> std::cmp::Ordering {<u32 as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb9: {
        _39 = deref_copy (_13.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _24 = &(((*_39) as Y).0: bool);  // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _40 = deref_copy (_13.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _25 = &(((*_40) as Y).0: bool);  // scope 2 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _26 = _24;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _27 = _25;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
        _0 = <bool as Ord>::cmp(move _26, move _27) -> bb11; // scope 4 at ui/deriving/deriving-all-codegen.rs:148:7: 148:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:148:7: 148:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a bool, &'b bool) -> std::cmp::Ordering {<bool as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb10: {
        _41 = deref_copy (_13.0: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _28 = &(((*_41) as Z).0: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _42 = deref_copy (_13.1: &Fielded); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _29 = &(((*_42) as Z).0: std::option::Option<i32>); // scope 2 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _30 = _28;                       // scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _31 = _29;                       // scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
        _0 = <Option<i32> as Ord>::cmp(move _30, move _31) -> bb11; // scope 5 at ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:149:7: 149:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> std::cmp::Ordering {<Option<i32> as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:145:60: 145:60
    }

    bb12: {
        unreachable;                     // scope 6 at ui/deriving/deriving-all-codegen.rs:145:57: 145:60
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:153:10: 153:15>::clone(_1: &EnumGeneric<T, U>) -> EnumGeneric<T, U> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:10: 153:15
    let mut _0: EnumGeneric<T, U>;       // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:153:10: 153:15
    let mut _2: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:10: 153:15
    let _3: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _4: T;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _5: &T;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let _6: &U;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _7: U;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _8: &U;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    }
    scope 2 {
        debug __self_0 => _6;            // in scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-all-codegen.rs:153:10: 153:15
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:153:10: 153:15
    }

    bb1: {
        _6 = &(((*_1) as Two).0: U);     // scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _8 = _6;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _7 = <U as Clone>::clone(move _8) -> bb5; // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> U {<U as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:153:10: 153:15
    }

    bb3: {
        _3 = &(((*_1) as One).0: T);     // scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _5 = _3;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _4 = <T as Clone>::clone(move _5) -> bb4; // scope 1 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = EnumGeneric::<T, U>::One(move _4); // scope 1 at ui/deriving/deriving-all-codegen.rs:153:10: 153:15
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:153:14: 153:15
    }

    bb5: {
        _0 = EnumGeneric::<T, U>::Two(move _7); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:10: 153:15
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:153:14: 153:15
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:153:15: 153:15
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:153:23: 153:28>::fmt(_1: &EnumGeneric<T, U>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    let mut _3: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    let _4: &T;                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    let mut _6: &str;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    let _7: &str;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _9: &&T;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let _10: &&T;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let _11: &U;                         // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    let mut _13: &str;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    let _14: &str;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _16: &&U;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let _17: &&U;                        // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    }

    bb1: {
        _11 = &(((*_1) as Two).0: U);    // scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _12 = &mut (*_2);                // scope 2 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
        _14 = const "Two";               // scope 2 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:153:23: 153:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
        _17 = &_11;                      // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _16 = _17;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _12, move _13, move _15) -> bb4; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:153:23: 153:28
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
    }

    bb3: {
        _4 = &(((*_1) as One).0: T);     // scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _5 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
        _7 = const "One";                // scope 1 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:153:23: 153:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
        _10 = &_4;                       // scope 1 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _9 = _10;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb4; // scope 1 at ui/deriving/deriving-all-codegen.rs:153:23: 153:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:153:23: 153:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:153:28: 153:28
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:153:30: 153:34>::hash(_1: &EnumGeneric<T, U>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let mut _4: &EnumGeneric<T, U>;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let _5: ();                          // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let mut _6: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let _7: &isize;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let mut _8: &mut __H;                // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let mut _11: &T;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _12: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    let mut _14: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _15: &mut __H;               // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
        let _10: &T;                     // in scope 1 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        let _13: &U;                     // in scope 1 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        scope 2 {
            debug __self_0 => _10;       // in scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        }
        scope 3 {
            debug __self_0 => _13;       // in scope 3 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
        _7 = &_3;                        // scope 1 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
        _6 = _7;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
        _8 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
        _5 = <isize as Hash>::hash::<__H>(move _6, move _8) -> bb1; // scope 1 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:153:30: 153:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = discriminant((*_1));        // scope 1 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
        switchInt(move _9) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 1 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    }

    bb2: {
        _13 = &(((*_1) as Two).0: U);    // scope 1 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _14 = _13;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _15 = &mut (*_2);                // scope 3 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
        _0 = <U as Hash>::hash::<__H>(move _14, move _15) -> bb5; // scope 3 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b mut __H) {<U as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        unreachable;                     // scope 1 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
    }

    bb4: {
        _10 = &(((*_1) as One).0: T);    // scope 1 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _11 = _10;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _12 = &mut (*_2);                // scope 2 at ui/deriving/deriving-all-codegen.rs:153:30: 153:34
        _0 = <T as Hash>::hash::<__H>(move _11, move _12) -> bb5; // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b mut __H) {<T as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:153:34: 153:34
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:153:36: 153:45>::eq(_1: &EnumGeneric<T, U>, _2: &EnumGeneric<T, U>) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _4: &EnumGeneric<T, U>;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _6: &EnumGeneric<T, U>;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _11: (&EnumGeneric<T, U>, &EnumGeneric<T, U>); // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _12: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _13: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _14: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _15: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _19: &T;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _20: &T;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _23: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _24: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _25: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _26: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _27: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _28: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _29: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _30: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    let mut _31: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
            let _17: &T;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
            let _18: &T;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
            let _21: &U;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
            let _22: &U;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                debug __arg1_0 => _18;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                debug __arg1_0 => _22;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _8 = _3;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _9 = _5;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _7 = Eq(move _8, move _9);       // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _13 = _2;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _11 = (move _12, move _13);      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _25 = deref_copy (_11.0: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _16 = discriminant((*_25));      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:153:45: 153:45
    }

    bb4: {
        _26 = deref_copy (_11.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _14 = discriminant((*_26));      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    }

    bb5: {
        unreachable;                     // scope 5 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    }

    bb6: {
        _27 = deref_copy (_11.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        _15 = discriminant((*_27));      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        switchInt(move _15) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    }

    bb7: {
        _28 = deref_copy (_11.0: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _17 = &(((*_28) as One).0: T);   // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _29 = deref_copy (_11.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _18 = &(((*_29) as One).0: T);   // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _19 = _17;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _20 = _18;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _10 = <T as PartialEq>::eq(move _19, move _20) -> bb9; // scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _30 = deref_copy (_11.0: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _21 = &(((*_30) as Two).0: U);   // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _31 = deref_copy (_11.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _22 = &(((*_31) as Two).0: U);   // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _23 = _21;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _24 = _22;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _10 = <U as PartialEq>::eq(move _23, move _24) -> bb9; // scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> bool {<U as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-all-codegen.rs:153:36: 153:45
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:153:47: 153:49>::assert_receiver_is_total_eq(_1: &EnumGeneric<T, U>) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:47: 153:49
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:153:47: 153:49
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:153:49: 153:49
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:153:51: 153:61>::partial_cmp(_1: &EnumGeneric<T, U>, _2: &EnumGeneric<T, U>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _4: &EnumGeneric<T, U>;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _6: &EnumGeneric<T, U>;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _7: (&EnumGeneric<T, U>, &EnumGeneric<T, U>); // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _8: &EnumGeneric<T, U>;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _9: &EnumGeneric<T, U>;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _10: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _11: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _12: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _15: &T;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _16: &T;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _19: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _20: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _21: &isize;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let _22: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _23: &isize;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let _24: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _25: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _26: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _27: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _28: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _29: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _30: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    let mut _31: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
            let _13: &T;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
            let _14: &T;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
            let _17: &U;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
            let _18: &U;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
            scope 3 {
                debug __self_0 => _13;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                debug __arg1_0 => _14;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
            }
            scope 4 {
                debug __self_0 => _17;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                debug __arg1_0 => _18;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _8 = _1;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _9 = _2;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _7 = (move _8, move _9);         // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _25 = deref_copy (_7.0: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _12 = discriminant((*_25));      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        switchInt(move _12) -> [0: bb1, 1: bb3, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    }

    bb1: {
        _26 = deref_copy (_7.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _10 = discriminant((*_26));      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        switchInt(move _10) -> [0: bb4, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    }

    bb2: {
        _22 = &_3;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _21 = _22;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _24 = &_5;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _23 = _24;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _0 = <isize as PartialOrd>::partial_cmp(move _21, move _23) -> bb6; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:153:51: 153:61
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = deref_copy (_7.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        _11 = discriminant((*_27));      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
        switchInt(move _11) -> [1: bb5, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:51: 153:61
    }

    bb4: {
        _28 = deref_copy (_7.0: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _13 = &(((*_28) as One).0: T);   // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _29 = deref_copy (_7.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _14 = &(((*_29) as One).0: T);   // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _15 = _13;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _16 = _14;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _0 = <T as PartialOrd>::partial_cmp(move _15, move _16) -> bb6; // scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> Option<std::cmp::Ordering> {<T as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = deref_copy (_7.0: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _17 = &(((*_30) as Two).0: U);   // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _31 = deref_copy (_7.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _18 = &(((*_31) as Two).0: U);   // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _19 = _17;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _20 = _18;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _0 = <U as PartialOrd>::partial_cmp(move _19, move _20) -> bb6; // scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> Option<std::cmp::Ordering> {<U as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:153:61: 153:61
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:153:63: 153:66>::cmp(_1: &EnumGeneric<T, U>, _2: &EnumGeneric<T, U>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _4: &EnumGeneric<T, U>;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _6: &EnumGeneric<T, U>;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _7: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _8: &isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let _9: &isize;                      // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _10: &isize;                 // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let _11: &isize;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _12: i8;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _13: (&EnumGeneric<T, U>, &EnumGeneric<T, U>); // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _14: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _15: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _17: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _18: isize;                  // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _21: &T;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _22: &T;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
    let mut _25: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _26: &U;                     // in scope 0 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
    let mut _28: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _29: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _30: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _31: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _32: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _33: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    let mut _34: &EnumGeneric<T, U>;     // in scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
            let _19: &T;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
            let _20: &T;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
            let _23: &U;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
            let _24: &U;                 // in scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
            let _27: std::cmp::Ordering; // in scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                debug __arg1_0 => _20;   // in scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
            }
            scope 4 {
                debug __self_0 => _23;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                debug __arg1_0 => _24;   // in scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
            }
            scope 5 {
            }
            scope 6 {
                debug cmp => _27;        // in scope 6 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _6 = _2;                         // scope 1 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _9 = &_3;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _8 = _9;                         // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _11 = &_5;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _10 = _11;                       // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _7 = <isize as Ord>::cmp(move _8, move _10) -> bb1; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:153:63: 153:66
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = discriminant(_7);          // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    }

    bb2: {
        _27 = _7;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _0 = _27;                        // scope 6 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        goto -> bb9;                     // scope 2 at ui/deriving/deriving-all-codegen.rs:153:65: 153:66
    }

    bb3: {
        _14 = _1;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _15 = _2;                        // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _13 = (move _14, move _15);      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _28 = deref_copy (_13.0: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _18 = discriminant((*_28));      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        switchInt(move _18) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    }

    bb4: {
        _29 = deref_copy (_13.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _16 = discriminant((*_29));      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        switchInt(move _16) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    }

    bb5: {
        unreachable;                     // scope 5 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    }

    bb6: {
        _30 = deref_copy (_13.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        _17 = discriminant((*_30));      // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
        switchInt(move _17) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/deriving/deriving-all-codegen.rs:153:63: 153:66
    }

    bb7: {
        _31 = deref_copy (_13.0: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _19 = &(((*_31) as One).0: T);   // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _32 = deref_copy (_13.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _20 = &(((*_32) as One).0: T);   // scope 2 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _21 = _19;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _22 = _20;                       // scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
        _0 = <T as Ord>::cmp(move _21, move _22) -> bb9; // scope 3 at ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:155:9: 155:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> std::cmp::Ordering {<T as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb8: {
        _33 = deref_copy (_13.0: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _23 = &(((*_33) as Two).0: U);   // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _34 = deref_copy (_13.1: &EnumGeneric<T, U>); // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _24 = &(((*_34) as Two).0: U);   // scope 2 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _25 = _23;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _26 = _24;                       // scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
        _0 = <U as Ord>::cmp(move _25, move _26) -> bb9; // scope 4 at ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-all-codegen.rs:156:9: 156:10
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a U, &'b U) -> std::cmp::Ordering {<U as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:153:66: 153:66
    }
}

fn <impl at ui/deriving/deriving-all-codegen.rs:160:10: 160:15>::clone(_1: &Union) -> Union {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-all-codegen.rs:160:10: 160:15
    let mut _0: Union;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:160:10: 160:15
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/deriving/deriving-all-codegen.rs:160:10: 160:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:160:15: 160:15
    }
}

fn NonCopy(_1: u32) -> NonCopy {
    let mut _0: NonCopy;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:51:1: 51:15

    bb0: {
        _0 = NonCopy(move _1);           // scope 0 at ui/deriving/deriving-all-codegen.rs:51:1: 51:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:51:1: 51:15
    }
}

// MIR FOR CTFE
fn NonCopy(_1: u32) -> NonCopy {
    let mut _0: NonCopy;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:51:1: 51:15

    bb0: {
        _0 = NonCopy(move _1);           // scope 0 at ui/deriving/deriving-all-codegen.rs:51:1: 51:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:51:1: 51:15
    }
}

fn PackedNonCopy(_1: u32) -> PackedNonCopy {
    let mut _0: PackedNonCopy;           // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:57:1: 57:21

    bb0: {
        _0 = PackedNonCopy(move _1);     // scope 0 at ui/deriving/deriving-all-codegen.rs:57:1: 57:21
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:57:1: 57:21
    }
}

// MIR FOR CTFE
fn PackedNonCopy(_1: u32) -> PackedNonCopy {
    let mut _0: PackedNonCopy;           // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:57:1: 57:21

    bb0: {
        _0 = PackedNonCopy(move _1);     // scope 0 at ui/deriving/deriving-all-codegen.rs:57:1: 57:21
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:57:1: 57:21
    }
}

fn ManualCopy(_1: u32) -> ManualCopy {
    let mut _0: ManualCopy;              // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:62:1: 62:18

    bb0: {
        _0 = ManualCopy(move _1);        // scope 0 at ui/deriving/deriving-all-codegen.rs:62:1: 62:18
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:62:1: 62:18
    }
}

// MIR FOR CTFE
fn ManualCopy(_1: u32) -> ManualCopy {
    let mut _0: ManualCopy;              // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:62:1: 62:18

    bb0: {
        _0 = ManualCopy(move _1);        // scope 0 at ui/deriving/deriving-all-codegen.rs:62:1: 62:18
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:62:1: 62:18
    }
}

fn PackedManualCopy(_1: u32) -> PackedManualCopy {
    let mut _0: PackedManualCopy;        // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:69:1: 69:24

    bb0: {
        _0 = PackedManualCopy(move _1);  // scope 0 at ui/deriving/deriving-all-codegen.rs:69:1: 69:24
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:69:1: 69:24
    }
}

// MIR FOR CTFE
fn PackedManualCopy(_1: u32) -> PackedManualCopy {
    let mut _0: PackedManualCopy;        // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:69:1: 69:24

    bb0: {
        _0 = PackedManualCopy(move _1);  // scope 0 at ui/deriving/deriving-all-codegen.rs:69:1: 69:24
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:69:1: 69:24
    }
}

fn Unsized(_1: [u32]) -> Unsized {
    let mut _0: Unsized;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:74:1: 74:15

    bb0: {
        _0 = Unsized(move _1);           // scope 0 at ui/deriving/deriving-all-codegen.rs:74:1: 74:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:1: 74:15
    }
}

// MIR FOR CTFE
fn Unsized(_1: [u32]) -> Unsized {
    let mut _0: Unsized;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:74:1: 74:15

    bb0: {
        _0 = Unsized(move _1);           // scope 0 at ui/deriving/deriving-all-codegen.rs:74:1: 74:15
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:74:1: 74:15
    }
}

fn PackedUnsizedU8(_1: [u8]) -> PackedUnsizedU8 {
    let mut _0: PackedUnsizedU8;         // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:80:1: 80:23

    bb0: {
        _0 = PackedUnsizedU8(move _1);   // scope 0 at ui/deriving/deriving-all-codegen.rs:80:1: 80:23
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:80:1: 80:23
    }
}

// MIR FOR CTFE
fn PackedUnsizedU8(_1: [u8]) -> PackedUnsizedU8 {
    let mut _0: PackedUnsizedU8;         // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:80:1: 80:23

    bb0: {
        _0 = PackedUnsizedU8(move _1);   // scope 0 at ui/deriving/deriving-all-codegen.rs:80:1: 80:23
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:80:1: 80:23
    }
}

fn PackedGeneric(_1: T, _2: <T as Trait>::A, _3: U) -> PackedGeneric<T, U> {
    let mut _0: PackedGeneric<T, U>;     // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:105:1: 105:34

    bb0: {
        _0 = PackedGeneric::<T, U>(move _1, move _2, move _3); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:1: 105:34
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:105:1: 105:34
    }
}

// MIR FOR CTFE
fn PackedGeneric(_1: T, _2: <T as Trait>::A, _3: U) -> PackedGeneric<T, U> {
    let mut _0: PackedGeneric<T, U>;     // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:105:1: 105:34

    bb0: {
        _0 = PackedGeneric::<T, U>(move _1, move _2, move _3); // scope 0 at ui/deriving/deriving-all-codegen.rs:105:1: 105:34
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:105:1: 105:34
    }
}

fn Mixed::R(_1: u32) -> Mixed {
    let mut _0: Mixed;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:139:5: 139:6

    bb0: {
        _0 = Mixed::R(move _1);          // scope 0 at ui/deriving/deriving-all-codegen.rs:139:5: 139:6
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:139:5: 139:6
    }
}

// MIR FOR CTFE
fn Mixed::R(_1: u32) -> Mixed {
    let mut _0: Mixed;                   // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:139:5: 139:6

    bb0: {
        _0 = Mixed::R(move _1);          // scope 0 at ui/deriving/deriving-all-codegen.rs:139:5: 139:6
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:139:5: 139:6
    }
}

fn Fielded::X(_1: u32) -> Fielded {
    let mut _0: Fielded;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:147:5: 147:6

    bb0: {
        _0 = Fielded::X(move _1);        // scope 0 at ui/deriving/deriving-all-codegen.rs:147:5: 147:6
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:147:5: 147:6
    }
}

// MIR FOR CTFE
fn Fielded::X(_1: u32) -> Fielded {
    let mut _0: Fielded;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:147:5: 147:6

    bb0: {
        _0 = Fielded::X(move _1);        // scope 0 at ui/deriving/deriving-all-codegen.rs:147:5: 147:6
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:147:5: 147:6
    }
}

fn Fielded::Y(_1: bool) -> Fielded {
    let mut _0: Fielded;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:148:5: 148:6

    bb0: {
        _0 = Fielded::Y(move _1);        // scope 0 at ui/deriving/deriving-all-codegen.rs:148:5: 148:6
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:148:5: 148:6
    }
}

// MIR FOR CTFE
fn Fielded::Y(_1: bool) -> Fielded {
    let mut _0: Fielded;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:148:5: 148:6

    bb0: {
        _0 = Fielded::Y(move _1);        // scope 0 at ui/deriving/deriving-all-codegen.rs:148:5: 148:6
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:148:5: 148:6
    }
}

fn Fielded::Z(_1: Option<i32>) -> Fielded {
    let mut _0: Fielded;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:149:5: 149:6

    bb0: {
        _0 = Fielded::Z(move _1);        // scope 0 at ui/deriving/deriving-all-codegen.rs:149:5: 149:6
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:149:5: 149:6
    }
}

// MIR FOR CTFE
fn Fielded::Z(_1: Option<i32>) -> Fielded {
    let mut _0: Fielded;                 // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:149:5: 149:6

    bb0: {
        _0 = Fielded::Z(move _1);        // scope 0 at ui/deriving/deriving-all-codegen.rs:149:5: 149:6
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:149:5: 149:6
    }
}

fn EnumGeneric::One(_1: T) -> EnumGeneric<T, U> {
    let mut _0: EnumGeneric<T, U>;       // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:155:5: 155:8

    bb0: {
        _0 = EnumGeneric::<T, U>::One(move _1); // scope 0 at ui/deriving/deriving-all-codegen.rs:155:5: 155:8
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:155:5: 155:8
    }
}

// MIR FOR CTFE
fn EnumGeneric::One(_1: T) -> EnumGeneric<T, U> {
    let mut _0: EnumGeneric<T, U>;       // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:155:5: 155:8

    bb0: {
        _0 = EnumGeneric::<T, U>::One(move _1); // scope 0 at ui/deriving/deriving-all-codegen.rs:155:5: 155:8
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:155:5: 155:8
    }
}

fn EnumGeneric::Two(_1: U) -> EnumGeneric<T, U> {
    let mut _0: EnumGeneric<T, U>;       // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:156:5: 156:8

    bb0: {
        _0 = EnumGeneric::<T, U>::Two(move _1); // scope 0 at ui/deriving/deriving-all-codegen.rs:156:5: 156:8
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:156:5: 156:8
    }
}

// MIR FOR CTFE
fn EnumGeneric::Two(_1: U) -> EnumGeneric<T, U> {
    let mut _0: EnumGeneric<T, U>;       // return place in scope 0 at ui/deriving/deriving-all-codegen.rs:156:5: 156:8

    bb0: {
        _0 = EnumGeneric::<T, U>::Two(move _1); // scope 0 at ui/deriving/deriving-all-codegen.rs:156:5: 156:8
        return;                          // scope 0 at ui/deriving/deriving-all-codegen.rs:156:5: 156:8
    }
}
