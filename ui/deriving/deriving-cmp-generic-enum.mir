// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19>::eq(_1: &E<T>, _2: &E<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _4: &E<T>;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _6: &E<T>;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _11: (&E<T>, &E<T>);         // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _12: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _13: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _14: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _15: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _19: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
    let mut _20: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
    let mut _25: bool;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _26: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _27: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _28: bool;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    let mut _29: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    let mut _30: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    let mut _31: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _32: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _33: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _34: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _35: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _36: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _37: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _38: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    let mut _39: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
            let _17: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
            let _18: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
            let _21: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
            let _22: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
            let _23: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
            let _24: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
                debug __arg1_0 => _18;   // in scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                debug __self_1 => _22;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                debug __arg1_0 => _23;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                debug __arg1_1 => _24;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _6 = _2;                         // scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _8 = _3;                         // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _9 = _5;                         // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _13 = _2;                        // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _11 = (move _12, move _13);      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _31 = deref_copy (_11.0: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _16 = discriminant((*_31));      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        switchInt(move _16) -> [1: bb5, 2: bb6, otherwise: bb4]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:19: 2:19
    }

    bb4: {
        _10 = const true;                // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        goto -> bb13;                    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    }

    bb5: {
        _32 = deref_copy (_11.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _14 = discriminant((*_32));      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        switchInt(move _14) -> [1: bb7, otherwise: bb4]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    }

    bb6: {
        _33 = deref_copy (_11.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        _15 = discriminant((*_33));      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        switchInt(move _15) -> [2: bb8, otherwise: bb4]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    }

    bb7: {
        _34 = deref_copy (_11.0: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _17 = &(((*_34) as E1).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _35 = deref_copy (_11.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _18 = &(((*_35) as E1).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _19 = _17;                       // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _20 = _18;                       // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _10 = <T as PartialEq>::eq(move _19, move _20) -> bb13; // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _36 = deref_copy (_11.0: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _21 = &(((*_36) as E2).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _37 = deref_copy (_11.0: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _22 = &(((*_37) as E2).1: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _38 = deref_copy (_11.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _23 = &(((*_38) as E2).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _39 = deref_copy (_11.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _24 = &(((*_39) as E2).1: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _26 = _21;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _27 = _23;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _25 = <T as PartialEq>::eq(move _26, move _27) -> bb11; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _10 = const false;               // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        goto -> bb13;                    // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    }

    bb10: {
        _29 = _22;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _30 = _24;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _28 = <T as PartialEq>::eq(move _29, move _30) -> bb12; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb11: {
        switchInt(move _25) -> [0: bb9, otherwise: bb10]; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    }

    bb12: {
        _10 = move _28;                  // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        goto -> bb13;                    // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    }

    bb13: {
        _0 = move _10;                   // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
        goto -> bb3;                     // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:10: 2:19
    }
}

fn <impl at ui/deriving/deriving-cmp-generic-enum.rs:2:21: 2:23>::assert_receiver_is_total_eq(_1: &E<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:21: 2:23
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:21: 2:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:23: 2:23
    }
}

fn <impl at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35>::partial_cmp(_1: &E<T>, _2: &E<T>) -> Option<std::cmp::Ordering> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _0: std::option::Option<std::cmp::Ordering>; // return place in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _4: &E<T>;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _6: &E<T>;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _7: (&E<T>, &E<T>);          // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _8: &E<T>;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _9: &E<T>;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _10: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _11: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _12: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _15: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
    let mut _16: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
    let mut _21: std::option::Option<std::cmp::Ordering>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _22: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _23: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _24: i8;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _25: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _26: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    let mut _27: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    let mut _29: &isize;                 // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let _30: &isize;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _31: &isize;                 // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let _32: &isize;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _33: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _34: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _35: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _36: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _37: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _38: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _39: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _40: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    let mut _41: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
            let _13: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
            let _14: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
            let _17: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
            let _18: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
            let _19: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
            let _20: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
            scope 3 {
                debug __self_0 => _13;   // in scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
                debug __arg1_0 => _14;   // in scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
            }
            scope 4 {
                debug __self_0 => _17;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                debug __self_1 => _18;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                debug __arg1_0 => _19;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                debug __arg1_1 => _20;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                let _28: std::option::Option<std::cmp::Ordering>; // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                scope 5 {
                    debug cmp => _28;    // in scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                }
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _6 = _2;                         // scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _8 = _1;                         // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _9 = _2;                         // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _7 = (move _8, move _9);         // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _33 = deref_copy (_7.0: &E<T>);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _12 = discriminant((*_33));      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        switchInt(move _12) -> [1: bb2, 2: bb3, otherwise: bb1]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    }

    bb1: {
        _30 = &_3;                       // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _29 = _30;                       // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _32 = &_5;                       // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _31 = _32;                       // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _0 = <isize as PartialOrd>::partial_cmp(move _29, move _31) -> bb10; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> Option<std::cmp::Ordering> {<isize as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb2: {
        _34 = deref_copy (_7.1: &E<T>);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _10 = discriminant((*_34));      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        switchInt(move _10) -> [1: bb4, otherwise: bb1]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    }

    bb3: {
        _35 = deref_copy (_7.1: &E<T>);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        _11 = discriminant((*_35));      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
        switchInt(move _11) -> [2: bb5, otherwise: bb1]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:25: 2:35
    }

    bb4: {
        _36 = deref_copy (_7.0: &E<T>);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _13 = &(((*_36) as E1).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _37 = deref_copy (_7.1: &E<T>);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _14 = &(((*_37) as E1).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _15 = _13;                       // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _16 = _14;                       // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _0 = <T as PartialOrd>::partial_cmp(move _15, move _16) -> bb10; // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> Option<std::cmp::Ordering> {<T as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb5: {
        _38 = deref_copy (_7.0: &E<T>);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _17 = &(((*_38) as E2).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _39 = deref_copy (_7.0: &E<T>);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _18 = &(((*_39) as E2).1: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _40 = deref_copy (_7.1: &E<T>);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _19 = &(((*_40) as E2).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _41 = deref_copy (_7.1: &E<T>);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _20 = &(((*_41) as E2).1: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _22 = _17;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _23 = _19;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _21 = <T as PartialOrd>::partial_cmp(move _22, move _23) -> bb6; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> Option<std::cmp::Ordering> {<T as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = discriminant(_21);         // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        switchInt(move _25) -> [1: bb8, otherwise: bb7]; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    }

    bb7: {
        _28 = _21;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _0 = _28;                        // scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        goto -> bb10;                    // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    }

    bb8: {
        _24 = discriminant(((_21 as Some).0: std::cmp::Ordering)); // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        switchInt(move _24) -> [0: bb9, otherwise: bb7]; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    }

    bb9: {
        _26 = _18;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _27 = _20;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _0 = <T as PartialOrd>::partial_cmp(move _26, move _27) -> bb10; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> Option<std::cmp::Ordering> {<T as PartialOrd>::partial_cmp}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:35: 2:35
    }
}

fn <impl at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40>::cmp(_1: &E<T>, _2: &E<T>) -> std::cmp::Ordering {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _0: std::cmp::Ordering;      // return place in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _4: &E<T>;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _6: &E<T>;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _7: std::cmp::Ordering;      // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _8: &isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let _9: &isize;                      // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _10: &isize;                 // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let _11: &isize;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _12: i8;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _13: (&E<T>, &E<T>);         // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _14: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _15: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _16: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _17: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _18: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _21: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
    let mut _22: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
    let mut _27: std::cmp::Ordering;     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _28: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _29: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _30: i8;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    let mut _31: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    let mut _32: &T;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
    let mut _35: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _36: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _37: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _38: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _39: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _40: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _41: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _42: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    let mut _43: &E<T>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        let _5: isize;                   // in scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
            let _19: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
            let _20: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
            let _23: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
            let _24: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
            let _25: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
            let _26: &T;                 // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
            let _34: std::cmp::Ordering; // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
                debug __arg1_0 => _20;   // in scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
            }
            scope 4 {
                debug __self_0 => _23;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                debug __self_1 => _24;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                debug __arg1_0 => _25;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                debug __arg1_1 => _26;   // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                let _33: std::cmp::Ordering; // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                scope 5 {
                    debug cmp => _33;    // in scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                }
            }
            scope 6 {
                debug cmp => _34;        // in scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _6 = _2;                         // scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _5 = discriminant((*_6));        // scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _9 = &_3;                        // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _8 = _9;                         // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _11 = &_5;                       // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _10 = _11;                       // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _7 = <isize as Ord>::cmp(move _8, move _10) -> bb1; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b isize) -> std::cmp::Ordering {<isize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = discriminant(_7);          // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    }

    bb2: {
        _34 = _7;                        // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _0 = _34;                        // scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        goto -> bb12;                    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:39: 2:40
    }

    bb3: {
        _14 = _1;                        // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _15 = _2;                        // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _13 = (move _14, move _15);      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _35 = deref_copy (_13.0: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _18 = discriminant((*_35));      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        switchInt(move _18) -> [1: bb5, 2: bb6, otherwise: bb4]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    }

    bb4: {
        _0 = const Equal;                // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
                                         // + literal: Const { ty: std::cmp::Ordering, val: Value(Scalar(0x00)) }
        goto -> bb12;                    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    }

    bb5: {
        _36 = deref_copy (_13.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _16 = discriminant((*_36));      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        switchInt(move _16) -> [1: bb7, otherwise: bb4]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    }

    bb6: {
        _37 = deref_copy (_13.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        _17 = discriminant((*_37));      // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
        switchInt(move _17) -> [2: bb8, otherwise: bb4]; // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:2:37: 2:40
    }

    bb7: {
        _38 = deref_copy (_13.0: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _19 = &(((*_38) as E1).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _39 = deref_copy (_13.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _20 = &(((*_39) as E1).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _21 = _19;                       // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _22 = _20;                       // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
        _0 = <T as Ord>::cmp(move _21, move _22) -> bb12; // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:5:8: 5:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> std::cmp::Ordering {<T as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb8: {
        _40 = deref_copy (_13.0: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _23 = &(((*_40) as E2).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _41 = deref_copy (_13.0: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _24 = &(((*_41) as E2).1: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _42 = deref_copy (_13.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _25 = &(((*_42) as E2).0: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _43 = deref_copy (_13.1: &E<T>); // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _26 = &(((*_43) as E2).1: T);    // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _28 = _23;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _29 = _25;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _27 = <T as Ord>::cmp(move _28, move _29) -> bb9; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> std::cmp::Ordering {<T as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb9: {
        _30 = discriminant(_27);         // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        switchInt(move _30) -> [0: bb11, otherwise: bb10]; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    }

    bb10: {
        _33 = _27;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        _0 = _33;                        // scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
        goto -> bb12;                    // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:8: 6:9
    }

    bb11: {
        _31 = _24;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _32 = _26;                       // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
        _0 = <T as Ord>::cmp(move _31, move _32) -> bb12; // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:6:10: 6:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> std::cmp::Ordering {<T as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:2:40: 2:40
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:9:15: 9:15
    let _1: E<i32>;                      // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:10:9: 10:11
    let mut _7: E<i32>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:17:15: 17:17
    let mut _8: E<i32>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:17:19: 17:22
    let mut _9: E<i32>;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:17:24: 17:27
    let mut _10: E<i32>;                 // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:17:29: 17:32
    let mut _11: E<i32>;                 // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:17:34: 17:37
    let mut _12: std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
    let mut _13: std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
    let mut _14: std::slice::Iter<'_, E<i32>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:29
    let mut _15: &[E<i32>];              // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:29
    let mut _16: &[E<i32>; 5];           // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:29
    let mut _18: std::option::Option<(usize, &E<i32>)>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
    let mut _19: &mut std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
    let mut _20: &mut std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
    let mut _21: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:19:5: 43:6
    let mut _24: std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
    let mut _25: std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
    let mut _26: std::slice::Iter<'_, E<i32>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:33
    let mut _27: &[E<i32>];              // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:33
    let mut _28: &[E<i32>; 5];           // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:33
    let mut _30: std::option::Option<(usize, &E<i32>)>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
    let mut _31: &mut std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
    let mut _32: &mut std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
    let mut _33: isize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:20:9: 42:10
    let mut _37: &usize;                 // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:21:23: 21:32
    let mut _38: &usize;                 // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:21:29: 21:31
    let _39: &usize;                     // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:21:29: 21:31
    let mut _41: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:23:22: 23:23
    let mut _42: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:23:27: 23:28
    let mut _44: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:24:22: 24:23
    let mut _45: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:24:26: 24:27
    let mut _47: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:25:22: 25:23
    let mut _48: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:25:27: 25:28
    let mut _50: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:26:22: 26:23
    let mut _51: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:26:26: 26:27
    let mut _53: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:27:22: 27:23
    let mut _54: usize;                  // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:27:27: 27:28
    let mut _55: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _56: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _57: bool;                       // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:30:24: 30:34
    let mut _58: &E<i32>;                // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:30:24: 30:27
    let mut _59: &E<i32>;                // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:30:31: 30:34
    let mut _60: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _63: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _68: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _69: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _70: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _71: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _72: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _73: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _75: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _76: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _77: bool;                       // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:31:24: 31:34
    let mut _78: &E<i32>;                // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:31:24: 31:27
    let mut _79: &E<i32>;                // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:31:31: 31:34
    let mut _80: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _81: bool;                       // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:31:36: 31:39
    let mut _82: bool;                   // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:31:37: 31:39
    let mut _85: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _86: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _90: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _91: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _92: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _93: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _94: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _95: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _97: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _98: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _99: bool;                       // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:34:24: 34:33
    let mut _100: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:34:24: 34:27
    let mut _101: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:34:30: 34:33
    let mut _102: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _105: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _106: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _107: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _108: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _110: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _111: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _112: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _113: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _114: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _115: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _117: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _118: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _119: bool;                      // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:35:24: 35:33
    let mut _120: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:35:24: 35:27
    let mut _121: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:35:30: 35:33
    let mut _122: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _125: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _126: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _127: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _128: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _130: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _131: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _132: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _133: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _134: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _135: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _137: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _138: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _139: bool;                      // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:37:24: 37:34
    let mut _140: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:37:24: 37:27
    let mut _141: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:37:31: 37:34
    let mut _142: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _145: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _146: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _147: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _148: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _150: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _151: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _152: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _153: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _154: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _155: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _157: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _158: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _159: bool;                      // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:38:24: 38:34
    let mut _160: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:38:24: 38:27
    let mut _161: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:38:31: 38:34
    let mut _162: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _165: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _166: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _167: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _168: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _170: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _171: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _172: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _173: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _174: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _175: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _176: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _177: (&std::cmp::Ordering, &std::cmp::Ordering); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _178: &std::cmp::Ordering;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _179: std::cmp::Ordering;        // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:41:24: 41:34
    let mut _180: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:41:24: 41:34
    let mut _181: &E<i32>;               // in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:41:31: 41:33
    let mut _182: &std::cmp::Ordering;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _185: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _186: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _187: &std::cmp::Ordering;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _188: &std::cmp::Ordering;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _190: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _191: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _192: &std::cmp::Ordering;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _193: &std::cmp::Ordering;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _194: &std::cmp::Ordering;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _195: &std::cmp::Ordering;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _196: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug e0 => _1;                  // in scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:10:9: 10:11
        let _2: E<i32>;                  // in scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:11:9: 11:12
        scope 2 {
            debug e11 => _2;             // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:11:9: 11:12
            let _3: E<i32>;              // in scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:12:9: 12:12
            scope 3 {
                debug e12 => _3;         // in scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:12:9: 12:12
                let _4: E<i32>;          // in scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:13:9: 13:12
                scope 4 {
                    debug e21 => _4;     // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:13:9: 13:12
                    let _5: E<i32>;      // in scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:14:9: 14:12
                    scope 5 {
                        debug e22 => _5; // in scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:14:9: 14:12
                        let _6: [E<i32>; 5]; // in scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:17:9: 17:11
                        scope 6 {
                            debug es => _6; // in scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:17:9: 17:11
                            let mut _17: std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
                            scope 7 {
                                debug iter => _17; // in scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
                                let _22: usize; // in scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:10: 19:11
                                let _23: &E<i32>; // in scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:13: 19:15
                                scope 8 {
                                    debug i => _22; // in scope 8 at ui/deriving/deriving-cmp-generic-enum.rs:19:10: 19:11
                                    debug e1 => _23; // in scope 8 at ui/deriving/deriving-cmp-generic-enum.rs:19:13: 19:15
                                    let mut _29: std::iter::Enumerate<std::slice::Iter<'_, E<i32>>>; // in scope 8 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
                                    scope 9 {
                                        debug iter => _29; // in scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
                                        let _34: usize; // in scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:14: 20:15
                                        let _35: &E<i32>; // in scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:17: 20:19
                                        scope 10 {
                                            debug j => _34; // in scope 10 at ui/deriving/deriving-cmp-generic-enum.rs:20:14: 20:15
                                            debug e2 => _35; // in scope 10 at ui/deriving/deriving-cmp-generic-enum.rs:20:17: 20:19
                                            let _36: std::cmp::Ordering; // in scope 10 at ui/deriving/deriving-cmp-generic-enum.rs:21:17: 21:20
                                            scope 11 {
                                                debug ord => _36; // in scope 11 at ui/deriving/deriving-cmp-generic-enum.rs:21:17: 21:20
                                                let _40: bool; // in scope 11 at ui/deriving/deriving-cmp-generic-enum.rs:23:17: 23:19
                                                scope 12 {
                                                    debug eq => _40; // in scope 12 at ui/deriving/deriving-cmp-generic-enum.rs:23:17: 23:19
                                                    let _43: bool; // in scope 12 at ui/deriving/deriving-cmp-generic-enum.rs:24:17: 24:19
                                                    scope 13 {
                                                        debug lt => _43; // in scope 13 at ui/deriving/deriving-cmp-generic-enum.rs:24:17: 24:19
                                                        let _46: bool; // in scope 13 at ui/deriving/deriving-cmp-generic-enum.rs:25:17: 25:19
                                                        scope 14 {
                                                            debug le => _46; // in scope 14 at ui/deriving/deriving-cmp-generic-enum.rs:25:17: 25:19
                                                            let _49: bool; // in scope 14 at ui/deriving/deriving-cmp-generic-enum.rs:26:17: 26:19
                                                            scope 15 {
                                                                debug gt => _49; // in scope 15 at ui/deriving/deriving-cmp-generic-enum.rs:26:17: 26:19
                                                                let _52: bool; // in scope 15 at ui/deriving/deriving-cmp-generic-enum.rs:27:17: 27:19
                                                                scope 16 {
                                                                    debug ge => _52; // in scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:27:17: 27:19
                                                                    let _61: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    let _62: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _83: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    let _84: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _103: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    let _104: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _123: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    let _124: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _143: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    let _144: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _163: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    let _164: &bool; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _183: &std::cmp::Ordering; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    let _184: &std::cmp::Ordering; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    scope 17 {
                                                                        debug left_val => _61; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        debug right_val => _62; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let _67: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        scope 18 {
                                                                            debug kind => _67; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        }
                                                                    }
                                                                    scope 19 {
                                                                        debug left_val => _83; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        debug right_val => _84; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let _89: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        scope 20 {
                                                                            debug kind => _89; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        }
                                                                    }
                                                                    scope 21 {
                                                                        debug left_val => _103; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        debug right_val => _104; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let _109: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        scope 22 {
                                                                            debug kind => _109; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        }
                                                                    }
                                                                    scope 23 {
                                                                        debug left_val => _123; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        debug right_val => _124; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let _129: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        scope 24 {
                                                                            debug kind => _129; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        }
                                                                    }
                                                                    scope 25 {
                                                                        debug left_val => _143; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        debug right_val => _144; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let _149: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        scope 26 {
                                                                            debug kind => _149; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        }
                                                                    }
                                                                    scope 27 {
                                                                        debug left_val => _163; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        debug right_val => _164; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let _169: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        scope 28 {
                                                                            debug kind => _169; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        }
                                                                    }
                                                                    scope 29 {
                                                                        debug left_val => _183; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        debug right_val => _184; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let _189: core::panicking::AssertKind; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        scope 30 {
                                                                            debug kind => _189; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = E::<i32>::E0;               // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:10:14: 10:19
        _2 = E::<i32>::E1(const 1_i32);  // scope 1 at ui/deriving/deriving-cmp-generic-enum.rs:11:15: 11:23
        _3 = E::<i32>::E1(const 2_i32);  // scope 2 at ui/deriving/deriving-cmp-generic-enum.rs:12:15: 12:23
        _4 = E::<i32>::E2(const 1_i32, const 1_i32); // scope 3 at ui/deriving/deriving-cmp-generic-enum.rs:13:15: 13:26
        _5 = E::<i32>::E2(const 1_i32, const 2_i32); // scope 4 at ui/deriving/deriving-cmp-generic-enum.rs:14:15: 14:26
        _7 = move _1;                    // scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:17:15: 17:17
        _8 = move _2;                    // scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:17:19: 17:22
        _9 = move _3;                    // scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:17:24: 17:27
        _10 = move _4;                   // scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:17:29: 17:32
        _11 = move _5;                   // scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:17:34: 17:37
        _6 = [move _7, move _8, move _9, move _10, move _11]; // scope 5 at ui/deriving/deriving-cmp-generic-enum.rs:17:14: 17:38
        _16 = &_6;                       // scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:29
        _15 = move _16 as &[E<i32>] (Pointer(Unsize)); // scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:29
        _14 = core::slice::<impl [E<i32>]>::iter(move _15) -> bb1; // scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:19:23: 19:27
                                         // + literal: Const { ty: for<'a> fn(&'a [E<i32>]) -> std::slice::Iter<'a, E<i32>> {core::slice::<impl [E<i32>]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _13 = <std::slice::Iter<'_, E<i32>> as Iterator>::enumerate(move _14) -> bb2; // scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:19:30: 19:39
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, E<i32>>) -> Enumerate<std::slice::Iter<'_, E<i32>>> {<std::slice::Iter<'_, E<i32>> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = <Enumerate<std::slice::Iter<'_, E<i32>>> as IntoIterator>::into_iter(move _13) -> bb3; // scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
                                         // + literal: Const { ty: fn(Enumerate<std::slice::Iter<'_, E<i32>>>) -> <Enumerate<std::slice::Iter<'_, E<i32>>> as IntoIterator>::IntoIter {<Enumerate<std::slice::Iter<'_, E<i32>>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _17 = move _12;                  // scope 6 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
        goto -> bb4;                     // scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:5: 43:6
    }

    bb4: {
        _20 = &mut _17;                  // scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
        _19 = &mut (*_20);               // scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
        _18 = <Enumerate<std::slice::Iter<'_, E<i32>>> as Iterator>::next(move _19) -> bb5; // scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::slice::Iter<'_, E<i32>>>) -> Option<<Enumerate<std::slice::Iter<'_, E<i32>>> as Iterator>::Item> {<Enumerate<std::slice::Iter<'_, E<i32>>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _21 = discriminant(_18);         // scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
        switchInt(move _21) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
    }

    bb6: {
        _22 = (((_18 as Some).0: (usize, &E<i32>)).0: usize); // scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:10: 19:11
        _23 = (((_18 as Some).0: (usize, &E<i32>)).1: &E<i32>); // scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:13: 19:15
        _28 = &_6;                       // scope 8 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:33
        _27 = move _28 as &[E<i32>] (Pointer(Unsize)); // scope 8 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:33
        _26 = core::slice::<impl [E<i32>]>::iter(move _27) -> bb9; // scope 8 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:33
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:20:27: 20:31
                                         // + literal: Const { ty: for<'a> fn(&'a [E<i32>]) -> std::slice::Iter<'a, E<i32>> {core::slice::<impl [E<i32>]>::iter}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 7 at ui/deriving/deriving-cmp-generic-enum.rs:19:20: 19:41
    }

    bb8: {
        return;                          // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:44:2: 44:2
    }

    bb9: {
        _25 = <std::slice::Iter<'_, E<i32>> as Iterator>::enumerate(move _26) -> bb10; // scope 8 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:20:34: 20:43
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, E<i32>>) -> Enumerate<std::slice::Iter<'_, E<i32>>> {<std::slice::Iter<'_, E<i32>> as Iterator>::enumerate}, val: Value(<ZST>) }
    }

    bb10: {
        _24 = <Enumerate<std::slice::Iter<'_, E<i32>>> as IntoIterator>::into_iter(move _25) -> bb11; // scope 8 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
                                         // + literal: Const { ty: fn(Enumerate<std::slice::Iter<'_, E<i32>>>) -> <Enumerate<std::slice::Iter<'_, E<i32>>> as IntoIterator>::IntoIter {<Enumerate<std::slice::Iter<'_, E<i32>>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb11: {
        _29 = move _24;                  // scope 8 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
        goto -> bb12;                    // scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:9: 42:10
    }

    bb12: {
        _32 = &mut _29;                  // scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
        _31 = &mut (*_32);               // scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
        _30 = <Enumerate<std::slice::Iter<'_, E<i32>>> as Iterator>::next(move _31) -> bb13; // scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
                                         // + literal: Const { ty: for<'a> fn(&'a mut Enumerate<std::slice::Iter<'_, E<i32>>>) -> Option<<Enumerate<std::slice::Iter<'_, E<i32>>> as Iterator>::Item> {<Enumerate<std::slice::Iter<'_, E<i32>>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb13: {
        _33 = discriminant(_30);         // scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
        switchInt(move _33) -> [0: bb4, 1: bb14, otherwise: bb15]; // scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
    }

    bb14: {
        _34 = (((_30 as Some).0: (usize, &E<i32>)).0: usize); // scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:14: 20:15
        _35 = (((_30 as Some).0: (usize, &E<i32>)).1: &E<i32>); // scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:17: 20:19
        _37 = &_22;                      // scope 10 at ui/deriving/deriving-cmp-generic-enum.rs:21:23: 21:32
        _39 = &_34;                      // scope 10 at ui/deriving/deriving-cmp-generic-enum.rs:21:29: 21:31
        _38 = _39;                       // scope 10 at ui/deriving/deriving-cmp-generic-enum.rs:21:29: 21:31
        _36 = <usize as Ord>::cmp(move _37, move _38) -> bb16; // scope 10 at ui/deriving/deriving-cmp-generic-enum.rs:21:23: 21:32
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:21:25: 21:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b usize) -> std::cmp::Ordering {<usize as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb15: {
        unreachable;                     // scope 9 at ui/deriving/deriving-cmp-generic-enum.rs:20:24: 20:45
    }

    bb16: {
        _41 = _22;                       // scope 11 at ui/deriving/deriving-cmp-generic-enum.rs:23:22: 23:23
        _42 = _34;                       // scope 11 at ui/deriving/deriving-cmp-generic-enum.rs:23:27: 23:28
        _40 = Eq(move _41, move _42);    // scope 11 at ui/deriving/deriving-cmp-generic-enum.rs:23:22: 23:28
        _44 = _22;                       // scope 12 at ui/deriving/deriving-cmp-generic-enum.rs:24:22: 24:23
        _45 = _34;                       // scope 12 at ui/deriving/deriving-cmp-generic-enum.rs:24:26: 24:27
        _43 = Lt(move _44, move _45);    // scope 12 at ui/deriving/deriving-cmp-generic-enum.rs:24:22: 24:27
        _47 = _22;                       // scope 13 at ui/deriving/deriving-cmp-generic-enum.rs:25:22: 25:23
        _48 = _34;                       // scope 13 at ui/deriving/deriving-cmp-generic-enum.rs:25:27: 25:28
        _46 = Le(move _47, move _48);    // scope 13 at ui/deriving/deriving-cmp-generic-enum.rs:25:22: 25:28
        _50 = _22;                       // scope 14 at ui/deriving/deriving-cmp-generic-enum.rs:26:22: 26:23
        _51 = _34;                       // scope 14 at ui/deriving/deriving-cmp-generic-enum.rs:26:26: 26:27
        _49 = Gt(move _50, move _51);    // scope 14 at ui/deriving/deriving-cmp-generic-enum.rs:26:22: 26:27
        _53 = _22;                       // scope 15 at ui/deriving/deriving-cmp-generic-enum.rs:27:22: 27:23
        _54 = _34;                       // scope 15 at ui/deriving/deriving-cmp-generic-enum.rs:27:27: 27:28
        _52 = Ge(move _53, move _54);    // scope 15 at ui/deriving/deriving-cmp-generic-enum.rs:27:22: 27:28
        _58 = _23;                       // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:30:24: 30:27
        _59 = _35;                       // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:30:31: 30:34
        _57 = <E<i32> as PartialEq>::eq(move _58, move _59) -> bb17; // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:30:24: 30:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:30:24: 30:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E<i32>, &'b E<i32>) -> bool {<E<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb17: {
        _56 = &_57;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _60 = &_40;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _55 = (move _56, move _60);      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _61 = (_55.0: &bool);            // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _62 = (_55.1: &bool);            // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _65 = (*_61);                    // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _66 = (*_62);                    // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _64 = Eq(move _65, move _66);    // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _63 = Not(move _64);             // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _63) -> [0: bb19, otherwise: bb18]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _67 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = _61;                       // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _71;                       // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _73 = _62;                       // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = _73;                       // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _68 = core::panicking::assert_failed::<bool, bool>(move _69, move _70, move _72, move _74); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb19: {
        _78 = _23;                       // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:31:24: 31:27
        _79 = _35;                       // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:31:31: 31:34
        _77 = <E<i32> as PartialEq>::ne(move _78, move _79) -> bb20; // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:31:24: 31:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:31:24: 31:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E<i32>, &'b E<i32>) -> bool {<E<i32> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb20: {
        _76 = &_77;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _82 = _40;                       // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:31:37: 31:39
        _81 = Not(move _82);             // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:31:36: 31:39
        _80 = &_81;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _75 = (move _76, move _80);      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _83 = (_75.0: &bool);            // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _84 = (_75.1: &bool);            // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _87 = (*_83);                    // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _88 = (*_84);                    // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _86 = Eq(move _87, move _88);    // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _85 = Not(move _86);             // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _85) -> [0: bb22, otherwise: bb21]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb21: {
        _89 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _91 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = _83;                       // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _92 = _93;                       // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _84;                       // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _94 = _95;                       // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _90 = core::panicking::assert_failed::<bool, bool>(move _91, move _92, move _94, move _96); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb22: {
        _100 = _23;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:34:24: 34:27
        _101 = _35;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:34:30: 34:33
        _99 = <E<i32> as PartialOrd>::lt(move _100, move _101) -> bb23; // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:34:24: 34:33
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:34:24: 34:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E<i32>, &'b E<i32>) -> bool {<E<i32> as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb23: {
        _98 = &_99;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _102 = &_43;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _97 = (move _98, move _102);     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _103 = (_97.0: &bool);           // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _104 = (_97.1: &bool);           // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _107 = (*_103);                  // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _108 = (*_104);                  // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _106 = Eq(move _107, move _108); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _105 = Not(move _106);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _105) -> [0: bb25, otherwise: bb24]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _109 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _111 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _113 = _103;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _112 = _113;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _115 = _104;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _114 = _115;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _116 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _110 = core::panicking::assert_failed::<bool, bool>(move _111, move _112, move _114, move _116); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb25: {
        _120 = _23;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:35:24: 35:27
        _121 = _35;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:35:30: 35:33
        _119 = <E<i32> as PartialOrd>::gt(move _120, move _121) -> bb26; // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:35:24: 35:33
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:35:24: 35:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E<i32>, &'b E<i32>) -> bool {<E<i32> as PartialOrd>::gt}, val: Value(<ZST>) }
    }

    bb26: {
        _118 = &_119;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _122 = &_49;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _117 = (move _118, move _122);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _123 = (_117.0: &bool);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _124 = (_117.1: &bool);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _127 = (*_123);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _128 = (*_124);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _126 = Eq(move _127, move _128); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _125 = Not(move _126);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _125) -> [0: bb28, otherwise: bb27]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _129 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _131 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _133 = _123;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _132 = _133;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _135 = _124;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _134 = _135;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _136 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _130 = core::panicking::assert_failed::<bool, bool>(move _131, move _132, move _134, move _136); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb28: {
        _140 = _23;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:37:24: 37:27
        _141 = _35;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:37:31: 37:34
        _139 = <E<i32> as PartialOrd>::le(move _140, move _141) -> bb29; // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:37:24: 37:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:37:24: 37:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E<i32>, &'b E<i32>) -> bool {<E<i32> as PartialOrd>::le}, val: Value(<ZST>) }
    }

    bb29: {
        _138 = &_139;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _142 = &_46;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _137 = (move _138, move _142);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _143 = (_137.0: &bool);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _144 = (_137.1: &bool);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _147 = (*_143);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _148 = (*_144);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _146 = Eq(move _147, move _148); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _145 = Not(move _146);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _145) -> [0: bb31, otherwise: bb30]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb30: {
        _149 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _151 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _153 = _143;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _152 = _153;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _155 = _144;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _154 = _155;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _156 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _150 = core::panicking::assert_failed::<bool, bool>(move _151, move _152, move _154, move _156); // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb31: {
        _160 = _23;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:38:24: 38:27
        _161 = _35;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:38:31: 38:34
        _159 = <E<i32> as PartialOrd>::ge(move _160, move _161) -> bb32; // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:38:24: 38:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:38:24: 38:34
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E<i32>, &'b E<i32>) -> bool {<E<i32> as PartialOrd>::ge}, val: Value(<ZST>) }
    }

    bb32: {
        _158 = &_159;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _162 = &_52;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _157 = (move _158, move _162);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _163 = (_157.0: &bool);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _164 = (_157.1: &bool);          // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _167 = (*_163);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _168 = (*_164);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _166 = Eq(move _167, move _168); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _165 = Not(move _166);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _165) -> [0: bb34, otherwise: bb33]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb33: {
        _169 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _171 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _173 = _163;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _172 = _173;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _175 = _164;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _174 = _175;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _176 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _170 = core::panicking::assert_failed::<bool, bool>(move _171, move _172, move _174, move _176); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb34: {
        _180 = _23;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:41:24: 41:34
        _181 = _35;                      // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:41:31: 41:33
        _179 = <E<i32> as Ord>::cmp(move _180, move _181) -> bb35; // scope 16 at ui/deriving/deriving-cmp-generic-enum.rs:41:24: 41:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-cmp-generic-enum.rs:41:27: 41:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a E<i32>, &'b E<i32>) -> std::cmp::Ordering {<E<i32> as Ord>::cmp}, val: Value(<ZST>) }
    }

    bb35: {
        _178 = &_179;                    // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _182 = &_36;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _177 = (move _178, move _182);   // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _183 = (_177.0: &std::cmp::Ordering); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _184 = (_177.1: &std::cmp::Ordering); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _187 = _183;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _188 = _184;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _186 = <std::cmp::Ordering as PartialEq>::eq(move _187, move _188) -> bb36; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a std::cmp::Ordering, &'b std::cmp::Ordering) -> bool {<std::cmp::Ordering as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb36: {
        _185 = Not(move _186);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _185) -> [0: bb12, otherwise: bb37]; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb37: {
        _189 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _191 = const core::panicking::AssertKind::Eq; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _193 = _183;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _192 = _193;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _195 = _184;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _194 = _195;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _196 = Option::<Arguments<'_>>::None; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _190 = core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>(move _191, move _192, move _194, move _196); // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a std::cmp::Ordering, &'b std::cmp::Ordering, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<std::cmp::Ordering, std::cmp::Ordering>}, val: Value(<ZST>) }
    }
}

fn E::E1(_1: T) -> E<T> {
    let mut _0: E<T>;                    // return place in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:5: 5:7

    bb0: {
        _0 = E::<T>::E1(move _1);        // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:5: 5:7
        return;                          // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:5: 5:7
    }
}

// MIR FOR CTFE
fn E::E1(_1: T) -> E<T> {
    let mut _0: E<T>;                    // return place in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:5: 5:7

    bb0: {
        _0 = E::<T>::E1(move _1);        // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:5: 5:7
        return;                          // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:5:5: 5:7
    }
}

fn E::E2(_1: T, _2: T) -> E<T> {
    let mut _0: E<T>;                    // return place in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:5: 6:7

    bb0: {
        _0 = E::<T>::E2(move _1, move _2); // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:5: 6:7
        return;                          // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:5: 6:7
    }
}

// MIR FOR CTFE
fn E::E2(_1: T, _2: T) -> E<T> {
    let mut _0: E<T>;                    // return place in scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:5: 6:7

    bb0: {
        _0 = E::<T>::E2(move _1, move _2); // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:5: 6:7
        return;                          // scope 0 at ui/deriving/deriving-cmp-generic-enum.rs:6:5: 6:7
    }
}
