// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15>::clone(_1: &E<T, U>) -> E<T, U> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
    let mut _0: E<T, U>;                 // return place in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
    let mut _2: isize;                   // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
    let _3: &T;                          // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:7: 7:8
    let mut _4: T;                       // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:7: 7:8
    let mut _5: &T;                      // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:7: 7:8
    let _6: &T;                          // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:7: 8:8
    let _7: &U;                          // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:9: 8:10
    let mut _8: T;                       // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:7: 8:8
    let mut _9: &T;                      // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:7: 8:8
    let mut _10: U;                      // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:9: 8:10
    let mut _11: &U;                     // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:9: 8:10
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/deriving/deriving-clone-generic-enum.rs:7:7: 7:8
    }
    scope 2 {
        debug __self_0 => _6;            // in scope 2 at ui/deriving/deriving-clone-generic-enum.rs:8:7: 8:8
        debug __self_1 => _7;            // in scope 2 at ui/deriving/deriving-clone-generic-enum.rs:8:9: 8:10
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
    }

    bb1: {
        _0 = E::<T, U>::C;               // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
        goto -> bb8;                     // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
    }

    bb3: {
        _3 = &(((*_1) as A).0: T);       // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:7: 7:8
        _5 = _3;                         // scope 1 at ui/deriving/deriving-clone-generic-enum.rs:7:7: 7:8
        _4 = <T as Clone>::clone(move _5) -> bb4; // scope 1 at ui/deriving/deriving-clone-generic-enum.rs:7:7: 7:8
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-enum.rs:7:7: 7:8
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = E::<T, U>::A(move _4);      // scope 1 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
        goto -> bb8;                     // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:14: 5:15
    }

    bb5: {
        _6 = &(((*_1) as B).0: T);       // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:7: 8:8
        _7 = &(((*_1) as B).1: U);       // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:9: 8:10
        _9 = _6;                         // scope 2 at ui/deriving/deriving-clone-generic-enum.rs:8:7: 8:8
        _8 = <T as Clone>::clone(move _9) -> bb6; // scope 2 at ui/deriving/deriving-clone-generic-enum.rs:8:7: 8:8
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-enum.rs:8:7: 8:8
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb6: {
        _11 = _7;                        // scope 2 at ui/deriving/deriving-clone-generic-enum.rs:8:9: 8:10
        _10 = <U as Clone>::clone(move _11) -> [return: bb7, unwind: bb9]; // scope 2 at ui/deriving/deriving-clone-generic-enum.rs:8:9: 8:10
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-enum.rs:8:9: 8:10
                                         // + literal: Const { ty: for<'a> fn(&'a U) -> U {<U as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = E::<T, U>::B(move _8, move _10); // scope 2 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
        goto -> bb8;                     // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:14: 5:15
    }

    bb8: {
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:15: 5:15
    }

    bb9 (cleanup): {
        drop(_8) -> bb10;                // scope 2 at ui/deriving/deriving-clone-generic-enum.rs:5:14: 5:15
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:5:10: 5:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:12:15: 12:15
    let mut _1: E<isize, isize>;         // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
    let mut _2: &E<isize, isize>;        // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
    let mut _3: &E<isize, isize>;        // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
    scope 1 {
    }

    bb0: {
        _3 = const _;                    // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
                                         // + literal: Const { ty: &E<isize, isize>, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
        _1 = <E<isize, isize> as Clone>::clone(move _2) -> bb1; // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-generic-enum.rs:13:37: 13:42
                                         // + literal: Const { ty: for<'a> fn(&'a E<isize, isize>) -> E<isize, isize> {<E<isize, isize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:14:2: 14:2
    }
}

promoted[0] in main: &E<isize, isize> = {
    let mut _0: &E<isize, isize>;        // return place in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
    let mut _1: E<isize, isize>;         // in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:36

    bb0: {
        _1 = E::<isize, isize>::A(const 1_isize); // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:36
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:13:13: 13:44
    }
}

fn E::A(_1: T) -> E<T, U> {
    let mut _0: E<T, U>;                 // return place in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:5: 7:6

    bb0: {
        _0 = E::<T, U>::A(move _1);      // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:5: 7:6
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:5: 7:6
    }
}

// MIR FOR CTFE
fn E::A(_1: T) -> E<T, U> {
    let mut _0: E<T, U>;                 // return place in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:5: 7:6

    bb0: {
        _0 = E::<T, U>::A(move _1);      // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:5: 7:6
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:7:5: 7:6
    }
}

fn E::B(_1: T, _2: U) -> E<T, U> {
    let mut _0: E<T, U>;                 // return place in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:5: 8:6

    bb0: {
        _0 = E::<T, U>::B(move _1, move _2); // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:5: 8:6
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:5: 8:6
    }
}

// MIR FOR CTFE
fn E::B(_1: T, _2: U) -> E<T, U> {
    let mut _0: E<T, U>;                 // return place in scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:5: 8:6

    bb0: {
        _0 = E::<T, U>::B(move _1, move _2); // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:5: 8:6
        return;                          // scope 0 at ui/deriving/deriving-clone-generic-enum.rs:8:5: 8:6
    }
}
