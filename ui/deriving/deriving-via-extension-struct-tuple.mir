// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-via-extension-struct-tuple.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:10: 2:19
    debug other => _2;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:10: 2:19
    let mut _0: bool;                    // return place in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:10: 2:19
    let mut _3: bool;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    let mut _4: bool;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
    let mut _5: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
    let mut _6: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
    let mut _7: bool;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    let mut _8: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    let mut _9: isize;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    let mut _10: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
    let mut _11: &std::string::String;   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
    let mut _12: &std::string::String;   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32

    bb0: {
        _5 = ((*_1).0: isize);           // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
        _6 = ((*_2).0: isize);           // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
        _4 = Eq(move _5, move _6);       // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
        switchInt(move _4) -> [0: bb4, otherwise: bb5]; // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
    }

    bb2: {
        _11 = &((*_1).2: std::string::String); // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
        _12 = &((*_2).2: std::string::String); // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
        _10 = <String as PartialEq>::eq(move _11, move _12) -> bb7; // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:19: 2:19
    }

    bb4: {
        _3 = const false;                // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    }

    bb5: {
        _8 = ((*_1).1: isize);           // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
        _9 = ((*_2).1: isize);           // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
        _7 = Eq(move _8, move _9);       // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
        _3 = move _7;                    // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
        goto -> bb6;                     // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    }

    bb6: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
    }

    bb7: {
        _0 = move _10;                   // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
        goto -> bb3;                     // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
    }
}

fn <impl at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
    debug f => _2;                       // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
    let mut _4: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
    let _5: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
    let mut _7: &isize;                  // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
    let _8: &isize;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    let mut _10: &isize;                 // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    let _11: &isize;                     // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
    let mut _12: &dyn std::fmt::Debug;   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
    let mut _13: &&std::string::String;  // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
    let _14: &&std::string::String;      // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
    let _15: &std::string::String;       // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
        _5 = const "Foo";                // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
        _8 = &((*_1).0: isize);          // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
        _7 = _8;                         // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:12: 3:17
        _11 = &((*_1).1: isize);         // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
        _10 = _11;                       // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:19: 3:24
        _15 = &((*_1).2: std::string::String); // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
        _14 = &_15;                      // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
        _13 = _14;                       // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
        _12 = move _13 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:26: 3:32
        _0 = Formatter::<'_>::debug_tuple_field3_finish(move _3, move _4, move _6, move _9, move _12) -> bb1; // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:2:21: 2:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd), &'e (dyn Debug + 'e)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field3_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:2:26: 2:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:5:15: 5:15
    let _1: Foo;                         // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:6:7: 6:9
    let mut _2: std::string::String;     // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:6:22: 6:39
    let mut _3: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:6:22: 6:39
    let _4: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:6:22: 6:27
    let mut _6: std::string::String;     // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:7:22: 7:39
    let mut _7: &str;                    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:7:22: 7:39
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:7:22: 7:27
    let mut _10: std::string::String;    // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:8:21: 8:38
    let mut _11: &str;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:8:21: 8:38
    let _12: &str;                       // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:8:21: 8:26
    let mut _13: (&Foo, &Foo);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: (&Foo, &Foo);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _31: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _32: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _47: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:3: 12:22
    let mut _48: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:11: 12:21
    let mut _49: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:12: 12:21
    let mut _50: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:13: 12:15
    let mut _51: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:19: 12:20
    let mut _52: !;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:3: 12:22
    let mut _53: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:3: 14:19
    let mut _54: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:11: 14:18
    let mut _55: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:11: 14:13
    let mut _56: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:17: 14:18
    let mut _57: !;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:3: 14:19
    let mut _58: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:3: 15:23
    let mut _59: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:11: 15:22
    let mut _60: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:12: 15:22
    let mut _61: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:13: 15:15
    let mut _62: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:19: 15:21
    let mut _63: !;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:3: 15:23
    let mut _64: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:3: 16:23
    let mut _65: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:11: 16:22
    let mut _66: bool;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:12: 16:22
    let mut _67: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:13: 16:15
    let mut _68: &Foo;                   // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:19: 16:21
    let mut _69: !;                      // in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:3: 16:23
    scope 1 {
        debug a1 => _1;                  // in scope 1 at ui/deriving/deriving-via-extension-struct-tuple.rs:6:7: 6:9
        let _5: Foo;                     // in scope 1 at ui/deriving/deriving-via-extension-struct-tuple.rs:7:7: 7:9
        scope 2 {
            debug a2 => _5;              // in scope 2 at ui/deriving/deriving-via-extension-struct-tuple.rs:7:7: 7:9
            let _9: Foo;                 // in scope 2 at ui/deriving/deriving-via-extension-struct-tuple.rs:8:7: 8:8
            scope 3 {
                debug b => _9;           // in scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:8:7: 8:8
                let _16: &Foo;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _17: &Foo;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _33: &Foo;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _34: &Foo;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _16; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _17; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _22: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _22; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _33; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _34; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _39: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _39; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _4 = const "abc";                // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:6:22: 6:27
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:6:22: 6:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:6:22: 6:39
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:6:22: 6:39
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:6:28: 6:37
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Foo(const 5_isize, const 6_isize, move _2); // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:6:12: 6:40
        _8 = const "abc";                // scope 1 at ui/deriving/deriving-via-extension-struct-tuple.rs:7:22: 7:27
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:7:22: 7:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/deriving/deriving-via-extension-struct-tuple.rs:7:22: 7:39
        _6 = <str as ToString>::to_string(move _7) -> [return: bb2, unwind: bb27]; // scope 1 at ui/deriving/deriving-via-extension-struct-tuple.rs:7:22: 7:39
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:7:28: 7:37
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Foo(const 5_isize, const 6_isize, move _6); // scope 1 at ui/deriving/deriving-via-extension-struct-tuple.rs:7:12: 7:40
        _12 = const "def";               // scope 2 at ui/deriving/deriving-via-extension-struct-tuple.rs:8:21: 8:26
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:8:21: 8:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 2 at ui/deriving/deriving-via-extension-struct-tuple.rs:8:21: 8:38
        _10 = <str as ToString>::to_string(move _11) -> [return: bb3, unwind: bb26]; // scope 2 at ui/deriving/deriving-via-extension-struct-tuple.rs:8:21: 8:38
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:8:27: 8:36
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = Foo(const 5_isize, const 7_isize, move _10); // scope 2 at ui/deriving/deriving-via-extension-struct-tuple.rs:8:11: 8:39
        _14 = &_1;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = &_1;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &Foo);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &Foo);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <Foo as PartialEq>::eq(move _20, move _21) -> [return: bb4, unwind: bb25]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = Not(move _19);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb6, otherwise: bb5]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _22 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<Foo, Foo>(move _24, move _25, move _27, move _29) -> bb25; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = &_5;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _32 = &_1;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _30 = (move _31, move _32);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_30.0: &Foo);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_30.1: &Foo);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = _33;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = _34;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = <Foo as PartialEq>::eq(move _37, move _38) -> [return: bb7, unwind: bb25]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _35 = Not(move _36);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb9, otherwise: bb8]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _39 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<Foo, Foo>(move _41, move _42, move _44, move _46) -> bb25; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb9: {
        _50 = &_1;                       // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:13: 12:15
        _51 = &_9;                       // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:19: 12:20
        _49 = <Foo as PartialEq>::eq(move _50, move _51) -> [return: bb10, unwind: bb25]; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:12: 12:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:12:12: 12:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _48 = Not(move _49);             // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:11: 12:21
        _47 = Not(move _48);             // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:3: 12:22
        switchInt(move _47) -> [0: bb12, otherwise: bb11]; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:3: 12:22
    }

    bb11: {
        _52 = core::panicking::panic(const "assertion failed: !(a1 == b)") -> bb25; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:12:3: 12:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:12:3: 12:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _55 = &_1;                       // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:11: 14:13
        _56 = &_9;                       // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:17: 14:18
        _54 = <Foo as PartialEq>::ne(move _55, move _56) -> [return: bb13, unwind: bb25]; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:11: 14:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:14:11: 14:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb13: {
        _53 = Not(move _54);             // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:3: 14:19
        switchInt(move _53) -> [0: bb15, otherwise: bb14]; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:3: 14:19
    }

    bb14: {
        _57 = core::panicking::panic(const "assertion failed: a1 != b") -> bb25; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:14:3: 14:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:14:3: 14:19
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _61 = &_1;                       // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:13: 15:15
        _62 = &_1;                       // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:19: 15:21
        _60 = <Foo as PartialEq>::ne(move _61, move _62) -> [return: bb16, unwind: bb25]; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:12: 15:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:15:12: 15:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb16: {
        _59 = Not(move _60);             // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:11: 15:22
        _58 = Not(move _59);             // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:3: 15:23
        switchInt(move _58) -> [0: bb18, otherwise: bb17]; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:3: 15:23
    }

    bb17: {
        _63 = core::panicking::panic(const "assertion failed: !(a1 != a1)") -> bb25; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:15:3: 15:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:15:3: 15:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _67 = &_5;                       // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:13: 16:15
        _68 = &_1;                       // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:19: 16:21
        _66 = <Foo as PartialEq>::ne(move _67, move _68) -> [return: bb19, unwind: bb25]; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:12: 16:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:16:12: 16:22
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb19: {
        _65 = Not(move _66);             // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:11: 16:22
        _64 = Not(move _65);             // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:3: 16:23
        switchInt(move _64) -> [0: bb21, otherwise: bb20]; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:3: 16:23
    }

    bb20: {
        _69 = core::panicking::panic(const "assertion failed: !(a2 != a1)") -> bb25; // scope 3 at ui/deriving/deriving-via-extension-struct-tuple.rs:16:3: 16:23
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-via-extension-struct-tuple.rs:16:3: 16:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        drop(_9) -> [return: bb22, unwind: bb26]; // scope 2 at ui/deriving/deriving-via-extension-struct-tuple.rs:17:1: 17:2
    }

    bb22: {
        drop(_5) -> [return: bb23, unwind: bb27]; // scope 1 at ui/deriving/deriving-via-extension-struct-tuple.rs:17:1: 17:2
    }

    bb23: {
        drop(_1) -> bb24;                // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:17:1: 17:2
    }

    bb24: {
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:17:2: 17:2
    }

    bb25 (cleanup): {
        drop(_9) -> bb26;                // scope 2 at ui/deriving/deriving-via-extension-struct-tuple.rs:17:1: 17:2
    }

    bb26 (cleanup): {
        drop(_5) -> bb27;                // scope 1 at ui/deriving/deriving-via-extension-struct-tuple.rs:17:1: 17:2
    }

    bb27 (cleanup): {
        drop(_1) -> bb28;                // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:17:1: 17:2
    }

    bb28 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:5:1: 17:2
    }
}

fn Foo(_1: isize, _2: isize, _3: String) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:1: 3:11

    bb0: {
        _0 = Foo(move _1, move _2, move _3); // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:1: 3:11
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:1: 3:11
    }
}

// MIR FOR CTFE
fn Foo(_1: isize, _2: isize, _3: String) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:1: 3:11

    bb0: {
        _0 = Foo(move _1, move _2, move _3); // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:1: 3:11
        return;                          // scope 0 at ui/deriving/deriving-via-extension-struct-tuple.rs:3:1: 3:11
    }
}
