// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/issue-89188-gat-hrtb.rs:9:10: 9:15>::clone(_1: &ShimMethod<T>) -> ShimMethod<T> {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:9:10: 9:15
    let mut _0: ShimMethod<T>;           // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:9:10: 9:15
    let mut _2: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
    let mut _3: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
    let _4: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
    let mut _5: &&dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
    let _6: &&dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94

    bb0: {
        _6 = &((*_1).0: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>)); // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
        _5 = _6;                         // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
        _4 = <&dyn for<'s> Fn(&'s mut <T as CallWithShim>::Shim<'s>) as Clone>::clone(move _5) -> bb1; // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
                                         // mir::Constant
                                         // + span: ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
                                         // + literal: Const { ty: for<'a> fn(&'a &dyn for<'s> Fn(&'s mut <T as CallWithShim>::Shim<'s>)) -> &dyn for<'s> Fn(&'s mut <T as CallWithShim>::Shim<'s>) {<&dyn for<'s> Fn(&'s mut <T as CallWithShim>::Shim<'s>) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
        _2 = move _3 as &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim>::Shim<'s>) (Pointer(Unsize)); // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:46: 10:94
        _0 = ShimMethod::<T>(move _2);   // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:9:10: 9:15
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:9:15: 9:15
    }
}

fn <impl at ui/deriving/issue-89188-gat-hrtb.rs:18:10: 18:15>::clone(_1: &ShimMethod2<T>) -> ShimMethod2<T> {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:18:10: 18:15
    let mut _0: ShimMethod2<T>;          // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:18:10: 18:15
    let mut _2: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
    let mut _3: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
    let _4: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
    let mut _5: &&dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
    let _6: &&dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99

    bb0: {
        _6 = &((*_1).0: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>)); // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
        _5 = _6;                         // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
        _4 = <&dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>) as Clone>::clone(move _5) -> bb1; // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
                                         // mir::Constant
                                         // + span: ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
                                         // + literal: Const { ty: for<'a> fn(&'a &dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>)) -> &dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>) {<&dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
        _2 = move _3 as &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<S<'s>>) (Pointer(Unsize)); // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:48: 19:99
        _0 = ShimMethod2::<T>(move _2);  // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:18:10: 18:15
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:18:15: 18:15
    }
}

fn <impl at ui/deriving/issue-89188-gat-hrtb.rs:23:10: 23:15>::clone(_1: &ShimMethod3<T>) -> ShimMethod3<T> {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:23:10: 23:15
    let mut _0: ShimMethod3<T>;          // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:23:10: 23:15
    let mut _2: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
    let mut _3: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
    let _4: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
    let mut _5: &&dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
    let _6: &&dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6

    bb0: {
        _6 = &((*_1).0: &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>)); // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
        _5 = _6;                         // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
        _4 = <&dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>) as Clone>::clone(move _5) -> bb1; // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
                                         // mir::Constant
                                         // + span: ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
                                         // + literal: Const { ty: for<'a> fn(&'a &dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>)) -> &dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>) {<&dyn for<'s> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
        _2 = move _3 as &dyn for<'s> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'t> std::ops::Fn(&'s mut <T as CallWithShim2>::Shim<(dyn for<'u> Trait<'s, 't, 'u> + 's)>) + 's)>) (Pointer(Unsize)); // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:25:5: 27:6
        _0 = ShimMethod3::<T>(move _2);  // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:23:10: 23:15
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:23:15: 23:15
    }
}

fn <impl at ui/deriving/issue-89188-gat-hrtb.rs:34:10: 34:15>::clone(_1: &ShimMethod4<T>) -> ShimMethod4<T> {
    debug self => _1;                    // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:34:10: 34:15
    let mut _0: ShimMethod4<T>;          // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:34:10: 34:15
    let mut _2: &dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
    let mut _3: &dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
    let _4: &dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
    let mut _5: &&dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
    let _6: &&dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As); // in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83

    bb0: {
        _6 = &((*_1).0: &dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As)); // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
        _5 = _6;                         // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
        _4 = <&dyn for<'s> Fn(&'s mut <T as Trait2>::As) as Clone>::clone(move _5) -> bb1; // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
                                         // mir::Constant
                                         // + span: ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
                                         // + literal: Const { ty: for<'a> fn(&'a &dyn for<'s> Fn(&'s mut <T as Trait2>::As)) -> &dyn for<'s> Fn(&'s mut <T as Trait2>::As) {<&dyn for<'s> Fn(&'s mut <T as Trait2>::As) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
        _2 = move _3 as &dyn for<'s> std::ops::Fn(&'s mut <T as Trait2>::As) (Pointer(Unsize)); // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:41: 35:83
        _0 = ShimMethod4::<T>(move _2);  // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:34:10: 34:15
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:34:15: 34:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:37:15: 37:15

    bb0: {
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:37:17: 37:17
    }
}

fn ShimMethod(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim>::Shim<'a>)) -> ShimMethod<T> {
    let mut _0: ShimMethod<T>;           // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:1: 10:45

    bb0: {
        _0 = ShimMethod::<T>(move _1);   // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:1: 10:45
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:1: 10:45
    }
}

// MIR FOR CTFE
fn ShimMethod(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim>::Shim<'a>)) -> ShimMethod<T> {
    let mut _0: ShimMethod<T>;           // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:1: 10:45

    bb0: {
        _0 = ShimMethod::<T>(move _1);   // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:1: 10:45
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:10:1: 10:45
    }
}

fn S(_1: &()) -> S<'_> {
    let mut _0: S<'_>;                   // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:16:1: 16:13

    bb0: {
        _0 = S::<'_>(move _1);           // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:16:1: 16:13
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:16:1: 16:13
    }
}

// MIR FOR CTFE
fn S(_1: &()) -> S<'_> {
    let mut _0: S<'_>;                   // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:16:1: 16:13

    bb0: {
        _0 = S::<'_>(move _1);           // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:16:1: 16:13
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:16:1: 16:13
    }
}

fn ShimMethod2(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<S<'a>>)) -> ShimMethod2<T> {
    let mut _0: ShimMethod2<T>;          // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:1: 19:47

    bb0: {
        _0 = ShimMethod2::<T>(move _1);  // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:1: 19:47
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:1: 19:47
    }
}

// MIR FOR CTFE
fn ShimMethod2(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<S<'a>>)) -> ShimMethod2<T> {
    let mut _0: ShimMethod2<T>;          // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:1: 19:47

    bb0: {
        _0 = ShimMethod2::<T>(move _1);  // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:1: 19:47
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:19:1: 19:47
    }
}

fn ShimMethod3(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<(dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<(dyn for<'a> Trait<'a, 'a, 'a> + 'a)>) + 'a)>)) -> ShimMethod3<T> {
    let mut _0: ShimMethod3<T>;          // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:24:1: 24:47

    bb0: {
        _0 = ShimMethod3::<T>(move _1);  // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:24:1: 24:47
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:24:1: 24:47
    }
}

// MIR FOR CTFE
fn ShimMethod3(_1: &dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<(dyn for<'a> Fn(&'a mut <T as CallWithShim2>::Shim<(dyn for<'a> Trait<'a, 'a, 'a> + 'a)>) + 'a)>)) -> ShimMethod3<T> {
    let mut _0: ShimMethod3<T>;          // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:24:1: 24:47

    bb0: {
        _0 = ShimMethod3::<T>(move _1);  // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:24:1: 24:47
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:24:1: 24:47
    }
}

fn ShimMethod4(_1: &dyn for<'a> Fn(&'a mut <T as Trait2>::As)) -> ShimMethod4<T> {
    let mut _0: ShimMethod4<T>;          // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:1: 35:40

    bb0: {
        _0 = ShimMethod4::<T>(move _1);  // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:1: 35:40
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:1: 35:40
    }
}

// MIR FOR CTFE
fn ShimMethod4(_1: &dyn for<'a> Fn(&'a mut <T as Trait2>::As)) -> ShimMethod4<T> {
    let mut _0: ShimMethod4<T>;          // return place in scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:1: 35:40

    bb0: {
        _0 = ShimMethod4::<T>(move _1);  // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:1: 35:40
        return;                          // scope 0 at ui/deriving/issue-89188-gat-hrtb.rs:35:1: 35:40
    }
}
