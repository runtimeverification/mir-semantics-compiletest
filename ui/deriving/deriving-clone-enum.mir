// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-clone-enum.rs:5:10: 5:15>::clone(_1: &E) -> E {
    debug self => _1;
    let mut _0: E;
    let mut _2: isize;
    let _3: &();
    scope 1 {
        debug __self_0 => _3;
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _0 = E::C;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = E::A;
        goto -> bb5;
    }

    bb4: {
        _3 = &(((*_1) as B).0: ());
        _0 = E::B(const ());
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: E;
    let mut _2: &E;
    scope 1 {
    }

    bb0: {
        _2 = const _;
        _1 = <E as Clone>::clone(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

promoted[0] in main: &E = {
    let mut _0: &E;
    let mut _1: E;

    bb0: {
        _1 = E::A;
        _0 = &_1;
        return;
    }
}

fn E::B(_1: ()) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::B(move _1);
        return;
    }
}

// MIR FOR CTFE
fn E::B(_1: ()) -> E {
    let mut _0: E;

    bb0: {
        _0 = E::B(move _1);
        return;
    }
}
