// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-clone-enum.rs:5:10: 5:15>::clone(_1: &E) -> E {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
    let mut _0: E;                       // return place in scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
    let mut _2: isize;                   // in scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
    let _3: &();                         // in scope 0 at ui/deriving/deriving-clone-enum.rs:8:7: 8:9
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/deriving/deriving-clone-enum.rs:8:7: 8:9
    }

    bb0: {
        _2 = discriminant((*_1));        // scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
        switchInt(move _2) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
    }

    bb1: {
        _0 = const E::C;                 // scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-enum.rs:5:10: 5:15
                                         // + literal: Const { ty: E, val: Value(Scalar(0x02)) }
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
    }

    bb3: {
        _0 = const E::A;                 // scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-enum.rs:5:10: 5:15
                                         // + literal: Const { ty: E, val: Value(Scalar(0x00)) }
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
    }

    bb4: {
        _3 = &(((*_1) as B).0: ());      // scope 0 at ui/deriving/deriving-clone-enum.rs:8:7: 8:9
        _0 = const E::B(());             // scope 1 at ui/deriving/deriving-clone-enum.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-enum.rs:5:10: 5:15
                                         // + literal: Const { ty: E, val: Value(Scalar(0x01)) }
        goto -> bb5;                     // scope 0 at ui/deriving/deriving-clone-enum.rs:5:14: 5:15
    }

    bb5: {
        return;                          // scope 0 at ui/deriving/deriving-clone-enum.rs:5:15: 5:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-clone-enum.rs:12:15: 12:15
    let mut _1: E;                       // in scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:25
    let mut _2: &E;                      // in scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:25
    let mut _3: &E;                      // in scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:25
    scope 1 {
    }

    bb0: {
        _3 = const _;                    // scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:25
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-enum.rs:13:13: 13:25
                                         // + literal: Const { ty: &E, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:25
        _1 = <E as Clone>::clone(move _2) -> bb1; // scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:25
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-clone-enum.rs:13:18: 13:23
                                         // + literal: Const { ty: for<'a> fn(&'a E) -> E {<E as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-clone-enum.rs:14:2: 14:2
    }
}

promoted[0] in main: &E = {
    let mut _0: &E;                      // return place in scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:25
    let mut _1: E;                       // in scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:17

    bb0: {
        _1 = E::A;                       // scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:17
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:25
        return;                          // scope 0 at ui/deriving/deriving-clone-enum.rs:13:13: 13:25
    }
}

fn E::B(_1: ()) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/deriving/deriving-clone-enum.rs:8:5: 8:6

    bb0: {
        _0 = E::B(move _1);              // scope 0 at ui/deriving/deriving-clone-enum.rs:8:5: 8:6
        return;                          // scope 0 at ui/deriving/deriving-clone-enum.rs:8:5: 8:6
    }
}

// MIR FOR CTFE
fn E::B(_1: ()) -> E {
    let mut _0: E;                       // return place in scope 0 at ui/deriving/deriving-clone-enum.rs:8:5: 8:6

    bb0: {
        _0 = E::B(move _1);              // scope 0 at ui/deriving/deriving-clone-enum.rs:8:5: 8:6
        return;                          // scope 0 at ui/deriving/deriving-clone-enum.rs:8:5: 8:6
    }
}
