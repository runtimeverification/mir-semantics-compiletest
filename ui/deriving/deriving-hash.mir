// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/deriving/deriving-hash.rs:12:10: 12:14>::hash(_1: &Person, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:12:10: 12:14
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-hash.rs:12:10: 12:14
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:12:10: 12:14
    let _3: ();                          // in scope 0 at ui/deriving/deriving-hash.rs:14:5: 14:14
    let mut _4: &usize;                  // in scope 0 at ui/deriving/deriving-hash.rs:14:5: 14:14
    let _5: &usize;                      // in scope 0 at ui/deriving/deriving-hash.rs:14:5: 14:14
    let mut _6: &mut __H;                // in scope 0 at ui/deriving/deriving-hash.rs:12:10: 12:14
    let _7: ();                          // in scope 0 at ui/deriving/deriving-hash.rs:15:5: 15:17
    let mut _8: &std::string::String;    // in scope 0 at ui/deriving/deriving-hash.rs:15:5: 15:17
    let _9: &std::string::String;        // in scope 0 at ui/deriving/deriving-hash.rs:15:5: 15:17
    let mut _10: &mut __H;               // in scope 0 at ui/deriving/deriving-hash.rs:12:10: 12:14
    let mut _11: &usize;                 // in scope 0 at ui/deriving/deriving-hash.rs:16:5: 16:17
    let _12: &usize;                     // in scope 0 at ui/deriving/deriving-hash.rs:16:5: 16:17
    let mut _13: &mut __H;               // in scope 0 at ui/deriving/deriving-hash.rs:12:10: 12:14

    bb0: {
        _5 = &((*_1).0: usize);          // scope 0 at ui/deriving/deriving-hash.rs:14:5: 14:14
        _4 = _5;                         // scope 0 at ui/deriving/deriving-hash.rs:14:5: 14:14
        _6 = &mut (*_2);                 // scope 0 at ui/deriving/deriving-hash.rs:12:10: 12:14
        _3 = <usize as Hash>::hash::<__H>(move _4, move _6) -> bb1; // scope 0 at ui/deriving/deriving-hash.rs:14:5: 14:14
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:14:5: 14:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b mut __H) {<usize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &((*_1).1: std::string::String); // scope 0 at ui/deriving/deriving-hash.rs:15:5: 15:17
        _8 = _9;                         // scope 0 at ui/deriving/deriving-hash.rs:15:5: 15:17
        _10 = &mut (*_2);                // scope 0 at ui/deriving/deriving-hash.rs:12:10: 12:14
        _7 = <String as Hash>::hash::<__H>(move _8, move _10) -> bb2; // scope 0 at ui/deriving/deriving-hash.rs:15:5: 15:17
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:15:5: 15:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b mut __H) {<String as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = &((*_1).2: usize);         // scope 0 at ui/deriving/deriving-hash.rs:16:5: 16:17
        _11 = _12;                       // scope 0 at ui/deriving/deriving-hash.rs:16:5: 16:17
        _13 = &mut (*_2);                // scope 0 at ui/deriving/deriving-hash.rs:12:10: 12:14
        _0 = <usize as Hash>::hash::<__H>(move _11, move _13) -> bb3; // scope 0 at ui/deriving/deriving-hash.rs:16:5: 16:17
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:16:5: 16:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a usize, &'b mut __H) {<usize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:12:14: 12:14
    }
}

fn <impl at ui/deriving/deriving-hash.rs:20:10: 20:14>::hash(_1: &__H__H, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:20:10: 20:14
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-hash.rs:20:10: 20:14
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:20:10: 20:14

    bb0: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:20:14: 20:14
    }
}

fn <impl at ui/deriving/deriving-hash.rs:21:10: 21:14>::hash(_1: &Collision<__H>, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:21:10: 21:14
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-hash.rs:21:10: 21:14
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:21:10: 21:14
    let _3: &__H;                        // in scope 0 at ui/deriving/deriving-hash.rs:21:45: 21:56
    let mut _4: &__H;                    // in scope 0 at ui/deriving/deriving-hash.rs:21:45: 21:56
    let mut _5: &mut __H;                // in scope 0 at ui/deriving/deriving-hash.rs:21:10: 21:14
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/deriving/deriving-hash.rs:21:45: 21:56
    }

    bb0: {
        _3 = &(((*_1) as __H).0: __H);   // scope 0 at ui/deriving/deriving-hash.rs:21:45: 21:56
        _4 = _3;                         // scope 1 at ui/deriving/deriving-hash.rs:21:45: 21:56
        _5 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-hash.rs:21:10: 21:14
        _0 = <__H as Hash>::hash::<__H>(move _4, move _5) -> bb1; // scope 1 at ui/deriving/deriving-hash.rs:21:45: 21:56
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:21:45: 21:56
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a __H, &'b mut __H) {<__H as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:21:14: 21:14
    }
}

E::A::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/deriving/deriving-hash.rs:24:12: 24:13

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/deriving/deriving-hash.rs:24:12: 24:13
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:24:12: 24:13
    }
}

fn <impl at ui/deriving/deriving-hash.rs:23:10: 23:14>::hash(_1: &E, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
    let _3: isize;                       // in scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
    let mut _4: &E;                      // in scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
    let mut _5: &isize;                  // in scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
    let _6: &isize;                      // in scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
    let mut _7: &mut __H;                // in scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-hash.rs:23:10: 23:14
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-hash.rs:23:10: 23:14
        _6 = &_3;                        // scope 1 at ui/deriving/deriving-hash.rs:23:10: 23:14
        _5 = _6;                         // scope 1 at ui/deriving/deriving-hash.rs:23:10: 23:14
        _7 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-hash.rs:23:10: 23:14
        _0 = <isize as Hash>::hash::<__H>(move _5, move _7) -> bb1; // scope 1 at ui/deriving/deriving-hash.rs:23:10: 23:14
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:23:10: 23:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a isize, &'b mut __H) {<isize as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:23:14: 23:14
    }
}

fn hash(_1: &T) -> u64 {
    debug t => _1;                       // in scope 0 at ui/deriving/deriving-hash.rs:26:18: 26:19
    let mut _0: u64;                     // return place in scope 0 at ui/deriving/deriving-hash.rs:26:28: 26:31
    let mut _2: std::hash::SipHasher;    // in scope 0 at ui/deriving/deriving-hash.rs:27:9: 27:14
    let _3: ();                          // in scope 0 at ui/deriving/deriving-hash.rs:28:5: 28:19
    let mut _4: &T;                      // in scope 0 at ui/deriving/deriving-hash.rs:28:5: 28:19
    let mut _5: &mut std::hash::SipHasher; // in scope 0 at ui/deriving/deriving-hash.rs:28:12: 28:18
    let mut _6: &mut std::hash::SipHasher; // in scope 0 at ui/deriving/deriving-hash.rs:28:12: 28:18
    let mut _7: &std::hash::SipHasher;   // in scope 0 at ui/deriving/deriving-hash.rs:29:5: 29:15
    scope 1 {
        debug s => _2;                   // in scope 1 at ui/deriving/deriving-hash.rs:27:9: 27:14
    }

    bb0: {
        _2 = SipHasher::new() -> bb1;    // scope 0 at ui/deriving/deriving-hash.rs:27:17: 27:33
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:27:17: 27:31
                                         // + literal: Const { ty: fn() -> SipHasher {SipHasher::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _1;                         // scope 1 at ui/deriving/deriving-hash.rs:28:5: 28:19
        _6 = &mut _2;                    // scope 1 at ui/deriving/deriving-hash.rs:28:12: 28:18
        _5 = &mut (*_6);                 // scope 1 at ui/deriving/deriving-hash.rs:28:12: 28:18
        _3 = <T as Hash>::hash::<SipHasher>(move _4, move _5) -> bb2; // scope 1 at ui/deriving/deriving-hash.rs:28:5: 28:19
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:28:7: 28:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b mut SipHasher) {<T as Hash>::hash::<SipHasher>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &_2;                        // scope 1 at ui/deriving/deriving-hash.rs:29:5: 29:15
        _0 = <SipHasher as Hasher>::finish(move _7) -> bb3; // scope 1 at ui/deriving/deriving-hash.rs:29:5: 29:15
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:29:7: 29:13
                                         // + literal: Const { ty: for<'a> fn(&'a SipHasher) -> u64 {<SipHasher as Hasher>::finish}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:30:2: 30:2
    }
}

fn <impl at ui/deriving/deriving-hash.rs:33:1: 33:35>::finish(_1: &FakeHasher<'_>) -> u64 {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:34:15: 34:20
    let mut _0: u64;                     // return place in scope 0 at ui/deriving/deriving-hash.rs:34:25: 34:28
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52

    bb0: {
        _2 = core::panicking::panic(const "not implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/deriving/deriving-hash.rs:33:1: 33:35>::write(_1: &mut FakeHasher<'_>, _2: &[u8]) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:38:14: 38:23
    debug bytes => _2;                   // in scope 0 at ui/deriving/deriving-hash.rs:38:25: 38:30
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:38:39: 38:39
    let _3: ();                          // in scope 0 at ui/deriving/deriving-hash.rs:39:9: 39:29
    let mut _4: &mut std::vec::Vec<u8>;  // in scope 0 at ui/deriving/deriving-hash.rs:39:9: 39:29
    let mut _5: &[u8];                   // in scope 0 at ui/deriving/deriving-hash.rs:39:23: 39:28
    let mut _6: &mut std::vec::Vec<u8>;  // in scope 0 at ui/deriving/deriving-hash.rs:38:14: 38:23

    bb0: {
        _6 = deref_copy ((*_1).0: &mut std::vec::Vec<u8>); // scope 0 at ui/deriving/deriving-hash.rs:39:9: 39:29
        _4 = &mut (*_6);                 // scope 0 at ui/deriving/deriving-hash.rs:39:9: 39:29
        _5 = _2;                         // scope 0 at ui/deriving/deriving-hash.rs:39:23: 39:28
        _3 = <Vec<u8> as Extend<&u8>>::extend::<&[u8]>(move _4, move _5) -> bb1; // scope 0 at ui/deriving/deriving-hash.rs:39:9: 39:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:39:16: 39:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>, &[u8]) {<Vec<u8> as Extend<&u8>>::extend::<&[u8]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:40:6: 40:6
    }
}

fn fake_hash(_1: &mut Vec<u8>, _2: A) -> () {
    debug v => _1;                       // in scope 0 at ui/deriving/deriving-hash.rs:43:23: 43:24
    debug a => _2;                       // in scope 0 at ui/deriving/deriving-hash.rs:43:40: 43:41
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:43:46: 43:46
    let _3: ();                          // in scope 0 at ui/deriving/deriving-hash.rs:44:5: 44:31
    let mut _4: &A;                      // in scope 0 at ui/deriving/deriving-hash.rs:44:5: 44:31
    let mut _5: &mut FakeHasher<'_>;     // in scope 0 at ui/deriving/deriving-hash.rs:44:12: 44:30
    let mut _6: &mut FakeHasher<'_>;     // in scope 0 at ui/deriving/deriving-hash.rs:44:12: 44:30
    let mut _7: FakeHasher<'_>;          // in scope 0 at ui/deriving/deriving-hash.rs:44:17: 44:30
    let mut _8: &mut std::vec::Vec<u8>;  // in scope 0 at ui/deriving/deriving-hash.rs:44:28: 44:29

    bb0: {
        _4 = &_2;                        // scope 0 at ui/deriving/deriving-hash.rs:44:5: 44:31
        _8 = &mut (*_1);                 // scope 0 at ui/deriving/deriving-hash.rs:44:28: 44:29
        _7 = FakeHasher::<'_>(move _8);  // scope 0 at ui/deriving/deriving-hash.rs:44:17: 44:30
        _6 = &mut _7;                    // scope 0 at ui/deriving/deriving-hash.rs:44:12: 44:30
        _5 = &mut (*_6);                 // scope 0 at ui/deriving/deriving-hash.rs:44:12: 44:30
        _3 = <A as Hash>::hash::<FakeHasher<'_>>(move _4, move _5) -> [return: bb1, unwind: bb3]; // scope 0 at ui/deriving/deriving-hash.rs:44:5: 44:31
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:44:7: 44:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a A, &'b mut FakeHasher<'_>) {<A as Hash>::hash::<FakeHasher<'_>>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 0 at ui/deriving/deriving-hash.rs:45:1: 45:2
    }

    bb2: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:45:2: 45:2
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/deriving/deriving-hash.rs:45:1: 45:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-hash.rs:43:1: 45:2
    }
}

fn <impl at ui/deriving/deriving-hash.rs:48:1: 48:34>::finish(_1: &OnlyOneByteHasher) -> u64 {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:49:15: 49:20
    let mut _0: u64;                     // return place in scope 0 at ui/deriving/deriving-hash.rs:49:25: 49:28
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77

    bb0: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/deriving/deriving-hash.rs:48:1: 48:34>::write(_1: &mut OnlyOneByteHasher, _2: &[u8]) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:53:14: 53:23
    debug bytes => _2;                   // in scope 0 at ui/deriving/deriving-hash.rs:53:25: 53:30
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:53:39: 53:39
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at ui/deriving/deriving-hash.rs:54:20: 54:31
    let mut _6: &[u8];                   // in scope 0 at ui/deriving/deriving-hash.rs:54:20: 54:31
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &usize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = _2;                         // scope 0 at ui/deriving/deriving-hash.rs:54:20: 54:31
        _5 = Len((*_6));                 // scope 0 at ui/deriving/deriving-hash.rs:54:20: 54:31
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _22 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(<OnlyOneByteHasher as Hasher>::write, [], Some(promoted[0])) }
        _7 = _22;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_3.0: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_3.1: &usize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 1_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<usize, usize>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:55:6: 55:6
    }
}

promoted[0] in <impl at ui/deriving/deriving-hash.rs:48:1: 48:34>::write: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/deriving/deriving-hash.rs:54:33: 54:34

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/deriving/deriving-hash.rs:54:33: 54:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:58:11: 58:11
    let _1: Person;                      // in scope 0 at ui/deriving/deriving-hash.rs:59:9: 59:16
    let mut _2: std::string::String;     // in scope 0 at ui/deriving/deriving-hash.rs:61:15: 61:34
    let mut _3: &str;                    // in scope 0 at ui/deriving/deriving-hash.rs:61:15: 61:34
    let _4: &str;                        // in scope 0 at ui/deriving/deriving-hash.rs:61:15: 61:22
    let mut _6: std::string::String;     // in scope 0 at ui/deriving/deriving-hash.rs:66:15: 66:32
    let mut _7: &str;                    // in scope 0 at ui/deriving/deriving-hash.rs:66:15: 66:32
    let _8: &str;                        // in scope 0 at ui/deriving/deriving-hash.rs:66:15: 66:20
    let mut _9: (&u64, &u64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _11: u64;                        // in scope 0 at ui/deriving/deriving-hash.rs:69:16: 69:30
    let mut _12: &Person;                // in scope 0 at ui/deriving/deriving-hash.rs:69:21: 69:29
    let _13: &Person;                    // in scope 0 at ui/deriving/deriving-hash.rs:69:21: 69:29
    let mut _14: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _15: u64;                        // in scope 0 at ui/deriving/deriving-hash.rs:69:32: 69:46
    let mut _16: &Person;                // in scope 0 at ui/deriving/deriving-hash.rs:69:37: 69:45
    let _17: &Person;                    // in scope 0 at ui/deriving/deriving-hash.rs:69:37: 69:45
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _22: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _23: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _25: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _26: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _27: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _28: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _29: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _30: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _32: bool;                   // in scope 0 at ui/deriving/deriving-hash.rs:70:5: 70:46
    let mut _33: bool;                   // in scope 0 at ui/deriving/deriving-hash.rs:70:13: 70:45
    let mut _34: u64;                    // in scope 0 at ui/deriving/deriving-hash.rs:70:13: 70:27
    let mut _35: &Person;                // in scope 0 at ui/deriving/deriving-hash.rs:70:18: 70:26
    let _36: &Person;                    // in scope 0 at ui/deriving/deriving-hash.rs:70:18: 70:26
    let mut _37: u64;                    // in scope 0 at ui/deriving/deriving-hash.rs:70:31: 70:45
    let mut _38: &Person;                // in scope 0 at ui/deriving/deriving-hash.rs:70:36: 70:44
    let _39: &Person;                    // in scope 0 at ui/deriving/deriving-hash.rs:70:36: 70:44
    let mut _40: !;                      // in scope 0 at ui/deriving/deriving-hash.rs:70:5: 70:46
    let _43: ();                         // in scope 0 at ui/deriving/deriving-hash.rs:75:5: 75:29
    let mut _44: &mut std::vec::Vec<u8>; // in scope 0 at ui/deriving/deriving-hash.rs:75:15: 75:22
    let mut _45: &mut std::vec::Vec<u8>; // in scope 0 at ui/deriving/deriving-hash.rs:75:15: 75:22
    let mut _46: main::E;                // in scope 0 at ui/deriving/deriving-hash.rs:75:24: 75:28
    let _47: ();                         // in scope 0 at ui/deriving/deriving-hash.rs:76:5: 76:29
    let mut _48: &mut std::vec::Vec<u8>; // in scope 0 at ui/deriving/deriving-hash.rs:76:15: 76:22
    let mut _49: &mut std::vec::Vec<u8>; // in scope 0 at ui/deriving/deriving-hash.rs:76:15: 76:22
    let mut _50: main::E;                // in scope 0 at ui/deriving/deriving-hash.rs:76:24: 76:28
    let mut _51: bool;                   // in scope 0 at ui/deriving/deriving-hash.rs:77:5: 77:22
    let mut _52: bool;                   // in scope 0 at ui/deriving/deriving-hash.rs:77:13: 77:21
    let mut _53: &std::vec::Vec<u8>;     // in scope 0 at ui/deriving/deriving-hash.rs:77:13: 77:15
    let mut _54: &std::vec::Vec<u8>;     // in scope 0 at ui/deriving/deriving-hash.rs:77:19: 77:21
    let mut _55: !;                      // in scope 0 at ui/deriving/deriving-hash.rs:77:5: 77:22
    let _57: ();                         // in scope 0 at ui/deriving/deriving-hash.rs:85:5: 85:48
    let mut _58: &mut std::vec::Vec<u8>; // in scope 0 at ui/deriving/deriving-hash.rs:85:15: 85:21
    let mut _59: &mut std::vec::Vec<u8>; // in scope 0 at ui/deriving/deriving-hash.rs:85:15: 85:21
    let mut _60: main::SingleVariantEnum; // in scope 0 at ui/deriving/deriving-hash.rs:85:23: 85:47
    let mut _61: (&std::vec::Vec<u8>, &std::vec::Vec<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _62: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _63: std::vec::Vec<u8>;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _64: std::boxed::Box<[u8]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _65: std::boxed::Box<[u8; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _66: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _67: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _68: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _69: std::boxed::Box<[u8; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _70: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _73: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _74: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _75: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _76: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _78: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _79: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _80: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _81: &std::vec::Vec<u8>;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _82: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _83: &std::vec::Vec<u8>;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _85: ();                         // in scope 0 at ui/deriving/deriving-hash.rs:95:5: 95:38
    let mut _86: &main::E;               // in scope 0 at ui/deriving/deriving-hash.rs:95:5: 95:38
    let mut _87: &mut OnlyOneByteHasher; // in scope 0 at ui/deriving/deriving-hash.rs:95:15: 95:37
    let mut _88: &mut OnlyOneByteHasher; // in scope 0 at ui/deriving/deriving-hash.rs:95:15: 95:37
    let mut _89: OnlyOneByteHasher;      // in scope 0 at ui/deriving/deriving-hash.rs:95:20: 95:37
    let mut _91: *const [u8; 1];         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug person1 => _1;             // in scope 1 at ui/deriving/deriving-hash.rs:59:9: 59:16
        let _5: Person;                  // in scope 1 at ui/deriving/deriving-hash.rs:64:9: 64:16
        scope 2 {
            debug person2 => _5;         // in scope 2 at ui/deriving/deriving-hash.rs:64:9: 64:16
            let _18: &u64;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _19: &u64;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _41: std::vec::Vec<u8>; // in scope 2 at ui/deriving/deriving-hash.rs:73:9: 73:15
            scope 3 {
                debug left_val => _18;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _19;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _24: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _24;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug va => _41;         // in scope 5 at ui/deriving/deriving-hash.rs:73:9: 73:15
                let mut _42: std::vec::Vec<u8>; // in scope 5 at ui/deriving/deriving-hash.rs:74:9: 74:15
                scope 6 {
                    debug vb => _42;     // in scope 6 at ui/deriving/deriving-hash.rs:74:9: 74:15
                    let mut _56: std::vec::Vec<u8>; // in scope 6 at ui/deriving/deriving-hash.rs:84:9: 84:14
                    scope 7 {
                        debug v => _56;  // in scope 7 at ui/deriving/deriving-hash.rs:84:9: 84:14
                        let _71: &std::vec::Vec<u8>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _72: &std::vec::Vec<u8>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _90: &main::E; // in scope 7 at ui/deriving/deriving-hash.rs:95:5: 95:38
                        scope 8 {
                        }
                        scope 9 {
                            debug left_val => _71; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _72; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _77: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 10 {
                                debug kind => _77; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = const "Janet";              // scope 0 at ui/deriving/deriving-hash.rs:61:15: 61:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:61:15: 61:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/deriving/deriving-hash.rs:61:15: 61:34
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/deriving/deriving-hash.rs:61:15: 61:34
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:61:23: 61:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Person { id: const 5_usize, name: move _2, phone: const 5556667777_usize }; // scope 0 at ui/deriving/deriving-hash.rs:59:19: 63:6
        _8 = const "Bob";                // scope 1 at ui/deriving/deriving-hash.rs:66:15: 66:20
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:66:15: 66:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/deriving/deriving-hash.rs:66:15: 66:32
        _6 = <str as ToString>::to_string(move _7) -> [return: bb2, unwind: bb37]; // scope 1 at ui/deriving/deriving-hash.rs:66:15: 66:32
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:66:21: 66:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Person { id: const 5_usize, name: move _6, phone: const 5556667777_usize }; // scope 1 at ui/deriving/deriving-hash.rs:64:19: 68:6
        _13 = &_1;                       // scope 2 at ui/deriving/deriving-hash.rs:69:21: 69:29
        _12 = _13;                       // scope 2 at ui/deriving/deriving-hash.rs:69:21: 69:29
        _11 = hash::<Person>(move _12) -> [return: bb3, unwind: bb36]; // scope 2 at ui/deriving/deriving-hash.rs:69:16: 69:30
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:69:16: 69:20
                                         // + literal: Const { ty: for<'a> fn(&'a Person) -> u64 {hash::<Person>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _17 = &_1;                       // scope 2 at ui/deriving/deriving-hash.rs:69:37: 69:45
        _16 = _17;                       // scope 2 at ui/deriving/deriving-hash.rs:69:37: 69:45
        _15 = hash::<Person>(move _16) -> [return: bb4, unwind: bb36]; // scope 2 at ui/deriving/deriving-hash.rs:69:32: 69:46
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:69:32: 69:36
                                         // + literal: Const { ty: for<'a> fn(&'a Person) -> u64 {hash::<Person>}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = &_15;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _14);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _18 = (_9.0: &u64);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _19 = (_9.1: &u64);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _22 = (*_18);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _23 = (*_19);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _21 = Eq(move _22, move _23);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _20 = Not(move _21);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _20) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _24 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _25 = core::panicking::assert_failed::<u64, u64>(move _26, move _27, move _29, move _31) -> bb36; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb6: {
        _36 = &_1;                       // scope 2 at ui/deriving/deriving-hash.rs:70:18: 70:26
        _35 = _36;                       // scope 2 at ui/deriving/deriving-hash.rs:70:18: 70:26
        _34 = hash::<Person>(move _35) -> [return: bb7, unwind: bb36]; // scope 2 at ui/deriving/deriving-hash.rs:70:13: 70:27
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:70:13: 70:17
                                         // + literal: Const { ty: for<'a> fn(&'a Person) -> u64 {hash::<Person>}, val: Value(<ZST>) }
    }

    bb7: {
        _39 = &_5;                       // scope 2 at ui/deriving/deriving-hash.rs:70:36: 70:44
        _38 = _39;                       // scope 2 at ui/deriving/deriving-hash.rs:70:36: 70:44
        _37 = hash::<Person>(move _38) -> [return: bb8, unwind: bb36]; // scope 2 at ui/deriving/deriving-hash.rs:70:31: 70:45
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:70:31: 70:35
                                         // + literal: Const { ty: for<'a> fn(&'a Person) -> u64 {hash::<Person>}, val: Value(<ZST>) }
    }

    bb8: {
        _33 = Ne(move _34, move _37);    // scope 2 at ui/deriving/deriving-hash.rs:70:13: 70:45
        _32 = Not(move _33);             // scope 2 at ui/deriving/deriving-hash.rs:70:5: 70:46
        switchInt(move _32) -> [0: bb10, otherwise: bb9]; // scope 2 at ui/deriving/deriving-hash.rs:70:5: 70:46
    }

    bb9: {
        _40 = core::panicking::panic(const "assertion failed: hash(&person1) != hash(&person2)") -> bb36; // scope 2 at ui/deriving/deriving-hash.rs:70:5: 70:46
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:70:5: 70:46
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _41 = Vec::<u8>::new() -> [return: bb11, unwind: bb36]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<u8> {Vec::<u8>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _42 = Vec::<u8>::new() -> [return: bb12, unwind: bb35]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<u8> {Vec::<u8>::new}, val: Value(<ZST>) }
    }

    bb12: {
        _45 = &mut _41;                  // scope 6 at ui/deriving/deriving-hash.rs:75:15: 75:22
        _44 = &mut (*_45);               // scope 6 at ui/deriving/deriving-hash.rs:75:15: 75:22
        _46 = const main::E::A;          // scope 6 at ui/deriving/deriving-hash.rs:75:24: 75:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:75:24: 75:28
                                         // + literal: Const { ty: main::E, val: Value(Scalar(0x00)) }
        _43 = fake_hash::<main::E>(move _44, move _46) -> [return: bb13, unwind: bb34]; // scope 6 at ui/deriving/deriving-hash.rs:75:5: 75:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:75:5: 75:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>, main::E) {fake_hash::<main::E>}, val: Value(<ZST>) }
    }

    bb13: {
        _49 = &mut _42;                  // scope 6 at ui/deriving/deriving-hash.rs:76:15: 76:22
        _48 = &mut (*_49);               // scope 6 at ui/deriving/deriving-hash.rs:76:15: 76:22
        _50 = const main::E::B;          // scope 6 at ui/deriving/deriving-hash.rs:76:24: 76:28
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:76:24: 76:28
                                         // + literal: Const { ty: main::E, val: Value(Scalar(0x01)) }
        _47 = fake_hash::<main::E>(move _48, move _50) -> [return: bb14, unwind: bb34]; // scope 6 at ui/deriving/deriving-hash.rs:76:5: 76:29
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:76:5: 76:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>, main::E) {fake_hash::<main::E>}, val: Value(<ZST>) }
    }

    bb14: {
        _53 = &_41;                      // scope 6 at ui/deriving/deriving-hash.rs:77:13: 77:15
        _54 = &_42;                      // scope 6 at ui/deriving/deriving-hash.rs:77:19: 77:21
        _52 = <Vec<u8> as PartialEq>::ne(move _53, move _54) -> [return: bb15, unwind: bb34]; // scope 6 at ui/deriving/deriving-hash.rs:77:13: 77:21
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:77:13: 77:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b Vec<u8>) -> bool {<Vec<u8> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb15: {
        _51 = Not(move _52);             // scope 6 at ui/deriving/deriving-hash.rs:77:5: 77:22
        switchInt(move _51) -> [0: bb17, otherwise: bb16]; // scope 6 at ui/deriving/deriving-hash.rs:77:5: 77:22
    }

    bb16: {
        _55 = core::panicking::panic(const "assertion failed: va != vb") -> bb34; // scope 6 at ui/deriving/deriving-hash.rs:77:5: 77:22
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:77:5: 77:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _56 = Vec::<u8>::new() -> [return: bb18, unwind: bb34]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<u8> {Vec::<u8>::new}, val: Value(<ZST>) }
    }

    bb18: {
        _59 = &mut _56;                  // scope 7 at ui/deriving/deriving-hash.rs:85:15: 85:21
        _58 = &mut (*_59);               // scope 7 at ui/deriving/deriving-hash.rs:85:15: 85:21
        _60 = const SingleVariantEnum::A(17_u8); // scope 7 at ui/deriving/deriving-hash.rs:85:23: 85:47
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:85:23: 85:47
                                         // + literal: Const { ty: SingleVariantEnum, val: Value(Scalar(0x11)) }
        _57 = fake_hash::<SingleVariantEnum>(move _58, move _60) -> [return: bb19, unwind: bb33]; // scope 7 at ui/deriving/deriving-hash.rs:85:5: 85:48
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:85:5: 85:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u8>, SingleVariantEnum) {fake_hash::<SingleVariantEnum>}, val: Value(<ZST>) }
    }

    bb19: {
        _66 = const 1_usize;             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _67 = const 1_usize;             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _68 = alloc::alloc::exchange_malloc(move _66, move _67) -> [return: bb20, unwind: bb33]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb20: {
        _69 = ShallowInitBox(move _68, [u8; 1]); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _91 = (((_69.0: std::ptr::Unique<[u8; 1]>).0: std::ptr::NonNull<[u8; 1]>).0: *const [u8; 1]); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_91) = [const 17_u8];          // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _65 = move _69;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _64 = move _65 as std::boxed::Box<[u8]> (Pointer(Unsize)); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _63 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _64) -> [return: bb21, unwind: bb33]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<[u8]>) -> Vec<u8> {slice::<impl [u8]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb21: {
        _62 = &_63;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _70 = &_56;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _61 = (move _62, move _70);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _71 = (_61.0: &std::vec::Vec<u8>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _72 = (_61.1: &std::vec::Vec<u8>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _75 = _71;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _76 = _72;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _74 = <Vec<u8> as PartialEq>::eq(move _75, move _76) -> [return: bb22, unwind: bb32]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b Vec<u8>) -> bool {<Vec<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _73 = Not(move _74);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _73) -> [0: bb24, otherwise: bb23]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _77 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _79 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _81 = _71;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _81;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _83 = _72;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _82 = _83;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _84 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _78 = core::panicking::assert_failed::<Vec<u8>, Vec<u8>>(move _79, move _80, move _82, move _84) -> bb32; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b Vec<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, Vec<u8>>}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_63) -> [return: bb25, unwind: bb33]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb25: {
        _90 = const _;                   // scope 7 at ui/deriving/deriving-hash.rs:95:5: 95:38
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:95:5: 95:38
                                         // + literal: Const { ty: &main::E, val: Unevaluated(main, [], Some(promoted[0])) }
        _86 = _90;                       // scope 7 at ui/deriving/deriving-hash.rs:95:5: 95:38
        _88 = &mut _89;                  // scope 7 at ui/deriving/deriving-hash.rs:95:15: 95:37
        _87 = &mut (*_88);               // scope 7 at ui/deriving/deriving-hash.rs:95:15: 95:37
        _85 = <main::E as Hash>::hash::<OnlyOneByteHasher>(move _86, move _87) -> [return: bb26, unwind: bb33]; // scope 7 at ui/deriving/deriving-hash.rs:95:5: 95:38
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:95:10: 95:14
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a main::E, &'b mut OnlyOneByteHasher) {<main::E as Hash>::hash::<OnlyOneByteHasher>}, val: Value(<ZST>) }
    }

    bb26: {
        drop(_56) -> [return: bb27, unwind: bb34]; // scope 6 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb27: {
        drop(_42) -> [return: bb28, unwind: bb35]; // scope 5 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb28: {
        drop(_41) -> [return: bb29, unwind: bb36]; // scope 2 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb29: {
        drop(_5) -> [return: bb30, unwind: bb37]; // scope 1 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb30: {
        drop(_1) -> bb31;                // scope 0 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb31: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:96:2: 96:2
    }

    bb32 (cleanup): {
        drop(_63) -> bb33;               // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb33 (cleanup): {
        drop(_56) -> bb34;               // scope 6 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb34 (cleanup): {
        drop(_42) -> bb35;               // scope 5 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb35 (cleanup): {
        drop(_41) -> bb36;               // scope 2 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb36 (cleanup): {
        drop(_5) -> bb37;                // scope 1 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb37 (cleanup): {
        drop(_1) -> bb38;                // scope 0 at ui/deriving/deriving-hash.rs:96:1: 96:2
    }

    bb38 (cleanup): {
        resume;                          // scope 0 at ui/deriving/deriving-hash.rs:58:1: 96:2
    }
}

promoted[0] in main: &main::E = {
    let mut _0: &main::E;                // return place in scope 0 at ui/deriving/deriving-hash.rs:95:5: 95:38
    let mut _1: main::E;                 // in scope 0 at ui/deriving/deriving-hash.rs:95:5: 95:9

    bb0: {
        _1 = main::E::A;                 // scope 0 at ui/deriving/deriving-hash.rs:95:5: 95:9
        _0 = &_1;                        // scope 0 at ui/deriving/deriving-hash.rs:95:5: 95:38
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:95:5: 95:38
    }
}

fn main::<impl at ui/deriving/deriving-hash.rs:80:14: 80:18>::hash(_1: &SingleVariantEnum, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:80:14: 80:18
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-hash.rs:80:14: 80:18
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:80:14: 80:18
    let _3: &u8;                         // in scope 0 at ui/deriving/deriving-hash.rs:82:11: 82:13
    let mut _4: &u8;                     // in scope 0 at ui/deriving/deriving-hash.rs:82:11: 82:13
    let mut _5: &mut __H;                // in scope 0 at ui/deriving/deriving-hash.rs:80:14: 80:18
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/deriving/deriving-hash.rs:82:11: 82:13
    }

    bb0: {
        _3 = &(((*_1) as A).0: u8);      // scope 0 at ui/deriving/deriving-hash.rs:82:11: 82:13
        _4 = _3;                         // scope 1 at ui/deriving/deriving-hash.rs:82:11: 82:13
        _5 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-hash.rs:80:14: 80:18
        _0 = <u8 as Hash>::hash::<__H>(move _4, move _5) -> bb1; // scope 1 at ui/deriving/deriving-hash.rs:82:11: 82:13
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:82:11: 82:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b mut __H) {<u8 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:80:18: 80:18
    }
}

fn main::<impl at ui/deriving/deriving-hash.rs:90:14: 90:18>::hash(_1: &main::E, _2: &mut __H) -> () {
    debug self => _1;                    // in scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
    debug state => _2;                   // in scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
    let mut _0: ();                      // return place in scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
    let _3: u8;                          // in scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
    let mut _4: &main::E;                // in scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
    let mut _5: &u8;                     // in scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
    let _6: &u8;                         // in scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
    let mut _7: &mut __H;                // in scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/deriving/deriving-hash.rs:90:14: 90:18
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
        _3 = discriminant((*_4));        // scope 0 at ui/deriving/deriving-hash.rs:90:14: 90:18
        _6 = &_3;                        // scope 1 at ui/deriving/deriving-hash.rs:90:14: 90:18
        _5 = _6;                         // scope 1 at ui/deriving/deriving-hash.rs:90:14: 90:18
        _7 = &mut (*_2);                 // scope 1 at ui/deriving/deriving-hash.rs:90:14: 90:18
        _0 = <u8 as Hash>::hash::<__H>(move _5, move _7) -> bb1; // scope 1 at ui/deriving/deriving-hash.rs:90:14: 90:18
                                         // mir::Constant
                                         // + span: ui/deriving/deriving-hash.rs:90:14: 90:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a u8, &'b mut __H) {<u8 as Hash>::hash::<__H>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:90:18: 90:18
    }
}

fn FakeHasher(_1: &mut Vec<u8>) -> FakeHasher<'_> {
    let mut _0: FakeHasher<'_>;          // return place in scope 0 at ui/deriving/deriving-hash.rs:32:1: 32:22

    bb0: {
        _0 = FakeHasher::<'_>(move _1);  // scope 0 at ui/deriving/deriving-hash.rs:32:1: 32:22
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:32:1: 32:22
    }
}

// MIR FOR CTFE
fn FakeHasher(_1: &mut Vec<u8>) -> FakeHasher<'_> {
    let mut _0: FakeHasher<'_>;          // return place in scope 0 at ui/deriving/deriving-hash.rs:32:1: 32:22

    bb0: {
        _0 = FakeHasher::<'_>(move _1);  // scope 0 at ui/deriving/deriving-hash.rs:32:1: 32:22
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:32:1: 32:22
    }
}

fn SingleVariantEnum::A(_1: u8) -> SingleVariantEnum {
    let mut _0: main::SingleVariantEnum; // return place in scope 0 at ui/deriving/deriving-hash.rs:82:9: 82:10

    bb0: {
        _0 = SingleVariantEnum::A(move _1); // scope 0 at ui/deriving/deriving-hash.rs:82:9: 82:10
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:82:9: 82:10
    }
}

// MIR FOR CTFE
fn SingleVariantEnum::A(_1: u8) -> SingleVariantEnum {
    let mut _0: main::SingleVariantEnum; // return place in scope 0 at ui/deriving/deriving-hash.rs:82:9: 82:10

    bb0: {
        _0 = SingleVariantEnum::A(move _1); // scope 0 at ui/deriving/deriving-hash.rs:82:9: 82:10
        return;                          // scope 0 at ui/deriving/deriving-hash.rs:82:9: 82:10
    }
}
