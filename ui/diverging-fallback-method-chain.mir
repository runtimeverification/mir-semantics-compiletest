// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn produce() -> Result<&str, T> {
    let mut _0: std::result::Result<&str, T>; // return place in scope 0 at ui/diverging-fallback-method-chain.rs:11:20: 11:43
    let mut _1: &str;                    // in scope 0 at ui/diverging-fallback-method-chain.rs:12:8: 12:12
    let _2: &str;                        // in scope 0 at ui/diverging-fallback-method-chain.rs:12:8: 12:12

    bb0: {
        _2 = const "22";                 // scope 0 at ui/diverging-fallback-method-chain.rs:12:8: 12:12
                                         // mir::Constant
                                         // + span: ui/diverging-fallback-method-chain.rs:12:8: 12:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _1 = _2;                         // scope 0 at ui/diverging-fallback-method-chain.rs:12:8: 12:12
        _0 = Result::<&str, T>::Ok(move _1); // scope 0 at ui/diverging-fallback-method-chain.rs:12:5: 12:13
        return;                          // scope 0 at ui/diverging-fallback-method-chain.rs:13:2: 13:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/diverging-fallback-method-chain.rs:15:11: 15:11
    let _1: usize;                       // in scope 0 at ui/diverging-fallback-method-chain.rs:16:9: 16:10
    let mut _2: std::result::Result<usize, std::num::ParseIntError>; // in scope 0 at ui/diverging-fallback-method-chain.rs:16:20: 17:33
    let mut _3: std::result::Result<&str, std::num::ParseIntError>; // in scope 0 at ui/diverging-fallback-method-chain.rs:16:20: 16:29
    let mut _4: [closure@ui/diverging-fallback-method-chain.rs:17:19: 17:22]; // in scope 0 at ui/diverging-fallback-method-chain.rs:17:19: 17:32
    let mut _5: [closure@ui/diverging-fallback-method-chain.rs:18:25: 18:28]; // in scope 0 at ui/diverging-fallback-method-chain.rs:18:25: 18:37
    let _6: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[&str];                 // in scope 0 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
    let mut _9: &[&str; 2];              // in scope 0 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
    let _10: &[&str; 2];                 // in scope 0 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _14: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/diverging-fallback-method-chain.rs:19:20: 19:21
    let mut _16: &usize;                 // in scope 0 at ui/diverging-fallback-method-chain.rs:19:20: 19:21
    let _17: &usize;                     // in scope 0 at ui/diverging-fallback-method-chain.rs:19:20: 19:21
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/diverging-fallback-method-chain.rs:16:9: 16:10
        let mut _18: &[&str; 2];         // in scope 1 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
    }

    bb0: {
        _3 = produce::<ParseIntError>() -> bb1; // scope 0 at ui/diverging-fallback-method-chain.rs:16:20: 16:29
                                         // mir::Constant
                                         // + span: ui/diverging-fallback-method-chain.rs:16:20: 16:27
                                         // + literal: Const { ty: fn() -> Result<&'static str, ParseIntError> {produce::<ParseIntError>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Result::<&str, ParseIntError>::and_then::<usize, [closure@ui/diverging-fallback-method-chain.rs:17:19: 17:22]>(move _3, move _4) -> bb2; // scope 0 at ui/diverging-fallback-method-chain.rs:16:20: 17:33
                                         // mir::Constant
                                         // + span: ui/diverging-fallback-method-chain.rs:17:10: 17:18
                                         // + literal: Const { ty: fn(Result<&str, ParseIntError>, [closure@ui/diverging-fallback-method-chain.rs:17:19: 17:22]) -> Result<usize, ParseIntError> {Result::<&str, ParseIntError>::and_then::<usize, [closure@ui/diverging-fallback-method-chain.rs:17:19: 17:22]>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Result::<usize, ParseIntError>::unwrap_or_else::<[closure@ui/diverging-fallback-method-chain.rs:18:25: 18:28]>(move _2, move _5) -> bb3; // scope 0 at ui/diverging-fallback-method-chain.rs:16:20: 18:38
                                         // mir::Constant
                                         // + span: ui/diverging-fallback-method-chain.rs:18:10: 18:24
                                         // + literal: Const { ty: fn(Result<usize, ParseIntError>, [closure@ui/diverging-fallback-method-chain.rs:18:25: 18:28]) -> usize {Result::<usize, ParseIntError>::unwrap_or_else::<[closure@ui/diverging-fallback-method-chain.rs:18:25: 18:28]>}, val: Value(<ZST>) }
    }

    bb3: {
        _18 = const _;                   // scope 1 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
                                         // mir::Constant
                                         // + span: ui/diverging-fallback-method-chain.rs:19:14: 19:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _18;                       // scope 1 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
        _9 = _10;                        // scope 1 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 1 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
        _17 = &_1;                       // scope 1 at ui/diverging-fallback-method-chain.rs:19:20: 19:21
        _16 = _17;                       // scope 1 at ui/diverging-fallback-method-chain.rs:19:20: 19:21
        _15 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _16) -> bb4; // scope 1 at ui/diverging-fallback-method-chain.rs:19:20: 19:21
                                         // mir::Constant
                                         // + span: ui/diverging-fallback-method-chain.rs:19:20: 19:21
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = [move _15];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = &_14;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = _13;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = move _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> bb5; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = _print(move _7) -> bb6;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/diverging-fallback-method-chain.rs:20:2: 20:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
    let mut _1: [&str; 2];               // in scope 0 at ui/diverging-fallback-method-chain.rs:19:14: 19:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
                                         // mir::Constant
                                         // + span: ui/diverging-fallback-method-chain.rs:19:14: 19:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/diverging-fallback-method-chain.rs:19:14: 19:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
        return;                          // scope 0 at ui/diverging-fallback-method-chain.rs:19:14: 19:18
    }
}

fn main::{closure#0}(_1: [closure@ui/diverging-fallback-method-chain.rs:17:19: 17:22], _2: &str) -> Result<usize, ParseIntError> {
    debug x => _2;                       // in scope 0 at ui/diverging-fallback-method-chain.rs:17:20: 17:21
    let mut _0: std::result::Result<usize, std::num::ParseIntError>; // return place in scope 0 at ui/diverging-fallback-method-chain.rs:17:23: 17:23
    let mut _3: &str;                    // in scope 0 at ui/diverging-fallback-method-chain.rs:17:23: 17:32

    bb0: {
        _3 = _2;                         // scope 0 at ui/diverging-fallback-method-chain.rs:17:23: 17:32
        _0 = core::str::<impl str>::parse::<usize>(move _3) -> bb1; // scope 0 at ui/diverging-fallback-method-chain.rs:17:23: 17:32
                                         // mir::Constant
                                         // + span: ui/diverging-fallback-method-chain.rs:17:25: 17:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<usize, <usize as FromStr>::Err> {core::str::<impl str>::parse::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/diverging-fallback-method-chain.rs:17:32: 17:32
    }
}

fn main::{closure#1}(_1: [closure@ui/diverging-fallback-method-chain.rs:18:25: 18:28], _2: ParseIntError) -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/diverging-fallback-method-chain.rs:18:29: 18:29
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
