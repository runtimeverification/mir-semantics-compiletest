// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn produce() -> Result<&str, T> {
    let mut _0: std::result::Result<&str, T>;
    let _1: &str;

    bb0: {
        _1 = const "22";
        _0 = Result::<&str, T>::Ok(_1);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: usize;
    let mut _2: std::result::Result<usize, std::num::ParseIntError>;
    let mut _3: std::result::Result<&str, std::num::ParseIntError>;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &usize;
    scope 1 {
        debug x => _1;
        let mut _12: &[&str; 2];
    }

    bb0: {
        _3 = produce::<ParseIntError>() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Result::<&str, ParseIntError>::and_then::<usize, [closure@ui/diverging-fallback-method-chain.rs:17:19: 17:22]>(move _3, const ZeroSized: [closure@ui/diverging-fallback-method-chain.rs:17:19: 17:22]) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = Result::<usize, ParseIntError>::unwrap_or_else::<[closure@ui/diverging-fallback-method-chain.rs:18:25: 18:28]>(move _2, const ZeroSized: [closure@ui/diverging-fallback-method-chain.rs:18:25: 18:28]) -> [return: bb3, unwind continue];
    }

    bb3: {
        _12 = const _;
        _6 = _12 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb5, unwind continue];
    }

    bb5: {
        _4 = _print(move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/diverging-fallback-method-chain.rs:17:19: 17:22], _2: &str) -> Result<usize, ParseIntError> {
    debug x => _2;
    let mut _0: std::result::Result<usize, std::num::ParseIntError>;

    bb0: {
        _0 = core::str::<impl str>::parse::<usize>(_2) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#1}(_1: [closure@ui/diverging-fallback-method-chain.rs:18:25: 18:28], _2: ParseIntError) -> usize {
    let mut _0: usize;
    let mut _3: !;

    bb0: {
        _3 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}
