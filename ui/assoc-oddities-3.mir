// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn that_odd_parse(_1: bool, _2: usize) -> u32 {
    debug c => _1;
    debug n => _2;
    let mut _0: u32;
    let _3: u32;
    let mut _6: u32;
    let mut _7: [u32; 4];
    let mut _8: usize;
    let mut _9: bool;
    scope 1 {
        debug x => const 2_u32;
        let _4: [u32; 4];
        scope 2 {
            debug a => _4;
            let _5: [u32; 4];
            scope 3 {
                debug b => _5;
            }
        }
    }

    bb0: {
        _3 = const 2_u32;
        _4 = [const 1_u32, const 2_u32, const 3_u32, const 4_u32];
        _5 = [const 5_u32, const 6_u32, const 7_u32, const 7_u32];
        switchInt(_1) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _7 = _4;
        goto -> bb3;
    }

    bb2: {
        _7 = _5;
        goto -> bb3;
    }

    bb3: {
        _8 = const 4_usize;
        _9 = Lt(_2, _8);
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _2) -> [success: bb4, unwind continue];
    }

    bb4: {
        _6 = _7[_2];
        _0 = Add(_3, move _6);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let _4: &u32;
    let _5: &u32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: u32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&u32, &u32);
    let mut _14: &u32;
    let _15: u32;
    let _16: &u32;
    let _17: &u32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: u32;
    let mut _21: u32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: &u32;
    let mut _26: &u32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }

    bb0: {
        _26 = const _;
        _3 = that_odd_parse(const true, const 1_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _1 = (_26, move _2);
        _4 = (_1.0: &u32);
        _5 = (_1.1: &u32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u32, u32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _25 = const _;
        _15 = that_odd_parse(const false, const 1_usize) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _13 = (_25, move _14);
        _16 = (_13.0: &u32);
        _17 = (_13.1: &u32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<u32, u32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 8_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4_u32;
        _0 = &_1;
        return;
    }
}
