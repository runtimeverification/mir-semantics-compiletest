// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/empty-allocation-non-null.rs:3:15: 3:15
    let mut _1: bool;                    // in scope 0 at ui/empty-allocation-non-null.rs:4:5: 4:42
    let mut _2: bool;                    // in scope 0 at ui/empty-allocation-non-null.rs:4:13: 4:41
    let mut _3: &std::option::Option<std::boxed::Box<()>>; // in scope 0 at ui/empty-allocation-non-null.rs:4:13: 4:41
    let _4: std::option::Option<std::boxed::Box<()>>; // in scope 0 at ui/empty-allocation-non-null.rs:4:13: 4:31
    let mut _5: std::boxed::Box<()>;     // in scope 0 at ui/empty-allocation-non-null.rs:4:18: 4:30
    let mut _6: ();                      // in scope 0 at ui/empty-allocation-non-null.rs:4:27: 4:29
    let mut _7: !;                       // in scope 0 at ui/empty-allocation-non-null.rs:4:5: 4:42
    let _8: std::boxed::Box<[()]>;       // in scope 0 at ui/empty-allocation-non-null.rs:6:9: 6:11
    let mut _9: std::boxed::Box<[(); 0]>; // in scope 0 at ui/empty-allocation-non-null.rs:6:25: 6:48
    let mut _10: [(); 0];                // in scope 0 at ui/empty-allocation-non-null.rs:6:45: 6:47
    let mut _11: bool;                   // in scope 0 at ui/empty-allocation-non-null.rs:7:5: 7:32
    let mut _12: bool;                   // in scope 0 at ui/empty-allocation-non-null.rs:7:13: 7:31
    let mut _13: &std::option::Option<std::boxed::Box<[()]>>; // in scope 0 at ui/empty-allocation-non-null.rs:7:13: 7:31
    let _14: std::option::Option<std::boxed::Box<[()]>>; // in scope 0 at ui/empty-allocation-non-null.rs:7:13: 7:21
    let mut _15: std::boxed::Box<[()]>;  // in scope 0 at ui/empty-allocation-non-null.rs:7:18: 7:20
    let mut _16: !;                      // in scope 0 at ui/empty-allocation-non-null.rs:7:5: 7:32
    let mut _17: bool;                   // in scope 0 at ui/empty-allocation-non-null.rs:10:5: 10:43
    let mut _18: bool;                   // in scope 0 at ui/empty-allocation-non-null.rs:10:13: 10:42
    let mut _19: &std::option::Option<std::boxed::Box<main::Foo>>; // in scope 0 at ui/empty-allocation-non-null.rs:10:13: 10:42
    let _20: std::option::Option<std::boxed::Box<main::Foo>>; // in scope 0 at ui/empty-allocation-non-null.rs:10:13: 10:32
    let mut _21: std::boxed::Box<main::Foo>; // in scope 0 at ui/empty-allocation-non-null.rs:10:18: 10:31
    let mut _22: main::Foo;              // in scope 0 at ui/empty-allocation-non-null.rs:10:27: 10:30
    let mut _23: !;                      // in scope 0 at ui/empty-allocation-non-null.rs:10:5: 10:43
    let mut _25: std::boxed::Box<[main::Foo; 0]>; // in scope 0 at ui/empty-allocation-non-null.rs:12:26: 12:50
    let mut _26: [main::Foo; 0];         // in scope 0 at ui/empty-allocation-non-null.rs:12:47: 12:49
    let mut _27: bool;                   // in scope 0 at ui/empty-allocation-non-null.rs:13:5: 13:32
    let mut _28: bool;                   // in scope 0 at ui/empty-allocation-non-null.rs:13:13: 13:31
    let mut _29: &std::option::Option<std::boxed::Box<[main::Foo]>>; // in scope 0 at ui/empty-allocation-non-null.rs:13:13: 13:31
    let _30: std::option::Option<std::boxed::Box<[main::Foo]>>; // in scope 0 at ui/empty-allocation-non-null.rs:13:13: 13:21
    let mut _31: std::boxed::Box<[main::Foo]>; // in scope 0 at ui/empty-allocation-non-null.rs:13:18: 13:20
    let mut _32: !;                      // in scope 0 at ui/empty-allocation-non-null.rs:13:5: 13:32
    scope 1 {
        debug xs => _8;                  // in scope 1 at ui/empty-allocation-non-null.rs:6:9: 6:11
        let _24: std::boxed::Box<[main::Foo]>; // in scope 1 at ui/empty-allocation-non-null.rs:12:9: 12:11
        scope 2 {
            debug ys => _24;             // in scope 2 at ui/empty-allocation-non-null.rs:12:9: 12:11
        }
    }

    bb0: {
        _5 = Box::<()>::new(move _6) -> bb1; // scope 0 at ui/empty-allocation-non-null.rs:4:18: 4:30
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:4:18: 4:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> Box<()> {Box::<()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Option::<Box<()>>::Some(move _5); // scope 0 at ui/empty-allocation-non-null.rs:4:13: 4:31
        _3 = &_4;                        // scope 0 at ui/empty-allocation-non-null.rs:4:13: 4:41
        _2 = Option::<Box<()>>::is_some(move _3) -> [return: bb2, unwind: bb24]; // scope 0 at ui/empty-allocation-non-null.rs:4:13: 4:41
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:4:32: 4:39
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Box<()>>) -> bool {Option::<Box<()>>::is_some}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Not(move _2);               // scope 0 at ui/empty-allocation-non-null.rs:4:5: 4:42
        drop(_4) -> bb3;                 // scope 0 at ui/empty-allocation-non-null.rs:4:41: 4:42
    }

    bb3: {
        switchInt(move _1) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/empty-allocation-non-null.rs:4:5: 4:42
    }

    bb4: {
        _7 = core::panicking::panic(const "assertion failed: Some(Box::new(())).is_some()"); // scope 0 at ui/empty-allocation-non-null.rs:4:5: 4:42
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:4:5: 4:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _9 = Box::<[(); 0]>::new(move _10) -> bb6; // scope 0 at ui/empty-allocation-non-null.rs:6:25: 6:48
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:6:25: 6:44
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn([(); 0]) -> Box<[(); 0]> {Box::<[(); 0]>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = move _9 as std::boxed::Box<[()]> (Pointer(Unsize)); // scope 0 at ui/empty-allocation-non-null.rs:6:25: 6:48
        _15 = move _8;                   // scope 1 at ui/empty-allocation-non-null.rs:7:18: 7:20
        _14 = Option::<Box<[()]>>::Some(move _15); // scope 1 at ui/empty-allocation-non-null.rs:7:13: 7:21
        _13 = &_14;                      // scope 1 at ui/empty-allocation-non-null.rs:7:13: 7:31
        _12 = Option::<Box<[()]>>::is_some(move _13) -> [return: bb7, unwind: bb23]; // scope 1 at ui/empty-allocation-non-null.rs:7:13: 7:31
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:7:22: 7:29
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Box<[()]>>) -> bool {Option::<Box<[()]>>::is_some}, val: Value(<ZST>) }
    }

    bb7: {
        _11 = Not(move _12);             // scope 1 at ui/empty-allocation-non-null.rs:7:5: 7:32
        drop(_14) -> bb8;                // scope 1 at ui/empty-allocation-non-null.rs:7:31: 7:32
    }

    bb8: {
        switchInt(move _11) -> [0: bb10, otherwise: bb9]; // scope 1 at ui/empty-allocation-non-null.rs:7:5: 7:32
    }

    bb9: {
        _16 = core::panicking::panic(const "assertion failed: Some(xs).is_some()"); // scope 1 at ui/empty-allocation-non-null.rs:7:5: 7:32
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:7:5: 7:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _21 = Box::<Foo>::new(move _22) -> bb11; // scope 1 at ui/empty-allocation-non-null.rs:10:18: 10:31
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:10:18: 10:26
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = Option::<Box<Foo>>::Some(move _21); // scope 1 at ui/empty-allocation-non-null.rs:10:13: 10:32
        _19 = &_20;                      // scope 1 at ui/empty-allocation-non-null.rs:10:13: 10:42
        _18 = Option::<Box<Foo>>::is_some(move _19) -> [return: bb12, unwind: bb22]; // scope 1 at ui/empty-allocation-non-null.rs:10:13: 10:42
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:10:33: 10:40
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Box<Foo>>) -> bool {Option::<Box<Foo>>::is_some}, val: Value(<ZST>) }
    }

    bb12: {
        _17 = Not(move _18);             // scope 1 at ui/empty-allocation-non-null.rs:10:5: 10:43
        drop(_20) -> bb13;               // scope 1 at ui/empty-allocation-non-null.rs:10:42: 10:43
    }

    bb13: {
        switchInt(move _17) -> [0: bb15, otherwise: bb14]; // scope 1 at ui/empty-allocation-non-null.rs:10:5: 10:43
    }

    bb14: {
        _23 = core::panicking::panic(const "assertion failed: Some(Box::new(Foo)).is_some()"); // scope 1 at ui/empty-allocation-non-null.rs:10:5: 10:43
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:10:5: 10:43
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _25 = Box::<[Foo; 0]>::new(move _26) -> bb16; // scope 1 at ui/empty-allocation-non-null.rs:12:26: 12:50
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:12:26: 12:46
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn([Foo; 0]) -> Box<[Foo; 0]> {Box::<[Foo; 0]>::new}, val: Value(<ZST>) }
    }

    bb16: {
        _24 = move _25 as std::boxed::Box<[main::Foo]> (Pointer(Unsize)); // scope 1 at ui/empty-allocation-non-null.rs:12:26: 12:50
        _31 = move _24;                  // scope 2 at ui/empty-allocation-non-null.rs:13:18: 13:20
        _30 = Option::<Box<[Foo]>>::Some(move _31); // scope 2 at ui/empty-allocation-non-null.rs:13:13: 13:21
        _29 = &_30;                      // scope 2 at ui/empty-allocation-non-null.rs:13:13: 13:31
        _28 = Option::<Box<[Foo]>>::is_some(move _29) -> [return: bb17, unwind: bb21]; // scope 2 at ui/empty-allocation-non-null.rs:13:13: 13:31
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:13:22: 13:29
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Box<[Foo]>>) -> bool {Option::<Box<[Foo]>>::is_some}, val: Value(<ZST>) }
    }

    bb17: {
        _27 = Not(move _28);             // scope 2 at ui/empty-allocation-non-null.rs:13:5: 13:32
        drop(_30) -> bb18;               // scope 2 at ui/empty-allocation-non-null.rs:13:31: 13:32
    }

    bb18: {
        switchInt(move _27) -> [0: bb20, otherwise: bb19]; // scope 2 at ui/empty-allocation-non-null.rs:13:5: 13:32
    }

    bb19: {
        _32 = core::panicking::panic(const "assertion failed: Some(ys).is_some()"); // scope 2 at ui/empty-allocation-non-null.rs:13:5: 13:32
                                         // mir::Constant
                                         // + span: ui/empty-allocation-non-null.rs:13:5: 13:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        return;                          // scope 0 at ui/empty-allocation-non-null.rs:14:2: 14:2
    }

    bb21 (cleanup): {
        drop(_30) -> bb25;               // scope 2 at ui/empty-allocation-non-null.rs:13:31: 13:32
    }

    bb22 (cleanup): {
        drop(_20) -> bb25;               // scope 1 at ui/empty-allocation-non-null.rs:10:42: 10:43
    }

    bb23 (cleanup): {
        drop(_14) -> bb25;               // scope 1 at ui/empty-allocation-non-null.rs:7:31: 7:32
    }

    bb24 (cleanup): {
        drop(_4) -> bb25;                // scope 0 at ui/empty-allocation-non-null.rs:4:41: 4:42
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at ui/empty-allocation-non-null.rs:3:1: 14:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/empty-allocation-non-null.rs:6:36: 6:37

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/empty-allocation-non-null.rs:6:36: 6:37
        return;                          // scope 0 at ui/empty-allocation-non-null.rs:6:36: 6:37
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/empty-allocation-non-null.rs:12:38: 12:39

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/empty-allocation-non-null.rs:12:38: 12:39
        return;                          // scope 0 at ui/empty-allocation-non-null.rs:12:38: 12:39
    }
}
