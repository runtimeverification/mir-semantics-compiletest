// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<i32>;
    let mut _2: (&i32, &i32);
    let mut _3: &i32;
    let _4: i32;
    let mut _5: i32;
    let mut _6: i32;
    let _7: ();
    let mut _8: std::boxed::Box<i32>;
    let mut _9: std::boxed::Box<fn() {main}>;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: i32;
    let mut _15: i32;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: *const i32;
    scope 1 {
        debug x => _1;
        let _10: &i32;
        let _11: &i32;
        let mut _19: &i32;
        let mut _21: *const ();
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: usize;
        let mut _25: usize;
        let mut _26: bool;
        scope 2 {
        }
        scope 3 {
            debug left_val => _10;
            debug right_val => _11;
            let _16: core::panicking::AssertKind;
            scope 4 {
                debug kind => _16;
            }
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 0_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _19 = const _;
        _20 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _21 = _20 as *const () (PtrToPtr);
        _22 = _21 as usize (Transmute);
        _23 = AlignOf(i32);
        _24 = Sub(_23, const 1_usize);
        _25 = BitAnd(_22, _24);
        _26 = Eq(_25, const 0_usize);
        assert(_26, "misaligned pointer dereference: address must be a multiple of {} but is {}", _23, _22) -> [success: bb7, unwind unreachable];
    }

    bb2: {
        _9 = Box::<fn() {main}>::new(main) -> [return: bb3, unwind continue];
    }

    bb3: {
        drop(_9) -> [return: bb4, unwind continue];
    }

    bb4: {
        _6 = const 0_i32;
        _4 = Add(move _5, move _6);
        _3 = &_4;
        _2 = (_19, move _3);
        _10 = (_2.0: &i32);
        _11 = (_2.1: &i32);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<i32, i32>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb6: {
        return;
    }

    bb7: {
        _5 = (*_20);
        _8 = move _1;
        _7 = std::mem::drop::<Box<i32>>(move _8) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 0_i32;
        _0 = &_1;
        return;
    }
}
