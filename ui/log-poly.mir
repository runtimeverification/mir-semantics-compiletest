// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/log-poly.rs:3:10: 3:15>::fmt(_1: &Numbers, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Three";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &i32;
    let _11: i32;
    let _12: ();
    let mut _13: std::fmt::Arguments<'_>;
    let mut _14: &[&str];
    let _15: &[&str; 2];
    let _16: [&str; 2];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &f64;
    let _22: f64;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let _26: &[&str; 2];
    let _27: [&str; 2];
    let mut _28: &[core::fmt::rt::Argument<'_>];
    let _29: &[core::fmt::rt::Argument<'_>; 1];
    let _30: [core::fmt::rt::Argument<'_>; 1];
    let mut _31: core::fmt::rt::Argument<'_>;
    let _32: &Numbers;
    let _33: Numbers;
    let _34: ();
    let mut _35: std::fmt::Arguments<'_>;
    let mut _36: &[&str];
    let _37: &[&str; 2];
    let _38: [&str; 2];
    let mut _39: &[core::fmt::rt::Argument<'_>];
    let _40: &[core::fmt::rt::Argument<'_>; 1];
    let _41: [core::fmt::rt::Argument<'_>; 1];
    let mut _42: core::fmt::rt::Argument<'_>;
    let _43: &std::vec::Vec<i32>;
    let _44: std::vec::Vec<i32>;
    let mut _45: std::boxed::Box<[i32]>;
    let mut _46: usize;
    let mut _47: usize;
    let mut _48: *mut u8;
    let mut _49: std::boxed::Box<[i32; 1]>;
    let mut _50: *const [i32; 1];
    let mut _51: *const ();
    let mut _52: usize;
    let mut _53: usize;
    let mut _54: usize;
    let mut _55: usize;
    let mut _56: bool;
    scope 1 {
    }

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (PointerCoercion(Unsize));
        _11 = const 1_i32;
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_10) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _16 = [const "", const "\n"];
        _15 = &_16;
        _14 = _15 as &[&str] (PointerCoercion(Unsize));
        _22 = const 2f64;
        _21 = &_22;
        _20 = core::fmt::rt::Argument::<'_>::new_debug::<f64>(_21) -> [return: bb4, unwind continue];
    }

    bb4: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        _12 = _print(move _13) -> [return: bb6, unwind continue];
    }

    bb6: {
        _27 = [const "", const "\n"];
        _26 = &_27;
        _25 = _26 as &[&str] (PointerCoercion(Unsize));
        _32 = &_33;
        _31 = core::fmt::rt::Argument::<'_>::new_debug::<Numbers>(_32) -> [return: bb7, unwind continue];
    }

    bb7: {
        _30 = [move _31];
        _29 = &_30;
        _28 = _29 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _28) -> [return: bb8, unwind continue];
    }

    bb8: {
        _23 = _print(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        _38 = [const "", const "\n"];
        _37 = &_38;
        _36 = _37 as &[&str] (PointerCoercion(Unsize));
        _46 = SizeOf([i32; 1]);
        _47 = AlignOf([i32; 1]);
        _48 = alloc::alloc::exchange_malloc(move _46, move _47) -> [return: bb10, unwind continue];
    }

    bb10: {
        _49 = ShallowInitBox(move _48, [i32; 1]);
        _50 = (((_49.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _51 = _50 as *const () (PtrToPtr);
        _52 = _51 as usize (Transmute);
        _53 = AlignOf(i32);
        _54 = Sub(_53, const 1_usize);
        _55 = BitAnd(_52, _54);
        _56 = Eq(_55, const 0_usize);
        assert(_56, "misaligned pointer dereference: address must be a multiple of {} but is {}", _53, _52) -> [success: bb18, unwind unreachable];
    }

    bb11: {
        _43 = &_44;
        _42 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(_43) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _41 = [move _42];
        _40 = &_41;
        _39 = _40 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _35 = Arguments::<'_>::new_v1(move _36, move _39) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _34 = _print(move _35) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        drop(_44) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_44) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18: {
        (*_50) = [const 4_i32];
        _45 = move _49 as std::boxed::Box<[i32]> (PointerCoercion(Unsize));
        _44 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _45) -> [return: bb11, unwind continue];
    }
}
