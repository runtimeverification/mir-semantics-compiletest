// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/log-poly.rs:3:10: 3:15>::fmt(_1: &Numbers, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;

    bb0: {
        _3 = const "Three";
        _0 = Formatter::<'_>::write_str(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: &[core::fmt::rt::Argument<'_>];
    let _12: &[core::fmt::rt::Argument<'_>; 1];
    let _13: [core::fmt::rt::Argument<'_>; 1];
    let mut _14: core::fmt::rt::Argument<'_>;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: ();
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &std::vec::Vec<i32>;
    let _30: std::vec::Vec<i32>;
    let mut _31: std::boxed::Box<[i32]>;
    let mut _32: usize;
    let mut _33: usize;
    let mut _34: *mut u8;
    let mut _35: std::boxed::Box<[i32; 1]>;
    let mut _36: &[&str; 2];
    let mut _37: &Numbers;
    let mut _38: &[&str; 2];
    let mut _39: &f64;
    let mut _40: &[&str; 2];
    let mut _41: &i32;
    let mut _42: &[&str; 2];
    let mut _43: *const [i32; 1];
    let mut _44: *const ();
    let mut _45: usize;
    let mut _46: usize;
    let mut _47: usize;
    let mut _48: usize;
    let mut _49: bool;
    scope 1 {
    }

    bb0: {
        _42 = const _;
        _3 = _42 as &[&str] (Pointer(Unsize));
        _41 = const _;
        _7 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_41) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _1 = _print(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _40 = const _;
        _10 = _40 as &[&str] (Pointer(Unsize));
        _39 = const _;
        _14 = core::fmt::rt::Argument::<'_>::new_debug::<f64>(_39) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = [move _14];
        _12 = &_13;
        _11 = _12 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_v1(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb5: {
        _8 = _print(move _9) -> [return: bb6, unwind continue];
    }

    bb6: {
        _38 = const _;
        _17 = _38 as &[&str] (Pointer(Unsize));
        _37 = const _;
        _21 = core::fmt::rt::Argument::<'_>::new_debug::<Numbers>(_37) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb8, unwind continue];
    }

    bb8: {
        _15 = _print(move _16) -> [return: bb9, unwind continue];
    }

    bb9: {
        _36 = const _;
        _24 = _36 as &[&str] (Pointer(Unsize));
        _32 = SizeOf([i32; 1]);
        _33 = AlignOf([i32; 1]);
        _34 = alloc::alloc::exchange_malloc(move _32, move _33) -> [return: bb10, unwind continue];
    }

    bb10: {
        _35 = ShallowInitBox(move _34, [i32; 1]);
        _43 = (((_35.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _44 = _43 as *const () (PtrToPtr);
        _45 = _44 as usize (Transmute);
        _46 = AlignOf(i32);
        _47 = Sub(_46, const 1_usize);
        _48 = BitAnd(_45, _47);
        _49 = Eq(_48, const 0_usize);
        assert(_49, "misaligned pointer dereference: address must be a multiple of {} but is {}", _46, _45) -> [success: bb18, unwind unreachable];
    }

    bb11: {
        _29 = &_30;
        _28 = core::fmt::rt::Argument::<'_>::new_debug::<Vec<i32>>(_29) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _27 = [move _28];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _23 = Arguments::<'_>::new_v1(move _24, move _25) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _22 = _print(move _23) -> [return: bb14, unwind: bb16];
    }

    bb14: {
        drop(_30) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_30) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18: {
        (*_43) = [const 4_i32];
        _31 = move _35 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _30 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _31) -> [return: bb11, unwind continue];
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Numbers = {
    let mut _0: &Numbers;
    let mut _1: Numbers;

    bb0: {
        _1 = Numbers::Three;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 2f64;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
