// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: for<'c> fn(fn(&'c fn(&'c ())), fn(&'c fn(&'c ())), fn(&'c fn(&'c ())), fn(&'c fn(&'c ())))) -> fn(fn(&fn(&())), fn(&fn(&())), fn(&fn(&())), fn(&fn(&()))) {
    debug x => _1;                       // in scope 0 at ui/lifetimes/issue-67498.rs:6:5: 6:6
    let mut _0: fn(fn(&fn(&())), fn(&fn(&())), fn(&fn(&())), fn(&fn(&()))); // return place in scope 0 at ui/lifetimes/issue-67498.rs:12:6: 17:2

    bb0: {
        _0 = _1;                         // scope 0 at ui/lifetimes/issue-67498.rs:18:5: 18:6
        return;                          // scope 0 at ui/lifetimes/issue-67498.rs:19:2: 19:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/issue-67498.rs:21:11: 21:11

    bb0: {
        return;                          // scope 0 at ui/lifetimes/issue-67498.rs:21:13: 21:13
    }
}
