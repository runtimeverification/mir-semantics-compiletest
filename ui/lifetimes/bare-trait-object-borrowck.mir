// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn new_format(_1: I, _2: &str, _3: F) -> FormatWith<'_, I, F> {
    debug iter => _1;
    debug separator => _2;
    debug f => _3;
    let mut _0: FormatWith<'_, I, F>;
    let mut _4: std::cell::RefCell<std::option::Option<(I, F)>>;
    let mut _5: std::option::Option<(I, F)>;
    let mut _6: (I, F);

    bb0: {
        _6 = (move _1, move _3);
        _5 = Option::<(I, F)>::Some(move _6);
        _4 = RefCell::<Option<(I, F)>>::new(move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = FormatWith::<'_, I, F> { sep: _2, inner: move _4 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: FormatWith<'_, std::ops::Range<i32>, [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44]>;
    let mut _2: std::ops::Range<i32>;
    let _3: &str;
    scope 1 {
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 32_i32 };
        _3 = const " | ";
        _1 = new_format::<std::ops::Range<i32>, [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44]>(move _2, _3, const ZeroSized: [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44]) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44], _2: i32, _3: &mut dyn for<'a> FnMut(&'a (dyn std::fmt::Display + 'a)) -> Result<(), std::fmt::Error>) -> Result<(), std::fmt::Error> {
    debug i => _2;
    debug f => _3;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _4: (&dyn std::fmt::Display,);
    let mut _5: &dyn std::fmt::Display;
    let _6: &std::fmt::Arguments<'_>;
    let _7: std::fmt::Arguments<'_>;
    let mut _8: &[&str];
    let mut _9: &[core::fmt::rt::Argument<'_>];
    let _10: &[core::fmt::rt::Argument<'_>; 1];
    let _11: [core::fmt::rt::Argument<'_>; 1];
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &i32;
    let mut _14: &[&str; 1];

    bb0: {
        _14 = const _;
        _8 = _14 as &[&str] (Pointer(Unsize));
        _13 = &_2;
        _12 = core::fmt::rt::Argument::<'_>::new_lower_hex::<i32>(_13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = [move _12];
        _10 = &_11;
        _9 = _10 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _7 = Arguments::<'_>::new_v1(move _8, move _9) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = &_7;
        _5 = _6 as &dyn std::fmt::Display (Pointer(Unsize));
        _4 = (move _5,);
        _0 = <dyn for<'a> FnMut(&'a (dyn std::fmt::Display + 'a)) -> Result<(), std::fmt::Error> as FnMut<(&dyn std::fmt::Display,)>>::call_mut(_3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "0x"];
        _0 = &_1;
        return;
    }
}
