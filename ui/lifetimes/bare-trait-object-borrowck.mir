// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn new_format(_1: I, _2: &str, _3: F) -> FormatWith<'_, I, F> {
    debug iter => _1;                    // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:14:29: 14:33
    debug separator => _2;               // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:14:38: 14:47
    debug f => _3;                       // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:14:58: 14:59
    let mut _0: FormatWith<'_, I, F>;    // return place in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:14:67: 14:87
    let mut _4: &str;                    // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:23: 19:32
    let mut _5: std::cell::RefCell<std::option::Option<(I, F)>>; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:41: 19:70
    let mut _6: std::option::Option<(I, F)>; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:54: 19:69
    let mut _7: (I, F);                  // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:59: 19:68
    let mut _8: I;                       // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:60: 19:64
    let mut _9: F;                       // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:66: 19:67

    bb0: {
        _4 = _2;                         // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:23: 19:32
        _8 = move _1;                    // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:60: 19:64
        _9 = move _3;                    // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:66: 19:67
        _7 = (move _8, move _9);         // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:59: 19:68
        _6 = Option::<(I, F)>::Some(move _7); // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:54: 19:69
        _5 = RefCell::<Option<(I, F)>>::new(move _6) -> bb1; // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:41: 19:70
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object-borrowck.rs:19:41: 19:53
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Option<(I, F)>) -> RefCell<Option<(I, F)>> {RefCell::<Option<(I, F)>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = FormatWith::<'_, I, F> { sep: move _4, inner: move _5 }; // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:19:5: 19:72
        return;                          // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:20:2: 20:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:22:11: 22:11
    let mut _1: FormatWith<'_, std::ops::Range<i32>, [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44]>; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:13: 23:75
    let mut _2: std::ops::Range<i32>;    // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:24: 23:29
    let mut _3: &str;                    // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:31: 23:36
    let _4: &str;                        // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:31: 23:36
    let mut _5: [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44]; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:74
    scope 1 {
    }

    bb0: {
        _2 = std::ops::Range::<i32> { start: const 0_i32, end: const 32_i32 }; // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:24: 23:29
        _4 = const " | ";                // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:31: 23:36
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object-borrowck.rs:23:31: 23:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:31: 23:36
        _1 = new_format::<std::ops::Range<i32>, [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44]>(move _2, move _3, move _5) -> bb1; // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:13: 23:75
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object-borrowck.rs:23:13: 23:23
                                         // + literal: Const { ty: for<'a> fn(std::ops::Range<i32>, &'a str, [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44]) -> FormatWith<'a, std::ops::Range<i32>, [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44]> {new_format::<std::ops::Range<i32>, [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:24:2: 24:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/lifetimes/bare-trait-object-borrowck.rs:23:38: 23:44], _2: i32, _3: &mut dyn for<'a> FnMut(&'a (dyn std::fmt::Display + 'a)) -> Result<(), std::fmt::Error>) -> Result<(), std::fmt::Error> {
    debug i => _2;                       // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:39: 23:40
    debug f => _3;                       // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:42: 23:43
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:45: 23:45
    let mut _4: &mut dyn for<'a> std::ops::FnMut(&'a (dyn std::fmt::Display + 'a)) -> std::result::Result<(), std::fmt::Error>; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:45: 23:46
    let mut _5: (&dyn std::fmt::Display,); // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:45: 23:74
    let mut _6: &dyn std::fmt::Display;  // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:47: 23:73
    let mut _7: &std::fmt::Arguments<'_>; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:47: 23:73
    let _8: &std::fmt::Arguments<'_>;    // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:47: 23:73
    let _9: std::fmt::Arguments<'_>;     // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
    let mut _10: &[&str];                // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
    let mut _11: &[&str; 1];             // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
    let _12: &[&str; 1];                 // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:71: 23:72
    let mut _18: &i32;                   // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:71: 23:72
    let _19: &i32;                       // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:71: 23:72
    let mut _20: &[&str; 1];             // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69

    bb0: {
        _4 = &mut (*_3);                 // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:45: 23:46
        _20 = const _;                   // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _12 = _20;                       // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
        _11 = _12;                       // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
        _19 = &_2;                       // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:71: 23:72
        _18 = _19;                       // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:71: 23:72
        _17 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<i32>(move _18) -> bb1; // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:71: 23:72
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object-borrowck.rs:23:71: 23:72
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = [move _17];                // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
        _15 = &_16;                      // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
        _14 = _15;                       // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb2; // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object-borrowck.rs:23:48: 23:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_9;                        // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:47: 23:73
        _7 = _8;                         // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:47: 23:73
        _6 = move _7 as &dyn std::fmt::Display (Pointer(Unsize)); // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:47: 23:73
        _5 = (move _6,);                 // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:45: 23:74
        _0 = <dyn for<'a> FnMut(&'a (dyn std::fmt::Display + 'a)) -> Result<(), std::fmt::Error> as FnMut<(&dyn std::fmt::Display,)>>::call_mut(move _4, move _5) -> bb3; // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:45: 23:74
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object-borrowck.rs:23:45: 23:46
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut dyn for<'a> FnMut(&'a (dyn std::fmt::Display + 'a)) -> Result<(), std::fmt::Error>, (&dyn std::fmt::Display,)) -> <dyn for<'a> FnMut(&'a (dyn std::fmt::Display + 'a)) -> Result<(), std::fmt::Error> as FnOnce<(&dyn std::fmt::Display,)>>::Output {<dyn for<'a> FnMut(&'a (dyn std::fmt::Display + 'a)) -> Result<(), std::fmt::Error> as FnMut<(&dyn std::fmt::Display,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:74: 23:74
    }
}

promoted[0] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
    let mut _1: [&str; 1];               // in scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69

    bb0: {
        _1 = [const "0x"];               // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
        return;                          // scope 0 at ui/lifetimes/bare-trait-object-borrowck.rs:23:61: 23:69
    }
}
