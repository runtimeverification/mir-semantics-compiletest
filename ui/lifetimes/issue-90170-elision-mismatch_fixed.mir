// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &mut Vec<&u8>, _2: &u8) -> () {
    debug x => _1;                       // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:16: 3:17
    debug y => _2;                       // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:37: 3:38
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:48: 3:48
    let _3: ();                          // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:50: 3:59
    let mut _4: &mut std::vec::Vec<&u8>; // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:50: 3:59
    let mut _5: &u8;                     // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:57: 3:58

    bb0: {
        _4 = &mut (*_1);                 // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:50: 3:59
        _5 = _2;                         // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:57: 3:58
        _3 = Vec::<&u8>::push(move _4, move _5) -> bb1; // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:50: 3:59
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:52: 3:56
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<&u8>, &u8) {Vec::<&u8>::push}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:3:62: 3:62
    }
}

fn foo2(_1: &mut Vec<&u8>, _2: &u8) -> () {
    debug x => _1;                       // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:17: 5:18
    debug y => _2;                       // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:38: 5:39
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:49: 5:49
    let _3: ();                          // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:51: 5:60
    let mut _4: &mut std::vec::Vec<&u8>; // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:51: 5:60
    let mut _5: &u8;                     // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:58: 5:59

    bb0: {
        _4 = &mut (*_1);                 // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:51: 5:60
        _5 = _2;                         // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:58: 5:59
        _3 = Vec::<&u8>::push(move _4, move _5) -> bb1; // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:51: 5:60
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:53: 5:57
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<&u8>, &u8) {Vec::<&u8>::push}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:5:63: 5:63
    }
}

fn foo3(_1: &[u8], _2: &mut Vec<&u8>, _3: &u8) -> () {
    debug _other => _1;                  // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:17: 7:23
    debug x => _2;                       // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:35: 7:36
    debug y => _3;                       // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:56: 7:57
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:67: 7:67
    let _4: ();                          // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:69: 7:78
    let mut _5: &mut std::vec::Vec<&u8>; // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:69: 7:78
    let mut _6: &u8;                     // in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:76: 7:77

    bb0: {
        _5 = &mut (*_2);                 // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:69: 7:78
        _6 = _3;                         // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:76: 7:77
        _4 = Vec::<&u8>::push(move _5, move _6) -> bb1; // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:69: 7:78
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:71: 7:75
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<&u8>, &u8) {Vec::<&u8>::push}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:7:81: 7:81
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:9:11: 9:11

    bb0: {
        return;                          // scope 0 at ui/lifetimes/issue-90170-elision-mismatch_fixed.rs:9:13: 9:13
    }
}
