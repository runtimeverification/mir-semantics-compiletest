// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn next_u32(_1: &mut dyn for<'a> FnMut(&'a mut [u8])) -> () {
    debug fill_buf => _1;                // in scope 0 at ui/lifetimes/bare-trait-object.rs:6:13: 6:21
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:6:46: 6:46
    let mut _2: [u8; 4];                 // in scope 0 at ui/lifetimes/bare-trait-object.rs:7:9: 7:16
    let _3: ();                          // in scope 0 at ui/lifetimes/bare-trait-object.rs:8:5: 8:23
    let mut _4: &mut dyn for<'a> std::ops::FnMut(&'a mut [u8]); // in scope 0 at ui/lifetimes/bare-trait-object.rs:8:5: 8:13
    let mut _5: (&mut [u8],);            // in scope 0 at ui/lifetimes/bare-trait-object.rs:8:5: 8:23
    let mut _6: &mut [u8];               // in scope 0 at ui/lifetimes/bare-trait-object.rs:8:14: 8:22
    let mut _7: &mut [u8; 4];            // in scope 0 at ui/lifetimes/bare-trait-object.rs:8:14: 8:22
    let mut _8: &mut [u8; 4];            // in scope 0 at ui/lifetimes/bare-trait-object.rs:8:14: 8:22
    scope 1 {
        debug buf => _2;                 // in scope 1 at ui/lifetimes/bare-trait-object.rs:7:9: 7:16
    }

    bb0: {
        _2 = [const 0_u8; 4];            // scope 0 at ui/lifetimes/bare-trait-object.rs:7:28: 7:34
        _4 = &mut (*_1);                 // scope 1 at ui/lifetimes/bare-trait-object.rs:8:5: 8:13
        _8 = &mut _2;                    // scope 1 at ui/lifetimes/bare-trait-object.rs:8:14: 8:22
        _7 = &mut (*_8);                 // scope 1 at ui/lifetimes/bare-trait-object.rs:8:14: 8:22
        _6 = move _7 as &mut [u8] (Pointer(Unsize)); // scope 1 at ui/lifetimes/bare-trait-object.rs:8:14: 8:22
        _5 = (move _6,);                 // scope 1 at ui/lifetimes/bare-trait-object.rs:8:5: 8:23
        _3 = <dyn for<'a> FnMut(&'a mut [u8]) as FnMut<(&mut [u8],)>>::call_mut(move _4, move _5) -> bb1; // scope 1 at ui/lifetimes/bare-trait-object.rs:8:5: 8:23
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object.rs:8:5: 8:13
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut dyn for<'a> FnMut(&'a mut [u8]), (&mut [u8],)) -> <dyn for<'a> FnMut(&'a mut [u8]) as FnOnce<(&mut [u8],)>>::Output {<dyn for<'a> FnMut(&'a mut [u8]) as FnMut<(&mut [u8],)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:9:2: 9:2
    }
}

next_u32::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:7:32: 7:33

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/lifetimes/bare-trait-object.rs:7:32: 7:33
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:7:32: 7:33
    }
}

next_u32::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:7:23: 7:24

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/lifetimes/bare-trait-object.rs:7:23: 7:24
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:7:23: 7:24
    }
}

fn explicit(_1: &mut dyn for<'a> FnMut(&'a mut [u8])) -> () {
    debug fill_buf => _1;                // in scope 0 at ui/lifetimes/bare-trait-object.rs:11:13: 11:21
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:11:50: 11:50
    let mut _2: [u8; 4];                 // in scope 0 at ui/lifetimes/bare-trait-object.rs:12:9: 12:16
    let _3: ();                          // in scope 0 at ui/lifetimes/bare-trait-object.rs:13:5: 13:23
    let mut _4: &mut dyn for<'a> std::ops::FnMut(&'a mut [u8]); // in scope 0 at ui/lifetimes/bare-trait-object.rs:13:5: 13:13
    let mut _5: (&mut [u8],);            // in scope 0 at ui/lifetimes/bare-trait-object.rs:13:5: 13:23
    let mut _6: &mut [u8];               // in scope 0 at ui/lifetimes/bare-trait-object.rs:13:14: 13:22
    let mut _7: &mut [u8; 4];            // in scope 0 at ui/lifetimes/bare-trait-object.rs:13:14: 13:22
    let mut _8: &mut [u8; 4];            // in scope 0 at ui/lifetimes/bare-trait-object.rs:13:14: 13:22
    scope 1 {
        debug buf => _2;                 // in scope 1 at ui/lifetimes/bare-trait-object.rs:12:9: 12:16
    }

    bb0: {
        _2 = [const 0_u8; 4];            // scope 0 at ui/lifetimes/bare-trait-object.rs:12:28: 12:34
        _4 = &mut (*_1);                 // scope 1 at ui/lifetimes/bare-trait-object.rs:13:5: 13:13
        _8 = &mut _2;                    // scope 1 at ui/lifetimes/bare-trait-object.rs:13:14: 13:22
        _7 = &mut (*_8);                 // scope 1 at ui/lifetimes/bare-trait-object.rs:13:14: 13:22
        _6 = move _7 as &mut [u8] (Pointer(Unsize)); // scope 1 at ui/lifetimes/bare-trait-object.rs:13:14: 13:22
        _5 = (move _6,);                 // scope 1 at ui/lifetimes/bare-trait-object.rs:13:5: 13:23
        _3 = <dyn for<'a> FnMut(&'a mut [u8]) as FnMut<(&mut [u8],)>>::call_mut(move _4, move _5) -> bb1; // scope 1 at ui/lifetimes/bare-trait-object.rs:13:5: 13:23
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object.rs:13:5: 13:13
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut dyn for<'a> FnMut(&'a mut [u8]), (&mut [u8],)) -> <dyn for<'a> FnMut(&'a mut [u8]) as FnOnce<(&mut [u8],)>>::Output {<dyn for<'a> FnMut(&'a mut [u8]) as FnMut<(&mut [u8],)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:14:2: 14:2
    }
}

explicit::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:12:32: 12:33

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/lifetimes/bare-trait-object.rs:12:32: 12:33
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:12:32: 12:33
    }
}

explicit::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:12:23: 12:24

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/lifetimes/bare-trait-object.rs:12:23: 12:24
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:12:23: 12:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:16:11: 16:11
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                        scope 6 {
                            scope 7 {
                                scope 8 {
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:25:2: 25:2
    }
}

promoted[0] in main: &for<'a> fn(&'a mut (dyn for<'a> FnMut(&'a mut [u8]) + 'a)) {explicit} = {
    let mut _0: &for<'a> fn(&'a mut (dyn for<'a> std::ops::FnMut(&'a mut [u8]) + 'a)) {explicit}; // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:24:49: 24:58
    let mut _1: for<'a> fn(&'a mut (dyn for<'a> std::ops::FnMut(&'a mut [u8]) + 'a)) {explicit}; // in scope 0 at ui/lifetimes/bare-trait-object.rs:24:50: 24:58

    bb0: {
        _1 = explicit;                   // scope 0 at ui/lifetimes/bare-trait-object.rs:24:50: 24:58
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object.rs:24:50: 24:58
                                         // + literal: Const { ty: for<'a> fn(&'a mut (dyn for<'a> FnMut(&'a mut [u8]) + 'a)) {explicit}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/lifetimes/bare-trait-object.rs:24:49: 24:58
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:24:49: 24:58
    }
}

promoted[1] in main: &for<'a> fn(&'a mut (dyn for<'a> FnMut(&'a mut [u8]) + 'a)) {next_u32} = {
    let mut _0: &for<'a> fn(&'a mut (dyn for<'a> std::ops::FnMut(&'a mut [u8]) + 'a)) {next_u32}; // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:22:49: 22:58
    let mut _1: for<'a> fn(&'a mut (dyn for<'a> std::ops::FnMut(&'a mut [u8]) + 'a)) {next_u32}; // in scope 0 at ui/lifetimes/bare-trait-object.rs:22:50: 22:58

    bb0: {
        _1 = next_u32;                   // scope 0 at ui/lifetimes/bare-trait-object.rs:22:50: 22:58
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object.rs:22:50: 22:58
                                         // + literal: Const { ty: for<'a> fn(&'a mut (dyn for<'a> FnMut(&'a mut [u8]) + 'a)) {next_u32}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/lifetimes/bare-trait-object.rs:22:49: 22:58
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:22:49: 22:58
    }
}

promoted[2] in main: &for<'a> fn(&'a mut (dyn for<'a> FnMut(&'a mut [u8]) + 'a)) {explicit} = {
    let mut _0: &for<'a> fn(&'a mut (dyn for<'a> std::ops::FnMut(&'a mut [u8]) + 'a)) {explicit}; // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:20:45: 20:54
    let mut _1: for<'a> fn(&'a mut (dyn for<'a> std::ops::FnMut(&'a mut [u8]) + 'a)) {explicit}; // in scope 0 at ui/lifetimes/bare-trait-object.rs:20:46: 20:54

    bb0: {
        _1 = explicit;                   // scope 0 at ui/lifetimes/bare-trait-object.rs:20:46: 20:54
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object.rs:20:46: 20:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut (dyn for<'a> FnMut(&'a mut [u8]) + 'a)) {explicit}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/lifetimes/bare-trait-object.rs:20:45: 20:54
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:20:45: 20:54
    }
}

promoted[3] in main: &for<'a> fn(&'a mut (dyn for<'a> FnMut(&'a mut [u8]) + 'a)) {next_u32} = {
    let mut _0: &for<'a> fn(&'a mut (dyn for<'a> std::ops::FnMut(&'a mut [u8]) + 'a)) {next_u32}; // return place in scope 0 at ui/lifetimes/bare-trait-object.rs:18:45: 18:54
    let mut _1: for<'a> fn(&'a mut (dyn for<'a> std::ops::FnMut(&'a mut [u8]) + 'a)) {next_u32}; // in scope 0 at ui/lifetimes/bare-trait-object.rs:18:46: 18:54

    bb0: {
        _1 = next_u32;                   // scope 0 at ui/lifetimes/bare-trait-object.rs:18:46: 18:54
                                         // mir::Constant
                                         // + span: ui/lifetimes/bare-trait-object.rs:18:46: 18:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut (dyn for<'a> FnMut(&'a mut [u8]) + 'a)) {next_u32}, val: Value(<ZST>) }
        _0 = &_1;                        // scope 0 at ui/lifetimes/bare-trait-object.rs:18:45: 18:54
        return;                          // scope 0 at ui/lifetimes/bare-trait-object.rs:18:45: 18:54
    }
}
