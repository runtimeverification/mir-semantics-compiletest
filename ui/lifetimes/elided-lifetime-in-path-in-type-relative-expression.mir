// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/elided-lifetime-in-path-in-type-relative-expression.rs:13:10: 13:10
    let mut _1: std::marker::PhantomData<&()>; // in scope 0 at ui/lifetimes/elided-lifetime-in-path-in-type-relative-expression.rs:14:13: 14:59
    scope 1 {
    }

    bb0: {
        _1 = <PhantomData<&()> as Default>::default() -> bb1; // scope 0 at ui/lifetimes/elided-lifetime-in-path-in-type-relative-expression.rs:14:13: 14:59
                                         // mir::Constant
                                         // + span: ui/lifetimes/elided-lifetime-in-path-in-type-relative-expression.rs:14:13: 14:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> PhantomData<&()> {<PhantomData<&()> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/lifetimes/elided-lifetime-in-path-in-type-relative-expression.rs:15:2: 15:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/elided-lifetime-in-path-in-type-relative-expression.rs:17:11: 17:11

    bb0: {
        return;                          // scope 0 at ui/lifetimes/elided-lifetime-in-path-in-type-relative-expression.rs:17:13: 17:13
    }
}
