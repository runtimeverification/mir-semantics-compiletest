// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn chars0(_1: (&str, &str)) -> impl Iterator<Item = char> + '_ {
    debug v => _1;                       // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:5:15: 5:16
    let mut _0: impl std::iter::Iterator<Item = char> + '_; // return place in scope 0 at ui/lifetimes/issue-105227_fixed.rs:5:42: 5:73
    let mut _2: std::str::Chars<'_>;     // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:5: 7:16
    let mut _3: &str;                    // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:5: 7:16
    let mut _4: std::str::Chars<'_>;     // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:23: 7:34
    let mut _5: &str;                    // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:23: 7:34
    let mut _6: &str;                    // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:5:15: 5:16
    let mut _7: &str;                    // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:5:15: 5:16

    bb0: {
        _6 = deref_copy (_1.0: &str);    // scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:5: 7:16
        _3 = _6;                         // scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:5: 7:16
        _2 = core::str::<impl str>::chars(move _3) -> bb1; // scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:5: 7:16
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105227_fixed.rs:7:9: 7:14
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Chars<'a> {core::str::<impl str>::chars}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = deref_copy (_1.1: &str);    // scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:23: 7:34
        _5 = _7;                         // scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:23: 7:34
        _4 = core::str::<impl str>::chars(move _5) -> bb2; // scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:23: 7:34
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105227_fixed.rs:7:27: 7:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Chars<'a> {core::str::<impl str>::chars}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <Chars<'_> as Iterator>::chain::<Chars<'_>>(move _2, move _4) -> bb3; // scope 0 at ui/lifetimes/issue-105227_fixed.rs:7:5: 7:35
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105227_fixed.rs:7:17: 7:22
                                         // + literal: Const { ty: fn(Chars<'_>, Chars<'_>) -> std::iter::Chain<Chars<'_>, <Chars<'_> as IntoIterator>::IntoIter> {<Chars<'_> as Iterator>::chain::<Chars<'_>>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/lifetimes/issue-105227_fixed.rs:9:2: 9:2
    }
}

fn chars1(_1: &str, _2: &str) -> impl Iterator<Item = char> + '_ {
    debug v0 => _1;                      // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:11:15: 11:17
    debug v1 => _2;                      // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:11:30: 11:32
    let mut _0: impl std::iter::Iterator<Item = char> + '_; // return place in scope 0 at ui/lifetimes/issue-105227_fixed.rs:11:47: 11:78
    let mut _3: std::str::Chars<'_>;     // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:13:5: 13:15
    let mut _4: &str;                    // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:13:5: 13:15
    let mut _5: std::str::Chars<'_>;     // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:13:22: 13:32
    let mut _6: &str;                    // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:13:22: 13:32

    bb0: {
        _4 = _1;                         // scope 0 at ui/lifetimes/issue-105227_fixed.rs:13:5: 13:15
        _3 = core::str::<impl str>::chars(move _4) -> bb1; // scope 0 at ui/lifetimes/issue-105227_fixed.rs:13:5: 13:15
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105227_fixed.rs:13:8: 13:13
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Chars<'a> {core::str::<impl str>::chars}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = _2;                         // scope 0 at ui/lifetimes/issue-105227_fixed.rs:13:22: 13:32
        _5 = core::str::<impl str>::chars(move _6) -> bb2; // scope 0 at ui/lifetimes/issue-105227_fixed.rs:13:22: 13:32
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105227_fixed.rs:13:25: 13:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Chars<'a> {core::str::<impl str>::chars}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = <Chars<'_> as Iterator>::chain::<Chars<'_>>(move _3, move _5) -> bb3; // scope 0 at ui/lifetimes/issue-105227_fixed.rs:13:5: 13:33
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105227_fixed.rs:13:16: 13:21
                                         // + literal: Const { ty: fn(Chars<'_>, Chars<'_>) -> std::iter::Chain<Chars<'_>, <Chars<'_> as IntoIterator>::IntoIter> {<Chars<'_> as Iterator>::chain::<Chars<'_>>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/lifetimes/issue-105227_fixed.rs:15:2: 15:2
    }
}

fn chars2(_1: &str, _2: &str, _3: &str) -> (impl Iterator<Item = char> + '_, &str) {
    debug v0 => _1;                      // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:17:15: 17:17
    debug v1 => _2;                      // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:17:29: 17:31
    debug v2 => _3;                      // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:17:43: 17:45
    let mut _0: (impl std::iter::Iterator<Item = char> + '_, &str); // return place in scope 0 at ui/lifetimes/issue-105227_fixed.rs:19:5: 19:48
    let mut _4: std::iter::Chain<std::str::Chars<'_>, std::str::Chars<'_>>; // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:6: 21:34
    let mut _5: std::str::Chars<'_>;     // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:6: 21:16
    let mut _6: &str;                    // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:6: 21:16
    let mut _7: std::str::Chars<'_>;     // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:23: 21:33
    let mut _8: &str;                    // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:23: 21:33
    let mut _9: &str;                    // in scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:36: 21:38

    bb0: {
        _6 = _1;                         // scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:6: 21:16
        _5 = core::str::<impl str>::chars(move _6) -> bb1; // scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:6: 21:16
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105227_fixed.rs:21:9: 21:14
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Chars<'a> {core::str::<impl str>::chars}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _2;                         // scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:23: 21:33
        _7 = core::str::<impl str>::chars(move _8) -> bb2; // scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:23: 21:33
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105227_fixed.rs:21:26: 21:31
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Chars<'a> {core::str::<impl str>::chars}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = <Chars<'_> as Iterator>::chain::<Chars<'_>>(move _5, move _7) -> bb3; // scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:6: 21:34
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105227_fixed.rs:21:17: 21:22
                                         // + literal: Const { ty: fn(Chars<'_>, Chars<'_>) -> std::iter::Chain<Chars<'_>, <Chars<'_> as IntoIterator>::IntoIter> {<Chars<'_> as Iterator>::chain::<Chars<'_>>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = _3;                         // scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:36: 21:38
        _0 = (move _4, move _9);         // scope 0 at ui/lifetimes/issue-105227_fixed.rs:21:5: 21:39
        return;                          // scope 0 at ui/lifetimes/issue-105227_fixed.rs:23:2: 23:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/issue-105227_fixed.rs:25:11: 25:11

    bb0: {
        return;                          // scope 0 at ui/lifetimes/issue-105227_fixed.rs:26:2: 26:2
    }
}
