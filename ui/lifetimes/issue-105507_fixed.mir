// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/lifetimes/issue-105507_fixed.rs:13:1: 13:30>::project(_1: Wrapper<'_, Option<T>>) -> Option<Wrapper<'_, T>> {
    debug this => _1;                    // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:15:16: 15:20
    let mut _0: std::option::Option<Wrapper<'_, T>>; // return place in scope 0 at ui/lifetimes/issue-105507_fixed.rs:15:44: 15:63
    let mut _2: std::option::Option<&T>; // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:16:9: 16:24
    let mut _3: &std::option::Option<T>; // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:16:9: 16:24
    let mut _4: &std::option::Option<T>; // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:15:16: 15:20

    bb0: {
        _4 = deref_copy (_1.0: &std::option::Option<T>); // scope 0 at ui/lifetimes/issue-105507_fixed.rs:16:9: 16:24
        _3 = _4;                         // scope 0 at ui/lifetimes/issue-105507_fixed.rs:16:9: 16:24
        _2 = Option::<T>::as_ref(move _3) -> bb1; // scope 0 at ui/lifetimes/issue-105507_fixed.rs:16:9: 16:24
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105507_fixed.rs:16:16: 16:22
                                         // + literal: Const { ty: for<'a> fn(&'a Option<T>) -> Option<&'a T> {Option::<T>::as_ref}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Option::<&T>::map::<Wrapper<'_, T>, fn(&T) -> Wrapper<'_, T> {Wrapper::<'_, T>}>(move _2, Wrapper::<'_, T>) -> bb2; // scope 0 at ui/lifetimes/issue-105507_fixed.rs:16:9: 16:37
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105507_fixed.rs:16:25: 16:28
                                         // + literal: Const { ty: fn(Option<&T>, fn(&T) -> Wrapper<'_, T> {Wrapper::<'_, T>}) -> Option<Wrapper<'_, T>> {Option::<&T>::map::<Wrapper<'_, T>, fn(&T) -> Wrapper<'_, T> {Wrapper::<'_, T>}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105507_fixed.rs:16:29: 16:36
                                         // + literal: Const { ty: fn(&T) -> Wrapper<'_, T> {Wrapper::<'_, T>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/lifetimes/issue-105507_fixed.rs:17:6: 17:6
    }
}

fn require_trait(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/issue-105507_fixed.rs:32:36: 32:36

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/lifetimes/issue-105507_fixed.rs:32:37: 32:38
    }

    bb1: {
        return;                          // scope 0 at ui/lifetimes/issue-105507_fixed.rs:32:38: 32:38
    }
}

fn foo(_1: Wrapper<'_, Option<T>>, _2: Wrapper<'_, Option<U>>) -> () {
    debug wrap => _1;                    // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:34:74: 34:78
    debug wrap1 => _2;                   // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:34:104: 34:109
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/issue-105507_fixed.rs:34:135: 34:135
    let _3: ();                          // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:37:5: 37:24
    let mut _4: Wrapper<'_, std::option::Option<T>>; // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:37:19: 37:23
    let _5: ();                          // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:39:5: 39:25
    let mut _6: Wrapper<'_, std::option::Option<U>>; // in scope 0 at ui/lifetimes/issue-105507_fixed.rs:39:19: 39:24

    bb0: {
        _4 = move _1;                    // scope 0 at ui/lifetimes/issue-105507_fixed.rs:37:19: 37:23
        _3 = require_trait::<Wrapper<'_, Option<T>>>(move _4) -> bb1; // scope 0 at ui/lifetimes/issue-105507_fixed.rs:37:5: 37:24
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105507_fixed.rs:37:5: 37:18
                                         // + literal: Const { ty: fn(Wrapper<'_, Option<T>>) {require_trait::<Wrapper<'_, Option<T>>>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/lifetimes/issue-105507_fixed.rs:39:19: 39:24
        _5 = require_trait::<Wrapper<'_, Option<U>>>(move _6) -> bb2; // scope 0 at ui/lifetimes/issue-105507_fixed.rs:39:5: 39:25
                                         // mir::Constant
                                         // + span: ui/lifetimes/issue-105507_fixed.rs:39:5: 39:18
                                         // + literal: Const { ty: fn(Wrapper<'_, Option<U>>) {require_trait::<Wrapper<'_, Option<U>>>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/lifetimes/issue-105507_fixed.rs:41:2: 41:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/lifetimes/issue-105507_fixed.rs:43:11: 43:11

    bb0: {
        return;                          // scope 0 at ui/lifetimes/issue-105507_fixed.rs:43:13: 43:13
    }
}

fn Wrapper(_1: &T) -> Wrapper<'_, T> {
    let mut _0: Wrapper<'_, T>;          // return place in scope 0 at ui/lifetimes/issue-105507_fixed.rs:4:1: 4:30

    bb0: {
        _0 = Wrapper::<'_, T>(move _1);  // scope 0 at ui/lifetimes/issue-105507_fixed.rs:4:1: 4:30
        return;                          // scope 0 at ui/lifetimes/issue-105507_fixed.rs:4:1: 4:30
    }
}

// MIR FOR CTFE
fn Wrapper(_1: &T) -> Wrapper<'_, T> {
    let mut _0: Wrapper<'_, T>;          // return place in scope 0 at ui/lifetimes/issue-105507_fixed.rs:4:1: 4:30

    bb0: {
        _0 = Wrapper::<'_, T>(move _1);  // scope 0 at ui/lifetimes/issue-105507_fixed.rs:4:1: 4:30
        return;                          // scope 0 at ui/lifetimes/issue-105507_fixed.rs:4:1: 4:30
    }
}
