// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/builtin-clone-unwind.rs:15:1: 15:17>::clone(_1: &S) -> S {
    debug self => _1;                    // in scope 0 at ui/builtin-clone-unwind.rs:16:14: 16:19
    let mut _0: S;                       // return place in scope 0 at ui/builtin-clone-unwind.rs:16:24: 16:28
    let mut _2: usize;                   // in scope 0 at ui/builtin-clone-unwind.rs:17:12: 17:37
    let mut _3: &std::rc::Rc<()>;        // in scope 0 at ui/builtin-clone-unwind.rs:17:29: 17:36
    let _4: &std::rc::Rc<()>;            // in scope 0 at ui/builtin-clone-unwind.rs:17:29: 17:36
    let mut _5: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _6: std::rc::Rc<()>;         // in scope 0 at ui/builtin-clone-unwind.rs:21:11: 21:25
    let mut _7: &std::rc::Rc<()>;        // in scope 0 at ui/builtin-clone-unwind.rs:21:11: 21:25

    bb0: {
        _4 = &((*_1).0: std::rc::Rc<()>); // scope 0 at ui/builtin-clone-unwind.rs:17:29: 17:36
        _3 = _4;                         // scope 0 at ui/builtin-clone-unwind.rs:17:29: 17:36
        _2 = Rc::<()>::strong_count(move _3) -> bb1; // scope 0 at ui/builtin-clone-unwind.rs:17:12: 17:37
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:17:12: 17:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> usize {Rc::<()>::strong_count}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [7: bb2, otherwise: bb3]; // scope 0 at ui/builtin-clone-unwind.rs:17:12: 17:42
    }

    bb2: {
        _5 = begin_panic::<&str>(const "oops"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:18:20: 18:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _7 = &((*_1).0: std::rc::Rc<()>); // scope 0 at ui/builtin-clone-unwind.rs:21:11: 21:25
        _6 = <Rc<()> as Clone>::clone(move _7) -> bb4; // scope 0 at ui/builtin-clone-unwind.rs:21:11: 21:25
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:21:18: 21:23
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = S(move _6);                 // scope 0 at ui/builtin-clone-unwind.rs:21:9: 21:26
        return;                          // scope 0 at ui/builtin-clone-unwind.rs:22:6: 22:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/builtin-clone-unwind.rs:25:11: 25:11
    let _1: std::rc::Rc<()>;             // in scope 0 at ui/builtin-clone-unwind.rs:26:9: 26:16
    let mut _2: ();                      // in scope 0 at ui/builtin-clone-unwind.rs:26:27: 26:29
    let mut _4: &std::rc::Rc<()>;        // in scope 0 at ui/builtin-clone-unwind.rs:29:20: 29:35
    let mut _6: [closure@ui/builtin-clone-unwind.rs:30:43: 30:50]; // in scope 0 at ui/builtin-clone-unwind.rs:30:43: 37:6
    let mut _7: bool;                    // in scope 0 at ui/builtin-clone-unwind.rs:39:5: 39:29
    let mut _8: bool;                    // in scope 0 at ui/builtin-clone-unwind.rs:39:13: 39:28
    let mut _9: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/builtin-clone-unwind.rs:39:13: 39:28
    let mut _10: !;                      // in scope 0 at ui/builtin-clone-unwind.rs:39:5: 39:29
    let mut _11: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _13: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _14: usize;                      // in scope 0 at ui/builtin-clone-unwind.rs:42:9: 42:35
    let mut _15: &std::rc::Rc<()>;       // in scope 0 at ui/builtin-clone-unwind.rs:42:26: 42:34
    let _16: &std::rc::Rc<()>;           // in scope 0 at ui/builtin-clone-unwind.rs:42:26: 42:34
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _21: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _22: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _24: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _25: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _27: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _29: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _32: &std::rc::Rc<()>;       // in scope 0 at ui/builtin-clone-unwind.rs:46:20: 46:35
    let mut _34: [closure@ui/builtin-clone-unwind.rs:47:42: 47:49]; // in scope 0 at ui/builtin-clone-unwind.rs:47:42: 54:6
    let mut _35: bool;                   // in scope 0 at ui/builtin-clone-unwind.rs:56:5: 56:28
    let mut _36: bool;                   // in scope 0 at ui/builtin-clone-unwind.rs:56:13: 56:27
    let mut _37: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/builtin-clone-unwind.rs:56:13: 56:27
    let mut _38: !;                      // in scope 0 at ui/builtin-clone-unwind.rs:56:5: 56:28
    let mut _39: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _40: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _41: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _42: usize;                      // in scope 0 at ui/builtin-clone-unwind.rs:59:9: 59:35
    let mut _43: &std::rc::Rc<()>;       // in scope 0 at ui/builtin-clone-unwind.rs:59:26: 59:34
    let _44: &std::rc::Rc<()>;           // in scope 0 at ui/builtin-clone-unwind.rs:59:26: 59:34
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug counter => _1;             // in scope 1 at ui/builtin-clone-unwind.rs:26:9: 26:16
        let _3: std::rc::Rc<()>;         // in scope 1 at ui/builtin-clone-unwind.rs:29:9: 29:17
        scope 2 {
            debug ccounter => _3;        // in scope 2 at ui/builtin-clone-unwind.rs:29:9: 29:17
            let _5: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 2 at ui/builtin-clone-unwind.rs:30:9: 30:15
            scope 3 {
                debug result => _5;      // in scope 3 at ui/builtin-clone-unwind.rs:30:9: 30:15
                let _17: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _18: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _31: std::rc::Rc<()>; // in scope 3 at ui/builtin-clone-unwind.rs:46:9: 46:17
                let mut _60: &usize;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                scope 4 {
                    debug left_val => _17; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _18; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _23: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _23; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug ccounter => _31; // in scope 6 at ui/builtin-clone-unwind.rs:46:9: 46:17
                    let _33: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 6 at ui/builtin-clone-unwind.rs:47:9: 47:14
                    scope 7 {
                        debug child => _33; // in scope 7 at ui/builtin-clone-unwind.rs:47:9: 47:14
                        let _45: &usize; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _46: &usize; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _59: &usize; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                        scope 8 {
                            debug left_val => _45; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _46; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _51: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 9 {
                                debug kind => _51; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Rc::<()>::new(move _2) -> bb1; // scope 0 at ui/builtin-clone-unwind.rs:26:19: 26:30
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:26:19: 26:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> Rc<()> {Rc::<()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_1;                        // scope 1 at ui/builtin-clone-unwind.rs:29:20: 29:35
        _3 = <Rc<()> as Clone>::clone(move _4) -> [return: bb2, unwind: bb23]; // scope 1 at ui/builtin-clone-unwind.rs:29:20: 29:35
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:29:28: 29:33
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = [closure@ui/builtin-clone-unwind.rs:30:43: 30:50] { ccounter: move _3 }; // scope 2 at ui/builtin-clone-unwind.rs:30:43: 37:6
                                         // closure
                                         // + def_id: DefId(0:11 ~ builtin_clone_unwind[8ef3]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::rc::Rc<()>,),
                                         // ]
        _5 = catch_unwind::<[closure@ui/builtin-clone-unwind.rs:30:43: 30:50], ()>(move _6) -> [return: bb3, unwind: bb23]; // scope 2 at ui/builtin-clone-unwind.rs:30:18: 37:7
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:30:18: 30:42
                                         // + literal: Const { ty: fn([closure@ui/builtin-clone-unwind.rs:30:43: 30:50]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/builtin-clone-unwind.rs:30:43: 30:50], ()>}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &_5;                        // scope 3 at ui/builtin-clone-unwind.rs:39:13: 39:28
        _8 = Result::<(), Box<dyn Any + Send>>::is_err(move _9) -> [return: bb4, unwind: bb22]; // scope 3 at ui/builtin-clone-unwind.rs:39:13: 39:28
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:39:20: 39:26
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = Not(move _8);               // scope 3 at ui/builtin-clone-unwind.rs:39:5: 39:29
        switchInt(move _7) -> [0: bb6, otherwise: bb5]; // scope 3 at ui/builtin-clone-unwind.rs:39:5: 39:29
    }

    bb5: {
        _10 = core::panicking::panic(const "assertion failed: result.is_err()") -> bb22; // scope 3 at ui/builtin-clone-unwind.rs:39:5: 39:29
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:39:5: 39:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _60 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _12 = _60;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _16 = &_1;                       // scope 3 at ui/builtin-clone-unwind.rs:42:26: 42:34
        _15 = _16;                       // scope 3 at ui/builtin-clone-unwind.rs:42:26: 42:34
        _14 = Rc::<()>::strong_count(move _15) -> [return: bb7, unwind: bb22]; // scope 3 at ui/builtin-clone-unwind.rs:42:9: 42:35
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:42:9: 42:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> usize {Rc::<()>::strong_count}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = &_14;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _13);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _17 = (_11.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _18 = (_11.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _21 = const 1_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _22 = (*_18);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _20 = Eq(move _21, move _22);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _19 = Not(move _20);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _19) -> [0: bb9, otherwise: bb8]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _23 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = _17;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _18;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _24 = core::panicking::assert_failed::<usize, usize>(move _25, move _26, move _28, move _30) -> bb22; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _32 = &_1;                       // scope 3 at ui/builtin-clone-unwind.rs:46:20: 46:35
        _31 = <Rc<()> as Clone>::clone(move _32) -> [return: bb10, unwind: bb22]; // scope 3 at ui/builtin-clone-unwind.rs:46:20: 46:35
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:46:28: 46:33
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb10: {
        _34 = [closure@ui/builtin-clone-unwind.rs:47:42: 47:49] { ccounter: move _31 }; // scope 6 at ui/builtin-clone-unwind.rs:47:42: 54:6
                                         // closure
                                         // + def_id: DefId(0:12 ~ builtin_clone_unwind[8ef3]::main::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::rc::Rc<()>,),
                                         // ]
        _33 = catch_unwind::<[closure@ui/builtin-clone-unwind.rs:47:42: 47:49], ()>(move _34) -> [return: bb11, unwind: bb22]; // scope 6 at ui/builtin-clone-unwind.rs:47:17: 54:7
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:47:17: 47:41
                                         // + literal: Const { ty: fn([closure@ui/builtin-clone-unwind.rs:47:42: 47:49]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/builtin-clone-unwind.rs:47:42: 47:49], ()>}, val: Value(<ZST>) }
    }

    bb11: {
        _37 = &_33;                      // scope 7 at ui/builtin-clone-unwind.rs:56:13: 56:27
        _36 = Result::<(), Box<dyn Any + Send>>::is_err(move _37) -> [return: bb12, unwind: bb21]; // scope 7 at ui/builtin-clone-unwind.rs:56:13: 56:27
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:56:19: 56:25
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb12: {
        _35 = Not(move _36);             // scope 7 at ui/builtin-clone-unwind.rs:56:5: 56:28
        switchInt(move _35) -> [0: bb14, otherwise: bb13]; // scope 7 at ui/builtin-clone-unwind.rs:56:5: 56:28
    }

    bb13: {
        _38 = core::panicking::panic(const "assertion failed: child.is_err()") -> bb21; // scope 7 at ui/builtin-clone-unwind.rs:56:5: 56:28
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:56:5: 56:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        _59 = const _;                   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _40 = _59;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _44 = &_1;                       // scope 7 at ui/builtin-clone-unwind.rs:59:26: 59:34
        _43 = _44;                       // scope 7 at ui/builtin-clone-unwind.rs:59:26: 59:34
        _42 = Rc::<()>::strong_count(move _43) -> [return: bb15, unwind: bb21]; // scope 7 at ui/builtin-clone-unwind.rs:59:9: 59:35
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:59:9: 59:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> usize {Rc::<()>::strong_count}, val: Value(<ZST>) }
    }

    bb15: {
        _41 = &_42;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _39 = (move _40, move _41);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_39.0: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_39.1: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = const 1_usize;             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = (*_46);                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = Eq(move _49, move _50);    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _47 = Not(move _48);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb17, otherwise: bb16]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb16: {
        _51 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<usize, usize>(move _53, move _54, move _56, move _58) -> bb21; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb17: {
        drop(_33) -> [return: bb18, unwind: bb22]; // scope 6 at ui/builtin-clone-unwind.rs:61:1: 61:2
    }

    bb18: {
        drop(_5) -> [return: bb19, unwind: bb23]; // scope 2 at ui/builtin-clone-unwind.rs:61:1: 61:2
    }

    bb19: {
        drop(_1) -> bb20;                // scope 0 at ui/builtin-clone-unwind.rs:61:1: 61:2
    }

    bb20: {
        return;                          // scope 0 at ui/builtin-clone-unwind.rs:61:2: 61:2
    }

    bb21 (cleanup): {
        drop(_33) -> bb22;               // scope 6 at ui/builtin-clone-unwind.rs:61:1: 61:2
    }

    bb22 (cleanup): {
        drop(_5) -> bb23;                // scope 2 at ui/builtin-clone-unwind.rs:61:1: 61:2
    }

    bb23 (cleanup): {
        drop(_1) -> bb24;                // scope 0 at ui/builtin-clone-unwind.rs:61:1: 61:2
    }

    bb24 (cleanup): {
        resume;                          // scope 0 at ui/builtin-clone-unwind.rs:25:1: 61:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/builtin-clone-unwind.rs:58:9: 58:10

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/builtin-clone-unwind.rs:58:9: 58:10
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: usize;                   // in scope 0 at ui/builtin-clone-unwind.rs:41:9: 41:10

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/builtin-clone-unwind.rs:41:9: 41:10
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn main::{closure#0}(_1: [closure@ui/builtin-clone-unwind.rs:30:43: 30:50]) -> () {
    debug ccounter => (_1.0: std::rc::Rc<()>); // in scope 0 at ui/builtin-clone-unwind.rs:29:9: 29:17
    let mut _0: ();                      // return place in scope 0 at ui/builtin-clone-unwind.rs:30:51: 30:51
    let mut _2: (S, S, S, S);            // in scope 0 at ui/builtin-clone-unwind.rs:31:17: 36:18
    let mut _3: &(S, S, S, S);           // in scope 0 at ui/builtin-clone-unwind.rs:31:17: 36:18
    let _4: (S, S, S, S);                // in scope 0 at ui/builtin-clone-unwind.rs:31:17: 36:10
    let mut _5: S;                       // in scope 0 at ui/builtin-clone-unwind.rs:32:13: 32:32
    let mut _6: std::rc::Rc<()>;         // in scope 0 at ui/builtin-clone-unwind.rs:32:15: 32:31
    let mut _7: &std::rc::Rc<()>;        // in scope 0 at ui/builtin-clone-unwind.rs:32:15: 32:31
    let mut _8: S;                       // in scope 0 at ui/builtin-clone-unwind.rs:33:13: 33:32
    let mut _9: std::rc::Rc<()>;         // in scope 0 at ui/builtin-clone-unwind.rs:33:15: 33:31
    let mut _10: &std::rc::Rc<()>;       // in scope 0 at ui/builtin-clone-unwind.rs:33:15: 33:31
    let mut _11: S;                      // in scope 0 at ui/builtin-clone-unwind.rs:34:13: 34:32
    let mut _12: std::rc::Rc<()>;        // in scope 0 at ui/builtin-clone-unwind.rs:34:15: 34:31
    let mut _13: &std::rc::Rc<()>;       // in scope 0 at ui/builtin-clone-unwind.rs:34:15: 34:31
    let mut _14: S;                      // in scope 0 at ui/builtin-clone-unwind.rs:35:13: 35:24
    let mut _15: std::rc::Rc<()>;        // in scope 0 at ui/builtin-clone-unwind.rs:35:15: 35:23
    let mut _16: bool;                   // in scope 0 at ui/builtin-clone-unwind.rs:37:5: 37:6
    scope 1 {
    }

    bb0: {
        _16 = const false;               // scope 0 at ui/builtin-clone-unwind.rs:31:17: 36:18
        _16 = const true;                // scope 0 at ui/builtin-clone-unwind.rs:31:17: 36:18
        _7 = &(_1.0: std::rc::Rc<()>);   // scope 0 at ui/builtin-clone-unwind.rs:32:15: 32:31
        _6 = <Rc<()> as Clone>::clone(move _7) -> [return: bb1, unwind: bb12]; // scope 0 at ui/builtin-clone-unwind.rs:32:15: 32:31
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:32:24: 32:29
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = S(move _6);                 // scope 0 at ui/builtin-clone-unwind.rs:32:13: 32:32
        _10 = &(_1.0: std::rc::Rc<()>);  // scope 0 at ui/builtin-clone-unwind.rs:33:15: 33:31
        _9 = <Rc<()> as Clone>::clone(move _10) -> [return: bb2, unwind: bb9]; // scope 0 at ui/builtin-clone-unwind.rs:33:15: 33:31
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:33:24: 33:29
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = S(move _9);                 // scope 0 at ui/builtin-clone-unwind.rs:33:13: 33:32
        _13 = &(_1.0: std::rc::Rc<()>);  // scope 0 at ui/builtin-clone-unwind.rs:34:15: 34:31
        _12 = <Rc<()> as Clone>::clone(move _13) -> [return: bb3, unwind: bb8]; // scope 0 at ui/builtin-clone-unwind.rs:34:15: 34:31
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:34:24: 34:29
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = S(move _12);               // scope 0 at ui/builtin-clone-unwind.rs:34:13: 34:32
        _16 = const false;               // scope 0 at ui/builtin-clone-unwind.rs:35:15: 35:23
        _15 = move (_1.0: std::rc::Rc<()>); // scope 0 at ui/builtin-clone-unwind.rs:35:15: 35:23
        _14 = S(move _15);               // scope 0 at ui/builtin-clone-unwind.rs:35:13: 35:24
        _4 = (move _5, move _8, move _11, move _14); // scope 0 at ui/builtin-clone-unwind.rs:31:17: 36:10
        _3 = &_4;                        // scope 0 at ui/builtin-clone-unwind.rs:31:17: 36:18
        _2 = <(S, S, S, S) as Clone>::clone(move _3) -> [return: bb4, unwind: bb7]; // scope 0 at ui/builtin-clone-unwind.rs:31:17: 36:18
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:36:11: 36:16
                                         // + literal: Const { ty: for<'a> fn(&'a (S, S, S, S)) -> (S, S, S, S) {<(S, S, S, S) as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb7]; // scope 0 at ui/builtin-clone-unwind.rs:36:18: 36:19
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind: bb12]; // scope 0 at ui/builtin-clone-unwind.rs:36:18: 36:19
    }

    bb6: {
        return;                          // scope 0 at ui/builtin-clone-unwind.rs:37:6: 37:6
    }

    bb7 (cleanup): {
        drop(_4) -> bb12;                // scope 0 at ui/builtin-clone-unwind.rs:36:18: 36:19
    }

    bb8 (cleanup): {
        drop(_8) -> bb9;                 // scope 0 at ui/builtin-clone-unwind.rs:36:9: 36:10
    }

    bb9 (cleanup): {
        drop(_5) -> bb12;                // scope 0 at ui/builtin-clone-unwind.rs:36:9: 36:10
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/builtin-clone-unwind.rs:30:43: 37:6
    }

    bb11 (cleanup): {
        drop((_1.0: std::rc::Rc<()>)) -> bb10; // scope 0 at ui/builtin-clone-unwind.rs:37:5: 37:6
    }

    bb12 (cleanup): {
        switchInt(_16) -> [0: bb10, otherwise: bb11]; // scope 0 at ui/builtin-clone-unwind.rs:37:5: 37:6
    }
}

fn main::{closure#1}(_1: [closure@ui/builtin-clone-unwind.rs:47:42: 47:49]) -> () {
    debug ccounter => (_1.0: std::rc::Rc<()>); // in scope 0 at ui/builtin-clone-unwind.rs:46:9: 46:17
    let mut _0: ();                      // return place in scope 0 at ui/builtin-clone-unwind.rs:47:50: 47:50
    let mut _2: [S; 4];                  // in scope 0 at ui/builtin-clone-unwind.rs:48:17: 53:18
    let mut _3: &[S; 4];                 // in scope 0 at ui/builtin-clone-unwind.rs:48:17: 53:18
    let _4: [S; 4];                      // in scope 0 at ui/builtin-clone-unwind.rs:48:17: 53:10
    let mut _5: S;                       // in scope 0 at ui/builtin-clone-unwind.rs:49:13: 49:32
    let mut _6: std::rc::Rc<()>;         // in scope 0 at ui/builtin-clone-unwind.rs:49:15: 49:31
    let mut _7: &std::rc::Rc<()>;        // in scope 0 at ui/builtin-clone-unwind.rs:49:15: 49:31
    let mut _8: S;                       // in scope 0 at ui/builtin-clone-unwind.rs:50:13: 50:32
    let mut _9: std::rc::Rc<()>;         // in scope 0 at ui/builtin-clone-unwind.rs:50:15: 50:31
    let mut _10: &std::rc::Rc<()>;       // in scope 0 at ui/builtin-clone-unwind.rs:50:15: 50:31
    let mut _11: S;                      // in scope 0 at ui/builtin-clone-unwind.rs:51:13: 51:32
    let mut _12: std::rc::Rc<()>;        // in scope 0 at ui/builtin-clone-unwind.rs:51:15: 51:31
    let mut _13: &std::rc::Rc<()>;       // in scope 0 at ui/builtin-clone-unwind.rs:51:15: 51:31
    let mut _14: S;                      // in scope 0 at ui/builtin-clone-unwind.rs:52:13: 52:24
    let mut _15: std::rc::Rc<()>;        // in scope 0 at ui/builtin-clone-unwind.rs:52:15: 52:23
    let mut _16: bool;                   // in scope 0 at ui/builtin-clone-unwind.rs:54:5: 54:6
    scope 1 {
    }

    bb0: {
        _16 = const false;               // scope 0 at ui/builtin-clone-unwind.rs:48:17: 53:18
        _16 = const true;                // scope 0 at ui/builtin-clone-unwind.rs:48:17: 53:18
        _7 = &(_1.0: std::rc::Rc<()>);   // scope 0 at ui/builtin-clone-unwind.rs:49:15: 49:31
        _6 = <Rc<()> as Clone>::clone(move _7) -> [return: bb1, unwind: bb12]; // scope 0 at ui/builtin-clone-unwind.rs:49:15: 49:31
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:49:24: 49:29
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = S(move _6);                 // scope 0 at ui/builtin-clone-unwind.rs:49:13: 49:32
        _10 = &(_1.0: std::rc::Rc<()>);  // scope 0 at ui/builtin-clone-unwind.rs:50:15: 50:31
        _9 = <Rc<()> as Clone>::clone(move _10) -> [return: bb2, unwind: bb9]; // scope 0 at ui/builtin-clone-unwind.rs:50:15: 50:31
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:50:24: 50:29
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = S(move _9);                 // scope 0 at ui/builtin-clone-unwind.rs:50:13: 50:32
        _13 = &(_1.0: std::rc::Rc<()>);  // scope 0 at ui/builtin-clone-unwind.rs:51:15: 51:31
        _12 = <Rc<()> as Clone>::clone(move _13) -> [return: bb3, unwind: bb8]; // scope 0 at ui/builtin-clone-unwind.rs:51:15: 51:31
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:51:24: 51:29
                                         // + literal: Const { ty: for<'a> fn(&'a Rc<()>) -> Rc<()> {<Rc<()> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = S(move _12);               // scope 0 at ui/builtin-clone-unwind.rs:51:13: 51:32
        _16 = const false;               // scope 0 at ui/builtin-clone-unwind.rs:52:15: 52:23
        _15 = move (_1.0: std::rc::Rc<()>); // scope 0 at ui/builtin-clone-unwind.rs:52:15: 52:23
        _14 = S(move _15);               // scope 0 at ui/builtin-clone-unwind.rs:52:13: 52:24
        _4 = [move _5, move _8, move _11, move _14]; // scope 0 at ui/builtin-clone-unwind.rs:48:17: 53:10
        _3 = &_4;                        // scope 0 at ui/builtin-clone-unwind.rs:48:17: 53:18
        _2 = <[S; 4] as Clone>::clone(move _3) -> [return: bb4, unwind: bb7]; // scope 0 at ui/builtin-clone-unwind.rs:48:17: 53:18
                                         // mir::Constant
                                         // + span: ui/builtin-clone-unwind.rs:53:11: 53:16
                                         // + literal: Const { ty: for<'a> fn(&'a [S; 4]) -> [S; 4] {<[S; 4] as Clone>::clone}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb7]; // scope 0 at ui/builtin-clone-unwind.rs:53:18: 53:19
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind: bb12]; // scope 0 at ui/builtin-clone-unwind.rs:53:18: 53:19
    }

    bb6: {
        return;                          // scope 0 at ui/builtin-clone-unwind.rs:54:6: 54:6
    }

    bb7 (cleanup): {
        drop(_4) -> bb12;                // scope 0 at ui/builtin-clone-unwind.rs:53:18: 53:19
    }

    bb8 (cleanup): {
        drop(_8) -> bb9;                 // scope 0 at ui/builtin-clone-unwind.rs:53:9: 53:10
    }

    bb9 (cleanup): {
        drop(_5) -> bb12;                // scope 0 at ui/builtin-clone-unwind.rs:53:9: 53:10
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/builtin-clone-unwind.rs:47:42: 54:6
    }

    bb11 (cleanup): {
        drop((_1.0: std::rc::Rc<()>)) -> bb10; // scope 0 at ui/builtin-clone-unwind.rs:54:5: 54:6
    }

    bb12 (cleanup): {
        switchInt(_16) -> [0: bb10, otherwise: bb11]; // scope 0 at ui/builtin-clone-unwind.rs:54:5: 54:6
    }
}

fn S(_1: Rc<()>) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/builtin-clone-unwind.rs:13:1: 13:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/builtin-clone-unwind.rs:13:1: 13:9
        return;                          // scope 0 at ui/builtin-clone-unwind.rs:13:1: 13:9
    }
}

// MIR FOR CTFE
fn S(_1: Rc<()>) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/builtin-clone-unwind.rs:13:1: 13:9

    bb0: {
        _0 = S(move _1);                 // scope 0 at ui/builtin-clone-unwind.rs:13:1: 13:9
        return;                          // scope 0 at ui/builtin-clone-unwind.rs:13:1: 13:9
    }
}
