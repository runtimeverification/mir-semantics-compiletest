// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/builtin-clone-unwind.rs:15:1: 15:17>::clone(_1: &S) -> S {
    debug self => _1;
    let mut _0: S;
    let mut _2: usize;
    let _3: &std::rc::Rc<()>;
    let _4: !;
    let mut _5: std::rc::Rc<()>;
    let mut _6: &std::rc::Rc<()>;

    bb0: {
        _3 = &((*_1).0: std::rc::Rc<()>);
        _2 = Rc::<()>::strong_count(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        switchInt(move _2) -> [7: bb2, otherwise: bb3];
    }

    bb2: {
        _4 = begin_panic::<&str>(const "oops") -> unwind continue;
    }

    bb3: {
        _6 = &((*_1).0: std::rc::Rc<()>);
        _5 = <Rc<()> as Clone>::clone(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _0 = S(move _5);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<()>;
    let mut _3: &std::rc::Rc<()>;
    let mut _5: [closure@ui/builtin-clone-unwind.rs:30:43: 30:50];
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _9: !;
    let mut _10: (&usize, &usize);
    let mut _11: &usize;
    let _12: usize;
    let _13: &std::rc::Rc<()>;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: usize;
    let mut _19: usize;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: &std::rc::Rc<()>;
    let mut _26: [closure@ui/builtin-clone-unwind.rs:47:42: 47:49];
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _30: !;
    let mut _31: (&usize, &usize);
    let mut _32: &usize;
    let _33: usize;
    let _34: &std::rc::Rc<()>;
    let mut _37: bool;
    let mut _38: bool;
    let mut _39: usize;
    let mut _40: usize;
    let _42: !;
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug counter => _1;
        let _2: std::rc::Rc<()>;
        scope 2 {
            debug ccounter => _2;
            let _4: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            scope 3 {
                debug result => _4;
                let _14: &usize;
                let _15: &usize;
                let _23: std::rc::Rc<()>;
                let mut _45: &usize;
                scope 4 {
                    debug left_val => _14;
                    debug right_val => _15;
                    let _20: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _20;
                    }
                }
                scope 6 {
                    debug ccounter => _23;
                    let _25: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                    scope 7 {
                        debug child => _25;
                        let _35: &usize;
                        let _36: &usize;
                        let mut _44: &usize;
                        scope 8 {
                            debug left_val => _35;
                            debug right_val => _36;
                            let _41: core::panicking::AssertKind;
                            scope 9 {
                                debug kind => _41;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Rc::<()>::new(const ()) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_1;
        _2 = <Rc<()> as Clone>::clone(move _3) -> [return: bb2, unwind: bb23];
    }

    bb2: {
        _5 = [closure@ui/builtin-clone-unwind.rs:30:43: 30:50] { ccounter: move _2 };
        _4 = catch_unwind::<[closure@ui/builtin-clone-unwind.rs:30:43: 30:50], ()>(move _5) -> [return: bb3, unwind: bb23];
    }

    bb3: {
        _8 = &_4;
        _7 = Result::<(), Box<dyn Any + Send>>::is_err(move _8) -> [return: bb4, unwind: bb22];
    }

    bb4: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: result.is_err()") -> bb22;
    }

    bb6: {
        _45 = const _;
        _13 = &_1;
        _12 = Rc::<()>::strong_count(_13) -> [return: bb7, unwind: bb22];
    }

    bb7: {
        _11 = &_12;
        _10 = (_45, move _11);
        _14 = (_10.0: &usize);
        _15 = (_10.1: &usize);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<usize, usize>(move _20, _14, _15, move _22) -> bb22;
    }

    bb9: {
        _24 = &_1;
        _23 = <Rc<()> as Clone>::clone(move _24) -> [return: bb10, unwind: bb22];
    }

    bb10: {
        _26 = [closure@ui/builtin-clone-unwind.rs:47:42: 47:49] { ccounter: move _23 };
        _25 = catch_unwind::<[closure@ui/builtin-clone-unwind.rs:47:42: 47:49], ()>(move _26) -> [return: bb11, unwind: bb22];
    }

    bb11: {
        _29 = &_25;
        _28 = Result::<(), Box<dyn Any + Send>>::is_err(move _29) -> [return: bb12, unwind: bb21];
    }

    bb12: {
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _30 = core::panicking::panic(const "assertion failed: child.is_err()") -> bb21;
    }

    bb14: {
        _44 = const _;
        _34 = &_1;
        _33 = Rc::<()>::strong_count(_34) -> [return: bb15, unwind: bb21];
    }

    bb15: {
        _32 = &_33;
        _31 = (_44, move _32);
        _35 = (_31.0: &usize);
        _36 = (_31.1: &usize);
        _39 = (*_35);
        _40 = (*_36);
        _38 = Eq(move _39, move _40);
        _37 = Not(move _38);
        switchInt(move _37) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _41 = core::panicking::AssertKind::Eq;
        _43 = Option::<Arguments<'_>>::None;
        _42 = core::panicking::assert_failed::<usize, usize>(move _41, _35, _36, move _43) -> bb21;
    }

    bb17: {
        drop(_25) -> [return: bb18, unwind: bb22];
    }

    bb18: {
        drop(_4) -> [return: bb19, unwind: bb23];
    }

    bb19: {
        drop(_1) -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_25) -> [return: bb22, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_4) -> [return: bb23, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_1) -> [return: bb24, unwind terminate];
    }

    bb24 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/builtin-clone-unwind.rs:30:43: 30:50]) -> () {
    debug ccounter => (_1.0: std::rc::Rc<()>);
    let mut _0: ();
    let mut _2: (S, S, S, S);
    let mut _3: &(S, S, S, S);
    let _4: (S, S, S, S);
    let mut _5: S;
    let mut _6: std::rc::Rc<()>;
    let mut _7: &std::rc::Rc<()>;
    let mut _8: S;
    let mut _9: std::rc::Rc<()>;
    let mut _10: &std::rc::Rc<()>;
    let mut _11: S;
    let mut _12: std::rc::Rc<()>;
    let mut _13: &std::rc::Rc<()>;
    let mut _14: S;
    let mut _15: std::rc::Rc<()>;
    let mut _16: bool;
    scope 1 {
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _7 = &(_1.0: std::rc::Rc<()>);
        _6 = <Rc<()> as Clone>::clone(move _7) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _5 = S(move _6);
        _10 = &(_1.0: std::rc::Rc<()>);
        _9 = <Rc<()> as Clone>::clone(move _10) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _8 = S(move _9);
        _13 = &(_1.0: std::rc::Rc<()>);
        _12 = <Rc<()> as Clone>::clone(move _13) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _11 = S(move _12);
        _16 = const false;
        _15 = move (_1.0: std::rc::Rc<()>);
        _14 = S(move _15);
        _4 = (move _5, move _8, move _11, move _14);
        _3 = &_4;
        _2 = <(S, S, S, S) as Clone>::clone(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop((_1.0: std::rc::Rc<()>)) -> [return: bb10, unwind terminate];
    }

    bb12 (cleanup): {
        switchInt(_16) -> [0: bb10, otherwise: bb11];
    }
}

fn main::{closure#1}(_1: [closure@ui/builtin-clone-unwind.rs:47:42: 47:49]) -> () {
    debug ccounter => (_1.0: std::rc::Rc<()>);
    let mut _0: ();
    let mut _2: [S; 4];
    let mut _3: &[S; 4];
    let _4: [S; 4];
    let mut _5: S;
    let mut _6: std::rc::Rc<()>;
    let mut _7: &std::rc::Rc<()>;
    let mut _8: S;
    let mut _9: std::rc::Rc<()>;
    let mut _10: &std::rc::Rc<()>;
    let mut _11: S;
    let mut _12: std::rc::Rc<()>;
    let mut _13: &std::rc::Rc<()>;
    let mut _14: S;
    let mut _15: std::rc::Rc<()>;
    let mut _16: bool;
    scope 1 {
    }

    bb0: {
        _16 = const false;
        _16 = const true;
        _7 = &(_1.0: std::rc::Rc<()>);
        _6 = <Rc<()> as Clone>::clone(move _7) -> [return: bb1, unwind: bb12];
    }

    bb1: {
        _5 = S(move _6);
        _10 = &(_1.0: std::rc::Rc<()>);
        _9 = <Rc<()> as Clone>::clone(move _10) -> [return: bb2, unwind: bb9];
    }

    bb2: {
        _8 = S(move _9);
        _13 = &(_1.0: std::rc::Rc<()>);
        _12 = <Rc<()> as Clone>::clone(move _13) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _11 = S(move _12);
        _16 = const false;
        _15 = move (_1.0: std::rc::Rc<()>);
        _14 = S(move _15);
        _4 = [move _5, move _8, move _11, move _14];
        _3 = &_4;
        _2 = <[S; 4] as Clone>::clone(move _3) -> [return: bb4, unwind: bb7];
    }

    bb4: {
        drop(_2) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        drop(_4) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_4) -> [return: bb12, unwind terminate];
    }

    bb8 (cleanup): {
        drop(_8) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        drop(_5) -> [return: bb12, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11 (cleanup): {
        drop((_1.0: std::rc::Rc<()>)) -> [return: bb10, unwind terminate];
    }

    bb12 (cleanup): {
        switchInt(_16) -> [0: bb10, otherwise: bb11];
    }
}

fn S(_1: Rc<()>) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: Rc<()>) -> S {
    let mut _0: S;

    bb0: {
        _0 = S(move _1);
        return;
    }
}
