// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impossible_range_fixed.rs:6:15: 6:15

    bb0: {
        return;                          // scope 0 at ui/impossible_range_fixed.rs:13:2: 13:2
    }
}

fn _foo1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/impossible_range_fixed.rs:15:12: 15:12
    let _1: std::ops::RangeInclusive<i32>; // in scope 0 at ui/impossible_range_fixed.rs:17:5: 17:10

    bb0: {
        _1 = RangeInclusive::<i32>::new(const 0_i32, const 1_i32) -> bb1; // scope 0 at ui/impossible_range_fixed.rs:17:5: 17:10
                                         // mir::Constant
                                         // + span: ui/impossible_range_fixed.rs:17:5: 17:10
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/impossible_range_fixed.rs:20:2: 20:2
    }
}
