// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn no_restriction(_1: &()) -> &() {
    debug x => _1;                       // in scope 0 at ui/error-codes/E0311_fixed.rs:5:30: 5:31
    let mut _0: &();                     // return place in scope 0 at ui/error-codes/E0311_fixed.rs:6:5: 6:29
    let mut _2: &();                     // in scope 0 at ui/error-codes/E0311_fixed.rs:6:27: 6:28

    bb0: {
        _2 = _1;                         // scope 0 at ui/error-codes/E0311_fixed.rs:6:27: 6:28
        _0 = with_restriction::<'_, T>(move _2) -> bb1; // scope 0 at ui/error-codes/E0311_fixed.rs:6:5: 6:29
                                         // mir::Constant
                                         // + span: ui/error-codes/E0311_fixed.rs:6:5: 6:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&()) -> &() {with_restriction::<'_, T>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/error-codes/E0311_fixed.rs:7:2: 7:2
    }
}

fn with_restriction(_1: &()) -> &() {
    debug x => _1;                       // in scope 0 at ui/error-codes/E0311_fixed.rs:9:32: 9:33
    let mut _0: &();                     // return place in scope 0 at ui/error-codes/E0311_fixed.rs:9:46: 9:52

    bb0: {
        _0 = _1;                         // scope 0 at ui/error-codes/E0311_fixed.rs:10:5: 10:6
        return;                          // scope 0 at ui/error-codes/E0311_fixed.rs:11:2: 11:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/error-codes/E0311_fixed.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/error-codes/E0311_fixed.rs:13:13: 13:13
    }
}
