// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/assocciated-consts/assoc-const.rs:11:1: 11:17>::N: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/assocciated-consts/assoc-const.rs:12:12: 12:17

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/assocciated-consts/assoc-const.rs:12:20: 12:21
        return;                          // scope 0 at ui/assocciated-consts/assoc-const.rs:12:3: 12:22
    }
}

const TEST: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/assocciated-consts/assoc-const.rs:15:12: 15:17

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/assocciated-consts/assoc-const.rs:15:20: 15:21
        return;                          // scope 0 at ui/assocciated-consts/assoc-const.rs:15:1: 15:22
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/assocciated-consts/assoc-const.rs:18:28: 18:28

    bb0: {
        return;                          // scope 0 at ui/assocciated-consts/assoc-const.rs:18:30: 18:30
    }
}

foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/assocciated-consts/assoc-const.rs:18:17: 18:23

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/assocciated-consts/assoc-const.rs:18:17: 18:23
        return;                          // scope 0 at ui/assocciated-consts/assoc-const.rs:18:17: 18:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/assocciated-consts/assoc-const.rs:20:11: 20:11

    bb0: {
        _0 = foo::<Bar>() -> bb1;        // scope 0 at ui/assocciated-consts/assoc-const.rs:21:3: 21:15
                                         // mir::Constant
                                         // + span: ui/assocciated-consts/assoc-const.rs:21:3: 21:13
                                         // + literal: Const { ty: fn() {foo::<Bar>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/assocciated-consts/assoc-const.rs:22:2: 22:2
    }
}
