// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/assocciated-consts/associated-const-range-match-patterns.rs:10:1: 10:20>::NUM: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:11:16: 11:21

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:11:24: 11:25
        return;                          // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:11:5: 11:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:14:11: 14:11
    let mut _1: bool;                    // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:15:5: 18:7
    let mut _2: bool;                    // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:15:13: 18:6
    let mut _3: !;                       // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:15:5: 18:7
    let mut _4: bool;                    // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:19:5: 22:7
    let mut _5: bool;                    // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:19:13: 22:6
    let mut _6: !;                       // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:19:5: 22:7
    let mut _7: bool;                    // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:23:5: 26:7
    let mut _8: bool;                    // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:23:13: 26:6
    let mut _9: !;                       // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:23:5: 26:7
    let mut _10: bool;                   // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:28:5: 31:7
    let mut _11: bool;                   // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:28:13: 31:6
    let mut _12: !;                      // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:28:5: 31:7
    let mut _13: bool;                   // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:32:5: 35:7
    let mut _14: bool;                   // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:32:13: 35:6
    let mut _15: !;                      // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:32:5: 35:7
    let mut _16: bool;                   // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:36:5: 39:7
    let mut _17: bool;                   // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:36:13: 39:6
    let mut _18: !;                      // in scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:36:5: 39:7

    bb0: {
        _2 = const true;                 // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:16:27: 16:31
        _1 = Not(move _2);               // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:15:5: 18:7
        switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:15:5: 18:7
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: match 2 { Foo::NUM...3 => true, _ => false, }"); // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:15:5: 18:7
                                         // mir::Constant
                                         // + span: ui/assocciated-consts/associated-const-range-match-patterns.rs:15:5: 18:7
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _5 = const true;                 // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:20:40: 20:44
        _4 = Not(move _5);               // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:19:5: 22:7
        switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:19:5: 22:7
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: match 0 { -1...<Foo as HasNum>::NUM => true, _ => false, }"); // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:19:5: 22:7
                                         // mir::Constant
                                         // + span: ui/assocciated-consts/associated-const-range-match-patterns.rs:19:5: 22:7
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _8 = const true;                 // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:24:48: 24:52
        _7 = Not(move _8);               // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:23:5: 26:7
        switchInt(move _7) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:23:5: 26:7
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: match 1 { <Foo as HasNum>::NUM...<Foo>::NUM => true, _ => false, }"); // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:23:5: 26:7
                                         // mir::Constant
                                         // + span: ui/assocciated-consts/associated-const-range-match-patterns.rs:23:5: 26:7
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _11 = const true;                // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:29:27: 29:31
        _10 = Not(move _11);             // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:28:5: 31:7
        switchInt(move _10) -> [0: bb8, otherwise: bb7]; // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:28:5: 31:7
    }

    bb7: {
        _12 = core::panicking::panic(const "assertion failed: match 2 { Foo::NUM..=3 => true, _ => false, }"); // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:28:5: 31:7
                                         // mir::Constant
                                         // + span: ui/assocciated-consts/associated-const-range-match-patterns.rs:28:5: 31:7
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        _14 = const true;                // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:33:40: 33:44
        _13 = Not(move _14);             // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:32:5: 35:7
        switchInt(move _13) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:32:5: 35:7
    }

    bb9: {
        _15 = core::panicking::panic(const "assertion failed: match 0 { -1..=<Foo as HasNum>::NUM => true, _ => false, }"); // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:32:5: 35:7
                                         // mir::Constant
                                         // + span: ui/assocciated-consts/associated-const-range-match-patterns.rs:32:5: 35:7
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _17 = const true;                // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:37:48: 37:52
        _16 = Not(move _17);             // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:36:5: 39:7
        switchInt(move _16) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:36:5: 39:7
    }

    bb11: {
        _18 = core::panicking::panic(const "assertion failed: match 1 { <Foo as HasNum>::NUM..=<Foo>::NUM => true, _ => false, }"); // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:36:5: 39:7
                                         // mir::Constant
                                         // + span: ui/assocciated-consts/associated-const-range-match-patterns.rs:36:5: 39:7
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        return;                          // scope 0 at ui/assocciated-consts/associated-const-range-match-patterns.rs:40:2: 40:2
    }
}
