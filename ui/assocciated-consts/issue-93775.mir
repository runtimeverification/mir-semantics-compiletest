// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const <impl at ui/assocciated-consts/issue-93775.rs:19:1: 19:17>::NUM: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/assocciated-consts/issue-93775.rs:20:16: 20:19

    bb0: {
        _0 = const 0_u32;                // scope 0 at ui/assocciated-consts/issue-93775.rs:20:22: 20:23
        return;                          // scope 0 at ui/assocciated-consts/issue-93775.rs:20:5: 20:24
    }
}

const <impl at ui/assocciated-consts/issue-93775.rs:23:1: 23:30>::NUM: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/assocciated-consts/issue-93775.rs:24:16: 24:19
    let mut _1: (u32, bool);             // in scope 0 at ui/assocciated-consts/issue-93775.rs:24:22: 24:32

    bb0: {
        _1 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/assocciated-consts/issue-93775.rs:24:22: 24:32
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/assocciated-consts/issue-93775.rs:24:22: 24:32
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/assocciated-consts/issue-93775.rs:24:22: 24:32
        return;                          // scope 0 at ui/assocciated-consts/issue-93775.rs:24:5: 24:33
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/assocciated-consts/issue-93775.rs:27:11: 27:11
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/assocciated-consts/issue-93775.rs:29:2: 29:2
    }
}

fn S(_1: PhantomData<T>) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/assocciated-consts/issue-93775.rs:11:1: 11:12

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/assocciated-consts/issue-93775.rs:11:1: 11:12
        return;                          // scope 0 at ui/assocciated-consts/issue-93775.rs:11:1: 11:12
    }
}

// MIR FOR CTFE
fn S(_1: PhantomData<T>) -> S<T> {
    let mut _0: S<T>;                    // return place in scope 0 at ui/assocciated-consts/issue-93775.rs:11:1: 11:12

    bb0: {
        _0 = S::<T>(move _1);            // scope 0 at ui/assocciated-consts/issue-93775.rs:11:1: 11:12
        return;                          // scope 0 at ui/assocciated-consts/issue-93775.rs:11:1: 11:12
    }
}
