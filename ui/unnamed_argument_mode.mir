// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn good(_1: &isize) -> () {
    debug _a => _1;                      // in scope 0 at ui/unnamed_argument_mode.rs:4:9: 4:11
    let mut _0: ();                      // return place in scope 0 at ui/unnamed_argument_mode.rs:4:21: 4:21

    bb0: {
        return;                          // scope 0 at ui/unnamed_argument_mode.rs:5:2: 5:2
    }
}

fn called(_1: F) -> () {
    debug _f => _1;                      // in scope 0 at ui/unnamed_argument_mode.rs:9:14: 9:16
    let mut _0: ();                      // return place in scope 0 at ui/unnamed_argument_mode.rs:9:21: 9:21

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/unnamed_argument_mode.rs:10:1: 10:2
    }

    bb1: {
        return;                          // scope 0 at ui/unnamed_argument_mode.rs:10:2: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/unnamed_argument_mode.rs:12:15: 12:15
    let _1: ();                          // in scope 0 at ui/unnamed_argument_mode.rs:13:5: 13:17

    bb0: {
        _1 = called::<for<'a> fn(&'a isize) {good}>(good) -> bb1; // scope 0 at ui/unnamed_argument_mode.rs:13:5: 13:17
                                         // mir::Constant
                                         // + span: ui/unnamed_argument_mode.rs:13:5: 13:11
                                         // + literal: Const { ty: fn(for<'a> fn(&'a isize) {good}) {called::<for<'a> fn(&'a isize) {good}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/unnamed_argument_mode.rs:13:12: 13:16
                                         // + literal: Const { ty: for<'a> fn(&'a isize) {good}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/unnamed_argument_mode.rs:14:2: 14:2
    }
}
