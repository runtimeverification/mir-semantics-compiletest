// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _run(_1: &mut i32) -> () {
    debug bar => _1;                     // in scope 0 at ui/generator/reborrow-mut-upvar.rs:5:9: 5:12
    let mut _0: ();                      // return place in scope 0 at ui/generator/reborrow-mut-upvar.rs:5:24: 5:24

    bb0: {
        return;                          // scope 0 at ui/generator/reborrow-mut-upvar.rs:14:2: 14:2
    }
}

fn _run::{closure#0}(_1: Pin<&mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]>, _2: ()) -> GeneratorState<(), ()> {
    debug bar => (*((*(_1.0: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7])).0: &mut &mut i32)); // in scope 0 at ui/generator/reborrow-mut-upvar.rs:5:9: 5:12
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let _3: &i32;                        // in scope 0 at ui/generator/reborrow-mut-upvar.rs:8:17: 8:21
    let mut _4: ();                      // in scope 0 at ui/generator/reborrow-mut-upvar.rs:9:13: 9:18
    let mut _5: &mut &mut i32;           // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let mut _6: &mut i32;                // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let mut _7: &mut &mut i32;           // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let mut _8: &mut i32;                // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let mut _9: ();                      // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:8: 6:8
    let mut _10: u32;                    // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let mut _11: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]; // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let mut _12: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]; // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let mut _13: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]; // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let mut _14: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]; // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    let mut _15: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]; // in scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    scope 1 {
        debug _baz => _3;                // in scope 1 at ui/generator/reborrow-mut-upvar.rs:8:17: 8:21
    }

    bb0: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]); // scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
        _10 = discriminant((*_11));      // scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
        switchInt(move _10) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4]; // scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    }

    bb1: {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]); // scope 0 at ui/generator/reborrow-mut-upvar.rs:8:24: 8:29
        _5 = deref_copy ((*_12).0: &mut &mut i32); // scope 0 at ui/generator/reborrow-mut-upvar.rs:8:24: 8:29
        _6 = deref_copy (*_5);           // scope 0 at ui/generator/reborrow-mut-upvar.rs:8:24: 8:29
        _3 = &(*_6);                     // scope 0 at ui/generator/reborrow-mut-upvar.rs:8:24: 8:29
        _4 = ();                         // scope 1 at ui/generator/reborrow-mut-upvar.rs:9:13: 9:18
        _0 = GeneratorState::<(), ()>::Yielded(move _4); // scope 1 at ui/generator/reborrow-mut-upvar.rs:9:13: 9:18
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]); // scope 1 at ui/generator/reborrow-mut-upvar.rs:9:13: 9:18
        discriminant((*_13)) = 3;        // scope 1 at ui/generator/reborrow-mut-upvar.rs:9:13: 9:18
        return;                          // scope 1 at ui/generator/reborrow-mut-upvar.rs:9:13: 9:18
    }

    bb2: {
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]); // scope 0 at ui/generator/reborrow-mut-upvar.rs:12:9: 12:17
        _7 = deref_copy ((*_14).0: &mut &mut i32); // scope 0 at ui/generator/reborrow-mut-upvar.rs:12:9: 12:17
        _8 = deref_copy (*_7);           // scope 0 at ui/generator/reborrow-mut-upvar.rs:12:9: 12:17
        (*_8) = const 2_i32;             // scope 0 at ui/generator/reborrow-mut-upvar.rs:12:9: 12:17
        _9 = const ();                   // scope 0 at ui/generator/reborrow-mut-upvar.rs:6:8: 13:6
        _0 = GeneratorState::<(), ()>::Complete(move _9); // scope 0 at ui/generator/reborrow-mut-upvar.rs:13:6: 13:6
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/reborrow-mut-upvar.rs:6:5: 6:7]); // scope 0 at ui/generator/reborrow-mut-upvar.rs:13:6: 13:6
        discriminant((*_15)) = 1;        // scope 0 at ui/generator/reborrow-mut-upvar.rs:13:6: 13:6
        return;                          // scope 0 at ui/generator/reborrow-mut-upvar.rs:13:6: 13:6
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3; // scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    }

    bb4: {
        unreachable;                     // scope 0 at ui/generator/reborrow-mut-upvar.rs:6:5: 13:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/reborrow-mut-upvar.rs:16:11: 16:11

    bb0: {
        return;                          // scope 0 at ui/generator/reborrow-mut-upvar.rs:16:13: 16:13
    }
}
