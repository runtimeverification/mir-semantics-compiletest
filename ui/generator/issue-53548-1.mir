// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/issue-53548-1.rs:16:11: 16:11
    let _1: Store<std::boxed::Box<for<'b, 'a> fn(&'b (dyn Trait + 'a))>>; // in scope 0 at ui/generator/issue-53548-1.rs:17:9: 17:14
    let mut _2: std::rc::Rc<std::cell::RefCell<std::option::Option<std::boxed::Box<for<'b, 'a> fn(&'b (dyn Trait + 'a))>>>>; // in scope 0 at ui/generator/issue-53548-1.rs:18:16: 18:34
    scope 1 {
        debug store => _1;               // in scope 1 at ui/generator/issue-53548-1.rs:17:9: 17:14
    }

    bb0: {
        _2 = <Rc<RefCell<Option<Box<for<'b, 'a> fn(&'b (dyn Trait + 'a))>>>> as Default>::default() -> bb1; // scope 0 at ui/generator/issue-53548-1.rs:18:16: 18:34
                                         // mir::Constant
                                         // + span: ui/generator/issue-53548-1.rs:18:16: 18:32
                                         // + literal: Const { ty: fn() -> Rc<RefCell<Option<Box<for<'b, 'a> fn(&'b (dyn Trait + 'a))>>>> {<Rc<RefCell<Option<Box<for<'b, 'a> fn(&'b (dyn Trait + 'a))>>>> as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Store::<Box<for<'b, 'a> fn(&'b (dyn Trait + 'a))>> { inner: move _2 }; // scope 0 at ui/generator/issue-53548-1.rs:17:17: 19:6
        drop(_1) -> bb2;                 // scope 0 at ui/generator/issue-53548-1.rs:20:1: 20:2
    }

    bb2: {
        return;                          // scope 0 at ui/generator/issue-53548-1.rs:20:2: 20:2
    }
}
