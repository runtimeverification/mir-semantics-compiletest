// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static DROP: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/resume-live-across-yield.rs:11:10: 11:19>::eq(_1: &Dropper, _2: &Dropper) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &std::string::String;

    bb0: {
        _3 = &((*_1).0: std::string::String);
        _4 = &((*_2).0: std::string::String);
        _0 = <String as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/resume-live-across-yield.rs:11:21: 11:23>::assert_receiver_is_total_eq(_1: &Dropper) -> () {
    debug self => _1;
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn <impl at ui/generator/resume-live-across-yield.rs:11:25: 11:30>::fmt(_1: &Dropper, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&std::string::String;
    let _6: &std::string::String;

    bb0: {
        _3 = const "Dropper";
        _6 = &((*_1).0: std::string::String);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/resume-live-across-yield.rs:14:1: 14:22>::drop(_1: &mut Dropper) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: DROP, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _3: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _4: (&std::ops::GeneratorState<(), Dropper>, &std::ops::GeneratorState<(), Dropper>);
    let mut _5: &std::ops::GeneratorState<(), Dropper>;
    let _6: std::ops::GeneratorState<(), Dropper>;
    let mut _7: std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _8: &mut std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _9: Dropper;
    let mut _10: std::string::String;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: (&usize, &usize);
    let mut _19: &usize;
    let _20: usize;
    let _21: &std::sync::atomic::AtomicUsize;
    let mut _22: std::sync::atomic::Ordering;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: usize;
    let mut _28: usize;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: std::ops::GeneratorState<(), Dropper>;
    let mut _33: std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _34: &mut std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _35: Dropper;
    let mut _36: std::string::String;
    let mut _37: isize;
    let mut _39: (&usize, &usize);
    let mut _40: &usize;
    let _41: usize;
    let _42: &std::sync::atomic::AtomicUsize;
    let mut _43: std::sync::atomic::Ordering;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: usize;
    let mut _49: usize;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&std::string::String, &&str);
    let mut _54: &std::string::String;
    let mut _57: bool;
    let mut _58: bool;
    let _60: !;
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>;
    let _62: ();
    let mut _63: Dropper;
    let mut _64: (&usize, &usize);
    let mut _65: &usize;
    let _66: usize;
    let _67: &std::sync::atomic::AtomicUsize;
    let mut _68: std::sync::atomic::Ordering;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: usize;
    let mut _74: usize;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _78: !;
    let _79: ();
    let mut _80: std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
    let mut _81: (&usize, &usize);
    let mut _82: &usize;
    let _83: usize;
    let _84: &std::sync::atomic::AtomicUsize;
    let mut _85: std::sync::atomic::Ordering;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: usize;
    let mut _91: usize;
    let _93: !;
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _101: bool;
    let mut _102: bool;
    let mut _103: isize;
    scope 1 {
        debug g => _1;
        let mut _2: std::pin::Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>;
        scope 2 {
            debug g => _2;
            let _11: &std::ops::GeneratorState<(), Dropper>;
            let _12: &std::ops::GeneratorState<(), Dropper>;
            let _23: &usize;
            let _24: &usize;
            let _38: Dropper;
            let _86: &usize;
            let _87: &usize;
            let mut _95: &usize;
            let mut _99: &usize;
            let mut _100: &std::ops::GeneratorState<(), Dropper>;
            scope 3 {
                debug left_val => _11;
                debug right_val => _12;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug left_val => _23;
                debug right_val => _24;
                let _29: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _29;
                }
            }
            scope 7 {
                debug dropper => _38;
                let _44: &usize;
                let _45: &usize;
                let _55: &std::string::String;
                let _56: &&str;
                let _69: &usize;
                let _70: &usize;
                let mut _96: &usize;
                let mut _97: &&str;
                let mut _98: &usize;
                scope 8 {
                    debug left_val => _44;
                    debug right_val => _45;
                    let _50: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _50;
                    }
                }
                scope 10 {
                    debug left_val => _55;
                    debug right_val => _56;
                    let _59: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _59;
                    }
                }
                scope 12 {
                    debug left_val => _69;
                    debug right_val => _70;
                    let _75: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _75;
                    }
                }
            }
            scope 14 {
                debug left_val => _86;
                debug right_val => _87;
                let _92: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _92;
                }
            }
        }
    }

    bb0: {
        _101 = const false;
        _102 = const false;
        _1 = [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25 (#0)];
        _3 = &mut _1;
        _2 = Pin::<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>::new(move _3) -> [return: bb1, unwind: bb33];
    }

    bb1: {
        _8 = &mut _2;
        _7 = Pin::<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>::as_mut(move _8) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _10 = <String as From<&str>>::from(const "Hello world!") -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _9 = Dropper(move _10);
        _6 = <[generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25] as Generator<Dropper>>::resume(move _7, move _9) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _5 = &_6;
        _100 = const _;
        _4 = (move _5, _100);
        _11 = (_4.0: &std::ops::GeneratorState<(), Dropper>);
        _12 = (_4.1: &std::ops::GeneratorState<(), Dropper>);
        _14 = <GeneratorState<(), Dropper> as PartialEq>::eq(_11, _12) -> [return: bb5, unwind: bb32];
    }

    bb5: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<GeneratorState<(), Dropper>, GeneratorState<(), Dropper>>(move _15, _11, _12, move _17) -> bb32;
    }

    bb7: {
        drop(_6) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        _21 = const {alloc1: &AtomicUsize};
        _22 = Acquire;
        _20 = AtomicUsize::load(_21, move _22) -> [return: bb9, unwind: bb33];
    }

    bb9: {
        _19 = &_20;
        _99 = const _;
        _18 = (move _19, _99);
        _23 = (_18.0: &usize);
        _24 = (_18.1: &usize);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<usize, usize>(move _29, _23, _24, move _31) -> bb33;
    }

    bb11: {
        _34 = &mut _2;
        _33 = Pin::<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>::as_mut(move _34) -> [return: bb12, unwind: bb33];
    }

    bb12: {
        _36 = <String as From<&str>>::from(const "Number Two") -> [return: bb13, unwind: bb33];
    }

    bb13: {
        _35 = Dropper(move _36);
        _32 = <[generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25] as Generator<Dropper>>::resume(move _33, move _35) -> [return: bb14, unwind: bb33];
    }

    bb14: {
        _102 = const true;
        _37 = discriminant(_32);
        switchInt(move _37) -> [1: bb16, otherwise: bb15];
    }

    bb15: {
        _78 = core::panicking::panic(const "internal error: entered unreachable code") -> bb39;
    }

    bb16: {
        _102 = const false;
        _101 = const true;
        _38 = move ((_32 as Complete).0: Dropper);
        _42 = const {alloc1: &AtomicUsize};
        _43 = Acquire;
        _41 = AtomicUsize::load(_42, move _43) -> [return: bb17, unwind: bb36];
    }

    bb17: {
        _40 = &_41;
        _98 = const _;
        _39 = (move _40, _98);
        _44 = (_39.0: &usize);
        _45 = (_39.1: &usize);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<usize, usize>(move _50, _44, _45, move _52) -> bb36;
    }

    bb19: {
        _54 = &(_38.0: std::string::String);
        _97 = const _;
        _53 = (move _54, _97);
        _55 = (_53.0: &std::string::String);
        _56 = (_53.1: &&str);
        _58 = <String as PartialEq<&str>>::eq(_55, _56) -> [return: bb20, unwind: bb36];
    }

    bb20: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _59 = core::panicking::AssertKind::Eq;
        _61 = Option::<Arguments<'_>>::None;
        _60 = core::panicking::assert_failed::<String, &str>(move _59, _55, _56, move _61) -> bb36;
    }

    bb22: {
        _101 = const false;
        _63 = move _38;
        _62 = std::mem::drop::<Dropper>(move _63) -> [return: bb23, unwind: bb36];
    }

    bb23: {
        _67 = const {alloc1: &AtomicUsize};
        _68 = Acquire;
        _66 = AtomicUsize::load(_67, move _68) -> [return: bb24, unwind: bb36];
    }

    bb24: {
        _65 = &_66;
        _96 = const _;
        _64 = (move _65, _96);
        _69 = (_64.0: &usize);
        _70 = (_64.1: &usize);
        _73 = (*_69);
        _74 = (*_70);
        _72 = Eq(move _73, move _74);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<usize, usize>(move _75, _69, _70, move _77) -> bb36;
    }

    bb26: {
        _101 = const false;
        _102 = const false;
        _80 = move _2;
        _79 = std::mem::drop::<Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>>(move _80) -> [return: bb27, unwind: bb33];
    }

    bb27: {
        _84 = const {alloc1: &AtomicUsize};
        _85 = Acquire;
        _83 = AtomicUsize::load(_84, move _85) -> [return: bb28, unwind: bb33];
    }

    bb28: {
        _82 = &_83;
        _95 = const _;
        _81 = (move _82, _95);
        _86 = (_81.0: &usize);
        _87 = (_81.1: &usize);
        _90 = (*_86);
        _91 = (*_87);
        _89 = Eq(move _90, move _91);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _92 = core::panicking::AssertKind::Eq;
        _94 = Option::<Arguments<'_>>::None;
        _93 = core::panicking::assert_failed::<usize, usize>(move _92, _86, _87, move _94) -> bb33;
    }

    bb30: {
        drop(_1) -> [return: bb31, unwind continue];
    }

    bb31: {
        return;
    }

    bb32 (cleanup): {
        drop(_6) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_1) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }

    bb35 (cleanup): {
        drop(_38) -> [return: bb39, unwind terminate];
    }

    bb36 (cleanup): {
        switchInt(_101) -> [0: bb39, otherwise: bb35];
    }

    bb37 (cleanup): {
        switchInt(_102) -> [0: bb33, otherwise: bb38];
    }

    bb38 (cleanup): {
        drop(((_32 as Complete).0: Dropper)) -> [return: bb33, unwind terminate];
    }

    bb39 (cleanup): {
        _103 = discriminant(_32);
        switchInt(move _103) -> [1: bb37, otherwise: bb33];
    }
}

alloc1 (static: DROP, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Number Two";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &GeneratorState<(), Dropper> = {
    let mut _0: &std::ops::GeneratorState<(), Dropper>;
    let mut _1: std::ops::GeneratorState<(), Dropper>;
    let mut _2: ();

    bb0: {
        _2 = ();
        _1 = GeneratorState::<(), Dropper>::Yielded(move _2);
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]>, _2: Dropper) -> GeneratorState<(), Dropper> {
    debug _d => (((*(_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25])) as variant#3).0: Dropper);
    let mut _0: std::ops::GeneratorState<(), Dropper>;
    let mut _3: ();
    let mut _4: Dropper;
    let mut _5: u32;
    let mut _6: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _7: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _8: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _9: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _10: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _11: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _12: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _13: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _14: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];
    let mut _15: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25];

    bb0: {
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        _5 = discriminant((*_6));
        switchInt(move _5) -> [0: bb1, 1: bb7, 2: bb6, 3: bb5, otherwise: bb8];
    }

    bb1: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        (((*_7) as variant#3).0: Dropper) = move _2;
        _3 = ();
        _0 = GeneratorState::<(), Dropper>::Yielded(move _3);
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        discriminant((*_8)) = 3;
        return;
    }

    bb2: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        (((*_10) as variant#3).0: Dropper) = move _2;
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        _4 = move (((*_12) as variant#3).0: Dropper);
        _0 = GeneratorState::<(), Dropper>::Complete(move _4);
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        discriminant((*_13)) = 1;
        return;
    }

    bb3 (cleanup): {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        (((*_11) as variant#3).0: Dropper) = move _2;
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        drop((((*_14) as variant#3).0: Dropper)) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        discriminant((*_15)) = 2;
        resume;
    }

    bb5: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/resume-live-across-yield.rs:21:17: 21:25]);
        drop((((*_9) as variant#3).0: Dropper)) -> [return: bb2, unwind: bb3];
    }

    bb6: {
        assert(const false, "generator resumed after panicking") -> [success: bb6, unwind continue];
    }

    bb7: {
        assert(const false, "generator resumed after completion") -> [success: bb7, unwind continue];
    }

    bb8: {
        unreachable;
    }
}

fn Dropper(_1: String) -> Dropper {
    let mut _0: Dropper;

    bb0: {
        _0 = Dropper(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Dropper(_1: String) -> Dropper {
    let mut _0: Dropper;

    bb0: {
        _0 = Dropper(move _1);
        return;
    }
}
