// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/generator-resume-after-panic.rs:16:11: 16:11
    let mut _1: [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]; // in scope 0 at ui/generator/generator-resume-after-panic.rs:17:9: 17:14
    let _2: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/generator/generator-resume-after-panic.rs:21:5: 23:8
    let mut _3: std::panic::AssertUnwindSafe<[closure@ui/generator/generator-resume-after-panic.rs:21:49: 21:51]>; // in scope 0 at ui/generator/generator-resume-after-panic.rs:21:25: 23:7
    let mut _4: [closure@ui/generator/generator-resume-after-panic.rs:21:49: 21:51]; // in scope 0 at ui/generator/generator-resume-after-panic.rs:21:49: 23:6
    let mut _5: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]; // in scope 0 at ui/generator/generator-resume-after-panic.rs:21:49: 23:6
    let _6: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/generator-resume-after-panic.rs:24:5: 24:32
    let mut _7: std::pin::Pin<&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]>; // in scope 0 at ui/generator/generator-resume-after-panic.rs:24:5: 24:21
    let mut _8: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]; // in scope 0 at ui/generator/generator-resume-after-panic.rs:24:14: 24:20
    let mut _9: ();                      // in scope 0 at ui/generator/generator-resume-after-panic.rs:24:29: 24:31
    scope 1 {
        debug g => _1;                   // in scope 1 at ui/generator/generator-resume-after-panic.rs:17:9: 17:14
    }

    bb0: {
        _1 = [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19 (#0)]; // scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
                                         // generator
                                         // + def_id: DefId(0:8 ~ generator_resume_after_panic[9920]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _5 = &mut _1;                    // scope 1 at ui/generator/generator-resume-after-panic.rs:21:49: 23:6
        _4 = [closure@ui/generator/generator-resume-after-panic.rs:21:49: 21:51] { g: move _5 }; // scope 1 at ui/generator/generator-resume-after-panic.rs:21:49: 23:6
                                         // closure
                                         // + def_id: DefId(0:9 ~ generator_resume_after_panic[9920]::main::{closure#1})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()),
                                         //     (&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19],),
                                         // ]
        _3 = AssertUnwindSafe::<[closure@ui/generator/generator-resume-after-panic.rs:21:49: 21:51]>(move _4); // scope 1 at ui/generator/generator-resume-after-panic.rs:21:25: 23:7
        _2 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/generator-resume-after-panic.rs:21:49: 21:51]>, ()>(move _3) -> bb1; // scope 1 at ui/generator/generator-resume-after-panic.rs:21:5: 23:8
                                         // mir::Constant
                                         // + span: ui/generator/generator-resume-after-panic.rs:21:5: 21:24
                                         // + literal: Const { ty: fn(AssertUnwindSafe<[closure@ui/generator/generator-resume-after-panic.rs:21:49: 21:51]>) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<AssertUnwindSafe<[closure@ui/generator/generator-resume-after-panic.rs:21:49: 21:51]>, ()>}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> bb2;                 // scope 1 at ui/generator/generator-resume-after-panic.rs:23:8: 23:9
    }

    bb2: {
        _8 = &mut _1;                    // scope 1 at ui/generator/generator-resume-after-panic.rs:24:14: 24:20
        _7 = Pin::<&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]>::new(move _8) -> bb3; // scope 1 at ui/generator/generator-resume-after-panic.rs:24:5: 24:21
                                         // mir::Constant
                                         // + span: ui/generator/generator-resume-after-panic.rs:24:5: 24:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]) -> Pin<&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]> {Pin::<&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = <[generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19] as Generator>::resume(move _7, move _9) -> bb4; // scope 1 at ui/generator/generator-resume-after-panic.rs:24:5: 24:32
                                         // mir::Constant
                                         // + span: ui/generator/generator-resume-after-panic.rs:24:22: 24:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]>, ()) -> GeneratorState<<[generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19] as Generator>::Yield, <[generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19] as Generator>::Return> {<[generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/generator/generator-resume-after-panic.rs:25:2: 25:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _4: u32;                     // in scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
    let mut _5: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]; // in scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
    let mut _6: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]; // in scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6

    bb0: {
        _5 = deref_copy (_1.0: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]); // scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
        _4 = discriminant((*_5));        // scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
        switchInt(move _4) -> [0: bb1, 2: bb3, otherwise: bb4]; // scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic") -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2 (cleanup): {
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]); // scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
        discriminant((*_6)) = 2;         // scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
        resume;                          // scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
    }

    bb3: {
        assert(const false, "generator resumed after panicking") -> bb3; // scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
    }

    bb4: {
        unreachable;                     // scope 0 at ui/generator/generator-resume-after-panic.rs:17:17: 20:6
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/generator/generator-resume-after-panic.rs:21:49: 21:51]) -> () {
    debug g => (*((*_1).0: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19])); // in scope 0 at ui/generator/generator-resume-after-panic.rs:17:9: 17:14
    let mut _0: ();                      // return place in scope 0 at ui/generator/generator-resume-after-panic.rs:21:52: 21:52
    let _2: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/generator-resume-after-panic.rs:22:13: 22:14
    let mut _3: std::pin::Pin<&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]>; // in scope 0 at ui/generator/generator-resume-after-panic.rs:22:17: 22:33
    let mut _4: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]; // in scope 0 at ui/generator/generator-resume-after-panic.rs:22:26: 22:32
    let mut _5: ();                      // in scope 0 at ui/generator/generator-resume-after-panic.rs:22:41: 22:43
    let mut _6: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]; // in scope 0 at ui/generator/generator-resume-after-panic.rs:21:49: 23:6
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/generator/generator-resume-after-panic.rs:22:13: 22:14
    }

    bb0: {
        _6 = deref_copy ((*_1).0: &mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]); // scope 0 at ui/generator/generator-resume-after-panic.rs:22:26: 22:32
        _4 = &mut (*_6);                 // scope 0 at ui/generator/generator-resume-after-panic.rs:22:26: 22:32
        _3 = Pin::<&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]>::new(move _4) -> bb1; // scope 0 at ui/generator/generator-resume-after-panic.rs:22:17: 22:33
                                         // mir::Constant
                                         // + span: ui/generator/generator-resume-after-panic.rs:22:17: 22:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]) -> Pin<&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]> {Pin::<&mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <[generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19] as Generator>::resume(move _3, move _5) -> bb2; // scope 0 at ui/generator/generator-resume-after-panic.rs:22:17: 22:44
                                         // mir::Constant
                                         // + span: ui/generator/generator-resume-after-panic.rs:22:34: 22:40
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19]>, ()) -> GeneratorState<<[generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19] as Generator>::Yield, <[generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19] as Generator>::Return> {<[generator@ui/generator/generator-resume-after-panic.rs:17:17: 17:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generator/generator-resume-after-panic.rs:23:6: 23:6
    }
}
