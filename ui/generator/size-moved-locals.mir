// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const FOO_SIZE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1024_usize;
        return;
    }
}

Foo::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn <impl at ui/generator/size-moved-locals.rs:24:1: 24:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn move_before_yield() -> impl Generator<Yield = (), Return = ()> {
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()>;

    bb0: {
        _0 = [generator@ui/generator/size-moved-locals.rs:29:5: 29:14 (#0)];
        return;
    }
}

fn move_before_yield::{closure#0}(_1: Pin<&mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: Foo;
    let mut _4: [u8; 1024];
    let mut _5: ();
    let mut _6: ();
    let mut _7: u32;
    let mut _8: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _9: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _10: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _11: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _12: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    let mut _13: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14];
    scope 1 {
        debug first => _3;
        scope 2 {
            debug _second => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14])) as variant#3).0: Foo);
        }
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7];
    }

    bb1: {
        _4 = [const 0_u8; 1024];
        _3 = Foo(move _4);
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        (((*_9) as variant#3).0: Foo) = move _3;
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        discriminant((*_10)) = 3;
        return;
    }

    bb2: {
        _0 = GeneratorState::<(), ()>::Complete(move _6);
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        discriminant((*_12)) = 1;
        return;
    }

    bb3 (cleanup): {
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        discriminant((*_13)) = 2;
        resume;
    }

    bb4: {
        _6 = const ();
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:29:5: 29:14]);
        drop((((*_11) as variant#3).0: Foo)) -> [return: bb2, unwind: bb3];
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> [success: bb5, unwind continue];
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> [success: bb6, unwind continue];
    }

    bb7: {
        unreachable;
    }
}

move_before_yield::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn noop() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn move_before_yield_with_noop() -> impl Generator<Yield = (), Return = ()> {
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()>;

    bb0: {
        _0 = [generator@ui/generator/size-moved-locals.rs:40:5: 40:14 (#0)];
        return;
    }
}

fn move_before_yield_with_noop::{closure#0}(_1: Pin<&mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: Foo;
    let mut _4: [u8; 1024];
    let _5: ();
    let mut _6: ();
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _10: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _11: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _12: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _13: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _14: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _15: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _16: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _17: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _18: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _19: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    let mut _20: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14];
    scope 1 {
        debug first => _3;
        scope 2 {
            debug _second => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14])) as variant#3).0: Foo);
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_10) as variant#3).1: bool) = const false;
        _4 = [const 0_u8; 1024];
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_11) as variant#3).1: bool) = const true;
        _3 = Foo(move _4);
        _5 = noop() -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_12) as variant#3).1: bool) = const false;
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_13) as variant#3).0: Foo) = move _3;
        _6 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _6);
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        discriminant((*_14)) = 3;
        return;
    }

    bb3: {
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_16) as variant#3).1: bool) = const false;
        _0 = GeneratorState::<(), ()>::Complete(move _7);
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        discriminant((*_17)) = 1;
        return;
    }

    bb4 (cleanup): {
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        (((*_18) as variant#3).1: bool) = const false;
        _20 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        discriminant((*_20)) = 2;
        resume;
    }

    bb5 (cleanup): {
        drop(_3) -> [return: bb4, unwind terminate];
    }

    bb6 (cleanup): {
        _19 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        switchInt((((*_19) as variant#3).1: bool)) -> [0: bb4, otherwise: bb5];
    }

    bb7: {
        _7 = const ();
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:40:5: 40:14]);
        drop((((*_15) as variant#3).0: Foo)) -> [return: bb3, unwind: bb6];
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> [success: bb8, unwind continue];
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> [success: bb9, unwind continue];
    }

    bb10: {
        unreachable;
    }
}

move_before_yield_with_noop::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn overlap_move_points() -> impl Generator<Yield = (), Return = ()> {
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()>;

    bb0: {
        _0 = [generator@ui/generator/size-moved-locals.rs:52:5: 52:14 (#0)];
        return;
    }
}

fn overlap_move_points::{closure#0}(_1: Pin<&mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: [u8; 1024];
    let mut _4: ();
    let mut _5: ();
    let mut _6: ();
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _10: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _11: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _12: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _13: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _14: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _15: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _16: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _17: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _18: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _19: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _20: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _21: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _22: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _23: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _24: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _25: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _26: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _27: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _28: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _29: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    let mut _30: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14];
    scope 1 {
        debug first => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14])) as variant#3).0: Foo);
        scope 2 {
            debug second => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14])) as variant#4).0: Foo);
            scope 3 {
                debug _third => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14])) as variant#5).0: Foo);
            }
        }
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb8, 2: bb7, 3: bb4, 4: bb5, 5: bb6, otherwise: bb9];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_10) as variant#3).1: bool) = const false;
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_11) as variant#4).1: bool) = const false;
        _3 = [const 0_u8; 1024];
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_12) as variant#3).1: bool) = const true;
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_13) as variant#3).0: Foo) = Foo(move _3);
        _4 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _4);
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_14)) = 3;
        return;
    }

    bb2: {
        _25 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_25) as variant#4).1: bool) = const false;
        _26 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_26) as variant#3).1: bool) = const false;
        _0 = GeneratorState::<(), ()>::Complete(move _7);
        _27 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_27)) = 1;
        return;
    }

    bb3 (cleanup): {
        _28 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_28) as variant#4).1: bool) = const false;
        _29 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_29) as variant#3).1: bool) = const false;
        _30 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_30)) = 2;
        resume;
    }

    bb4: {
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_15) as variant#3).1: bool) = const false;
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_16) as variant#4).1: bool) = const true;
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_17) as variant#4).0: Foo) = move (((*_18) as variant#3).0: Foo);
        _5 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _5);
        _19 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_19)) = 4;
        return;
    }

    bb5: {
        _20 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_20) as variant#4).1: bool) = const false;
        _21 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        _22 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        (((*_21) as variant#5).0: Foo) = move (((*_22) as variant#4).0: Foo);
        _6 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _6);
        _23 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        discriminant((*_23)) = 5;
        return;
    }

    bb6: {
        _7 = const ();
        _24 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:52:5: 52:14]);
        drop((((*_24) as variant#5).0: Foo)) -> [return: bb2, unwind: bb3];
    }

    bb7: {
        assert(const false, "generator resumed after panicking") -> [success: bb7, unwind continue];
    }

    bb8: {
        assert(const false, "generator resumed after completion") -> [success: bb8, unwind continue];
    }

    bb9: {
        unreachable;
    }
}

overlap_move_points::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn overlap_x_and_y() -> impl Generator<Yield = (), Return = ()> {
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()>;

    bb0: {
        _0 = [generator@ui/generator/size-moved-locals.rs:63:5: 63:14 (#0)];
        return;
    }
}

fn overlap_x_and_y::{closure#0}(_1: Pin<&mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: [u8; 1024];
    let mut _4: ();
    let _5: ();
    let mut _6: Foo;
    let mut _7: [u8; 1024];
    let mut _8: ();
    let _9: ();
    let mut _10: Foo;
    let mut _11: ();
    let mut _12: u32;
    let mut _13: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _14: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _15: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _16: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _17: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _18: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _19: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _20: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _21: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _22: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _23: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _24: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _25: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    let mut _26: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14];
    scope 1 {
        debug x => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14])) as variant#3).0: Foo);
        scope 2 {
            debug y => (((*(_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14])) as variant#4).0: Foo);
        }
    }

    bb0: {
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        _12 = discriminant((*_13));
        switchInt(move _12) -> [0: bb1, 1: bb8, 2: bb7, 3: bb5, 4: bb6, otherwise: bb9];
    }

    bb1: {
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_14) as variant#3).1: bool) = const false;
        _3 = [const 0_u8; 1024];
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_15) as variant#3).1: bool) = const true;
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_16) as variant#3).0: Foo) = Foo(move _3);
        _4 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _4);
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        discriminant((*_17)) = 3;
        return;
    }

    bb2: {
        _7 = [const 0_u8; 1024];
        _20 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_20) as variant#4).0: Foo) = Foo(move _7);
        _8 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _8);
        _21 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        discriminant((*_21)) = 4;
        return;
    }

    bb3: {
        _11 = const ();
        _23 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_23) as variant#3).1: bool) = const false;
        _0 = GeneratorState::<(), ()>::Complete(move _11);
        _24 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        discriminant((*_24)) = 1;
        return;
    }

    bb4 (cleanup): {
        _25 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_25) as variant#3).1: bool) = const false;
        _26 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        discriminant((*_26)) = 2;
        resume;
    }

    bb5: {
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        (((*_18) as variant#3).1: bool) = const false;
        _19 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        _6 = move (((*_19) as variant#3).0: Foo);
        _5 = std::mem::drop::<Foo>(move _6) -> [return: bb2, unwind: bb4];
    }

    bb6: {
        _22 = deref_copy (_1.0: &mut [static generator@ui/generator/size-moved-locals.rs:63:5: 63:14]);
        _10 = move (((*_22) as variant#4).0: Foo);
        _9 = std::mem::drop::<Foo>(move _10) -> [return: bb3, unwind: bb4];
    }

    bb7: {
        assert(const false, "generator resumed after panicking") -> [success: bb7, unwind continue];
    }

    bb8: {
        assert(const false, "generator resumed after completion") -> [success: bb8, unwind continue];
    }

    bb9: {
        unreachable;
    }
}

overlap_x_and_y::{closure#0}::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

overlap_x_and_y::{closure#0}::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const _;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let mut _2: &usize;
    let _3: usize;
    let _4: &impl std::ops::Generator<Yield = (), Return = ()>;
    let _5: impl std::ops::Generator<Yield = (), Return = ()>;
    let _6: &usize;
    let _7: &usize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&usize, &usize);
    let mut _16: &usize;
    let _17: usize;
    let _18: &impl std::ops::Generator<Yield = (), Return = ()>;
    let _19: impl std::ops::Generator<Yield = (), Return = ()>;
    let _20: &usize;
    let _21: &usize;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: usize;
    let mut _25: usize;
    let _27: !;
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&usize, &usize);
    let mut _30: &usize;
    let _31: usize;
    let _32: &impl std::ops::Generator<Yield = (), Return = ()>;
    let _33: impl std::ops::Generator<Yield = (), Return = ()>;
    let _34: &usize;
    let _35: &usize;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: usize;
    let mut _39: usize;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: (&usize, &usize);
    let mut _44: &usize;
    let _45: usize;
    let _46: &impl std::ops::Generator<Yield = (), Return = ()>;
    let _47: impl std::ops::Generator<Yield = (), Return = ()>;
    let _48: &usize;
    let _49: &usize;
    let mut _50: bool;
    let mut _51: bool;
    let mut _52: usize;
    let mut _53: usize;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: &usize;
    let mut _58: &usize;
    let mut _59: &usize;
    let mut _60: &usize;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }
    scope 3 {
        debug left_val => _20;
        debug right_val => _21;
        let _26: core::panicking::AssertKind;
        scope 4 {
            debug kind => _26;
        }
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _40: core::panicking::AssertKind;
        scope 6 {
            debug kind => _40;
        }
    }
    scope 7 {
        debug left_val => _48;
        debug right_val => _49;
        let _54: core::panicking::AssertKind;
        scope 8 {
            debug kind => _54;
        }
    }

    bb0: {
        _60 = const _;
        _5 = move_before_yield() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_5;
        _3 = std::mem::size_of_val::<impl Generator<Yield = (), Return = ()>>(_4) -> [return: bb2, unwind: bb24];
    }

    bb2: {
        _2 = &_3;
        _1 = (_60, move _2);
        _6 = (_1.0: &usize);
        _7 = (_1.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> bb24;
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind continue];
    }

    bb5: {
        _59 = const _;
        _19 = move_before_yield_with_noop() -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = &_19;
        _17 = std::mem::size_of_val::<impl Generator<Yield = (), Return = ()>>(_18) -> [return: bb7, unwind: bb23];
    }

    bb7: {
        _16 = &_17;
        _15 = (_59, move _16);
        _20 = (_15.0: &usize);
        _21 = (_15.1: &usize);
        _24 = (*_20);
        _25 = (*_21);
        _23 = Eq(move _24, move _25);
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _26 = core::panicking::AssertKind::Eq;
        _28 = Option::<Arguments<'_>>::None;
        _27 = core::panicking::assert_failed::<usize, usize>(move _26, _20, _21, move _28) -> bb23;
    }

    bb9: {
        drop(_19) -> [return: bb10, unwind continue];
    }

    bb10: {
        _58 = const _;
        _33 = overlap_move_points() -> [return: bb11, unwind continue];
    }

    bb11: {
        _32 = &_33;
        _31 = std::mem::size_of_val::<impl Generator<Yield = (), Return = ()>>(_32) -> [return: bb12, unwind: bb22];
    }

    bb12: {
        _30 = &_31;
        _29 = (_58, move _30);
        _34 = (_29.0: &usize);
        _35 = (_29.1: &usize);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<usize, usize>(move _40, _34, _35, move _42) -> bb22;
    }

    bb14: {
        drop(_33) -> [return: bb15, unwind continue];
    }

    bb15: {
        _57 = const _;
        _47 = overlap_x_and_y() -> [return: bb16, unwind continue];
    }

    bb16: {
        _46 = &_47;
        _45 = std::mem::size_of_val::<impl Generator<Yield = (), Return = ()>>(_46) -> [return: bb17, unwind: bb21];
    }

    bb17: {
        _44 = &_45;
        _43 = (_57, move _44);
        _48 = (_43.0: &usize);
        _49 = (_43.1: &usize);
        _52 = (*_48);
        _53 = (*_49);
        _51 = Eq(move _52, move _53);
        _50 = Not(move _51);
        switchInt(move _50) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<usize, usize>(move _54, _48, _49, move _56) -> bb21;
    }

    bb19: {
        drop(_47) -> [return: bb20, unwind continue];
    }

    bb20: {
        return;
    }

    bb21 (cleanup): {
        drop(_47) -> [return: bb25, unwind terminate];
    }

    bb22 (cleanup): {
        drop(_33) -> [return: bb25, unwind terminate];
    }

    bb23 (cleanup): {
        drop(_19) -> [return: bb25, unwind terminate];
    }

    bb24 (cleanup): {
        drop(_5) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1026_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2051_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1026_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1025_usize;
        _0 = &_1;
        return;
    }
}

fn Foo(_1: [u8; 1024]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: [u8; 1024]) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
