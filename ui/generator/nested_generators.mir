// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/nested_generators.rs:8:11: 8:11
    let _1: [generator@ui/generator/nested_generators.rs:9:22: 9:24]; // in scope 0 at ui/generator/nested_generators.rs:9:9: 9:19
    scope 1 {
        debug _generator => _1;          // in scope 1 at ui/generator/nested_generators.rs:9:9: 9:19
    }

    bb0: {
        _1 = [generator@ui/generator/nested_generators.rs:9:22: 9:24 (#0)]; // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
                                         // generator
                                         // + def_id: DefId(0:8 ~ nested_generators[acb9]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     i32,
                                         //     (),
                                         //     for<'a, 'b> {[generator@ui/generator/nested_generators.rs:10:33: 10:35], &'a mut [generator@ui/generator/nested_generators.rs:10:33: 10:35], std::pin::Pin<&'b mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]>, (), std::ops::GeneratorState<i32, ()>, i32},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        return;                          // scope 0 at ui/generator/nested_generators.rs:21:2: 21:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]>, _2: ()) -> GeneratorState<i32, ()> {
    let mut _0: std::ops::GeneratorState<i32, ()>; // return place in scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    let mut _3: [generator@ui/generator/nested_generators.rs:10:33: 10:35]; // in scope 0 at ui/generator/nested_generators.rs:10:13: 10:30
    let mut _4: std::ops::GeneratorState<i32, ()>; // in scope 0 at ui/generator/nested_generators.rs:14:15: 14:54
    let mut _5: std::pin::Pin<&mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]>; // in scope 0 at ui/generator/nested_generators.rs:14:15: 14:43
    let mut _6: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]; // in scope 0 at ui/generator/nested_generators.rs:14:24: 14:42
    let mut _7: ();                      // in scope 0 at ui/generator/nested_generators.rs:14:51: 14:53
    let mut _8: isize;                   // in scope 0 at ui/generator/nested_generators.rs:15:13: 15:39
    let mut _10: i32;                    // in scope 0 at ui/generator/nested_generators.rs:16:23: 16:24
    let mut _11: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _12: ();                     // in scope 0 at ui/generator/nested_generators.rs:9:25: 9:25
    let mut _13: u32;                    // in scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    let mut _14: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]; // in scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    let mut _15: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]; // in scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    let mut _16: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]; // in scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    let mut _17: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]; // in scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    scope 1 {
        debug sub_generator => _3;       // in scope 1 at ui/generator/nested_generators.rs:10:13: 10:30
        let _9: i32;                     // in scope 1 at ui/generator/nested_generators.rs:15:37: 15:38
        scope 2 {
            debug x => _9;               // in scope 2 at ui/generator/nested_generators.rs:15:37: 15:38
        }
    }

    bb0: {
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]); // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
        _13 = discriminant((*_14));      // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
        switchInt(move _13) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10]; // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    }

    bb1: {
        _3 = [generator@ui/generator/nested_generators.rs:10:33: 10:35 (#0)]; // scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
                                         // generator
                                         // + def_id: DefId(0:9 ~ nested_generators[acb9]::main::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     i32,
                                         //     (),
                                         //     {i32, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _6 = &mut _3;                    // scope 1 at ui/generator/nested_generators.rs:14:24: 14:42
        _5 = Pin::<&mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]>::new(move _6) -> [return: bb2, unwind: bb6]; // scope 1 at ui/generator/nested_generators.rs:14:15: 14:43
                                         // mir::Constant
                                         // + span: ui/generator/nested_generators.rs:14:15: 14:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]) -> Pin<&mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]> {Pin::<&mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = ();                         // scope 1 at ui/generator/nested_generators.rs:14:51: 14:53
        _4 = <[generator@ui/generator/nested_generators.rs:10:33: 10:35] as Generator>::resume(move _5, move _7) -> [return: bb3, unwind: bb6]; // scope 1 at ui/generator/nested_generators.rs:14:15: 14:54
                                         // mir::Constant
                                         // + span: ui/generator/nested_generators.rs:14:44: 14:50
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]>, ()) -> GeneratorState<<[generator@ui/generator/nested_generators.rs:10:33: 10:35] as Generator>::Yield, <[generator@ui/generator/nested_generators.rs:10:33: 10:35] as Generator>::Return> {<[generator@ui/generator/nested_generators.rs:10:33: 10:35] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_4);           // scope 1 at ui/generator/nested_generators.rs:14:15: 14:54
        switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/generator/nested_generators.rs:14:9: 14:54
    }

    bb4: {
        _11 = begin_panic::<&str>(const "explicit panic") -> bb6; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _9 = ((_4 as Yielded).0: i32);   // scope 1 at ui/generator/nested_generators.rs:15:37: 15:38
        _10 = _9;                        // scope 2 at ui/generator/nested_generators.rs:16:23: 16:24
        _0 = GeneratorState::<i32, ()>::Yielded(move _10); // scope 2 at ui/generator/nested_generators.rs:16:17: 16:24
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]); // scope 2 at ui/generator/nested_generators.rs:16:17: 16:24
        discriminant((*_15)) = 3;        // scope 2 at ui/generator/nested_generators.rs:16:17: 16:24
        return;                          // scope 2 at ui/generator/nested_generators.rs:16:17: 16:24
    }

    bb6 (cleanup): {
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]); // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
        discriminant((*_17)) = 2;        // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
        resume;                          // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    }

    bb7: {
        _12 = const ();                  // scope 0 at ui/generator/nested_generators.rs:9:25: 20:6
        _0 = GeneratorState::<i32, ()>::Complete(move _12); // scope 0 at ui/generator/nested_generators.rs:20:6: 20:6
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:9:22: 9:24]); // scope 0 at ui/generator/nested_generators.rs:20:6: 20:6
        discriminant((*_16)) = 1;        // scope 0 at ui/generator/nested_generators.rs:20:6: 20:6
        return;                          // scope 0 at ui/generator/nested_generators.rs:20:6: 20:6
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8; // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9; // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    }

    bb10: {
        unreachable;                     // scope 0 at ui/generator/nested_generators.rs:9:22: 20:6
    }
}

fn main::{closure#0}::{closure#0}(_1: Pin<&mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]>, _2: ()) -> GeneratorState<i32, ()> {
    let mut _0: std::ops::GeneratorState<i32, ()>; // return place in scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
    let mut _3: ();                      // in scope 0 at ui/generator/nested_generators.rs:10:36: 10:36
    let mut _4: u32;                     // in scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
    let mut _5: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]; // in scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
    let mut _6: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]; // in scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
    let mut _7: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]; // in scope 0 at ui/generator/nested_generators.rs:10:33: 12:10

    bb0: {
        _5 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]); // scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
        _4 = discriminant((*_5));        // scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
        switchInt(move _4) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4]; // scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
    }

    bb1: {
        _0 = GeneratorState::<i32, ()>::Yielded(const 2_i32); // scope 0 at ui/generator/nested_generators.rs:11:13: 11:20
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]); // scope 0 at ui/generator/nested_generators.rs:11:13: 11:20
        discriminant((*_6)) = 3;         // scope 0 at ui/generator/nested_generators.rs:11:13: 11:20
        return;                          // scope 0 at ui/generator/nested_generators.rs:11:13: 11:20
    }

    bb2: {
        _3 = const ();                   // scope 0 at ui/generator/nested_generators.rs:10:36: 12:10
        _0 = GeneratorState::<i32, ()>::Complete(move _3); // scope 0 at ui/generator/nested_generators.rs:12:10: 12:10
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/nested_generators.rs:10:33: 10:35]); // scope 0 at ui/generator/nested_generators.rs:12:10: 12:10
        discriminant((*_7)) = 1;         // scope 0 at ui/generator/nested_generators.rs:12:10: 12:10
        return;                          // scope 0 at ui/generator/nested_generators.rs:12:10: 12:10
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3; // scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
    }

    bb4: {
        unreachable;                     // scope 0 at ui/generator/nested_generators.rs:10:33: 12:10
    }
}
