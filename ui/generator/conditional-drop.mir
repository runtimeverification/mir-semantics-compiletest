// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/generator/conditional-drop.rs:12:11: 12:22

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/generator/conditional-drop.rs:12:25: 12:44
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/generator/conditional-drop.rs:12:25: 12:44
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:12:25: 12:41
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/conditional-drop.rs:12:1: 12:45
    }
}

fn <impl at ui/generator/conditional-drop.rs:16:1: 16:16>::drop(_1: &mut B) -> () {
    debug self => _1;                    // in scope 0 at ui/generator/conditional-drop.rs:17:13: 17:22
    let mut _0: ();                      // return place in scope 0 at ui/generator/conditional-drop.rs:17:24: 17:24
    let _2: usize;                       // in scope 0 at ui/generator/conditional-drop.rs:18:9: 18:41
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:18:9: 18:41
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:18:9: 18:10
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/generator/conditional-drop.rs:18:24: 18:40

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/generator/conditional-drop.rs:18:9: 18:10
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:18:9: 18:10
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/generator/conditional-drop.rs:18:9: 18:41
        _5 = const SeqCst;               // scope 0 at ui/generator/conditional-drop.rs:18:24: 18:40
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:18:24: 18:40
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::fetch_add(move _3, const 1_usize, move _5) -> bb1; // scope 0 at ui/generator/conditional-drop.rs:18:9: 18:41
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:18:11: 18:20
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/conditional-drop.rs:19:6: 19:6
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn test() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/generator/conditional-drop.rs:23:14: 23:18

    bb0: {
        _0 = const true;                 // scope 0 at ui/generator/conditional-drop.rs:23:21: 23:25
        return;                          // scope 0 at ui/generator/conditional-drop.rs:23:27: 23:27
    }
}

fn test2() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/generator/conditional-drop.rs:24:15: 24:19

    bb0: {
        _0 = const false;                // scope 0 at ui/generator/conditional-drop.rs:24:22: 24:27
        return;                          // scope 0 at ui/generator/conditional-drop.rs:24:29: 24:29
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/conditional-drop.rs:26:11: 26:11
    let _1: ();                          // in scope 0 at ui/generator/conditional-drop.rs:27:5: 27:9
    let _2: ();                          // in scope 0 at ui/generator/conditional-drop.rs:28:5: 28:9

    bb0: {
        _1 = t1() -> bb1;                // scope 0 at ui/generator/conditional-drop.rs:27:5: 27:9
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:27:5: 27:7
                                         // + literal: Const { ty: fn() {t1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = t2() -> bb2;                // scope 0 at ui/generator/conditional-drop.rs:28:5: 28:9
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:28:5: 28:7
                                         // + literal: Const { ty: fn() {t2}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generator/conditional-drop.rs:29:2: 29:2
    }
}

fn t1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/conditional-drop.rs:31:9: 31:9
    let mut _1: [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:9: 32:14
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:40:13: 40:37
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:40:13: 40:14
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/generator/conditional-drop.rs:40:20: 40:36
    let _6: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/conditional-drop.rs:41:5: 41:32
    let mut _7: std::pin::Pin<&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]>; // in scope 0 at ui/generator/conditional-drop.rs:41:5: 41:21
    let mut _8: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:41:14: 41:20
    let mut _9: ();                      // in scope 0 at ui/generator/conditional-drop.rs:41:29: 41:31
    let mut _10: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _12: usize;                      // in scope 0 at ui/generator/conditional-drop.rs:42:16: 42:40
    let mut _13: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:42:16: 42:40
    let _14: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:42:16: 42:17
    let mut _15: std::sync::atomic::Ordering; // in scope 0 at ui/generator/conditional-drop.rs:42:23: 42:39
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _17: usize;                      // in scope 0 at ui/generator/conditional-drop.rs:42:42: 42:47
    let mut _18: usize;                  // in scope 0 at ui/generator/conditional-drop.rs:42:42: 42:43
    let mut _19: (usize, bool);          // in scope 0 at ui/generator/conditional-drop.rs:42:42: 42:47
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _24: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _25: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _27: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _28: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _29: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _30: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _31: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _32: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _34: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/conditional-drop.rs:43:5: 43:32
    let mut _35: std::pin::Pin<&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]>; // in scope 0 at ui/generator/conditional-drop.rs:43:5: 43:21
    let mut _36: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:43:14: 43:20
    let mut _37: ();                     // in scope 0 at ui/generator/conditional-drop.rs:43:29: 43:31
    let mut _38: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _39: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _40: usize;                      // in scope 0 at ui/generator/conditional-drop.rs:44:16: 44:40
    let mut _41: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:44:16: 44:40
    let _42: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:44:16: 44:17
    let mut _43: std::sync::atomic::Ordering; // in scope 0 at ui/generator/conditional-drop.rs:44:23: 44:39
    let mut _44: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _45: usize;                      // in scope 0 at ui/generator/conditional-drop.rs:44:42: 44:47
    let mut _46: usize;                  // in scope 0 at ui/generator/conditional-drop.rs:44:42: 44:43
    let mut _47: (usize, bool);          // in scope 0 at ui/generator/conditional-drop.rs:44:42: 44:47
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/generator/conditional-drop.rs:32:9: 32:14
        let _2: usize;                   // in scope 1 at ui/generator/conditional-drop.rs:40:9: 40:10
        scope 2 {
            debug n => _2;               // in scope 2 at ui/generator/conditional-drop.rs:40:9: 40:10
            let _20: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _21: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _48: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _49: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _20;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _21;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _26: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _26;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _48;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _49;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _54: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _54;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/conditional-drop.rs:32:17: 32:19 (#0)]; // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
                                         // generator
                                         // + def_id: DefId(0:17 ~ conditional_drop[33c3]::t1::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {B, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _4 = const {alloc1: &AtomicUsize}; // scope 1 at ui/generator/conditional-drop.rs:40:13: 40:14
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:40:13: 40:14
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 1 at ui/generator/conditional-drop.rs:40:13: 40:37
        _5 = const SeqCst;               // scope 1 at ui/generator/conditional-drop.rs:40:20: 40:36
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:40:20: 40:36
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::load(move _3, move _5) -> [return: bb1, unwind: bb15]; // scope 1 at ui/generator/conditional-drop.rs:40:13: 40:37
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:40:15: 40:19
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _1;                    // scope 2 at ui/generator/conditional-drop.rs:41:14: 41:20
        _7 = Pin::<&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]>::new(move _8) -> [return: bb2, unwind: bb15]; // scope 2 at ui/generator/conditional-drop.rs:41:5: 41:21
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:41:5: 41:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]) -> Pin<&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]> {Pin::<&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = <[generator@ui/generator/conditional-drop.rs:32:17: 32:19] as Generator>::resume(move _7, move _9) -> [return: bb3, unwind: bb15]; // scope 2 at ui/generator/conditional-drop.rs:41:5: 41:32
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:41:22: 41:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]>, ()) -> GeneratorState<<[generator@ui/generator/conditional-drop.rs:32:17: 32:19] as Generator>::Yield, <[generator@ui/generator/conditional-drop.rs:32:17: 32:19] as Generator>::Return> {<[generator@ui/generator/conditional-drop.rs:32:17: 32:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = const {alloc1: &AtomicUsize}; // scope 2 at ui/generator/conditional-drop.rs:42:16: 42:17
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:42:16: 42:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _13 = _14;                       // scope 2 at ui/generator/conditional-drop.rs:42:16: 42:40
        _15 = const SeqCst;              // scope 2 at ui/generator/conditional-drop.rs:42:23: 42:39
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:42:23: 42:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _12 = AtomicUsize::load(move _13, move _15) -> [return: bb4, unwind: bb15]; // scope 2 at ui/generator/conditional-drop.rs:42:16: 42:40
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:42:18: 42:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_12;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _18 = _2;                        // scope 2 at ui/generator/conditional-drop.rs:42:42: 42:43
        _19 = CheckedAdd(_18, const 1_usize); // scope 2 at ui/generator/conditional-drop.rs:42:42: 42:47
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _18, const 1_usize) -> [success: bb5, unwind: bb15]; // scope 2 at ui/generator/conditional-drop.rs:42:42: 42:47
    }

    bb5: {
        _17 = move (_19.0: usize);       // scope 2 at ui/generator/conditional-drop.rs:42:42: 42:47
        _16 = &_17;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _16);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _20 = (_10.0: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _21 = (_10.1: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _24 = (*_20);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _25 = (*_21);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _23 = Eq(move _24, move _25);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _22 = Not(move _23);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _22) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _26 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _27 = core::panicking::assert_failed::<usize, usize>(move _28, move _29, move _31, move _33) -> bb15; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb7: {
        _36 = &mut _1;                   // scope 2 at ui/generator/conditional-drop.rs:43:14: 43:20
        _35 = Pin::<&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]>::new(move _36) -> [return: bb8, unwind: bb15]; // scope 2 at ui/generator/conditional-drop.rs:43:5: 43:21
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:43:5: 43:13
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]) -> Pin<&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]> {Pin::<&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]>::new}, val: Value(<ZST>) }
    }

    bb8: {
        _34 = <[generator@ui/generator/conditional-drop.rs:32:17: 32:19] as Generator>::resume(move _35, move _37) -> [return: bb9, unwind: bb15]; // scope 2 at ui/generator/conditional-drop.rs:43:5: 43:32
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:43:22: 43:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]>, ()) -> GeneratorState<<[generator@ui/generator/conditional-drop.rs:32:17: 32:19] as Generator>::Yield, <[generator@ui/generator/conditional-drop.rs:32:17: 32:19] as Generator>::Return> {<[generator@ui/generator/conditional-drop.rs:32:17: 32:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb9: {
        _42 = const {alloc1: &AtomicUsize}; // scope 2 at ui/generator/conditional-drop.rs:44:16: 44:17
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:44:16: 44:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _41 = _42;                       // scope 2 at ui/generator/conditional-drop.rs:44:16: 44:40
        _43 = const SeqCst;              // scope 2 at ui/generator/conditional-drop.rs:44:23: 44:39
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:44:23: 44:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _40 = AtomicUsize::load(move _41, move _43) -> [return: bb10, unwind: bb15]; // scope 2 at ui/generator/conditional-drop.rs:44:16: 44:40
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:44:18: 44:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb10: {
        _39 = &_40;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _46 = _2;                        // scope 2 at ui/generator/conditional-drop.rs:44:42: 44:43
        _47 = CheckedAdd(_46, const 1_usize); // scope 2 at ui/generator/conditional-drop.rs:44:42: 44:47
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _46, const 1_usize) -> [success: bb11, unwind: bb15]; // scope 2 at ui/generator/conditional-drop.rs:44:42: 44:47
    }

    bb11: {
        _45 = move (_47.0: usize);       // scope 2 at ui/generator/conditional-drop.rs:44:42: 44:47
        _44 = &_45;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _38 = (move _39, move _44);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_38.0: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_38.1: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = (*_48);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = (*_49);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = Eq(move _52, move _53);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _50 = Not(move _51);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb13, otherwise: bb12]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _54 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<usize, usize>(move _56, move _57, move _59, move _61) -> bb15; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_1) -> bb14;                // scope 0 at ui/generator/conditional-drop.rs:45:1: 45:2
    }

    bb14: {
        return;                          // scope 0 at ui/generator/conditional-drop.rs:45:2: 45:2
    }

    bb15 (cleanup): {
        drop(_1) -> bb16;                // scope 0 at ui/generator/conditional-drop.rs:45:1: 45:2
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/generator/conditional-drop.rs:31:1: 45:2
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn t1::{closure#0}(_1: Pin<&mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _3: bool;                    // in scope 0 at ui/generator/conditional-drop.rs:34:12: 34:18
    let _4: ();                          // in scope 0 at ui/generator/conditional-drop.rs:35:13: 35:20
    let mut _5: B;                       // in scope 0 at ui/generator/conditional-drop.rs:35:18: 35:19
    let mut _6: ();                      // in scope 0 at ui/generator/conditional-drop.rs:37:9: 37:14
    let mut _7: ();                      // in scope 0 at ui/generator/conditional-drop.rs:32:20: 32:20
    let mut _8: u32;                     // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _9: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _10: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _11: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _12: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _13: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _14: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _15: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _16: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _17: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _18: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _19: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _20: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _21: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _22: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    let mut _23: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]; // in scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    scope 1 {
        debug b => (((*(_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19])) as variant#3).0: B); // in scope 1 at ui/generator/conditional-drop.rs:33:13: 33:14
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
        _8 = discriminant((*_9));        // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
        switchInt(move _8) -> [0: bb1, 1: bb12, 2: bb11, 3: bb10, otherwise: bb13]; // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:33:13: 33:14
        (((*_10) as variant#3).1: bool) = const false; // scope 0 at ui/generator/conditional-drop.rs:33:13: 33:14
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:33:17: 33:18
        (((*_11) as variant#3).1: bool) = const true; // scope 0 at ui/generator/conditional-drop.rs:33:17: 33:18
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:33:17: 33:18
        (((*_12) as variant#3).0: B) = B; // scope 0 at ui/generator/conditional-drop.rs:33:17: 33:18
        _3 = test() -> [return: bb2, unwind: bb6]; // scope 1 at ui/generator/conditional-drop.rs:34:12: 34:18
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:34:12: 34:16
                                         // + literal: Const { ty: fn() -> bool {test}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/generator/conditional-drop.rs:34:12: 34:18
    }

    bb3: {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 1 at ui/generator/conditional-drop.rs:35:18: 35:19
        (((*_13) as variant#3).1: bool) = const false; // scope 1 at ui/generator/conditional-drop.rs:35:18: 35:19
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 1 at ui/generator/conditional-drop.rs:35:18: 35:19
        _5 = move (((*_14) as variant#3).0: B); // scope 1 at ui/generator/conditional-drop.rs:35:18: 35:19
        _4 = std::mem::drop::<B>(move _5) -> [return: bb14, unwind: bb6]; // scope 1 at ui/generator/conditional-drop.rs:35:13: 35:20
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:35:13: 35:17
                                         // + literal: Const { ty: fn(B) {std::mem::drop::<B>}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = ();                         // scope 1 at ui/generator/conditional-drop.rs:37:9: 37:14
        _0 = GeneratorState::<(), ()>::Yielded(move _6); // scope 1 at ui/generator/conditional-drop.rs:37:9: 37:14
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 1 at ui/generator/conditional-drop.rs:37:9: 37:14
        discriminant((*_15)) = 3;        // scope 1 at ui/generator/conditional-drop.rs:37:9: 37:14
        return;                          // scope 1 at ui/generator/conditional-drop.rs:37:9: 37:14
    }

    bb5: {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
        (((*_16) as variant#3).1: bool) = const false; // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
        _0 = GeneratorState::<(), ()>::Complete(move _7); // scope 0 at ui/generator/conditional-drop.rs:38:6: 38:6
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:38:6: 38:6
        discriminant((*_17)) = 1;        // scope 0 at ui/generator/conditional-drop.rs:38:6: 38:6
        return;                          // scope 0 at ui/generator/conditional-drop.rs:38:6: 38:6
    }

    bb6 (cleanup): {
        _22 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
        switchInt((((*_22) as variant#3).1: bool)) -> [0: bb7, otherwise: bb9]; // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
    }

    bb7 (cleanup): {
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
        (((*_18) as variant#3).1: bool) = const false; // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
        _23 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
        discriminant((*_23)) = 2;        // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
        resume;                          // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    }

    bb8: {
        _19 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
        drop((((*_19) as variant#3).0: B)) -> [return: bb5, unwind: bb7]; // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
    }

    bb9 (cleanup): {
        _21 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
        drop((((*_21) as variant#3).0: B)) -> bb7; // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
    }

    bb10: {
        _7 = const ();                   // scope 0 at ui/generator/conditional-drop.rs:32:20: 38:6
        _20 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:32:17: 32:19]); // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
        switchInt((((*_20) as variant#3).1: bool)) -> [0: bb5, otherwise: bb8]; // scope 0 at ui/generator/conditional-drop.rs:38:5: 38:6
    }

    bb11: {
        assert(const false, "generator resumed after panicking") -> bb11; // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    }

    bb12: {
        assert(const false, "generator resumed after completion") -> bb12; // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    }

    bb13: {
        unreachable;                     // scope 0 at ui/generator/conditional-drop.rs:32:17: 38:6
    }

    bb14: {
        goto -> bb4;                     // scope 1 at ui/generator/conditional-drop.rs:35:13: 35:20
    }
}

fn t2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/conditional-drop.rs:47:9: 47:9
    let mut _1: [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:9: 48:14
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:56:13: 56:37
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:56:13: 56:14
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/generator/conditional-drop.rs:56:20: 56:36
    let _6: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/conditional-drop.rs:57:5: 57:32
    let mut _7: std::pin::Pin<&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]>; // in scope 0 at ui/generator/conditional-drop.rs:57:5: 57:21
    let mut _8: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:57:14: 57:20
    let mut _9: ();                      // in scope 0 at ui/generator/conditional-drop.rs:57:29: 57:31
    let mut _10: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _11: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _12: usize;                      // in scope 0 at ui/generator/conditional-drop.rs:58:16: 58:40
    let mut _13: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:58:16: 58:40
    let _14: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:58:16: 58:17
    let mut _15: std::sync::atomic::Ordering; // in scope 0 at ui/generator/conditional-drop.rs:58:23: 58:39
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _21: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _22: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _24: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _25: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _26: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _27: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _29: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _31: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/conditional-drop.rs:59:5: 59:32
    let mut _32: std::pin::Pin<&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]>; // in scope 0 at ui/generator/conditional-drop.rs:59:5: 59:21
    let mut _33: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:59:14: 59:20
    let mut _34: ();                     // in scope 0 at ui/generator/conditional-drop.rs:59:29: 59:31
    let mut _35: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _37: usize;                      // in scope 0 at ui/generator/conditional-drop.rs:60:16: 60:40
    let mut _38: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:60:16: 60:40
    let _39: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/conditional-drop.rs:60:16: 60:17
    let mut _40: std::sync::atomic::Ordering; // in scope 0 at ui/generator/conditional-drop.rs:60:23: 60:39
    let mut _41: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _42: usize;                      // in scope 0 at ui/generator/conditional-drop.rs:60:42: 60:47
    let mut _43: usize;                  // in scope 0 at ui/generator/conditional-drop.rs:60:42: 60:43
    let mut _44: (usize, bool);          // in scope 0 at ui/generator/conditional-drop.rs:60:42: 60:47
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/generator/conditional-drop.rs:48:9: 48:14
        let _2: usize;                   // in scope 1 at ui/generator/conditional-drop.rs:56:9: 56:10
        scope 2 {
            debug n => _2;               // in scope 2 at ui/generator/conditional-drop.rs:56:9: 56:10
            let _17: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _18: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _45: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _46: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _17;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _18;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _23: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _23;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _45;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _46;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _51: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _51;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/conditional-drop.rs:48:17: 48:19 (#0)]; // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
                                         // generator
                                         // + def_id: DefId(0:19 ~ conditional_drop[33c3]::t2::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {B, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _4 = const {alloc1: &AtomicUsize}; // scope 1 at ui/generator/conditional-drop.rs:56:13: 56:14
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:56:13: 56:14
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 1 at ui/generator/conditional-drop.rs:56:13: 56:37
        _5 = const SeqCst;               // scope 1 at ui/generator/conditional-drop.rs:56:20: 56:36
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:56:20: 56:36
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::load(move _3, move _5) -> [return: bb1, unwind: bb14]; // scope 1 at ui/generator/conditional-drop.rs:56:13: 56:37
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:56:15: 56:19
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut _1;                    // scope 2 at ui/generator/conditional-drop.rs:57:14: 57:20
        _7 = Pin::<&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]>::new(move _8) -> [return: bb2, unwind: bb14]; // scope 2 at ui/generator/conditional-drop.rs:57:5: 57:21
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:57:5: 57:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]) -> Pin<&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]> {Pin::<&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = <[generator@ui/generator/conditional-drop.rs:48:17: 48:19] as Generator>::resume(move _7, move _9) -> [return: bb3, unwind: bb14]; // scope 2 at ui/generator/conditional-drop.rs:57:5: 57:32
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:57:22: 57:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]>, ()) -> GeneratorState<<[generator@ui/generator/conditional-drop.rs:48:17: 48:19] as Generator>::Yield, <[generator@ui/generator/conditional-drop.rs:48:17: 48:19] as Generator>::Return> {<[generator@ui/generator/conditional-drop.rs:48:17: 48:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = const {alloc1: &AtomicUsize}; // scope 2 at ui/generator/conditional-drop.rs:58:16: 58:17
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:58:16: 58:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _13 = _14;                       // scope 2 at ui/generator/conditional-drop.rs:58:16: 58:40
        _15 = const SeqCst;              // scope 2 at ui/generator/conditional-drop.rs:58:23: 58:39
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:58:23: 58:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _12 = AtomicUsize::load(move _13, move _15) -> [return: bb4, unwind: bb14]; // scope 2 at ui/generator/conditional-drop.rs:58:16: 58:40
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:58:18: 58:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_12;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _16 = &_2;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _10 = (move _11, move _16);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _17 = (_10.0: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _18 = (_10.1: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _21 = (*_17);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _22 = (*_18);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _20 = Eq(move _21, move _22);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _19 = Not(move _20);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _19) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _23 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _24 = core::panicking::assert_failed::<usize, usize>(move _25, move _26, move _28, move _30) -> bb14; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb6: {
        _33 = &mut _1;                   // scope 2 at ui/generator/conditional-drop.rs:59:14: 59:20
        _32 = Pin::<&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]>::new(move _33) -> [return: bb7, unwind: bb14]; // scope 2 at ui/generator/conditional-drop.rs:59:5: 59:21
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:59:5: 59:13
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]) -> Pin<&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]> {Pin::<&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _31 = <[generator@ui/generator/conditional-drop.rs:48:17: 48:19] as Generator>::resume(move _32, move _34) -> [return: bb8, unwind: bb14]; // scope 2 at ui/generator/conditional-drop.rs:59:5: 59:32
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:59:22: 59:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]>, ()) -> GeneratorState<<[generator@ui/generator/conditional-drop.rs:48:17: 48:19] as Generator>::Yield, <[generator@ui/generator/conditional-drop.rs:48:17: 48:19] as Generator>::Return> {<[generator@ui/generator/conditional-drop.rs:48:17: 48:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb8: {
        _39 = const {alloc1: &AtomicUsize}; // scope 2 at ui/generator/conditional-drop.rs:60:16: 60:17
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:60:16: 60:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _38 = _39;                       // scope 2 at ui/generator/conditional-drop.rs:60:16: 60:40
        _40 = const SeqCst;              // scope 2 at ui/generator/conditional-drop.rs:60:23: 60:39
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:60:23: 60:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _37 = AtomicUsize::load(move _38, move _40) -> [return: bb9, unwind: bb14]; // scope 2 at ui/generator/conditional-drop.rs:60:16: 60:40
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:60:18: 60:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb9: {
        _36 = &_37;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = _2;                        // scope 2 at ui/generator/conditional-drop.rs:60:42: 60:43
        _44 = CheckedAdd(_43, const 1_usize); // scope 2 at ui/generator/conditional-drop.rs:60:42: 60:47
        assert(!move (_44.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, const 1_usize) -> [success: bb10, unwind: bb14]; // scope 2 at ui/generator/conditional-drop.rs:60:42: 60:47
    }

    bb10: {
        _42 = move (_44.0: usize);       // scope 2 at ui/generator/conditional-drop.rs:60:42: 60:47
        _41 = &_42;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _35 = (move _36, move _41);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_35.0: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_35.1: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = (*_45);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = (*_46);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = Eq(move _49, move _50);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _47 = Not(move _48);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb12, otherwise: bb11]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _51 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<usize, usize>(move _53, move _54, move _56, move _58) -> bb14; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_1) -> bb13;                // scope 0 at ui/generator/conditional-drop.rs:61:1: 61:2
    }

    bb13: {
        return;                          // scope 0 at ui/generator/conditional-drop.rs:61:2: 61:2
    }

    bb14 (cleanup): {
        drop(_1) -> bb15;                // scope 0 at ui/generator/conditional-drop.rs:61:1: 61:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/generator/conditional-drop.rs:47:1: 61:2
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn t2::{closure#0}(_1: Pin<&mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _3: bool;                    // in scope 0 at ui/generator/conditional-drop.rs:50:12: 50:19
    let _4: ();                          // in scope 0 at ui/generator/conditional-drop.rs:51:13: 51:20
    let mut _5: B;                       // in scope 0 at ui/generator/conditional-drop.rs:51:18: 51:19
    let mut _6: ();                      // in scope 0 at ui/generator/conditional-drop.rs:53:9: 53:14
    let mut _7: ();                      // in scope 0 at ui/generator/conditional-drop.rs:48:20: 48:20
    let mut _8: u32;                     // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _9: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _10: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _11: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _12: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _13: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _14: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _15: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _16: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _17: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _18: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _19: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _20: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _21: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _22: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    let mut _23: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]; // in scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    scope 1 {
        debug b => (((*(_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19])) as variant#3).0: B); // in scope 1 at ui/generator/conditional-drop.rs:49:13: 49:14
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
        _8 = discriminant((*_9));        // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
        switchInt(move _8) -> [0: bb1, 1: bb12, 2: bb11, 3: bb10, otherwise: bb13]; // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:49:13: 49:14
        (((*_10) as variant#3).1: bool) = const false; // scope 0 at ui/generator/conditional-drop.rs:49:13: 49:14
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:49:17: 49:18
        (((*_11) as variant#3).1: bool) = const true; // scope 0 at ui/generator/conditional-drop.rs:49:17: 49:18
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:49:17: 49:18
        (((*_12) as variant#3).0: B) = B; // scope 0 at ui/generator/conditional-drop.rs:49:17: 49:18
        _3 = test2() -> [return: bb2, unwind: bb6]; // scope 1 at ui/generator/conditional-drop.rs:50:12: 50:19
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:50:12: 50:17
                                         // + literal: Const { ty: fn() -> bool {test2}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/generator/conditional-drop.rs:50:12: 50:19
    }

    bb3: {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 1 at ui/generator/conditional-drop.rs:51:18: 51:19
        (((*_13) as variant#3).1: bool) = const false; // scope 1 at ui/generator/conditional-drop.rs:51:18: 51:19
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 1 at ui/generator/conditional-drop.rs:51:18: 51:19
        _5 = move (((*_14) as variant#3).0: B); // scope 1 at ui/generator/conditional-drop.rs:51:18: 51:19
        _4 = std::mem::drop::<B>(move _5) -> [return: bb14, unwind: bb6]; // scope 1 at ui/generator/conditional-drop.rs:51:13: 51:20
                                         // mir::Constant
                                         // + span: ui/generator/conditional-drop.rs:51:13: 51:17
                                         // + literal: Const { ty: fn(B) {std::mem::drop::<B>}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = ();                         // scope 1 at ui/generator/conditional-drop.rs:53:9: 53:14
        _0 = GeneratorState::<(), ()>::Yielded(move _6); // scope 1 at ui/generator/conditional-drop.rs:53:9: 53:14
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 1 at ui/generator/conditional-drop.rs:53:9: 53:14
        discriminant((*_15)) = 3;        // scope 1 at ui/generator/conditional-drop.rs:53:9: 53:14
        return;                          // scope 1 at ui/generator/conditional-drop.rs:53:9: 53:14
    }

    bb5: {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
        (((*_16) as variant#3).1: bool) = const false; // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
        _0 = GeneratorState::<(), ()>::Complete(move _7); // scope 0 at ui/generator/conditional-drop.rs:54:6: 54:6
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:54:6: 54:6
        discriminant((*_17)) = 1;        // scope 0 at ui/generator/conditional-drop.rs:54:6: 54:6
        return;                          // scope 0 at ui/generator/conditional-drop.rs:54:6: 54:6
    }

    bb6 (cleanup): {
        _22 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
        switchInt((((*_22) as variant#3).1: bool)) -> [0: bb7, otherwise: bb9]; // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
    }

    bb7 (cleanup): {
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
        (((*_18) as variant#3).1: bool) = const false; // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
        _23 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
        discriminant((*_23)) = 2;        // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
        resume;                          // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    }

    bb8: {
        _19 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
        drop((((*_19) as variant#3).0: B)) -> [return: bb5, unwind: bb7]; // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
    }

    bb9 (cleanup): {
        _21 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
        drop((((*_21) as variant#3).0: B)) -> bb7; // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
    }

    bb10: {
        _7 = const ();                   // scope 0 at ui/generator/conditional-drop.rs:48:20: 54:6
        _20 = deref_copy (_1.0: &mut [generator@ui/generator/conditional-drop.rs:48:17: 48:19]); // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
        switchInt((((*_20) as variant#3).1: bool)) -> [0: bb5, otherwise: bb8]; // scope 0 at ui/generator/conditional-drop.rs:54:5: 54:6
    }

    bb11: {
        assert(const false, "generator resumed after panicking") -> bb11; // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    }

    bb12: {
        assert(const false, "generator resumed after completion") -> bb12; // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    }

    bb13: {
        unreachable;                     // scope 0 at ui/generator/conditional-drop.rs:48:17: 54:6
    }

    bb14: {
        goto -> bb4;                     // scope 1 at ui/generator/conditional-drop.rs:51:13: 51:20
    }
}
