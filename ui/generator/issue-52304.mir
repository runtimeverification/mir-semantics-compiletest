// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn example() -> impl Generator {
    let mut _0: impl std::ops::Generator;

    bb0: {
        _0 = [generator@ui/generator/issue-52304.rs:8:5: 8:7 (#0)];
        return;
    }
}

fn example::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]>, _2: ()) -> GeneratorState<&i32, ()> {
    let mut _0: std::ops::GeneratorState<&i32, ()>;
    let mut _3: &i32;
    let mut _4: u32;
    let mut _5: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7];
    let mut _6: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7];
    let mut _7: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7];

    bb0: {
        _5 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]);
        _4 = discriminant((*_5));
        switchInt(move _4) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4];
    }

    bb1: {
        _3 = const _;
        _0 = GeneratorState::<&i32, ()>::Yielded(_3);
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]);
        discriminant((*_6)) = 3;
        return;
    }

    bb2: {
        _0 = GeneratorState::<&i32, ()>::Complete(move _2);
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]);
        discriminant((*_7)) = 1;
        return;
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> [success: bb3, unwind continue];
    }

    bb4: {
        unreachable;
    }
}

promoted[0] in example::{closure#0}: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
