// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn example() -> impl Generator {
    let mut _0: impl std::ops::Generator; // return place in scope 0 at ui/generator/issue-52304.rs:7:21: 7:35

    bb0: {
        _0 = [generator@ui/generator/issue-52304.rs:8:5: 8:7 (#0)]; // scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
                                         // generator
                                         // + def_id: DefId(0:5 ~ issue_52304[0404]::example::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     &i32,
                                         //     (),
                                         //     for<'a> {i32, &'a i32, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        return;                          // scope 0 at ui/generator/issue-52304.rs:9:2: 9:2
    }
}

fn example::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]>, _2: ()) -> GeneratorState<&i32, ()> {
    let mut _0: std::ops::GeneratorState<&i32, ()>; // return place in scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
    let mut _3: &i32;                    // in scope 0 at ui/generator/issue-52304.rs:8:14: 8:16
    let mut _4: &i32;                    // in scope 0 at ui/generator/issue-52304.rs:8:14: 8:16
    let mut _5: ();                      // in scope 0 at ui/generator/issue-52304.rs:8:8: 8:8
    let mut _6: u32;                     // in scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
    let mut _7: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]; // in scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
    let mut _8: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]; // in scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
    let mut _9: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]; // in scope 0 at ui/generator/issue-52304.rs:8:5: 8:16

    bb0: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]); // scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
        _6 = discriminant((*_7));        // scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
        switchInt(move _6) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4]; // scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
    }

    bb1: {
        _4 = const _;                    // scope 0 at ui/generator/issue-52304.rs:8:14: 8:16
                                         // mir::Constant
                                         // + span: ui/generator/issue-52304.rs:8:14: 8:16
                                         // + literal: Const { ty: &i32, val: Unevaluated(example::{closure#0}, [<resume_ty>, <yield_ty>, <return_ty>, <witness>, <upvars>], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at ui/generator/issue-52304.rs:8:14: 8:16
        _0 = GeneratorState::<&i32, ()>::Yielded(move _3); // scope 0 at ui/generator/issue-52304.rs:8:8: 8:16
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]); // scope 0 at ui/generator/issue-52304.rs:8:8: 8:16
        discriminant((*_8)) = 3;         // scope 0 at ui/generator/issue-52304.rs:8:8: 8:16
        return;                          // scope 0 at ui/generator/issue-52304.rs:8:8: 8:16
    }

    bb2: {
        _5 = move _2;                    // scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
        _0 = GeneratorState::<&i32, ()>::Complete(move _5); // scope 0 at ui/generator/issue-52304.rs:8:16: 8:16
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52304.rs:8:5: 8:7]); // scope 0 at ui/generator/issue-52304.rs:8:16: 8:16
        discriminant((*_9)) = 1;         // scope 0 at ui/generator/issue-52304.rs:8:16: 8:16
        return;                          // scope 0 at ui/generator/issue-52304.rs:8:16: 8:16
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3; // scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
    }

    bb4: {
        unreachable;                     // scope 0 at ui/generator/issue-52304.rs:8:5: 8:16
    }
}

promoted[0] in example::{closure#0}: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/generator/issue-52304.rs:8:14: 8:16
    let mut _1: i32;                     // in scope 0 at ui/generator/issue-52304.rs:8:15: 8:16

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/generator/issue-52304.rs:8:15: 8:16
        _0 = &_1;                        // scope 0 at ui/generator/issue-52304.rs:8:14: 8:16
        return;                          // scope 0 at ui/generator/issue-52304.rs:8:14: 8:16
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/issue-52304.rs:11:11: 11:11

    bb0: {
        return;                          // scope 0 at ui/generator/issue-52304.rs:11:13: 11:13
    }
}
