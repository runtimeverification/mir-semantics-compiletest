// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/live-upvar-across-yield.rs:8:11: 8:11
    let _1: [closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:9:9: 9:10
    let mut _3: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let _4: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/live-upvar-across-yield.rs:13:5: 13:32
    let mut _5: std::pin::Pin<&mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]>; // in scope 0 at ui/generator/live-upvar-across-yield.rs:13:5: 13:21
    let mut _6: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:13:14: 13:20
    let mut _7: ();                      // in scope 0 at ui/generator/live-upvar-across-yield.rs:13:29: 13:31
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/generator/live-upvar-across-yield.rs:9:9: 9:10
        let mut _2: [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]; // in scope 1 at ui/generator/live-upvar-across-yield.rs:10:9: 10:14
        scope 2 {
            debug a => _2;               // in scope 2 at ui/generator/live-upvar-across-yield.rs:10:9: 10:14
        }
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
        _2 = [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19 (#0)] { b: move _3 }; // scope 1 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
                                         // generator
                                         // + def_id: DefId(0:7 ~ live_upvar_across_yield[bdd2]::main::{closure#1})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     for<'a> {&'a [closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16], [closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16], ()},
                                         //     (&[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16],),
                                         // ]
                                         // + movability: Movable
        _6 = &mut _2;                    // scope 2 at ui/generator/live-upvar-across-yield.rs:13:14: 13:20
        _5 = Pin::<&mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]>::new(move _6) -> bb1; // scope 2 at ui/generator/live-upvar-across-yield.rs:13:5: 13:21
                                         // mir::Constant
                                         // + span: ui/generator/live-upvar-across-yield.rs:13:5: 13:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]) -> Pin<&mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]> {Pin::<&mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = <[generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19] as Generator>::resume(move _5, move _7) -> bb2; // scope 2 at ui/generator/live-upvar-across-yield.rs:13:5: 13:32
                                         // mir::Constant
                                         // + span: ui/generator/live-upvar-across-yield.rs:13:22: 13:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]>, ()) -> GeneratorState<<[generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19] as Generator>::Yield, <[generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19] as Generator>::Return> {<[generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generator/live-upvar-across-yield.rs:14:2: 14:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16], _2: ()) -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/generator/live-upvar-across-yield.rs:9:17: 9:17

    bb0: {
        _0 = const 3_i32;                // scope 0 at ui/generator/live-upvar-across-yield.rs:9:17: 9:18
        return;                          // scope 0 at ui/generator/live-upvar-across-yield.rs:9:18: 9:18
    }
}

fn main::{closure#1}(_1: Pin<&mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]>, _2: ()) -> GeneratorState<(), ()> {
    debug b => (*((*(_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19])).0: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16])); // in scope 0 at ui/generator/live-upvar-across-yield.rs:9:9: 9:10
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let _3: i32;                         // in scope 0 at ui/generator/live-upvar-across-yield.rs:11:9: 11:17
    let mut _4: ((),);                   // in scope 0 at ui/generator/live-upvar-across-yield.rs:11:9: 11:17
    let mut _5: ();                      // in scope 0 at ui/generator/live-upvar-across-yield.rs:11:11: 11:16
    let mut _6: ();                      // in scope 0 at ui/generator/live-upvar-across-yield.rs:11:11: 11:16
    let mut _7: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let mut _8: ();                      // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:20: 10:20
    let mut _9: u32;                     // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let mut _10: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let mut _11: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let mut _12: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let mut _13: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let mut _14: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let mut _15: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    let mut _16: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]; // in scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]); // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
        _9 = discriminant((*_10));       // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
        switchInt(move _9) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7]; // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    }

    bb1: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]); // scope 0 at ui/generator/live-upvar-across-yield.rs:11:9: 11:10
        _7 = deref_copy ((*_11).0: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]); // scope 0 at ui/generator/live-upvar-across-yield.rs:11:9: 11:10
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]); // scope 0 at ui/generator/live-upvar-across-yield.rs:11:9: 11:10
        (((*_12) as variant#3).0: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]) = _7; // scope 0 at ui/generator/live-upvar-across-yield.rs:11:9: 11:10
        _6 = ();                         // scope 0 at ui/generator/live-upvar-across-yield.rs:11:11: 11:16
        _0 = GeneratorState::<(), ()>::Yielded(move _6); // scope 0 at ui/generator/live-upvar-across-yield.rs:11:11: 11:16
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]); // scope 0 at ui/generator/live-upvar-across-yield.rs:11:11: 11:16
        discriminant((*_13)) = 3;        // scope 0 at ui/generator/live-upvar-across-yield.rs:11:11: 11:16
        return;                          // scope 0 at ui/generator/live-upvar-across-yield.rs:11:11: 11:16
    }

    bb2: {
        _8 = const ();                   // scope 0 at ui/generator/live-upvar-across-yield.rs:10:20: 12:6
        _0 = GeneratorState::<(), ()>::Complete(move _8); // scope 0 at ui/generator/live-upvar-across-yield.rs:12:6: 12:6
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]); // scope 0 at ui/generator/live-upvar-across-yield.rs:12:6: 12:6
        discriminant((*_15)) = 1;        // scope 0 at ui/generator/live-upvar-across-yield.rs:12:6: 12:6
        return;                          // scope 0 at ui/generator/live-upvar-across-yield.rs:12:6: 12:6
    }

    bb3 (cleanup): {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]); // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
        discriminant((*_16)) = 2;        // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
        resume;                          // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    }

    bb4: {
        _5 = move _2;                    // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
        _4 = (move _5,);                 // scope 0 at ui/generator/live-upvar-across-yield.rs:11:9: 11:17
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/live-upvar-across-yield.rs:10:17: 10:19]); // scope 0 at ui/generator/live-upvar-across-yield.rs:11:9: 11:17
        _3 = <[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16] as Fn<((),)>>::call(move (((*_14) as variant#3).0: &[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16]), move _4) -> [return: bb2, unwind: bb3]; // scope 0 at ui/generator/live-upvar-across-yield.rs:11:9: 11:17
                                         // mir::Constant
                                         // + span: ui/generator/live-upvar-across-yield.rs:11:9: 11:10
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16], ((),)) -> <[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16] as FnOnce<((),)>>::Output {<[closure@ui/generator/live-upvar-across-yield.rs:9:13: 9:16] as Fn<((),)>>::call}, val: Value(<ZST>) }
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5; // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/live-upvar-across-yield.rs:10:17: 12:6
    }
}
