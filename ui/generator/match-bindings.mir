// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/match-bindings.rs:11:11: 11:11

    bb0: {
        return;                          // scope 0 at ui/generator/match-bindings.rs:23:2: 23:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
    let mut _3: bool;                    // in scope 0 at ui/generator/match-bindings.rs:14:27: 14:31
    let mut _4: Enum;                    // in scope 0 at ui/generator/match-bindings.rs:15:23: 15:45
    let mut _5: std::string::String;     // in scope 0 at ui/generator/match-bindings.rs:15:31: 15:44
    let mut _6: isize;                   // in scope 0 at ui/generator/match-bindings.rs:16:21: 16:34
    let mut _8: ();                      // in scope 0 at ui/generator/match-bindings.rs:20:13: 20:18
    let mut _9: u32;                     // in scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
    let mut _10: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]; // in scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
    let mut _11: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]; // in scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
    let mut _12: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]; // in scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
    scope 1 {
        let _7: std::string::String;     // in scope 1 at ui/generator/match-bindings.rs:16:29: 16:33
        scope 2 {
            debug _var => _7;            // in scope 2 at ui/generator/match-bindings.rs:16:29: 16:33
        }
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]); // scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
        _9 = discriminant((*_10));       // scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
        switchInt(move _9) -> [0: bb1, 2: bb8, 3: bb1, otherwise: bb9]; // scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
    }

    bb1: {
        _3 = const true;                 // scope 1 at ui/generator/match-bindings.rs:14:27: 14:31
        switchInt(_3) -> [0: bb6, otherwise: bb2]; // scope 1 at ui/generator/match-bindings.rs:14:20: 14:24
    }

    bb2: {
        _5 = String::new() -> [return: bb3, unwind: bb7]; // scope 1 at ui/generator/match-bindings.rs:15:31: 15:44
                                         // mir::Constant
                                         // + span: ui/generator/match-bindings.rs:15:31: 15:42
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = Enum::A(move _5);           // scope 1 at ui/generator/match-bindings.rs:15:23: 15:45
        _6 = discriminant(_4);           // scope 1 at ui/generator/match-bindings.rs:15:23: 15:45
        switchInt(move _6) -> [0: bb5, 1: bb6, otherwise: bb4]; // scope 1 at ui/generator/match-bindings.rs:15:17: 15:45
    }

    bb4: {
        unreachable;                     // scope 1 at ui/generator/match-bindings.rs:15:23: 15:45
    }

    bb5: {
        _7 = move ((_4 as A).0: std::string::String); // scope 1 at ui/generator/match-bindings.rs:16:29: 16:33
        drop(_7) -> [return: bb6, unwind: bb7]; // scope 1 at ui/generator/match-bindings.rs:16:39: 16:40
    }

    bb6: {
        _8 = ();                         // scope 0 at ui/generator/match-bindings.rs:20:13: 20:18
        _0 = GeneratorState::<(), ()>::Yielded(move _8); // scope 0 at ui/generator/match-bindings.rs:20:13: 20:18
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]); // scope 0 at ui/generator/match-bindings.rs:20:13: 20:18
        discriminant((*_11)) = 3;        // scope 0 at ui/generator/match-bindings.rs:20:13: 20:18
        return;                          // scope 0 at ui/generator/match-bindings.rs:20:13: 20:18
    }

    bb7 (cleanup): {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/match-bindings.rs:12:5: 12:7]); // scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
        discriminant((*_12)) = 2;        // scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
        resume;                          // scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8; // scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
    }

    bb9: {
        unreachable;                     // scope 0 at ui/generator/match-bindings.rs:12:5: 22:6
    }
}

fn Enum::A(_1: String) -> Enum {
    let mut _0: Enum;                    // return place in scope 0 at ui/generator/match-bindings.rs:7:5: 7:6

    bb0: {
        _0 = Enum::A(move _1);           // scope 0 at ui/generator/match-bindings.rs:7:5: 7:6
        return;                          // scope 0 at ui/generator/match-bindings.rs:7:5: 7:6
    }
}

// MIR FOR CTFE
fn Enum::A(_1: String) -> Enum {
    let mut _0: Enum;                    // return place in scope 0 at ui/generator/match-bindings.rs:7:5: 7:6

    bb0: {
        _0 = Enum::A(move _1);           // scope 0 at ui/generator/match-bindings.rs:7:5: 7:6
        return;                          // scope 0 at ui/generator/match-bindings.rs:7:5: 7:6
    }
}
