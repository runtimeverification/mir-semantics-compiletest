// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut A: [i32; 5] = {
    let mut _0: [i32; 5];                // return place in scope 0 at ui/generator/static-mut-reference-across-yield.rs:9:15: 9:23

    bb0: {
        _0 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:9:26: 9:41
        return;                          // scope 0 at ui/generator/static-mut-reference-across-yield.rs:9:1: 9:42
    }
}

A::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/generator/static-mut-reference-across-yield.rs:9:21: 9:22

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/generator/static-mut-reference-across-yield.rs:9:21: 9:22
        return;                          // scope 0 at ui/generator/static-mut-reference-across-yield.rs:9:21: 9:22
    }
}

fn is_send_sync(_1: T) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/static-mut-reference-across-yield.rs:11:39: 11:39

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/generator/static-mut-reference-across-yield.rs:11:40: 11:41
    }

    bb1: {
        return;                          // scope 0 at ui/generator/static-mut-reference-across-yield.rs:11:41: 11:41
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/static-mut-reference-across-yield.rs:13:11: 13:11
    let _3: ();                          // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:31:9: 31:32
    let mut _4: [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:31:22: 31:31
    let _5: ();                          // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:32:9: 32:32
    let mut _6: [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:32:22: 32:31
    scope 1 {
        let _1: [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]; // in scope 1 at ui/generator/static-mut-reference-across-yield.rs:15:13: 15:22
        scope 2 {
            debug gen_index => _1;       // in scope 2 at ui/generator/static-mut-reference-across-yield.rs:15:13: 15:22
            let _2: [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]; // in scope 2 at ui/generator/static-mut-reference-across-yield.rs:21:13: 21:22
            scope 3 {
                debug gen_match => _2;   // in scope 3 at ui/generator/static-mut-reference-across-yield.rs:21:13: 21:22
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34 (#0)]; // scope 1 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
                                         // generator
                                         // + def_id: DefId(0:8 ~ static_mut_reference_across_yield[a6fa]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     for<'a> {&'a [i32; 5], [i32; 5], ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _2 = [generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34 (#0)]; // scope 2 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
                                         // generator
                                         // + def_id: DefId(0:9 ~ static_mut_reference_across_yield[a6fa]::main::{closure#1})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     for<'a> {[i32; 5], &'a [i32; 5], ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _4 = move _1;                    // scope 3 at ui/generator/static-mut-reference-across-yield.rs:31:22: 31:31
        _3 = is_send_sync::<[static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]>(move _4) -> bb1; // scope 3 at ui/generator/static-mut-reference-across-yield.rs:31:9: 31:32
                                         // mir::Constant
                                         // + span: ui/generator/static-mut-reference-across-yield.rs:31:9: 31:21
                                         // + literal: Const { ty: fn([static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]) {is_send_sync::<[static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _2;                    // scope 3 at ui/generator/static-mut-reference-across-yield.rs:32:22: 32:31
        _5 = is_send_sync::<[static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]>(move _6) -> bb2; // scope 3 at ui/generator/static-mut-reference-across-yield.rs:32:9: 32:32
                                         // mir::Constant
                                         // + span: ui/generator/static-mut-reference-across-yield.rs:32:9: 32:21
                                         // + literal: Const { ty: fn([static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]) {is_send_sync::<[static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generator/static-mut-reference-across-yield.rs:34:2: 34:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    let _3: i32;                         // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:17: 16:18
    let _4: usize;                       // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:23: 19:14
    let mut _5: ();                      // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:17:17: 17:22
    let mut _6: usize;                   // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 19:15
    let mut _7: bool;                    // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 19:15
    let mut _8: ();                      // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:35: 15:35
    let mut _9: u32;                     // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    let mut _10: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    let mut _11: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    let mut _12: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    let mut _13: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    let mut _14: *mut [i32; 5];          // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    let mut _15: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    let mut _16: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    scope 1 {
        debug u => _3;                   // in scope 1 at ui/generator/static-mut-reference-across-yield.rs:16:17: 16:18
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
        _9 = discriminant((*_10));       // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
        switchInt(move _9) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7]; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    }

    bb1: {
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 16:22
        (((*_11) as variant#3).0: *mut [i32; 5]) = const {alloc1: *mut [i32; 5]}; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 16:22
                                         // mir::Constant
                                         // + span: ui/generator/static-mut-reference-across-yield.rs:16:21: 16:22
                                         // + literal: Const { ty: *mut [i32; 5], val: Value(Scalar(alloc1)) }
        _5 = ();                         // scope 0 at ui/generator/static-mut-reference-across-yield.rs:17:17: 17:22
        _0 = GeneratorState::<(), ()>::Yielded(move _5); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:17:17: 17:22
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:17:17: 17:22
        discriminant((*_12)) = 3;        // scope 0 at ui/generator/static-mut-reference-across-yield.rs:17:17: 17:22
        return;                          // scope 0 at ui/generator/static-mut-reference-across-yield.rs:17:17: 17:22
    }

    bb2: {
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 19:15
        _14 = deref_copy (((*_13) as variant#3).0: *mut [i32; 5]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 19:15
        _3 = (*_14)[_4];                 // scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 19:15
        _8 = const ();                   // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:35: 20:10
        _0 = GeneratorState::<(), ()>::Complete(move _8); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:20:10: 20:10
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:20:10: 20:10
        discriminant((*_15)) = 1;        // scope 0 at ui/generator/static-mut-reference-across-yield.rs:20:10: 20:10
        return;                          // scope 0 at ui/generator/static-mut-reference-across-yield.rs:20:10: 20:10
    }

    bb3 (cleanup): {
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:15:25: 15:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
        discriminant((*_16)) = 2;        // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
        resume;                          // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    }

    bb4: {
        _4 = const 1_usize;              // scope 0 at ui/generator/static-mut-reference-across-yield.rs:18:17: 18:18
        _6 = const 5_usize;              // scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 19:15
        _7 = Lt(_4, _6);                 // scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 19:15
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _4) -> [success: bb2, unwind: bb3]; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:16:21: 19:15
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/static-mut-reference-across-yield.rs:15:25: 20:10
    }
}

alloc1 (static: A, size: 20, align: 4) {
    0x00 │ 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 │ ................
    0x10 │ 05 00 00 00                                     │ ....
}

fn main::{closure#1}(_1: Pin<&mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    let _3: [i32; 5];                    // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
    let _4: &[i32; 5];                   // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
    let mut _5: bool;                    // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:18: 25:14
    let mut _6: ();                      // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:23:17: 23:22
    let mut _7: ();                      // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:35: 21:35
    let mut _8: u32;                     // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    let mut _9: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    let mut _10: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    let mut _11: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    let mut _12: *mut [i32; 5];          // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    let mut _13: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    let mut _14: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    let mut _15: *mut [i32; 5];          // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    let mut _16: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]; // in scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    scope 1 {
        debug i => _3;                   // in scope 1 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
        debug i => _4;                   // in scope 1 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
        _8 = discriminant((*_9));        // scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
        switchInt(move _8) -> [0: bb1, 1: bb6, 3: bb5, otherwise: bb7]; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:41: 21:42
        (((*_10) as variant#3).0: *mut [i32; 5]) = const {alloc1: *mut [i32; 5]}; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:41: 21:42
                                         // mir::Constant
                                         // + span: ui/generator/static-mut-reference-across-yield.rs:21:41: 21:42
                                         // + literal: Const { ty: *mut [i32; 5], val: Value(Scalar(alloc1)) }
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
        _12 = deref_copy (((*_11) as variant#3).0: *mut [i32; 5]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
        _4 = &(*_12);                    // scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
        _6 = ();                         // scope 0 at ui/generator/static-mut-reference-across-yield.rs:23:17: 23:22
        _0 = GeneratorState::<(), ()>::Yielded(move _6); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:23:17: 23:22
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:23:17: 23:22
        discriminant((*_13)) = 3;        // scope 0 at ui/generator/static-mut-reference-across-yield.rs:23:17: 23:22
        return;                          // scope 0 at ui/generator/static-mut-reference-across-yield.rs:23:17: 23:22
    }

    bb2: {
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
        _15 = deref_copy (((*_14) as variant#3).0: *mut [i32; 5]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
        _3 = (*_15);                     // scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:13: 22:14
        _7 = ();                         // scope 1 at ui/generator/static-mut-reference-across-yield.rs:27:17: 27:19
        goto -> bb4;                     // scope 0 at ui/generator/static-mut-reference-across-yield.rs:28:13: 28:14
    }

    bb3: {
        _7 = ();                         // scope 0 at ui/generator/static-mut-reference-across-yield.rs:29:18: 29:20
        goto -> bb4;                     // scope 0 at ui/generator/static-mut-reference-across-yield.rs:29:18: 29:20
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _7); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:30:10: 30:10
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/static-mut-reference-across-yield.rs:21:25: 21:34]); // scope 0 at ui/generator/static-mut-reference-across-yield.rs:30:10: 30:10
        discriminant((*_16)) = 1;        // scope 0 at ui/generator/static-mut-reference-across-yield.rs:30:10: 30:10
        return;                          // scope 0 at ui/generator/static-mut-reference-across-yield.rs:30:10: 30:10
    }

    bb5: {
        _5 = const true;                 // scope 0 at ui/generator/static-mut-reference-across-yield.rs:24:17: 24:21
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:22:18: 25:14
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/static-mut-reference-across-yield.rs:21:25: 30:10
    }
}

alloc1 (static: A, size: 20, align: 4) {
    0x00 │ 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 │ ................
    0x10 │ 05 00 00 00                                     │ ....
}
