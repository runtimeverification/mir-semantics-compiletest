// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/yield-subtype.rs:7:14: 7:14
    let _1: &str;                        // in scope 0 at ui/generator/yield-subtype.rs:8:9: 8:10
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/generator/yield-subtype.rs:8:9: 8:10
        let _2: &str;                    // in scope 1 at ui/generator/yield-subtype.rs:9:9: 9:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/generator/yield-subtype.rs:9:9: 9:10
        }
    }

    bb0: {
        _1 = const "hi";                 // scope 0 at ui/generator/yield-subtype.rs:8:27: 8:31
                                         // mir::Constant
                                         // + span: ui/generator/yield-subtype.rs:8:27: 8:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _1;                         // scope 1 at ui/generator/yield-subtype.rs:9:22: 9:23
        return;                          // scope 0 at ui/generator/yield-subtype.rs:15:2: 15:2
    }
}

fn bar::{closure#0}(_1: Pin<&mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]>, _2: ()) -> GeneratorState<&str, ()> {
    debug a => (*((*(_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7])).0: &&str)); // in scope 0 at ui/generator/yield-subtype.rs:8:9: 8:10
    debug b => (*((*(_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7])).1: &&str)); // in scope 0 at ui/generator/yield-subtype.rs:9:9: 9:10
    let mut _0: std::ops::GeneratorState<&str, ()>; // return place in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _3: &str;                    // in scope 0 at ui/generator/yield-subtype.rs:12:15: 12:16
    let mut _4: &str;                    // in scope 0 at ui/generator/yield-subtype.rs:13:15: 13:16
    let mut _5: &&str;                   // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _6: &&str;                   // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _7: &str;                    // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _8: ();                      // in scope 0 at ui/generator/yield-subtype.rs:11:8: 11:8
    let mut _9: u32;                     // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _10: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]; // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _11: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]; // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _12: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]; // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _13: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]; // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _14: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]; // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    let mut _15: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]; // in scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]); // scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
        _9 = discriminant((*_10));       // scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
        switchInt(move _9) -> [0: bb1, 1: bb4, 3: bb2, 4: bb3, otherwise: bb5]; // scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    }

    bb1: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]); // scope 0 at ui/generator/yield-subtype.rs:12:15: 12:16
        _5 = deref_copy ((*_11).0: &&str); // scope 0 at ui/generator/yield-subtype.rs:12:15: 12:16
        _3 = (*_5);                      // scope 0 at ui/generator/yield-subtype.rs:12:15: 12:16
        _0 = GeneratorState::<&str, ()>::Yielded(move _3); // scope 0 at ui/generator/yield-subtype.rs:12:9: 12:16
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]); // scope 0 at ui/generator/yield-subtype.rs:12:9: 12:16
        discriminant((*_12)) = 3;        // scope 0 at ui/generator/yield-subtype.rs:12:9: 12:16
        return;                          // scope 0 at ui/generator/yield-subtype.rs:12:9: 12:16
    }

    bb2: {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]); // scope 0 at ui/generator/yield-subtype.rs:13:15: 13:16
        _6 = deref_copy ((*_13).1: &&str); // scope 0 at ui/generator/yield-subtype.rs:13:15: 13:16
        _7 = deref_copy (*_6);           // scope 0 at ui/generator/yield-subtype.rs:13:15: 13:16
        _4 = _7;                         // scope 0 at ui/generator/yield-subtype.rs:13:15: 13:16
        _0 = GeneratorState::<&str, ()>::Yielded(move _4); // scope 0 at ui/generator/yield-subtype.rs:13:9: 13:16
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]); // scope 0 at ui/generator/yield-subtype.rs:13:9: 13:16
        discriminant((*_14)) = 4;        // scope 0 at ui/generator/yield-subtype.rs:13:9: 13:16
        return;                          // scope 0 at ui/generator/yield-subtype.rs:13:9: 13:16
    }

    bb3: {
        _8 = const ();                   // scope 0 at ui/generator/yield-subtype.rs:11:8: 14:6
        _0 = GeneratorState::<&str, ()>::Complete(move _8); // scope 0 at ui/generator/yield-subtype.rs:14:6: 14:6
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/yield-subtype.rs:11:5: 11:7]); // scope 0 at ui/generator/yield-subtype.rs:14:6: 14:6
        discriminant((*_15)) = 1;        // scope 0 at ui/generator/yield-subtype.rs:14:6: 14:6
        return;                          // scope 0 at ui/generator/yield-subtype.rs:14:6: 14:6
    }

    bb4: {
        assert(const false, "generator resumed after completion") -> bb4; // scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    }

    bb5: {
        unreachable;                     // scope 0 at ui/generator/yield-subtype.rs:11:5: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/yield-subtype.rs:17:11: 17:11

    bb0: {
        return;                          // scope 0 at ui/generator/yield-subtype.rs:17:13: 17:13
    }
}
