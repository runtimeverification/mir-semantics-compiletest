// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generator/issue-58888.rs:11:1: 11:14>::get_connection(_1: &Database) -> impl Iterator<Item = ()> {
    debug self => _1;                    // in scope 0 at ui/generator/issue-58888.rs:12:23: 12:28
    let mut _0: impl std::iter::Iterator<Item = ()>; // return place in scope 0 at ui/generator/issue-58888.rs:12:33: 12:57
    let mut _2: std::option::Option<()>; // in scope 0 at ui/generator/issue-58888.rs:13:9: 13:17

    bb0: {
        _2 = const Option::<()>::Some(()); // scope 0 at ui/generator/issue-58888.rs:13:9: 13:17
                                         // mir::Constant
                                         // + span: ui/generator/issue-58888.rs:13:9: 13:17
                                         // + literal: Const { ty: Option<()>, val: Value(Scalar(0x01)) }
        _0 = <Option<()> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/generator/issue-58888.rs:13:9: 13:29
                                         // mir::Constant
                                         // + span: ui/generator/issue-58888.rs:13:18: 13:27
                                         // + literal: Const { ty: fn(Option<()>) -> <Option<()> as IntoIterator>::IntoIter {<Option<()> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/issue-58888.rs:14:6: 14:6
    }
}

fn <impl at ui/generator/issue-58888.rs:11:1: 11:14>::check_connection(_1: &Database) -> impl Generator<Yield = (), Return = ()> + '_ {
    debug self => _1;                    // in scope 0 at ui/generator/issue-58888.rs:16:25: 16:30
    let mut _0: impl std::ops::Generator<Yield = (), Return = ()> + '_; // return place in scope 0 at ui/generator/issue-58888.rs:16:35: 16:79

    bb0: {
        _0 = [generator@ui/generator/issue-58888.rs:17:9: 17:16 (#0)] { self: _1 }; // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
                                         // generator
                                         // + def_id: DefId(0:9 ~ issue_58888[40e0]::{impl#0}::check_connection::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     for<'a> {impl std::iter::Iterator<Item = ()>, &'a mut impl std::iter::Iterator<Item = ()>, std::option::Option<()>, ()},
                                         //     (&Database,),
                                         // ]
                                         // + movability: Movable
        return;                          // scope 0 at ui/generator/issue-58888.rs:23:6: 23:6
    }
}

fn <impl at ui/generator/issue-58888.rs:11:1: 11:14>::check_connection::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]>, _2: ()) -> GeneratorState<(), ()> {
    debug self => ((*(_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16])).0: &Database); // in scope 0 at ui/generator/issue-58888.rs:16:25: 16:30
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    let _3: impl std::iter::Iterator<Item = ()>; // in scope 0 at ui/generator/issue-58888.rs:18:17: 18:21
    let mut _4: &Database;               // in scope 0 at ui/generator/issue-58888.rs:18:24: 18:45
    let mut _5: impl std::iter::Iterator<Item = ()>; // in scope 0 at ui/generator/issue-58888.rs:19:22: 19:26
    let mut _6: impl std::iter::Iterator<Item = ()>; // in scope 0 at ui/generator/issue-58888.rs:19:22: 19:26
    let mut _7: std::option::Option<()>; // in scope 0 at ui/generator/issue-58888.rs:19:22: 19:26
    let mut _8: &mut impl std::iter::Iterator<Item = ()>; // in scope 0 at ui/generator/issue-58888.rs:19:22: 19:26
    let mut _9: &mut impl std::iter::Iterator<Item = ()>; // in scope 0 at ui/generator/issue-58888.rs:19:22: 19:26
    let mut _10: isize;                  // in scope 0 at ui/generator/issue-58888.rs:19:13: 21:14
    let mut _12: ();                     // in scope 0 at ui/generator/issue-58888.rs:20:23: 20:24
    let mut _13: &Database;              // in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    let mut _14: ();                     // in scope 0 at ui/generator/issue-58888.rs:17:17: 17:17
    let mut _15: u32;                    // in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    let mut _16: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]; // in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    let mut _17: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]; // in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    let mut _18: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]; // in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    let mut _19: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]; // in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    let mut _20: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]; // in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    let mut _21: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]; // in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    let mut _22: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]; // in scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/generator/issue-58888.rs:18:17: 18:21
        scope 2 {
            debug iter => (((*(_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16])) as variant#3).0: impl std::iter::Iterator<Item = ()>); // in scope 2 at ui/generator/issue-58888.rs:19:22: 19:26
            let _11: ();                 // in scope 2 at ui/generator/issue-58888.rs:19:17: 19:18
            scope 3 {
                debug i => _11;          // in scope 3 at ui/generator/issue-58888.rs:19:17: 19:18
            }
        }
    }

    bb0: {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]); // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
        _15 = discriminant((*_16));      // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
        switchInt(move _15) -> [0: bb1, 1: bb11, 2: bb10, 3: bb4, otherwise: bb12]; // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    }

    bb1: {
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]); // scope 0 at ui/generator/issue-58888.rs:18:24: 18:45
        _13 = deref_copy ((*_17).0: &Database); // scope 0 at ui/generator/issue-58888.rs:18:24: 18:45
        _4 = _13;                        // scope 0 at ui/generator/issue-58888.rs:18:24: 18:45
        _3 = Database::get_connection(move _4) -> [return: bb2, unwind: bb9]; // scope 0 at ui/generator/issue-58888.rs:18:24: 18:45
                                         // mir::Constant
                                         // + span: ui/generator/issue-58888.rs:18:29: 18:43
                                         // + literal: Const { ty: for<'a> fn(&'a Database) -> impl Iterator<Item = ()> {Database::get_connection}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = move _3;                    // scope 1 at ui/generator/issue-58888.rs:19:22: 19:26
        _5 = <impl Iterator<Item = ()> as IntoIterator>::into_iter(move _6) -> [return: bb3, unwind: bb9]; // scope 1 at ui/generator/issue-58888.rs:19:22: 19:26
                                         // mir::Constant
                                         // + span: ui/generator/issue-58888.rs:19:22: 19:26
                                         // + literal: Const { ty: fn(impl Iterator<Item = ()>) -> <impl Iterator<Item = ()> as IntoIterator>::IntoIter {<impl Iterator<Item = ()> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]); // scope 1 at ui/generator/issue-58888.rs:19:22: 19:26
        (((*_18) as variant#3).0: impl std::iter::Iterator<Item = ()>) = move _5; // scope 1 at ui/generator/issue-58888.rs:19:22: 19:26
        goto -> bb4;                     // scope 2 at ui/generator/issue-58888.rs:19:13: 21:14
    }

    bb4: {
        _19 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]); // scope 2 at ui/generator/issue-58888.rs:19:22: 19:26
        _9 = &mut (((*_19) as variant#3).0: impl std::iter::Iterator<Item = ()>); // scope 2 at ui/generator/issue-58888.rs:19:22: 19:26
        _8 = &mut (*_9);                 // scope 2 at ui/generator/issue-58888.rs:19:22: 19:26
        _7 = <impl Iterator<Item = ()> as Iterator>::next(move _8) -> [return: bb5, unwind: bb9]; // scope 2 at ui/generator/issue-58888.rs:19:22: 19:26
                                         // mir::Constant
                                         // + span: ui/generator/issue-58888.rs:19:22: 19:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut impl Iterator<Item = ()>) -> Option<<impl Iterator<Item = ()> as Iterator>::Item> {<impl Iterator<Item = ()> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = discriminant(_7);          // scope 2 at ui/generator/issue-58888.rs:19:22: 19:26
        switchInt(move _10) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/generator/issue-58888.rs:19:22: 19:26
    }

    bb6: {
        _11 = ((_7 as Some).0: ());      // scope 2 at ui/generator/issue-58888.rs:19:17: 19:18
        _12 = _11;                       // scope 3 at ui/generator/issue-58888.rs:20:23: 20:24
        _0 = GeneratorState::<(), ()>::Yielded(move _12); // scope 3 at ui/generator/issue-58888.rs:20:17: 20:24
        _20 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]); // scope 3 at ui/generator/issue-58888.rs:20:17: 20:24
        discriminant((*_20)) = 3;        // scope 3 at ui/generator/issue-58888.rs:20:17: 20:24
        return;                          // scope 3 at ui/generator/issue-58888.rs:20:17: 20:24
    }

    bb7: {
        unreachable;                     // scope 2 at ui/generator/issue-58888.rs:19:22: 19:26
    }

    bb8: {
        _14 = const ();                  // scope 2 at ui/generator/issue-58888.rs:19:13: 21:14
        _0 = GeneratorState::<(), ()>::Complete(move _14); // scope 0 at ui/generator/issue-58888.rs:22:10: 22:10
        _21 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]); // scope 0 at ui/generator/issue-58888.rs:22:10: 22:10
        discriminant((*_21)) = 1;        // scope 0 at ui/generator/issue-58888.rs:22:10: 22:10
        return;                          // scope 0 at ui/generator/issue-58888.rs:22:10: 22:10
    }

    bb9 (cleanup): {
        _22 = deref_copy (_1.0: &mut [generator@ui/generator/issue-58888.rs:17:9: 17:16]); // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
        discriminant((*_22)) = 2;        // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
        resume;                          // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    }

    bb10: {
        assert(const false, "generator resumed after panicking") -> bb10; // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    }

    bb11: {
        assert(const false, "generator resumed after completion") -> bb11; // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    }

    bb12: {
        unreachable;                     // scope 0 at ui/generator/issue-58888.rs:17:9: 22:10
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/issue-58888.rs:26:11: 26:11
    let _1: impl std::ops::Generator<Yield = (), Return = ()> + '_; // in scope 0 at ui/generator/issue-58888.rs:27:5: 27:32
    let mut _2: &Database;               // in scope 0 at ui/generator/issue-58888.rs:27:5: 27:32
    let mut _3: &Database;               // in scope 0 at ui/generator/issue-58888.rs:27:5: 27:32

    bb0: {
        _3 = const _;                    // scope 0 at ui/generator/issue-58888.rs:27:5: 27:32
                                         // mir::Constant
                                         // + span: ui/generator/issue-58888.rs:27:5: 27:32
                                         // + literal: Const { ty: &Database, val: Unevaluated(main, [], Some(promoted[0])) }
        _2 = _3;                         // scope 0 at ui/generator/issue-58888.rs:27:5: 27:32
        _1 = Database::check_connection(move _2) -> bb1; // scope 0 at ui/generator/issue-58888.rs:27:5: 27:32
                                         // mir::Constant
                                         // + span: ui/generator/issue-58888.rs:27:14: 27:30
                                         // + literal: Const { ty: for<'a> fn(&'a Database) -> impl Generator<Yield = (), Return = ()> + 'a {Database::check_connection}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/issue-58888.rs:28:2: 28:2
    }
}

promoted[0] in main: &Database = {
    let mut _0: &Database;               // return place in scope 0 at ui/generator/issue-58888.rs:27:5: 27:32
    let mut _1: Database;                // in scope 0 at ui/generator/issue-58888.rs:27:5: 27:13

    bb0: {
        _1 = Database;                   // scope 0 at ui/generator/issue-58888.rs:27:5: 27:13
        _0 = &_1;                        // scope 0 at ui/generator/issue-58888.rs:27:5: 27:32
        return;                          // scope 0 at ui/generator/issue-58888.rs:27:5: 27:32
    }
}
