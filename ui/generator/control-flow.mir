// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn finish(_1: usize, _2: T) -> <T as Generator>::Return {
    debug amt => _1;                     // in scope 0 at ui/generator/control-flow.rs:12:14: 12:21
    debug t => _2;                       // in scope 0 at ui/generator/control-flow.rs:12:30: 12:35
    let mut _0: <T as std::ops::Generator>::Return; // return place in scope 0 at ui/generator/control-flow.rs:18:38: 18:41
    let mut _3: std::ops::GeneratorState<(), <T as std::ops::Generator>::Return>; // in scope 0 at ui/generator/control-flow.rs:16:15: 16:42
    let mut _4: std::pin::Pin<&mut T>;   // in scope 0 at ui/generator/control-flow.rs:16:15: 16:31
    let mut _5: &mut T;                  // in scope 0 at ui/generator/control-flow.rs:16:24: 16:30
    let mut _6: ();                      // in scope 0 at ui/generator/control-flow.rs:16:39: 16:41
    let mut _7: isize;                   // in scope 0 at ui/generator/control-flow.rs:17:13: 17:40
    let mut _8: usize;                   // in scope 0 at ui/generator/control-flow.rs:17:50: 17:77
    let mut _9: std::option::Option<usize>; // in scope 0 at ui/generator/control-flow.rs:17:50: 17:68
    let mut _10: usize;                  // in scope 0 at ui/generator/control-flow.rs:17:50: 17:53
    let mut _11: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _13: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug ret => _0;                 // in scope 1 at ui/generator/control-flow.rs:18:38: 18:41
        let _14: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _15: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _28: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _14;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _15;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _20: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _20;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        goto -> bb1;                     // scope 0 at ui/generator/control-flow.rs:15:5: 23:6
    }

    bb1: {
        _5 = &mut _2;                    // scope 0 at ui/generator/control-flow.rs:16:24: 16:30
        _4 = Pin::<&mut T>::new(move _5) -> [return: bb2, unwind: bb13]; // scope 0 at ui/generator/control-flow.rs:16:15: 16:31
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:16:15: 16:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut T) -> Pin<&mut T> {Pin::<&mut T>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = <T as Generator>::resume(move _4, move _6) -> [return: bb3, unwind: bb13]; // scope 0 at ui/generator/control-flow.rs:16:15: 16:42
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:16:32: 16:38
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut T>, ()) -> GeneratorState<<T as Generator>::Yield, <T as Generator>::Return> {<T as Generator>::resume}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = discriminant(_3);           // scope 0 at ui/generator/control-flow.rs:16:15: 16:42
        switchInt(move _7) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 0 at ui/generator/control-flow.rs:16:9: 16:42
    }

    bb4: {
        _0 = move ((_3 as Complete).0: <T as std::ops::Generator>::Return); // scope 0 at ui/generator/control-flow.rs:18:38: 18:41
        _12 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(finish, [T], Some(promoted[0])) }
        _13 = _28;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _13);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_11.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_11.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = (*_14);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = (*_15);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = Eq(move _18, move _19);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _16 = Not(move _17);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb10, otherwise: bb9]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        unreachable;                     // scope 0 at ui/generator/control-flow.rs:16:15: 16:42
    }

    bb6: {
        _10 = _1;                        // scope 0 at ui/generator/control-flow.rs:17:50: 17:53
        _9 = core::num::<impl usize>::checked_sub(move _10, const 1_usize) -> [return: bb7, unwind: bb13]; // scope 0 at ui/generator/control-flow.rs:17:50: 17:68
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:17:54: 17:65
                                         // + literal: Const { ty: fn(usize, usize) -> Option<usize> {core::num::<impl usize>::checked_sub}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = Option::<usize>::unwrap(move _9) -> [return: bb8, unwind: bb13]; // scope 0 at ui/generator/control-flow.rs:17:50: 17:77
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:17:69: 17:75
                                         // + literal: Const { ty: fn(Option<usize>) -> usize {Option::<usize>::unwrap}, val: Value(<ZST>) }
    }

    bb8: {
        _1 = move _8;                    // scope 0 at ui/generator/control-flow.rs:17:44: 17:77
        goto -> bb1;                     // scope 0 at ui/generator/control-flow.rs:15:5: 23:6
    }

    bb9: {
        _20 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<usize, usize>(move _22, move _23, move _25, move _27) -> bb12; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_2) -> bb11;                // scope 0 at ui/generator/control-flow.rs:25:1: 25:2
    }

    bb11: {
        return;                          // scope 0 at ui/generator/control-flow.rs:25:2: 25:2
    }

    bb12 (cleanup): {
        drop(_0) -> bb13;                // scope 0 at ui/generator/control-flow.rs:21:13: 21:14
    }

    bb13 (cleanup): {
        drop(_2) -> bb14;                // scope 0 at ui/generator/control-flow.rs:25:1: 25:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/generator/control-flow.rs:12:1: 25:2
    }
}

promoted[0] in finish: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/generator/control-flow.rs:19:33: 19:34

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/generator/control-flow.rs:19:33: 19:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/control-flow.rs:27:11: 27:11
    let _1: ();                          // in scope 0 at ui/generator/control-flow.rs:28:5: 28:24
    let mut _2: [generator@ui/generator/control-flow.rs:28:15: 28:17]; // in scope 0 at ui/generator/control-flow.rs:28:15: 28:23
    let _3: ();                          // in scope 0 at ui/generator/control-flow.rs:29:5: 33:7
    let mut _4: [generator@ui/generator/control-flow.rs:29:15: 29:17]; // in scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    let _5: ();                          // in scope 0 at ui/generator/control-flow.rs:34:5: 39:7
    let mut _6: [generator@ui/generator/control-flow.rs:34:15: 34:17]; // in scope 0 at ui/generator/control-flow.rs:34:15: 39:6
    let _7: ();                          // in scope 0 at ui/generator/control-flow.rs:40:5: 45:7
    let mut _8: [generator@ui/generator/control-flow.rs:40:15: 40:17]; // in scope 0 at ui/generator/control-flow.rs:40:15: 45:6
    let _9: ();                          // in scope 0 at ui/generator/control-flow.rs:46:5: 52:7
    let mut _10: [generator@ui/generator/control-flow.rs:46:15: 46:17]; // in scope 0 at ui/generator/control-flow.rs:46:15: 52:6

    bb0: {
        _2 = [generator@ui/generator/control-flow.rs:28:15: 28:17 (#0)]; // scope 0 at ui/generator/control-flow.rs:28:15: 28:23
                                         // generator
                                         // + def_id: DefId(0:11 ~ control_flow[fe10]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _1 = finish::<[generator@ui/generator/control-flow.rs:28:15: 28:17]>(const 1_usize, move _2) -> bb1; // scope 0 at ui/generator/control-flow.rs:28:5: 28:24
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:28:5: 28:11
                                         // + literal: Const { ty: fn(usize, [generator@ui/generator/control-flow.rs:28:15: 28:17]) -> <[generator@ui/generator/control-flow.rs:28:15: 28:17] as Generator>::Return {finish::<[generator@ui/generator/control-flow.rs:28:15: 28:17]>}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = [generator@ui/generator/control-flow.rs:29:15: 29:17 (#0)]; // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
                                         // generator
                                         // + def_id: DefId(0:12 ~ control_flow[fe10]::main::{closure#1})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     for<'a> {i32, std::ops::Range<i32>, &'a mut std::ops::Range<i32>, std::option::Option<i32>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _3 = finish::<[generator@ui/generator/control-flow.rs:29:15: 29:17]>(const 8_usize, move _4) -> bb2; // scope 0 at ui/generator/control-flow.rs:29:5: 33:7
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:29:5: 29:11
                                         // + literal: Const { ty: fn(usize, [generator@ui/generator/control-flow.rs:29:15: 29:17]) -> <[generator@ui/generator/control-flow.rs:29:15: 29:17] as Generator>::Return {finish::<[generator@ui/generator/control-flow.rs:29:15: 29:17]>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = [generator@ui/generator/control-flow.rs:34:15: 34:17 (#0)]; // scope 0 at ui/generator/control-flow.rs:34:15: 39:6
                                         // generator
                                         // + def_id: DefId(0:13 ~ control_flow[fe10]::main::{closure#2})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {bool, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _5 = finish::<[generator@ui/generator/control-flow.rs:34:15: 34:17]>(const 1_usize, move _6) -> bb3; // scope 0 at ui/generator/control-flow.rs:34:5: 39:7
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:34:5: 34:11
                                         // + literal: Const { ty: fn(usize, [generator@ui/generator/control-flow.rs:34:15: 34:17]) -> <[generator@ui/generator/control-flow.rs:34:15: 34:17] as Generator>::Return {finish::<[generator@ui/generator/control-flow.rs:34:15: 34:17]>}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = [generator@ui/generator/control-flow.rs:40:15: 40:17 (#0)]; // scope 0 at ui/generator/control-flow.rs:40:15: 45:6
                                         // generator
                                         // + def_id: DefId(0:14 ~ control_flow[fe10]::main::{closure#3})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {bool, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _7 = finish::<[generator@ui/generator/control-flow.rs:40:15: 40:17]>(const 1_usize, move _8) -> bb4; // scope 0 at ui/generator/control-flow.rs:40:5: 45:7
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:40:5: 40:11
                                         // + literal: Const { ty: fn(usize, [generator@ui/generator/control-flow.rs:40:15: 40:17]) -> <[generator@ui/generator/control-flow.rs:40:15: 40:17] as Generator>::Return {finish::<[generator@ui/generator/control-flow.rs:40:15: 40:17]>}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = [generator@ui/generator/control-flow.rs:46:15: 46:17 (#0)]; // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
                                         // generator
                                         // + def_id: DefId(0:15 ~ control_flow[fe10]::main::{closure#4})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {(), bool},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _9 = finish::<[generator@ui/generator/control-flow.rs:46:15: 46:17]>(const 2_usize, move _10) -> bb5; // scope 0 at ui/generator/control-flow.rs:46:5: 52:7
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:46:5: 46:11
                                         // + literal: Const { ty: fn(usize, [generator@ui/generator/control-flow.rs:46:15: 46:17]) -> <[generator@ui/generator/control-flow.rs:46:15: 46:17] as Generator>::Return {finish::<[generator@ui/generator/control-flow.rs:46:15: 46:17]>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/generator/control-flow.rs:53:2: 53:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:28:15: 28:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/control-flow.rs:28:15: 28:23
    let mut _3: ();                      // in scope 0 at ui/generator/control-flow.rs:28:18: 28:23
    let mut _4: ();                      // in scope 0 at ui/generator/control-flow.rs:28:18: 28:18
    let mut _5: u32;                     // in scope 0 at ui/generator/control-flow.rs:28:15: 28:23
    let mut _6: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17]; // in scope 0 at ui/generator/control-flow.rs:28:15: 28:23
    let mut _7: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17]; // in scope 0 at ui/generator/control-flow.rs:28:15: 28:23
    let mut _8: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17]; // in scope 0 at ui/generator/control-flow.rs:28:15: 28:23

    bb0: {
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17]); // scope 0 at ui/generator/control-flow.rs:28:15: 28:23
        _5 = discriminant((*_6));        // scope 0 at ui/generator/control-flow.rs:28:15: 28:23
        switchInt(move _5) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4]; // scope 0 at ui/generator/control-flow.rs:28:15: 28:23
    }

    bb1: {
        _3 = ();                         // scope 0 at ui/generator/control-flow.rs:28:18: 28:23
        _0 = GeneratorState::<(), ()>::Yielded(move _3); // scope 0 at ui/generator/control-flow.rs:28:18: 28:23
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17]); // scope 0 at ui/generator/control-flow.rs:28:18: 28:23
        discriminant((*_7)) = 3;         // scope 0 at ui/generator/control-flow.rs:28:18: 28:23
        return;                          // scope 0 at ui/generator/control-flow.rs:28:18: 28:23
    }

    bb2: {
        _4 = move _2;                    // scope 0 at ui/generator/control-flow.rs:28:15: 28:23
        _0 = GeneratorState::<(), ()>::Complete(move _4); // scope 0 at ui/generator/control-flow.rs:28:23: 28:23
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:28:15: 28:17]); // scope 0 at ui/generator/control-flow.rs:28:23: 28:23
        discriminant((*_8)) = 1;         // scope 0 at ui/generator/control-flow.rs:28:23: 28:23
        return;                          // scope 0 at ui/generator/control-flow.rs:28:23: 28:23
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3; // scope 0 at ui/generator/control-flow.rs:28:15: 28:23
    }

    bb4: {
        unreachable;                     // scope 0 at ui/generator/control-flow.rs:28:15: 28:23
    }
}

fn main::{closure#1}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:29:15: 29:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    let mut _3: std::ops::Range<i32>;    // in scope 0 at ui/generator/control-flow.rs:30:18: 30:22
    let mut _4: std::ops::Range<i32>;    // in scope 0 at ui/generator/control-flow.rs:30:18: 30:22
    let mut _5: std::option::Option<i32>; // in scope 0 at ui/generator/control-flow.rs:30:18: 30:22
    let mut _6: &mut std::ops::Range<i32>; // in scope 0 at ui/generator/control-flow.rs:30:18: 30:22
    let mut _7: &mut std::ops::Range<i32>; // in scope 0 at ui/generator/control-flow.rs:30:18: 30:22
    let mut _8: isize;                   // in scope 0 at ui/generator/control-flow.rs:30:9: 32:10
    let mut _9: ();                      // in scope 0 at ui/generator/control-flow.rs:31:13: 31:18
    let mut _10: ();                     // in scope 0 at ui/generator/control-flow.rs:29:18: 29:18
    let mut _11: u32;                    // in scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    let mut _12: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]; // in scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    let mut _13: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]; // in scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    let mut _14: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]; // in scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    let mut _15: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]; // in scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    let mut _16: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]; // in scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    let mut _17: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]; // in scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    scope 1 {
        debug iter => (((*(_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17])) as variant#3).0: std::ops::Range<i32>); // in scope 1 at ui/generator/control-flow.rs:30:18: 30:22
    }

    bb0: {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]); // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
        _11 = discriminant((*_12));      // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
        switchInt(move _11) -> [0: bb1, 1: bb10, 2: bb9, 3: bb3, otherwise: bb11]; // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    }

    bb1: {
        _4 = std::ops::Range::<i32> { start: const 0_i32, end: const 8_i32 }; // scope 0 at ui/generator/control-flow.rs:30:18: 30:22
        _3 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb8]; // scope 0 at ui/generator/control-flow.rs:30:18: 30:22
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:30:18: 30:22
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]); // scope 0 at ui/generator/control-flow.rs:30:18: 30:22
        (((*_13) as variant#3).0: std::ops::Range<i32>) = move _3; // scope 0 at ui/generator/control-flow.rs:30:18: 30:22
        goto -> bb3;                     // scope 1 at ui/generator/control-flow.rs:30:9: 32:10
    }

    bb3: {
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]); // scope 1 at ui/generator/control-flow.rs:30:18: 30:22
        _7 = &mut (((*_14) as variant#3).0: std::ops::Range<i32>); // scope 1 at ui/generator/control-flow.rs:30:18: 30:22
        _6 = &mut (*_7);                 // scope 1 at ui/generator/control-flow.rs:30:18: 30:22
        _5 = <std::ops::Range<i32> as Iterator>::next(move _6) -> [return: bb4, unwind: bb8]; // scope 1 at ui/generator/control-flow.rs:30:18: 30:22
                                         // mir::Constant
                                         // + span: ui/generator/control-flow.rs:30:18: 30:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = discriminant(_5);           // scope 1 at ui/generator/control-flow.rs:30:18: 30:22
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/generator/control-flow.rs:30:18: 30:22
    }

    bb5: {
        _9 = ();                         // scope 1 at ui/generator/control-flow.rs:31:13: 31:18
        _0 = GeneratorState::<(), ()>::Yielded(move _9); // scope 1 at ui/generator/control-flow.rs:31:13: 31:18
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]); // scope 1 at ui/generator/control-flow.rs:31:13: 31:18
        discriminant((*_15)) = 3;        // scope 1 at ui/generator/control-flow.rs:31:13: 31:18
        return;                          // scope 1 at ui/generator/control-flow.rs:31:13: 31:18
    }

    bb6: {
        unreachable;                     // scope 1 at ui/generator/control-flow.rs:30:18: 30:22
    }

    bb7: {
        _10 = const ();                  // scope 1 at ui/generator/control-flow.rs:30:9: 32:10
        _0 = GeneratorState::<(), ()>::Complete(move _10); // scope 0 at ui/generator/control-flow.rs:33:6: 33:6
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]); // scope 0 at ui/generator/control-flow.rs:33:6: 33:6
        discriminant((*_16)) = 1;        // scope 0 at ui/generator/control-flow.rs:33:6: 33:6
        return;                          // scope 0 at ui/generator/control-flow.rs:33:6: 33:6
    }

    bb8 (cleanup): {
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:29:15: 29:17]); // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
        discriminant((*_17)) = 2;        // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
        resume;                          // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    }

    bb9: {
        assert(const false, "generator resumed after panicking") -> bb9; // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    }

    bb10: {
        assert(const false, "generator resumed after completion") -> bb10; // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    }

    bb11: {
        unreachable;                     // scope 0 at ui/generator/control-flow.rs:29:15: 33:6
    }
}

fn main::{closure#2}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:34:15: 34:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/control-flow.rs:34:15: 39:6
    let mut _3: bool;                    // in scope 0 at ui/generator/control-flow.rs:35:12: 35:16
    let mut _4: ();                      // in scope 0 at ui/generator/control-flow.rs:36:13: 36:18
    let mut _5: ();                      // in scope 0 at ui/generator/control-flow.rs:34:18: 34:18
    let mut _6: u32;                     // in scope 0 at ui/generator/control-flow.rs:34:15: 39:6
    let mut _7: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17]; // in scope 0 at ui/generator/control-flow.rs:34:15: 39:6
    let mut _8: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17]; // in scope 0 at ui/generator/control-flow.rs:34:15: 39:6
    let mut _9: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17]; // in scope 0 at ui/generator/control-flow.rs:34:15: 39:6

    bb0: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17]); // scope 0 at ui/generator/control-flow.rs:34:15: 39:6
        _6 = discriminant((*_7));        // scope 0 at ui/generator/control-flow.rs:34:15: 39:6
        switchInt(move _6) -> [0: bb1, 1: bb6, 3: bb5, otherwise: bb7]; // scope 0 at ui/generator/control-flow.rs:34:15: 39:6
    }

    bb1: {
        _3 = const true;                 // scope 0 at ui/generator/control-flow.rs:35:12: 35:16
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/generator/control-flow.rs:35:12: 35:16
    }

    bb2: {
        _4 = ();                         // scope 0 at ui/generator/control-flow.rs:36:13: 36:18
        _0 = GeneratorState::<(), ()>::Yielded(move _4); // scope 0 at ui/generator/control-flow.rs:36:13: 36:18
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17]); // scope 0 at ui/generator/control-flow.rs:36:13: 36:18
        discriminant((*_8)) = 3;         // scope 0 at ui/generator/control-flow.rs:36:13: 36:18
        return;                          // scope 0 at ui/generator/control-flow.rs:36:13: 36:18
    }

    bb3: {
        _5 = const ();                   // scope 0 at ui/generator/control-flow.rs:37:16: 38:10
        goto -> bb4;                     // scope 0 at ui/generator/control-flow.rs:35:9: 38:10
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _5); // scope 0 at ui/generator/control-flow.rs:39:6: 39:6
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:34:15: 34:17]); // scope 0 at ui/generator/control-flow.rs:39:6: 39:6
        discriminant((*_9)) = 1;         // scope 0 at ui/generator/control-flow.rs:39:6: 39:6
        return;                          // scope 0 at ui/generator/control-flow.rs:39:6: 39:6
    }

    bb5: {
        _5 = const ();                   // scope 0 at ui/generator/control-flow.rs:35:17: 37:10
        goto -> bb4;                     // scope 0 at ui/generator/control-flow.rs:35:9: 38:10
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/control-flow.rs:34:15: 39:6
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/control-flow.rs:34:15: 39:6
    }
}

fn main::{closure#3}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:40:15: 40:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/control-flow.rs:40:15: 45:6
    let mut _3: bool;                    // in scope 0 at ui/generator/control-flow.rs:41:12: 41:17
    let mut _4: ();                      // in scope 0 at ui/generator/control-flow.rs:43:13: 43:18
    let mut _5: ();                      // in scope 0 at ui/generator/control-flow.rs:40:18: 40:18
    let mut _6: u32;                     // in scope 0 at ui/generator/control-flow.rs:40:15: 45:6
    let mut _7: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17]; // in scope 0 at ui/generator/control-flow.rs:40:15: 45:6
    let mut _8: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17]; // in scope 0 at ui/generator/control-flow.rs:40:15: 45:6
    let mut _9: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17]; // in scope 0 at ui/generator/control-flow.rs:40:15: 45:6

    bb0: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17]); // scope 0 at ui/generator/control-flow.rs:40:15: 45:6
        _6 = discriminant((*_7));        // scope 0 at ui/generator/control-flow.rs:40:15: 45:6
        switchInt(move _6) -> [0: bb1, 1: bb6, 3: bb5, otherwise: bb7]; // scope 0 at ui/generator/control-flow.rs:40:15: 45:6
    }

    bb1: {
        _3 = const false;                // scope 0 at ui/generator/control-flow.rs:41:12: 41:17
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/generator/control-flow.rs:41:12: 41:17
    }

    bb2: {
        _5 = const ();                   // scope 0 at ui/generator/control-flow.rs:41:18: 42:10
        goto -> bb4;                     // scope 0 at ui/generator/control-flow.rs:41:9: 44:10
    }

    bb3: {
        _4 = ();                         // scope 0 at ui/generator/control-flow.rs:43:13: 43:18
        _0 = GeneratorState::<(), ()>::Yielded(move _4); // scope 0 at ui/generator/control-flow.rs:43:13: 43:18
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17]); // scope 0 at ui/generator/control-flow.rs:43:13: 43:18
        discriminant((*_8)) = 3;         // scope 0 at ui/generator/control-flow.rs:43:13: 43:18
        return;                          // scope 0 at ui/generator/control-flow.rs:43:13: 43:18
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _5); // scope 0 at ui/generator/control-flow.rs:45:6: 45:6
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:40:15: 40:17]); // scope 0 at ui/generator/control-flow.rs:45:6: 45:6
        discriminant((*_9)) = 1;         // scope 0 at ui/generator/control-flow.rs:45:6: 45:6
        return;                          // scope 0 at ui/generator/control-flow.rs:45:6: 45:6
    }

    bb5: {
        _5 = const ();                   // scope 0 at ui/generator/control-flow.rs:42:16: 44:10
        goto -> bb4;                     // scope 0 at ui/generator/control-flow.rs:41:9: 44:10
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/control-flow.rs:40:15: 45:6
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/control-flow.rs:40:15: 45:6
    }
}

fn main::{closure#4}(_1: Pin<&mut [generator@ui/generator/control-flow.rs:46:15: 46:17]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    let mut _3: bool;                    // in scope 0 at ui/generator/control-flow.rs:47:12: 47:28
    let mut _4: ();                      // in scope 0 at ui/generator/control-flow.rs:47:14: 47:19
    let mut _5: ();                      // in scope 0 at ui/generator/control-flow.rs:48:13: 48:18
    let mut _6: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _7: ();                      // in scope 0 at ui/generator/control-flow.rs:51:9: 51:14
    let mut _8: ();                      // in scope 0 at ui/generator/control-flow.rs:46:18: 46:18
    let mut _9: u32;                     // in scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    let mut _10: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]; // in scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    let mut _11: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]; // in scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    let mut _12: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]; // in scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    let mut _13: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]; // in scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    let mut _14: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]; // in scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    let mut _15: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]; // in scope 0 at ui/generator/control-flow.rs:46:15: 52:6

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]); // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
        _9 = discriminant((*_10));       // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
        switchInt(move _9) -> [0: bb1, 1: bb9, 2: bb8, 3: bb5, 4: bb6, 5: bb7, otherwise: bb10]; // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    }

    bb1: {
        _4 = ();                         // scope 0 at ui/generator/control-flow.rs:47:14: 47:19
        _0 = GeneratorState::<(), ()>::Yielded(move _4); // scope 0 at ui/generator/control-flow.rs:47:14: 47:19
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]); // scope 0 at ui/generator/control-flow.rs:47:14: 47:19
        discriminant((*_11)) = 3;        // scope 0 at ui/generator/control-flow.rs:47:14: 47:19
        return;                          // scope 0 at ui/generator/control-flow.rs:47:14: 47:19
    }

    bb2: {
        _5 = ();                         // scope 0 at ui/generator/control-flow.rs:48:13: 48:18
        _0 = GeneratorState::<(), ()>::Yielded(move _5); // scope 0 at ui/generator/control-flow.rs:48:13: 48:18
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]); // scope 0 at ui/generator/control-flow.rs:48:13: 48:18
        discriminant((*_12)) = 4;        // scope 0 at ui/generator/control-flow.rs:48:13: 48:18
        return;                          // scope 0 at ui/generator/control-flow.rs:48:13: 48:18
    }

    bb3: {
        _7 = ();                         // scope 0 at ui/generator/control-flow.rs:51:9: 51:14
        _0 = GeneratorState::<(), ()>::Yielded(move _7); // scope 0 at ui/generator/control-flow.rs:51:9: 51:14
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]); // scope 0 at ui/generator/control-flow.rs:51:9: 51:14
        discriminant((*_13)) = 5;        // scope 0 at ui/generator/control-flow.rs:51:9: 51:14
        return;                          // scope 0 at ui/generator/control-flow.rs:51:9: 51:14
    }

    bb4 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]); // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
        discriminant((*_15)) = 2;        // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
        resume;                          // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    }

    bb5: {
        _3 = const false;                // scope 0 at ui/generator/control-flow.rs:47:21: 47:26
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/generator/control-flow.rs:47:12: 47:28
    }

    bb6: {
        _6 = begin_panic::<&str>(const "explicit panic") -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _8 = move _2;                    // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
        _0 = GeneratorState::<(), ()>::Complete(move _8); // scope 0 at ui/generator/control-flow.rs:52:6: 52:6
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/control-flow.rs:46:15: 46:17]); // scope 0 at ui/generator/control-flow.rs:52:6: 52:6
        discriminant((*_14)) = 1;        // scope 0 at ui/generator/control-flow.rs:52:6: 52:6
        return;                          // scope 0 at ui/generator/control-flow.rs:52:6: 52:6
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8; // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9; // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    }

    bb10: {
        unreachable;                     // scope 0 at ui/generator/control-flow.rs:46:15: 52:6
    }
}
