// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/addassign-yield.rs:13:10: 13:10
    let _1: [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:9: 14:11
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/generator/addassign-yield.rs:14:9: 14:11
        let _2: [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 1 at ui/generator/addassign-yield.rs:19:9: 19:11
        scope 2 {
            debug _y => _2;              // in scope 2 at ui/generator/addassign-yield.rs:19:9: 19:11
            let _3: [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 2 at ui/generator/addassign-yield.rs:25:9: 25:11
            scope 3 {
                debug _z => _3;          // in scope 3 at ui/generator/addassign-yield.rs:25:9: 25:11
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/addassign-yield.rs:14:14: 14:23 (#0)]; // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
                                         // generator
                                         // + def_id: DefId(0:4 ~ addassign_yield[e4b5]::foo::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     for<'a, 'b, 'c> {std::string::String, (), &'a str, &'b str, &'c mut std::string::String},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _2 = [generator@ui/generator/addassign-yield.rs:19:14: 19:23 (#0)]; // scope 1 at ui/generator/addassign-yield.rs:19:14: 22:6
                                         // generator
                                         // + def_id: DefId(0:5 ~ addassign_yield[e4b5]::foo::{closure#1})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     for<'a> {i32, &'a mut i32, std::string::String, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _3 = [generator@ui/generator/addassign-yield.rs:25:14: 25:23 (#0)]; // scope 2 at ui/generator/addassign-yield.rs:25:14: 33:6
                                         // generator
                                         // + def_id: DefId(0:6 ~ addassign_yield[e4b5]::foo::{closure#2})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     for<'a> {i32, &'a mut i32, std::string::String, ()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        drop(_3) -> [return: bb1, unwind: bb4]; // scope 2 at ui/generator/addassign-yield.rs:34:1: 34:2
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb5]; // scope 1 at ui/generator/addassign-yield.rs:34:1: 34:2
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/generator/addassign-yield.rs:34:1: 34:2
    }

    bb3: {
        return;                          // scope 0 at ui/generator/addassign-yield.rs:34:2: 34:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 1 at ui/generator/addassign-yield.rs:34:1: 34:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/generator/addassign-yield.rs:34:1: 34:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/generator/addassign-yield.rs:13:1: 34:2
    }
}

fn foo::{closure#0}(_1: Pin<&mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let _3: ();                          // in scope 0 at ui/generator/addassign-yield.rs:16:9: 16:27
    let mut _4: &str;                    // in scope 0 at ui/generator/addassign-yield.rs:16:14: 16:27
    let mut _5: ();                      // in scope 0 at ui/generator/addassign-yield.rs:16:16: 16:21
    let _6: &str;                        // in scope 0 at ui/generator/addassign-yield.rs:16:23: 16:25
    let mut _7: ();                      // in scope 0 at ui/generator/addassign-yield.rs:14:24: 14:24
    let mut _8: u32;                     // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _9: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _10: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _11: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _12: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _13: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _14: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _15: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _16: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _17: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    let mut _18: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]; // in scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    scope 1 {
        debug s => (((*(_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23])) as variant#3).0: std::string::String); // in scope 1 at ui/generator/addassign-yield.rs:15:13: 15:18
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
        _8 = discriminant((*_9));        // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
        switchInt(move _8) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10]; // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 0 at ui/generator/addassign-yield.rs:15:21: 15:34
        (((*_10) as variant#3).0: std::string::String) = String::new() -> [return: bb2, unwind: bb6]; // scope 0 at ui/generator/addassign-yield.rs:15:21: 15:34
                                         // mir::Constant
                                         // + span: ui/generator/addassign-yield.rs:15:21: 15:32
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 1 at ui/generator/addassign-yield.rs:16:9: 16:10
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 1 at ui/generator/addassign-yield.rs:16:9: 16:10
        (((*_11) as variant#3).1: &mut std::string::String) = &mut (((*_12) as variant#3).0: std::string::String); // scope 1 at ui/generator/addassign-yield.rs:16:9: 16:10
        _5 = ();                         // scope 1 at ui/generator/addassign-yield.rs:16:16: 16:21
        _0 = GeneratorState::<(), ()>::Yielded(move _5); // scope 1 at ui/generator/addassign-yield.rs:16:16: 16:21
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 1 at ui/generator/addassign-yield.rs:16:16: 16:21
        discriminant((*_13)) = 3;        // scope 1 at ui/generator/addassign-yield.rs:16:16: 16:21
        return;                          // scope 1 at ui/generator/addassign-yield.rs:16:16: 16:21
    }

    bb3: {
        _7 = const ();                   // scope 0 at ui/generator/addassign-yield.rs:14:24: 17:6
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 0 at ui/generator/addassign-yield.rs:17:5: 17:6
        drop((((*_15) as variant#3).0: std::string::String)) -> [return: bb4, unwind: bb6]; // scope 0 at ui/generator/addassign-yield.rs:17:5: 17:6
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _7); // scope 0 at ui/generator/addassign-yield.rs:17:6: 17:6
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 0 at ui/generator/addassign-yield.rs:17:6: 17:6
        discriminant((*_16)) = 1;        // scope 0 at ui/generator/addassign-yield.rs:17:6: 17:6
        return;                          // scope 0 at ui/generator/addassign-yield.rs:17:6: 17:6
    }

    bb5 (cleanup): {
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 0 at ui/generator/addassign-yield.rs:17:5: 17:6
        drop((((*_17) as variant#3).0: std::string::String)) -> bb6; // scope 0 at ui/generator/addassign-yield.rs:17:5: 17:6
    }

    bb6 (cleanup): {
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
        discriminant((*_18)) = 2;        // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
        resume;                          // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    }

    bb7: {
        _6 = const "";                   // scope 1 at ui/generator/addassign-yield.rs:16:23: 16:25
                                         // mir::Constant
                                         // + span: ui/generator/addassign-yield.rs:16:23: 16:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 1 at ui/generator/addassign-yield.rs:16:23: 16:25
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:14:14: 14:23]); // scope 1 at ui/generator/addassign-yield.rs:16:9: 16:27
        _3 = <String as AddAssign<&str>>::add_assign(move (((*_14) as variant#3).1: &mut std::string::String), move _4) -> [return: bb3, unwind: bb5]; // scope 1 at ui/generator/addassign-yield.rs:16:9: 16:27
                                         // mir::Constant
                                         // + span: ui/generator/addassign-yield.rs:16:9: 16:27
                                         // + literal: Const { ty: for<'a> fn(&'a mut String, &str) {<String as AddAssign<&str>>::add_assign}, val: Value(<ZST>) }
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8; // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9; // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    }

    bb10: {
        unreachable;                     // scope 0 at ui/generator/addassign-yield.rs:14:14: 17:6
    }
}

fn foo::{closure#1}(_1: Pin<&mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _3: &mut i32;                // in scope 0 at ui/generator/addassign-yield.rs:21:10: 21:22
    let mut _4: ();                      // in scope 0 at ui/generator/addassign-yield.rs:21:12: 21:17
    let mut _5: (i32, bool);             // in scope 0 at ui/generator/addassign-yield.rs:21:9: 21:56
    let mut _6: ();                      // in scope 0 at ui/generator/addassign-yield.rs:19:24: 19:24
    let mut _7: u32;                     // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _8: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _9: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _10: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _11: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _12: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _13: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _14: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _15: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _16: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _17: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _18: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _19: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _20: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    let mut _21: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]; // in scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    scope 1 {
        debug x => (((*(_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23])) as variant#3).0: &mut i32); // in scope 1 at ui/generator/addassign-yield.rs:20:13: 20:14
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
        _7 = discriminant((*_8));        // scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
        switchInt(move _7) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10]; // scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    }

    bb1: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 0 at ui/generator/addassign-yield.rs:20:22: 20:23
        (((*_9) as variant#3).1: i32) = const 0_i32; // scope 0 at ui/generator/addassign-yield.rs:20:22: 20:23
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 0 at ui/generator/addassign-yield.rs:20:17: 20:23
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 0 at ui/generator/addassign-yield.rs:20:17: 20:23
        (((*_10) as variant#3).0: &mut i32) = &mut (((*_11) as variant#3).1: i32); // scope 0 at ui/generator/addassign-yield.rs:20:17: 20:23
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 1 at ui/generator/addassign-yield.rs:21:32: 21:45
        (((*_12) as variant#3).3: std::string::String) = String::new() -> [return: bb2, unwind: bb6]; // scope 1 at ui/generator/addassign-yield.rs:21:32: 21:45
                                         // mir::Constant
                                         // + span: ui/generator/addassign-yield.rs:21:32: 21:43
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 1 at ui/generator/addassign-yield.rs:21:53: 21:54
        (((*_13) as variant#3).2: i32) = const 0_i32; // scope 1 at ui/generator/addassign-yield.rs:21:53: 21:54
        _4 = ();                         // scope 1 at ui/generator/addassign-yield.rs:21:12: 21:17
        _0 = GeneratorState::<(), ()>::Yielded(move _4); // scope 1 at ui/generator/addassign-yield.rs:21:12: 21:17
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 1 at ui/generator/addassign-yield.rs:21:12: 21:17
        discriminant((*_14)) = 3;        // scope 1 at ui/generator/addassign-yield.rs:21:12: 21:17
        return;                          // scope 1 at ui/generator/addassign-yield.rs:21:12: 21:17
    }

    bb3: {
        (*_3) = move (_5.0: i32);        // scope 1 at ui/generator/addassign-yield.rs:21:9: 21:56
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 1 at ui/generator/addassign-yield.rs:21:56: 21:57
        drop((((*_18) as variant#3).3: std::string::String)) -> [return: bb4, unwind: bb6]; // scope 1 at ui/generator/addassign-yield.rs:21:56: 21:57
    }

    bb4: {
        _6 = const ();                   // scope 0 at ui/generator/addassign-yield.rs:19:24: 22:6
        _0 = GeneratorState::<(), ()>::Complete(move _6); // scope 0 at ui/generator/addassign-yield.rs:22:6: 22:6
        _19 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 0 at ui/generator/addassign-yield.rs:22:6: 22:6
        discriminant((*_19)) = 1;        // scope 0 at ui/generator/addassign-yield.rs:22:6: 22:6
        return;                          // scope 0 at ui/generator/addassign-yield.rs:22:6: 22:6
    }

    bb5 (cleanup): {
        _20 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 1 at ui/generator/addassign-yield.rs:21:56: 21:57
        drop((((*_20) as variant#3).3: std::string::String)) -> bb6; // scope 1 at ui/generator/addassign-yield.rs:21:56: 21:57
    }

    bb6 (cleanup): {
        _21 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
        discriminant((*_21)) = 2;        // scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
        resume;                          // scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    }

    bb7: {
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 1 at ui/generator/addassign-yield.rs:21:19: 21:20
        _3 = move (((*_15) as variant#3).0: &mut i32); // scope 1 at ui/generator/addassign-yield.rs:21:19: 21:20
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 1 at ui/generator/addassign-yield.rs:21:9: 21:56
        _5 = CheckedAdd((*_3), (((*_16) as variant#3).2: i32)); // scope 1 at ui/generator/addassign-yield.rs:21:9: 21:56
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:19:14: 19:23]); // scope 1 at ui/generator/addassign-yield.rs:21:9: 21:56
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_3), move (((*_17) as variant#3).2: i32)) -> [success: bb3, unwind: bb5]; // scope 1 at ui/generator/addassign-yield.rs:21:9: 21:56
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8; // scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9; // scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    }

    bb10: {
        unreachable;                     // scope 0 at ui/generator/addassign-yield.rs:19:14: 22:6
    }
}

fn foo::{closure#2}(_1: Pin<&mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _3: &mut i32;                // in scope 0 at ui/generator/addassign-yield.rs:27:10: 32:10
    let mut _4: &mut i32;                // in scope 0 at ui/generator/addassign-yield.rs:29:14: 29:33
    let mut _5: ();                      // in scope 0 at ui/generator/addassign-yield.rs:29:22: 29:24
    let mut _6: (i32, bool);             // in scope 0 at ui/generator/addassign-yield.rs:29:13: 29:66
    let mut _7: ();                      // in scope 0 at ui/generator/addassign-yield.rs:30:13: 30:18
    let mut _8: (i32, bool);             // in scope 0 at ui/generator/addassign-yield.rs:27:9: 32:44
    let mut _9: ();                      // in scope 0 at ui/generator/addassign-yield.rs:25:24: 25:24
    let mut _10: u32;                    // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _11: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _12: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _13: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _14: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _15: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _16: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _17: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _18: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _19: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _20: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _21: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _22: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _23: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _24: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _25: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _26: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _27: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _28: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _29: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _30: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _31: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _32: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _33: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _34: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    let mut _35: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]; // in scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    scope 1 {
        debug x => (((*(_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23])) as variant#3).0: &mut i32); // in scope 1 at ui/generator/addassign-yield.rs:26:13: 26:14
        scope 2 {
            debug inner => (((*(_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23])) as variant#3).4: &mut i32); // in scope 2 at ui/generator/addassign-yield.rs:28:17: 28:22
        }
    }

    bb0: {
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
        _10 = discriminant((*_11));      // scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
        switchInt(move _10) -> [0: bb1, 1: bb14, 2: bb13, 3: bb11, 4: bb12, otherwise: bb15]; // scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    }

    bb1: {
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 0 at ui/generator/addassign-yield.rs:26:22: 26:23
        (((*_12) as variant#3).1: i32) = const 0_i32; // scope 0 at ui/generator/addassign-yield.rs:26:22: 26:23
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 0 at ui/generator/addassign-yield.rs:26:17: 26:23
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 0 at ui/generator/addassign-yield.rs:26:17: 26:23
        (((*_13) as variant#3).0: &mut i32) = &mut (((*_14) as variant#3).1: i32); // scope 0 at ui/generator/addassign-yield.rs:26:17: 26:23
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 1 at ui/generator/addassign-yield.rs:32:20: 32:33
        (((*_15) as variant#3).3: std::string::String) = String::new() -> [return: bb2, unwind: bb10]; // scope 1 at ui/generator/addassign-yield.rs:32:20: 32:33
                                         // mir::Constant
                                         // + span: ui/generator/addassign-yield.rs:32:20: 32:31
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb2: {
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 1 at ui/generator/addassign-yield.rs:32:41: 32:42
        (((*_16) as variant#3).2: i32) = const 2_i32; // scope 1 at ui/generator/addassign-yield.rs:32:41: 32:42
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 1 at ui/generator/addassign-yield.rs:28:30: 28:31
        (((*_17) as variant#3).5: i32) = const 1_i32; // scope 1 at ui/generator/addassign-yield.rs:28:30: 28:31
        _18 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 1 at ui/generator/addassign-yield.rs:28:25: 28:31
        _19 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 1 at ui/generator/addassign-yield.rs:28:25: 28:31
        (((*_18) as variant#3).4: &mut i32) = &mut (((*_19) as variant#3).5: i32); // scope 1 at ui/generator/addassign-yield.rs:28:25: 28:31
        _20 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:29:43: 29:56
        (((*_20) as variant#3).7: std::string::String) = String::new() -> [return: bb3, unwind: bb9]; // scope 2 at ui/generator/addassign-yield.rs:29:43: 29:56
                                         // mir::Constant
                                         // + span: ui/generator/addassign-yield.rs:29:43: 29:54
                                         // + literal: Const { ty: fn() -> String {String::new}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:29:64: 29:65
        (((*_21) as variant#3).6: i32) = const 1_i32; // scope 2 at ui/generator/addassign-yield.rs:29:64: 29:65
        _5 = ();                         // scope 2 at ui/generator/addassign-yield.rs:29:22: 29:24
        _0 = GeneratorState::<(), ()>::Yielded(move _5); // scope 2 at ui/generator/addassign-yield.rs:29:16: 29:24
        _22 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:29:16: 29:24
        discriminant((*_22)) = 3;        // scope 2 at ui/generator/addassign-yield.rs:29:16: 29:24
        return;                          // scope 2 at ui/generator/addassign-yield.rs:29:16: 29:24
    }

    bb4: {
        (*_4) = move (_6.0: i32);        // scope 2 at ui/generator/addassign-yield.rs:29:13: 29:66
        _26 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:29:66: 29:67
        drop((((*_26) as variant#3).7: std::string::String)) -> [return: bb5, unwind: bb9]; // scope 2 at ui/generator/addassign-yield.rs:29:66: 29:67
    }

    bb5: {
        _7 = ();                         // scope 2 at ui/generator/addassign-yield.rs:30:13: 30:18
        _0 = GeneratorState::<(), ()>::Yielded(move _7); // scope 2 at ui/generator/addassign-yield.rs:30:13: 30:18
        _27 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:30:13: 30:18
        discriminant((*_27)) = 4;        // scope 2 at ui/generator/addassign-yield.rs:30:13: 30:18
        return;                          // scope 2 at ui/generator/addassign-yield.rs:30:13: 30:18
    }

    bb6: {
        (*_3) = move (_8.0: i32);        // scope 1 at ui/generator/addassign-yield.rs:27:9: 32:44
        _31 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 1 at ui/generator/addassign-yield.rs:32:44: 32:45
        drop((((*_31) as variant#3).3: std::string::String)) -> [return: bb7, unwind: bb10]; // scope 1 at ui/generator/addassign-yield.rs:32:44: 32:45
    }

    bb7: {
        _9 = const ();                   // scope 0 at ui/generator/addassign-yield.rs:25:24: 33:6
        _0 = GeneratorState::<(), ()>::Complete(move _9); // scope 0 at ui/generator/addassign-yield.rs:33:6: 33:6
        _32 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 0 at ui/generator/addassign-yield.rs:33:6: 33:6
        discriminant((*_32)) = 1;        // scope 0 at ui/generator/addassign-yield.rs:33:6: 33:6
        return;                          // scope 0 at ui/generator/addassign-yield.rs:33:6: 33:6
    }

    bb8 (cleanup): {
        _33 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:29:66: 29:67
        drop((((*_33) as variant#3).7: std::string::String)) -> bb9; // scope 2 at ui/generator/addassign-yield.rs:29:66: 29:67
    }

    bb9 (cleanup): {
        _34 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 1 at ui/generator/addassign-yield.rs:32:44: 32:45
        drop((((*_34) as variant#3).3: std::string::String)) -> bb10; // scope 1 at ui/generator/addassign-yield.rs:32:44: 32:45
    }

    bb10 (cleanup): {
        _35 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
        discriminant((*_35)) = 2;        // scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
        resume;                          // scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    }

    bb11: {
        _23 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:29:26: 29:31
        _4 = move (((*_23) as variant#3).4: &mut i32); // scope 2 at ui/generator/addassign-yield.rs:29:26: 29:31
        _24 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:29:13: 29:66
        _6 = CheckedAdd((*_4), (((*_24) as variant#3).6: i32)); // scope 2 at ui/generator/addassign-yield.rs:29:13: 29:66
        _25 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:29:13: 29:66
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_4), move (((*_25) as variant#3).6: i32)) -> [success: bb4, unwind: bb8]; // scope 2 at ui/generator/addassign-yield.rs:29:13: 29:66
    }

    bb12: {
        _28 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 2 at ui/generator/addassign-yield.rs:31:13: 31:14
        _3 = move (((*_28) as variant#3).0: &mut i32); // scope 2 at ui/generator/addassign-yield.rs:31:13: 31:14
        _29 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 1 at ui/generator/addassign-yield.rs:27:9: 32:44
        _8 = CheckedAdd((*_3), (((*_29) as variant#3).2: i32)); // scope 1 at ui/generator/addassign-yield.rs:27:9: 32:44
        _30 = deref_copy (_1.0: &mut [static generator@ui/generator/addassign-yield.rs:25:14: 25:23]); // scope 1 at ui/generator/addassign-yield.rs:27:9: 32:44
        assert(!move (_8.1: bool), "attempt to compute `{} + {}`, which would overflow", (*_3), move (((*_30) as variant#3).2: i32)) -> [success: bb6, unwind: bb9]; // scope 1 at ui/generator/addassign-yield.rs:27:9: 32:44
    }

    bb13: {
        assert(const false, "generator resumed after panicking") -> bb13; // scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    }

    bb14: {
        assert(const false, "generator resumed after completion") -> bb14; // scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    }

    bb15: {
        unreachable;                     // scope 0 at ui/generator/addassign-yield.rs:25:14: 33:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/addassign-yield.rs:36:11: 36:11

    bb0: {
        _0 = foo() -> bb1;               // scope 0 at ui/generator/addassign-yield.rs:37:5: 37:10
                                         // mir::Constant
                                         // + span: ui/generator/addassign-yield.rs:37:5: 37:8
                                         // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/addassign-yield.rs:38:2: 38:2
    }
}
