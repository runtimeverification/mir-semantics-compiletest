// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generator/drop-and-replace.rs:12:10: 12:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&i32;
    let _6: &i32;

    bb0: {
        _3 = const "Foo";
        _6 = &((*_1).0: i32);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/drop-and-replace.rs:12:17: 12:26>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: i32;
    let mut _4: i32;

    bb0: {
        _3 = ((*_1).0: i32);
        _4 = ((*_2).0: i32);
        _0 = Eq(move _3, move _4);
        return;
    }
}

fn <impl at ui/generator/drop-and-replace.rs:15:1: 15:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _2: std::ops::GeneratorState<(), ()>;
    let mut _3: std::pin::Pin<&mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]>;
    let mut _4: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _5: isize;
    scope 1 {
        debug a => _1;
    }

    bb0: {
        _1 = [generator@ui/generator/drop-and-replace.rs:20:17: 20:19 (#0)];
        goto -> bb1;
    }

    bb1: {
        _4 = &mut _1;
        _3 = Pin::<&mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]>::new(move _4) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _2 = <[generator@ui/generator/drop-and-replace.rs:20:17: 20:19] as Generator>::resume(move _3, const ()) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        _5 = discriminant(_2);
        switchInt(move _5) -> [1: bb4, otherwise: bb1];
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: Foo;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: ();
    let mut _28: (&i32, &i32);
    let mut _29: &i32;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: i32;
    let mut _35: i32;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&i32, &i32);
    let mut _40: &i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: ();
    let mut _55: u32;
    let mut _56: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _57: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _58: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _59: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _60: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _61: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _62: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _63: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _64: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _65: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _66: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _67: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _68: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _69: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _70: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _71: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _72: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    let mut _73: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19];
    scope 1 {
        debug x => (((*(_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19])) as variant#3).0: Foo);
        let _6: &i32;
        let _7: &i32;
        let _18: &i32;
        let _19: &i32;
        let _41: &i32;
        let _42: &i32;
        let mut _50: &i32;
        let mut _52: &i32;
        let mut _53: &i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 5 {
                debug kind => _24;
            }
        }
        scope 6 {
            debug y => (((*(_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19])) as variant#4).1: Foo);
            let _30: &i32;
            let _31: &i32;
            let mut _51: &i32;
            scope 7 {
                debug left_val => _30;
                debug right_val => _31;
                let _36: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _36;
                }
            }
        }
        scope 9 {
            debug left_val => _41;
            debug right_val => _42;
            let _47: core::panicking::AssertKind;
            scope 10 {
                debug kind => _47;
            }
        }
    }

    bb0: {
        _56 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _55 = discriminant((*_56));
        switchInt(move _55) -> [0: bb1, 1: bb20, 2: bb19, 3: bb17, 4: bb18, otherwise: bb21];
    }

    bb1: {
        _57 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        (((*_57) as variant#3).0: Foo) = Foo(const 4_i32);
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _58 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        discriminant((*_58)) = 3;
        return;
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> bb15;
    }

    bb3: {
        _15 = Foo(const 5_i32);
        _60 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_60) as variant#3).0: Foo)) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _61 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        (((*_61) as variant#3).0: Foo) = move _15;
        _63 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _17 = &((((*_63) as variant#3).0: Foo).0: i32);
        _52 = const _;
        _16 = (move _17, _52);
        _18 = (_16.0: &i32);
        _19 = (_16.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb5 (cleanup): {
        _62 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        (((*_62) as variant#3).0: Foo) = move _15;
        goto -> bb15;
    }

    bb6: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> bb15;
    }

    bb7: {
        _64 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        (((*_64) as variant#4).1: Foo) = Foo(const 6_i32);
        _27 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _27);
        _65 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        discriminant((*_65)) = 4;
        return;
    }

    bb8: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<i32, i32>(move _36, _30, _31, move _38) -> bb14;
    }

    bb9: {
        _67 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_67) as variant#4).1: Foo)) -> [return: bb10, unwind: bb15];
    }

    bb10: {
        _68 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _40 = &((((*_68) as variant#3).0: Foo).0: i32);
        _50 = const _;
        _39 = (move _40, _50);
        _41 = (_39.0: &i32);
        _42 = (_39.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49) -> bb15;
    }

    bb12: {
        _54 = const ();
        _69 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_69) as variant#3).0: Foo)) -> [return: bb13, unwind: bb16];
    }

    bb13: {
        _0 = GeneratorState::<(), ()>::Complete(move _54);
        _70 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        discriminant((*_70)) = 1;
        return;
    }

    bb14 (cleanup): {
        _71 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_71) as variant#4).1: Foo)) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        _72 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        drop((((*_72) as variant#3).0: Foo)) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        _73 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        discriminant((*_73)) = 2;
        resume;
    }

    bb17: {
        _59 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _5 = &((((*_59) as variant#3).0: Foo).0: i32);
        _53 = const _;
        _4 = (move _5, _53);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb18: {
        _66 = deref_copy (_1.0: &mut [generator@ui/generator/drop-and-replace.rs:20:17: 20:19]);
        _29 = &((((*_66) as variant#4).1: Foo).0: i32);
        _51 = const _;
        _28 = (move _29, _51);
        _30 = (_28.0: &i32);
        _31 = (_28.1: &i32);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb9, otherwise: bb8];
    }

    bb19: {
        assert(const false, "generator resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "generator resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        unreachable;
    }
}

promoted[0] in main::{closure#0}: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main::{closure#0}: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main::{closure#0}: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

fn Foo(_1: i32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo(_1: i32) -> Foo {
    let mut _0: Foo;

    bb0: {
        _0 = Foo(move _1);
        return;
    }
}
