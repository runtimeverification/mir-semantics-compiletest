// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/generator/panic-drops.rs:12:11: 12:22

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/generator/panic-drops.rs:12:25: 12:44
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/generator/panic-drops.rs:12:25: 12:44
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:12:25: 12:41
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/panic-drops.rs:12:1: 12:45
    }
}

fn <impl at ui/generator/panic-drops.rs:16:1: 16:16>::drop(_1: &mut B) -> () {
    debug self => _1;                    // in scope 0 at ui/generator/panic-drops.rs:17:13: 17:22
    let mut _0: ();                      // return place in scope 0 at ui/generator/panic-drops.rs:17:24: 17:24
    let _2: usize;                       // in scope 0 at ui/generator/panic-drops.rs:18:9: 18:41
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:18:9: 18:41
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:18:9: 18:10
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/generator/panic-drops.rs:18:24: 18:40

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/generator/panic-drops.rs:18:9: 18:10
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:18:9: 18:10
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/generator/panic-drops.rs:18:9: 18:41
        _5 = const SeqCst;               // scope 0 at ui/generator/panic-drops.rs:18:24: 18:40
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:18:24: 18:40
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::fetch_add(move _3, const 1_usize, move _5) -> bb1; // scope 0 at ui/generator/panic-drops.rs:18:9: 18:41
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:18:11: 18:20
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/panic-drops.rs:19:6: 19:6
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn bool_true() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/generator/panic-drops.rs:22:19: 22:23

    bb0: {
        _0 = const true;                 // scope 0 at ui/generator/panic-drops.rs:23:5: 23:9
        return;                          // scope 0 at ui/generator/panic-drops.rs:24:2: 24:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/panic-drops.rs:26:11: 26:11
    let _1: B;                           // in scope 0 at ui/generator/panic-drops.rs:27:9: 27:10
    let mut _3: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: usize;                       // in scope 0 at ui/generator/panic-drops.rs:36:16: 36:40
    let mut _6: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:36:16: 36:40
    let _7: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:36:16: 36:17
    let mut _8: std::sync::atomic::Ordering; // in scope 0 at ui/generator/panic-drops.rs:36:23: 36:39
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: std::panic::AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>; // in scope 0 at ui/generator/panic-drops.rs:37:35: 39:7
    let mut _26: [closure@ui/generator/panic-drops.rs:37:59: 37:61]; // in scope 0 at ui/generator/panic-drops.rs:37:59: 39:6
    let mut _27: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 0 at ui/generator/panic-drops.rs:37:59: 39:6
    let mut _28: bool;                   // in scope 0 at ui/generator/panic-drops.rs:40:5: 40:26
    let mut _29: bool;                   // in scope 0 at ui/generator/panic-drops.rs:40:13: 40:25
    let mut _30: &std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/generator/panic-drops.rs:40:13: 40:25
    let mut _31: !;                      // in scope 0 at ui/generator/panic-drops.rs:40:5: 40:26
    let mut _32: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _34: usize;                      // in scope 0 at ui/generator/panic-drops.rs:41:16: 41:40
    let mut _35: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:41:16: 41:40
    let _36: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:41:16: 41:17
    let mut _37: std::sync::atomic::Ordering; // in scope 0 at ui/generator/panic-drops.rs:41:23: 41:39
    let mut _38: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _43: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _44: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _46: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _47: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _48: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _49: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _50: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _51: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _54: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _55: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _56: usize;                      // in scope 0 at ui/generator/panic-drops.rs:51:16: 51:40
    let mut _57: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:51:16: 51:40
    let _58: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:51:16: 51:17
    let mut _59: std::sync::atomic::Ordering; // in scope 0 at ui/generator/panic-drops.rs:51:23: 51:39
    let mut _60: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _63: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _65: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _66: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _68: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _69: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _70: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _71: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _72: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _73: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _76: std::panic::AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>; // in scope 0 at ui/generator/panic-drops.rs:52:35: 54:7
    let mut _77: [closure@ui/generator/panic-drops.rs:52:59: 52:61]; // in scope 0 at ui/generator/panic-drops.rs:52:59: 54:6
    let mut _78: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]; // in scope 0 at ui/generator/panic-drops.rs:52:59: 54:6
    let mut _79: bool;                   // in scope 0 at ui/generator/panic-drops.rs:55:5: 55:26
    let mut _80: bool;                   // in scope 0 at ui/generator/panic-drops.rs:55:13: 55:25
    let mut _81: &std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/generator/panic-drops.rs:55:13: 55:25
    let mut _82: !;                      // in scope 0 at ui/generator/panic-drops.rs:55:5: 55:26
    let mut _83: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _84: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _85: usize;                      // in scope 0 at ui/generator/panic-drops.rs:56:16: 56:40
    let mut _86: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:56:16: 56:40
    let _87: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/panic-drops.rs:56:16: 56:17
    let mut _88: std::sync::atomic::Ordering; // in scope 0 at ui/generator/panic-drops.rs:56:23: 56:39
    let mut _89: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _93: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _94: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _95: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _97: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _98: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _99: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _100: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _101: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _102: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/generator/panic-drops.rs:27:9: 27:10
        let mut _2: [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 1 at ui/generator/panic-drops.rs:28:9: 28:16
        scope 2 {
            debug foo => _2;             // in scope 2 at ui/generator/panic-drops.rs:28:9: 28:16
            let _10: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _24: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 2 at ui/generator/panic-drops.rs:37:9: 37:12
            let mut _107: &usize;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug res => _24;        // in scope 5 at ui/generator/panic-drops.rs:37:9: 37:12
                let _39: &usize;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _40: &usize;         // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _53: [generator@ui/generator/panic-drops.rs:43:19: 43:21]; // in scope 5 at ui/generator/panic-drops.rs:43:9: 43:16
                let mut _106: &usize;    // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 6 {
                    debug left_val => _39; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _40; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _45: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _45; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 8 {
                    debug foo => _53;    // in scope 8 at ui/generator/panic-drops.rs:43:9: 43:16
                    let _61: &usize;     // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _62: &usize;     // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _75: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 8 at ui/generator/panic-drops.rs:52:9: 52:12
                    let mut _105: &usize; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 9 {
                        debug left_val => _61; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _62; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _67: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 10 {
                            debug kind => _67; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 11 {
                        debug res => _75; // in scope 11 at ui/generator/panic-drops.rs:52:9: 52:12
                        let _90: &usize; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _91: &usize; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _104: &usize; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 12 {
                            debug left_val => _90; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _91; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _96: core::panicking::AssertKind; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 13 {
                                debug kind => _96; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = [generator@ui/generator/panic-drops.rs:28:19: 28:21 (#0)] { b: move _1 }; // scope 1 at ui/generator/panic-drops.rs:28:19: 34:6
                                         // generator
                                         // + def_id: DefId(0:16 ~ panic_drops[1984]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (B,),
                                         // ]
                                         // + movability: Movable
        _7 = const {alloc1: &AtomicUsize}; // scope 2 at ui/generator/panic-drops.rs:36:16: 36:17
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:36:16: 36:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _6 = _7;                         // scope 2 at ui/generator/panic-drops.rs:36:16: 36:40
        _8 = const SeqCst;               // scope 2 at ui/generator/panic-drops.rs:36:23: 36:39
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:36:23: 36:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _5 = AtomicUsize::load(move _6, move _8) -> [return: bb1, unwind: bb26]; // scope 2 at ui/generator/panic-drops.rs:36:16: 36:40
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:36:18: 36:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _107 = const _;                  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _9 = _107;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_3.0: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_3.1: &usize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 0_usize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<usize, usize>(move _18, move _19, move _21, move _23) -> bb26; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = &mut _2;                   // scope 2 at ui/generator/panic-drops.rs:37:59: 39:6
        _26 = [closure@ui/generator/panic-drops.rs:37:59: 37:61] { foo: move _27 }; // scope 2 at ui/generator/panic-drops.rs:37:59: 39:6
                                         // closure
                                         // + def_id: DefId(0:17 ~ panic_drops[1984]::main::{closure#1})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()) -> std::ops::GeneratorState<(), ()>,
                                         //     (&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21],),
                                         // ]
        _25 = AssertUnwindSafe::<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>(move _26); // scope 2 at ui/generator/panic-drops.rs:37:35: 39:7
        _24 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>, GeneratorState<(), ()>>(move _25) -> [return: bb4, unwind: bb26]; // scope 2 at ui/generator/panic-drops.rs:37:15: 39:8
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:37:15: 37:34
                                         // + literal: Const { ty: fn(AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>) -> Result<GeneratorState<(), ()>, Box<(dyn Any + Send + 'static)>> {catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>, GeneratorState<(), ()>>}, val: Value(<ZST>) }
    }

    bb4: {
        _30 = &_24;                      // scope 5 at ui/generator/panic-drops.rs:40:13: 40:25
        _29 = Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err(move _30) -> [return: bb5, unwind: bb25]; // scope 5 at ui/generator/panic-drops.rs:40:13: 40:25
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:40:17: 40:23
                                         // + literal: Const { ty: for<'a> fn(&'a Result<GeneratorState<(), ()>, Box<dyn Any + Send>>) -> bool {Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = Not(move _29);             // scope 5 at ui/generator/panic-drops.rs:40:5: 40:26
        switchInt(move _28) -> [0: bb7, otherwise: bb6]; // scope 5 at ui/generator/panic-drops.rs:40:5: 40:26
    }

    bb6: {
        _31 = core::panicking::panic(const "assertion failed: res.is_err()") -> bb25; // scope 5 at ui/generator/panic-drops.rs:40:5: 40:26
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:40:5: 40:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _36 = const {alloc1: &AtomicUsize}; // scope 5 at ui/generator/panic-drops.rs:41:16: 41:17
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:41:16: 41:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _35 = _36;                       // scope 5 at ui/generator/panic-drops.rs:41:16: 41:40
        _37 = const SeqCst;              // scope 5 at ui/generator/panic-drops.rs:41:23: 41:39
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:41:23: 41:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _34 = AtomicUsize::load(move _35, move _37) -> [return: bb8, unwind: bb25]; // scope 5 at ui/generator/panic-drops.rs:41:16: 41:40
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:41:18: 41:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb8: {
        _33 = &_34;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _106 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[2])) }
        _38 = _106;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _38);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _39 = (_32.0: &usize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _40 = (_32.1: &usize);           // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _43 = (*_39);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _44 = const 1_usize;             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _42 = Eq(move _43, move _44);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _41 = Not(move _42);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _41) -> [0: bb10, otherwise: bb9]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _45 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = _39;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _51 = _40;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _50 = _51;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _46 = core::panicking::assert_failed::<usize, usize>(move _47, move _48, move _50, move _52) -> bb25; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb10: {
        _53 = [generator@ui/generator/panic-drops.rs:43:19: 43:21 (#0)]; // scope 5 at ui/generator/panic-drops.rs:43:19: 49:6
                                         // generator
                                         // + def_id: DefId(0:18 ~ panic_drops[1984]::main::{closure#2})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _58 = const {alloc1: &AtomicUsize}; // scope 8 at ui/generator/panic-drops.rs:51:16: 51:17
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:51:16: 51:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _57 = _58;                       // scope 8 at ui/generator/panic-drops.rs:51:16: 51:40
        _59 = const SeqCst;              // scope 8 at ui/generator/panic-drops.rs:51:23: 51:39
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:51:23: 51:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _56 = AtomicUsize::load(move _57, move _59) -> [return: bb11, unwind: bb25]; // scope 8 at ui/generator/panic-drops.rs:51:16: 51:40
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:51:18: 51:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb11: {
        _55 = &_56;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _105 = const _;                  // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _60 = _105;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _54 = (move _55, move _60);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _61 = (_54.0: &usize);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _62 = (_54.1: &usize);           // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _65 = (*_61);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _66 = const 1_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _64 = Eq(move _65, move _66);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _63 = Not(move _64);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _63) -> [0: bb13, otherwise: bb12]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _67 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _71 = _61;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _71;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _73 = _62;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = _73;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _68 = core::panicking::assert_failed::<usize, usize>(move _69, move _70, move _72, move _74) -> bb25; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb13: {
        _78 = &mut _53;                  // scope 8 at ui/generator/panic-drops.rs:52:59: 54:6
        _77 = [closure@ui/generator/panic-drops.rs:52:59: 52:61] { foo: move _78 }; // scope 8 at ui/generator/panic-drops.rs:52:59: 54:6
                                         // closure
                                         // + def_id: DefId(0:19 ~ panic_drops[1984]::main::{closure#3})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()) -> std::ops::GeneratorState<(), ()>,
                                         //     (&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21],),
                                         // ]
        _76 = AssertUnwindSafe::<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>(move _77); // scope 8 at ui/generator/panic-drops.rs:52:35: 54:7
        _75 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>, GeneratorState<(), ()>>(move _76) -> [return: bb14, unwind: bb25]; // scope 8 at ui/generator/panic-drops.rs:52:15: 54:8
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:52:15: 52:34
                                         // + literal: Const { ty: fn(AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>) -> Result<GeneratorState<(), ()>, Box<(dyn Any + Send + 'static)>> {catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>, GeneratorState<(), ()>>}, val: Value(<ZST>) }
    }

    bb14: {
        _81 = &_75;                      // scope 11 at ui/generator/panic-drops.rs:55:13: 55:25
        _80 = Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err(move _81) -> [return: bb15, unwind: bb24]; // scope 11 at ui/generator/panic-drops.rs:55:13: 55:25
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:55:17: 55:23
                                         // + literal: Const { ty: for<'a> fn(&'a Result<GeneratorState<(), ()>, Box<dyn Any + Send>>) -> bool {Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb15: {
        _79 = Not(move _80);             // scope 11 at ui/generator/panic-drops.rs:55:5: 55:26
        switchInt(move _79) -> [0: bb17, otherwise: bb16]; // scope 11 at ui/generator/panic-drops.rs:55:5: 55:26
    }

    bb16: {
        _82 = core::panicking::panic(const "assertion failed: res.is_err()") -> bb24; // scope 11 at ui/generator/panic-drops.rs:55:5: 55:26
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:55:5: 55:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        _87 = const {alloc1: &AtomicUsize}; // scope 11 at ui/generator/panic-drops.rs:56:16: 56:17
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:56:16: 56:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _86 = _87;                       // scope 11 at ui/generator/panic-drops.rs:56:16: 56:40
        _88 = const SeqCst;              // scope 11 at ui/generator/panic-drops.rs:56:23: 56:39
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:56:23: 56:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _85 = AtomicUsize::load(move _86, move _88) -> [return: bb18, unwind: bb24]; // scope 11 at ui/generator/panic-drops.rs:56:16: 56:40
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:56:18: 56:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb18: {
        _84 = &_85;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _104 = const _;                  // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _89 = _104;                      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _83 = (move _84, move _89);      // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _90 = (_83.0: &usize);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _91 = (_83.1: &usize);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _94 = (*_90);                    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _95 = const 1_usize;             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _93 = Eq(move _94, move _95);    // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _92 = Not(move _93);             // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _92) -> [0: bb20, otherwise: bb19]; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _96 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _100 = _90;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _100;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _102 = _91;                      // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = _102;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _103 = Option::<Arguments<'_>>::None; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _97 = core::panicking::assert_failed::<usize, usize>(move _98, move _99, move _101, move _103) -> bb24; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb20: {
        drop(_75) -> [return: bb21, unwind: bb25]; // scope 8 at ui/generator/panic-drops.rs:57:1: 57:2
    }

    bb21: {
        drop(_24) -> [return: bb22, unwind: bb26]; // scope 2 at ui/generator/panic-drops.rs:57:1: 57:2
    }

    bb22: {
        drop(_2) -> bb23;                // scope 1 at ui/generator/panic-drops.rs:57:1: 57:2
    }

    bb23: {
        return;                          // scope 0 at ui/generator/panic-drops.rs:57:2: 57:2
    }

    bb24 (cleanup): {
        drop(_75) -> bb25;               // scope 8 at ui/generator/panic-drops.rs:57:1: 57:2
    }

    bb25 (cleanup): {
        drop(_24) -> bb26;               // scope 2 at ui/generator/panic-drops.rs:57:1: 57:2
    }

    bb26 (cleanup): {
        drop(_2) -> bb27;                // scope 1 at ui/generator/panic-drops.rs:57:1: 57:2
    }

    bb27 (cleanup): {
        resume;                          // scope 0 at ui/generator/panic-drops.rs:26:1: 57:2
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/generator/panic-drops.rs:56:42: 56:43

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/generator/panic-drops.rs:56:42: 56:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/generator/panic-drops.rs:51:42: 51:43

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/generator/panic-drops.rs:51:42: 51:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/generator/panic-drops.rs:41:42: 41:43

    bb0: {
        _1 = const 1_usize;              // scope 0 at ui/generator/panic-drops.rs:41:42: 41:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/generator/panic-drops.rs:36:42: 36:43

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/generator/panic-drops.rs:36:42: 36:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>, _2: ()) -> GeneratorState<(), ()> {
    debug b => ((*(_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21])).0: B); // in scope 0 at ui/generator/panic-drops.rs:27:9: 27:10
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    let mut _3: bool;                    // in scope 0 at ui/generator/panic-drops.rs:29:12: 29:23
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let _5: ();                          // in scope 0 at ui/generator/panic-drops.rs:32:9: 32:16
    let mut _6: B;                       // in scope 0 at ui/generator/panic-drops.rs:32:14: 32:15
    let mut _7: ();                      // in scope 0 at ui/generator/panic-drops.rs:33:9: 33:14
    let mut _8: bool;                    // in scope 0 at ui/generator/panic-drops.rs:34:5: 34:6
    let mut _9: ();                      // in scope 0 at ui/generator/panic-drops.rs:28:22: 28:22
    let mut _10: u32;                    // in scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    let mut _11: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    let mut _12: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    let mut _13: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    let mut _14: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    let mut _15: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    let mut _16: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 0 at ui/generator/panic-drops.rs:28:19: 34:6

    bb0: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]); // scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
        _10 = discriminant((*_11));      // scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
        switchInt(move _10) -> [0: bb1, 1: bb11, 2: bb10, 3: bb9, otherwise: bb12]; // scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    }

    bb1: {
        _8 = const false;                // scope 0 at ui/generator/panic-drops.rs:29:9: 31:10
        _8 = const true;                 // scope 0 at ui/generator/panic-drops.rs:29:9: 31:10
        _3 = bool_true() -> [return: bb2, unwind: bb8]; // scope 0 at ui/generator/panic-drops.rs:29:12: 29:23
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:29:12: 29:21
                                         // + literal: Const { ty: fn() -> bool {bool_true}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/generator/panic-drops.rs:29:12: 29:23
    }

    bb3: {
        _4 = begin_panic::<&str>(const "explicit panic") -> bb8; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _8 = const false;                // scope 0 at ui/generator/panic-drops.rs:32:14: 32:15
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]); // scope 0 at ui/generator/panic-drops.rs:32:14: 32:15
        _6 = move ((*_12).0: B);         // scope 0 at ui/generator/panic-drops.rs:32:14: 32:15
        _5 = std::mem::drop::<B>(move _6) -> [return: bb5, unwind: bb8]; // scope 0 at ui/generator/panic-drops.rs:32:9: 32:16
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:32:9: 32:13
                                         // + literal: Const { ty: fn(B) {std::mem::drop::<B>}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = ();                         // scope 0 at ui/generator/panic-drops.rs:33:9: 33:14
        _0 = GeneratorState::<(), ()>::Yielded(move _7); // scope 0 at ui/generator/panic-drops.rs:33:9: 33:14
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]); // scope 0 at ui/generator/panic-drops.rs:33:9: 33:14
        discriminant((*_13)) = 3;        // scope 0 at ui/generator/panic-drops.rs:33:9: 33:14
        return;                          // scope 0 at ui/generator/panic-drops.rs:33:9: 33:14
    }

    bb6 (cleanup): {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]); // scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
        discriminant((*_16)) = 2;        // scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
        resume;                          // scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    }

    bb7 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]); // scope 0 at ui/generator/panic-drops.rs:34:5: 34:6
        drop(((*_15).0: B)) -> bb6;      // scope 0 at ui/generator/panic-drops.rs:34:5: 34:6
    }

    bb8 (cleanup): {
        switchInt(_8) -> [0: bb6, otherwise: bb7]; // scope 0 at ui/generator/panic-drops.rs:34:5: 34:6
    }

    bb9: {
        _9 = const ();                   // scope 0 at ui/generator/panic-drops.rs:28:22: 34:6
        _0 = GeneratorState::<(), ()>::Complete(move _9); // scope 0 at ui/generator/panic-drops.rs:34:6: 34:6
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]); // scope 0 at ui/generator/panic-drops.rs:34:6: 34:6
        discriminant((*_14)) = 1;        // scope 0 at ui/generator/panic-drops.rs:34:6: 34:6
        return;                          // scope 0 at ui/generator/panic-drops.rs:34:6: 34:6
    }

    bb10: {
        assert(const false, "generator resumed after panicking") -> bb10; // scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    }

    bb11: {
        assert(const false, "generator resumed after completion") -> bb11; // scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    }

    bb12: {
        unreachable;                     // scope 0 at ui/generator/panic-drops.rs:28:19: 34:6
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/generator/panic-drops.rs:37:59: 37:61]) -> GeneratorState<(), ()> {
    debug foo => (*((*_1).0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21])); // in scope 0 at ui/generator/panic-drops.rs:28:9: 28:16
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/panic-drops.rs:37:62: 37:62
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>; // in scope 0 at ui/generator/panic-drops.rs:38:9: 38:27
    let mut _3: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 0 at ui/generator/panic-drops.rs:38:18: 38:26
    let mut _4: ();                      // in scope 0 at ui/generator/panic-drops.rs:38:35: 38:37
    let mut _5: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]; // in scope 0 at ui/generator/panic-drops.rs:37:59: 39:6

    bb0: {
        _5 = deref_copy ((*_1).0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]); // scope 0 at ui/generator/panic-drops.rs:38:18: 38:26
        _3 = &mut (*_5);                 // scope 0 at ui/generator/panic-drops.rs:38:18: 38:26
        _2 = Pin::<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>::new(move _3) -> bb1; // scope 0 at ui/generator/panic-drops.rs:38:9: 38:27
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:38:9: 38:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]) -> Pin<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]> {Pin::<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <[generator@ui/generator/panic-drops.rs:28:19: 28:21] as Generator>::resume(move _2, move _4) -> bb2; // scope 0 at ui/generator/panic-drops.rs:38:9: 38:38
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:38:28: 38:34
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>, ()) -> GeneratorState<<[generator@ui/generator/panic-drops.rs:28:19: 28:21] as Generator>::Yield, <[generator@ui/generator/panic-drops.rs:28:19: 28:21] as Generator>::Return> {<[generator@ui/generator/panic-drops.rs:28:19: 28:21] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generator/panic-drops.rs:39:6: 39:6
    }
}

fn main::{closure#2}(_1: Pin<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    let mut _3: bool;                    // in scope 0 at ui/generator/panic-drops.rs:44:12: 44:23
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let _5: ();                          // in scope 0 at ui/generator/panic-drops.rs:47:9: 47:16
    let mut _6: B;                       // in scope 0 at ui/generator/panic-drops.rs:47:14: 47:15
    let mut _7: ();                      // in scope 0 at ui/generator/panic-drops.rs:48:9: 48:14
    let mut _8: ();                      // in scope 0 at ui/generator/panic-drops.rs:43:22: 43:22
    let mut _9: u32;                     // in scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    let mut _10: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]; // in scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    let mut _11: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]; // in scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    let mut _12: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]; // in scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    let mut _13: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]; // in scope 0 at ui/generator/panic-drops.rs:43:19: 49:6

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]); // scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
        _9 = discriminant((*_10));       // scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
        switchInt(move _9) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10]; // scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    }

    bb1: {
        _3 = bool_true() -> [return: bb2, unwind: bb6]; // scope 0 at ui/generator/panic-drops.rs:44:12: 44:23
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:44:12: 44:21
                                         // + literal: Const { ty: fn() -> bool {bool_true}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/generator/panic-drops.rs:44:12: 44:23
    }

    bb3: {
        _4 = begin_panic::<&str>(const "explicit panic") -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _6 = B;                          // scope 0 at ui/generator/panic-drops.rs:47:14: 47:15
        _5 = std::mem::drop::<B>(move _6) -> [return: bb5, unwind: bb6]; // scope 0 at ui/generator/panic-drops.rs:47:9: 47:16
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:47:9: 47:13
                                         // + literal: Const { ty: fn(B) {std::mem::drop::<B>}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = ();                         // scope 0 at ui/generator/panic-drops.rs:48:9: 48:14
        _0 = GeneratorState::<(), ()>::Yielded(move _7); // scope 0 at ui/generator/panic-drops.rs:48:9: 48:14
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]); // scope 0 at ui/generator/panic-drops.rs:48:9: 48:14
        discriminant((*_11)) = 3;        // scope 0 at ui/generator/panic-drops.rs:48:9: 48:14
        return;                          // scope 0 at ui/generator/panic-drops.rs:48:9: 48:14
    }

    bb6 (cleanup): {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]); // scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
        discriminant((*_13)) = 2;        // scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
        resume;                          // scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    }

    bb7: {
        _8 = const ();                   // scope 0 at ui/generator/panic-drops.rs:43:22: 49:6
        _0 = GeneratorState::<(), ()>::Complete(move _8); // scope 0 at ui/generator/panic-drops.rs:49:6: 49:6
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]); // scope 0 at ui/generator/panic-drops.rs:49:6: 49:6
        discriminant((*_12)) = 1;        // scope 0 at ui/generator/panic-drops.rs:49:6: 49:6
        return;                          // scope 0 at ui/generator/panic-drops.rs:49:6: 49:6
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8; // scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9; // scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    }

    bb10: {
        unreachable;                     // scope 0 at ui/generator/panic-drops.rs:43:19: 49:6
    }
}

fn main::{closure#3}(_1: &mut [closure@ui/generator/panic-drops.rs:52:59: 52:61]) -> GeneratorState<(), ()> {
    debug foo => (*((*_1).0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21])); // in scope 0 at ui/generator/panic-drops.rs:43:9: 43:16
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/panic-drops.rs:52:62: 52:62
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>; // in scope 0 at ui/generator/panic-drops.rs:53:9: 53:27
    let mut _3: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]; // in scope 0 at ui/generator/panic-drops.rs:53:18: 53:26
    let mut _4: ();                      // in scope 0 at ui/generator/panic-drops.rs:53:35: 53:37
    let mut _5: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]; // in scope 0 at ui/generator/panic-drops.rs:52:59: 54:6

    bb0: {
        _5 = deref_copy ((*_1).0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]); // scope 0 at ui/generator/panic-drops.rs:53:18: 53:26
        _3 = &mut (*_5);                 // scope 0 at ui/generator/panic-drops.rs:53:18: 53:26
        _2 = Pin::<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>::new(move _3) -> bb1; // scope 0 at ui/generator/panic-drops.rs:53:9: 53:27
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:53:9: 53:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]) -> Pin<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]> {Pin::<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <[generator@ui/generator/panic-drops.rs:43:19: 43:21] as Generator>::resume(move _2, move _4) -> bb2; // scope 0 at ui/generator/panic-drops.rs:53:9: 53:38
                                         // mir::Constant
                                         // + span: ui/generator/panic-drops.rs:53:28: 53:34
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>, ()) -> GeneratorState<<[generator@ui/generator/panic-drops.rs:43:19: 43:21] as Generator>::Yield, <[generator@ui/generator/panic-drops.rs:43:19: 43:21] as Generator>::Return> {<[generator@ui/generator/panic-drops.rs:43:19: 43:21] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generator/panic-drops.rs:54:6: 54:6
    }
}
