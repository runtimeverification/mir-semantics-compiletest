// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/panic-drops.rs:16:1: 16:16>::drop(_1: &mut B) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn bool_true() -> bool {
    let mut _0: bool;

    bb0: {
        _0 = const true;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let _5: &std::sync::atomic::AtomicUsize;
    let mut _6: std::sync::atomic::Ordering;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: usize;
    let mut _12: usize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: std::panic::AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>;
    let mut _18: [closure@ui/generator/panic-drops.rs:37:59: 37:61];
    let mut _19: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: &std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _23: !;
    let mut _24: (&usize, &usize);
    let mut _25: &usize;
    let _26: usize;
    let _27: &std::sync::atomic::AtomicUsize;
    let mut _28: std::sync::atomic::Ordering;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: usize;
    let mut _34: usize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&usize, &usize);
    let mut _40: &usize;
    let _41: usize;
    let _42: &std::sync::atomic::AtomicUsize;
    let mut _43: std::sync::atomic::Ordering;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: usize;
    let mut _49: usize;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: std::panic::AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>;
    let mut _55: [closure@ui/generator/panic-drops.rs:52:59: 52:61];
    let mut _56: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: &std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _60: !;
    let mut _61: (&usize, &usize);
    let mut _62: &usize;
    let _63: usize;
    let _64: &std::sync::atomic::AtomicUsize;
    let mut _65: std::sync::atomic::Ordering;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: usize;
    let mut _71: usize;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug b => const B;
        let mut _1: [generator@ui/generator/panic-drops.rs:28:19: 28:21];
        scope 2 {
            debug foo => _1;
            let _7: &usize;
            let _8: &usize;
            let _16: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            let mut _78: &usize;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug res => _16;
                let _29: &usize;
                let _30: &usize;
                let mut _38: [generator@ui/generator/panic-drops.rs:43:19: 43:21];
                let mut _77: &usize;
                scope 6 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _35: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _35;
                    }
                }
                scope 8 {
                    debug foo => _38;
                    let _44: &usize;
                    let _45: &usize;
                    let _53: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
                    let mut _76: &usize;
                    scope 9 {
                        debug left_val => _44;
                        debug right_val => _45;
                        let _50: core::panicking::AssertKind;
                        scope 10 {
                            debug kind => _50;
                        }
                    }
                    scope 11 {
                        debug res => _53;
                        let _66: &usize;
                        let _67: &usize;
                        let mut _75: &usize;
                        scope 12 {
                            debug left_val => _66;
                            debug right_val => _67;
                            let _72: core::panicking::AssertKind;
                            scope 13 {
                                debug kind => _72;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/panic-drops.rs:28:19: 28:21 (#0)] { b: const B };
        _5 = const {alloc1: &AtomicUsize};
        _6 = SeqCst;
        _4 = AtomicUsize::load(_5, move _6) -> [return: bb1, unwind: bb26];
    }

    bb1: {
        _3 = &_4;
        _78 = const _;
        _2 = (move _3, _78);
        _7 = (_2.0: &usize);
        _8 = (_2.1: &usize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<usize, usize>(move _13, _7, _8, move _15) -> bb26;
    }

    bb3: {
        _19 = &mut _1;
        _18 = [closure@ui/generator/panic-drops.rs:37:59: 37:61] { foo: move _19 };
        _17 = AssertUnwindSafe::<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>(move _18);
        _16 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:37:59: 37:61]>, GeneratorState<(), ()>>(move _17) -> [return: bb4, unwind: bb26];
    }

    bb4: {
        _22 = &_16;
        _21 = Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err(move _22) -> [return: bb5, unwind: bb25];
    }

    bb5: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _23 = core::panicking::panic(const "assertion failed: res.is_err()") -> bb25;
    }

    bb7: {
        _27 = const {alloc1: &AtomicUsize};
        _28 = SeqCst;
        _26 = AtomicUsize::load(_27, move _28) -> [return: bb8, unwind: bb25];
    }

    bb8: {
        _25 = &_26;
        _77 = const _;
        _24 = (move _25, _77);
        _29 = (_24.0: &usize);
        _30 = (_24.1: &usize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<usize, usize>(move _35, _29, _30, move _37) -> bb25;
    }

    bb10: {
        _38 = [generator@ui/generator/panic-drops.rs:43:19: 43:21 (#0)];
        _42 = const {alloc1: &AtomicUsize};
        _43 = SeqCst;
        _41 = AtomicUsize::load(_42, move _43) -> [return: bb11, unwind: bb25];
    }

    bb11: {
        _40 = &_41;
        _76 = const _;
        _39 = (move _40, _76);
        _44 = (_39.0: &usize);
        _45 = (_39.1: &usize);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<usize, usize>(move _50, _44, _45, move _52) -> bb25;
    }

    bb13: {
        _56 = &mut _38;
        _55 = [closure@ui/generator/panic-drops.rs:52:59: 52:61] { foo: move _56 };
        _54 = AssertUnwindSafe::<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>(move _55);
        _53 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-drops.rs:52:59: 52:61]>, GeneratorState<(), ()>>(move _54) -> [return: bb14, unwind: bb25];
    }

    bb14: {
        _59 = &_53;
        _58 = Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err(move _59) -> [return: bb15, unwind: bb24];
    }

    bb15: {
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _60 = core::panicking::panic(const "assertion failed: res.is_err()") -> bb24;
    }

    bb17: {
        _64 = const {alloc1: &AtomicUsize};
        _65 = SeqCst;
        _63 = AtomicUsize::load(_64, move _65) -> [return: bb18, unwind: bb24];
    }

    bb18: {
        _62 = &_63;
        _75 = const _;
        _61 = (move _62, _75);
        _66 = (_61.0: &usize);
        _67 = (_61.1: &usize);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<usize, usize>(move _72, _66, _67, move _74) -> bb24;
    }

    bb20: {
        drop(_53) -> [return: bb21, unwind: bb25];
    }

    bb21: {
        drop(_16) -> [return: bb22, unwind: bb26];
    }

    bb22: {
        drop(_1) -> [return: bb23, unwind continue];
    }

    bb23: {
        return;
    }

    bb24 (cleanup): {
        drop(_53) -> [return: bb25, unwind terminate];
    }

    bb25 (cleanup): {
        drop(_16) -> [return: bb26, unwind terminate];
    }

    bb26 (cleanup): {
        drop(_1) -> [return: bb27, unwind terminate];
    }

    bb27 (cleanup): {
        resume;
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>, _2: ()) -> GeneratorState<(), ()> {
    debug b => ((*(_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21])).0: B);
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: bool;
    let mut _4: !;
    let _5: ();
    let mut _6: B;
    let mut _7: ();
    let mut _8: bool;
    let mut _9: ();
    let mut _10: u32;
    let mut _11: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _12: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _13: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _14: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _15: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];
    let mut _16: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];

    bb0: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        _10 = discriminant((*_11));
        switchInt(move _10) -> [0: bb1, 1: bb11, 2: bb10, 3: bb9, otherwise: bb12];
    }

    bb1: {
        _8 = const false;
        _8 = const true;
        _3 = bool_true() -> [return: bb2, unwind: bb8];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = begin_panic::<&str>(const "explicit panic") -> bb8;
    }

    bb4: {
        _8 = const false;
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        _6 = move ((*_12).0: B);
        _5 = std::mem::drop::<B>(move _6) -> [return: bb5, unwind: bb8];
    }

    bb5: {
        _7 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _7);
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        discriminant((*_13)) = 3;
        return;
    }

    bb6 (cleanup): {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        discriminant((*_16)) = 2;
        resume;
    }

    bb7 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        drop(((*_15).0: B)) -> [return: bb6, unwind terminate];
    }

    bb8 (cleanup): {
        switchInt(_8) -> [0: bb6, otherwise: bb7];
    }

    bb9: {
        _9 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _9);
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        discriminant((*_14)) = 1;
        return;
    }

    bb10: {
        assert(const false, "generator resumed after panicking") -> [success: bb10, unwind continue];
    }

    bb11: {
        assert(const false, "generator resumed after completion") -> [success: bb11, unwind continue];
    }

    bb12: {
        unreachable;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/generator/panic-drops.rs:37:59: 37:61]) -> GeneratorState<(), ()> {
    debug foo => (*((*_1).0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]));
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>;
    let mut _3: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21];

    bb0: {
        _3 = deref_copy ((*_1).0: &mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]);
        _2 = Pin::<&mut [generator@ui/generator/panic-drops.rs:28:19: 28:21]>::new(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <[generator@ui/generator/panic-drops.rs:28:19: 28:21] as Generator>::resume(move _2, const ()) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main::{closure#2}(_1: Pin<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: bool;
    let mut _4: !;
    let _5: ();
    let mut _6: B;
    let mut _7: ();
    let mut _8: ();
    let mut _9: u32;
    let mut _10: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];
    let mut _11: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];
    let mut _12: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];
    let mut _13: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        _9 = discriminant((*_10));
        switchInt(move _9) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10];
    }

    bb1: {
        _3 = bool_true() -> [return: bb2, unwind: bb6];
    }

    bb2: {
        switchInt(move _3) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _4 = begin_panic::<&str>(const "explicit panic") -> bb6;
    }

    bb4: {
        _6 = B;
        _5 = std::mem::drop::<B>(move _6) -> [return: bb5, unwind: bb6];
    }

    bb5: {
        _7 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _7);
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        discriminant((*_11)) = 3;
        return;
    }

    bb6 (cleanup): {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        discriminant((*_13)) = 2;
        resume;
    }

    bb7: {
        _8 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _8);
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        discriminant((*_12)) = 1;
        return;
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> [success: bb8, unwind continue];
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> [success: bb9, unwind continue];
    }

    bb10: {
        unreachable;
    }
}

fn main::{closure#3}(_1: &mut [closure@ui/generator/panic-drops.rs:52:59: 52:61]) -> GeneratorState<(), ()> {
    debug foo => (*((*_1).0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]));
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>;
    let mut _3: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21];

    bb0: {
        _3 = deref_copy ((*_1).0: &mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]);
        _2 = Pin::<&mut [generator@ui/generator/panic-drops.rs:43:19: 43:21]>::new(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <[generator@ui/generator/panic-drops.rs:43:19: 43:21] as Generator>::resume(move _2, const ()) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
