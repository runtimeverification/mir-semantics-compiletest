// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn copy(_1: T) -> T {
    debug x => _1;                       // in scope 0 at ui/generator/issue-105084.rs:17:18: 17:19
    let mut _0: T;                       // return place in scope 0 at ui/generator/issue-105084.rs:17:27: 17:28

    bb0: {
        _0 = _1;                         // scope 0 at ui/generator/issue-105084.rs:18:5: 18:6
        return;                          // scope 0 at ui/generator/issue-105084.rs:19:2: 19:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/issue-105084.rs:21:11: 21:11
    let mut _1: [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:22:9: 22:14
    let _2: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/issue-105084.rs:33:5: 33:32
    let mut _3: std::pin::Pin<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>; // in scope 0 at ui/generator/issue-105084.rs:33:5: 33:21
    let mut _4: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:33:14: 33:20
    let mut _5: ();                      // in scope 0 at ui/generator/issue-105084.rs:33:29: 33:31
    let mut _7: [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:38:22: 38:23
    let _8: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/issue-105084.rs:44:5: 44:32
    let mut _9: std::pin::Pin<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>; // in scope 0 at ui/generator/issue-105084.rs:44:5: 44:21
    let mut _10: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:44:14: 44:20
    let mut _11: ();                     // in scope 0 at ui/generator/issue-105084.rs:44:29: 44:31
    let _12: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/issue-105084.rs:48:5: 48:32
    let mut _13: std::pin::Pin<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>; // in scope 0 at ui/generator/issue-105084.rs:48:5: 48:21
    let mut _14: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:48:14: 48:20
    let mut _15: ();                     // in scope 0 at ui/generator/issue-105084.rs:48:29: 48:31
    scope 1 {
        debug g => _1;                   // in scope 1 at ui/generator/issue-105084.rs:22:9: 22:14
        let mut _6: [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 1 at ui/generator/issue-105084.rs:38:9: 38:14
        scope 2 {
            debug h => _6;               // in scope 2 at ui/generator/issue-105084.rs:38:9: 38:14
        }
    }

    bb0: {
        _1 = [generator@ui/generator/issue-105084.rs:22:17: 22:19 (#0)]; // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_105084[58b1]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {i32, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _4 = &mut _1;                    // scope 1 at ui/generator/issue-105084.rs:33:14: 33:20
        _3 = Pin::<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>::new(move _4) -> bb1; // scope 1 at ui/generator/issue-105084.rs:33:5: 33:21
                                         // mir::Constant
                                         // + span: ui/generator/issue-105084.rs:33:5: 33:13
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]) -> Pin<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]> {Pin::<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::resume(move _3, move _5) -> bb2; // scope 1 at ui/generator/issue-105084.rs:33:5: 33:32
                                         // mir::Constant
                                         // + span: ui/generator/issue-105084.rs:33:22: 33:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>, ()) -> GeneratorState<<[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::Yield, <[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::Return> {<[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = _1;                         // scope 1 at ui/generator/issue-105084.rs:38:22: 38:23
        _6 = copy::<[generator@ui/generator/issue-105084.rs:22:17: 22:19]>(move _7) -> bb3; // scope 1 at ui/generator/issue-105084.rs:38:17: 38:24
                                         // mir::Constant
                                         // + span: ui/generator/issue-105084.rs:38:17: 38:21
                                         // + literal: Const { ty: fn([generator@ui/generator/issue-105084.rs:22:17: 22:19]) -> [generator@ui/generator/issue-105084.rs:22:17: 22:19] {copy::<[generator@ui/generator/issue-105084.rs:22:17: 22:19]>}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &mut _1;                   // scope 2 at ui/generator/issue-105084.rs:44:14: 44:20
        _9 = Pin::<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>::new(move _10) -> bb4; // scope 2 at ui/generator/issue-105084.rs:44:5: 44:21
                                         // mir::Constant
                                         // + span: ui/generator/issue-105084.rs:44:5: 44:13
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]) -> Pin<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]> {Pin::<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = <[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::resume(move _9, move _11) -> bb5; // scope 2 at ui/generator/issue-105084.rs:44:5: 44:32
                                         // mir::Constant
                                         // + span: ui/generator/issue-105084.rs:44:22: 44:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>, ()) -> GeneratorState<<[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::Yield, <[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::Return> {<[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = &mut _6;                   // scope 2 at ui/generator/issue-105084.rs:48:14: 48:20
        _13 = Pin::<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>::new(move _14) -> bb6; // scope 2 at ui/generator/issue-105084.rs:48:5: 48:21
                                         // mir::Constant
                                         // + span: ui/generator/issue-105084.rs:48:5: 48:13
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]) -> Pin<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]> {Pin::<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _12 = <[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::resume(move _13, move _15) -> bb7; // scope 2 at ui/generator/issue-105084.rs:48:5: 48:32
                                         // mir::Constant
                                         // + span: ui/generator/issue-105084.rs:48:22: 48:28
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>, ()) -> GeneratorState<<[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::Yield, <[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::Return> {<[generator@ui/generator/issue-105084.rs:22:17: 22:19] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/generator/issue-105084.rs:49:2: 49:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    let _3: std::boxed::Box<(i32, ())>;  // in scope 0 at ui/generator/issue-105084.rs:28:13: 28:14
    let mut _4: usize;                   // in scope 0 at ui/generator/issue-105084.rs:28:17: 28:31
    let mut _5: usize;                   // in scope 0 at ui/generator/issue-105084.rs:28:17: 28:31
    let mut _6: *mut u8;                 // in scope 0 at ui/generator/issue-105084.rs:28:17: 28:31
    let mut _7: ();                      // in scope 0 at ui/generator/issue-105084.rs:28:25: 28:30
    let mut _8: ();                      // in scope 0 at ui/generator/issue-105084.rs:28:25: 28:30
    let _9: ();                          // in scope 0 at ui/generator/issue-105084.rs:29:9: 29:16
    let mut _10: std::boxed::Box<(i32, ())>; // in scope 0 at ui/generator/issue-105084.rs:29:14: 29:15
    let mut _11: *const (i32, ());       // in scope 0 at ui/generator/issue-105084.rs:28:17: 28:31
    let mut _12: ();                     // in scope 0 at ui/generator/issue-105084.rs:22:20: 22:20
    let mut _13: u32;                    // in scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    let mut _14: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    let mut _15: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    let mut _16: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    let mut _17: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    let mut _18: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    let mut _19: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    let mut _20: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]; // in scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    scope 1 {
        debug t => _3;                   // in scope 1 at ui/generator/issue-105084.rs:28:13: 28:14
    }
    scope 2 {
    }

    bb0: {
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]); // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
        _13 = discriminant((*_14));      // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
        switchInt(move _13) -> [0: bb1, 1: bb7, 2: bb6, 3: bb5, otherwise: bb8]; // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    }

    bb1: {
        _4 = SizeOf((i32, ()));          // scope 2 at ui/generator/issue-105084.rs:28:17: 28:31
        _5 = AlignOf((i32, ()));         // scope 2 at ui/generator/issue-105084.rs:28:17: 28:31
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb2, unwind: bb4]; // scope 2 at ui/generator/issue-105084.rs:28:17: 28:31
                                         // mir::Constant
                                         // + span: ui/generator/issue-105084.rs:28:17: 28:31
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]); // scope 0 at ui/generator/issue-105084.rs:28:17: 28:31
        (((*_15) as variant#3).0: std::boxed::Box<(i32, ())>) = ShallowInitBox(move _6, (i32, ())); // scope 0 at ui/generator/issue-105084.rs:28:17: 28:31
        _8 = ();                         // scope 0 at ui/generator/issue-105084.rs:28:25: 28:30
        _0 = GeneratorState::<(), ()>::Yielded(move _8); // scope 0 at ui/generator/issue-105084.rs:28:25: 28:30
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]); // scope 0 at ui/generator/issue-105084.rs:28:25: 28:30
        discriminant((*_16)) = 3;        // scope 0 at ui/generator/issue-105084.rs:28:25: 28:30
        return;                          // scope 0 at ui/generator/issue-105084.rs:28:25: 28:30
    }

    bb3: {
        _12 = const ();                  // scope 0 at ui/generator/issue-105084.rs:22:20: 30:6
        _0 = GeneratorState::<(), ()>::Complete(move _12); // scope 0 at ui/generator/issue-105084.rs:30:6: 30:6
        _19 = deref_copy (_1.0: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]); // scope 0 at ui/generator/issue-105084.rs:30:6: 30:6
        discriminant((*_19)) = 1;        // scope 0 at ui/generator/issue-105084.rs:30:6: 30:6
        return;                          // scope 0 at ui/generator/issue-105084.rs:30:6: 30:6
    }

    bb4 (cleanup): {
        _20 = deref_copy (_1.0: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]); // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
        discriminant((*_20)) = 2;        // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
        resume;                          // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    }

    bb5: {
        _7 = move _2;                    // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]); // scope 0 at ui/generator/issue-105084.rs:28:21: 28:31
        _11 = ((((((*_17) as variant#3).0: std::boxed::Box<(i32, ())>).0: std::ptr::Unique<(i32, ())>).0: std::ptr::NonNull<(i32, ())>).0: *const (i32, ())); // scope 0 at ui/generator/issue-105084.rs:28:21: 28:31
        (*_11) = (const 5_i32, move _7); // scope 0 at ui/generator/issue-105084.rs:28:21: 28:31
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/issue-105084.rs:22:17: 22:19]); // scope 0 at ui/generator/issue-105084.rs:28:17: 28:31
        _3 = move (((*_18) as variant#3).0: std::boxed::Box<(i32, ())>); // scope 0 at ui/generator/issue-105084.rs:28:17: 28:31
        _10 = move _3;                   // scope 1 at ui/generator/issue-105084.rs:29:14: 29:15
        _9 = std::mem::drop::<Box<(i32, ())>>(move _10) -> [return: bb3, unwind: bb4]; // scope 1 at ui/generator/issue-105084.rs:29:9: 29:16
                                         // mir::Constant
                                         // + span: ui/generator/issue-105084.rs:29:9: 29:13
                                         // + literal: Const { ty: fn(Box<(i32, ())>) {std::mem::drop::<Box<(i32, ())>>}, val: Value(<ZST>) }
    }

    bb6: {
        assert(const false, "generator resumed after panicking") -> bb6; // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    }

    bb7: {
        assert(const false, "generator resumed after completion") -> bb7; // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    }

    bb8: {
        unreachable;                     // scope 0 at ui/generator/issue-105084.rs:22:17: 30:6
    }
}
