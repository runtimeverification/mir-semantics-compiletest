// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: [i32; 5] = {
    let mut _0: [i32; 5];                // return place in scope 0 at ui/generator/static-reference-across-yield.rs:4:11: 4:19

    bb0: {
        _0 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32]; // scope 0 at ui/generator/static-reference-across-yield.rs:4:22: 4:37
        return;                          // scope 0 at ui/generator/static-reference-across-yield.rs:4:1: 4:38
    }
}

A::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/generator/static-reference-across-yield.rs:4:17: 4:18

    bb0: {
        _0 = const 5_usize;              // scope 0 at ui/generator/static-reference-across-yield.rs:4:17: 4:18
        return;                          // scope 0 at ui/generator/static-reference-across-yield.rs:4:17: 4:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/static-reference-across-yield.rs:6:11: 6:11

    bb0: {
        return;                          // scope 0 at ui/generator/static-reference-across-yield.rs:16:2: 16:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    let _3: i32;                         // in scope 0 at ui/generator/static-reference-across-yield.rs:8:13: 8:14
    let _4: usize;                       // in scope 0 at ui/generator/static-reference-across-yield.rs:8:19: 8:29
    let mut _5: ();                      // in scope 0 at ui/generator/static-reference-across-yield.rs:8:20: 8:25
    let mut _6: usize;                   // in scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:30
    let mut _7: bool;                    // in scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:30
    let mut _8: ();                      // in scope 0 at ui/generator/static-reference-across-yield.rs:7:15: 7:15
    let mut _9: u32;                     // in scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    let mut _10: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    let mut _11: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    let mut _12: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    let mut _13: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    let mut _14: &[i32; 5];              // in scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    let mut _15: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    let mut _16: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    scope 1 {
        debug u => _3;                   // in scope 1 at ui/generator/static-reference-across-yield.rs:8:13: 8:14
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
        _9 = discriminant((*_10));       // scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
        switchInt(move _9) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7]; // scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    }

    bb1: {
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:18
        (((*_11) as variant#3).0: &[i32; 5]) = const {alloc1: &[i32; 5]}; // scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:18
                                         // mir::Constant
                                         // + span: ui/generator/static-reference-across-yield.rs:8:17: 8:18
                                         // + literal: Const { ty: &[i32; 5], val: Value(Scalar(alloc1)) }
        _5 = ();                         // scope 0 at ui/generator/static-reference-across-yield.rs:8:20: 8:25
        _0 = GeneratorState::<(), ()>::Yielded(move _5); // scope 0 at ui/generator/static-reference-across-yield.rs:8:20: 8:25
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:8:20: 8:25
        discriminant((*_12)) = 3;        // scope 0 at ui/generator/static-reference-across-yield.rs:8:20: 8:25
        return;                          // scope 0 at ui/generator/static-reference-across-yield.rs:8:20: 8:25
    }

    bb2: {
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:30
        _14 = deref_copy (((*_13) as variant#3).0: &[i32; 5]); // scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:30
        _3 = (*_14)[_4];                 // scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:30
        _8 = const ();                   // scope 0 at ui/generator/static-reference-across-yield.rs:7:15: 9:6
        _0 = GeneratorState::<(), ()>::Complete(move _8); // scope 0 at ui/generator/static-reference-across-yield.rs:9:6: 9:6
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:9:6: 9:6
        discriminant((*_15)) = 1;        // scope 0 at ui/generator/static-reference-across-yield.rs:9:6: 9:6
        return;                          // scope 0 at ui/generator/static-reference-across-yield.rs:9:6: 9:6
    }

    bb3 (cleanup): {
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:7:5: 7:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
        discriminant((*_16)) = 2;        // scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
        resume;                          // scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    }

    bb4: {
        _4 = const 1_usize;              // scope 0 at ui/generator/static-reference-across-yield.rs:8:27: 8:28
        _6 = const 5_usize;              // scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:30
        _7 = Lt(_4, _6);                 // scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:30
        assert(move _7, "index out of bounds: the length is {} but the index is {}", move _6, _4) -> [success: bb2, unwind: bb3]; // scope 0 at ui/generator/static-reference-across-yield.rs:8:17: 8:30
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5; // scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/static-reference-across-yield.rs:7:5: 9:6
    }
}

alloc1 (static: A, size: 20, align: 4) {
    0x00 │ 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 │ ................
    0x10 │ 05 00 00 00                                     │ ....
}

fn main::{closure#1}(_1: Pin<&mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    let _3: [i32; 5];                    // in scope 0 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
    let _4: &[i32; 5];                   // in scope 0 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
    let mut _5: bool;                    // in scope 0 at ui/generator/static-reference-across-yield.rs:12:18: 12:33
    let mut _6: ();                      // in scope 0 at ui/generator/static-reference-across-yield.rs:12:20: 12:25
    let mut _7: ();                      // in scope 0 at ui/generator/static-reference-across-yield.rs:10:15: 10:15
    let mut _8: u32;                     // in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    let mut _9: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    let mut _10: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    let mut _11: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    let mut _12: &[i32; 5];              // in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    let mut _13: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    let mut _14: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    let mut _15: &[i32; 5];              // in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    let mut _16: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]; // in scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    scope 1 {
        debug i => _3;                   // in scope 1 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
        debug i => _4;                   // in scope 1 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
    }

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
        _8 = discriminant((*_9));        // scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
        switchInt(move _8) -> [0: bb1, 1: bb6, 3: bb5, otherwise: bb7]; // scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:11:15: 11:16
        (((*_10) as variant#3).0: &[i32; 5]) = const {alloc1: &[i32; 5]}; // scope 0 at ui/generator/static-reference-across-yield.rs:11:15: 11:16
                                         // mir::Constant
                                         // + span: ui/generator/static-reference-across-yield.rs:11:15: 11:16
                                         // + literal: Const { ty: &[i32; 5], val: Value(Scalar(alloc1)) }
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
        _12 = deref_copy (((*_11) as variant#3).0: &[i32; 5]); // scope 0 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
        _4 = _12;                        // scope 0 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
        _6 = ();                         // scope 0 at ui/generator/static-reference-across-yield.rs:12:20: 12:25
        _0 = GeneratorState::<(), ()>::Yielded(move _6); // scope 0 at ui/generator/static-reference-across-yield.rs:12:20: 12:25
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:12:20: 12:25
        discriminant((*_13)) = 3;        // scope 0 at ui/generator/static-reference-across-yield.rs:12:20: 12:25
        return;                          // scope 0 at ui/generator/static-reference-across-yield.rs:12:20: 12:25
    }

    bb2: {
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
        _15 = deref_copy (((*_14) as variant#3).0: &[i32; 5]); // scope 0 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
        _3 = (*_15);                     // scope 0 at ui/generator/static-reference-across-yield.rs:12:13: 12:14
        _7 = ();                         // scope 1 at ui/generator/static-reference-across-yield.rs:12:37: 12:39
        goto -> bb4;                     // scope 0 at ui/generator/static-reference-across-yield.rs:12:38: 12:39
    }

    bb3: {
        _7 = ();                         // scope 0 at ui/generator/static-reference-across-yield.rs:13:18: 13:20
        goto -> bb4;                     // scope 0 at ui/generator/static-reference-across-yield.rs:13:18: 13:20
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _7); // scope 0 at ui/generator/static-reference-across-yield.rs:15:6: 15:6
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/static-reference-across-yield.rs:10:5: 10:14]); // scope 0 at ui/generator/static-reference-across-yield.rs:15:6: 15:6
        discriminant((*_16)) = 1;        // scope 0 at ui/generator/static-reference-across-yield.rs:15:6: 15:6
        return;                          // scope 0 at ui/generator/static-reference-across-yield.rs:15:6: 15:6
    }

    bb5: {
        _5 = const true;                 // scope 0 at ui/generator/static-reference-across-yield.rs:12:27: 12:31
        switchInt(move _5) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/generator/static-reference-across-yield.rs:12:18: 12:33
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/static-reference-across-yield.rs:10:5: 15:6
    }
}

alloc1 (static: A, size: 20, align: 4) {
    0x00 │ 01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00 │ ................
    0x10 │ 05 00 00 00                                     │ ....
}
