// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static DROP: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize;

    bb0: {
        ConstEvalCounter;
        _0 = AtomicUsize::new(const 0_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generator/panic-drops-resume.rs:17:1: 17:22>::drop(_1: &mut Dropper) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: usize;
    let _3: &std::sync::atomic::AtomicUsize;
    let mut _4: std::sync::atomic::Ordering;

    bb0: {
        _3 = const {alloc1: &AtomicUsize};
        _4 = SeqCst;
        _2 = AtomicUsize::fetch_add(_3, const 1_usize, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

alloc1 (static: DROP, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let mut _1: [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25];
    let mut _3: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25];
    let mut _4: (&usize, &usize);
    let mut _5: &usize;
    let _6: usize;
    let _7: &std::sync::atomic::AtomicUsize;
    let mut _8: std::sync::atomic::Ordering;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: std::panic::AssertUnwindSafe<[closure@ui/generator/panic-drops-resume.rs:33:45: 33:47]>;
    let mut _20: [closure@ui/generator/panic-drops-resume.rs:33:45: 33:47];
    let mut _21: &mut std::pin::Pin<&mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]>;
    let mut _22: bool;
    let mut _23: bool;
    let mut _24: &std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _25: !;
    let mut _26: (&usize, &usize);
    let mut _27: &usize;
    let _28: usize;
    let _29: &std::sync::atomic::AtomicUsize;
    let mut _30: std::sync::atomic::Ordering;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: usize;
    let mut _36: usize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug gen => _1;
        let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]>;
        scope 2 {
            debug gen => _2;
            let _9: &usize;
            let _10: &usize;
            let _18: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
            let mut _41: &usize;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
            scope 5 {
                debug res => _18;
                let _31: &usize;
                let _32: &usize;
                let mut _40: &usize;
                scope 6 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _37: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _37;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25 (#0)];
        _3 = &mut _1;
        _2 = Pin::<&mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]>::new(move _3) -> [return: bb1, unwind: bb15];
    }

    bb1: {
        _7 = const {alloc1: &AtomicUsize};
        _8 = Acquire;
        _6 = AtomicUsize::load(_7, move _8) -> [return: bb2, unwind: bb15];
    }

    bb2: {
        _5 = &_6;
        _41 = const _;
        _4 = (move _5, _41);
        _9 = (_4.0: &usize);
        _10 = (_4.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> bb15;
    }

    bb4: {
        _21 = &mut _2;
        _20 = [closure@ui/generator/panic-drops-resume.rs:33:45: 33:47] { gen: move _21 };
        _19 = AssertUnwindSafe::<[closure@ui/generator/panic-drops-resume.rs:33:45: 33:47]>(move _20);
        _18 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-drops-resume.rs:33:45: 33:47]>, GeneratorState<(), ()>>(move _19) -> [return: bb5, unwind: bb15];
    }

    bb5: {
        _24 = &_18;
        _23 = Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err(move _24) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _25 = core::panicking::panic(const "assertion failed: res.is_err()") -> bb14;
    }

    bb8: {
        _29 = const {alloc1: &AtomicUsize};
        _30 = Acquire;
        _28 = AtomicUsize::load(_29, move _30) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _27 = &_28;
        _40 = const _;
        _26 = (move _27, _40);
        _31 = (_26.0: &usize);
        _32 = (_26.1: &usize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<usize, usize>(move _37, _31, _32, move _39) -> bb14;
    }

    bb11: {
        drop(_18) -> [return: bb12, unwind: bb15];
    }

    bb12: {
        drop(_1) -> [return: bb13, unwind continue];
    }

    bb13: {
        return;
    }

    bb14 (cleanup): {
        drop(_18) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        resume;
    }
}

alloc1 (static: DROP, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 1_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]>, _2: Dropper) -> GeneratorState<(), ()> {
    debug _arg => (((*(_1.0: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25])) as variant#3).0: Dropper);
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: bool;
    let mut _4: !;
    let _5: Dropper;
    let mut _6: ();
    let mut _7: ();
    let mut _8: u32;
    let mut _9: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25];
    let mut _10: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25];
    let mut _11: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25];
    let mut _12: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25];
    let mut _13: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25];
    let mut _14: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25];
    let mut _15: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25];

    bb0: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb10, 2: bb9, 3: bb8, otherwise: bb11];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]);
        (((*_10) as variant#3).0: Dropper) = move _2;
        _3 = const true;
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _4 = begin_panic::<&str>(const "explicit panic") -> bb6;
    }

    bb3: {
        _6 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _6);
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]);
        discriminant((*_11)) = 3;
        return;
    }

    bb4: {
        _7 = const ();
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]);
        drop((((*_12) as variant#3).0: Dropper)) -> [return: bb5, unwind: bb7];
    }

    bb5: {
        _0 = GeneratorState::<(), ()>::Complete(move _7);
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]);
        discriminant((*_13)) = 1;
        return;
    }

    bb6 (cleanup): {
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]);
        drop((((*_14) as variant#3).0: Dropper)) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]);
        discriminant((*_15)) = 2;
        resume;
    }

    bb8: {
        _5 = move _2;
        drop(_5) -> [return: bb4, unwind: bb6];
    }

    bb9: {
        assert(const false, "generator resumed after panicking") -> [success: bb9, unwind continue];
    }

    bb10: {
        assert(const false, "generator resumed after completion") -> [success: bb10, unwind continue];
    }

    bb11: {
        unreachable;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/generator/panic-drops-resume.rs:33:45: 33:47]) -> GeneratorState<(), ()> {
    debug gen => (*((*_1).0: &mut std::pin::Pin<&mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]>));
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]>;
    let mut _3: &mut std::pin::Pin<&mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]>;

    bb0: {
        _3 = deref_copy ((*_1).0: &mut std::pin::Pin<&mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]>);
        _2 = Pin::<&mut [generator@ui/generator/panic-drops-resume.rs:24:19: 24:25]>::as_mut(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = <[generator@ui/generator/panic-drops-resume.rs:24:19: 24:25] as Generator<Dropper>>::resume(move _2, const Dropper {{  }}) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
