// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    scope 1 {
    }

    bb0: {
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [static generator@ui/generator/too-live-local-in-immovable-gen.rs:8:9: 8:23]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: ();
    let mut _5: u32;
    let mut _6: &mut [static generator@ui/generator/too-live-local-in-immovable-gen.rs:8:9: 8:23];
    let mut _7: &mut [static generator@ui/generator/too-live-local-in-immovable-gen.rs:8:9: 8:23];
    let mut _8: &mut [static generator@ui/generator/too-live-local-in-immovable-gen.rs:8:9: 8:23];
    scope 1 {
        debug a => const 4_i32;
        scope 2 {
        }
    }

    bb0: {
        _6 = deref_copy (_1.0: &mut [static generator@ui/generator/too-live-local-in-immovable-gen.rs:8:9: 8:23]);
        _5 = discriminant((*_6));
        switchInt(move _5) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4];
    }

    bb1: {
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _7 = deref_copy (_1.0: &mut [static generator@ui/generator/too-live-local-in-immovable-gen.rs:8:9: 8:23]);
        discriminant((*_7)) = 3;
        return;
    }

    bb2: {
        _4 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _4);
        _8 = deref_copy (_1.0: &mut [static generator@ui/generator/too-live-local-in-immovable-gen.rs:8:9: 8:23]);
        discriminant((*_8)) = 1;
        return;
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> [success: bb3, unwind continue];
    }

    bb4: {
        unreachable;
    }
}
