// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generator/iterator-count.rs:13:1: 13:62>::next(_1: &mut W<T>) -> Option<<T as Generator>::Yield> {
    debug self => _1;                    // in scope 0 at ui/generator/iterator-count.rs:16:13: 16:22
    let mut _0: std::option::Option<<T as std::ops::Generator>::Yield>; // return place in scope 0 at ui/generator/iterator-count.rs:16:27: 16:45
    let mut _2: std::ops::GeneratorState<<T as std::ops::Generator>::Yield, ()>; // in scope 0 at ui/generator/iterator-count.rs:17:15: 17:47
    let mut _3: std::pin::Pin<&mut T>;   // in scope 0 at ui/generator/iterator-count.rs:17:15: 17:36
    let mut _4: &mut T;                  // in scope 0 at ui/generator/iterator-count.rs:17:24: 17:35
    let mut _5: ();                      // in scope 0 at ui/generator/iterator-count.rs:17:44: 17:46
    let mut _6: isize;                   // in scope 0 at ui/generator/iterator-count.rs:18:13: 18:41
    let _7: <T as std::ops::Generator>::Yield; // in scope 0 at ui/generator/iterator-count.rs:19:37: 19:38
    let mut _8: <T as std::ops::Generator>::Yield; // in scope 0 at ui/generator/iterator-count.rs:19:48: 19:49
    scope 1 {
        debug v => _7;                   // in scope 1 at ui/generator/iterator-count.rs:19:37: 19:38
    }

    bb0: {
        _4 = &mut ((*_1).0: T);          // scope 0 at ui/generator/iterator-count.rs:17:24: 17:35
        _3 = Pin::<&mut T>::new(move _4) -> bb1; // scope 0 at ui/generator/iterator-count.rs:17:15: 17:36
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:17:15: 17:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut T) -> Pin<&mut T> {Pin::<&mut T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <T as Generator>::resume(move _3, move _5) -> bb2; // scope 0 at ui/generator/iterator-count.rs:17:15: 17:47
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:17:37: 17:43
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut T>, ()) -> GeneratorState<<T as Generator>::Yield, <T as Generator>::Return> {<T as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_2);           // scope 0 at ui/generator/iterator-count.rs:17:15: 17:47
        switchInt(move _6) -> [0: bb3, 1: bb5, otherwise: bb4]; // scope 0 at ui/generator/iterator-count.rs:17:9: 17:47
    }

    bb3: {
        _7 = move ((_2 as Yielded).0: <T as std::ops::Generator>::Yield); // scope 0 at ui/generator/iterator-count.rs:19:37: 19:38
        _8 = move _7;                    // scope 1 at ui/generator/iterator-count.rs:19:48: 19:49
        _0 = Option::<<T as Generator>::Yield>::Some(move _8); // scope 1 at ui/generator/iterator-count.rs:19:43: 19:50
        goto -> bb6;                     // scope 0 at ui/generator/iterator-count.rs:19:49: 19:50
    }

    bb4: {
        unreachable;                     // scope 0 at ui/generator/iterator-count.rs:17:15: 17:47
    }

    bb5: {
        _0 = Option::<<T as Generator>::Yield>::None; // scope 0 at ui/generator/iterator-count.rs:18:45: 18:49
        goto -> bb6;                     // scope 0 at ui/generator/iterator-count.rs:18:45: 18:49
    }

    bb6: {
        return;                          // scope 0 at ui/generator/iterator-count.rs:21:6: 21:6
    }
}

fn test() -> impl Generator<Return = (), Yield = u8> + Unpin {
    let mut _0: impl std::ops::Generator<Return = (), Yield = u8> + std::marker::Unpin; // return place in scope 0 at ui/generator/iterator-count.rs:24:14: 24:61

    bb0: {
        _0 = [generator@ui/generator/iterator-count.rs:25:5: 25:7 (#0)]; // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
                                         // generator
                                         // + def_id: DefId(0:17 ~ iterator_count[d14f]::test::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     u8,
                                         //     (),
                                         //     for<'a> {u8, std::ops::Range<u8>, &'a mut std::ops::Range<u8>, std::option::Option<u8>, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        return;                          // scope 0 at ui/generator/iterator-count.rs:30:2: 30:2
    }
}

fn test::{closure#0}(_1: Pin<&mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]>, _2: ()) -> GeneratorState<u8, ()> {
    let mut _0: std::ops::GeneratorState<u8, ()>; // return place in scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    let mut _3: std::ops::Range<u8>;     // in scope 0 at ui/generator/iterator-count.rs:26:18: 26:22
    let mut _4: std::ops::Range<u8>;     // in scope 0 at ui/generator/iterator-count.rs:26:18: 26:22
    let mut _5: std::option::Option<u8>; // in scope 0 at ui/generator/iterator-count.rs:26:18: 26:22
    let mut _6: &mut std::ops::Range<u8>; // in scope 0 at ui/generator/iterator-count.rs:26:18: 26:22
    let mut _7: &mut std::ops::Range<u8>; // in scope 0 at ui/generator/iterator-count.rs:26:18: 26:22
    let mut _8: isize;                   // in scope 0 at ui/generator/iterator-count.rs:26:9: 28:10
    let mut _10: u8;                     // in scope 0 at ui/generator/iterator-count.rs:27:19: 27:20
    let mut _11: ();                     // in scope 0 at ui/generator/iterator-count.rs:25:8: 25:8
    let mut _12: u32;                    // in scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    let mut _13: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]; // in scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    let mut _14: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]; // in scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    let mut _15: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]; // in scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    let mut _16: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]; // in scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    let mut _17: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]; // in scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    let mut _18: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]; // in scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    scope 1 {
        debug iter => (((*(_1.0: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7])) as variant#3).0: std::ops::Range<u8>); // in scope 1 at ui/generator/iterator-count.rs:26:18: 26:22
        let _9: u8;                      // in scope 1 at ui/generator/iterator-count.rs:26:13: 26:14
        scope 2 {
            debug i => _9;               // in scope 2 at ui/generator/iterator-count.rs:26:13: 26:14
        }
    }

    bb0: {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]); // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
        _12 = discriminant((*_13));      // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
        switchInt(move _12) -> [0: bb1, 1: bb10, 2: bb9, 3: bb3, otherwise: bb11]; // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    }

    bb1: {
        _4 = std::ops::Range::<u8> { start: const 1_u8, end: const 6_u8 }; // scope 0 at ui/generator/iterator-count.rs:26:18: 26:22
        _3 = <std::ops::Range<u8> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb8]; // scope 0 at ui/generator/iterator-count.rs:26:18: 26:22
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:26:18: 26:22
                                         // + literal: Const { ty: fn(std::ops::Range<u8>) -> <std::ops::Range<u8> as IntoIterator>::IntoIter {<std::ops::Range<u8> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]); // scope 0 at ui/generator/iterator-count.rs:26:18: 26:22
        (((*_14) as variant#3).0: std::ops::Range<u8>) = move _3; // scope 0 at ui/generator/iterator-count.rs:26:18: 26:22
        goto -> bb3;                     // scope 1 at ui/generator/iterator-count.rs:26:9: 28:10
    }

    bb3: {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]); // scope 1 at ui/generator/iterator-count.rs:26:18: 26:22
        _7 = &mut (((*_15) as variant#3).0: std::ops::Range<u8>); // scope 1 at ui/generator/iterator-count.rs:26:18: 26:22
        _6 = &mut (*_7);                 // scope 1 at ui/generator/iterator-count.rs:26:18: 26:22
        _5 = <std::ops::Range<u8> as Iterator>::next(move _6) -> [return: bb4, unwind: bb8]; // scope 1 at ui/generator/iterator-count.rs:26:18: 26:22
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:26:18: 26:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<u8>) -> Option<<std::ops::Range<u8> as Iterator>::Item> {<std::ops::Range<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = discriminant(_5);           // scope 1 at ui/generator/iterator-count.rs:26:18: 26:22
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/generator/iterator-count.rs:26:18: 26:22
    }

    bb5: {
        _9 = ((_5 as Some).0: u8);       // scope 1 at ui/generator/iterator-count.rs:26:13: 26:14
        _10 = _9;                        // scope 2 at ui/generator/iterator-count.rs:27:19: 27:20
        _0 = GeneratorState::<u8, ()>::Yielded(move _10); // scope 2 at ui/generator/iterator-count.rs:27:13: 27:20
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]); // scope 2 at ui/generator/iterator-count.rs:27:13: 27:20
        discriminant((*_16)) = 3;        // scope 2 at ui/generator/iterator-count.rs:27:13: 27:20
        return;                          // scope 2 at ui/generator/iterator-count.rs:27:13: 27:20
    }

    bb6: {
        unreachable;                     // scope 1 at ui/generator/iterator-count.rs:26:18: 26:22
    }

    bb7: {
        _11 = const ();                  // scope 1 at ui/generator/iterator-count.rs:26:9: 28:10
        _0 = GeneratorState::<u8, ()>::Complete(move _11); // scope 0 at ui/generator/iterator-count.rs:29:6: 29:6
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]); // scope 0 at ui/generator/iterator-count.rs:29:6: 29:6
        discriminant((*_17)) = 1;        // scope 0 at ui/generator/iterator-count.rs:29:6: 29:6
        return;                          // scope 0 at ui/generator/iterator-count.rs:29:6: 29:6
    }

    bb8 (cleanup): {
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:25:5: 25:7]); // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
        discriminant((*_18)) = 2;        // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
        resume;                          // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    }

    bb9: {
        assert(const false, "generator resumed after panicking") -> bb9; // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    }

    bb10: {
        assert(const false, "generator resumed after completion") -> bb10; // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    }

    bb11: {
        unreachable;                     // scope 0 at ui/generator/iterator-count.rs:25:5: 29:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/iterator-count.rs:32:11: 32:11
    let _1: u8;                          // in scope 0 at ui/generator/iterator-count.rs:33:9: 33:12
    let mut _3: &u8;                     // in scope 0 at ui/generator/iterator-count.rs:35:24: 41:6
    let mut _4: bool;                    // in scope 0 at ui/generator/iterator-count.rs:43:5: 43:59
    let mut _5: bool;                    // in scope 0 at ui/generator/iterator-count.rs:43:13: 43:58
    let mut _6: std::iter::Chain<W<impl std::ops::Generator<Return = (), Yield = u8> + std::marker::Unpin>, W<[generator@ui/generator/iterator-count.rs:36:9: 36:16]>>; // in scope 0 at ui/generator/iterator-count.rs:43:13: 43:48
    let mut _7: W<impl std::ops::Generator<Return = (), Yield = u8> + std::marker::Unpin>; // in scope 0 at ui/generator/iterator-count.rs:43:13: 43:22
    let mut _8: impl std::ops::Generator<Return = (), Yield = u8> + std::marker::Unpin; // in scope 0 at ui/generator/iterator-count.rs:43:15: 43:21
    let mut _9: W<[generator@ui/generator/iterator-count.rs:36:9: 36:16]>; // in scope 0 at ui/generator/iterator-count.rs:43:29: 43:47
    let mut _10: [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // in scope 0 at ui/generator/iterator-count.rs:43:31: 43:46
    let mut _11: &[closure@ui/generator/iterator-count.rs:35:24: 35:31]; // in scope 0 at ui/generator/iterator-count.rs:43:31: 43:43
    let mut _12: (u8,);                  // in scope 0 at ui/generator/iterator-count.rs:43:31: 43:46
    let mut _13: std::ops::Range<u8>;    // in scope 0 at ui/generator/iterator-count.rs:43:52: 43:57
    let mut _14: !;                      // in scope 0 at ui/generator/iterator-count.rs:43:5: 43:59
    scope 1 {
        debug end => _1;                 // in scope 1 at ui/generator/iterator-count.rs:33:9: 33:12
        let _2: [closure@ui/generator/iterator-count.rs:35:24: 35:31]; // in scope 1 at ui/generator/iterator-count.rs:35:9: 35:21
        scope 2 {
            debug closure_test => _2;    // in scope 2 at ui/generator/iterator-count.rs:35:9: 35:21
        }
    }

    bb0: {
        _1 = const 11_u8;                // scope 0 at ui/generator/iterator-count.rs:33:15: 33:17
        _3 = &_1;                        // scope 1 at ui/generator/iterator-count.rs:35:24: 41:6
        _2 = [closure@ui/generator/iterator-count.rs:35:24: 35:31] { end: move _3 }; // scope 1 at ui/generator/iterator-count.rs:35:24: 41:6
                                         // closure
                                         // + def_id: DefId(0:19 ~ iterator_count[d14f]::main::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn((u8,)) -> [generator@ui/generator/iterator-count.rs:36:9: 36:16],
                                         //     (&u8,),
                                         // ]
        _8 = test() -> bb1;              // scope 2 at ui/generator/iterator-count.rs:43:15: 43:21
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:43:15: 43:19
                                         // + literal: Const { ty: fn() -> impl Generator<Return = (), Yield = u8> + Unpin {test}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = W::<impl Generator<Return = (), Yield = u8> + Unpin>(move _8); // scope 2 at ui/generator/iterator-count.rs:43:13: 43:22
        _11 = &_2;                       // scope 2 at ui/generator/iterator-count.rs:43:31: 43:43
        _12 = const (6_u8,);             // scope 2 at ui/generator/iterator-count.rs:43:31: 43:46
        _10 = <[closure@ui/generator/iterator-count.rs:35:24: 35:31] as Fn<(u8,)>>::call(move _11, move _12) -> bb2; // scope 2 at ui/generator/iterator-count.rs:43:31: 43:46
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:43:31: 43:43
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/generator/iterator-count.rs:35:24: 35:31], (u8,)) -> <[closure@ui/generator/iterator-count.rs:35:24: 35:31] as FnOnce<(u8,)>>::Output {<[closure@ui/generator/iterator-count.rs:35:24: 35:31] as Fn<(u8,)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = W::<[generator@ui/generator/iterator-count.rs:36:9: 36:16]>(move _10); // scope 2 at ui/generator/iterator-count.rs:43:29: 43:47
        _6 = <W<impl Generator<Return = (), Yield = u8> + Unpin> as Iterator>::chain::<W<[generator@ui/generator/iterator-count.rs:36:9: 36:16]>>(move _7, move _9) -> bb3; // scope 2 at ui/generator/iterator-count.rs:43:13: 43:48
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:43:23: 43:28
                                         // + literal: Const { ty: fn(W<impl Generator<Return = (), Yield = u8> + Unpin>, W<[generator@ui/generator/iterator-count.rs:36:9: 36:16]>) -> std::iter::Chain<W<impl Generator<Return = (), Yield = u8> + Unpin>, <W<[generator@ui/generator/iterator-count.rs:36:9: 36:16]> as IntoIterator>::IntoIter> {<W<impl Generator<Return = (), Yield = u8> + Unpin> as Iterator>::chain::<W<[generator@ui/generator/iterator-count.rs:36:9: 36:16]>>}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = std::ops::Range::<u8> { start: const 1_u8, end: const 11_u8 }; // scope 2 at ui/generator/iterator-count.rs:43:52: 43:57
        _5 = <std::iter::Chain<W<impl Generator<Return = (), Yield = u8> + Unpin>, W<[generator@ui/generator/iterator-count.rs:36:9: 36:16]>> as Iterator>::eq::<std::ops::Range<u8>>(move _6, move _13) -> bb4; // scope 2 at ui/generator/iterator-count.rs:43:13: 43:58
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:43:49: 43:51
                                         // + literal: Const { ty: fn(std::iter::Chain<W<impl Generator<Return = (), Yield = u8> + Unpin>, W<[generator@ui/generator/iterator-count.rs:36:9: 36:16]>>, std::ops::Range<u8>) -> bool {<std::iter::Chain<W<impl Generator<Return = (), Yield = u8> + Unpin>, W<[generator@ui/generator/iterator-count.rs:36:9: 36:16]>> as Iterator>::eq::<std::ops::Range<u8>>}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = Not(move _5);               // scope 2 at ui/generator/iterator-count.rs:43:5: 43:59
        switchInt(move _4) -> [0: bb6, otherwise: bb5]; // scope 2 at ui/generator/iterator-count.rs:43:5: 43:59
    }

    bb5: {
        _14 = core::panicking::panic(const "assertion failed: W(test()).chain(W(closure_test(6))).eq(1..11)"); // scope 2 at ui/generator/iterator-count.rs:43:5: 43:59
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:43:5: 43:59
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/generator/iterator-count.rs:44:2: 44:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/generator/iterator-count.rs:35:24: 35:31], _2: u8) -> [generator@ui/generator/iterator-count.rs:36:9: 36:16] {
    debug start => _2;                   // in scope 0 at ui/generator/iterator-count.rs:35:25: 35:30
    debug end => (*((*_1).0: &u8));      // in scope 0 at ui/generator/iterator-count.rs:33:9: 33:12
    let mut _0: [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // return place in scope 0 at ui/generator/iterator-count.rs:35:32: 35:32
    let mut _3: &u8;                     // in scope 0 at ui/generator/iterator-count.rs:35:24: 41:6

    bb0: {
        _3 = deref_copy ((*_1).0: &u8);  // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
        _0 = [generator@ui/generator/iterator-count.rs:36:9: 36:16 (#0)] { start: _2, end: (*_3) }; // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
                                         // generator
                                         // + def_id: DefId(0:20 ~ iterator_count[d14f]::main::{closure#0}::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     u8,
                                         //     (),
                                         //     for<'a> {u8, std::ops::Range<u8>, &'a mut std::ops::Range<u8>, std::option::Option<u8>, ()},
                                         //     (u8, u8),
                                         // ]
                                         // + movability: Movable
        return;                          // scope 0 at ui/generator/iterator-count.rs:41:6: 41:6
    }
}

fn main::{closure#0}::{closure#0}(_1: Pin<&mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]>, _2: ()) -> GeneratorState<u8, ()> {
    debug start => ((*(_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16])).0: u8); // in scope 0 at ui/generator/iterator-count.rs:35:25: 35:30
    debug end => ((*(_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16])).1: u8); // in scope 0 at ui/generator/iterator-count.rs:33:9: 33:12
    let mut _0: std::ops::GeneratorState<u8, ()>; // return place in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    let mut _3: std::ops::Range<u8>;     // in scope 0 at ui/generator/iterator-count.rs:37:22: 37:32
    let mut _4: std::ops::Range<u8>;     // in scope 0 at ui/generator/iterator-count.rs:37:22: 37:32
    let mut _5: u8;                      // in scope 0 at ui/generator/iterator-count.rs:37:22: 37:27
    let mut _6: u8;                      // in scope 0 at ui/generator/iterator-count.rs:37:29: 37:32
    let mut _7: std::option::Option<u8>; // in scope 0 at ui/generator/iterator-count.rs:37:22: 37:32
    let mut _8: &mut std::ops::Range<u8>; // in scope 0 at ui/generator/iterator-count.rs:37:22: 37:32
    let mut _9: &mut std::ops::Range<u8>; // in scope 0 at ui/generator/iterator-count.rs:37:22: 37:32
    let mut _10: isize;                  // in scope 0 at ui/generator/iterator-count.rs:37:13: 39:14
    let mut _12: u8;                     // in scope 0 at ui/generator/iterator-count.rs:38:23: 38:24
    let mut _13: ();                     // in scope 0 at ui/generator/iterator-count.rs:36:17: 36:17
    let mut _14: u32;                    // in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    let mut _15: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    let mut _16: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    let mut _17: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    let mut _18: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    let mut _19: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    let mut _20: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    let mut _21: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    let mut _22: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]; // in scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    scope 1 {
        debug iter => (((*(_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16])) as variant#3).0: std::ops::Range<u8>); // in scope 1 at ui/generator/iterator-count.rs:37:22: 37:32
        let _11: u8;                     // in scope 1 at ui/generator/iterator-count.rs:37:17: 37:18
        scope 2 {
            debug i => _11;              // in scope 2 at ui/generator/iterator-count.rs:37:17: 37:18
        }
    }

    bb0: {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]); // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
        _14 = discriminant((*_15));      // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
        switchInt(move _14) -> [0: bb1, 1: bb10, 2: bb9, 3: bb3, otherwise: bb11]; // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    }

    bb1: {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]); // scope 0 at ui/generator/iterator-count.rs:37:22: 37:27
        _5 = ((*_16).0: u8);             // scope 0 at ui/generator/iterator-count.rs:37:22: 37:27
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]); // scope 0 at ui/generator/iterator-count.rs:37:29: 37:32
        _6 = ((*_17).1: u8);             // scope 0 at ui/generator/iterator-count.rs:37:29: 37:32
        _4 = std::ops::Range::<u8> { start: move _5, end: move _6 }; // scope 0 at ui/generator/iterator-count.rs:37:22: 37:32
        _3 = <std::ops::Range<u8> as IntoIterator>::into_iter(move _4) -> [return: bb2, unwind: bb8]; // scope 0 at ui/generator/iterator-count.rs:37:22: 37:32
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:37:22: 37:32
                                         // + literal: Const { ty: fn(std::ops::Range<u8>) -> <std::ops::Range<u8> as IntoIterator>::IntoIter {<std::ops::Range<u8> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]); // scope 0 at ui/generator/iterator-count.rs:37:22: 37:32
        (((*_18) as variant#3).0: std::ops::Range<u8>) = move _3; // scope 0 at ui/generator/iterator-count.rs:37:22: 37:32
        goto -> bb3;                     // scope 1 at ui/generator/iterator-count.rs:37:13: 39:14
    }

    bb3: {
        _19 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]); // scope 1 at ui/generator/iterator-count.rs:37:22: 37:32
        _9 = &mut (((*_19) as variant#3).0: std::ops::Range<u8>); // scope 1 at ui/generator/iterator-count.rs:37:22: 37:32
        _8 = &mut (*_9);                 // scope 1 at ui/generator/iterator-count.rs:37:22: 37:32
        _7 = <std::ops::Range<u8> as Iterator>::next(move _8) -> [return: bb4, unwind: bb8]; // scope 1 at ui/generator/iterator-count.rs:37:22: 37:32
                                         // mir::Constant
                                         // + span: ui/generator/iterator-count.rs:37:22: 37:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<u8>) -> Option<<std::ops::Range<u8> as Iterator>::Item> {<std::ops::Range<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = discriminant(_7);          // scope 1 at ui/generator/iterator-count.rs:37:22: 37:32
        switchInt(move _10) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/generator/iterator-count.rs:37:22: 37:32
    }

    bb5: {
        _11 = ((_7 as Some).0: u8);      // scope 1 at ui/generator/iterator-count.rs:37:17: 37:18
        _12 = _11;                       // scope 2 at ui/generator/iterator-count.rs:38:23: 38:24
        _0 = GeneratorState::<u8, ()>::Yielded(move _12); // scope 2 at ui/generator/iterator-count.rs:38:17: 38:24
        _20 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]); // scope 2 at ui/generator/iterator-count.rs:38:17: 38:24
        discriminant((*_20)) = 3;        // scope 2 at ui/generator/iterator-count.rs:38:17: 38:24
        return;                          // scope 2 at ui/generator/iterator-count.rs:38:17: 38:24
    }

    bb6: {
        unreachable;                     // scope 1 at ui/generator/iterator-count.rs:37:22: 37:32
    }

    bb7: {
        _13 = const ();                  // scope 1 at ui/generator/iterator-count.rs:37:13: 39:14
        _0 = GeneratorState::<u8, ()>::Complete(move _13); // scope 0 at ui/generator/iterator-count.rs:40:10: 40:10
        _21 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]); // scope 0 at ui/generator/iterator-count.rs:40:10: 40:10
        discriminant((*_21)) = 1;        // scope 0 at ui/generator/iterator-count.rs:40:10: 40:10
        return;                          // scope 0 at ui/generator/iterator-count.rs:40:10: 40:10
    }

    bb8 (cleanup): {
        _22 = deref_copy (_1.0: &mut [generator@ui/generator/iterator-count.rs:36:9: 36:16]); // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
        discriminant((*_22)) = 2;        // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
        resume;                          // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    }

    bb9: {
        assert(const false, "generator resumed after panicking") -> bb9; // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    }

    bb10: {
        assert(const false, "generator resumed after completion") -> bb10; // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    }

    bb11: {
        unreachable;                     // scope 0 at ui/generator/iterator-count.rs:36:9: 40:10
    }
}

fn W(_1: T) -> W<T> {
    let mut _0: W<T>;                    // return place in scope 0 at ui/generator/iterator-count.rs:9:1: 9:12

    bb0: {
        _0 = W::<T>(move _1);            // scope 0 at ui/generator/iterator-count.rs:9:1: 9:12
        return;                          // scope 0 at ui/generator/iterator-count.rs:9:1: 9:12
    }
}

// MIR FOR CTFE
fn W(_1: T) -> W<T> {
    let mut _0: W<T>;                    // return place in scope 0 at ui/generator/iterator-count.rs:9:1: 9:12

    bb0: {
        _0 = W::<T>(move _1);            // scope 0 at ui/generator/iterator-count.rs:9:1: 9:12
        return;                          // scope 0 at ui/generator/iterator-count.rs:9:1: 9:12
    }
}
