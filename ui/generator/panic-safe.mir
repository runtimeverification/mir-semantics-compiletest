// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/panic-safe.rs:11:11: 11:11
    let mut _1: [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:12:9: 12:16
    let mut _3: std::panic::AssertUnwindSafe<[closure@ui/generator/panic-safe.rs:19:59: 19:61]>; // in scope 0 at ui/generator/panic-safe.rs:19:35: 21:7
    let mut _4: [closure@ui/generator/panic-safe.rs:19:59: 19:61]; // in scope 0 at ui/generator/panic-safe.rs:19:59: 21:6
    let mut _5: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:19:59: 21:6
    let mut _6: bool;                    // in scope 0 at ui/generator/panic-safe.rs:22:5: 22:26
    let mut _7: bool;                    // in scope 0 at ui/generator/panic-safe.rs:22:13: 22:25
    let mut _8: &std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/generator/panic-safe.rs:22:13: 22:25
    let mut _9: !;                       // in scope 0 at ui/generator/panic-safe.rs:22:5: 22:26
    let mut _10: std::ops::Range<i32>;   // in scope 0 at ui/generator/panic-safe.rs:24:14: 24:19
    let mut _11: std::ops::Range<i32>;   // in scope 0 at ui/generator/panic-safe.rs:24:14: 24:19
    let mut _13: std::option::Option<i32>; // in scope 0 at ui/generator/panic-safe.rs:24:14: 24:19
    let mut _14: &mut std::ops::Range<i32>; // in scope 0 at ui/generator/panic-safe.rs:24:14: 24:19
    let mut _15: &mut std::ops::Range<i32>; // in scope 0 at ui/generator/panic-safe.rs:24:14: 24:19
    let mut _16: isize;                  // in scope 0 at ui/generator/panic-safe.rs:24:5: 29:6
    let mut _18: std::panic::AssertUnwindSafe<[closure@ui/generator/panic-safe.rs:25:63: 25:65]>; // in scope 0 at ui/generator/panic-safe.rs:25:39: 27:11
    let mut _19: [closure@ui/generator/panic-safe.rs:25:63: 25:65]; // in scope 0 at ui/generator/panic-safe.rs:25:63: 27:10
    let mut _20: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:25:63: 27:10
    let mut _21: bool;                   // in scope 0 at ui/generator/panic-safe.rs:28:9: 28:30
    let mut _22: bool;                   // in scope 0 at ui/generator/panic-safe.rs:28:17: 28:29
    let mut _23: &std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/generator/panic-safe.rs:28:17: 28:29
    let mut _24: !;                      // in scope 0 at ui/generator/panic-safe.rs:28:9: 28:30
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/generator/panic-safe.rs:12:9: 12:16
        let _2: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 1 at ui/generator/panic-safe.rs:19:9: 19:12
        scope 2 {
            debug res => _2;             // in scope 2 at ui/generator/panic-safe.rs:19:9: 19:12
            let mut _12: std::ops::Range<i32>; // in scope 2 at ui/generator/panic-safe.rs:24:14: 24:19
            scope 3 {
                debug iter => _12;       // in scope 3 at ui/generator/panic-safe.rs:24:14: 24:19
                let _17: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 3 at ui/generator/panic-safe.rs:25:13: 25:16
                scope 4 {
                    debug res => _17;    // in scope 4 at ui/generator/panic-safe.rs:25:13: 25:16
                }
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/panic-safe.rs:12:19: 12:21 (#0)]; // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
                                         // generator
                                         // + def_id: DefId(0:7 ~ panic_safe[08f9]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _5 = &mut _1;                    // scope 1 at ui/generator/panic-safe.rs:19:59: 21:6
        _4 = [closure@ui/generator/panic-safe.rs:19:59: 19:61] { foo: move _5 }; // scope 1 at ui/generator/panic-safe.rs:19:59: 21:6
                                         // closure
                                         // + def_id: DefId(0:8 ~ panic_safe[08f9]::main::{closure#1})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()) -> std::ops::GeneratorState<(), ()>,
                                         //     (&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21],),
                                         // ]
        _3 = AssertUnwindSafe::<[closure@ui/generator/panic-safe.rs:19:59: 19:61]>(move _4); // scope 1 at ui/generator/panic-safe.rs:19:35: 21:7
        _2 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-safe.rs:19:59: 19:61]>, GeneratorState<(), ()>>(move _3) -> bb1; // scope 1 at ui/generator/panic-safe.rs:19:15: 21:8
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:19:15: 19:34
                                         // + literal: Const { ty: fn(AssertUnwindSafe<[closure@ui/generator/panic-safe.rs:19:59: 19:61]>) -> Result<GeneratorState<(), ()>, Box<(dyn Any + Send + 'static)>> {catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-safe.rs:19:59: 19:61]>, GeneratorState<(), ()>>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_2;                        // scope 2 at ui/generator/panic-safe.rs:22:13: 22:25
        _7 = Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err(move _8) -> [return: bb2, unwind: bb17]; // scope 2 at ui/generator/panic-safe.rs:22:13: 22:25
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:22:17: 22:23
                                         // + literal: Const { ty: for<'a> fn(&'a Result<GeneratorState<(), ()>, Box<dyn Any + Send>>) -> bool {Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = Not(move _7);               // scope 2 at ui/generator/panic-safe.rs:22:5: 22:26
        switchInt(move _6) -> [0: bb4, otherwise: bb3]; // scope 2 at ui/generator/panic-safe.rs:22:5: 22:26
    }

    bb3: {
        _9 = core::panicking::panic(const "assertion failed: res.is_err()") -> bb17; // scope 2 at ui/generator/panic-safe.rs:22:5: 22:26
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:22:5: 22:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _11 = std::ops::Range::<i32> { start: const 0_i32, end: const 10_i32 }; // scope 2 at ui/generator/panic-safe.rs:24:14: 24:19
        _10 = <std::ops::Range<i32> as IntoIterator>::into_iter(move _11) -> [return: bb5, unwind: bb17]; // scope 2 at ui/generator/panic-safe.rs:24:14: 24:19
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:24:14: 24:19
                                         // + literal: Const { ty: fn(std::ops::Range<i32>) -> <std::ops::Range<i32> as IntoIterator>::IntoIter {<std::ops::Range<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _12 = move _10;                  // scope 2 at ui/generator/panic-safe.rs:24:14: 24:19
        goto -> bb6;                     // scope 3 at ui/generator/panic-safe.rs:24:5: 29:6
    }

    bb6: {
        _15 = &mut _12;                  // scope 3 at ui/generator/panic-safe.rs:24:14: 24:19
        _14 = &mut (*_15);               // scope 3 at ui/generator/panic-safe.rs:24:14: 24:19
        _13 = <std::ops::Range<i32> as Iterator>::next(move _14) -> [return: bb7, unwind: bb17]; // scope 3 at ui/generator/panic-safe.rs:24:14: 24:19
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:24:14: 24:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<i32>) -> Option<<std::ops::Range<i32> as Iterator>::Item> {<std::ops::Range<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = discriminant(_13);         // scope 3 at ui/generator/panic-safe.rs:24:14: 24:19
        switchInt(move _16) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 3 at ui/generator/panic-safe.rs:24:14: 24:19
    }

    bb8: {
        _20 = &mut _1;                   // scope 3 at ui/generator/panic-safe.rs:25:63: 27:10
        _19 = [closure@ui/generator/panic-safe.rs:25:63: 25:65] { foo: move _20 }; // scope 3 at ui/generator/panic-safe.rs:25:63: 27:10
                                         // closure
                                         // + def_id: DefId(0:9 ~ panic_safe[08f9]::main::{closure#2})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()) -> std::ops::GeneratorState<(), ()>,
                                         //     (&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21],),
                                         // ]
        _18 = AssertUnwindSafe::<[closure@ui/generator/panic-safe.rs:25:63: 25:65]>(move _19); // scope 3 at ui/generator/panic-safe.rs:25:39: 27:11
        _17 = catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-safe.rs:25:63: 25:65]>, GeneratorState<(), ()>>(move _18) -> [return: bb11, unwind: bb17]; // scope 3 at ui/generator/panic-safe.rs:25:19: 27:12
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:25:19: 25:38
                                         // + literal: Const { ty: fn(AssertUnwindSafe<[closure@ui/generator/panic-safe.rs:25:63: 25:65]>) -> Result<GeneratorState<(), ()>, Box<(dyn Any + Send + 'static)>> {catch_unwind::<AssertUnwindSafe<[closure@ui/generator/panic-safe.rs:25:63: 25:65]>, GeneratorState<(), ()>>}, val: Value(<ZST>) }
    }

    bb9: {
        unreachable;                     // scope 3 at ui/generator/panic-safe.rs:24:14: 24:19
    }

    bb10: {
        drop(_2) -> bb15;                // scope 1 at ui/generator/panic-safe.rs:30:1: 30:2
    }

    bb11: {
        _23 = &_17;                      // scope 4 at ui/generator/panic-safe.rs:28:17: 28:29
        _22 = Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err(move _23) -> [return: bb12, unwind: bb16]; // scope 4 at ui/generator/panic-safe.rs:28:17: 28:29
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:28:21: 28:27
                                         // + literal: Const { ty: for<'a> fn(&'a Result<GeneratorState<(), ()>, Box<dyn Any + Send>>) -> bool {Result::<GeneratorState<(), ()>, Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb12: {
        _21 = Not(move _22);             // scope 4 at ui/generator/panic-safe.rs:28:9: 28:30
        switchInt(move _21) -> [0: bb14, otherwise: bb13]; // scope 4 at ui/generator/panic-safe.rs:28:9: 28:30
    }

    bb13: {
        _24 = core::panicking::panic(const "assertion failed: res.is_err()") -> bb16; // scope 4 at ui/generator/panic-safe.rs:28:9: 28:30
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:28:9: 28:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        drop(_17) -> [return: bb6, unwind: bb17]; // scope 3 at ui/generator/panic-safe.rs:29:5: 29:6
    }

    bb15: {
        return;                          // scope 0 at ui/generator/panic-safe.rs:30:2: 30:2
    }

    bb16 (cleanup): {
        drop(_17) -> bb17;               // scope 3 at ui/generator/panic-safe.rs:29:5: 29:6
    }

    bb17 (cleanup): {
        drop(_2) -> bb18;                // scope 1 at ui/generator/panic-safe.rs:30:1: 30:2
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/generator/panic-safe.rs:11:1: 30:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    let mut _3: bool;                    // in scope 0 at ui/generator/panic-safe.rs:13:12: 13:16
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _5: ();                      // in scope 0 at ui/generator/panic-safe.rs:16:9: 16:14
    let mut _6: ();                      // in scope 0 at ui/generator/panic-safe.rs:12:22: 12:22
    let mut _7: u32;                     // in scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    let mut _8: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    let mut _9: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    let mut _10: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    let mut _11: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:12:19: 17:6

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]); // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
        _7 = discriminant((*_8));        // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
        switchInt(move _7) -> [0: bb1, 1: bb7, 2: bb6, 3: bb5, otherwise: bb8]; // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    }

    bb1: {
        _3 = const true;                 // scope 0 at ui/generator/panic-safe.rs:13:12: 13:16
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/generator/panic-safe.rs:13:12: 13:16
    }

    bb2: {
        _4 = begin_panic::<&str>(const "explicit panic") -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _5 = ();                         // scope 0 at ui/generator/panic-safe.rs:16:9: 16:14
        _0 = GeneratorState::<(), ()>::Yielded(move _5); // scope 0 at ui/generator/panic-safe.rs:16:9: 16:14
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]); // scope 0 at ui/generator/panic-safe.rs:16:9: 16:14
        discriminant((*_9)) = 3;         // scope 0 at ui/generator/panic-safe.rs:16:9: 16:14
        return;                          // scope 0 at ui/generator/panic-safe.rs:16:9: 16:14
    }

    bb4 (cleanup): {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]); // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
        discriminant((*_11)) = 2;        // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
        resume;                          // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    }

    bb5: {
        _6 = const ();                   // scope 0 at ui/generator/panic-safe.rs:12:22: 17:6
        _0 = GeneratorState::<(), ()>::Complete(move _6); // scope 0 at ui/generator/panic-safe.rs:17:6: 17:6
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]); // scope 0 at ui/generator/panic-safe.rs:17:6: 17:6
        discriminant((*_10)) = 1;        // scope 0 at ui/generator/panic-safe.rs:17:6: 17:6
        return;                          // scope 0 at ui/generator/panic-safe.rs:17:6: 17:6
    }

    bb6: {
        assert(const false, "generator resumed after panicking") -> bb6; // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    }

    bb7: {
        assert(const false, "generator resumed after completion") -> bb7; // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    }

    bb8: {
        unreachable;                     // scope 0 at ui/generator/panic-safe.rs:12:19: 17:6
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/generator/panic-safe.rs:19:59: 19:61]) -> GeneratorState<(), ()> {
    debug foo => (*((*_1).0: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21])); // in scope 0 at ui/generator/panic-safe.rs:12:9: 12:16
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/panic-safe.rs:19:62: 19:62
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]>; // in scope 0 at ui/generator/panic-safe.rs:20:9: 20:27
    let mut _3: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:20:18: 20:26
    let mut _4: ();                      // in scope 0 at ui/generator/panic-safe.rs:20:35: 20:37
    let mut _5: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:19:59: 21:6

    bb0: {
        _5 = deref_copy ((*_1).0: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]); // scope 0 at ui/generator/panic-safe.rs:20:18: 20:26
        _3 = &mut (*_5);                 // scope 0 at ui/generator/panic-safe.rs:20:18: 20:26
        _2 = Pin::<&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]>::new(move _3) -> bb1; // scope 0 at ui/generator/panic-safe.rs:20:9: 20:27
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:20:9: 20:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]) -> Pin<&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]> {Pin::<&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <[generator@ui/generator/panic-safe.rs:12:19: 12:21] as Generator>::resume(move _2, move _4) -> bb2; // scope 0 at ui/generator/panic-safe.rs:20:9: 20:38
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:20:28: 20:34
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]>, ()) -> GeneratorState<<[generator@ui/generator/panic-safe.rs:12:19: 12:21] as Generator>::Yield, <[generator@ui/generator/panic-safe.rs:12:19: 12:21] as Generator>::Return> {<[generator@ui/generator/panic-safe.rs:12:19: 12:21] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generator/panic-safe.rs:21:6: 21:6
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/generator/panic-safe.rs:25:63: 25:65]) -> GeneratorState<(), ()> {
    debug foo => (*((*_1).0: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21])); // in scope 0 at ui/generator/panic-safe.rs:12:9: 12:16
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/panic-safe.rs:25:66: 25:66
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]>; // in scope 0 at ui/generator/panic-safe.rs:26:13: 26:31
    let mut _3: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:26:22: 26:30
    let mut _4: ();                      // in scope 0 at ui/generator/panic-safe.rs:26:39: 26:41
    let mut _5: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]; // in scope 0 at ui/generator/panic-safe.rs:25:63: 27:10

    bb0: {
        _5 = deref_copy ((*_1).0: &mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]); // scope 0 at ui/generator/panic-safe.rs:26:22: 26:30
        _3 = &mut (*_5);                 // scope 0 at ui/generator/panic-safe.rs:26:22: 26:30
        _2 = Pin::<&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]>::new(move _3) -> bb1; // scope 0 at ui/generator/panic-safe.rs:26:13: 26:31
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:26:13: 26:21
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]) -> Pin<&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]> {Pin::<&mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <[generator@ui/generator/panic-safe.rs:12:19: 12:21] as Generator>::resume(move _2, move _4) -> bb2; // scope 0 at ui/generator/panic-safe.rs:26:13: 26:42
                                         // mir::Constant
                                         // + span: ui/generator/panic-safe.rs:26:32: 26:38
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/panic-safe.rs:12:19: 12:21]>, ()) -> GeneratorState<<[generator@ui/generator/panic-safe.rs:12:19: 12:21] as Generator>::Yield, <[generator@ui/generator/panic-safe.rs:12:19: 12:21] as Generator>::Return> {<[generator@ui/generator/panic-safe.rs:12:19: 12:21] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generator/panic-safe.rs:27:10: 27:10
    }
}
