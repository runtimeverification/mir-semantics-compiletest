// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn gen() -> impl Generator<usize> {
    let mut _0: impl std::ops::Generator<usize>;

    bb0: {
        _0 = [generator@ui/generator/issue-69017.rs:13:5: 13:15 (#0)];
        return;
    }
}

fn gen::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-69017.rs:13:5: 13:15]>, _2: usize) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &usize;
    let _10: usize;
    let mut _11: ();
    let mut _12: &[&str; 2];
    let mut _13: ();
    let mut _14: u32;
    let mut _15: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15];
    let mut _16: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15];
    let mut _17: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15];
    let mut _18: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15];
    let mut _19: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15];
    let mut _20: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15];

    bb0: {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15]);
        _14 = discriminant((*_15));
        switchInt(move _14) -> [0: bb1, 1: bb8, 2: bb7, 3: bb6, otherwise: bb9];
    }

    bb1: {
        _12 = const _;
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15]);
        (((*_16) as variant#3).0: &[&str]) = _12 as &[&str] (Pointer(Unsize));
        _11 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _11);
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15]);
        discriminant((*_17)) = 3;
        return;
    }

    bb2: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15]);
        _4 = Arguments::<'_>::new_v1(move (((*_18) as variant#3).0: &[&str]), move _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind: bb5];
    }

    bb4: {
        _13 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _13);
        _19 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15]);
        discriminant((*_19)) = 1;
        return;
    }

    bb5 (cleanup): {
        _20 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69017.rs:13:5: 13:15]);
        discriminant((*_20)) = 2;
        resume;
    }

    bb6: {
        _10 = move _2;
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_9) -> [return: bb2, unwind: bb5];
    }

    bb7: {
        assert(const false, "generator resumed after panicking") -> [success: bb7, unwind continue];
    }

    bb8: {
        assert(const false, "generator resumed after completion") -> [success: bb8, unwind continue];
    }

    bb9: {
        unreachable;
    }
}

promoted[0] in gen::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "-> ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}
