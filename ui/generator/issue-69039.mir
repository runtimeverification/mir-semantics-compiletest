// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn mkstr(_1: String, _2: String) -> String {
    debug my_name => _1;                 // in scope 0 at ui/generator/issue-69039.rs:7:10: 7:17
    debug my_mood => _2;                 // in scope 0 at ui/generator/issue-69039.rs:7:27: 7:34
    let mut _0: std::string::String;     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _4: &[&str];                 // in scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
    let mut _5: &[&str; 2];              // in scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
    let _6: &[&str; 2];                  // in scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _10: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
    let mut _12: &&str;                  // in scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
    let _13: &&str;                      // in scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
    let _14: &str;                       // in scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
    let mut _15: &str;                   // in scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
    let _16: &str;                       // in scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
    let mut _17: &std::string::String;   // in scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
    let mut _19: &&str;                  // in scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
    let _20: &&str;                      // in scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
    let _21: &str;                       // in scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
    let mut _22: &str;                   // in scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
    let _23: &str;                       // in scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
    let mut _24: &std::string::String;   // in scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
    let mut _25: &[&str; 2];             // in scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
    scope 1 {
        debug res => _0;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }

    bb0: {
        _25 = const _;                   // scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:8:13: 8:23
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(mkstr, [], Some(promoted[0])) }
        _6 = _25;                        // scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
        _5 = _6;                         // scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
        _17 = &_1;                       // scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
        _16 = <String as Deref>::deref(move _17) -> [return: bb1, unwind: bb11]; // scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:8:25: 8:39
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _15 = _16;                       // scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
        _14 = core::str::<impl str>::trim(move _15) -> [return: bb2, unwind: bb11]; // scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:8:33: 8:37
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a str {core::str::<impl str>::trim}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = &_14;                      // scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
        _12 = _13;                       // scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _12) -> [return: bb3, unwind: bb11]; // scope 0 at ui/generator/issue-69039.rs:8:25: 8:39
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:8:25: 8:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb3: {
        _24 = &_2;                       // scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
        _23 = <String as Deref>::deref(move _24) -> [return: bb4, unwind: bb11]; // scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:8:41: 8:55
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = _23;                       // scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
        _21 = core::str::<impl str>::trim(move _22) -> [return: bb5, unwind: bb11]; // scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:8:49: 8:53
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> &'a str {core::str::<impl str>::trim}, val: Value(<ZST>) }
    }

    bb5: {
        _20 = &_21;                      // scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
        _19 = _20;                       // scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _19) -> [return: bb6, unwind: bb11]; // scope 0 at ui/generator/issue-69039.rs:8:41: 8:55
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:8:41: 8:55
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = [move _11, move _18];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> [return: bb7, unwind: bb11]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = format(move _3) -> [return: bb8, unwind: bb11]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_2) -> [return: bb9, unwind: bb12]; // scope 0 at ui/generator/issue-69039.rs:9:1: 9:2
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/generator/issue-69039.rs:9:1: 9:2
    }

    bb10: {
        return;                          // scope 0 at ui/generator/issue-69039.rs:9:2: 9:2
    }

    bb11 (cleanup): {
        drop(_2) -> bb12;                // scope 0 at ui/generator/issue-69039.rs:9:1: 9:2
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/generator/issue-69039.rs:9:1: 9:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/generator/issue-69039.rs:7:1: 9:2
    }
}

promoted[0] in mkstr: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
    let mut _1: [&str; 2];               // in scope 0 at ui/generator/issue-69039.rs:8:13: 8:23

    bb0: {
        _1 = [const "", const " is "];   // scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:8:13: 8:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:8:13: 8:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
        return;                          // scope 0 at ui/generator/issue-69039.rs:8:13: 8:23
    }
}

fn my_scenario() -> impl Generator<String, Yield = &'static str, Return = String> {
    let mut _0: impl std::ops::Generator<std::string::String, Yield = &'static str, Return = std::string::String>; // return place in scope 0 at ui/generator/issue-69039.rs:11:21: 11:82

    bb0: {
        _0 = [generator@ui/generator/issue-69039.rs:12:5: 12:19 (#0)]; // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
                                         // generator
                                         // + def_id: DefId(0:8 ~ issue_69039[68be]::my_scenario::{closure#0})
                                         // + substs: [
                                         //     std::string::String,
                                         //     &str,
                                         //     std::string::String,
                                         //     for<'a> {std::string::String, &'a str},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        return;                          // scope 0 at ui/generator/issue-69039.rs:17:2: 17:2
    }
}

fn my_scenario::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]>, _2: String) -> GeneratorState<&str, String> {
    debug _arg => (((*(_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19])) as variant#3).0: std::string::String); // in scope 0 at ui/generator/issue-69039.rs:12:6: 12:10
    let mut _0: std::ops::GeneratorState<&str, std::string::String>; // return place in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _4: &str;                    // in scope 0 at ui/generator/issue-69039.rs:14:29: 14:51
    let _5: &str;                        // in scope 0 at ui/generator/issue-69039.rs:14:29: 14:51
    let mut _6: std::string::String;     // in scope 0 at ui/generator/issue-69039.rs:15:15: 15:22
    let mut _7: std::string::String;     // in scope 0 at ui/generator/issue-69039.rs:15:24: 15:31
    let mut _8: std::string::String;     // in scope 0 at ui/generator/issue-69039.rs:12:20: 12:20
    let mut _9: u32;                     // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _10: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _11: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _12: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _13: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _14: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _15: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _16: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _17: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _18: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    let mut _19: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]; // in scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    scope 1 {
        debug my_name => (((*(_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19])) as variant#4).0: std::string::String); // in scope 1 at ui/generator/issue-69039.rs:13:13: 13:20
        let _3: std::string::String;     // in scope 1 at ui/generator/issue-69039.rs:14:13: 14:20
        scope 2 {
            debug my_mood => _3;         // in scope 2 at ui/generator/issue-69039.rs:14:13: 14:20
        }
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
        _9 = discriminant((*_10));       // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
        switchInt(move _9) -> [0: bb1, 1: bb9, 2: bb8, 3: bb6, 4: bb7, otherwise: bb10]; // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    }

    bb1: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
        (((*_11) as variant#3).0: std::string::String) = move _2; // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
        _0 = GeneratorState::<&str, String>::Yielded(const "What is your name?"); // scope 0 at ui/generator/issue-69039.rs:13:23: 13:49
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:13:29: 13:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 0 at ui/generator/issue-69039.rs:13:23: 13:49
        discriminant((*_12)) = 3;        // scope 0 at ui/generator/issue-69039.rs:13:23: 13:49
        return;                          // scope 0 at ui/generator/issue-69039.rs:13:23: 13:49
    }

    bb2: {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 0 at ui/generator/issue-69039.rs:16:5: 16:6
        drop((((*_15) as variant#3).0: std::string::String)) -> [return: bb3, unwind: bb5]; // scope 0 at ui/generator/issue-69039.rs:16:5: 16:6
    }

    bb3: {
        _0 = GeneratorState::<&str, String>::Complete(move _8); // scope 0 at ui/generator/issue-69039.rs:16:6: 16:6
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 0 at ui/generator/issue-69039.rs:16:6: 16:6
        discriminant((*_16)) = 1;        // scope 0 at ui/generator/issue-69039.rs:16:6: 16:6
        return;                          // scope 0 at ui/generator/issue-69039.rs:16:6: 16:6
    }

    bb4 (cleanup): {
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 0 at ui/generator/issue-69039.rs:16:5: 16:6
        drop((((*_17) as variant#3).0: std::string::String)) -> bb5; // scope 0 at ui/generator/issue-69039.rs:16:5: 16:6
    }

    bb5 (cleanup): {
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
        discriminant((*_18)) = 2;        // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
        resume;                          // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    }

    bb6: {
        _19 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
        (((*_19) as variant#4).0: std::string::String) = move _2; // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
        _5 = const "How are you feeling?"; // scope 1 at ui/generator/issue-69039.rs:14:29: 14:51
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:14:29: 14:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 1 at ui/generator/issue-69039.rs:14:29: 14:51
        _0 = GeneratorState::<&str, String>::Yielded(move _4); // scope 1 at ui/generator/issue-69039.rs:14:23: 14:51
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 1 at ui/generator/issue-69039.rs:14:23: 14:51
        discriminant((*_13)) = 4;        // scope 1 at ui/generator/issue-69039.rs:14:23: 14:51
        return;                          // scope 1 at ui/generator/issue-69039.rs:14:23: 14:51
    }

    bb7: {
        _3 = move _2;                    // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/issue-69039.rs:12:5: 12:19]); // scope 2 at ui/generator/issue-69039.rs:15:15: 15:22
        _6 = move (((*_14) as variant#4).0: std::string::String); // scope 2 at ui/generator/issue-69039.rs:15:15: 15:22
        _7 = move _3;                    // scope 2 at ui/generator/issue-69039.rs:15:24: 15:31
        _8 = mkstr(move _6, move _7) -> [return: bb2, unwind: bb4]; // scope 2 at ui/generator/issue-69039.rs:15:9: 15:32
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:15:9: 15:14
                                         // + literal: Const { ty: fn(String, String) -> String {mkstr}, val: Value(<ZST>) }
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8; // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9; // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    }

    bb10: {
        unreachable;                     // scope 0 at ui/generator/issue-69039.rs:12:5: 16:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/issue-69039.rs:19:11: 19:11
    let mut _1: std::pin::Pin<std::boxed::Box<impl std::ops::Generator<std::string::String, Yield = &'static str, Return = std::string::String>>>; // in scope 0 at ui/generator/issue-69039.rs:20:9: 20:23
    let mut _2: impl std::ops::Generator<std::string::String, Yield = &'static str, Return = std::string::String>; // in scope 0 at ui/generator/issue-69039.rs:20:35: 20:48
    let mut _3: (&std::ops::GeneratorState<&str, std::string::String>, &std::ops::GeneratorState<&str, std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at ui/generator/issue-69039.rs:23:9: 23:55
    let mut _6: std::pin::Pin<&mut impl std::ops::Generator<std::string::String, Yield = &'static str, Return = std::string::String>>; // in scope 0 at ui/generator/issue-69039.rs:23:9: 23:28
    let mut _7: &mut std::pin::Pin<std::boxed::Box<impl std::ops::Generator<std::string::String, Yield = &'static str, Return = std::string::String>>>; // in scope 0 at ui/generator/issue-69039.rs:23:9: 23:28
    let mut _8: std::string::String;     // in scope 0 at ui/generator/issue-69039.rs:23:36: 23:54
    let mut _9: &str;                    // in scope 0 at ui/generator/issue-69039.rs:23:36: 23:54
    let _10: &str;                       // in scope 0 at ui/generator/issue-69039.rs:23:36: 23:42
    let mut _11: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: (&std::ops::GeneratorState<&str, std::string::String>, &std::ops::GeneratorState<&str, std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _27: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _28: std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at ui/generator/issue-69039.rs:27:9: 27:60
    let mut _29: std::pin::Pin<&mut impl std::ops::Generator<std::string::String, Yield = &'static str, Return = std::string::String>>; // in scope 0 at ui/generator/issue-69039.rs:27:9: 27:28
    let mut _30: &mut std::pin::Pin<std::boxed::Box<impl std::ops::Generator<std::string::String, Yield = &'static str, Return = std::string::String>>>; // in scope 0 at ui/generator/issue-69039.rs:27:9: 27:28
    let mut _31: std::string::String;    // in scope 0 at ui/generator/issue-69039.rs:27:36: 27:59
    let mut _32: &str;                   // in scope 0 at ui/generator/issue-69039.rs:27:36: 27:59
    let _33: &str;                       // in scope 0 at ui/generator/issue-69039.rs:27:36: 27:47
    let mut _34: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: (&std::ops::GeneratorState<&str, std::string::String>, &std::ops::GeneratorState<&str, std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _50: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _51: std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at ui/generator/issue-69039.rs:31:9: 31:65
    let mut _52: std::pin::Pin<&mut impl std::ops::Generator<std::string::String, Yield = &'static str, Return = std::string::String>>; // in scope 0 at ui/generator/issue-69039.rs:31:9: 31:28
    let mut _53: &mut std::pin::Pin<std::boxed::Box<impl std::ops::Generator<std::string::String, Yield = &'static str, Return = std::string::String>>>; // in scope 0 at ui/generator/issue-69039.rs:31:9: 31:28
    let mut _54: std::string::String;    // in scope 0 at ui/generator/issue-69039.rs:31:36: 31:64
    let mut _55: &str;                   // in scope 0 at ui/generator/issue-69039.rs:31:36: 31:64
    let _56: &str;                       // in scope 0 at ui/generator/issue-69039.rs:31:36: 31:52
    let mut _57: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _58: std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at ui/generator/issue-69039.rs:32:9: 32:76
    let mut _59: std::string::String;    // in scope 0 at ui/generator/issue-69039.rs:32:34: 32:75
    let mut _60: &str;                   // in scope 0 at ui/generator/issue-69039.rs:32:34: 32:75
    let _61: &str;                       // in scope 0 at ui/generator/issue-69039.rs:32:34: 32:63
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _66: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _67: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _69: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _70: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _71: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _72: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _73: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _74: &std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug my_session => _1;          // in scope 1 at ui/generator/issue-69039.rs:20:9: 20:23
        let _12: &std::ops::GeneratorState<&str, std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &std::ops::GeneratorState<&str, std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: &std::ops::GeneratorState<&str, std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _36: &std::ops::GeneratorState<&str, std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _62: &std::ops::GeneratorState<&str, std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _63: &std::ops::GeneratorState<&str, std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _76: &std::ops::GeneratorState<&str, std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _77: &std::ops::GeneratorState<&str, std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _12;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _35;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _36;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _41: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _41;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug left_val => _62;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _63;      // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _68: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 7 {
                debug kind => _68;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = my_scenario() -> bb1;       // scope 0 at ui/generator/issue-69039.rs:20:35: 20:48
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:20:35: 20:46
                                         // + literal: Const { ty: fn() -> impl Generator<String, Yield = &'static str, Return = String> {my_scenario}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Box::<impl Generator<String, Yield = &'static str, Return = String>>::pin(move _2) -> bb2; // scope 0 at ui/generator/issue-69039.rs:20:26: 20:49
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:20:26: 20:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(impl Generator<String, Yield = &'static str, Return = String>) -> Pin<Box<impl Generator<String, Yield = &'static str, Return = String>>> {Box::<impl Generator<String, Yield = &'static str, Return = String>>::pin}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = &mut _1;                    // scope 1 at ui/generator/issue-69039.rs:23:9: 23:28
        _6 = Pin::<Box<impl Generator<String, Yield = &'static str, Return = String>>>::as_mut(move _7) -> [return: bb3, unwind: bb31]; // scope 1 at ui/generator/issue-69039.rs:23:9: 23:28
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:23:20: 23:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Pin<Box<impl Generator<String, Yield = &'static str, Return = String>>>) -> Pin<&'a mut <Box<impl Generator<String, Yield = &'static str, Return = String>> as Deref>::Target> {Pin::<Box<impl Generator<String, Yield = &'static str, Return = String>>>::as_mut}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = const "_arg";              // scope 1 at ui/generator/issue-69039.rs:23:36: 23:42
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:23:36: 23:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 1 at ui/generator/issue-69039.rs:23:36: 23:54
        _8 = <str as ToString>::to_string(move _9) -> [return: bb4, unwind: bb31]; // scope 1 at ui/generator/issue-69039.rs:23:36: 23:54
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:23:43: 23:52
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = <impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::resume(move _6, move _8) -> [return: bb5, unwind: bb31]; // scope 1 at ui/generator/issue-69039.rs:23:9: 23:55
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:23:29: 23:35
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut impl Generator<String, Yield = &'static str, Return = String>>, String) -> GeneratorState<<impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::Yield, <impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::Return> {<impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::resume}, val: Value(<ZST>) }
    }

    bb5: {
        _4 = &_5;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _77 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &GeneratorState<&str, String>, val: Unevaluated(main, [], Some(promoted[1])) }
        _11 = _77;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _11);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_3.0: &std::ops::GeneratorState<&str, std::string::String>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_3.1: &std::ops::GeneratorState<&str, std::string::String>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <GeneratorState<&str, String> as PartialEq>::eq(move _16, move _17) -> [return: bb6, unwind: bb30]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a GeneratorState<&str, String>, &'b GeneratorState<&str, String>) -> bool {<GeneratorState<&str, String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb8, otherwise: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<GeneratorState<&str, String>, GeneratorState<&str, String>>(move _20, move _21, move _23, move _25) -> bb30; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a GeneratorState<&str, String>, &'b GeneratorState<&str, String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<GeneratorState<&str, String>, GeneratorState<&str, String>>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb31]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        _30 = &mut _1;                   // scope 1 at ui/generator/issue-69039.rs:27:9: 27:28
        _29 = Pin::<Box<impl Generator<String, Yield = &'static str, Return = String>>>::as_mut(move _30) -> [return: bb10, unwind: bb31]; // scope 1 at ui/generator/issue-69039.rs:27:9: 27:28
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:27:20: 27:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Pin<Box<impl Generator<String, Yield = &'static str, Return = String>>>) -> Pin<&'a mut <Box<impl Generator<String, Yield = &'static str, Return = String>> as Deref>::Target> {Pin::<Box<impl Generator<String, Yield = &'static str, Return = String>>>::as_mut}, val: Value(<ZST>) }
    }

    bb10: {
        _33 = const "Your Name";         // scope 1 at ui/generator/issue-69039.rs:27:36: 27:47
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:27:36: 27:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _32 = _33;                       // scope 1 at ui/generator/issue-69039.rs:27:36: 27:59
        _31 = <str as ToString>::to_string(move _32) -> [return: bb11, unwind: bb31]; // scope 1 at ui/generator/issue-69039.rs:27:36: 27:59
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:27:48: 27:57
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        _28 = <impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::resume(move _29, move _31) -> [return: bb12, unwind: bb31]; // scope 1 at ui/generator/issue-69039.rs:27:9: 27:60
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:27:29: 27:35
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut impl Generator<String, Yield = &'static str, Return = String>>, String) -> GeneratorState<<impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::Yield, <impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::Return> {<impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::resume}, val: Value(<ZST>) }
    }

    bb12: {
        _27 = &_28;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _76 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &GeneratorState<&str, String>, val: Unevaluated(main, [], Some(promoted[0])) }
        _34 = _76;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = (move _27, move _34);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_26.0: &std::ops::GeneratorState<&str, std::string::String>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_26.1: &std::ops::GeneratorState<&str, std::string::String>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = <GeneratorState<&str, String> as PartialEq>::eq(move _39, move _40) -> [return: bb13, unwind: bb29]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a GeneratorState<&str, String>, &'b GeneratorState<&str, String>) -> bool {<GeneratorState<&str, String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _37 = Not(move _38);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb15, otherwise: bb14]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _41 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<GeneratorState<&str, String>, GeneratorState<&str, String>>(move _43, move _44, move _46, move _48) -> bb29; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a GeneratorState<&str, String>, &'b GeneratorState<&str, String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<GeneratorState<&str, String>, GeneratorState<&str, String>>}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_28) -> [return: bb16, unwind: bb31]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb16: {
        _53 = &mut _1;                   // scope 1 at ui/generator/issue-69039.rs:31:9: 31:28
        _52 = Pin::<Box<impl Generator<String, Yield = &'static str, Return = String>>>::as_mut(move _53) -> [return: bb17, unwind: bb31]; // scope 1 at ui/generator/issue-69039.rs:31:9: 31:28
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:31:20: 31:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut Pin<Box<impl Generator<String, Yield = &'static str, Return = String>>>) -> Pin<&'a mut <Box<impl Generator<String, Yield = &'static str, Return = String>> as Deref>::Target> {Pin::<Box<impl Generator<String, Yield = &'static str, Return = String>>>::as_mut}, val: Value(<ZST>) }
    }

    bb17: {
        _56 = const "Sensory Organs";    // scope 1 at ui/generator/issue-69039.rs:31:36: 31:52
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:31:36: 31:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _55 = _56;                       // scope 1 at ui/generator/issue-69039.rs:31:36: 31:64
        _54 = <str as ToString>::to_string(move _55) -> [return: bb18, unwind: bb31]; // scope 1 at ui/generator/issue-69039.rs:31:36: 31:64
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:31:53: 31:62
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb18: {
        _51 = <impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::resume(move _52, move _54) -> [return: bb19, unwind: bb31]; // scope 1 at ui/generator/issue-69039.rs:31:9: 31:65
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:31:29: 31:35
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut impl Generator<String, Yield = &'static str, Return = String>>, String) -> GeneratorState<<impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::Yield, <impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::Return> {<impl Generator<String, Yield = &'static str, Return = String> as Generator<String>>::resume}, val: Value(<ZST>) }
    }

    bb19: {
        _50 = &_51;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _61 = const "Your Name is Sensory Organs"; // scope 1 at ui/generator/issue-69039.rs:32:34: 32:63
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:32:34: 32:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _60 = _61;                       // scope 1 at ui/generator/issue-69039.rs:32:34: 32:75
        _59 = <str as ToString>::to_string(move _60) -> [return: bb20, unwind: bb28]; // scope 1 at ui/generator/issue-69039.rs:32:34: 32:75
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:32:64: 32:73
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb20: {
        _58 = GeneratorState::<&str, String>::Complete(move _59); // scope 1 at ui/generator/issue-69039.rs:32:9: 32:76
        _57 = &_58;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _49 = (move _50, move _57);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _62 = (_49.0: &std::ops::GeneratorState<&str, std::string::String>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _63 = (_49.1: &std::ops::GeneratorState<&str, std::string::String>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _66 = _62;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _67 = _63;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _65 = <GeneratorState<&str, String> as PartialEq>::eq(move _66, move _67) -> [return: bb21, unwind: bb27]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a GeneratorState<&str, String>, &'b GeneratorState<&str, String>) -> bool {<GeneratorState<&str, String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb21: {
        _64 = Not(move _65);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _64) -> [0: bb23, otherwise: bb22]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _68 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = _62;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _72;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _63;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = _74;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _69 = core::panicking::assert_failed::<GeneratorState<&str, String>, GeneratorState<&str, String>>(move _70, move _71, move _73, move _75) -> bb27; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a GeneratorState<&str, String>, &'b GeneratorState<&str, String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<GeneratorState<&str, String>, GeneratorState<&str, String>>}, val: Value(<ZST>) }
    }

    bb23: {
        drop(_58) -> [return: bb24, unwind: bb28]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb24: {
        drop(_51) -> [return: bb25, unwind: bb31]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb25: {
        drop(_1) -> bb26;                // scope 0 at ui/generator/issue-69039.rs:34:1: 34:2
    }

    bb26: {
        return;                          // scope 0 at ui/generator/issue-69039.rs:34:2: 34:2
    }

    bb27 (cleanup): {
        drop(_58) -> bb28;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb28 (cleanup): {
        drop(_51) -> bb31;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb29 (cleanup): {
        drop(_28) -> bb31;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30 (cleanup): {
        drop(_5) -> bb31;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb31 (cleanup): {
        drop(_1) -> bb32;                // scope 0 at ui/generator/issue-69039.rs:34:1: 34:2
    }

    bb32 (cleanup): {
        resume;                          // scope 0 at ui/generator/issue-69039.rs:19:1: 34:2
    }
}

promoted[0] in main: &GeneratorState<&str, String> = {
    let mut _0: &std::ops::GeneratorState<&str, std::string::String>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at ui/generator/issue-69039.rs:28:9: 28:56

    bb0: {
        _1 = GeneratorState::<&str, String>::Yielded(const "How are you feeling?"); // scope 0 at ui/generator/issue-69039.rs:28:9: 28:56
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:28:33: 28:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &GeneratorState<&str, String> = {
    let mut _0: &std::ops::GeneratorState<&str, std::string::String>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::ops::GeneratorState<&str, std::string::String>; // in scope 0 at ui/generator/issue-69039.rs:24:9: 24:54

    bb0: {
        _1 = GeneratorState::<&str, String>::Yielded(const "What is your name?"); // scope 0 at ui/generator/issue-69039.rs:24:9: 24:54
                                         // mir::Constant
                                         // + span: ui/generator/issue-69039.rs:24:33: 24:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
