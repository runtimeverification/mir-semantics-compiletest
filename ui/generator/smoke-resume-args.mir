// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn drain(_1: &mut G, _2: Vec<(R, GeneratorState<Y, <G as Generator<R>>::Return>)>) -> () {
    debug gen => _1;                     // in scope 0 at ui/generator/smoke-resume-args.rs:18:5: 18:8
    debug inout => _2;                   // in scope 0 at ui/generator/smoke-resume-args.rs:19:5: 19:10
    let mut _0: ();                      // return place in scope 0 at ui/generator/smoke-resume-args.rs:20:3: 20:3
    let mut _3: std::pin::Pin<&mut G>;   // in scope 0 at ui/generator/smoke-resume-args.rs:24:9: 24:16
    let mut _4: &mut G;                  // in scope 0 at ui/generator/smoke-resume-args.rs:24:28: 24:31
    let mut _5: std::vec::IntoIter<(R, std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>)>; // in scope 0 at ui/generator/smoke-resume-args.rs:26:25: 26:30
    let mut _6: std::vec::Vec<(R, std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>)>; // in scope 0 at ui/generator/smoke-resume-args.rs:26:25: 26:30
    let mut _8: std::option::Option<(R, std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>)>; // in scope 0 at ui/generator/smoke-resume-args.rs:26:25: 26:30
    let mut _9: &mut std::vec::IntoIter<(R, std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>)>; // in scope 0 at ui/generator/smoke-resume-args.rs:26:25: 26:30
    let mut _10: &mut std::vec::IntoIter<(R, std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>)>; // in scope 0 at ui/generator/smoke-resume-args.rs:26:25: 26:30
    let mut _11: isize;                  // in scope 0 at ui/generator/smoke-resume-args.rs:26:5: 28:6
    let mut _14: (&std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>, &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _16: std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 0 at ui/generator/smoke-resume-args.rs:27:20: 27:46
    let mut _17: std::pin::Pin<&mut G>;  // in scope 0 at ui/generator/smoke-resume-args.rs:27:20: 27:32
    let mut _18: &mut std::pin::Pin<&mut G>; // in scope 0 at ui/generator/smoke-resume-args.rs:27:20: 27:32
    let mut _19: R;                      // in scope 0 at ui/generator/smoke-resume-args.rs:27:40: 27:45
    let mut _20: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _25: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _26: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _28: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _29: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _30: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _31: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _32: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _33: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _35: bool;                   // in scope 0 at ui/generator/smoke-resume-args.rs:28:5: 28:6
    let mut _36: bool;                   // in scope 0 at ui/generator/smoke-resume-args.rs:29:1: 29:2
    scope 1 {
        debug gen => _3;                 // in scope 1 at ui/generator/smoke-resume-args.rs:24:9: 24:16
        let mut _7: std::vec::IntoIter<(R, std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>)>; // in scope 1 at ui/generator/smoke-resume-args.rs:26:25: 26:30
        scope 2 {
            debug iter => _7;            // in scope 2 at ui/generator/smoke-resume-args.rs:26:25: 26:30
            let _12: R;                  // in scope 2 at ui/generator/smoke-resume-args.rs:26:10: 26:15
            let _13: std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 2 at ui/generator/smoke-resume-args.rs:26:17: 26:20
            scope 3 {
                debug input => _12;      // in scope 3 at ui/generator/smoke-resume-args.rs:26:10: 26:15
                debug out => _13;        // in scope 3 at ui/generator/smoke-resume-args.rs:26:17: 26:20
                let _21: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _22: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _21; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _22; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _27: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _27; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _36 = const false;               // scope 0 at ui/generator/smoke-resume-args.rs:24:9: 24:16
        _35 = const false;               // scope 0 at ui/generator/smoke-resume-args.rs:24:9: 24:16
        _36 = const true;                // scope 0 at ui/generator/smoke-resume-args.rs:24:9: 24:16
        _4 = move _1;                    // scope 0 at ui/generator/smoke-resume-args.rs:24:28: 24:31
        _3 = Pin::<&mut G>::new(move _4) -> [return: bb1, unwind: bb23]; // scope 0 at ui/generator/smoke-resume-args.rs:24:19: 24:32
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:24:19: 24:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut G) -> Pin<&mut G> {Pin::<&mut G>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _36 = const false;               // scope 1 at ui/generator/smoke-resume-args.rs:26:25: 26:30
        _6 = move _2;                    // scope 1 at ui/generator/smoke-resume-args.rs:26:25: 26:30
        _5 = <Vec<(R, GeneratorState<Y, <G as Generator<R>>::Return>)> as IntoIterator>::into_iter(move _6) -> [return: bb2, unwind: bb23]; // scope 1 at ui/generator/smoke-resume-args.rs:26:25: 26:30
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:26:25: 26:30
                                         // + literal: Const { ty: fn(Vec<(R, GeneratorState<Y, <G as Generator<R>>::Return>)>) -> <Vec<(R, GeneratorState<Y, <G as Generator<R>>::Return>)> as IntoIterator>::IntoIter {<Vec<(R, GeneratorState<Y, <G as Generator<R>>::Return>)> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = move _5;                    // scope 1 at ui/generator/smoke-resume-args.rs:26:25: 26:30
        goto -> bb3;                     // scope 2 at ui/generator/smoke-resume-args.rs:26:5: 28:6
    }

    bb3: {
        _10 = &mut _7;                   // scope 2 at ui/generator/smoke-resume-args.rs:26:25: 26:30
        _9 = &mut (*_10);                // scope 2 at ui/generator/smoke-resume-args.rs:26:25: 26:30
        _8 = <std::vec::IntoIter<(R, GeneratorState<Y, <G as Generator<R>>::Return>)> as Iterator>::next(move _9) -> [return: bb4, unwind: bb18]; // scope 2 at ui/generator/smoke-resume-args.rs:26:25: 26:30
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:26:25: 26:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::vec::IntoIter<(R, GeneratorState<Y, <G as Generator<R>>::Return>)>) -> Option<<std::vec::IntoIter<(R, GeneratorState<Y, <G as Generator<R>>::Return>)> as Iterator>::Item> {<std::vec::IntoIter<(R, GeneratorState<Y, <G as Generator<R>>::Return>)> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = discriminant(_8);          // scope 2 at ui/generator/smoke-resume-args.rs:26:25: 26:30
        switchInt(move _11) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/generator/smoke-resume-args.rs:26:25: 26:30
    }

    bb5: {
        _35 = const true;                // scope 2 at ui/generator/smoke-resume-args.rs:26:10: 26:15
        _12 = move (((_8 as Some).0: (R, std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>)).0: R); // scope 2 at ui/generator/smoke-resume-args.rs:26:10: 26:15
        _13 = move (((_8 as Some).0: (R, std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>)).1: std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>); // scope 2 at ui/generator/smoke-resume-args.rs:26:17: 26:20
        _18 = &mut _3;                   // scope 3 at ui/generator/smoke-resume-args.rs:27:20: 27:32
        _17 = Pin::<&mut G>::as_mut(move _18) -> [return: bb8, unwind: bb17]; // scope 3 at ui/generator/smoke-resume-args.rs:27:20: 27:32
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:27:24: 27:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut Pin<&mut G>) -> Pin<&'a mut <&mut G as Deref>::Target> {Pin::<&mut G>::as_mut}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 2 at ui/generator/smoke-resume-args.rs:26:25: 26:30
    }

    bb7: {
        drop(_7) -> [return: bb15, unwind: bb23]; // scope 1 at ui/generator/smoke-resume-args.rs:28:5: 28:6
    }

    bb8: {
        _35 = const false;               // scope 3 at ui/generator/smoke-resume-args.rs:27:40: 27:45
        _19 = move _12;                  // scope 3 at ui/generator/smoke-resume-args.rs:27:40: 27:45
        _16 = <G as Generator<R>>::resume(move _17, move _19) -> [return: bb9, unwind: bb17]; // scope 3 at ui/generator/smoke-resume-args.rs:27:20: 27:46
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:27:33: 27:39
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut G>, R) -> GeneratorState<<G as Generator<R>>::Yield, <G as Generator<R>>::Return> {<G as Generator<R>>::resume}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = &_16;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = &_13;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _20);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _21 = (_14.0: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _22 = (_14.1: &std::ops::GeneratorState<Y, <G as std::ops::Generator<R>>::Return>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _25 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _26 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _24 = <GeneratorState<Y, <G as Generator<R>>::Return> as PartialEq>::eq(move _25, move _26) -> [return: bb10, unwind: bb16]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a GeneratorState<Y, <G as Generator<R>>::Return>, &'b GeneratorState<Y, <G as Generator<R>>::Return>) -> bool {<GeneratorState<Y, <G as Generator<R>>::Return> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _23 = Not(move _24);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _23) -> [0: bb12, otherwise: bb11]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _27 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = _21;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = _33;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _28 = core::panicking::assert_failed::<GeneratorState<Y, <G as Generator<R>>::Return>, GeneratorState<Y, <G as Generator<R>>::Return>>(move _29, move _30, move _32, move _34) -> bb16; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a GeneratorState<Y, <G as Generator<R>>::Return>, &'b GeneratorState<Y, <G as Generator<R>>::Return>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<GeneratorState<Y, <G as Generator<R>>::Return>, GeneratorState<Y, <G as Generator<R>>::Return>>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_16) -> [return: bb13, unwind: bb17]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13: {
        drop(_13) -> [return: bb14, unwind: bb21]; // scope 2 at ui/generator/smoke-resume-args.rs:28:5: 28:6
    }

    bb14: {
        _35 = const false;               // scope 2 at ui/generator/smoke-resume-args.rs:28:5: 28:6
        goto -> bb3;                     // scope 2 at ui/generator/smoke-resume-args.rs:26:5: 28:6
    }

    bb15: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:29:2: 29:2
    }

    bb16 (cleanup): {
        drop(_16) -> bb17;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17 (cleanup): {
        drop(_13) -> bb21;               // scope 2 at ui/generator/smoke-resume-args.rs:28:5: 28:6
    }

    bb18 (cleanup): {
        drop(_7) -> bb23;                // scope 1 at ui/generator/smoke-resume-args.rs:28:5: 28:6
    }

    bb19 (cleanup): {
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:17:1: 29:2
    }

    bb20 (cleanup): {
        drop(_12) -> bb18;               // scope 2 at ui/generator/smoke-resume-args.rs:28:5: 28:6
    }

    bb21 (cleanup): {
        switchInt(_35) -> [0: bb18, otherwise: bb20]; // scope 2 at ui/generator/smoke-resume-args.rs:28:5: 28:6
    }

    bb22 (cleanup): {
        drop(_2) -> bb19;                // scope 0 at ui/generator/smoke-resume-args.rs:29:1: 29:2
    }

    bb23 (cleanup): {
        switchInt(_36) -> [0: bb19, otherwise: bb22]; // scope 0 at ui/generator/smoke-resume-args.rs:29:1: 29:2
    }
}

static DROPS: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/generator/smoke-resume-args.rs:31:15: 31:26

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/generator/smoke-resume-args.rs:31:29: 31:48
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/generator/smoke-resume-args.rs:31:29: 31:48
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:31:29: 31:45
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:31:1: 31:49
    }
}

fn <impl at ui/generator/smoke-resume-args.rs:33:10: 33:15>::fmt(_1: &DropMe, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15
    debug f => _2;                       // in scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15
    let mut _4: &str;                    // in scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15
    let _5: &str;                        // in scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15
        _5 = const "DropMe";             // scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:33:10: 33:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/generator/smoke-resume-args.rs:33:10: 33:15
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:33:10: 33:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:33:15: 33:15
    }
}

fn <impl at ui/generator/smoke-resume-args.rs:33:17: 33:26>::eq(_1: &DropMe, _2: &DropMe) -> bool {
    debug self => _1;                    // in scope 0 at ui/generator/smoke-resume-args.rs:33:17: 33:26
    debug other => _2;                   // in scope 0 at ui/generator/smoke-resume-args.rs:33:17: 33:26
    let mut _0: bool;                    // return place in scope 0 at ui/generator/smoke-resume-args.rs:33:17: 33:26

    bb0: {
        _0 = const true;                 // scope 0 at ui/generator/smoke-resume-args.rs:33:17: 33:26
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:33:26: 33:26
    }
}

fn <impl at ui/generator/smoke-resume-args.rs:36:1: 36:21>::drop(_1: &mut DropMe) -> () {
    debug self => _1;                    // in scope 0 at ui/generator/smoke-resume-args.rs:37:13: 37:22
    let mut _0: ();                      // return place in scope 0 at ui/generator/smoke-resume-args.rs:37:24: 37:24
    let _2: usize;                       // in scope 0 at ui/generator/smoke-resume-args.rs:38:9: 38:45
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/smoke-resume-args.rs:38:9: 38:45
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/smoke-resume-args.rs:38:9: 38:14
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/generator/smoke-resume-args.rs:38:28: 38:44

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/generator/smoke-resume-args.rs:38:9: 38:14
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:38:9: 38:14
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/generator/smoke-resume-args.rs:38:9: 38:45
        _5 = const SeqCst;               // scope 0 at ui/generator/smoke-resume-args.rs:38:28: 38:44
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:38:28: 38:44
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::fetch_add(move _3, const 1_usize, move _5) -> bb1; // scope 0 at ui/generator/smoke-resume-args.rs:38:9: 38:45
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:38:15: 38:24
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:39:6: 39:6
    }
}

alloc1 (static: DROPS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn expect_drops(_1: usize, _2: impl FnOnce() -> T) -> T {
    debug expected_drops => _1;          // in scope 0 at ui/generator/smoke-resume-args.rs:42:20: 42:34
    debug f => _2;                       // in scope 0 at ui/generator/smoke-resume-args.rs:42:43: 42:44
    let mut _0: T;                       // return place in scope 0 at ui/generator/smoke-resume-args.rs:45:9: 45:12
    let _3: ();                          // in scope 0 at ui/generator/smoke-resume-args.rs:43:5: 43:37
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/smoke-resume-args.rs:43:5: 43:37
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/smoke-resume-args.rs:43:5: 43:10
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/generator/smoke-resume-args.rs:43:20: 43:36
    let mut _7: impl FnOnce() -> T;      // in scope 0 at ui/generator/smoke-resume-args.rs:45:15: 45:16
    let mut _8: ();                      // in scope 0 at ui/generator/smoke-resume-args.rs:45:15: 45:18
    let mut _10: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/smoke-resume-args.rs:47:24: 47:52
    let _11: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/smoke-resume-args.rs:47:24: 47:29
    let mut _12: std::sync::atomic::Ordering; // in scope 0 at ui/generator/smoke-resume-args.rs:47:35: 47:51
    let mut _13: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _14: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: bool;                   // in scope 0 at ui/generator/smoke-resume-args.rs:50:1: 50:2
    scope 1 {
        debug res => _0;                 // in scope 1 at ui/generator/smoke-resume-args.rs:45:9: 45:12
        let _9: usize;                   // in scope 1 at ui/generator/smoke-resume-args.rs:47:9: 47:21
        scope 2 {
            debug actual_drops => _9;    // in scope 2 at ui/generator/smoke-resume-args.rs:47:9: 47:21
            let _16: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _17: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _16;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _17;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _22;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _30 = const false;               // scope 0 at ui/generator/smoke-resume-args.rs:43:5: 43:37
        _30 = const true;                // scope 0 at ui/generator/smoke-resume-args.rs:43:5: 43:37
        _5 = const {alloc1: &AtomicUsize}; // scope 0 at ui/generator/smoke-resume-args.rs:43:5: 43:10
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:43:5: 43:10
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 0 at ui/generator/smoke-resume-args.rs:43:5: 43:37
        _6 = const SeqCst;               // scope 0 at ui/generator/smoke-resume-args.rs:43:20: 43:36
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:43:20: 43:36
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::store(move _4, const 0_usize, move _6) -> [return: bb1, unwind: bb9]; // scope 0 at ui/generator/smoke-resume-args.rs:43:5: 43:37
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:43:11: 43:16
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb1: {
        _30 = const false;               // scope 0 at ui/generator/smoke-resume-args.rs:45:15: 45:16
        _7 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:45:15: 45:16
        _0 = <impl FnOnce() -> T as FnOnce<()>>::call_once(move _7, move _8) -> [return: bb2, unwind: bb9]; // scope 0 at ui/generator/smoke-resume-args.rs:45:15: 45:18
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:45:15: 45:16
                                         // + literal: Const { ty: extern "rust-call" fn(impl FnOnce() -> T, ()) -> <impl FnOnce() -> T as FnOnce<()>>::Output {<impl FnOnce() -> T as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = const {alloc1: &AtomicUsize}; // scope 1 at ui/generator/smoke-resume-args.rs:47:24: 47:29
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:47:24: 47:29
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _10 = _11;                       // scope 1 at ui/generator/smoke-resume-args.rs:47:24: 47:52
        _12 = const SeqCst;              // scope 1 at ui/generator/smoke-resume-args.rs:47:35: 47:51
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:47:35: 47:51
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _9 = AtomicUsize::load(move _10, move _12) -> [return: bb3, unwind: bb6]; // scope 1 at ui/generator/smoke-resume-args.rs:47:24: 47:52
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:47:30: 47:34
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = &_9;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = &_1;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _13 = (move _14, move _15);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_13.0: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_13.1: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = (*_16);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = (*_17);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = Eq(move _20, move _21);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<usize, usize>(move _24, move _25, move _27, move _29) -> bb6; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:50:2: 50:2
    }

    bb6 (cleanup): {
        drop(_0) -> bb9;                 // scope 0 at ui/generator/smoke-resume-args.rs:50:1: 50:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:42:1: 50:2
    }

    bb8 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/generator/smoke-resume-args.rs:50:1: 50:2
    }

    bb9 (cleanup): {
        switchInt(_30) -> [0: bb7, otherwise: bb8]; // scope 0 at ui/generator/smoke-resume-args.rs:50:1: 50:2
    }
}

alloc1 (static: DROPS, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/smoke-resume-args.rs:52:11: 52:11
    let _1: ();                          // in scope 0 at ui/generator/smoke-resume-args.rs:53:5: 61:6
    let mut _2: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:54:9: 59:10
    let mut _3: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:54:9: 59:10
    let mut _4: [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    let mut _5: std::vec::Vec<(i32, std::ops::GeneratorState<i32, i32>)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _6: std::boxed::Box<[(i32, std::ops::GeneratorState<i32, i32>)]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[(i32, std::ops::GeneratorState<i32, i32>); 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[(i32, std::ops::GeneratorState<i32, i32>); 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: (i32, std::ops::GeneratorState<i32, i32>); // in scope 0 at ui/generator/smoke-resume-args.rs:60:14: 60:29
    let mut _13: std::ops::GeneratorState<i32, i32>; // in scope 0 at ui/generator/smoke-resume-args.rs:60:18: 60:28
    let mut _14: (i32, std::ops::GeneratorState<i32, i32>); // in scope 0 at ui/generator/smoke-resume-args.rs:60:31: 60:50
    let mut _15: std::ops::GeneratorState<i32, i32>; // in scope 0 at ui/generator/smoke-resume-args.rs:60:37: 60:49
    let mut _16: (i32, std::ops::GeneratorState<i32, i32>); // in scope 0 at ui/generator/smoke-resume-args.rs:60:52: 60:71
    let mut _17: std::ops::GeneratorState<i32, i32>; // in scope 0 at ui/generator/smoke-resume-args.rs:60:58: 60:70
    let mut _18: (i32, std::ops::GeneratorState<i32, i32>); // in scope 0 at ui/generator/smoke-resume-args.rs:60:73: 60:90
    let mut _19: std::ops::GeneratorState<i32, i32>; // in scope 0 at ui/generator/smoke-resume-args.rs:60:77: 60:89
    let _20: ();                         // in scope 0 at ui/generator/smoke-resume-args.rs:63:5: 63:81
    let mut _21: [closure@ui/generator/smoke-resume-args.rs:63:21: 63:23]; // in scope 0 at ui/generator/smoke-resume-args.rs:63:21: 63:80
    let _22: ();                         // in scope 0 at ui/generator/smoke-resume-args.rs:65:5: 70:7
    let mut _23: [closure@ui/generator/smoke-resume-args.rs:65:21: 65:23]; // in scope 0 at ui/generator/smoke-resume-args.rs:65:21: 70:6
    let _24: ();                         // in scope 0 at ui/generator/smoke-resume-args.rs:73:5: 73:89
    let mut _25: [closure@ui/generator/smoke-resume-args.rs:73:21: 73:23]; // in scope 0 at ui/generator/smoke-resume-args.rs:73:21: 73:88
    let _26: ();                         // in scope 0 at ui/generator/smoke-resume-args.rs:75:5: 82:7
    let mut _27: [closure@ui/generator/smoke-resume-args.rs:75:21: 75:23]; // in scope 0 at ui/generator/smoke-resume-args.rs:75:21: 82:6
    let _28: ();                         // in scope 0 at ui/generator/smoke-resume-args.rs:84:5: 99:7
    let mut _29: [closure@ui/generator/smoke-resume-args.rs:84:21: 84:23]; // in scope 0 at ui/generator/smoke-resume-args.rs:84:21: 99:6
    let mut _30: *const [(i32, std::ops::GeneratorState<i32, i32>); 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }
    scope 2 {
    }

    bb0: {
        _4 = [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21 (#0)]; // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
                                         // generator
                                         // + def_id: DefId(0:24 ~ smoke_resume_args[6fba]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     i32,
                                         //     i32,
                                         //     {i32, bool},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _3 = &mut _4;                    // scope 0 at ui/generator/smoke-resume-args.rs:54:9: 59:10
        _2 = &mut (*_3);                 // scope 0 at ui/generator/smoke-resume-args.rs:54:9: 59:10
        _8 = const 48_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const 4_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [(i32, std::ops::GeneratorState<i32, i32>); 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _13 = GeneratorState::<i32, i32>::Yielded(const 2_i32); // scope 0 at ui/generator/smoke-resume-args.rs:60:18: 60:28
        _12 = (const 1_i32, move _13);   // scope 0 at ui/generator/smoke-resume-args.rs:60:14: 60:29
        _15 = GeneratorState::<i32, i32>::Yielded(const -44_i32); // scope 0 at ui/generator/smoke-resume-args.rs:60:37: 60:49
        _14 = (const -45_i32, move _15); // scope 0 at ui/generator/smoke-resume-args.rs:60:31: 60:50
        _17 = GeneratorState::<i32, i32>::Yielded(const 501_i32); // scope 0 at ui/generator/smoke-resume-args.rs:60:58: 60:70
        _16 = (const 500_i32, move _17); // scope 0 at ui/generator/smoke-resume-args.rs:60:52: 60:71
        _19 = GeneratorState::<i32, i32>::Complete(const -1_i32); // scope 0 at ui/generator/smoke-resume-args.rs:60:77: 60:89
        _18 = (const 0_i32, move _19);   // scope 0 at ui/generator/smoke-resume-args.rs:60:73: 60:90
        _30 = (((_11.0: std::ptr::Unique<[(i32, std::ops::GeneratorState<i32, i32>); 4]>).0: std::ptr::NonNull<[(i32, std::ops::GeneratorState<i32, i32>); 4]>).0: *const [(i32, std::ops::GeneratorState<i32, i32>); 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_30) = [move _12, move _14, move _16, move _18]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _7 = move _11;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = move _7 as std::boxed::Box<[(i32, std::ops::GeneratorState<i32, i32>)]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = slice::<impl [(i32, GeneratorState<i32, i32>)]>::into_vec::<std::alloc::Global>(move _6) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[(i32, GeneratorState<i32, i32>)]>) -> Vec<(i32, GeneratorState<i32, i32>)> {slice::<impl [(i32, GeneratorState<i32, i32>)]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = drain::<[generator@ui/generator/smoke-resume-args.rs:54:14: 54:21], i32, i32>(move _2, move _5) -> bb3; // scope 0 at ui/generator/smoke-resume-args.rs:53:5: 61:6
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:53:5: 53:10
                                         // + literal: Const { ty: for<'a> fn(&'a mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21], Vec<(i32, GeneratorState<i32, <[generator@ui/generator/smoke-resume-args.rs:54:14: 54:21] as Generator<i32>>::Return>)>) {drain::<[generator@ui/generator/smoke-resume-args.rs:54:14: 54:21], i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:63:21: 63:23]>(const 2_usize, move _21) -> bb4; // scope 0 at ui/generator/smoke-resume-args.rs:63:5: 63:81
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:63:5: 63:17
                                         // + literal: Const { ty: fn(usize, [closure@ui/generator/smoke-resume-args.rs:63:21: 63:23]) {expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:63:21: 63:23]>}, val: Value(<ZST>) }
    }

    bb4: {
        _22 = expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:65:21: 65:23]>(const 6_usize, move _23) -> bb5; // scope 0 at ui/generator/smoke-resume-args.rs:65:5: 70:7
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:65:5: 65:17
                                         // + literal: Const { ty: fn(usize, [closure@ui/generator/smoke-resume-args.rs:65:21: 65:23]) {expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:65:21: 65:23]>}, val: Value(<ZST>) }
    }

    bb5: {
        _24 = expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:73:21: 73:23]>(const 2_usize, move _25) -> bb6; // scope 2 at ui/generator/smoke-resume-args.rs:73:5: 73:89
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:73:5: 73:17
                                         // + literal: Const { ty: fn(usize, [closure@ui/generator/smoke-resume-args.rs:73:21: 73:23]) {expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:73:21: 73:23]>}, val: Value(<ZST>) }
    }

    bb6: {
        _26 = expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:75:21: 75:23]>(const 2_usize, move _27) -> bb7; // scope 0 at ui/generator/smoke-resume-args.rs:75:5: 82:7
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:75:5: 75:17
                                         // + literal: Const { ty: fn(usize, [closure@ui/generator/smoke-resume-args.rs:75:21: 75:23]) {expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:75:21: 75:23]>}, val: Value(<ZST>) }
    }

    bb7: {
        _28 = expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:84:21: 84:23]>(const 4_usize, move _29) -> bb8; // scope 0 at ui/generator/smoke-resume-args.rs:84:5: 99:7
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:84:5: 84:17
                                         // + literal: Const { ty: fn(usize, [closure@ui/generator/smoke-resume-args.rs:84:21: 84:23]) {expect_drops::<(), [closure@ui/generator/smoke-resume-args.rs:84:21: 84:23]>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:100:2: 100:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]>, _2: i32) -> GeneratorState<i32, i32> {
    debug b => _9;                       // in scope 0 at ui/generator/smoke-resume-args.rs:54:15: 54:20
    let mut _0: std::ops::GeneratorState<i32, i32>; // return place in scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    let mut _3: i32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:55:19: 55:20
    let mut _4: i32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:56:21: 56:34
    let mut _5: i32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:56:27: 56:34
    let mut _6: i32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:56:28: 56:29
    let mut _7: (i32, bool);             // in scope 0 at ui/generator/smoke-resume-args.rs:56:27: 56:34
    let mut _8: i32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:54:22: 54:22
    let mut _9: i32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:54:15: 54:20
    let mut _10: u32;                    // in scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    let mut _11: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    let mut _12: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    let mut _13: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    let mut _14: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10

    bb0: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]); // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
        _10 = discriminant((*_11));      // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
        switchInt(move _10) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10]; // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    }

    bb1: {
        _9 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
        goto -> bb2;                     // scope 0 at ui/generator/smoke-resume-args.rs:55:13: 57:14
    }

    bb2: {
        _3 = _9;                         // scope 0 at ui/generator/smoke-resume-args.rs:55:19: 55:20
        switchInt(move _3) -> [0: bb5, otherwise: bb3]; // scope 0 at ui/generator/smoke-resume-args.rs:55:19: 55:25
    }

    bb3: {
        _6 = _9;                         // scope 0 at ui/generator/smoke-resume-args.rs:56:28: 56:29
        _7 = CheckedAdd(_6, const 1_i32); // scope 0 at ui/generator/smoke-resume-args.rs:56:27: 56:34
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_i32) -> [success: bb4, unwind: bb6]; // scope 0 at ui/generator/smoke-resume-args.rs:56:27: 56:34
    }

    bb4: {
        _5 = move (_7.0: i32);           // scope 0 at ui/generator/smoke-resume-args.rs:56:27: 56:34
        _0 = GeneratorState::<i32, i32>::Yielded(move _5); // scope 0 at ui/generator/smoke-resume-args.rs:56:21: 56:34
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]); // scope 0 at ui/generator/smoke-resume-args.rs:56:21: 56:34
        discriminant((*_12)) = 3;        // scope 0 at ui/generator/smoke-resume-args.rs:56:21: 56:34
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:56:21: 56:34
    }

    bb5: {
        _8 = const -1_i32;               // scope 0 at ui/generator/smoke-resume-args.rs:58:13: 58:15
        _0 = GeneratorState::<i32, i32>::Complete(move _8); // scope 0 at ui/generator/smoke-resume-args.rs:59:10: 59:10
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]); // scope 0 at ui/generator/smoke-resume-args.rs:59:10: 59:10
        discriminant((*_13)) = 1;        // scope 0 at ui/generator/smoke-resume-args.rs:59:10: 59:10
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:59:10: 59:10
    }

    bb6 (cleanup): {
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:54:14: 54:21]); // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
        discriminant((*_14)) = 2;        // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    }

    bb7: {
        _4 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
        _9 = move _4;                    // scope 0 at ui/generator/smoke-resume-args.rs:56:17: 56:34
        goto -> bb2;                     // scope 0 at ui/generator/smoke-resume-args.rs:55:13: 57:14
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> bb8; // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> bb9; // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    }

    bb10: {
        unreachable;                     // scope 0 at ui/generator/smoke-resume-args.rs:54:14: 59:10
    }
}

fn main::{closure#1}(_1: [closure@ui/generator/smoke-resume-args.rs:63:21: 63:23]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/smoke-resume-args.rs:63:24: 63:24
    let mut _2: &mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:63:30: 63:46
    let mut _3: &mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:63:30: 63:46
    let mut _4: [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
    let mut _5: std::vec::Vec<(DropMe, std::ops::GeneratorState<DropMe, DropMe>)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _6: std::boxed::Box<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>)]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: (DropMe, std::ops::GeneratorState<DropMe, DropMe>); // in scope 0 at ui/generator/smoke-resume-args.rs:63:53: 63:78
    let mut _13: *const [(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _4 = [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38 (#0)]; // scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
                                         // generator
                                         // + def_id: DefId(0:26 ~ smoke_resume_args[6fba]::main::{closure#1}::{closure#0})
                                         // + substs: [
                                         //     DropMe,
                                         //     DropMe,
                                         //     DropMe,
                                         //     {DropMe},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _3 = &mut _4;                    // scope 0 at ui/generator/smoke-resume-args.rs:63:30: 63:46
        _2 = &mut (*_3);                 // scope 0 at ui/generator/smoke-resume-args.rs:63:30: 63:46
        _8 = const 1_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const 1_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb1, unwind: bb5]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = const (DropMe, GeneratorState::<DropMe, DropMe>::Yielded(DropMe)); // scope 0 at ui/generator/smoke-resume-args.rs:63:53: 63:78
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:63:53: 63:78
                                         // + literal: Const { ty: (DropMe, GeneratorState<DropMe, DropMe>), val: Value(Scalar(0x00)) }
        _13 = (((_11.0: std::ptr::Unique<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 1]>).0: std::ptr::NonNull<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 1]>).0: *const [(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_13) = [move _12];             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _7 = move _11;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = move _7 as std::boxed::Box<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>)]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = slice::<impl [(DropMe, GeneratorState<DropMe, DropMe>)]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[(DropMe, GeneratorState<DropMe, DropMe>)]>) -> Vec<(DropMe, GeneratorState<DropMe, DropMe>)> {slice::<impl [(DropMe, GeneratorState<DropMe, DropMe>)]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = drain::<[generator@ui/generator/smoke-resume-args.rs:63:35: 63:38], DropMe, DropMe>(move _2, move _5) -> [return: bb3, unwind: bb5]; // scope 0 at ui/generator/smoke-resume-args.rs:63:24: 63:80
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:63:24: 63:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38], Vec<(DropMe, GeneratorState<DropMe, <[generator@ui/generator/smoke-resume-args.rs:63:35: 63:38] as Generator<DropMe>>::Return>)>) {drain::<[generator@ui/generator/smoke-resume-args.rs:63:35: 63:38], DropMe, DropMe>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 0 at ui/generator/smoke-resume-args.rs:63:79: 63:80
    }

    bb4: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:63:80: 63:80
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/generator/smoke-resume-args.rs:63:79: 63:80
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:63:21: 63:80
    }
}

fn main::{closure#1}::{closure#0}(_1: Pin<&mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]>, _2: DropMe) -> GeneratorState<DropMe, DropMe> {
    debug a => _5;                       // in scope 0 at ui/generator/smoke-resume-args.rs:63:36: 63:37
    let mut _0: std::ops::GeneratorState<DropMe, DropMe>; // return place in scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
    let mut _3: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:63:45: 63:46
    let mut _4: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:63:39: 63:39
    let _5: DropMe;                      // in scope 0 at ui/generator/smoke-resume-args.rs:63:36: 63:37
    let mut _6: u32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
    let mut _7: &mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
    let mut _8: &mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
    let mut _9: &mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46

    bb0: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]); // scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
        _6 = discriminant((*_7));        // scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
        switchInt(move _6) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4]; // scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
    }

    bb1: {
        _5 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
        _3 = move _5;                    // scope 0 at ui/generator/smoke-resume-args.rs:63:45: 63:46
        _0 = GeneratorState::<DropMe, DropMe>::Yielded(move _3); // scope 0 at ui/generator/smoke-resume-args.rs:63:39: 63:46
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]); // scope 0 at ui/generator/smoke-resume-args.rs:63:39: 63:46
        discriminant((*_8)) = 3;         // scope 0 at ui/generator/smoke-resume-args.rs:63:39: 63:46
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:63:39: 63:46
    }

    bb2: {
        _4 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
        _0 = GeneratorState::<DropMe, DropMe>::Complete(move _4); // scope 0 at ui/generator/smoke-resume-args.rs:63:46: 63:46
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:63:35: 63:38]); // scope 0 at ui/generator/smoke-resume-args.rs:63:46: 63:46
        discriminant((*_9)) = 1;         // scope 0 at ui/generator/smoke-resume-args.rs:63:46: 63:46
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:63:46: 63:46
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3; // scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
    }

    bb4: {
        unreachable;                     // scope 0 at ui/generator/smoke-resume-args.rs:63:35: 63:46
    }
}

fn main::{closure#2}(_1: [closure@ui/generator/smoke-resume-args.rs:65:21: 65:23]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/smoke-resume-args.rs:65:24: 65:24
    let mut _2: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:67:13: 67:35
    let mut _3: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:67:13: 67:35
    let mut _4: [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
    let mut _5: std::vec::Vec<(DropMe, std::ops::GeneratorState<DropMe, DropMe>)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _6: std::boxed::Box<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>)]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: (DropMe, std::ops::GeneratorState<DropMe, DropMe>); // in scope 0 at ui/generator/smoke-resume-args.rs:68:18: 68:43
    let mut _13: (DropMe, std::ops::GeneratorState<DropMe, DropMe>); // in scope 0 at ui/generator/smoke-resume-args.rs:68:45: 68:70
    let mut _14: (DropMe, std::ops::GeneratorState<DropMe, DropMe>); // in scope 0 at ui/generator/smoke-resume-args.rs:68:72: 68:98
    let mut _15: *const [(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 3]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _4 = [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21 (#0)]; // scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
                                         // generator
                                         // + def_id: DefId(0:28 ~ smoke_resume_args[6fba]::main::{closure#2}::{closure#0})
                                         // + substs: [
                                         //     DropMe,
                                         //     DropMe,
                                         //     DropMe,
                                         //     {DropMe},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _3 = &mut _4;                    // scope 0 at ui/generator/smoke-resume-args.rs:67:13: 67:35
        _2 = &mut (*_3);                 // scope 0 at ui/generator/smoke-resume-args.rs:67:13: 67:35
        _8 = const 3_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const 1_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb1, unwind: bb5]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = const (DropMe, GeneratorState::<DropMe, DropMe>::Yielded(DropMe)); // scope 0 at ui/generator/smoke-resume-args.rs:68:18: 68:43
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:68:18: 68:43
                                         // + literal: Const { ty: (DropMe, GeneratorState<DropMe, DropMe>), val: Value(Scalar(0x00)) }
        _13 = const (DropMe, GeneratorState::<DropMe, DropMe>::Yielded(DropMe)); // scope 0 at ui/generator/smoke-resume-args.rs:68:45: 68:70
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:68:45: 68:70
                                         // + literal: Const { ty: (DropMe, GeneratorState<DropMe, DropMe>), val: Value(Scalar(0x00)) }
        _14 = const (DropMe, GeneratorState::<DropMe, DropMe>::Complete(DropMe)); // scope 0 at ui/generator/smoke-resume-args.rs:68:72: 68:98
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:68:72: 68:98
                                         // + literal: Const { ty: (DropMe, GeneratorState<DropMe, DropMe>), val: Value(Scalar(0x01)) }
        _15 = (((_11.0: std::ptr::Unique<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 3]>).0: std::ptr::NonNull<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 3]>).0: *const [(DropMe, std::ops::GeneratorState<DropMe, DropMe>); 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_15) = [move _12, move _13, move _14]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _7 = move _11;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = move _7 as std::boxed::Box<[(DropMe, std::ops::GeneratorState<DropMe, DropMe>)]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = slice::<impl [(DropMe, GeneratorState<DropMe, DropMe>)]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[(DropMe, GeneratorState<DropMe, DropMe>)]>) -> Vec<(DropMe, GeneratorState<DropMe, DropMe>)> {slice::<impl [(DropMe, GeneratorState<DropMe, DropMe>)]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = drain::<[generator@ui/generator/smoke-resume-args.rs:67:18: 67:21], DropMe, DropMe>(move _2, move _5) -> [return: bb3, unwind: bb5]; // scope 0 at ui/generator/smoke-resume-args.rs:66:9: 69:10
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:66:9: 66:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21], Vec<(DropMe, GeneratorState<DropMe, <[generator@ui/generator/smoke-resume-args.rs:67:18: 67:21] as Generator<DropMe>>::Return>)>) {drain::<[generator@ui/generator/smoke-resume-args.rs:67:18: 67:21], DropMe, DropMe>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 0 at ui/generator/smoke-resume-args.rs:70:5: 70:6
    }

    bb4: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:70:6: 70:6
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/generator/smoke-resume-args.rs:70:5: 70:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:65:21: 70:6
    }
}

fn main::{closure#2}::{closure#0}(_1: Pin<&mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]>, _2: DropMe) -> GeneratorState<DropMe, DropMe> {
    debug a => _6;                       // in scope 0 at ui/generator/smoke-resume-args.rs:67:19: 67:20
    let mut _0: std::ops::GeneratorState<DropMe, DropMe>; // return place in scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
    let mut _3: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:67:28: 67:35
    let mut _4: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:67:34: 67:35
    let mut _5: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:67:22: 67:22
    let _6: DropMe;                      // in scope 0 at ui/generator/smoke-resume-args.rs:67:19: 67:20
    let mut _7: u32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
    let mut _8: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
    let mut _9: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
    let mut _10: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
    let mut _11: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]; // in scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]); // scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
        _7 = discriminant((*_8));        // scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
        switchInt(move _7) -> [0: bb1, 1: bb4, 3: bb2, 4: bb3, otherwise: bb5]; // scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
    }

    bb1: {
        _6 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
        _4 = move _6;                    // scope 0 at ui/generator/smoke-resume-args.rs:67:34: 67:35
        _0 = GeneratorState::<DropMe, DropMe>::Yielded(move _4); // scope 0 at ui/generator/smoke-resume-args.rs:67:28: 67:35
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]); // scope 0 at ui/generator/smoke-resume-args.rs:67:28: 67:35
        discriminant((*_9)) = 3;         // scope 0 at ui/generator/smoke-resume-args.rs:67:28: 67:35
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:67:28: 67:35
    }

    bb2: {
        _3 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
        _0 = GeneratorState::<DropMe, DropMe>::Yielded(move _3); // scope 0 at ui/generator/smoke-resume-args.rs:67:22: 67:35
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]); // scope 0 at ui/generator/smoke-resume-args.rs:67:22: 67:35
        discriminant((*_10)) = 4;        // scope 0 at ui/generator/smoke-resume-args.rs:67:22: 67:35
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:67:22: 67:35
    }

    bb3: {
        _5 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
        _0 = GeneratorState::<DropMe, DropMe>::Complete(move _5); // scope 0 at ui/generator/smoke-resume-args.rs:67:35: 67:35
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:67:18: 67:21]); // scope 0 at ui/generator/smoke-resume-args.rs:67:35: 67:35
        discriminant((*_11)) = 1;        // scope 0 at ui/generator/smoke-resume-args.rs:67:35: 67:35
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:67:35: 67:35
    }

    bb4: {
        assert(const false, "generator resumed after completion") -> bb4; // scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
    }

    bb5: {
        unreachable;                     // scope 0 at ui/generator/smoke-resume-args.rs:67:18: 67:35
    }
}

fn main::{closure#3}(_1: [closure@ui/generator/smoke-resume-args.rs:73:21: 73:23]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/smoke-resume-args.rs:73:24: 73:24
    let mut _2: &mut [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:73:30: 73:53
    let mut _3: &mut [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:73:30: 73:53
    let mut _4: [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
    let mut _5: std::vec::Vec<(DropMe, std::ops::GeneratorState<(), DropMe>)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _6: std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), DropMe>)]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), DropMe>); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), DropMe>); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: (DropMe, std::ops::GeneratorState<(), DropMe>); // in scope 0 at ui/generator/smoke-resume-args.rs:73:60: 73:86
    let mut _13: *const [(DropMe, std::ops::GeneratorState<(), DropMe>); 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _4 = [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38 (#0)]; // scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
                                         // generator
                                         // + def_id: DefId(0:30 ~ smoke_resume_args[6fba]::main::{closure#3}::{closure#0})
                                         // + substs: [
                                         //     DropMe,
                                         //     (),
                                         //     DropMe,
                                         //     {DropMe, (), !},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _3 = &mut _4;                    // scope 0 at ui/generator/smoke-resume-args.rs:73:30: 73:53
        _2 = &mut (*_3);                 // scope 0 at ui/generator/smoke-resume-args.rs:73:30: 73:53
        _8 = const 1_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const 1_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb1, unwind: bb5]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [(DropMe, std::ops::GeneratorState<(), DropMe>); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = const (DropMe, GeneratorState::<(), DropMe>::Complete(DropMe)); // scope 0 at ui/generator/smoke-resume-args.rs:73:60: 73:86
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:73:60: 73:86
                                         // + literal: Const { ty: (DropMe, GeneratorState<(), DropMe>), val: Value(Scalar(0x01)) }
        _13 = (((_11.0: std::ptr::Unique<[(DropMe, std::ops::GeneratorState<(), DropMe>); 1]>).0: std::ptr::NonNull<[(DropMe, std::ops::GeneratorState<(), DropMe>); 1]>).0: *const [(DropMe, std::ops::GeneratorState<(), DropMe>); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_13) = [move _12];             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _7 = move _11;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = move _7 as std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), DropMe>)]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = slice::<impl [(DropMe, GeneratorState<(), DropMe>)]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[(DropMe, GeneratorState<(), DropMe>)]>) -> Vec<(DropMe, GeneratorState<(), DropMe>)> {slice::<impl [(DropMe, GeneratorState<(), DropMe>)]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = drain::<[generator@ui/generator/smoke-resume-args.rs:73:35: 73:38], DropMe, ()>(move _2, move _5) -> [return: bb3, unwind: bb5]; // scope 0 at ui/generator/smoke-resume-args.rs:73:24: 73:88
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:73:24: 73:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38], Vec<(DropMe, GeneratorState<(), <[generator@ui/generator/smoke-resume-args.rs:73:35: 73:38] as Generator<DropMe>>::Return>)>) {drain::<[generator@ui/generator/smoke-resume-args.rs:73:35: 73:38], DropMe, ()>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 0 at ui/generator/smoke-resume-args.rs:73:87: 73:88
    }

    bb4: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:73:88: 73:88
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/generator/smoke-resume-args.rs:73:87: 73:88
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:73:21: 73:88
    }
}

fn main::{closure#3}::{closure#0}(_1: Pin<&mut [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38]>, _2: DropMe) -> GeneratorState<(), DropMe> {
    debug a => _4;                       // in scope 0 at ui/generator/smoke-resume-args.rs:73:36: 73:37
    let mut _0: std::ops::GeneratorState<(), DropMe>; // return place in scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
    let mut _3: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:73:39: 73:39
    let _4: DropMe;                      // in scope 0 at ui/generator/smoke-resume-args.rs:73:36: 73:37
    let mut _5: u32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
    let mut _6: &mut [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
    let mut _7: &mut [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38]; // in scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53

    bb0: {
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38]); // scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
        _5 = discriminant((*_6));        // scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
        switchInt(move _5) -> [0: bb1, 1: bb2, otherwise: bb3]; // scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
        _3 = move _4;                    // scope 0 at ui/generator/smoke-resume-args.rs:73:52: 73:53
        _0 = GeneratorState::<(), DropMe>::Complete(move _3); // scope 0 at ui/generator/smoke-resume-args.rs:73:53: 73:53
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:73:35: 73:38]); // scope 0 at ui/generator/smoke-resume-args.rs:73:53: 73:53
        discriminant((*_7)) = 1;         // scope 0 at ui/generator/smoke-resume-args.rs:73:53: 73:53
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:73:53: 73:53
    }

    bb2: {
        assert(const false, "generator resumed after completion") -> bb2; // scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
    }

    bb3: {
        unreachable;                     // scope 0 at ui/generator/smoke-resume-args.rs:73:35: 73:53
    }
}

fn main::{closure#4}(_1: [closure@ui/generator/smoke-resume-args.rs:75:21: 75:23]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/smoke-resume-args.rs:75:24: 75:24
    let mut _2: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:13: 79:14
    let mut _3: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:13: 79:14
    let mut _4: [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _5: std::vec::Vec<(DropMe, std::ops::GeneratorState<(), DropMe>)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _6: std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), DropMe>)]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), DropMe>); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), DropMe>); 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: (DropMe, std::ops::GeneratorState<(), DropMe>); // in scope 0 at ui/generator/smoke-resume-args.rs:80:18: 80:44
    let mut _13: *const [(DropMe, std::ops::GeneratorState<(), DropMe>); 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _4 = [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29 (#0)]; // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
                                         // generator
                                         // + def_id: DefId(0:32 ~ smoke_resume_args[6fba]::main::{closure#4}::{closure#0})
                                         // + substs: [
                                         //     DropMe,
                                         //     (),
                                         //     DropMe,
                                         //     {DropMe, bool, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _3 = &mut _4;                    // scope 0 at ui/generator/smoke-resume-args.rs:77:13: 79:14
        _2 = &mut (*_3);                 // scope 0 at ui/generator/smoke-resume-args.rs:77:13: 79:14
        _8 = const 1_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const 1_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb1, unwind: bb5]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [(DropMe, std::ops::GeneratorState<(), DropMe>); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = const (DropMe, GeneratorState::<(), DropMe>::Complete(DropMe)); // scope 0 at ui/generator/smoke-resume-args.rs:80:18: 80:44
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:80:18: 80:44
                                         // + literal: Const { ty: (DropMe, GeneratorState<(), DropMe>), val: Value(Scalar(0x01)) }
        _13 = (((_11.0: std::ptr::Unique<[(DropMe, std::ops::GeneratorState<(), DropMe>); 1]>).0: std::ptr::NonNull<[(DropMe, std::ops::GeneratorState<(), DropMe>); 1]>).0: *const [(DropMe, std::ops::GeneratorState<(), DropMe>); 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_13) = [move _12];             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _7 = move _11;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = move _7 as std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), DropMe>)]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = slice::<impl [(DropMe, GeneratorState<(), DropMe>)]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[(DropMe, GeneratorState<(), DropMe>)]>) -> Vec<(DropMe, GeneratorState<(), DropMe>)> {slice::<impl [(DropMe, GeneratorState<(), DropMe>)]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = drain::<[generator@ui/generator/smoke-resume-args.rs:77:18: 77:29], DropMe, ()>(move _2, move _5) -> [return: bb3, unwind: bb5]; // scope 0 at ui/generator/smoke-resume-args.rs:76:9: 81:10
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:76:9: 76:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29], Vec<(DropMe, GeneratorState<(), <[generator@ui/generator/smoke-resume-args.rs:77:18: 77:29] as Generator<DropMe>>::Return>)>) {drain::<[generator@ui/generator/smoke-resume-args.rs:77:18: 77:29], DropMe, ()>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 0 at ui/generator/smoke-resume-args.rs:82:5: 82:6
    }

    bb4: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:82:6: 82:6
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/generator/smoke-resume-args.rs:82:5: 82:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:75:21: 82:6
    }
}

fn main::{closure#4}::{closure#0}(_1: Pin<&mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]>, _2: DropMe) -> GeneratorState<(), DropMe> {
    debug a => (((*(_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29])) as variant#3).1: DropMe); // in scope 0 at ui/generator/smoke-resume-args.rs:77:19: 77:20
    let mut _0: std::ops::GeneratorState<(), DropMe>; // return place in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _3: bool;                    // in scope 0 at ui/generator/smoke-resume-args.rs:78:20: 78:25
    let mut _4: ();                      // in scope 0 at ui/generator/smoke-resume-args.rs:78:34: 78:36
    let mut _5: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:77:30: 77:30
    let mut _6: u32;                     // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _7: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _8: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _9: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _10: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _11: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _12: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _13: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _14: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _15: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _16: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    let mut _17: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]; // in scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14

    bb0: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
        _6 = discriminant((*_7));        // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
        switchInt(move _6) -> [0: bb1, 1: bb10, 2: bb9, 3: bb8, otherwise: bb11]; // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    }

    bb1: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
        (((*_8) as variant#3).1: DropMe) = move _2; // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:78:20: 78:25
        (((*_9) as variant#3).0: bool) = const false; // scope 0 at ui/generator/smoke-resume-args.rs:78:20: 78:25
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:78:20: 78:25
        (((*_10) as variant#3).0: bool) = const true; // scope 0 at ui/generator/smoke-resume-args.rs:78:20: 78:25
        _3 = const false;                // scope 0 at ui/generator/smoke-resume-args.rs:78:20: 78:25
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/generator/smoke-resume-args.rs:78:20: 78:25
    }

    bb2: {
        _4 = ();                         // scope 0 at ui/generator/smoke-resume-args.rs:78:34: 78:36
        _0 = GeneratorState::<(), DropMe>::Yielded(move _4); // scope 0 at ui/generator/smoke-resume-args.rs:78:28: 78:36
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:78:28: 78:36
        discriminant((*_11)) = 3;        // scope 0 at ui/generator/smoke-resume-args.rs:78:28: 78:36
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:78:28: 78:36
    }

    bb3: {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:78:46: 78:47
        (((*_12) as variant#3).0: bool) = const false; // scope 0 at ui/generator/smoke-resume-args.rs:78:46: 78:47
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:78:46: 78:47
        _5 = move (((*_13) as variant#3).1: DropMe); // scope 0 at ui/generator/smoke-resume-args.rs:78:46: 78:47
        goto -> bb4;                     // scope 0 at ui/generator/smoke-resume-args.rs:78:17: 78:49
    }

    bb4: {
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:79:13: 79:14
        switchInt((((*_16) as variant#3).0: bool)) -> [0: bb5, otherwise: bb7]; // scope 0 at ui/generator/smoke-resume-args.rs:79:13: 79:14
    }

    bb5: {
        _0 = GeneratorState::<(), DropMe>::Complete(move _5); // scope 0 at ui/generator/smoke-resume-args.rs:79:14: 79:14
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:79:14: 79:14
        discriminant((*_14)) = 1;        // scope 0 at ui/generator/smoke-resume-args.rs:79:14: 79:14
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:79:14: 79:14
    }

    bb6 (cleanup): {
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
        discriminant((*_17)) = 2;        // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    }

    bb7: {
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:77:18: 77:29]); // scope 0 at ui/generator/smoke-resume-args.rs:79:13: 79:14
        drop((((*_15) as variant#3).1: DropMe)) -> [return: bb5, unwind: bb6]; // scope 0 at ui/generator/smoke-resume-args.rs:79:13: 79:14
    }

    bb8: {
        _5 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
        goto -> bb4;                     // scope 0 at ui/generator/smoke-resume-args.rs:78:17: 78:49
    }

    bb9: {
        assert(const false, "generator resumed after panicking") -> bb9; // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    }

    bb10: {
        assert(const false, "generator resumed after completion") -> bb10; // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    }

    bb11: {
        unreachable;                     // scope 0 at ui/generator/smoke-resume-args.rs:77:18: 79:14
    }
}

fn main::{closure#5}(_1: [closure@ui/generator/smoke-resume-args.rs:84:21: 84:23]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/smoke-resume-args.rs:84:24: 84:24
    let mut _2: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:13: 91:14
    let mut _3: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:13: 91:14
    let mut _4: [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _5: std::vec::Vec<(DropMe, std::ops::GeneratorState<(), ()>)>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _6: std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), ()>)]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), ()>); 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), ()>); 4]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: (DropMe, std::ops::GeneratorState<(), ()>); // in scope 0 at ui/generator/smoke-resume-args.rs:93:17: 93:38
    let mut _13: (DropMe, std::ops::GeneratorState<(), ()>); // in scope 0 at ui/generator/smoke-resume-args.rs:94:17: 94:38
    let mut _14: (DropMe, std::ops::GeneratorState<(), ()>); // in scope 0 at ui/generator/smoke-resume-args.rs:95:17: 95:38
    let mut _15: (DropMe, std::ops::GeneratorState<(), ()>); // in scope 0 at ui/generator/smoke-resume-args.rs:96:17: 96:39
    let mut _16: *const [(DropMe, std::ops::GeneratorState<(), ()>); 4]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }
    scope 2 {
    }

    bb0: {
        _4 = [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33 (#0)]; // scope 1 at ui/generator/smoke-resume-args.rs:87:18: 91:14
                                         // generator
                                         // + def_id: DefId(0:34 ~ smoke_resume_args[6fba]::main::{closure#5}::{closure#0})
                                         // + substs: [
                                         //     DropMe,
                                         //     (),
                                         //     (),
                                         //     {DropMe, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _3 = &mut _4;                    // scope 1 at ui/generator/smoke-resume-args.rs:87:13: 91:14
        _2 = &mut (*_3);                 // scope 1 at ui/generator/smoke-resume-args.rs:87:13: 91:14
        _8 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const 1_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> [return: bb1, unwind: bb5]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [(DropMe, std::ops::GeneratorState<(), ()>); 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = const (DropMe, GeneratorState::<(), ()>::Yielded(())); // scope 0 at ui/generator/smoke-resume-args.rs:93:17: 93:38
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:93:17: 93:38
                                         // + literal: Const { ty: (DropMe, GeneratorState<(), ()>), val: Value(Scalar(0x00)) }
        _13 = const (DropMe, GeneratorState::<(), ()>::Yielded(())); // scope 0 at ui/generator/smoke-resume-args.rs:94:17: 94:38
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:94:17: 94:38
                                         // + literal: Const { ty: (DropMe, GeneratorState<(), ()>), val: Value(Scalar(0x00)) }
        _14 = const (DropMe, GeneratorState::<(), ()>::Yielded(())); // scope 0 at ui/generator/smoke-resume-args.rs:95:17: 95:38
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:95:17: 95:38
                                         // + literal: Const { ty: (DropMe, GeneratorState<(), ()>), val: Value(Scalar(0x00)) }
        _15 = const (DropMe, GeneratorState::<(), ()>::Complete(())); // scope 0 at ui/generator/smoke-resume-args.rs:96:17: 96:39
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:96:17: 96:39
                                         // + literal: Const { ty: (DropMe, GeneratorState<(), ()>), val: Value(Scalar(0x01)) }
        _16 = (((_11.0: std::ptr::Unique<[(DropMe, std::ops::GeneratorState<(), ()>); 4]>).0: std::ptr::NonNull<[(DropMe, std::ops::GeneratorState<(), ()>); 4]>).0: *const [(DropMe, std::ops::GeneratorState<(), ()>); 4]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_16) = [move _12, move _13, move _14, move _15]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _7 = move _11;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = move _7 as std::boxed::Box<[(DropMe, std::ops::GeneratorState<(), ()>)]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = slice::<impl [(DropMe, GeneratorState<(), ()>)]>::into_vec::<std::alloc::Global>(move _6) -> [return: bb2, unwind: bb5]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[(DropMe, GeneratorState<(), ()>)]>) -> Vec<(DropMe, GeneratorState<(), ()>)> {slice::<impl [(DropMe, GeneratorState<(), ()>)]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = drain::<[generator@ui/generator/smoke-resume-args.rs:87:18: 87:33], DropMe, ()>(move _2, move _5) -> [return: bb3, unwind: bb5]; // scope 0 at ui/generator/smoke-resume-args.rs:85:9: 98:10
                                         // mir::Constant
                                         // + span: ui/generator/smoke-resume-args.rs:85:9: 85:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33], Vec<(DropMe, GeneratorState<(), <[generator@ui/generator/smoke-resume-args.rs:87:18: 87:33] as Generator<DropMe>>::Return>)>) {drain::<[generator@ui/generator/smoke-resume-args.rs:87:18: 87:33], DropMe, ()>}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_4) -> bb4;                 // scope 0 at ui/generator/smoke-resume-args.rs:99:5: 99:6
    }

    bb4: {
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:99:6: 99:6
    }

    bb5 (cleanup): {
        drop(_4) -> bb6;                 // scope 0 at ui/generator/smoke-resume-args.rs:99:5: 99:6
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:84:21: 99:6
    }
}

fn main::{closure#5}::{closure#0}(_1: Pin<&mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]>, _2: DropMe) -> GeneratorState<(), ()> {
    debug a => (((*(_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33])) as variant#3).0: DropMe); // in scope 0 at ui/generator/smoke-resume-args.rs:87:19: 87:24
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _3: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:88:21: 88:26
    let mut _4: ();                      // in scope 0 at ui/generator/smoke-resume-args.rs:88:21: 88:26
    let mut _5: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:89:21: 89:26
    let mut _6: ();                      // in scope 0 at ui/generator/smoke-resume-args.rs:89:21: 89:26
    let mut _7: DropMe;                  // in scope 0 at ui/generator/smoke-resume-args.rs:90:21: 90:26
    let mut _8: ();                      // in scope 0 at ui/generator/smoke-resume-args.rs:90:21: 90:26
    let mut _9: ();                      // in scope 0 at ui/generator/smoke-resume-args.rs:87:34: 87:34
    let mut _10: u32;                    // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _11: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _12: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _13: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _14: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _15: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _16: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _17: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _18: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _19: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _20: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _21: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _22: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _23: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _24: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _25: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _26: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _27: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    let mut _28: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]; // in scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14

    bb0: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
        _10 = discriminant((*_11));      // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
        switchInt(move _10) -> [0: bb1, 1: bb15, 2: bb14, 3: bb11, 4: bb12, 5: bb13, otherwise: bb16]; // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    }

    bb1: {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
        (((*_12) as variant#3).0: DropMe) = move _2; // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
        _4 = ();                         // scope 0 at ui/generator/smoke-resume-args.rs:88:21: 88:26
        _0 = GeneratorState::<(), ()>::Yielded(move _4); // scope 0 at ui/generator/smoke-resume-args.rs:88:21: 88:26
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:88:21: 88:26
        discriminant((*_13)) = 3;        // scope 0 at ui/generator/smoke-resume-args.rs:88:21: 88:26
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:88:21: 88:26
    }

    bb2: {
        _0 = GeneratorState::<(), ()>::Complete(move _9); // scope 0 at ui/generator/smoke-resume-args.rs:91:14: 91:14
        _20 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:91:14: 91:14
        discriminant((*_20)) = 1;        // scope 0 at ui/generator/smoke-resume-args.rs:91:14: 91:14
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:91:14: 91:14
    }

    bb3 (cleanup): {
        _21 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:91:13: 91:14
        drop((((*_21) as variant#3).0: DropMe)) -> bb10; // scope 0 at ui/generator/smoke-resume-args.rs:91:13: 91:14
    }

    bb4 (cleanup): {
        _22 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:88:17: 88:18
        (((*_22) as variant#3).0: DropMe) = move _3; // scope 0 at ui/generator/smoke-resume-args.rs:88:17: 88:18
        goto -> bb3;                     // scope 0 at no-location
    }

    bb5: {
        _23 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:88:17: 88:18
        (((*_23) as variant#3).0: DropMe) = move _3; // scope 0 at ui/generator/smoke-resume-args.rs:88:17: 88:18
        _6 = ();                         // scope 0 at ui/generator/smoke-resume-args.rs:89:21: 89:26
        _0 = GeneratorState::<(), ()>::Yielded(move _6); // scope 0 at ui/generator/smoke-resume-args.rs:89:21: 89:26
        _15 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:89:21: 89:26
        discriminant((*_15)) = 4;        // scope 0 at ui/generator/smoke-resume-args.rs:89:21: 89:26
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:89:21: 89:26
    }

    bb6 (cleanup): {
        _24 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:89:17: 89:18
        (((*_24) as variant#3).0: DropMe) = move _5; // scope 0 at ui/generator/smoke-resume-args.rs:89:17: 89:18
        goto -> bb3;                     // scope 0 at no-location
    }

    bb7: {
        _25 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:89:17: 89:18
        (((*_25) as variant#3).0: DropMe) = move _5; // scope 0 at ui/generator/smoke-resume-args.rs:89:17: 89:18
        _8 = ();                         // scope 0 at ui/generator/smoke-resume-args.rs:90:21: 90:26
        _0 = GeneratorState::<(), ()>::Yielded(move _8); // scope 0 at ui/generator/smoke-resume-args.rs:90:21: 90:26
        _17 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:90:21: 90:26
        discriminant((*_17)) = 5;        // scope 0 at ui/generator/smoke-resume-args.rs:90:21: 90:26
        return;                          // scope 0 at ui/generator/smoke-resume-args.rs:90:21: 90:26
    }

    bb8 (cleanup): {
        _26 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:90:17: 90:18
        (((*_26) as variant#3).0: DropMe) = move _7; // scope 0 at ui/generator/smoke-resume-args.rs:90:17: 90:18
        goto -> bb3;                     // scope 0 at no-location
    }

    bb9: {
        _27 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:90:17: 90:18
        (((*_27) as variant#3).0: DropMe) = move _7; // scope 0 at ui/generator/smoke-resume-args.rs:90:17: 90:18
        _9 = const ();                   // scope 0 at ui/generator/smoke-resume-args.rs:87:34: 91:14
        _19 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:91:13: 91:14
        drop((((*_19) as variant#3).0: DropMe)) -> [return: bb2, unwind: bb10]; // scope 0 at ui/generator/smoke-resume-args.rs:91:13: 91:14
    }

    bb10 (cleanup): {
        _28 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
        discriminant((*_28)) = 2;        // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
        resume;                          // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    }

    bb11: {
        _3 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
        _14 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:88:17: 88:18
        drop((((*_14) as variant#3).0: DropMe)) -> [return: bb5, unwind: bb4]; // scope 0 at ui/generator/smoke-resume-args.rs:88:17: 88:18
    }

    bb12: {
        _5 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
        _16 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:89:17: 89:18
        drop((((*_16) as variant#3).0: DropMe)) -> [return: bb7, unwind: bb6]; // scope 0 at ui/generator/smoke-resume-args.rs:89:17: 89:18
    }

    bb13: {
        _7 = move _2;                    // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
        _18 = deref_copy (_1.0: &mut [generator@ui/generator/smoke-resume-args.rs:87:18: 87:33]); // scope 0 at ui/generator/smoke-resume-args.rs:90:17: 90:18
        drop((((*_18) as variant#3).0: DropMe)) -> [return: bb9, unwind: bb8]; // scope 0 at ui/generator/smoke-resume-args.rs:90:17: 90:18
    }

    bb14: {
        assert(const false, "generator resumed after panicking") -> bb14; // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    }

    bb15: {
        assert(const false, "generator resumed after completion") -> bb15; // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    }

    bb16: {
        unreachable;                     // scope 0 at ui/generator/smoke-resume-args.rs:87:18: 91:14
    }
}
