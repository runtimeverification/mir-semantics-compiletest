// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let _5: &[generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _6: &usize;
        let _7: &usize;
        let mut _15: &usize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }

    bb0: {
        _1 = [generator@ui/generator/overlap-locals.rs:6:13: 6:15 (#0)];
        _15 = const _;
        _5 = &_1;
        _4 = std::mem::size_of_val::<[generator@ui/generator/overlap-locals.rs:6:13: 6:15]>(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _2 = (_15, move _3);
        _6 = (_2.0: &usize);
        _7 = (_2.1: &usize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<usize, usize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 8_usize;
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &i32;
    let mut _12: ();
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: &[core::fmt::rt::Argument<'_>];
    let _17: &[core::fmt::rt::Argument<'_>; 1];
    let _18: [core::fmt::rt::Argument<'_>; 1];
    let mut _19: core::fmt::rt::Argument<'_>;
    let _20: &i32;
    let mut _21: ();
    let _22: ();
    let mut _23: std::fmt::Arguments<'_>;
    let mut _24: &[&str];
    let mut _25: &[core::fmt::rt::Argument<'_>];
    let _26: &[core::fmt::rt::Argument<'_>; 1];
    let _27: [core::fmt::rt::Argument<'_>; 1];
    let mut _28: core::fmt::rt::Argument<'_>;
    let _29: &i32;
    let mut _30: ();
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let mut _34: &[core::fmt::rt::Argument<'_>];
    let _35: &[core::fmt::rt::Argument<'_>; 1];
    let _36: [core::fmt::rt::Argument<'_>; 1];
    let mut _37: core::fmt::rt::Argument<'_>;
    let _38: &i32;
    let mut _43: ();
    let mut _44: u32;
    let mut _45: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _46: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _47: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _48: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _49: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _50: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _51: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _52: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _53: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _54: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _55: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _56: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _57: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _58: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    let mut _59: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15];
    scope 1 {
        debug w => (((*(_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15])) as variant#3).0: i32);
        let mut _42: &[&str; 2];
    }
    scope 2 {
        debug x => (((*(_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15])) as variant#4).0: i32);
        let mut _41: &[&str; 2];
    }
    scope 3 {
        debug y => (((*(_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15])) as variant#5).0: i32);
        let mut _40: &[&str; 2];
    }
    scope 4 {
        debug z => (((*(_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15])) as variant#6).0: i32);
        let mut _39: &[&str; 2];
    }

    bb0: {
        _45 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _44 = discriminant((*_45));
        switchInt(move _44) -> [0: bb1, 1: bb20, 2: bb19, 3: bb15, 4: bb16, 5: bb17, 6: bb18, otherwise: bb21];
    }

    bb1: {
        _46 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        (((*_46) as variant#3).0: i32) = const 4_i32;
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _47 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_47)) = 3;
        return;
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb3, unwind: bb14];
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind: bb14];
    }

    bb4: {
        _49 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        (((*_49) as variant#4).0: i32) = const 5_i32;
        _12 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _12);
        _50 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_50)) = 4;
        return;
    }

    bb5: {
        _18 = [move _19];
        _17 = &_18;
        _16 = _17 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_v1(move _15, move _16) -> [return: bb6, unwind: bb14];
    }

    bb6: {
        _13 = _print(move _14) -> [return: bb7, unwind: bb14];
    }

    bb7: {
        _52 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        (((*_52) as variant#5).0: i32) = const 6_i32;
        _21 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _21);
        _53 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_53)) = 5;
        return;
    }

    bb8: {
        _27 = [move _28];
        _26 = &_27;
        _25 = _26 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _23 = Arguments::<'_>::new_v1(move _24, move _25) -> [return: bb9, unwind: bb14];
    }

    bb9: {
        _22 = _print(move _23) -> [return: bb10, unwind: bb14];
    }

    bb10: {
        _55 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        (((*_55) as variant#6).0: i32) = const 7_i32;
        _30 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _30);
        _56 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_56)) = 6;
        return;
    }

    bb11: {
        _36 = [move _37];
        _35 = &_36;
        _34 = _35 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _34) -> [return: bb12, unwind: bb14];
    }

    bb12: {
        _31 = _print(move _32) -> [return: bb13, unwind: bb14];
    }

    bb13: {
        _43 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _43);
        _58 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_58)) = 1;
        return;
    }

    bb14 (cleanup): {
        _59 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        discriminant((*_59)) = 2;
        resume;
    }

    bb15: {
        _42 = const _;
        _6 = _42 as &[&str] (Pointer(Unsize));
        _48 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _11 = &(((*_48) as variant#3).0: i32);
        _10 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_11) -> [return: bb2, unwind: bb14];
    }

    bb16: {
        _41 = const _;
        _15 = _41 as &[&str] (Pointer(Unsize));
        _51 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _20 = &(((*_51) as variant#4).0: i32);
        _19 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_20) -> [return: bb5, unwind: bb14];
    }

    bb17: {
        _40 = const _;
        _24 = _40 as &[&str] (Pointer(Unsize));
        _54 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _29 = &(((*_54) as variant#5).0: i32);
        _28 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_29) -> [return: bb8, unwind: bb14];
    }

    bb18: {
        _39 = const _;
        _33 = _39 as &[&str] (Pointer(Unsize));
        _57 = deref_copy (_1.0: &mut [generator@ui/generator/overlap-locals.rs:6:13: 6:15]);
        _38 = &(((*_57) as variant#6).0: i32);
        _37 = core::fmt::rt::Argument::<'_>::new_debug::<i32>(_38) -> [return: bb11, unwind: bb14];
    }

    bb19: {
        assert(const false, "generator resumed after panicking") -> [success: bb19, unwind continue];
    }

    bb20: {
        assert(const false, "generator resumed after completion") -> [success: bb20, unwind continue];
    }

    bb21: {
        unreachable;
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[3] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
