// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_unpin(_1: G) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/non-static-is-unpin.rs:7:33: 7:33

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/generator/non-static-is-unpin.rs:8:1: 8:2
    }

    bb1: {
        return;                          // scope 0 at ui/generator/non-static-is-unpin.rs:8:2: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/non-static-is-unpin.rs:10:11: 10:11
    let _1: ();                          // in scope 0 at ui/generator/non-static-is-unpin.rs:13:5: 17:7
    let mut _2: [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]; // in scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6

    bb0: {
        _2 = [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20 (#0)]; // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
                                         // generator
                                         // + def_id: DefId(0:9 ~ non_static_is_unpin[a2df]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {std::marker::PhantomPinned, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _1 = assert_unpin::<[generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]>(move _2) -> bb1; // scope 0 at ui/generator/non-static-is-unpin.rs:13:5: 17:7
                                         // mir::Constant
                                         // + span: ui/generator/non-static-is-unpin.rs:13:5: 13:17
                                         // + literal: Const { ty: fn([generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]) {assert_unpin::<[generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/non-static-is-unpin.rs:18:2: 18:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    let mut _3: ();                      // in scope 0 at ui/generator/non-static-is-unpin.rs:15:9: 15:14
    let _4: ();                          // in scope 0 at ui/generator/non-static-is-unpin.rs:16:9: 16:21
    let mut _5: std::marker::PhantomPinned; // in scope 0 at ui/generator/non-static-is-unpin.rs:16:14: 16:20
    let mut _6: ();                      // in scope 0 at ui/generator/non-static-is-unpin.rs:13:21: 13:21
    let mut _7: u32;                     // in scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    let mut _8: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]; // in scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    let mut _9: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]; // in scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    let mut _10: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]; // in scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    let mut _11: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]; // in scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    let mut _12: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]; // in scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    let mut _13: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]; // in scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    scope 1 {
        debug pinned => (((*(_1.0: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20])) as variant#3).0: std::marker::PhantomPinned); // in scope 1 at ui/generator/non-static-is-unpin.rs:14:13: 14:19
    }

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]); // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
        _7 = discriminant((*_8));        // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
        switchInt(move _7) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7]; // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    }

    bb1: {
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]); // scope 0 at ui/generator/non-static-is-unpin.rs:14:22: 14:35
        (((*_9) as variant#3).0: std::marker::PhantomPinned) = PhantomPinned; // scope 0 at ui/generator/non-static-is-unpin.rs:14:22: 14:35
        _3 = ();                         // scope 1 at ui/generator/non-static-is-unpin.rs:15:9: 15:14
        _0 = GeneratorState::<(), ()>::Yielded(move _3); // scope 1 at ui/generator/non-static-is-unpin.rs:15:9: 15:14
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]); // scope 1 at ui/generator/non-static-is-unpin.rs:15:9: 15:14
        discriminant((*_10)) = 3;        // scope 1 at ui/generator/non-static-is-unpin.rs:15:9: 15:14
        return;                          // scope 1 at ui/generator/non-static-is-unpin.rs:15:9: 15:14
    }

    bb2: {
        _6 = const ();                   // scope 0 at ui/generator/non-static-is-unpin.rs:13:21: 17:6
        _0 = GeneratorState::<(), ()>::Complete(move _6); // scope 0 at ui/generator/non-static-is-unpin.rs:17:6: 17:6
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]); // scope 0 at ui/generator/non-static-is-unpin.rs:17:6: 17:6
        discriminant((*_12)) = 1;        // scope 0 at ui/generator/non-static-is-unpin.rs:17:6: 17:6
        return;                          // scope 0 at ui/generator/non-static-is-unpin.rs:17:6: 17:6
    }

    bb3 (cleanup): {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]); // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
        discriminant((*_13)) = 2;        // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
        resume;                          // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    }

    bb4: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/non-static-is-unpin.rs:13:18: 13:20]); // scope 1 at ui/generator/non-static-is-unpin.rs:16:14: 16:20
        _5 = (((*_11) as variant#3).0: std::marker::PhantomPinned); // scope 1 at ui/generator/non-static-is-unpin.rs:16:14: 16:20
        _4 = std::mem::drop::<PhantomPinned>(move _5) -> [return: bb2, unwind: bb3]; // scope 1 at ui/generator/non-static-is-unpin.rs:16:9: 16:21
                                         // mir::Constant
                                         // + span: ui/generator/non-static-is-unpin.rs:16:9: 16:13
                                         // + literal: Const { ty: fn(PhantomPinned) {std::mem::drop::<PhantomPinned>}, val: Value(<ZST>) }
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5; // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/non-static-is-unpin.rs:13:18: 17:6
    }
}
