// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/resume-after-return.rs:11:11: 11:11
    let mut _1: [generator@ui/generator/resume-after-return.rs:12:19: 12:21]; // in scope 0 at ui/generator/resume-after-return.rs:12:9: 12:16
    let mut _2: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/resume-after-return.rs:19:11: 19:40
    let mut _3: std::pin::Pin<&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]>; // in scope 0 at ui/generator/resume-after-return.rs:19:11: 19:29
    let mut _4: &mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]; // in scope 0 at ui/generator/resume-after-return.rs:19:20: 19:28
    let mut _5: ();                      // in scope 0 at ui/generator/resume-after-return.rs:19:37: 19:39
    let mut _6: isize;                   // in scope 0 at ui/generator/resume-after-return.rs:20:9: 20:37
    let mut _8: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _10: &[&str];                // in scope 0 at ui/generator/resume-after-return.rs:21:21: 21:38
    let mut _11: &[&str; 1];             // in scope 0 at ui/generator/resume-after-return.rs:21:21: 21:38
    let _12: &[&str; 1];                 // in scope 0 at ui/generator/resume-after-return.rs:21:21: 21:38
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/generator/resume-after-return.rs:21:40: 21:41
    let mut _18: &std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/resume-after-return.rs:21:40: 21:41
    let _19: &std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/resume-after-return.rs:21:40: 21:41
    let mut _20: std::result::Result<std::ops::GeneratorState<(), ()>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/generator/resume-after-return.rs:24:11: 24:69
    let mut _21: [closure@ui/generator/resume-after-return.rs:24:31: 24:38]; // in scope 0 at ui/generator/resume-after-return.rs:24:31: 24:68
    let mut _22: isize;                  // in scope 0 at ui/generator/resume-after-return.rs:25:9: 25:14
    let mut _23: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/generator/resume-after-return.rs:12:9: 12:16
        let _7: std::ops::GeneratorState<(), ()>; // in scope 1 at ui/generator/resume-after-return.rs:21:9: 21:10
        scope 2 {
            debug s => _7;               // in scope 2 at ui/generator/resume-after-return.rs:21:9: 21:10
            let mut _24: &[&str; 1];     // in scope 2 at ui/generator/resume-after-return.rs:21:21: 21:38
        }
    }

    bb0: {
        _1 = [generator@ui/generator/resume-after-return.rs:12:19: 12:21 (#0)]; // scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
                                         // generator
                                         // + def_id: DefId(0:9 ~ resume_after_return[427c]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _4 = &mut _1;                    // scope 1 at ui/generator/resume-after-return.rs:19:20: 19:28
        _3 = Pin::<&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]>::new(move _4) -> bb1; // scope 1 at ui/generator/resume-after-return.rs:19:11: 19:29
                                         // mir::Constant
                                         // + span: ui/generator/resume-after-return.rs:19:11: 19:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]) -> Pin<&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]> {Pin::<&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <[generator@ui/generator/resume-after-return.rs:12:19: 12:21] as Generator>::resume(move _3, move _5) -> bb2; // scope 1 at ui/generator/resume-after-return.rs:19:11: 19:40
                                         // mir::Constant
                                         // + span: ui/generator/resume-after-return.rs:19:30: 19:36
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]>, ()) -> GeneratorState<<[generator@ui/generator/resume-after-return.rs:12:19: 12:21] as Generator>::Yield, <[generator@ui/generator/resume-after-return.rs:12:19: 12:21] as Generator>::Return> {<[generator@ui/generator/resume-after-return.rs:12:19: 12:21] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_2);           // scope 1 at ui/generator/resume-after-return.rs:19:11: 19:40
        switchInt(move _6) -> [1: bb4, otherwise: bb3]; // scope 1 at ui/generator/resume-after-return.rs:19:5: 19:40
    }

    bb3: {
        _7 = _2;                         // scope 1 at ui/generator/resume-after-return.rs:21:9: 21:10
        _24 = const _;                   // scope 2 at ui/generator/resume-after-return.rs:21:21: 21:38
                                         // mir::Constant
                                         // + span: ui/generator/resume-after-return.rs:21:21: 21:38
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _24;                       // scope 2 at ui/generator/resume-after-return.rs:21:21: 21:38
        _11 = _12;                       // scope 2 at ui/generator/resume-after-return.rs:21:21: 21:38
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 2 at ui/generator/resume-after-return.rs:21:21: 21:38
        _19 = &_7;                       // scope 2 at ui/generator/resume-after-return.rs:21:40: 21:41
        _18 = _19;                       // scope 2 at ui/generator/resume-after-return.rs:21:40: 21:41
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<GeneratorState<(), ()>>(move _18) -> bb5; // scope 2 at ui/generator/resume-after-return.rs:21:40: 21:41
                                         // mir::Constant
                                         // + span: ui/generator/resume-after-return.rs:21:40: 21:41
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b GeneratorState<(), ()>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<GeneratorState<(), ()>>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = [closure@ui/generator/resume-after-return.rs:24:31: 24:38] { foo: move _1 }; // scope 1 at ui/generator/resume-after-return.rs:24:31: 24:68
                                         // closure
                                         // + def_id: DefId(0:10 ~ resume_after_return[427c]::main::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()) -> std::ops::GeneratorState<(), ()>,
                                         //     ([generator@ui/generator/resume-after-return.rs:12:19: 12:21],),
                                         // ]
        _20 = catch_unwind::<[closure@ui/generator/resume-after-return.rs:24:31: 24:38], GeneratorState<(), ()>>(move _21) -> bb7; // scope 1 at ui/generator/resume-after-return.rs:24:11: 24:69
                                         // mir::Constant
                                         // + span: ui/generator/resume-after-return.rs:24:11: 24:30
                                         // + literal: Const { ty: fn([closure@ui/generator/resume-after-return.rs:24:31: 24:38]) -> Result<GeneratorState<(), ()>, Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/generator/resume-after-return.rs:24:31: 24:38], GeneratorState<(), ()>>}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = [move _17];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _15 = &_16;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> bb6; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = panic_fmt(move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = discriminant(_20);         // scope 1 at ui/generator/resume-after-return.rs:24:11: 24:69
        switchInt(move _22) -> [0: bb10, 1: bb8, otherwise: bb9]; // scope 1 at ui/generator/resume-after-return.rs:24:5: 24:69
    }

    bb8: {
        drop(_20) -> bb11;               // scope 0 at ui/generator/resume-after-return.rs:28:1: 28:2
    }

    bb9: {
        unreachable;                     // scope 1 at ui/generator/resume-after-return.rs:24:11: 24:69
    }

    bb10: {
        _23 = begin_panic::<&str>(const "generator successfully resumed") -> bb12; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/generator/resume-after-return.rs:25:25: 25:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        return;                          // scope 0 at ui/generator/resume-after-return.rs:28:2: 28:2
    }

    bb12 (cleanup): {
        drop(_20) -> bb13;               // scope 0 at ui/generator/resume-after-return.rs:28:1: 28:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/generator/resume-after-return.rs:11:1: 28:2
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/generator/resume-after-return.rs:21:21: 21:38
    let mut _1: [&str; 1];               // in scope 0 at ui/generator/resume-after-return.rs:21:21: 21:38

    bb0: {
        _1 = [const "bad state: "];      // scope 0 at ui/generator/resume-after-return.rs:21:21: 21:38
                                         // mir::Constant
                                         // + span: ui/generator/resume-after-return.rs:21:21: 21:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/generator/resume-after-return.rs:21:21: 21:38
        return;                          // scope 0 at ui/generator/resume-after-return.rs:21:21: 21:38
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
    let mut _3: bool;                    // in scope 0 at ui/generator/resume-after-return.rs:13:12: 13:16
    let mut _4: ();                      // in scope 0 at ui/generator/resume-after-return.rs:16:9: 16:14
    let mut _5: ();                      // in scope 0 at ui/generator/resume-after-return.rs:12:22: 12:22
    let mut _6: u32;                     // in scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
    let mut _7: &mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]; // in scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
    let mut _8: &mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]; // in scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
    let mut _9: &mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]; // in scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6

    bb0: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]); // scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
        _6 = discriminant((*_7));        // scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
        switchInt(move _6) -> [0: bb1, 1: bb6, 3: bb5, otherwise: bb7]; // scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
    }

    bb1: {
        _3 = const true;                 // scope 0 at ui/generator/resume-after-return.rs:13:12: 13:16
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/generator/resume-after-return.rs:13:12: 13:16
    }

    bb2: {
        _5 = const ();                   // scope 0 at ui/generator/resume-after-return.rs:14:13: 14:19
        goto -> bb4;                     // scope 0 at ui/generator/resume-after-return.rs:17:6: 17:6
    }

    bb3: {
        _4 = ();                         // scope 0 at ui/generator/resume-after-return.rs:16:9: 16:14
        _0 = GeneratorState::<(), ()>::Yielded(move _4); // scope 0 at ui/generator/resume-after-return.rs:16:9: 16:14
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]); // scope 0 at ui/generator/resume-after-return.rs:16:9: 16:14
        discriminant((*_8)) = 3;         // scope 0 at ui/generator/resume-after-return.rs:16:9: 16:14
        return;                          // scope 0 at ui/generator/resume-after-return.rs:16:9: 16:14
    }

    bb4: {
        _0 = GeneratorState::<(), ()>::Complete(move _5); // scope 0 at ui/generator/resume-after-return.rs:17:6: 17:6
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]); // scope 0 at ui/generator/resume-after-return.rs:17:6: 17:6
        discriminant((*_9)) = 1;         // scope 0 at ui/generator/resume-after-return.rs:17:6: 17:6
        return;                          // scope 0 at ui/generator/resume-after-return.rs:17:6: 17:6
    }

    bb5: {
        _5 = const ();                   // scope 0 at ui/generator/resume-after-return.rs:12:22: 17:6
        goto -> bb4;                     // scope 0 at ui/generator/resume-after-return.rs:17:6: 17:6
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/resume-after-return.rs:12:19: 17:6
    }
}

fn main::{closure#1}(_1: [closure@ui/generator/resume-after-return.rs:24:31: 24:38]) -> GeneratorState<(), ()> {
    debug foo => (_1.0: [generator@ui/generator/resume-after-return.rs:12:19: 12:21]); // in scope 0 at ui/generator/resume-after-return.rs:12:9: 12:16
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/resume-after-return.rs:24:39: 24:39
    let mut _2: std::pin::Pin<&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]>; // in scope 0 at ui/generator/resume-after-return.rs:24:39: 24:57
    let mut _3: &mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]; // in scope 0 at ui/generator/resume-after-return.rs:24:48: 24:56
    let mut _4: ();                      // in scope 0 at ui/generator/resume-after-return.rs:24:65: 24:67

    bb0: {
        _3 = &mut (_1.0: [generator@ui/generator/resume-after-return.rs:12:19: 12:21]); // scope 0 at ui/generator/resume-after-return.rs:24:48: 24:56
        _2 = Pin::<&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]>::new(move _3) -> bb1; // scope 0 at ui/generator/resume-after-return.rs:24:39: 24:57
                                         // mir::Constant
                                         // + span: ui/generator/resume-after-return.rs:24:39: 24:47
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]) -> Pin<&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]> {Pin::<&mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = <[generator@ui/generator/resume-after-return.rs:12:19: 12:21] as Generator>::resume(move _2, move _4) -> bb2; // scope 0 at ui/generator/resume-after-return.rs:24:39: 24:68
                                         // mir::Constant
                                         // + span: ui/generator/resume-after-return.rs:24:58: 24:64
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/resume-after-return.rs:12:19: 12:21]>, ()) -> GeneratorState<<[generator@ui/generator/resume-after-return.rs:12:19: 12:21] as Generator>::Yield, <[generator@ui/generator/resume-after-return.rs:12:19: 12:21] as Generator>::Return> {<[generator@ui/generator/resume-after-return.rs:12:19: 12:21] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generator/resume-after-return.rs:24:68: 24:68
    }
}
