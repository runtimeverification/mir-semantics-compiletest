// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _3: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _4: (&std::ops::GeneratorState<(), ()>, &std::ops::GeneratorState<(), ()>);
    let mut _5: &std::ops::GeneratorState<(), ()>;
    let _6: std::ops::GeneratorState<(), ()>;
    let mut _7: std::pin::Pin<&mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]>;
    let mut _8: &mut std::pin::Pin<&mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]>;
    let mut _11: bool;
    let mut _12: bool;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&std::ops::GeneratorState<(), ()>, &std::ops::GeneratorState<(), ()>);
    let mut _17: &std::ops::GeneratorState<(), ()>;
    let _18: std::ops::GeneratorState<(), ()>;
    let mut _19: std::pin::Pin<&mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]>;
    let mut _20: &mut std::pin::Pin<&mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]>;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug generator => _1;
        let mut _2: std::pin::Pin<&mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]>;
        scope 2 {
            debug generator => _2;
            let _9: &std::ops::GeneratorState<(), ()>;
            let _10: &std::ops::GeneratorState<(), ()>;
            let _21: &std::ops::GeneratorState<(), ()>;
            let _22: &std::ops::GeneratorState<(), ()>;
            let mut _28: &std::ops::GeneratorState<(), ()>;
            let mut _29: &std::ops::GeneratorState<(), ()>;
            scope 4 {
                debug left_val => _9;
                debug right_val => _10;
                let _13: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _13;
                }
            }
            scope 6 {
                debug left_val => _21;
                debug right_val => _22;
                let _25: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _25;
                }
            }
        }
        scope 3 {
        }
    }

    bb0: {
        _1 = [generator@ui/generator/static-generators.rs:9:25: 9:34 (#0)];
        _3 = &mut _1;
        _2 = Pin::<&mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]>::new_unchecked(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &mut _2;
        _7 = Pin::<&mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]>::as_mut(move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = <[static generator@ui/generator/static-generators.rs:9:25: 9:34] as Generator>::resume(move _7, const ()) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = &_6;
        _29 = const _;
        _4 = (move _5, _29);
        _9 = (_4.0: &std::ops::GeneratorState<(), ()>);
        _10 = (_4.1: &std::ops::GeneratorState<(), ()>);
        _12 = <GeneratorState<(), ()> as PartialEq>::eq(_9, _10) -> [return: bb4, unwind continue];
    }

    bb4: {
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<GeneratorState<(), ()>, GeneratorState<(), ()>>(move _13, _9, _10, move _15) -> unwind continue;
    }

    bb6: {
        _20 = &mut _2;
        _19 = Pin::<&mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]>::as_mut(move _20) -> [return: bb7, unwind continue];
    }

    bb7: {
        _18 = <[static generator@ui/generator/static-generators.rs:9:25: 9:34] as Generator>::resume(move _19, const ()) -> [return: bb8, unwind continue];
    }

    bb8: {
        _17 = &_18;
        _28 = const _;
        _16 = (move _17, _28);
        _21 = (_16.0: &std::ops::GeneratorState<(), ()>);
        _22 = (_16.1: &std::ops::GeneratorState<(), ()>);
        _24 = <GeneratorState<(), ()> as PartialEq>::eq(_21, _22) -> [return: bb9, unwind continue];
    }

    bb9: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<GeneratorState<(), ()>, GeneratorState<(), ()>>(move _25, _21, _22, move _27) -> unwind continue;
    }

    bb11: {
        return;
    }
}

promoted[0] in main: &GeneratorState<(), ()> = {
    let mut _0: &std::ops::GeneratorState<(), ()>;
    let mut _1: std::ops::GeneratorState<(), ()>;
    let mut _2: ();

    bb0: {
        _2 = ();
        _1 = GeneratorState::<(), ()>::Complete(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &GeneratorState<(), ()> = {
    let mut _0: &std::ops::GeneratorState<(), ()>;
    let mut _1: std::ops::GeneratorState<(), ()>;
    let mut _2: ();

    bb0: {
        _2 = ();
        _1 = GeneratorState::<(), ()>::Yielded(move _2);
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let mut _3: ();
    let mut _4: (&*const bool, &*const bool);
    let mut _5: &*const bool;
    let _6: *const bool;
    let mut _7: &*const bool;
    let _8: *const bool;
    let _9: &bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: *const bool;
    let mut _15: *const bool;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: ();
    let mut _20: u32;
    let mut _21: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _22: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _23: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _24: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _25: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _26: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _27: &bool;
    let mut _28: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _29: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    let mut _30: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34];
    scope 1 {
        debug a => (((*(_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34])) as variant#3).0: bool);
        scope 2 {
            debug b => (((*(_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34])) as variant#3).1: &bool);
            let _10: &*const bool;
            let _11: &*const bool;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _21 = deref_copy (_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]);
        _20 = discriminant((*_21));
        switchInt(move _20) -> [0: bb1, 1: bb7, 2: bb6, 3: bb5, otherwise: bb8];
    }

    bb1: {
        _22 = deref_copy (_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]);
        (((*_22) as variant#3).0: bool) = const true;
        _23 = deref_copy (_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]);
        _24 = deref_copy (_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]);
        (((*_23) as variant#3).1: &bool) = &(((*_24) as variant#3).0: bool);
        _3 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _3);
        _25 = deref_copy (_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]);
        discriminant((*_25)) = 3;
        return;
    }

    bb2: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<*const bool, *const bool>(move _16, _10, _11, move _18) -> bb4;
    }

    bb3: {
        _19 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _19);
        _29 = deref_copy (_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]);
        discriminant((*_29)) = 1;
        return;
    }

    bb4 (cleanup): {
        _30 = deref_copy (_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]);
        discriminant((*_30)) = 2;
        resume;
    }

    bb5: {
        _26 = deref_copy (_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]);
        _27 = deref_copy (((*_26) as variant#3).1: &bool);
        _6 = &raw const (*_27);
        _5 = &_6;
        _28 = deref_copy (_1.0: &mut [static generator@ui/generator/static-generators.rs:9:25: 9:34]);
        _9 = &(((*_28) as variant#3).0: bool);
        _8 = &raw const (*_9);
        _7 = &_8;
        _4 = (move _5, move _7);
        _10 = (_4.0: &*const bool);
        _11 = (_4.1: &*const bool);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb3, otherwise: bb2];
    }

    bb6: {
        assert(const false, "generator resumed after panicking") -> [success: bb6, unwind continue];
    }

    bb7: {
        assert(const false, "generator resumed after completion") -> [success: bb7, unwind continue];
    }

    bb8: {
        unreachable;
    }
}
