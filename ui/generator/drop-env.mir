// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static A: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/generator/drop-env.rs:12:11: 12:22

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/generator/drop-env.rs:12:25: 12:44
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/generator/drop-env.rs:12:25: 12:44
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:12:25: 12:41
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/drop-env.rs:12:1: 12:45
    }
}

fn <impl at ui/generator/drop-env.rs:16:1: 16:16>::drop(_1: &mut B) -> () {
    debug self => _1;                    // in scope 0 at ui/generator/drop-env.rs:17:13: 17:22
    let mut _0: ();                      // return place in scope 0 at ui/generator/drop-env.rs:17:24: 17:24
    let _2: usize;                       // in scope 0 at ui/generator/drop-env.rs:18:9: 18:41
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:18:9: 18:41
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:18:9: 18:10
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:18:24: 18:40

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/generator/drop-env.rs:18:9: 18:10
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:18:9: 18:10
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/generator/drop-env.rs:18:9: 18:41
        _5 = const SeqCst;               // scope 0 at ui/generator/drop-env.rs:18:24: 18:40
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:18:24: 18:40
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::fetch_add(move _3, const 1_usize, move _5) -> bb1; // scope 0 at ui/generator/drop-env.rs:18:9: 18:41
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:18:11: 18:20
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/drop-env.rs:19:6: 19:6
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/drop-env.rs:22:11: 22:11
    let _1: ();                          // in scope 0 at ui/generator/drop-env.rs:23:5: 23:9
    let _2: ();                          // in scope 0 at ui/generator/drop-env.rs:24:5: 24:9
    let _3: ();                          // in scope 0 at ui/generator/drop-env.rs:25:5: 25:9

    bb0: {
        _1 = t1() -> bb1;                // scope 0 at ui/generator/drop-env.rs:23:5: 23:9
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:23:5: 23:7
                                         // + literal: Const { ty: fn() {t1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = t2() -> bb2;                // scope 0 at ui/generator/drop-env.rs:24:5: 24:9
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:24:5: 24:7
                                         // + literal: Const { ty: fn() {t2}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = t3() -> bb3;                // scope 0 at ui/generator/drop-env.rs:25:5: 25:9
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:25:5: 25:7
                                         // + literal: Const { ty: fn() {t3}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/generator/drop-env.rs:26:2: 26:2
    }
}

fn t1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/drop-env.rs:28:9: 28:9
    let _1: B;                           // in scope 0 at ui/generator/drop-env.rs:29:9: 29:10
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:35:13: 35:37
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:35:13: 35:14
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:35:20: 35:36
    let _7: ();                          // in scope 0 at ui/generator/drop-env.rs:36:5: 36:40
    let mut _8: std::ops::GeneratorState<(), ()>; // in scope 0 at ui/generator/drop-env.rs:36:10: 36:39
    let mut _9: std::pin::Pin<&mut [generator@ui/generator/drop-env.rs:30:19: 30:21]>; // in scope 0 at ui/generator/drop-env.rs:36:10: 36:28
    let mut _10: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]; // in scope 0 at ui/generator/drop-env.rs:36:19: 36:27
    let mut _11: ();                     // in scope 0 at ui/generator/drop-env.rs:36:36: 36:38
    let mut _12: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _13: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _14: usize;                      // in scope 0 at ui/generator/drop-env.rs:37:16: 37:40
    let mut _15: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:37:16: 37:40
    let _16: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:37:16: 37:17
    let mut _17: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:37:23: 37:39
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _23: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _24: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _26: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _27: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _29: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _30: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _31: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _33: ();                         // in scope 0 at ui/generator/drop-env.rs:38:5: 38:14
    let mut _34: [generator@ui/generator/drop-env.rs:30:19: 30:21]; // in scope 0 at ui/generator/drop-env.rs:38:10: 38:13
    let mut _35: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _37: usize;                      // in scope 0 at ui/generator/drop-env.rs:39:16: 39:40
    let mut _38: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:39:16: 39:40
    let _39: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:39:16: 39:17
    let mut _40: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:39:23: 39:39
    let mut _41: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _42: usize;                      // in scope 0 at ui/generator/drop-env.rs:39:42: 39:47
    let mut _43: usize;                  // in scope 0 at ui/generator/drop-env.rs:39:42: 39:43
    let mut _44: (usize, bool);          // in scope 0 at ui/generator/drop-env.rs:39:42: 39:47
    let mut _47: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _49: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _50: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _52: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _53: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _54: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _55: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _56: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _57: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _58: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _59: bool;                   // in scope 0 at ui/generator/drop-env.rs:40:1: 40:2
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/generator/drop-env.rs:29:9: 29:10
        let mut _2: [generator@ui/generator/drop-env.rs:30:19: 30:21]; // in scope 1 at ui/generator/drop-env.rs:30:9: 30:16
        scope 2 {
            debug foo => _2;             // in scope 2 at ui/generator/drop-env.rs:30:9: 30:16
            let _3: usize;               // in scope 2 at ui/generator/drop-env.rs:35:9: 35:10
            scope 3 {
                debug n => _3;           // in scope 3 at ui/generator/drop-env.rs:35:9: 35:10
                let _19: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _20: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _45: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _46: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _19; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _20; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _25: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _25; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _45; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _46; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _51: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _51; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _59 = const false;               // scope 0 at ui/generator/drop-env.rs:29:9: 29:10
        _59 = const true;                // scope 1 at ui/generator/drop-env.rs:30:19: 33:6
        _2 = [generator@ui/generator/drop-env.rs:30:19: 30:21 (#0)] { b: move _1 }; // scope 1 at ui/generator/drop-env.rs:30:19: 33:6
                                         // generator
                                         // + def_id: DefId(0:15 ~ drop_env[8de0]::t1::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (B,),
                                         // ]
                                         // + movability: Movable
        _5 = const {alloc1: &AtomicUsize}; // scope 2 at ui/generator/drop-env.rs:35:13: 35:14
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:35:13: 35:14
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 2 at ui/generator/drop-env.rs:35:13: 35:37
        _6 = const SeqCst;               // scope 2 at ui/generator/drop-env.rs:35:20: 35:36
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:35:20: 35:36
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::load(move _4, move _6) -> [return: bb1, unwind: bb15]; // scope 2 at ui/generator/drop-env.rs:35:13: 35:37
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:35:15: 35:19
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &mut _2;                   // scope 3 at ui/generator/drop-env.rs:36:19: 36:27
        _9 = Pin::<&mut [generator@ui/generator/drop-env.rs:30:19: 30:21]>::new(move _10) -> [return: bb2, unwind: bb15]; // scope 3 at ui/generator/drop-env.rs:36:10: 36:28
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:36:10: 36:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/drop-env.rs:30:19: 30:21]) -> Pin<&mut [generator@ui/generator/drop-env.rs:30:19: 30:21]> {Pin::<&mut [generator@ui/generator/drop-env.rs:30:19: 30:21]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = <[generator@ui/generator/drop-env.rs:30:19: 30:21] as Generator>::resume(move _9, move _11) -> [return: bb3, unwind: bb15]; // scope 3 at ui/generator/drop-env.rs:36:10: 36:39
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:36:29: 36:35
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/drop-env.rs:30:19: 30:21]>, ()) -> GeneratorState<<[generator@ui/generator/drop-env.rs:30:19: 30:21] as Generator>::Yield, <[generator@ui/generator/drop-env.rs:30:19: 30:21] as Generator>::Return> {<[generator@ui/generator/drop-env.rs:30:19: 30:21] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = std::mem::drop::<GeneratorState<(), ()>>(move _8) -> [return: bb4, unwind: bb15]; // scope 3 at ui/generator/drop-env.rs:36:5: 36:40
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:36:5: 36:9
                                         // + literal: Const { ty: fn(GeneratorState<(), ()>) {std::mem::drop::<GeneratorState<(), ()>>}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = const {alloc1: &AtomicUsize}; // scope 3 at ui/generator/drop-env.rs:37:16: 37:17
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:37:16: 37:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _15 = _16;                       // scope 3 at ui/generator/drop-env.rs:37:16: 37:40
        _17 = const SeqCst;              // scope 3 at ui/generator/drop-env.rs:37:23: 37:39
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:37:23: 37:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _14 = AtomicUsize::load(move _15, move _17) -> [return: bb5, unwind: bb15]; // scope 3 at ui/generator/drop-env.rs:37:16: 37:40
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:37:18: 37:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &_14;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _18 = &_3;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _12 = (move _13, move _18);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _19 = (_12.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _20 = (_12.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _23 = (*_19);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _24 = (*_20);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _22 = Eq(move _23, move _24);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _21 = Not(move _22);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _21) -> [0: bb7, otherwise: bb6]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _25 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = _19;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _29;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _20;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _26 = core::panicking::assert_failed::<usize, usize>(move _27, move _28, move _30, move _32) -> bb15; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb7: {
        _59 = const false;               // scope 3 at ui/generator/drop-env.rs:38:10: 38:13
        _34 = move _2;                   // scope 3 at ui/generator/drop-env.rs:38:10: 38:13
        _33 = std::mem::drop::<[generator@ui/generator/drop-env.rs:30:19: 30:21]>(move _34) -> [return: bb8, unwind: bb15]; // scope 3 at ui/generator/drop-env.rs:38:5: 38:14
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:38:5: 38:9
                                         // + literal: Const { ty: fn([generator@ui/generator/drop-env.rs:30:19: 30:21]) {std::mem::drop::<[generator@ui/generator/drop-env.rs:30:19: 30:21]>}, val: Value(<ZST>) }
    }

    bb8: {
        _39 = const {alloc1: &AtomicUsize}; // scope 3 at ui/generator/drop-env.rs:39:16: 39:17
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:39:16: 39:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _38 = _39;                       // scope 3 at ui/generator/drop-env.rs:39:16: 39:40
        _40 = const SeqCst;              // scope 3 at ui/generator/drop-env.rs:39:23: 39:39
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:39:23: 39:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _37 = AtomicUsize::load(move _38, move _40) -> [return: bb9, unwind: bb15]; // scope 3 at ui/generator/drop-env.rs:39:16: 39:40
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:39:18: 39:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb9: {
        _36 = &_37;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = _3;                        // scope 3 at ui/generator/drop-env.rs:39:42: 39:43
        _44 = CheckedAdd(_43, const 1_usize); // scope 3 at ui/generator/drop-env.rs:39:42: 39:47
        assert(!move (_44.1: bool), "attempt to compute `{} + {}`, which would overflow", move _43, const 1_usize) -> [success: bb10, unwind: bb15]; // scope 3 at ui/generator/drop-env.rs:39:42: 39:47
    }

    bb10: {
        _42 = move (_44.0: usize);       // scope 3 at ui/generator/drop-env.rs:39:42: 39:47
        _41 = &_42;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _35 = (move _36, move _41);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _45 = (_35.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _46 = (_35.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _49 = (*_45);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _50 = (*_46);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _48 = Eq(move _49, move _50);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _47 = Not(move _48);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _47) -> [0: bb12, otherwise: bb11]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _51 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _55 = _45;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _54 = _55;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _46;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = _57;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _58 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _52 = core::panicking::assert_failed::<usize, usize>(move _53, move _54, move _56, move _58) -> bb15; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb12: {
        _59 = const false;               // scope 1 at ui/generator/drop-env.rs:40:1: 40:2
        return;                          // scope 0 at ui/generator/drop-env.rs:40:2: 40:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/generator/drop-env.rs:28:1: 40:2
    }

    bb14 (cleanup): {
        drop(_2) -> bb13;                // scope 1 at ui/generator/drop-env.rs:40:1: 40:2
    }

    bb15 (cleanup): {
        switchInt(_59) -> [0: bb13, otherwise: bb14]; // scope 1 at ui/generator/drop-env.rs:40:1: 40:2
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn t1::{closure#0}(_1: Pin<&mut [generator@ui/generator/drop-env.rs:30:19: 30:21]>, _2: ()) -> GeneratorState<(), ()> {
    debug b => ((*(_1.0: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21])).0: B); // in scope 0 at ui/generator/drop-env.rs:29:9: 29:10
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    let mut _3: ();                      // in scope 0 at ui/generator/drop-env.rs:31:9: 31:14
    let _4: ();                          // in scope 0 at ui/generator/drop-env.rs:32:9: 32:16
    let mut _5: B;                       // in scope 0 at ui/generator/drop-env.rs:32:14: 32:15
    let mut _6: ();                      // in scope 0 at ui/generator/drop-env.rs:30:22: 30:22
    let mut _7: u32;                     // in scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    let mut _8: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]; // in scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    let mut _9: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]; // in scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    let mut _10: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]; // in scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    let mut _11: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]; // in scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    let mut _12: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]; // in scope 0 at ui/generator/drop-env.rs:30:19: 33:6

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]); // scope 0 at ui/generator/drop-env.rs:30:19: 33:6
        _7 = discriminant((*_8));        // scope 0 at ui/generator/drop-env.rs:30:19: 33:6
        switchInt(move _7) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7]; // scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    }

    bb1: {
        _3 = ();                         // scope 0 at ui/generator/drop-env.rs:31:9: 31:14
        _0 = GeneratorState::<(), ()>::Yielded(move _3); // scope 0 at ui/generator/drop-env.rs:31:9: 31:14
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]); // scope 0 at ui/generator/drop-env.rs:31:9: 31:14
        discriminant((*_9)) = 3;         // scope 0 at ui/generator/drop-env.rs:31:9: 31:14
        return;                          // scope 0 at ui/generator/drop-env.rs:31:9: 31:14
    }

    bb2: {
        _6 = const ();                   // scope 0 at ui/generator/drop-env.rs:30:22: 33:6
        _0 = GeneratorState::<(), ()>::Complete(move _6); // scope 0 at ui/generator/drop-env.rs:33:6: 33:6
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]); // scope 0 at ui/generator/drop-env.rs:33:6: 33:6
        discriminant((*_11)) = 1;        // scope 0 at ui/generator/drop-env.rs:33:6: 33:6
        return;                          // scope 0 at ui/generator/drop-env.rs:33:6: 33:6
    }

    bb3 (cleanup): {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]); // scope 0 at ui/generator/drop-env.rs:30:19: 33:6
        discriminant((*_12)) = 2;        // scope 0 at ui/generator/drop-env.rs:30:19: 33:6
        resume;                          // scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    }

    bb4: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:30:19: 30:21]); // scope 0 at ui/generator/drop-env.rs:32:14: 32:15
        _5 = move ((*_10).0: B);         // scope 0 at ui/generator/drop-env.rs:32:14: 32:15
        _4 = std::mem::drop::<B>(move _5) -> [return: bb2, unwind: bb3]; // scope 0 at ui/generator/drop-env.rs:32:9: 32:16
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:32:9: 32:13
                                         // + literal: Const { ty: fn(B) {std::mem::drop::<B>}, val: Value(<ZST>) }
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5; // scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/drop-env.rs:30:19: 33:6
    }
}

fn t2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/drop-env.rs:42:9: 42:9
    let _1: B;                           // in scope 0 at ui/generator/drop-env.rs:43:9: 43:10
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:48:13: 48:37
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:48:13: 48:14
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:48:20: 48:36
    let _7: ();                          // in scope 0 at ui/generator/drop-env.rs:49:5: 49:40
    let mut _8: std::ops::GeneratorState<B, ()>; // in scope 0 at ui/generator/drop-env.rs:49:10: 49:39
    let mut _9: std::pin::Pin<&mut [generator@ui/generator/drop-env.rs:44:19: 44:21]>; // in scope 0 at ui/generator/drop-env.rs:49:10: 49:28
    let mut _10: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21]; // in scope 0 at ui/generator/drop-env.rs:49:19: 49:27
    let mut _11: ();                     // in scope 0 at ui/generator/drop-env.rs:49:36: 49:38
    let mut _12: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _13: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _14: usize;                      // in scope 0 at ui/generator/drop-env.rs:50:16: 50:40
    let mut _15: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:50:16: 50:40
    let _16: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:50:16: 50:17
    let mut _17: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:50:23: 50:39
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _19: usize;                      // in scope 0 at ui/generator/drop-env.rs:50:42: 50:47
    let mut _20: usize;                  // in scope 0 at ui/generator/drop-env.rs:50:42: 50:43
    let mut _21: (usize, bool);          // in scope 0 at ui/generator/drop-env.rs:50:42: 50:47
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _36: ();                         // in scope 0 at ui/generator/drop-env.rs:51:5: 51:14
    let mut _37: [generator@ui/generator/drop-env.rs:44:19: 44:21]; // in scope 0 at ui/generator/drop-env.rs:51:10: 51:13
    let mut _38: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _39: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _40: usize;                      // in scope 0 at ui/generator/drop-env.rs:52:16: 52:40
    let mut _41: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:52:16: 52:40
    let _42: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:52:16: 52:17
    let mut _43: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:52:23: 52:39
    let mut _44: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _45: usize;                      // in scope 0 at ui/generator/drop-env.rs:52:42: 52:47
    let mut _46: usize;                  // in scope 0 at ui/generator/drop-env.rs:52:42: 52:43
    let mut _47: (usize, bool);          // in scope 0 at ui/generator/drop-env.rs:52:42: 52:47
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _62: bool;                   // in scope 0 at ui/generator/drop-env.rs:53:1: 53:2
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/generator/drop-env.rs:43:9: 43:10
        let mut _2: [generator@ui/generator/drop-env.rs:44:19: 44:21]; // in scope 1 at ui/generator/drop-env.rs:44:9: 44:16
        scope 2 {
            debug foo => _2;             // in scope 2 at ui/generator/drop-env.rs:44:9: 44:16
            let _3: usize;               // in scope 2 at ui/generator/drop-env.rs:48:9: 48:10
            scope 3 {
                debug n => _3;           // in scope 3 at ui/generator/drop-env.rs:48:9: 48:10
                let _22: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _23: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _48: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _49: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _22; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _23; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _28: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _28; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _48; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _49; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _54: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _54; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _62 = const false;               // scope 0 at ui/generator/drop-env.rs:43:9: 43:10
        _62 = const true;                // scope 1 at ui/generator/drop-env.rs:44:19: 46:6
        _2 = [generator@ui/generator/drop-env.rs:44:19: 44:21 (#0)] { b: move _1 }; // scope 1 at ui/generator/drop-env.rs:44:19: 46:6
                                         // generator
                                         // + def_id: DefId(0:17 ~ drop_env[8de0]::t2::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     B,
                                         //     (),
                                         //     {B, ()},
                                         //     (B,),
                                         // ]
                                         // + movability: Movable
        _5 = const {alloc1: &AtomicUsize}; // scope 2 at ui/generator/drop-env.rs:48:13: 48:14
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:48:13: 48:14
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 2 at ui/generator/drop-env.rs:48:13: 48:37
        _6 = const SeqCst;               // scope 2 at ui/generator/drop-env.rs:48:20: 48:36
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:48:20: 48:36
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::load(move _4, move _6) -> [return: bb1, unwind: bb16]; // scope 2 at ui/generator/drop-env.rs:48:13: 48:37
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:48:15: 48:19
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = &mut _2;                   // scope 3 at ui/generator/drop-env.rs:49:19: 49:27
        _9 = Pin::<&mut [generator@ui/generator/drop-env.rs:44:19: 44:21]>::new(move _10) -> [return: bb2, unwind: bb16]; // scope 3 at ui/generator/drop-env.rs:49:10: 49:28
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:49:10: 49:18
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&mut [generator@ui/generator/drop-env.rs:44:19: 44:21]) -> Pin<&mut [generator@ui/generator/drop-env.rs:44:19: 44:21]> {Pin::<&mut [generator@ui/generator/drop-env.rs:44:19: 44:21]>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = <[generator@ui/generator/drop-env.rs:44:19: 44:21] as Generator>::resume(move _9, move _11) -> [return: bb3, unwind: bb16]; // scope 3 at ui/generator/drop-env.rs:49:10: 49:39
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:49:29: 49:35
                                         // + literal: Const { ty: for<'a> fn(Pin<&'a mut [generator@ui/generator/drop-env.rs:44:19: 44:21]>, ()) -> GeneratorState<<[generator@ui/generator/drop-env.rs:44:19: 44:21] as Generator>::Yield, <[generator@ui/generator/drop-env.rs:44:19: 44:21] as Generator>::Return> {<[generator@ui/generator/drop-env.rs:44:19: 44:21] as Generator>::resume}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = std::mem::drop::<GeneratorState<B, ()>>(move _8) -> [return: bb4, unwind: bb16]; // scope 3 at ui/generator/drop-env.rs:49:5: 49:40
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:49:5: 49:9
                                         // + literal: Const { ty: fn(GeneratorState<B, ()>) {std::mem::drop::<GeneratorState<B, ()>>}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = const {alloc1: &AtomicUsize}; // scope 3 at ui/generator/drop-env.rs:50:16: 50:17
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:50:16: 50:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _15 = _16;                       // scope 3 at ui/generator/drop-env.rs:50:16: 50:40
        _17 = const SeqCst;              // scope 3 at ui/generator/drop-env.rs:50:23: 50:39
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:50:23: 50:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _14 = AtomicUsize::load(move _15, move _17) -> [return: bb5, unwind: bb16]; // scope 3 at ui/generator/drop-env.rs:50:16: 50:40
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:50:18: 50:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &_14;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = _3;                        // scope 3 at ui/generator/drop-env.rs:50:42: 50:43
        _21 = CheckedAdd(_20, const 1_usize); // scope 3 at ui/generator/drop-env.rs:50:42: 50:47
        assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", move _20, const 1_usize) -> [success: bb6, unwind: bb16]; // scope 3 at ui/generator/drop-env.rs:50:42: 50:47
    }

    bb6: {
        _19 = move (_21.0: usize);       // scope 3 at ui/generator/drop-env.rs:50:42: 50:47
        _18 = &_19;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _12 = (move _13, move _18);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_12.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_12.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = (*_22);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = (*_23);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = Eq(move _26, move _27);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _24 = Not(move _25);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<usize, usize>(move _30, move _31, move _33, move _35) -> bb16; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _62 = const false;               // scope 3 at ui/generator/drop-env.rs:51:10: 51:13
        _37 = move _2;                   // scope 3 at ui/generator/drop-env.rs:51:10: 51:13
        _36 = std::mem::drop::<[generator@ui/generator/drop-env.rs:44:19: 44:21]>(move _37) -> [return: bb9, unwind: bb16]; // scope 3 at ui/generator/drop-env.rs:51:5: 51:14
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:51:5: 51:9
                                         // + literal: Const { ty: fn([generator@ui/generator/drop-env.rs:44:19: 44:21]) {std::mem::drop::<[generator@ui/generator/drop-env.rs:44:19: 44:21]>}, val: Value(<ZST>) }
    }

    bb9: {
        _42 = const {alloc1: &AtomicUsize}; // scope 3 at ui/generator/drop-env.rs:52:16: 52:17
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:52:16: 52:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _41 = _42;                       // scope 3 at ui/generator/drop-env.rs:52:16: 52:40
        _43 = const SeqCst;              // scope 3 at ui/generator/drop-env.rs:52:23: 52:39
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:52:23: 52:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _40 = AtomicUsize::load(move _41, move _43) -> [return: bb10, unwind: bb16]; // scope 3 at ui/generator/drop-env.rs:52:16: 52:40
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:52:18: 52:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb10: {
        _39 = &_40;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _46 = _3;                        // scope 3 at ui/generator/drop-env.rs:52:42: 52:43
        _47 = CheckedAdd(_46, const 1_usize); // scope 3 at ui/generator/drop-env.rs:52:42: 52:47
        assert(!move (_47.1: bool), "attempt to compute `{} + {}`, which would overflow", move _46, const 1_usize) -> [success: bb11, unwind: bb16]; // scope 3 at ui/generator/drop-env.rs:52:42: 52:47
    }

    bb11: {
        _45 = move (_47.0: usize);       // scope 3 at ui/generator/drop-env.rs:52:42: 52:47
        _44 = &_45;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _38 = (move _39, move _44);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_38.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_38.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = (*_48);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = (*_49);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = Eq(move _52, move _53);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _50 = Not(move _51);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb13, otherwise: bb12]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _54 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<usize, usize>(move _56, move _57, move _59, move _61) -> bb16; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb13: {
        _62 = const false;               // scope 1 at ui/generator/drop-env.rs:53:1: 53:2
        return;                          // scope 0 at ui/generator/drop-env.rs:53:2: 53:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/generator/drop-env.rs:42:1: 53:2
    }

    bb15 (cleanup): {
        drop(_2) -> bb14;                // scope 1 at ui/generator/drop-env.rs:53:1: 53:2
    }

    bb16 (cleanup): {
        switchInt(_62) -> [0: bb14, otherwise: bb15]; // scope 1 at ui/generator/drop-env.rs:53:1: 53:2
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn t2::{closure#0}(_1: Pin<&mut [generator@ui/generator/drop-env.rs:44:19: 44:21]>, _2: ()) -> GeneratorState<B, ()> {
    debug b => ((*(_1.0: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21])).0: B); // in scope 0 at ui/generator/drop-env.rs:43:9: 43:10
    let mut _0: std::ops::GeneratorState<B, ()>; // return place in scope 0 at ui/generator/drop-env.rs:44:19: 46:6
    let mut _3: B;                       // in scope 0 at ui/generator/drop-env.rs:45:15: 45:16
    let mut _4: ();                      // in scope 0 at ui/generator/drop-env.rs:44:22: 44:22
    let mut _5: u32;                     // in scope 0 at ui/generator/drop-env.rs:44:19: 46:6
    let mut _6: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21]; // in scope 0 at ui/generator/drop-env.rs:44:19: 46:6
    let mut _7: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21]; // in scope 0 at ui/generator/drop-env.rs:44:19: 46:6
    let mut _8: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21]; // in scope 0 at ui/generator/drop-env.rs:44:19: 46:6
    let mut _9: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21]; // in scope 0 at ui/generator/drop-env.rs:44:19: 46:6

    bb0: {
        _6 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21]); // scope 0 at ui/generator/drop-env.rs:44:19: 46:6
        _5 = discriminant((*_6));        // scope 0 at ui/generator/drop-env.rs:44:19: 46:6
        switchInt(move _5) -> [0: bb1, 1: bb4, 2: bb3, 3: bb2, otherwise: bb5]; // scope 0 at ui/generator/drop-env.rs:44:19: 46:6
    }

    bb1: {
        _7 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21]); // scope 0 at ui/generator/drop-env.rs:45:15: 45:16
        _3 = move ((*_7).0: B);          // scope 0 at ui/generator/drop-env.rs:45:15: 45:16
        _0 = GeneratorState::<B, ()>::Yielded(move _3); // scope 0 at ui/generator/drop-env.rs:45:9: 45:16
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21]); // scope 0 at ui/generator/drop-env.rs:45:9: 45:16
        discriminant((*_8)) = 3;         // scope 0 at ui/generator/drop-env.rs:45:9: 45:16
        return;                          // scope 0 at ui/generator/drop-env.rs:45:9: 45:16
    }

    bb2: {
        _4 = const ();                   // scope 0 at ui/generator/drop-env.rs:44:22: 46:6
        _0 = GeneratorState::<B, ()>::Complete(move _4); // scope 0 at ui/generator/drop-env.rs:46:6: 46:6
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:44:19: 44:21]); // scope 0 at ui/generator/drop-env.rs:46:6: 46:6
        discriminant((*_9)) = 1;         // scope 0 at ui/generator/drop-env.rs:46:6: 46:6
        return;                          // scope 0 at ui/generator/drop-env.rs:46:6: 46:6
    }

    bb3: {
        assert(const false, "generator resumed after panicking") -> bb3; // scope 0 at ui/generator/drop-env.rs:44:19: 46:6
    }

    bb4: {
        assert(const false, "generator resumed after completion") -> bb4; // scope 0 at ui/generator/drop-env.rs:44:19: 46:6
    }

    bb5: {
        unreachable;                     // scope 0 at ui/generator/drop-env.rs:44:19: 46:6
    }
}

fn t3() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/drop-env.rs:55:9: 55:9
    let _1: B;                           // in scope 0 at ui/generator/drop-env.rs:56:9: 56:10
    let mut _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:62:13: 62:37
    let _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:62:13: 62:14
    let mut _6: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:62:20: 62:36
    let mut _7: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _9: usize;                       // in scope 0 at ui/generator/drop-env.rs:63:16: 63:40
    let mut _10: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:63:16: 63:40
    let _11: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:63:16: 63:17
    let mut _12: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:63:23: 63:39
    let mut _13: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _28: ();                         // in scope 0 at ui/generator/drop-env.rs:64:5: 64:14
    let mut _29: [generator@ui/generator/drop-env.rs:57:15: 57:17]; // in scope 0 at ui/generator/drop-env.rs:64:10: 64:13
    let mut _30: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _31: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _32: usize;                      // in scope 0 at ui/generator/drop-env.rs:65:16: 65:40
    let mut _33: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:65:16: 65:40
    let _34: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/generator/drop-env.rs:65:16: 65:17
    let mut _35: std::sync::atomic::Ordering; // in scope 0 at ui/generator/drop-env.rs:65:23: 65:39
    let mut _36: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _37: usize;                      // in scope 0 at ui/generator/drop-env.rs:65:42: 65:47
    let mut _38: usize;                  // in scope 0 at ui/generator/drop-env.rs:65:42: 65:43
    let mut _39: (usize, bool);          // in scope 0 at ui/generator/drop-env.rs:65:42: 65:47
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _44: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _45: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _47: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _48: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _49: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _50: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _51: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _52: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _54: bool;                   // in scope 0 at ui/generator/drop-env.rs:66:1: 66:2
    scope 1 {
        debug b => _1;                   // in scope 1 at ui/generator/drop-env.rs:56:9: 56:10
        let _2: [generator@ui/generator/drop-env.rs:57:15: 57:17]; // in scope 1 at ui/generator/drop-env.rs:57:9: 57:12
        scope 2 {
            debug foo => _2;             // in scope 2 at ui/generator/drop-env.rs:57:9: 57:12
            let _3: usize;               // in scope 2 at ui/generator/drop-env.rs:62:9: 62:10
            scope 3 {
                debug n => _3;           // in scope 3 at ui/generator/drop-env.rs:62:9: 62:10
                let _14: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _15: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _40: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _41: &usize;         // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 4 {
                    debug left_val => _14; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _15; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _20: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _20; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug left_val => _40; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _41; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _46: core::panicking::AssertKind; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 7 {
                        debug kind => _46; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _54 = const false;               // scope 0 at ui/generator/drop-env.rs:56:9: 56:10
        _54 = const true;                // scope 1 at ui/generator/drop-env.rs:57:15: 60:6
        _2 = [generator@ui/generator/drop-env.rs:57:15: 57:17 (#0)] { b: move _1 }; // scope 1 at ui/generator/drop-env.rs:57:15: 60:6
                                         // generator
                                         // + def_id: DefId(0:19 ~ drop_env[8de0]::t3::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (B,),
                                         // ]
                                         // + movability: Movable
        _5 = const {alloc1: &AtomicUsize}; // scope 2 at ui/generator/drop-env.rs:62:13: 62:14
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:62:13: 62:14
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _4 = _5;                         // scope 2 at ui/generator/drop-env.rs:62:13: 62:37
        _6 = const SeqCst;               // scope 2 at ui/generator/drop-env.rs:62:20: 62:36
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:62:20: 62:36
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _3 = AtomicUsize::load(move _4, move _6) -> [return: bb1, unwind: bb12]; // scope 2 at ui/generator/drop-env.rs:62:13: 62:37
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:62:15: 62:19
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = const {alloc1: &AtomicUsize}; // scope 3 at ui/generator/drop-env.rs:63:16: 63:17
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:63:16: 63:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _10 = _11;                       // scope 3 at ui/generator/drop-env.rs:63:16: 63:40
        _12 = const SeqCst;              // scope 3 at ui/generator/drop-env.rs:63:23: 63:39
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:63:23: 63:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _9 = AtomicUsize::load(move _10, move _12) -> [return: bb2, unwind: bb12]; // scope 3 at ui/generator/drop-env.rs:63:16: 63:40
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:63:18: 63:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = &_9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _13 = &_3;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _13);        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_7.0: &usize);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_7.1: &usize);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = (*_14);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = (*_15);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = Eq(move _18, move _19);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _16 = Not(move _17);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<usize, usize>(move _22, move _23, move _25, move _27) -> bb12; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _54 = const false;               // scope 3 at ui/generator/drop-env.rs:64:10: 64:13
        _29 = move _2;                   // scope 3 at ui/generator/drop-env.rs:64:10: 64:13
        _28 = std::mem::drop::<[generator@ui/generator/drop-env.rs:57:15: 57:17]>(move _29) -> [return: bb5, unwind: bb12]; // scope 3 at ui/generator/drop-env.rs:64:5: 64:14
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:64:5: 64:9
                                         // + literal: Const { ty: fn([generator@ui/generator/drop-env.rs:57:15: 57:17]) {std::mem::drop::<[generator@ui/generator/drop-env.rs:57:15: 57:17]>}, val: Value(<ZST>) }
    }

    bb5: {
        _34 = const {alloc1: &AtomicUsize}; // scope 3 at ui/generator/drop-env.rs:65:16: 65:17
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:65:16: 65:17
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _33 = _34;                       // scope 3 at ui/generator/drop-env.rs:65:16: 65:40
        _35 = const SeqCst;              // scope 3 at ui/generator/drop-env.rs:65:23: 65:39
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:65:23: 65:39
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _32 = AtomicUsize::load(move _33, move _35) -> [return: bb6, unwind: bb12]; // scope 3 at ui/generator/drop-env.rs:65:16: 65:40
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:65:18: 65:22
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb6: {
        _31 = &_32;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _38 = _3;                        // scope 3 at ui/generator/drop-env.rs:65:42: 65:43
        _39 = CheckedAdd(_38, const 1_usize); // scope 3 at ui/generator/drop-env.rs:65:42: 65:47
        assert(!move (_39.1: bool), "attempt to compute `{} + {}`, which would overflow", move _38, const 1_usize) -> [success: bb7, unwind: bb12]; // scope 3 at ui/generator/drop-env.rs:65:42: 65:47
    }

    bb7: {
        _37 = move (_39.0: usize);       // scope 3 at ui/generator/drop-env.rs:65:42: 65:47
        _36 = &_37;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _30 = (move _31, move _36);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _40 = (_30.0: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _41 = (_30.1: &usize);           // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _44 = (*_40);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _45 = (*_41);                    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _43 = Eq(move _44, move _45);    // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _42 = Not(move _43);             // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _42) -> [0: bb9, otherwise: bb8]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _46 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _50 = _40;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _50;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _41;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = _52;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _53 = Option::<Arguments<'_>>::None; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _47 = core::panicking::assert_failed::<usize, usize>(move _48, move _49, move _51, move _53) -> bb12; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _54 = const false;               // scope 1 at ui/generator/drop-env.rs:66:1: 66:2
        return;                          // scope 0 at ui/generator/drop-env.rs:66:2: 66:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/generator/drop-env.rs:55:1: 66:2
    }

    bb11 (cleanup): {
        drop(_2) -> bb10;                // scope 1 at ui/generator/drop-env.rs:66:1: 66:2
    }

    bb12 (cleanup): {
        switchInt(_54) -> [0: bb10, otherwise: bb11]; // scope 1 at ui/generator/drop-env.rs:66:1: 66:2
    }
}

alloc1 (static: A, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}

fn t3::{closure#0}(_1: Pin<&mut [generator@ui/generator/drop-env.rs:57:15: 57:17]>, _2: ()) -> GeneratorState<(), ()> {
    debug b => ((*(_1.0: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17])).0: B); // in scope 0 at ui/generator/drop-env.rs:56:9: 56:10
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    let mut _3: ();                      // in scope 0 at ui/generator/drop-env.rs:58:9: 58:14
    let _4: ();                          // in scope 0 at ui/generator/drop-env.rs:59:9: 59:16
    let mut _5: B;                       // in scope 0 at ui/generator/drop-env.rs:59:14: 59:15
    let mut _6: ();                      // in scope 0 at ui/generator/drop-env.rs:57:18: 57:18
    let mut _7: u32;                     // in scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    let mut _8: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]; // in scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    let mut _9: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]; // in scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    let mut _10: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]; // in scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    let mut _11: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]; // in scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    let mut _12: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]; // in scope 0 at ui/generator/drop-env.rs:57:15: 60:6

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]); // scope 0 at ui/generator/drop-env.rs:57:15: 60:6
        _7 = discriminant((*_8));        // scope 0 at ui/generator/drop-env.rs:57:15: 60:6
        switchInt(move _7) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7]; // scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    }

    bb1: {
        _3 = ();                         // scope 0 at ui/generator/drop-env.rs:58:9: 58:14
        _0 = GeneratorState::<(), ()>::Yielded(move _3); // scope 0 at ui/generator/drop-env.rs:58:9: 58:14
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]); // scope 0 at ui/generator/drop-env.rs:58:9: 58:14
        discriminant((*_9)) = 3;         // scope 0 at ui/generator/drop-env.rs:58:9: 58:14
        return;                          // scope 0 at ui/generator/drop-env.rs:58:9: 58:14
    }

    bb2: {
        _6 = const ();                   // scope 0 at ui/generator/drop-env.rs:57:18: 60:6
        _0 = GeneratorState::<(), ()>::Complete(move _6); // scope 0 at ui/generator/drop-env.rs:60:6: 60:6
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]); // scope 0 at ui/generator/drop-env.rs:60:6: 60:6
        discriminant((*_11)) = 1;        // scope 0 at ui/generator/drop-env.rs:60:6: 60:6
        return;                          // scope 0 at ui/generator/drop-env.rs:60:6: 60:6
    }

    bb3 (cleanup): {
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]); // scope 0 at ui/generator/drop-env.rs:57:15: 60:6
        discriminant((*_12)) = 2;        // scope 0 at ui/generator/drop-env.rs:57:15: 60:6
        resume;                          // scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    }

    bb4: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/drop-env.rs:57:15: 57:17]); // scope 0 at ui/generator/drop-env.rs:59:14: 59:15
        _5 = move ((*_10).0: B);         // scope 0 at ui/generator/drop-env.rs:59:14: 59:15
        _4 = std::mem::drop::<B>(move _5) -> [return: bb2, unwind: bb3]; // scope 0 at ui/generator/drop-env.rs:59:9: 59:16
                                         // mir::Constant
                                         // + span: ui/generator/drop-env.rs:59:9: 59:13
                                         // + literal: Const { ty: fn(B) {std::mem::drop::<B>}, val: Value(<ZST>) }
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> bb5; // scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> bb6; // scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    }

    bb7: {
        unreachable;                     // scope 0 at ui/generator/drop-env.rs:57:15: 60:6
    }
}
