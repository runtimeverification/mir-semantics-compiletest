// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_generator(_1: G) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/pin-box-generator.rs:7:41: 7:41

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/generator/pin-box-generator.rs:8:1: 8:2
    }

    bb1: {
        return;                          // scope 0 at ui/generator/pin-box-generator.rs:8:2: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/pin-box-generator.rs:10:11: 10:11
    let _1: ();                          // in scope 0 at ui/generator/pin-box-generator.rs:11:5: 11:38
    let mut _2: [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]; // in scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
    let _3: ();                          // in scope 0 at ui/generator/pin-box-generator.rs:12:5: 12:48
    let mut _4: std::pin::Pin<std::boxed::Box<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>>; // in scope 0 at ui/generator/pin-box-generator.rs:12:22: 12:47
    let mut _5: [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]; // in scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46

    bb0: {
        _2 = [generator@ui/generator/pin-box-generator.rs:11:22: 11:31 (#0)]; // scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
                                         // generator
                                         // + def_id: DefId(0:7 ~ pin_box_generator[5c2d]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _1 = assert_generator::<[static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]>(move _2) -> bb1; // scope 0 at ui/generator/pin-box-generator.rs:11:5: 11:38
                                         // mir::Constant
                                         // + span: ui/generator/pin-box-generator.rs:11:5: 11:21
                                         // + literal: Const { ty: fn([static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]) {assert_generator::<[static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = [generator@ui/generator/pin-box-generator.rs:12:31: 12:40 (#0)]; // scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
                                         // generator
                                         // + def_id: DefId(0:8 ~ pin_box_generator[5c2d]::main::{closure#1})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {()},
                                         //     (),
                                         // ]
                                         // + movability: Static
        _4 = Box::<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>::pin(move _5) -> bb2; // scope 0 at ui/generator/pin-box-generator.rs:12:22: 12:47
                                         // mir::Constant
                                         // + span: ui/generator/pin-box-generator.rs:12:22: 12:30
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn([static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]) -> Pin<Box<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>> {Box::<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>::pin}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = assert_generator::<Pin<Box<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>>>(move _4) -> bb3; // scope 0 at ui/generator/pin-box-generator.rs:12:5: 12:48
                                         // mir::Constant
                                         // + span: ui/generator/pin-box-generator.rs:12:5: 12:21
                                         // + literal: Const { ty: fn(Pin<Box<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>>) {assert_generator::<Pin<Box<[static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>>>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/generator/pin-box-generator.rs:13:2: 13:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
    let mut _3: ();                      // in scope 0 at ui/generator/pin-box-generator.rs:11:32: 11:37
    let mut _4: ();                      // in scope 0 at ui/generator/pin-box-generator.rs:11:32: 11:32
    let mut _5: u32;                     // in scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
    let mut _6: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]; // in scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
    let mut _7: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]; // in scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
    let mut _8: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]; // in scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37

    bb0: {
        _6 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]); // scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
        _5 = discriminant((*_6));        // scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
        switchInt(move _5) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4]; // scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
    }

    bb1: {
        _3 = ();                         // scope 0 at ui/generator/pin-box-generator.rs:11:32: 11:37
        _0 = GeneratorState::<(), ()>::Yielded(move _3); // scope 0 at ui/generator/pin-box-generator.rs:11:32: 11:37
        _7 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]); // scope 0 at ui/generator/pin-box-generator.rs:11:32: 11:37
        discriminant((*_7)) = 3;         // scope 0 at ui/generator/pin-box-generator.rs:11:32: 11:37
        return;                          // scope 0 at ui/generator/pin-box-generator.rs:11:32: 11:37
    }

    bb2: {
        _4 = move _2;                    // scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
        _0 = GeneratorState::<(), ()>::Complete(move _4); // scope 0 at ui/generator/pin-box-generator.rs:11:37: 11:37
        _8 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:11:22: 11:31]); // scope 0 at ui/generator/pin-box-generator.rs:11:37: 11:37
        discriminant((*_8)) = 1;         // scope 0 at ui/generator/pin-box-generator.rs:11:37: 11:37
        return;                          // scope 0 at ui/generator/pin-box-generator.rs:11:37: 11:37
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3; // scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
    }

    bb4: {
        unreachable;                     // scope 0 at ui/generator/pin-box-generator.rs:11:22: 11:37
    }
}

fn main::{closure#1}(_1: Pin<&mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
    let mut _3: ();                      // in scope 0 at ui/generator/pin-box-generator.rs:12:41: 12:46
    let mut _4: ();                      // in scope 0 at ui/generator/pin-box-generator.rs:12:41: 12:41
    let mut _5: u32;                     // in scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
    let mut _6: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]; // in scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
    let mut _7: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]; // in scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
    let mut _8: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]; // in scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46

    bb0: {
        _6 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]); // scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
        _5 = discriminant((*_6));        // scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
        switchInt(move _5) -> [0: bb1, 1: bb3, 3: bb2, otherwise: bb4]; // scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
    }

    bb1: {
        _3 = ();                         // scope 0 at ui/generator/pin-box-generator.rs:12:41: 12:46
        _0 = GeneratorState::<(), ()>::Yielded(move _3); // scope 0 at ui/generator/pin-box-generator.rs:12:41: 12:46
        _7 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]); // scope 0 at ui/generator/pin-box-generator.rs:12:41: 12:46
        discriminant((*_7)) = 3;         // scope 0 at ui/generator/pin-box-generator.rs:12:41: 12:46
        return;                          // scope 0 at ui/generator/pin-box-generator.rs:12:41: 12:46
    }

    bb2: {
        _4 = move _2;                    // scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
        _0 = GeneratorState::<(), ()>::Complete(move _4); // scope 0 at ui/generator/pin-box-generator.rs:12:46: 12:46
        _8 = deref_copy (_1.0: &mut [static generator@ui/generator/pin-box-generator.rs:12:31: 12:40]); // scope 0 at ui/generator/pin-box-generator.rs:12:46: 12:46
        discriminant((*_8)) = 1;         // scope 0 at ui/generator/pin-box-generator.rs:12:46: 12:46
        return;                          // scope 0 at ui/generator/pin-box-generator.rs:12:46: 12:46
    }

    bb3: {
        assert(const false, "generator resumed after completion") -> bb3; // scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
    }

    bb4: {
        unreachable;                     // scope 0 at ui/generator/pin-box-generator.rs:12:31: 12:46
    }
}
