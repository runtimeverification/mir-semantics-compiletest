// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn assert_send(_1: T) -> () {
    debug _thing => _1;                  // in scope 0 at ui/generator/derived-drop-parent-expr.rs:7:25: 7:31
    let mut _0: ();                      // return place in scope 0 at ui/generator/derived-drop-parent-expr.rs:7:36: 7:36

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/generator/derived-drop-parent-expr.rs:7:37: 7:38
    }

    bb1: {
        return;                          // scope 0 at ui/generator/derived-drop-parent-expr.rs:7:38: 7:38
    }
}

fn <impl at ui/generator/derived-drop-parent-expr.rs:9:10: 9:17>::default() -> Client {
    let mut _0: Client;                  // return place in scope 0 at ui/generator/derived-drop-parent-expr.rs:9:10: 9:17
    let mut _1: std::string::String;     // in scope 0 at ui/generator/derived-drop-parent-expr.rs:10:21: 10:41

    bb0: {
        _1 = <String as Default>::default() -> bb1; // scope 0 at ui/generator/derived-drop-parent-expr.rs:10:21: 10:41
                                         // mir::Constant
                                         // + span: ui/generator/derived-drop-parent-expr.rs:10:21: 10:41
                                         // + literal: Const { ty: fn() -> String {<String as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Client { nickname: move _1 }; // scope 0 at ui/generator/derived-drop-parent-expr.rs:9:10: 9:17
        return;                          // scope 0 at ui/generator/derived-drop-parent-expr.rs:9:17: 9:17
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generator/derived-drop-parent-expr.rs:12:11: 12:11
    let _1: [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]; // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:9: 13:10
    let _2: ();                          // in scope 0 at ui/generator/derived-drop-parent-expr.rs:16:5: 16:19
    let mut _3: [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]; // in scope 0 at ui/generator/derived-drop-parent-expr.rs:16:17: 16:18
    scope 1 {
        debug g => _1;                   // in scope 1 at ui/generator/derived-drop-parent-expr.rs:13:9: 13:10
    }

    bb0: {
        _1 = [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20 (#0)]; // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
                                         // generator
                                         // + def_id: DefId(0:6 ~ derived_drop_parent_expr[4d07]::main::{closure#0})
                                         // + substs: [
                                         //     (),
                                         //     (),
                                         //     (),
                                         //     {Client, ()},
                                         //     (),
                                         // ]
                                         // + movability: Movable
        _3 = move _1;                    // scope 1 at ui/generator/derived-drop-parent-expr.rs:16:17: 16:18
        _2 = assert_send::<[generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]>(move _3) -> bb1; // scope 1 at ui/generator/derived-drop-parent-expr.rs:16:5: 16:19
                                         // mir::Constant
                                         // + span: ui/generator/derived-drop-parent-expr.rs:16:5: 16:16
                                         // + literal: Const { ty: fn([generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]) {assert_send::<[generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generator/derived-drop-parent-expr.rs:17:2: 17:2
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    let mut _3: ();                      // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:27: 13:63
    let mut _4: Client;                  // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:32: 13:62
    let mut _5: Client;                  // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:43: 13:60
    let _6: ();                          // in scope 0 at ui/generator/derived-drop-parent-expr.rs:14:9: 14:16
    let mut _7: ();                      // in scope 0 at ui/generator/derived-drop-parent-expr.rs:14:20: 14:25
    let mut _8: ();                      // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:21: 13:21
    let mut _9: u32;                     // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    let mut _10: &mut [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]; // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    let mut _11: &mut [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]; // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    let mut _12: &mut [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]; // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    let mut _13: &mut [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]; // in scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    scope 1 {
        debug _status => _6;             // in scope 1 at ui/generator/derived-drop-parent-expr.rs:14:9: 14:16
    }

    bb0: {
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]); // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
        _9 = discriminant((*_10));       // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
        switchInt(move _9) -> [0: bb1, 1: bb7, 2: bb6, 3: bb5, otherwise: bb8]; // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    }

    bb1: {
        _5 = <Client as Default>::default() -> [return: bb2, unwind: bb4]; // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:43: 13:60
                                         // mir::Constant
                                         // + span: ui/generator/derived-drop-parent-expr.rs:13:43: 13:58
                                         // + literal: Const { ty: fn() -> Client {<Client as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Client { nickname: move (_5.0: std::string::String) }; // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:32: 13:62
        _3 = std::mem::drop::<Client>(move _4) -> [return: bb3, unwind: bb4]; // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:27: 13:63
                                         // mir::Constant
                                         // + span: ui/generator/derived-drop-parent-expr.rs:13:27: 13:31
                                         // + literal: Const { ty: fn(Client) {std::mem::drop::<Client>}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = _3;                         // scope 0 at ui/generator/derived-drop-parent-expr.rs:14:9: 14:16
        _7 = ();                         // scope 1 at ui/generator/derived-drop-parent-expr.rs:14:20: 14:25
        _0 = GeneratorState::<(), ()>::Yielded(move _7); // scope 1 at ui/generator/derived-drop-parent-expr.rs:14:20: 14:25
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]); // scope 1 at ui/generator/derived-drop-parent-expr.rs:14:20: 14:25
        discriminant((*_11)) = 3;        // scope 1 at ui/generator/derived-drop-parent-expr.rs:14:20: 14:25
        return;                          // scope 1 at ui/generator/derived-drop-parent-expr.rs:14:20: 14:25
    }

    bb4 (cleanup): {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]); // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
        discriminant((*_13)) = 2;        // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
        resume;                          // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    }

    bb5: {
        _8 = move _2;                    // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
        _0 = GeneratorState::<(), ()>::Complete(move _8); // scope 0 at ui/generator/derived-drop-parent-expr.rs:15:6: 15:6
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/derived-drop-parent-expr.rs:13:13: 13:20]); // scope 0 at ui/generator/derived-drop-parent-expr.rs:15:6: 15:6
        discriminant((*_12)) = 1;        // scope 0 at ui/generator/derived-drop-parent-expr.rs:15:6: 15:6
        return;                          // scope 0 at ui/generator/derived-drop-parent-expr.rs:15:6: 15:6
    }

    bb6: {
        assert(const false, "generator resumed after panicking") -> bb6; // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    }

    bb7: {
        assert(const false, "generator resumed after completion") -> bb7; // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    }

    bb8: {
        unreachable;                     // scope 0 at ui/generator/derived-drop-parent-expr.rs:13:13: 15:6
    }
}
