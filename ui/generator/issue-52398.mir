// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generator/issue-52398.rs:10:1: 10:7>::test(_1: &A, _2: ()) -> () {
    debug self => _1;
    debug a => const ();
    let mut _0: ();

    bb0: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::cell::RefCell<bool>;
    let _2: [static generator@ui/generator/issue-52398.rs:24:5: 24:19];
    scope 1 {
        debug y => _1;
    }

    bb0: {
        _1 = RefCell::<bool>::new(const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = [generator@ui/generator/issue-52398.rs:24:5: 24:19 (#0)] { y: move _1 };
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn main::{closure#0}(_1: Pin<&mut [generator@ui/generator/issue-52398.rs:17:5: 17:12]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>;
    let _3: ();
    let mut _4: ();
    let mut _5: &A;
    let mut _6: ();
    let mut _7: u32;
    let mut _8: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12];
    let mut _9: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12];
    let mut _10: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12];
    let mut _11: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12];
    let mut _12: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12];
    let mut _13: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12];

    bb0: {
        _8 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12]);
        _7 = discriminant((*_8));
        switchInt(move _7) -> [0: bb1, 1: bb6, 2: bb5, 3: bb4, otherwise: bb7];
    }

    bb1: {
        _5 = const _;
        _9 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12]);
        (((*_9) as variant#3).0: &A) = _5;
        _4 = ();
        _0 = GeneratorState::<(), ()>::Yielded(move _4);
        _10 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12]);
        discriminant((*_10)) = 3;
        return;
    }

    bb2: {
        _6 = const ();
        _0 = GeneratorState::<(), ()>::Complete(move _6);
        _12 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12]);
        discriminant((*_12)) = 1;
        return;
    }

    bb3 (cleanup): {
        _13 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12]);
        discriminant((*_13)) = 2;
        resume;
    }

    bb4: {
        _11 = deref_copy (_1.0: &mut [generator@ui/generator/issue-52398.rs:17:5: 17:12]);
        _3 = A::test(move (((*_11) as variant#3).0: &A), move _2) -> [return: bb2, unwind: bb3];
    }

    bb5: {
        assert(const false, "generator resumed after panicking") -> [success: bb5, unwind continue];
    }

    bb6: {
        assert(const false, "generator resumed after completion") -> [success: bb6, unwind continue];
    }

    bb7: {
        unreachable;
    }
}

promoted[0] in main::{closure#0}: &A = {
    let mut _0: &A;
    let mut _1: A;

    bb0: {
        _1 = A;
        _0 = &_1;
        return;
    }
}

fn main::{closure#1}(_1: Pin<&mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]>, _2: ()) -> GeneratorState<bool, &str> {
    debug y => ((*(_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19])).0: std::cell::RefCell<bool>);
    let mut _0: std::ops::GeneratorState<bool, &str>;
    let mut _3: bool;
    let mut _4: &bool;
    let mut _5: &std::cell::Ref<'_, bool>;
    let mut _6: &std::cell::RefCell<bool>;
    let mut _7: &str;
    let mut _8: u32;
    let mut _9: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19];
    let mut _10: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19];
    let mut _11: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19];
    let mut _12: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19];
    let mut _13: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19];
    let mut _14: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19];
    let mut _15: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19];
    let mut _16: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19];
    let mut _17: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19];

    bb0: {
        _9 = deref_copy (_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]);
        _8 = discriminant((*_9));
        switchInt(move _8) -> [0: bb1, 1: bb9, 2: bb8, 3: bb7, otherwise: bb10];
    }

    bb1: {
        _10 = deref_copy (_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]);
        _6 = &((*_10).0: std::cell::RefCell<bool>);
        _11 = deref_copy (_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]);
        (((*_11) as variant#3).0: std::cell::Ref<'_, bool>) = RefCell::<bool>::borrow(move _6) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _12 = deref_copy (_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]);
        _5 = &(((*_12) as variant#3).0: std::cell::Ref<'_, bool>);
        _4 = <Ref<'_, bool> as Deref>::deref(move _5) -> [return: bb3, unwind: bb5];
    }

    bb3: {
        _3 = (*_4);
        _0 = GeneratorState::<bool, &str>::Yielded(move _3);
        _13 = deref_copy (_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]);
        discriminant((*_13)) = 3;
        return;
    }

    bb4: {
        _7 = const "Done";
        _0 = GeneratorState::<bool, &str>::Complete(move _7);
        _15 = deref_copy (_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]);
        discriminant((*_15)) = 1;
        return;
    }

    bb5 (cleanup): {
        _16 = deref_copy (_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]);
        drop((((*_16) as variant#3).0: std::cell::Ref<'_, bool>)) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        _17 = deref_copy (_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]);
        discriminant((*_17)) = 2;
        resume;
    }

    bb7: {
        _14 = deref_copy (_1.0: &mut [static generator@ui/generator/issue-52398.rs:24:5: 24:19]);
        drop((((*_14) as variant#3).0: std::cell::Ref<'_, bool>)) -> [return: bb4, unwind: bb6];
    }

    bb8: {
        assert(const false, "generator resumed after panicking") -> [success: bb8, unwind continue];
    }

    bb9: {
        assert(const false, "generator resumed after completion") -> [success: bb9, unwind continue];
    }

    bb10: {
        unreachable;
    }
}
