// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: &std::option::Option<&str>;

    bb0: {
        _4 = const _;
        _2 = Option::<&str>::is_none(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: option_env!(\\\"__HOPEFULLY_DOESNT_EXIST__\\\").is_none()") -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &Option<&str> = {
    let mut _0: &std::option::Option<&str>;
    let mut _1: std::option::Option<&str>;

    bb0: {
        _1 = Option::<&str>::None;
        _0 = &_1;
        return;
    }
}
