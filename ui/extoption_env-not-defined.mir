// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/extoption_env-not-defined.rs:3:15: 3:15
    let mut _1: bool;                    // in scope 0 at ui/extoption_env-not-defined.rs:4:5: 4:65
    let mut _2: bool;                    // in scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:64
    let mut _3: &std::option::Option<&str>; // in scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:64
    let mut _4: !;                       // in scope 0 at ui/extoption_env-not-defined.rs:4:5: 4:65
    let mut _5: &std::option::Option<&str>; // in scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:64

    bb0: {
        _5 = const _;                    // scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:64
                                         // mir::Constant
                                         // + span: ui/extoption_env-not-defined.rs:4:13: 4:64
                                         // + literal: Const { ty: &Option<&str>, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _5;                         // scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:64
        _2 = Option::<&str>::is_none(move _3) -> bb1; // scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:64
                                         // mir::Constant
                                         // + span: ui/extoption_env-not-defined.rs:4:55: 4:62
                                         // + literal: Const { ty: for<'a> fn(&'a Option<&str>) -> bool {Option::<&str>::is_none}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/extoption_env-not-defined.rs:4:5: 4:65
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/extoption_env-not-defined.rs:4:5: 4:65
    }

    bb2: {
        _4 = core::panicking::panic(const "assertion failed: option_env!(\\\"__HOPEFULLY_DOESNT_EXIST__\\\").is_none()"); // scope 0 at ui/extoption_env-not-defined.rs:4:5: 4:65
                                         // mir::Constant
                                         // + span: ui/extoption_env-not-defined.rs:4:5: 4:65
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/extoption_env-not-defined.rs:5:2: 5:2
    }
}

promoted[0] in main: &Option<&str> = {
    let mut _0: &std::option::Option<&str>; // return place in scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:64
    let mut _1: std::option::Option<&str>; // in scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:54

    bb0: {
        _1 = Option::<&str>::None;       // scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:54
                                         // adt
                                         // + user_ty: UserType(0)
        _0 = &_1;                        // scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:64
        return;                          // scope 0 at ui/extoption_env-not-defined.rs:4:13: 4:64
    }
}
