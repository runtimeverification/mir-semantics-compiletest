// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/string-box-error.rs:7:11: 7:11
    let _1: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>; // in scope 0 at ui/string-box-error.rs:8:9: 8:14
    let mut _2: std::string::String;     // in scope 0 at ui/string-box-error.rs:8:58: 8:76
    let mut _3: &str;                    // in scope 0 at ui/string-box-error.rs:8:58: 8:76
    let _4: &str;                        // in scope 0 at ui/string-box-error.rs:8:58: 8:64
    let mut _6: std::string::String;     // in scope 0 at ui/string-box-error.rs:9:44: 9:62
    let mut _7: &str;                    // in scope 0 at ui/string-box-error.rs:9:44: 9:62
    let _8: &str;                        // in scope 0 at ui/string-box-error.rs:9:44: 9:50
    scope 1 {
        debug _err1 => _1;               // in scope 1 at ui/string-box-error.rs:8:9: 8:14
        let _5: std::boxed::Box<dyn std::error::Error>; // in scope 1 at ui/string-box-error.rs:9:9: 9:14
        scope 2 {
            debug _err2 => _5;           // in scope 2 at ui/string-box-error.rs:9:9: 9:14
            let _9: std::boxed::Box<dyn std::error::Error + std::marker::Send + std::marker::Sync>; // in scope 2 at ui/string-box-error.rs:10:9: 10:14
            scope 3 {
                debug _err3 => _9;       // in scope 3 at ui/string-box-error.rs:10:9: 10:14
                let _10: std::boxed::Box<dyn std::error::Error>; // in scope 3 at ui/string-box-error.rs:11:9: 11:14
                scope 4 {
                    debug _err4 => _10;  // in scope 4 at ui/string-box-error.rs:11:9: 11:14
                }
            }
        }
    }

    bb0: {
        _4 = const "test";               // scope 0 at ui/string-box-error.rs:8:58: 8:64
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:8:58: 8:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/string-box-error.rs:8:58: 8:76
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/string-box-error.rs:8:58: 8:76
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:8:65: 8:74
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Box<dyn std::error::Error + Send + Sync> as From<String>>::from(move _2) -> bb2; // scope 0 at ui/string-box-error.rs:8:47: 8:77
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:8:47: 8:57
                                         // + literal: Const { ty: fn(String) -> Box<dyn std::error::Error + Send + Sync> {<Box<dyn std::error::Error + Send + Sync> as From<String>>::from}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const "test";               // scope 1 at ui/string-box-error.rs:9:44: 9:50
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:9:44: 9:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/string-box-error.rs:9:44: 9:62
        _6 = <str as ToString>::to_string(move _7) -> [return: bb3, unwind: bb13]; // scope 1 at ui/string-box-error.rs:9:44: 9:62
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:9:51: 9:60
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = <Box<dyn std::error::Error> as From<String>>::from(move _6) -> [return: bb4, unwind: bb13]; // scope 1 at ui/string-box-error.rs:9:33: 9:63
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:9:33: 9:43
                                         // + literal: Const { ty: fn(String) -> Box<dyn std::error::Error> {<Box<dyn std::error::Error> as From<String>>::from}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = <Box<dyn std::error::Error + Send + Sync> as From<&str>>::from(const "test") -> [return: bb5, unwind: bb12]; // scope 2 at ui/string-box-error.rs:10:57: 10:75
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:10:57: 10:67
                                         // + literal: Const { ty: fn(&str) -> Box<dyn std::error::Error + Send + Sync> {<Box<dyn std::error::Error + Send + Sync> as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:10:68: 10:74
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _10 = <Box<dyn std::error::Error> as From<&str>>::from(const "test") -> [return: bb6, unwind: bb11]; // scope 3 at ui/string-box-error.rs:11:33: 11:51
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:11:33: 11:43
                                         // + literal: Const { ty: fn(&str) -> Box<dyn std::error::Error> {<Box<dyn std::error::Error> as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/string-box-error.rs:11:44: 11:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        drop(_10) -> [return: bb7, unwind: bb11]; // scope 3 at ui/string-box-error.rs:12:1: 12:2
    }

    bb7: {
        drop(_9) -> [return: bb8, unwind: bb12]; // scope 2 at ui/string-box-error.rs:12:1: 12:2
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb13]; // scope 1 at ui/string-box-error.rs:12:1: 12:2
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/string-box-error.rs:12:1: 12:2
    }

    bb10: {
        return;                          // scope 0 at ui/string-box-error.rs:12:2: 12:2
    }

    bb11 (cleanup): {
        drop(_9) -> bb12;                // scope 2 at ui/string-box-error.rs:12:1: 12:2
    }

    bb12 (cleanup): {
        drop(_5) -> bb13;                // scope 1 at ui/string-box-error.rs:12:1: 12:2
    }

    bb13 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/string-box-error.rs:12:1: 12:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/string-box-error.rs:7:1: 12:2
    }
}
