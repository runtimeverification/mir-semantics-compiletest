// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/return-nil.rs:4:8: 4:8
    let _1: ();                          // in scope 0 at ui/return-nil.rs:4:14: 4:15
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/return-nil.rs:4:14: 4:15
    }

    bb0: {
        return;                          // scope 0 at ui/return-nil.rs:4:37: 4:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/return-nil.rs:6:15: 6:15
    let _1: ();                          // in scope 0 at ui/return-nil.rs:6:21: 6:23
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/return-nil.rs:6:21: 6:23
    }

    bb0: {
        _1 = f() -> bb1;                 // scope 0 at ui/return-nil.rs:6:26: 6:29
                                         // mir::Constant
                                         // + span: ui/return-nil.rs:6:26: 6:27
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/return-nil.rs:6:32: 6:32
    }
}
