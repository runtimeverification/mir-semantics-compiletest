// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: std::option::Option<bool>;
    let mut _3: std::option::Option<std::string::String>;
    let mut _4: &mut std::env::Args;
    let mut _5: std::env::Args;
    let mut _6: std::env::Vars;
    let mut _7: std::env::Vars;
    let mut _8: std::env::Vars;
    let mut _9: std::option::Option<(std::string::String, std::string::String)>;
    let mut _10: &mut std::env::Vars;
    let mut _11: isize;
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 2];
    let _19: [core::fmt::rt::Argument<'_>; 2];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &std::string::String;
    let mut _22: core::fmt::rt::Argument<'_>;
    let _23: &std::string::String;
    let _24: std::path::PathBuf;
    let mut _25: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _27: std::result::Result<std::process::Output, std::io::Error>;
    let mut _28: &mut std::process::Command;
    let mut _29: &mut std::process::Command;
    let mut _30: &mut std::process::Command;
    let mut _31: std::process::Command;
    let mut _32: std::path::PathBuf;
    let mut _34: std::result::Result<std::string::String, std::string::FromUtf8Error>;
    let mut _35: std::vec::Vec<u8>;
    let mut _36: std::env::Vars;
    let mut _37: std::env::Vars;
    let mut _39: std::option::Option<(std::string::String, std::string::String)>;
    let mut _40: &mut std::env::Vars;
    let mut _41: isize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: &str;
    let _47: &str;
    let mut _48: &std::string::String;
    let mut _49: &std::string::String;
    let _50: std::string::String;
    let mut _52: std::fmt::Arguments<'_>;
    let mut _53: &[&str];
    let mut _54: &[core::fmt::rt::Argument<'_>];
    let _55: &[core::fmt::rt::Argument<'_>; 2];
    let _56: [core::fmt::rt::Argument<'_>; 2];
    let mut _57: core::fmt::rt::Argument<'_>;
    let _58: &std::string::String;
    let mut _59: core::fmt::rt::Argument<'_>;
    let _60: &std::string::String;
    let _61: !;
    let mut _62: std::fmt::Arguments<'_>;
    let mut _63: &[&str];
    let mut _64: &[core::fmt::rt::Argument<'_>];
    let _65: &[core::fmt::rt::Argument<'_>; 3];
    let _66: [core::fmt::rt::Argument<'_>; 3];
    let mut _67: core::fmt::rt::Argument<'_>;
    let _68: &std::string::String;
    let mut _69: core::fmt::rt::Argument<'_>;
    let _70: &std::string::String;
    let mut _71: core::fmt::rt::Argument<'_>;
    let _72: &std::string::String;
    let mut _76: bool;
    scope 1 {
        debug iter => _8;
        let _12: std::string::String;
        let _13: std::string::String;
        scope 2 {
            debug k => _12;
            debug v => _13;
            let mut _73: &[&str; 3];
        }
    }
    scope 3 {
        debug me => _24;
        let _26: std::process::Output;
        scope 4 {
            debug result => _26;
            let _33: std::string::String;
            scope 5 {
                debug output => _33;
                let mut _38: std::env::Vars;
                scope 6 {
                    debug iter => _38;
                    let _42: std::string::String;
                    let _43: std::string::String;
                    scope 7 {
                        debug k => _42;
                        debug v => _43;
                        let _51: std::string::String;
                        let mut _74: &[&str; 3];
                        let mut _75: &[&str; 2];
                        scope 8 {
                            debug res => _51;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _76 = const false;
        _5 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _5;
        _3 = <Args as Iterator>::nth(move _4, const 1_usize) -> [return: bb2, unwind: bb61];
    }

    bb2: {
        _2 = Option::<String>::map::<bool, [closure@ui/inherit-env.rs:10:31: 10:34]>(move _3, const ZeroSized: [closure@ui/inherit-env.rs:10:31: 10:34]) -> [return: bb3, unwind: bb61];
    }

    bb3: {
        _1 = Option::<bool>::unwrap_or(move _2, const false) -> [return: bb4, unwind: bb61];
    }

    bb4: {
        drop(_5) -> [return: bb5, unwind continue];
    }

    bb5: {
        switchInt(move _1) -> [0: bb19, otherwise: bb6];
    }

    bb6: {
        _7 = vars() -> [return: bb7, unwind continue];
    }

    bb7: {
        _6 = <Vars as IntoIterator>::into_iter(move _7) -> [return: bb8, unwind continue];
    }

    bb8: {
        _8 = move _6;
        goto -> bb9;
    }

    bb9: {
        _10 = &mut _8;
        _9 = <Vars as Iterator>::next(_10) -> [return: bb10, unwind: bb60];
    }

    bb10: {
        _11 = discriminant(_9);
        switchInt(move _11) -> [0: bb13, 1: bb11, otherwise: bb12];
    }

    bb11: {
        _12 = move (((_9 as Some).0: (std::string::String, std::string::String)).0: std::string::String);
        _13 = move (((_9 as Some).0: (std::string::String, std::string::String)).1: std::string::String);
        _73 = const _;
        _16 = _73 as &[&str] (Pointer(Unsize));
        _21 = &_12;
        _20 = core::fmt::rt::Argument::<'_>::new_display::<String>(_21) -> [return: bb14, unwind: bb58];
    }

    bb12: {
        unreachable;
    }

    bb13: {
        drop(_8) -> [return: bb51, unwind continue];
    }

    bb14: {
        _23 = &_13;
        _22 = core::fmt::rt::Argument::<'_>::new_display::<String>(_23) -> [return: bb15, unwind: bb58];
    }

    bb15: {
        _19 = [move _20, move _22];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb16, unwind: bb58];
    }

    bb16: {
        _14 = _print(move _15) -> [return: bb17, unwind: bb58];
    }

    bb17: {
        drop(_13) -> [return: bb18, unwind: bb59];
    }

    bb18: {
        drop(_12) -> [return: bb9, unwind: bb60];
    }

    bb19: {
        _25 = current_exe() -> [return: bb20, unwind continue];
    }

    bb20: {
        _24 = Result::<PathBuf, std::io::Error>::unwrap(move _25) -> [return: bb21, unwind continue];
    }

    bb21: {
        _32 = move _24;
        _31 = Command::new::<PathBuf>(move _32) -> [return: bb22, unwind continue];
    }

    bb22: {
        _30 = &mut _31;
        _29 = Command::arg::<&str>(move _30, const "print") -> [return: bb23, unwind: bb57];
    }

    bb23: {
        _28 = _29;
        _27 = Command::output(move _28) -> [return: bb24, unwind: bb57];
    }

    bb24: {
        _26 = Result::<Output, std::io::Error>::unwrap(move _27) -> [return: bb25, unwind: bb57];
    }

    bb25: {
        _76 = const true;
        drop(_31) -> [return: bb26, unwind: bb66];
    }

    bb26: {
        _76 = const false;
        _35 = move (_26.1: std::vec::Vec<u8>);
        _34 = String::from_utf8(move _35) -> [return: bb27, unwind: bb66];
    }

    bb27: {
        _33 = Result::<String, FromUtf8Error>::unwrap(move _34) -> [return: bb28, unwind: bb66];
    }

    bb28: {
        _37 = vars() -> [return: bb29, unwind: bb56];
    }

    bb29: {
        _36 = <Vars as IntoIterator>::into_iter(move _37) -> [return: bb30, unwind: bb56];
    }

    bb30: {
        _38 = move _36;
        goto -> bb31;
    }

    bb31: {
        _40 = &mut _38;
        _39 = <Vars as Iterator>::next(_40) -> [return: bb32, unwind: bb55];
    }

    bb32: {
        _41 = discriminant(_39);
        switchInt(move _41) -> [0: bb34, 1: bb33, otherwise: bb12];
    }

    bb33: {
        _42 = move (((_39 as Some).0: (std::string::String, std::string::String)).0: std::string::String);
        _43 = move (((_39 as Some).0: (std::string::String, std::string::String)).1: std::string::String);
        _48 = &_33;
        _47 = <String as Deref>::deref(move _48) -> [return: bb35, unwind: bb53];
    }

    bb34: {
        drop(_38) -> [return: bb49, unwind: bb56];
    }

    bb35: {
        _46 = _47;
        _75 = const _;
        _53 = _75 as &[&str] (Pointer(Unsize));
        _58 = &_42;
        _57 = core::fmt::rt::Argument::<'_>::new_display::<String>(_58) -> [return: bb36, unwind: bb53];
    }

    bb36: {
        _60 = &_43;
        _59 = core::fmt::rt::Argument::<'_>::new_display::<String>(_60) -> [return: bb37, unwind: bb53];
    }

    bb37: {
        _56 = [move _57, move _59];
        _55 = &_56;
        _54 = _55 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _52 = Arguments::<'_>::new_v1(move _53, move _54) -> [return: bb38, unwind: bb53];
    }

    bb38: {
        _51 = format(move _52) -> [return: bb39, unwind: bb53];
    }

    bb39: {
        _50 = move _51;
        _49 = &_50;
        _45 = core::str::<impl str>::contains::<'_, &String>(move _46, move _49) -> [return: bb40, unwind: bb52];
    }

    bb40: {
        _44 = Not(move _45);
        drop(_50) -> [return: bb41, unwind: bb53];
    }

    bb41: {
        switchInt(move _44) -> [0: bb47, otherwise: bb42];
    }

    bb42: {
        _74 = const _;
        _63 = _74 as &[&str] (Pointer(Unsize));
        _68 = &_42;
        _67 = core::fmt::rt::Argument::<'_>::new_display::<String>(_68) -> [return: bb43, unwind: bb53];
    }

    bb43: {
        _70 = &_43;
        _69 = core::fmt::rt::Argument::<'_>::new_display::<String>(_70) -> [return: bb44, unwind: bb53];
    }

    bb44: {
        _72 = &_33;
        _71 = core::fmt::rt::Argument::<'_>::new_display::<String>(_72) -> [return: bb45, unwind: bb53];
    }

    bb45: {
        _66 = [move _67, move _69, move _71];
        _65 = &_66;
        _64 = _65 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _62 = Arguments::<'_>::new_v1(move _63, move _64) -> [return: bb46, unwind: bb53];
    }

    bb46: {
        _61 = panic_fmt(move _62) -> bb53;
    }

    bb47: {
        drop(_43) -> [return: bb48, unwind: bb54];
    }

    bb48: {
        drop(_42) -> [return: bb31, unwind: bb55];
    }

    bb49: {
        drop(_33) -> [return: bb50, unwind: bb66];
    }

    bb50: {
        drop((_26.2: std::vec::Vec<u8>)) -> [return: bb63, unwind continue];
    }

    bb51: {
        return;
    }

    bb52 (cleanup): {
        drop(_50) -> [return: bb53, unwind terminate];
    }

    bb53 (cleanup): {
        drop(_43) -> [return: bb54, unwind terminate];
    }

    bb54 (cleanup): {
        drop(_42) -> [return: bb55, unwind terminate];
    }

    bb55 (cleanup): {
        drop(_38) -> [return: bb56, unwind terminate];
    }

    bb56 (cleanup): {
        drop(_33) -> [return: bb66, unwind terminate];
    }

    bb57 (cleanup): {
        drop(_31) -> [return: bb62, unwind terminate];
    }

    bb58 (cleanup): {
        drop(_13) -> [return: bb59, unwind terminate];
    }

    bb59 (cleanup): {
        drop(_12) -> [return: bb60, unwind terminate];
    }

    bb60 (cleanup): {
        drop(_8) -> [return: bb62, unwind terminate];
    }

    bb61 (cleanup): {
        drop(_5) -> [return: bb62, unwind terminate];
    }

    bb62 (cleanup): {
        resume;
    }

    bb63: {
        _76 = const false;
        goto -> bb51;
    }

    bb64 (cleanup): {
        drop((_26.2: std::vec::Vec<u8>)) -> [return: bb62, unwind terminate];
    }

    bb65 (cleanup): {
        drop((_26.1: std::vec::Vec<u8>)) -> [return: bb64, unwind terminate];
    }

    bb66 (cleanup): {
        switchInt(_76) -> [0: bb64, otherwise: bb65];
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const "=", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "output doesn't contain `", const "=", const "`\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "="];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: [closure@ui/inherit-env.rs:10:31: 10:34], _2: String) -> bool {
    debug s => _2;
    let mut _0: bool;
    let mut _3: &std::string::String;
    let mut _4: &&str;

    bb0: {
        _3 = &_2;
        _4 = const _;
        _0 = <String as PartialEq<&str>>::eq(move _3, _4) -> [return: bb1, unwind: bb3];
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }

    bb3 (cleanup): {
        drop(_2) -> [return: bb4, unwind terminate];
    }

    bb4 (cleanup): {
        resume;
    }
}

promoted[0] in main::{closure#0}: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "print";
        _0 = &_1;
        return;
    }
}
