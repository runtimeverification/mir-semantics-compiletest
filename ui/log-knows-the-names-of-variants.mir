// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/log-knows-the-names-of-variants.rs:5:10: 5:15>::fmt(_1: &foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: isize;
    let _4: &usize;
    let _5: &str;
    let mut _6: &dyn std::fmt::Debug;
    let _7: &&usize;
    let _8: &std::string::String;
    let _9: &str;
    let mut _10: &dyn std::fmt::Debug;
    let _11: &&std::string::String;
    let _12: &str;
    scope 1 {
        debug __self_0 => _4;
    }
    scope 2 {
        debug __self_0 => _8;
    }

    bb0: {
        _3 = discriminant((*_1));
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _12 = const "c";
        _0 = Formatter::<'_>::write_str(_2, _12) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = &(((*_1) as a).0: usize);
        _5 = const "a";
        _7 = &_4;
        _6 = _7 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _5, move _6) -> [return: bb5, unwind continue];
    }

    bb4: {
        _8 = &(((*_1) as b).0: std::string::String);
        _9 = const "b";
        _11 = &_8;
        _10 = _11 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _9, move _10) -> [return: bb5, unwind continue];
    }

    bb5: {
        return;
    }
}

fn <impl at ui/log-knows-the-names-of-variants.rs:12:10: 12:15>::fmt(_1: &bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: &str;
    let mut _4: isize;
    let _5: &str;
    let _6: &str;
    let _7: &str;

    bb0: {
        _4 = discriminant((*_1));
        switchInt(move _4) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _7 = const "f";
        _3 = _7;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _5 = const "d";
        _3 = _5;
        goto -> bb5;
    }

    bb4: {
        _6 = const "e";
        _3 = _6;
        goto -> bb5;
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(_2, move _3) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&std::string::String, &std::string::String);
    let mut _2: &std::string::String;
    let _3: std::string::String;
    let _4: &str;
    let mut _5: &std::string::String;
    let _6: std::string::String;
    let _7: std::string::String;
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &std::string::String;
    let _15: &std::string::String;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&std::string::String, &std::string::String);
    let mut _22: &std::string::String;
    let _23: std::string::String;
    let _24: &str;
    let mut _25: &std::string::String;
    let _26: std::string::String;
    let _27: std::string::String;
    let mut _28: std::fmt::Arguments<'_>;
    let mut _29: &[&str];
    let mut _30: &[core::fmt::rt::Argument<'_>];
    let _31: &[core::fmt::rt::Argument<'_>; 1];
    let _32: [core::fmt::rt::Argument<'_>; 1];
    let mut _33: core::fmt::rt::Argument<'_>;
    let _34: &std::string::String;
    let _35: &std::string::String;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&std::string::String, &std::string::String);
    let mut _42: &std::string::String;
    let _43: std::string::String;
    let _44: &str;
    let mut _45: &std::string::String;
    let _46: std::string::String;
    let _47: std::string::String;
    let mut _48: std::fmt::Arguments<'_>;
    let mut _49: &[&str];
    let mut _50: &[core::fmt::rt::Argument<'_>];
    let _51: &[core::fmt::rt::Argument<'_>; 1];
    let _52: [core::fmt::rt::Argument<'_>; 1];
    let mut _53: core::fmt::rt::Argument<'_>;
    let _54: &std::string::String;
    let _55: &std::string::String;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: &bar;
    let mut _62: &[&str; 1];
    let mut _63: &foo;
    let mut _64: &[&str; 1];
    let mut _65: &foo;
    let mut _66: &[&str; 1];
    scope 1 {
        debug res => _7;
    }
    scope 2 {
        debug left_val => _14;
        debug right_val => _15;
        let _18: core::panicking::AssertKind;
        scope 3 {
            debug kind => _18;
        }
    }
    scope 4 {
        debug res => _27;
    }
    scope 5 {
        debug left_val => _34;
        debug right_val => _35;
        let _38: core::panicking::AssertKind;
        scope 6 {
            debug kind => _38;
        }
    }
    scope 7 {
        debug res => _47;
    }
    scope 8 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 9 {
            debug kind => _58;
        }
    }

    bb0: {
        _4 = const "a(22)";
        _3 = <str as ToString>::to_string(_4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _66 = const _;
        _9 = _66 as &[&str] (Pointer(Unsize));
        _65 = const _;
        _13 = core::fmt::rt::Argument::<'_>::new_debug::<foo>(_65) -> [return: bb2, unwind: bb33];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind: bb33];
    }

    bb3: {
        _7 = format(move _8) -> [return: bb4, unwind: bb33];
    }

    bb4: {
        _6 = move _7;
        _5 = &_6;
        _1 = (move _2, move _5);
        _14 = (_1.0: &std::string::String);
        _15 = (_1.1: &std::string::String);
        _17 = <String as PartialEq>::eq(_14, _15) -> [return: bb5, unwind: bb32];
    }

    bb5: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<String, String>(move _18, _14, _15, move _20) -> bb32;
    }

    bb7: {
        drop(_6) -> [return: bb8, unwind: bb33];
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind continue];
    }

    bb9: {
        _24 = const "c";
        _23 = <str as ToString>::to_string(_24) -> [return: bb10, unwind continue];
    }

    bb10: {
        _22 = &_23;
        _64 = const _;
        _29 = _64 as &[&str] (Pointer(Unsize));
        _63 = const _;
        _33 = core::fmt::rt::Argument::<'_>::new_debug::<foo>(_63) -> [return: bb11, unwind: bb31];
    }

    bb11: {
        _32 = [move _33];
        _31 = &_32;
        _30 = _31 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _28 = Arguments::<'_>::new_v1(move _29, move _30) -> [return: bb12, unwind: bb31];
    }

    bb12: {
        _27 = format(move _28) -> [return: bb13, unwind: bb31];
    }

    bb13: {
        _26 = move _27;
        _25 = &_26;
        _21 = (move _22, move _25);
        _34 = (_21.0: &std::string::String);
        _35 = (_21.1: &std::string::String);
        _37 = <String as PartialEq>::eq(_34, _35) -> [return: bb14, unwind: bb30];
    }

    bb14: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<String, String>(move _38, _34, _35, move _40) -> bb30;
    }

    bb16: {
        drop(_26) -> [return: bb17, unwind: bb31];
    }

    bb17: {
        drop(_23) -> [return: bb18, unwind continue];
    }

    bb18: {
        _44 = const "d";
        _43 = <str as ToString>::to_string(_44) -> [return: bb19, unwind continue];
    }

    bb19: {
        _42 = &_43;
        _62 = const _;
        _49 = _62 as &[&str] (Pointer(Unsize));
        _61 = const _;
        _53 = core::fmt::rt::Argument::<'_>::new_debug::<bar>(_61) -> [return: bb20, unwind: bb29];
    }

    bb20: {
        _52 = [move _53];
        _51 = &_52;
        _50 = _51 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _48 = Arguments::<'_>::new_v1(move _49, move _50) -> [return: bb21, unwind: bb29];
    }

    bb21: {
        _47 = format(move _48) -> [return: bb22, unwind: bb29];
    }

    bb22: {
        _46 = move _47;
        _45 = &_46;
        _41 = (move _42, move _45);
        _54 = (_41.0: &std::string::String);
        _55 = (_41.1: &std::string::String);
        _57 = <String as PartialEq>::eq(_54, _55) -> [return: bb23, unwind: bb28];
    }

    bb23: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<String, String>(move _58, _54, _55, move _60) -> bb28;
    }

    bb25: {
        drop(_46) -> [return: bb26, unwind: bb29];
    }

    bb26: {
        drop(_43) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_46) -> [return: bb29, unwind terminate];
    }

    bb29 (cleanup): {
        drop(_43) -> [return: bb34, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_26) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        drop(_23) -> [return: bb34, unwind terminate];
    }

    bb32 (cleanup): {
        drop(_6) -> [return: bb33, unwind terminate];
    }

    bb33 (cleanup): {
        drop(_3) -> [return: bb34, unwind terminate];
    }

    bb34 (cleanup): {
        resume;
    }
}

promoted[0] in main: &bar = {
    let mut _0: &bar;
    let mut _1: bar;

    bb0: {
        _1 = bar::d;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &foo = {
    let mut _0: &foo;
    let mut _1: foo;

    bb0: {
        _1 = foo::c;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &foo = {
    let mut _0: &foo;
    let mut _1: foo;

    bb0: {
        _1 = foo::a(const 22_usize);
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn foo::a(_1: usize) -> foo {
    let mut _0: foo;

    bb0: {
        _0 = foo::a(move _1);
        return;
    }
}

// MIR FOR CTFE
fn foo::a(_1: usize) -> foo {
    let mut _0: foo;

    bb0: {
        _0 = foo::a(move _1);
        return;
    }
}

fn foo::b(_1: String) -> foo {
    let mut _0: foo;

    bb0: {
        _0 = foo::b(move _1);
        return;
    }
}

// MIR FOR CTFE
fn foo::b(_1: String) -> foo {
    let mut _0: foo;

    bb0: {
        _0 = foo::b(move _1);
        return;
    }
}
