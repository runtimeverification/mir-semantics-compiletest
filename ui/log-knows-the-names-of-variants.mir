// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/log-knows-the-names-of-variants.rs:5:10: 5:15>::fmt(_1: &foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let mut _3: isize;                   // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let _4: &usize;                      // in scope 0 at ui/log-knows-the-names-of-variants.rs:7:5: 7:10
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let mut _6: &str;                    // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let _7: &str;                        // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/log-knows-the-names-of-variants.rs:7:5: 7:10
    let mut _9: &&usize;                 // in scope 0 at ui/log-knows-the-names-of-variants.rs:7:5: 7:10
    let _10: &&usize;                    // in scope 0 at ui/log-knows-the-names-of-variants.rs:7:5: 7:10
    let _11: &std::string::String;       // in scope 0 at ui/log-knows-the-names-of-variants.rs:8:5: 8:11
    let mut _12: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let mut _13: &str;                   // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let _14: &str;                       // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let mut _15: &dyn std::fmt::Debug;   // in scope 0 at ui/log-knows-the-names-of-variants.rs:8:5: 8:11
    let mut _16: &&std::string::String;  // in scope 0 at ui/log-knows-the-names-of-variants.rs:8:5: 8:11
    let _17: &&std::string::String;      // in scope 0 at ui/log-knows-the-names-of-variants.rs:8:5: 8:11
    let mut _18: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let mut _19: &str;                   // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    let _20: &str;                       // in scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/log-knows-the-names-of-variants.rs:7:5: 7:10
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/log-knows-the-names-of-variants.rs:8:5: 8:11
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    }

    bb1: {
        _18 = &mut (*_2);                // scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
        _20 = const "c";                 // scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
        _0 = Formatter::<'_>::write_str(move _18, move _19) -> bb5; // scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
    }

    bb3: {
        _4 = &(((*_1) as a).0: usize);   // scope 0 at ui/log-knows-the-names-of-variants.rs:7:5: 7:10
        _5 = &mut (*_2);                 // scope 1 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
        _7 = const "a";                  // scope 1 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
        _10 = &_4;                       // scope 1 at ui/log-knows-the-names-of-variants.rs:7:5: 7:10
        _9 = _10;                        // scope 1 at ui/log-knows-the-names-of-variants.rs:7:5: 7:10
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/log-knows-the-names-of-variants.rs:7:5: 7:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb5; // scope 1 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &(((*_1) as b).0: std::string::String); // scope 0 at ui/log-knows-the-names-of-variants.rs:8:5: 8:11
        _12 = &mut (*_2);                // scope 2 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
        _14 = const "b";                 // scope 2 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 2 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
        _17 = &_11;                      // scope 2 at ui/log-knows-the-names-of-variants.rs:8:5: 8:11
        _16 = _17;                       // scope 2 at ui/log-knows-the-names-of-variants.rs:8:5: 8:11
        _15 = move _16 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/log-knows-the-names-of-variants.rs:8:5: 8:11
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _12, move _13, move _15) -> bb5; // scope 2 at ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:5:10: 5:15
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:5:15: 5:15
    }
}

fn <impl at ui/log-knows-the-names-of-variants.rs:12:10: 12:15>::fmt(_1: &bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    debug f => _2;                       // in scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    let mut _4: &str;                    // in scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    let mut _5: isize;                   // in scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    let _6: &str;                        // in scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    let _7: &str;                        // in scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    let _8: &str;                        // in scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
        _5 = discriminant((*_1));        // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    }

    bb1: {
        _8 = const "f";                  // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
        goto -> bb5;                     // scope 0 at ui/log-knows-the-names-of-variants.rs:12:14: 12:15
    }

    bb2: {
        unreachable;                     // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
    }

    bb3: {
        _6 = const "d";                  // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
        goto -> bb5;                     // scope 0 at ui/log-knows-the-names-of-variants.rs:12:14: 12:15
    }

    bb4: {
        _7 = const "e";                  // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:12:10: 12:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
        goto -> bb5;                     // scope 0 at ui/log-knows-the-names-of-variants.rs:12:14: 12:15
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb6; // scope 0 at ui/log-knows-the-names-of-variants.rs:12:10: 12:15
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:12:10: 12:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:12:15: 12:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:17:15: 17:15
    let mut _1: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:16: 18:35
    let mut _4: &str;                    // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:16: 18:35
    let _5: &str;                        // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:16: 18:23
    let mut _6: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _8: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _9: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: &[&str];                // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
    let mut _11: &[&str; 1];             // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
    let _12: &[&str; 1];                 // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
    let mut _13: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _16: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _17: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
    let mut _18: &foo;                   // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
    let _19: &foo;                       // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
    let _20: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _21: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _24: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _25: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _27: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _28: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _29: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _30: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _31: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _32: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _34: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _35: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _36: std::string::String;        // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:16: 19:31
    let mut _37: &str;                   // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:16: 19:31
    let _38: &str;                       // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:16: 19:19
    let mut _39: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _40: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _41: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _42: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _43: &[&str];                // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
    let mut _44: &[&str; 1];             // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
    let _45: &[&str; 1];                 // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
    let mut _46: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _47: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _48: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _49: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _50: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
    let mut _51: &foo;                   // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
    let _52: &foo;                       // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
    let _53: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _54: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _57: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _58: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _60: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _61: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _62: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _63: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _64: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _65: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _67: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _68: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _69: std::string::String;        // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:16: 20:31
    let mut _70: &str;                   // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:16: 20:31
    let _71: &str;                       // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:16: 20:19
    let mut _72: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _73: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _74: std::string::String;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _75: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _76: &[&str];                // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
    let mut _77: &[&str; 1];             // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
    let _78: &[&str; 1];                 // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
    let mut _79: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _80: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _81: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _82: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _83: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
    let mut _84: &bar;                   // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
    let _85: &bar;                       // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
    let _86: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _87: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _88: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _90: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _91: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _93: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _94: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _95: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _96: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _97: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _98: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _99: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _100: &bar;                  // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
    let mut _101: &[&str; 1];            // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
    let mut _102: &foo;                  // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
    let mut _103: &[&str; 1];            // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
    let mut _104: &foo;                  // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
    let mut _105: &[&str; 1];            // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
    scope 1 {
        debug res => _8;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 2 {
        debug left_val => _20;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _21;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _26: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _26;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 4 {
        debug res => _41;                // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 5 {
        debug left_val => _53;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _54;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _59: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _59;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug res => _74;                // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 8 {
        debug left_val => _86;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _87;          // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _92: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 9 {
            debug kind => _92;           // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = const "a(22)";              // scope 0 at ui/log-knows-the-names-of-variants.rs:18:16: 18:23
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:18:16: 18:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/log-knows-the-names-of-variants.rs:18:16: 18:35
        _3 = <str as ToString>::to_string(move _4) -> bb1; // scope 0 at ui/log-knows-the-names-of-variants.rs:18:16: 18:35
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:18:24: 18:33
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _105 = const _;                  // scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:18:45: 18:51
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[5])) }
        _12 = _105;                      // scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
        _11 = _12;                       // scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
        _10 = move _11 as &[&str] (Pointer(Unsize)); // scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
        _104 = const _;                  // scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:18:53: 18:63
                                         // + literal: Const { ty: &foo, val: Unevaluated(main, [], Some(promoted[4])) }
        _19 = _104;                      // scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
        _18 = _19;                       // scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
        _17 = core::fmt::ArgumentV1::<'_>::new_debug::<foo>(move _18) -> [return: bb2, unwind: bb33]; // scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:18:53: 18:63
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b foo) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<foo>}, val: Value(<ZST>) }
    }

    bb2: {
        _16 = [move _17];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _15 = &_16;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _14 = _15;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = move _14 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = Arguments::<'_>::new_v1(move _10, move _13) -> [return: bb3, unwind: bb33]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = format(move _9) -> [return: bb4, unwind: bb33]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = move _8;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _6 = &_7;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _20 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _21 = (_1.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _24 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _25 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _23 = <String as PartialEq>::eq(move _24, move _25) -> [return: bb5, unwind: bb32]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = Not(move _23);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _22) -> [0: bb7, otherwise: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _26 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _30;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = _32;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _27 = core::panicking::assert_failed::<String, String>(move _28, move _29, move _31, move _33) -> bb32; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_7) -> [return: bb8, unwind: bb33]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        drop(_3) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        _38 = const "c";                 // scope 0 at ui/log-knows-the-names-of-variants.rs:19:16: 19:19
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:19:16: 19:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _37 = _38;                       // scope 0 at ui/log-knows-the-names-of-variants.rs:19:16: 19:31
        _36 = <str as ToString>::to_string(move _37) -> bb10; // scope 0 at ui/log-knows-the-names-of-variants.rs:19:16: 19:31
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:19:20: 19:29
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb10: {
        _35 = &_36;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _103 = const _;                  // scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:19:41: 19:47
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[3])) }
        _45 = _103;                      // scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
        _44 = _45;                       // scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
        _43 = move _44 as &[&str] (Pointer(Unsize)); // scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
        _102 = const _;                  // scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:19:49: 19:55
                                         // + literal: Const { ty: &foo, val: Unevaluated(main, [], Some(promoted[2])) }
        _52 = _102;                      // scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
        _51 = _52;                       // scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
        _50 = core::fmt::ArgumentV1::<'_>::new_debug::<foo>(move _51) -> [return: bb11, unwind: bb31]; // scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:19:49: 19:55
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b foo) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<foo>}, val: Value(<ZST>) }
    }

    bb11: {
        _49 = [move _50];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _48 = &_49;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _47 = _48;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _46 = move _47 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _42 = Arguments::<'_>::new_v1(move _43, move _46) -> [return: bb12, unwind: bb31]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _41 = format(move _42) -> [return: bb13, unwind: bb31]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb13: {
        _40 = move _41;                  // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _39 = &_40;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _34 = (move _35, move _39);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _53 = (_34.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _54 = (_34.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _57 = _53;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _58 = _54;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _56 = <String as PartialEq>::eq(move _57, move _58) -> [return: bb14, unwind: bb30]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _55 = Not(move _56);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _55) -> [0: bb16, otherwise: bb15]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _59 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _63;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _54;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = _65;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _60 = core::panicking::assert_failed::<String, String>(move _61, move _62, move _64, move _66) -> bb30; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_40) -> [return: bb17, unwind: bb31]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        drop(_36) -> bb18;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb18: {
        _71 = const "d";                 // scope 0 at ui/log-knows-the-names-of-variants.rs:20:16: 20:19
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:20:16: 20:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _70 = _71;                       // scope 0 at ui/log-knows-the-names-of-variants.rs:20:16: 20:31
        _69 = <str as ToString>::to_string(move _70) -> bb19; // scope 0 at ui/log-knows-the-names-of-variants.rs:20:16: 20:31
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:20:20: 20:29
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb19: {
        _68 = &_69;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _101 = const _;                  // scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:20:41: 20:47
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _78 = _101;                      // scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
        _77 = _78;                       // scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
        _76 = move _77 as &[&str] (Pointer(Unsize)); // scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
        _100 = const _;                  // scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:20:49: 20:55
                                         // + literal: Const { ty: &bar, val: Unevaluated(main, [], Some(promoted[0])) }
        _85 = _100;                      // scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
        _84 = _85;                       // scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
        _83 = core::fmt::ArgumentV1::<'_>::new_debug::<bar>(move _84) -> [return: bb20, unwind: bb29]; // scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:20:49: 20:55
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b bar) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<bar>}, val: Value(<ZST>) }
    }

    bb20: {
        _82 = [move _83];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _81 = &_82;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _80 = _81;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _79 = move _80 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _75 = Arguments::<'_>::new_v1(move _76, move _79) -> [return: bb21, unwind: bb29]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb21: {
        _74 = format(move _75) -> [return: bb22, unwind: bb29]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb22: {
        _73 = move _74;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _72 = &_73;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _67 = (move _68, move _72);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _86 = (_67.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _87 = (_67.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _90 = _86;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _91 = _87;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _89 = <String as PartialEq>::eq(move _90, move _91) -> [return: bb23, unwind: bb28]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _88 = Not(move _89);             // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _88) -> [0: bb25, otherwise: bb24]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _92 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _96 = _86;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _96;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _98 = _87;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = _98;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = Option::<Arguments<'_>>::None; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _93 = core::panicking::assert_failed::<String, String>(move _94, move _95, move _97, move _99) -> bb28; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_73) -> [return: bb26, unwind: bb29]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb26: {
        drop(_69) -> bb27;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27: {
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:21:2: 21:2
    }

    bb28 (cleanup): {
        drop(_73) -> bb29;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb29 (cleanup): {
        drop(_69) -> bb34;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30 (cleanup): {
        drop(_40) -> bb31;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb31 (cleanup): {
        drop(_36) -> bb34;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb32 (cleanup): {
        drop(_7) -> bb33;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb33 (cleanup): {
        drop(_3) -> bb34;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:17:1: 21:2
    }
}

promoted[0] in main: &bar = {
    let mut _0: &bar;                    // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
    let mut _1: bar;                     // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55

    bb0: {
        _1 = bar::d;                     // scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
        _0 = &_1;                        // scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:20:49: 20:55
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
    let mut _1: [&str; 1];               // in scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:20:41: 20:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:20:41: 20:47
    }
}

promoted[2] in main: &foo = {
    let mut _0: &foo;                    // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
    let mut _1: foo;                     // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55

    bb0: {
        _1 = foo::c;                     // scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
        _0 = &_1;                        // scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:19:49: 19:55
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
    let mut _1: [&str; 1];               // in scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:19:41: 19:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:19:41: 19:47
    }
}

promoted[4] in main: &foo = {
    let mut _0: &foo;                    // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
    let mut _1: foo;                     // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63

    bb0: {
        _1 = foo::a(const 22_usize);     // scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
        _0 = &_1;                        // scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:18:53: 18:63
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
    let mut _1: [&str; 1];               // in scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
                                         // mir::Constant
                                         // + span: ui/log-knows-the-names-of-variants.rs:18:45: 18:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:18:45: 18:51
    }
}

fn foo::a(_1: usize) -> foo {
    let mut _0: foo;                     // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:7:3: 7:4

    bb0: {
        _0 = foo::a(move _1);            // scope 0 at ui/log-knows-the-names-of-variants.rs:7:3: 7:4
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:7:3: 7:4
    }
}

// MIR FOR CTFE
fn foo::a(_1: usize) -> foo {
    let mut _0: foo;                     // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:7:3: 7:4

    bb0: {
        _0 = foo::a(move _1);            // scope 0 at ui/log-knows-the-names-of-variants.rs:7:3: 7:4
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:7:3: 7:4
    }
}

fn foo::b(_1: String) -> foo {
    let mut _0: foo;                     // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:8:3: 8:4

    bb0: {
        _0 = foo::b(move _1);            // scope 0 at ui/log-knows-the-names-of-variants.rs:8:3: 8:4
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:8:3: 8:4
    }
}

// MIR FOR CTFE
fn foo::b(_1: String) -> foo {
    let mut _0: foo;                     // return place in scope 0 at ui/log-knows-the-names-of-variants.rs:8:3: 8:4

    bb0: {
        _0 = foo::b(move _1);            // scope 0 at ui/log-knows-the-names-of-variants.rs:8:3: 8:4
        return;                          // scope 0 at ui/log-knows-the-names-of-variants.rs:8:3: 8:4
    }
}
