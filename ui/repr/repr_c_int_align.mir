// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/repr/repr_c_int_align.rs:25:11: 25:11
    let _1: ReprC;                       // in scope 0 at ui/repr/repr_c_int_align.rs:27:9: 27:11
    let mut _4: &ReprC;                  // in scope 0 at ui/repr/repr_c_int_align.rs:30:53: 30:56
    let mut _6: &ReprC;                  // in scope 0 at ui/repr/repr_c_int_align.rs:31:53: 31:56
    let mut _7: (&ReprCu8, &ReprCu8);    // in scope 0 at ui/repr/repr_c_int_align.rs:33:11: 33:19
    let mut _8: &ReprCu8;                // in scope 0 at ui/repr/repr_c_int_align.rs:33:12: 33:14
    let mut _9: &ReprCu8;                // in scope 0 at ui/repr/repr_c_int_align.rs:33:16: 33:18
    let mut _10: u8;                     // in scope 0 at ui/repr/repr_c_int_align.rs:34:25: 34:38
    let mut _11: u8;                     // in scope 0 at ui/repr/repr_c_int_align.rs:34:10: 34:23
    let mut _12: !;                      // in scope 0 at ui/repr/repr_c_int_align.rs:35:14: 35:28
    let mut _14: &ReprC;                 // in scope 0 at ui/repr/repr_c_int_align.rs:39:52: 39:55
    let mut _16: &ReprC;                 // in scope 0 at ui/repr/repr_c_int_align.rs:40:52: 40:55
    let mut _17: (&Repru8, &Repru8);     // in scope 0 at ui/repr/repr_c_int_align.rs:42:11: 42:19
    let mut _18: &Repru8;                // in scope 0 at ui/repr/repr_c_int_align.rs:42:12: 42:14
    let mut _19: &Repru8;                // in scope 0 at ui/repr/repr_c_int_align.rs:42:16: 42:18
    let mut _20: u8;                     // in scope 0 at ui/repr/repr_c_int_align.rs:43:24: 43:36
    let mut _21: u8;                     // in scope 0 at ui/repr/repr_c_int_align.rs:43:10: 43:22
    let mut _22: !;                      // in scope 0 at ui/repr/repr_c_int_align.rs:44:14: 44:28
    let mut _23: &ReprCu8;               // in scope 0 at ui/repr/repr_c_int_align.rs:33:11: 33:19
    let mut _24: &ReprCu8;               // in scope 0 at ui/repr/repr_c_int_align.rs:33:11: 33:19
    let mut _25: &Repru8;                // in scope 0 at ui/repr/repr_c_int_align.rs:42:11: 42:19
    let mut _26: &Repru8;                // in scope 0 at ui/repr/repr_c_int_align.rs:42:11: 42:19
    scope 1 {
        debug r1 => _1;                  // in scope 1 at ui/repr/repr_c_int_align.rs:27:9: 27:11
        let _2: ReprC;                   // in scope 1 at ui/repr/repr_c_int_align.rs:28:9: 28:11
        scope 2 {
            debug r2 => _2;              // in scope 2 at ui/repr/repr_c_int_align.rs:28:9: 28:11
            let _3: &ReprCu8;            // in scope 2 at ui/repr/repr_c_int_align.rs:30:9: 30:11
            scope 3 {
                debug t1 => _3;          // in scope 3 at ui/repr/repr_c_int_align.rs:30:9: 30:11
                let _5: &ReprCu8;        // in scope 3 at ui/repr/repr_c_int_align.rs:31:9: 31:11
                scope 5 {
                    debug t2 => _5;      // in scope 5 at ui/repr/repr_c_int_align.rs:31:9: 31:11
                    let _13: &Repru8;    // in scope 5 at ui/repr/repr_c_int_align.rs:39:9: 39:11
                    scope 7 {
                        debug t1 => _13; // in scope 7 at ui/repr/repr_c_int_align.rs:39:9: 39:11
                        let _15: &Repru8; // in scope 7 at ui/repr/repr_c_int_align.rs:40:9: 40:11
                        scope 9 {
                            debug t2 => _15; // in scope 9 at ui/repr/repr_c_int_align.rs:40:9: 40:11
                        }
                        scope 10 {
                        }
                    }
                    scope 8 {
                    }
                }
                scope 6 {
                }
            }
            scope 4 {
            }
        }
    }

    bb0: {
        _1 = ReprC { tag: const 0_u8, padding: const 0_u8, payload: const 0_u16 }; // scope 0 at ui/repr/repr_c_int_align.rs:27:14: 27:54
        _2 = ReprC { tag: const 0_u8, padding: const 1_u8, payload: const 1_u16 }; // scope 1 at ui/repr/repr_c_int_align.rs:28:14: 28:54
        _4 = &_1;                        // scope 4 at ui/repr/repr_c_int_align.rs:30:53: 30:56
        _3 = transmute::<&ReprC, &ReprCu8>(move _4) -> bb1; // scope 4 at ui/repr/repr_c_int_align.rs:30:33: 30:57
                                         // mir::Constant
                                         // + span: ui/repr/repr_c_int_align.rs:30:33: 30:52
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&ReprC) -> &ReprCu8 {transmute::<&ReprC, &ReprCu8>}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_2;                        // scope 6 at ui/repr/repr_c_int_align.rs:31:53: 31:56
        _5 = transmute::<&ReprC, &ReprCu8>(move _6) -> bb2; // scope 6 at ui/repr/repr_c_int_align.rs:31:33: 31:57
                                         // mir::Constant
                                         // + span: ui/repr/repr_c_int_align.rs:31:33: 31:52
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&ReprC) -> &ReprCu8 {transmute::<&ReprC, &ReprCu8>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _3;                         // scope 5 at ui/repr/repr_c_int_align.rs:33:12: 33:14
        _9 = _5;                         // scope 5 at ui/repr/repr_c_int_align.rs:33:16: 33:18
        _7 = (move _8, move _9);         // scope 5 at ui/repr/repr_c_int_align.rs:33:11: 33:19
        _23 = deref_copy (_7.0: &ReprCu8); // scope 5 at ui/repr/repr_c_int_align.rs:33:11: 33:19
        _11 = discriminant((*_23));      // scope 5 at ui/repr/repr_c_int_align.rs:33:11: 33:19
        switchInt(move _11) -> [0: bb3, otherwise: bb4]; // scope 5 at ui/repr/repr_c_int_align.rs:33:5: 33:19
    }

    bb3: {
        _24 = deref_copy (_7.1: &ReprCu8); // scope 5 at ui/repr/repr_c_int_align.rs:33:11: 33:19
        _10 = discriminant((*_24));      // scope 5 at ui/repr/repr_c_int_align.rs:33:11: 33:19
        switchInt(move _10) -> [0: bb5, otherwise: bb4]; // scope 5 at ui/repr/repr_c_int_align.rs:33:5: 33:19
    }

    bb4: {
        _12 = core::panicking::panic(const "assertion failed: false"); // scope 5 at ui/repr/repr_c_int_align.rs:35:14: 35:28
                                         // mir::Constant
                                         // + span: ui/repr/repr_c_int_align.rs:35:14: 35:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _14 = &_1;                       // scope 8 at ui/repr/repr_c_int_align.rs:39:52: 39:55
        _13 = transmute::<&ReprC, &Repru8>(move _14) -> bb6; // scope 8 at ui/repr/repr_c_int_align.rs:39:32: 39:56
                                         // mir::Constant
                                         // + span: ui/repr/repr_c_int_align.rs:39:32: 39:51
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&ReprC) -> &Repru8 {transmute::<&ReprC, &Repru8>}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = &_2;                       // scope 10 at ui/repr/repr_c_int_align.rs:40:52: 40:55
        _15 = transmute::<&ReprC, &Repru8>(move _16) -> bb7; // scope 10 at ui/repr/repr_c_int_align.rs:40:32: 40:56
                                         // mir::Constant
                                         // + span: ui/repr/repr_c_int_align.rs:40:32: 40:51
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&ReprC) -> &Repru8 {transmute::<&ReprC, &Repru8>}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = _13;                       // scope 9 at ui/repr/repr_c_int_align.rs:42:12: 42:14
        _19 = _15;                       // scope 9 at ui/repr/repr_c_int_align.rs:42:16: 42:18
        _17 = (move _18, move _19);      // scope 9 at ui/repr/repr_c_int_align.rs:42:11: 42:19
        _25 = deref_copy (_17.0: &Repru8); // scope 9 at ui/repr/repr_c_int_align.rs:42:11: 42:19
        _21 = discriminant((*_25));      // scope 9 at ui/repr/repr_c_int_align.rs:42:11: 42:19
        switchInt(move _21) -> [0: bb8, otherwise: bb9]; // scope 9 at ui/repr/repr_c_int_align.rs:42:5: 42:19
    }

    bb8: {
        _26 = deref_copy (_17.1: &Repru8); // scope 9 at ui/repr/repr_c_int_align.rs:42:11: 42:19
        _20 = discriminant((*_26));      // scope 9 at ui/repr/repr_c_int_align.rs:42:11: 42:19
        switchInt(move _20) -> [0: bb10, otherwise: bb9]; // scope 9 at ui/repr/repr_c_int_align.rs:42:5: 42:19
    }

    bb9: {
        _22 = core::panicking::panic(const "assertion failed: false"); // scope 9 at ui/repr/repr_c_int_align.rs:44:14: 44:28
                                         // mir::Constant
                                         // + span: ui/repr/repr_c_int_align.rs:44:14: 44:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        return;                          // scope 0 at ui/repr/repr_c_int_align.rs:46:2: 46:2
    }
}

fn ReprCu8::A(_1: u16) -> ReprCu8 {
    let mut _0: ReprCu8;                 // return place in scope 0 at ui/repr/repr_c_int_align.rs:8:5: 8:6

    bb0: {
        _0 = ReprCu8::A(move _1);        // scope 0 at ui/repr/repr_c_int_align.rs:8:5: 8:6
        return;                          // scope 0 at ui/repr/repr_c_int_align.rs:8:5: 8:6
    }
}

// MIR FOR CTFE
fn ReprCu8::A(_1: u16) -> ReprCu8 {
    let mut _0: ReprCu8;                 // return place in scope 0 at ui/repr/repr_c_int_align.rs:8:5: 8:6

    bb0: {
        _0 = ReprCu8::A(move _1);        // scope 0 at ui/repr/repr_c_int_align.rs:8:5: 8:6
        return;                          // scope 0 at ui/repr/repr_c_int_align.rs:8:5: 8:6
    }
}

fn Repru8::A(_1: u16) -> Repru8 {
    let mut _0: Repru8;                  // return place in scope 0 at ui/repr/repr_c_int_align.rs:14:5: 14:6

    bb0: {
        _0 = Repru8::A(move _1);         // scope 0 at ui/repr/repr_c_int_align.rs:14:5: 14:6
        return;                          // scope 0 at ui/repr/repr_c_int_align.rs:14:5: 14:6
    }
}

// MIR FOR CTFE
fn Repru8::A(_1: u16) -> Repru8 {
    let mut _0: Repru8;                  // return place in scope 0 at ui/repr/repr_c_int_align.rs:14:5: 14:6

    bb0: {
        _0 = Repru8::A(move _1);         // scope 0 at ui/repr/repr_c_int_align.rs:14:5: 14:6
        return;                          // scope 0 at ui/repr/repr_c_int_align.rs:14:5: 14:6
    }
}
