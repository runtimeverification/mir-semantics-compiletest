// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Aligned::Zero::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 0_isize;
        return;
    }
}

Aligned::One::{constant#0}: isize = {
    let mut _0: isize;

    bb0: {
        _0 = const 1_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Aligned;
    let mut _3: isize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &u8;
    let mut _12: (&u8, &u8);
    let mut _13: &u8;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: u8;
    let mut _19: u8;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let _23: ();
    let mut _24: std::fmt::Arguments<'_>;
    let mut _25: &[&str];
    let mut _26: &[core::fmt::rt::Argument<'_>];
    let _27: &[core::fmt::rt::Argument<'_>; 1];
    let _28: [core::fmt::rt::Argument<'_>; 1];
    let mut _29: core::fmt::rt::Argument<'_>;
    let _30: &u8;
    let _31: u8;
    let mut _32: Aligned;
    let mut _33: (&u8, &u8);
    let mut _34: &u8;
    let _35: u8;
    let mut _36: Aligned;
    let mut _39: bool;
    let mut _40: bool;
    let mut _41: u8;
    let mut _42: u8;
    let _44: !;
    let mut _45: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug aligned => _1;
        let _2: u8;
        scope 2 {
            debug fo => _2;
            let _14: &u8;
            let _15: &u8;
            let _37: &u8;
            let _38: &u8;
            let mut _46: &u8;
            let mut _47: &[&str; 2];
            let mut _48: &u8;
            let mut _49: &[&str; 2];
            scope 3 {
                debug left_val => _14;
                debug right_val => _15;
                let _20: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _20;
                }
            }
            scope 5 {
                debug left_val => _37;
                debug right_val => _38;
                let _43: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _43;
                }
            }
        }
    }

    bb0: {
        _1 = Aligned::Zero;
        _3 = discriminant(_1);
        _2 = move _3 as u8 (IntToInt);
        _49 = const _;
        _6 = _49 as &[&str] (Pointer(Unsize));
        _11 = &_2;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_11) -> [return: bb1, unwind continue];
    }

    bb1: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = _print(move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _13 = &_2;
        _48 = const _;
        _12 = (move _13, _48);
        _14 = (_12.0: &u8);
        _15 = (_12.1: &u8);
        _18 = (*_14);
        _19 = (*_15);
        _17 = Eq(move _18, move _19);
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<u8, u8>(move _20, _14, _15, move _22) -> unwind continue;
    }

    bb5: {
        _47 = const _;
        _25 = _47 as &[&str] (Pointer(Unsize));
        _32 = Aligned::Zero;
        _31 = tou8(move _32) -> [return: bb6, unwind continue];
    }

    bb6: {
        _30 = &_31;
        _29 = core::fmt::rt::Argument::<'_>::new_display::<u8>(_30) -> [return: bb7, unwind continue];
    }

    bb7: {
        _28 = [move _29];
        _27 = &_28;
        _26 = _27 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _24 = Arguments::<'_>::new_v1(move _25, move _26) -> [return: bb8, unwind continue];
    }

    bb8: {
        _23 = _print(move _24) -> [return: bb9, unwind continue];
    }

    bb9: {
        _36 = Aligned::Zero;
        _35 = tou8(move _36) -> [return: bb10, unwind continue];
    }

    bb10: {
        _34 = &_35;
        _46 = const _;
        _33 = (move _34, _46);
        _37 = (_33.0: &u8);
        _38 = (_33.1: &u8);
        _41 = (*_37);
        _42 = (*_38);
        _40 = Eq(move _41, move _42);
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _43 = core::panicking::AssertKind::Eq;
        _45 = Option::<Arguments<'_>>::None;
        _44 = core::panicking::assert_failed::<u8, u8>(move _43, _37, _38, move _45) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "foo ", const "\n"];
        _0 = &_1;
        return;
    }
}

fn tou8(_1: Aligned) -> u8 {
    debug al => _1;
    let mut _0: u8;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        _0 = move _2 as u8 (IntToInt);
        return;
    }
}
