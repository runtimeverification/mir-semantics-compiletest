// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::rc::Rc<[i32; 4]>;
    let mut _2: [i32; 4];
    let mut _3: (&[i32; 4], &[i32; 4]);
    let mut _4: &[i32; 4];
    let _5: &[i32; 4];
    let mut _6: &std::rc::Rc<[i32; 4]>;
    let mut _9: bool;
    let mut _10: bool;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _7: &[i32; 4];
        let _8: &[i32; 4];
        let mut _14: &[i32; 4];
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _11: core::panicking::AssertKind;
            scope 3 {
                debug kind => _11;
            }
        }
    }

    bb0: {
        _2 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _1 = Rc::<[i32; 4]>::new(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_1;
        _5 = <Rc<[i32; 4]> as Deref>::deref(move _6) -> [return: bb2, unwind: bb7];
    }

    bb2: {
        _4 = _5;
        _14 = const _;
        _3 = (move _4, _14);
        _7 = (_3.0: &[i32; 4]);
        _8 = (_3.1: &[i32; 4]);
        _10 = <[i32; 4] as PartialEq>::eq(_7, _8) -> [return: bb3, unwind: bb7];
    }

    bb3: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<[i32; 4], [i32; 4]>(move _11, _7, _8, move _13) -> bb7;
    }

    bb5: {
        drop(_1) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }

    bb7 (cleanup): {
        drop(_1) -> [return: bb8, unwind terminate];
    }

    bb8 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];
    let mut _1: [i32; 4];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}
