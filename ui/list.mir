// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/list.rs:8:15: 8:15
    let _1: list;                        // in scope 0 at ui/list.rs:9:5: 9:92
    let mut _2: std::boxed::Box<list>;   // in scope 0 at ui/list.rs:9:20: 9:91
    let mut _3: list;                    // in scope 0 at ui/list.rs:9:29: 9:90
    let mut _4: std::boxed::Box<list>;   // in scope 0 at ui/list.rs:9:44: 9:89
    let mut _5: list;                    // in scope 0 at ui/list.rs:9:53: 9:88
    let mut _6: std::boxed::Box<list>;   // in scope 0 at ui/list.rs:9:68: 9:87
    let mut _7: list;                    // in scope 0 at ui/list.rs:9:77: 9:86

    bb0: {
        _7 = list::nil;                  // scope 0 at ui/list.rs:9:77: 9:86
        _6 = Box::<list>::new(move _7) -> bb1; // scope 0 at ui/list.rs:9:68: 9:87
                                         // mir::Constant
                                         // + span: ui/list.rs:9:68: 9:76
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(list) -> Box<list> {Box::<list>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = list::cons(const 12_isize, move _6); // scope 0 at ui/list.rs:9:53: 9:88
        _4 = Box::<list>::new(move _5) -> bb2; // scope 0 at ui/list.rs:9:44: 9:89
                                         // mir::Constant
                                         // + span: ui/list.rs:9:44: 9:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(list) -> Box<list> {Box::<list>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = list::cons(const 11_isize, move _4); // scope 0 at ui/list.rs:9:29: 9:90
        _2 = Box::<list>::new(move _3) -> bb3; // scope 0 at ui/list.rs:9:20: 9:91
                                         // mir::Constant
                                         // + span: ui/list.rs:9:20: 9:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(list) -> Box<list> {Box::<list>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = list::cons(const 10_isize, move _2); // scope 0 at ui/list.rs:9:5: 9:92
        drop(_1) -> bb4;                 // scope 0 at ui/list.rs:9:92: 9:93
    }

    bb4: {
        return;                          // scope 0 at ui/list.rs:10:2: 10:2
    }
}

fn list::cons(_1: isize, _2: Box<list>) -> list {
    let mut _0: list;                    // return place in scope 0 at ui/list.rs:6:50: 6:54

    bb0: {
        _0 = list::cons(move _1, move _2); // scope 0 at ui/list.rs:6:50: 6:54
        return;                          // scope 0 at ui/list.rs:6:50: 6:54
    }
}

// MIR FOR CTFE
fn list::cons(_1: isize, _2: Box<list>) -> list {
    let mut _0: list;                    // return place in scope 0 at ui/list.rs:6:50: 6:54

    bb0: {
        _0 = list::cons(move _1, move _2); // scope 0 at ui/list.rs:6:50: 6:54
        return;                          // scope 0 at ui/list.rs:6:50: 6:54
    }
}
