// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn strange() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/weird-exprs.rs:20:17: 20:21
    let _1: bool;                        // in scope 0 at ui/weird-exprs.rs:20:28: 20:30
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/weird-exprs.rs:20:28: 20:30
    }

    bb0: {
        _0 = const true;                 // scope 0 at ui/weird-exprs.rs:20:46: 20:50
        return;                          // scope 0 at ui/weird-exprs.rs:20:53: 20:53
    }
}

fn funny() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:22:12: 22:12

    bb0: {
        return;                          // scope 0 at ui/weird-exprs.rs:25:2: 25:2
    }
}

fn f(_1: ()) -> () {
    debug _x => _1;                      // in scope 0 at ui/weird-exprs.rs:23:10: 23:12
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:23:18: 23:18

    bb0: {
        return;                          // scope 0 at ui/weird-exprs.rs:23:21: 23:21
    }
}

fn what() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:27:11: 27:11
    let _1: &std::cell::Cell<bool>;      // in scope 0 at ui/weird-exprs.rs:31:9: 31:10
    let _2: std::cell::Cell<bool>;       // in scope 0 at ui/weird-exprs.rs:31:14: 31:30
    let mut _4: &&std::cell::Cell<bool>; // in scope 0 at ui/weird-exprs.rs:32:17: 32:25
    let _5: ();                          // in scope 0 at ui/weird-exprs.rs:33:5: 33:11
    let mut _6: &[closure@ui/weird-exprs.rs:32:17: 32:19]; // in scope 0 at ui/weird-exprs.rs:33:5: 33:9
    let mut _7: ();                      // in scope 0 at ui/weird-exprs.rs:33:5: 33:11
    let mut _8: bool;                    // in scope 0 at ui/weird-exprs.rs:34:5: 34:23
    let mut _9: bool;                    // in scope 0 at ui/weird-exprs.rs:34:13: 34:22
    let mut _10: &std::cell::Cell<bool>; // in scope 0 at ui/weird-exprs.rs:34:13: 34:22
    let mut _11: !;                      // in scope 0 at ui/weird-exprs.rs:34:5: 34:23
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/weird-exprs.rs:31:9: 31:10
        let _3: [closure@ui/weird-exprs.rs:32:17: 32:19]; // in scope 1 at ui/weird-exprs.rs:32:9: 32:13
        scope 2 {
            debug dont => _3;            // in scope 2 at ui/weird-exprs.rs:32:9: 32:13
        }
    }

    bb0: {
        _2 = Cell::<bool>::new(const false) -> bb1; // scope 0 at ui/weird-exprs.rs:31:14: 31:30
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:31:14: 31:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(bool) -> Cell<bool> {Cell::<bool>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = &_2;                        // scope 0 at ui/weird-exprs.rs:31:13: 31:30
        _4 = &_1;                        // scope 1 at ui/weird-exprs.rs:32:17: 32:25
        _3 = [closure@ui/weird-exprs.rs:32:17: 32:19] { i: move _4 }; // scope 1 at ui/weird-exprs.rs:32:17: 32:25
                                         // closure
                                         // + def_id: DefId(0:10 ~ weird_exprs[0730]::what::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (&&std::cell::Cell<bool>,),
                                         // ]
        _6 = &_3;                        // scope 2 at ui/weird-exprs.rs:33:5: 33:9
        _5 = <[closure@ui/weird-exprs.rs:32:17: 32:19] as Fn<()>>::call(move _6, move _7) -> bb2; // scope 2 at ui/weird-exprs.rs:33:5: 33:11
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:33:5: 33:9
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/weird-exprs.rs:32:17: 32:19], ()) -> <[closure@ui/weird-exprs.rs:32:17: 32:19] as FnOnce<()>>::Output {<[closure@ui/weird-exprs.rs:32:17: 32:19] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = _1;                        // scope 2 at ui/weird-exprs.rs:34:13: 34:22
        _9 = Cell::<bool>::get(move _10) -> bb3; // scope 2 at ui/weird-exprs.rs:34:13: 34:22
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:34:16: 34:19
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>) -> bool {Cell::<bool>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = Not(move _9);               // scope 2 at ui/weird-exprs.rs:34:5: 34:23
        switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 2 at ui/weird-exprs.rs:34:5: 34:23
    }

    bb4: {
        _11 = core::panicking::panic(const "assertion failed: (i.get())"); // scope 2 at ui/weird-exprs.rs:34:5: 34:23
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:34:5: 34:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        return;                          // scope 0 at ui/weird-exprs.rs:35:2: 35:2
    }
}

fn the(_1: &Cell<bool>) -> () {
    debug x => _1;                       // in scope 0 at ui/weird-exprs.rs:28:12: 28:13
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:28:28: 28:28
    let mut _2: bool;                    // in scope 0 at ui/weird-exprs.rs:29:22: 29:30
    let mut _3: bool;                    // in scope 0 at ui/weird-exprs.rs:29:23: 29:30
    let mut _4: &std::cell::Cell<bool>;  // in scope 0 at ui/weird-exprs.rs:29:23: 29:30
    let _5: ();                          // in scope 0 at ui/weird-exprs.rs:29:33: 29:44
    let mut _6: &std::cell::Cell<bool>;  // in scope 0 at ui/weird-exprs.rs:29:33: 29:44

    bb0: {
        goto -> bb1;                     // scope 0 at ui/weird-exprs.rs:29:16: 29:47
    }

    bb1: {
        _4 = _1;                         // scope 0 at ui/weird-exprs.rs:29:23: 29:30
        _3 = Cell::<bool>::get(move _4) -> bb2; // scope 0 at ui/weird-exprs.rs:29:23: 29:30
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:29:25: 29:28
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>) -> bool {Cell::<bool>::get}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Not(move _3);               // scope 0 at ui/weird-exprs.rs:29:22: 29:30
        switchInt(move _2) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/weird-exprs.rs:29:22: 29:30
    }

    bb3: {
        _6 = _1;                         // scope 0 at ui/weird-exprs.rs:29:33: 29:44
        _5 = Cell::<bool>::set(move _6, const true) -> bb1; // scope 0 at ui/weird-exprs.rs:29:33: 29:44
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:29:35: 29:38
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>, bool) {Cell::<bool>::set}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/weird-exprs.rs:30:6: 30:6
    }
}

fn what::{closure#0}(_1: &[closure@ui/weird-exprs.rs:32:17: 32:19]) -> () {
    debug i => (*((*_1).0: &&std::cell::Cell<bool>)); // in scope 0 at ui/weird-exprs.rs:31:9: 31:10
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:32:19: 32:19
    let mut _2: &std::cell::Cell<bool>;  // in scope 0 at ui/weird-exprs.rs:32:23: 32:24
    let mut _3: &&std::cell::Cell<bool>; // in scope 0 at ui/weird-exprs.rs:32:17: 32:25
    let mut _4: &std::cell::Cell<bool>;  // in scope 0 at ui/weird-exprs.rs:32:17: 32:25

    bb0: {
        _3 = deref_copy ((*_1).0: &&std::cell::Cell<bool>); // scope 0 at ui/weird-exprs.rs:32:23: 32:24
        _4 = deref_copy (*_3);           // scope 0 at ui/weird-exprs.rs:32:23: 32:24
        _2 = _4;                         // scope 0 at ui/weird-exprs.rs:32:23: 32:24
        _0 = the(move _2) -> bb1;        // scope 0 at ui/weird-exprs.rs:32:19: 32:25
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:32:19: 32:22
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>) {the}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/weird-exprs.rs:32:25: 32:25
    }
}

fn zombiejesus() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:37:18: 37:18

    bb0: {
        return;                          // scope 0 at ui/weird-exprs.rs:57:2: 57:2
    }
}

fn notsure() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:59:14: 59:14
    let mut _1: isize;                   // in scope 0 at ui/weird-exprs.rs:60:9: 60:15
    let mut _3: &();                     // in scope 0 at ui/weird-exprs.rs:61:18: 61:26
    let mut _4: &();                     // in scope 0 at ui/weird-exprs.rs:61:30: 61:38
    let mut _6: &();                     // in scope 0 at ui/weird-exprs.rs:62:18: 62:26
    let mut _7: &();                     // in scope 0 at ui/weird-exprs.rs:62:29: 62:37
    let mut _9: &();                     // in scope 0 at ui/weird-exprs.rs:63:14: 63:23
    let mut _10: (isize, bool);          // in scope 0 at ui/weird-exprs.rs:63:14: 63:23
    let mut _11: &();                    // in scope 0 at ui/weird-exprs.rs:63:27: 63:35
    let mut _13: &();                    // in scope 0 at ui/weird-exprs.rs:64:14: 64:36
    let _14: ();                         // in scope 0 at ui/weird-exprs.rs:64:14: 64:36
    let mut _15: &mut bool;              // in scope 0 at ui/weird-exprs.rs:64:19: 64:26
    let mut _16: &mut bool;              // in scope 0 at ui/weird-exprs.rs:64:19: 64:26
    let mut _17: &mut bool;              // in scope 0 at ui/weird-exprs.rs:64:28: 64:35
    let mut _18: &mut bool;              // in scope 0 at ui/weird-exprs.rs:64:28: 64:35
    let mut _19: &();                    // in scope 0 at ui/weird-exprs.rs:64:40: 64:62
    let _20: ();                         // in scope 0 at ui/weird-exprs.rs:64:40: 64:62
    let mut _21: &mut bool;              // in scope 0 at ui/weird-exprs.rs:64:45: 64:52
    let mut _22: &mut bool;              // in scope 0 at ui/weird-exprs.rs:64:45: 64:52
    let mut _23: &mut bool;              // in scope 0 at ui/weird-exprs.rs:64:54: 64:61
    let mut _24: &mut bool;              // in scope 0 at ui/weird-exprs.rs:64:54: 64:61
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/weird-exprs.rs:60:9: 60:15
        let mut _2: bool;                // in scope 1 at ui/weird-exprs.rs:61:9: 61:15
        let mut _29: &();                // in scope 1 at ui/weird-exprs.rs:61:30: 61:38
        let mut _30: &();                // in scope 1 at ui/weird-exprs.rs:61:18: 61:26
        scope 2 {
            debug _y => _2;              // in scope 2 at ui/weird-exprs.rs:61:9: 61:15
            let mut _5: bool;            // in scope 2 at ui/weird-exprs.rs:62:9: 62:15
            let mut _27: &();            // in scope 2 at ui/weird-exprs.rs:62:29: 62:37
            let mut _28: &();            // in scope 2 at ui/weird-exprs.rs:62:18: 62:26
            scope 3 {
                debug _z => _5;          // in scope 3 at ui/weird-exprs.rs:62:9: 62:15
                let _8: bool;            // in scope 3 at ui/weird-exprs.rs:63:9: 63:11
                let mut _25: &();        // in scope 3 at ui/weird-exprs.rs:63:27: 63:35
                let mut _26: &();        // in scope 3 at ui/weird-exprs.rs:63:14: 63:23
                scope 4 {
                    debug _a => _8;      // in scope 4 at ui/weird-exprs.rs:63:9: 63:11
                    let _12: bool;       // in scope 4 at ui/weird-exprs.rs:64:9: 64:11
                    scope 5 {
                        debug _b => _12; // in scope 5 at ui/weird-exprs.rs:64:9: 64:11
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_isize;              // scope 1 at ui/weird-exprs.rs:61:18: 61:26
        _30 = const _;                   // scope 1 at ui/weird-exprs.rs:61:18: 61:26
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:61:18: 61:26
                                         // + literal: Const { ty: &(), val: Unevaluated(notsure, [], Some(promoted[5])) }
        _3 = _30;                        // scope 1 at ui/weird-exprs.rs:61:18: 61:26
        _1 = const 0_isize;              // scope 1 at ui/weird-exprs.rs:61:30: 61:38
        _29 = const _;                   // scope 1 at ui/weird-exprs.rs:61:30: 61:38
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:61:30: 61:38
                                         // + literal: Const { ty: &(), val: Unevaluated(notsure, [], Some(promoted[4])) }
        _4 = _29;                        // scope 1 at ui/weird-exprs.rs:61:30: 61:38
        _2 = <() as PartialEq>::eq(move _3, move _4) -> bb1; // scope 1 at ui/weird-exprs.rs:61:18: 61:38
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:61:18: 61:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = const 0_isize;              // scope 2 at ui/weird-exprs.rs:62:18: 62:26
        _28 = const _;                   // scope 2 at ui/weird-exprs.rs:62:18: 62:26
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:62:18: 62:26
                                         // + literal: Const { ty: &(), val: Unevaluated(notsure, [], Some(promoted[3])) }
        _6 = _28;                        // scope 2 at ui/weird-exprs.rs:62:18: 62:26
        _1 = const 0_isize;              // scope 2 at ui/weird-exprs.rs:62:29: 62:37
        _27 = const _;                   // scope 2 at ui/weird-exprs.rs:62:29: 62:37
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:62:29: 62:37
                                         // + literal: Const { ty: &(), val: Unevaluated(notsure, [], Some(promoted[2])) }
        _7 = _27;                        // scope 2 at ui/weird-exprs.rs:62:29: 62:37
        _5 = <() as PartialOrd>::lt(move _6, move _7) -> bb2; // scope 2 at ui/weird-exprs.rs:62:18: 62:37
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:62:18: 62:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialOrd>::lt}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = CheckedAdd(_1, const 0_isize); // scope 3 at ui/weird-exprs.rs:63:14: 63:23
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 0_isize) -> bb3; // scope 3 at ui/weird-exprs.rs:63:14: 63:23
    }

    bb3: {
        _1 = move (_10.0: isize);        // scope 3 at ui/weird-exprs.rs:63:14: 63:23
        _26 = const _;                   // scope 3 at ui/weird-exprs.rs:63:14: 63:23
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:63:14: 63:23
                                         // + literal: Const { ty: &(), val: Unevaluated(notsure, [], Some(promoted[1])) }
        _9 = _26;                        // scope 3 at ui/weird-exprs.rs:63:14: 63:23
        _1 = const 0_isize;              // scope 3 at ui/weird-exprs.rs:63:27: 63:35
        _25 = const _;                   // scope 3 at ui/weird-exprs.rs:63:27: 63:35
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:63:27: 63:35
                                         // + literal: Const { ty: &(), val: Unevaluated(notsure, [], Some(promoted[0])) }
        _11 = _25;                       // scope 3 at ui/weird-exprs.rs:63:27: 63:35
        _8 = <() as PartialEq>::eq(move _9, move _11) -> bb4; // scope 3 at ui/weird-exprs.rs:63:14: 63:35
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:63:14: 63:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = &mut _2;                   // scope 4 at ui/weird-exprs.rs:64:19: 64:26
        _15 = &mut (*_16);               // scope 4 at ui/weird-exprs.rs:64:19: 64:26
        _18 = &mut _5;                   // scope 4 at ui/weird-exprs.rs:64:28: 64:35
        _17 = &mut (*_18);               // scope 4 at ui/weird-exprs.rs:64:28: 64:35
        _14 = std::mem::swap::<bool>(move _15, move _17) -> bb5; // scope 4 at ui/weird-exprs.rs:64:14: 64:36
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:64:14: 64:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut bool, &'b mut bool) {std::mem::swap::<bool>}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &_14;                      // scope 4 at ui/weird-exprs.rs:64:14: 64:36
        _22 = &mut _2;                   // scope 4 at ui/weird-exprs.rs:64:45: 64:52
        _21 = &mut (*_22);               // scope 4 at ui/weird-exprs.rs:64:45: 64:52
        _24 = &mut _5;                   // scope 4 at ui/weird-exprs.rs:64:54: 64:61
        _23 = &mut (*_24);               // scope 4 at ui/weird-exprs.rs:64:54: 64:61
        _20 = std::mem::swap::<bool>(move _21, move _23) -> bb6; // scope 4 at ui/weird-exprs.rs:64:40: 64:62
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:64:40: 64:44
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut bool, &'b mut bool) {std::mem::swap::<bool>}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = &_20;                      // scope 4 at ui/weird-exprs.rs:64:40: 64:62
        _12 = <() as PartialEq>::eq(move _13, move _19) -> bb7; // scope 4 at ui/weird-exprs.rs:64:14: 64:62
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:64:14: 64:62
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/weird-exprs.rs:65:2: 65:2
    }
}

promoted[0] in notsure: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:63:27: 63:35
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:63:27: 63:35

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:63:27: 63:35
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:63:27: 63:35
        return;                          // scope 0 at ui/weird-exprs.rs:63:27: 63:35
    }
}

promoted[1] in notsure: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:63:14: 63:23
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:63:14: 63:23

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:63:14: 63:23
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:63:14: 63:23
        return;                          // scope 0 at ui/weird-exprs.rs:63:14: 63:23
    }
}

promoted[2] in notsure: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:62:29: 62:37
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:62:29: 62:37

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:62:29: 62:37
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:62:29: 62:37
        return;                          // scope 0 at ui/weird-exprs.rs:62:29: 62:37
    }
}

promoted[3] in notsure: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:62:18: 62:26
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:62:18: 62:26

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:62:18: 62:26
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:62:18: 62:26
        return;                          // scope 0 at ui/weird-exprs.rs:62:18: 62:26
    }
}

promoted[4] in notsure: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:61:30: 61:38
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:61:30: 61:38

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:61:30: 61:38
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:61:30: 61:38
        return;                          // scope 0 at ui/weird-exprs.rs:61:30: 61:38
    }
}

promoted[5] in notsure: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:61:18: 61:26
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:61:18: 61:26

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:61:18: 61:26
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:61:18: 61:26
        return;                          // scope 0 at ui/weird-exprs.rs:61:18: 61:26
    }
}

fn canttouchthis() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/weird-exprs.rs:67:23: 67:28
    let _1: bool;                        // in scope 0 at ui/weird-exprs.rs:69:9: 69:11
    let mut _2: &();                     // in scope 0 at ui/weird-exprs.rs:69:15: 69:30
    let mut _3: &();                     // in scope 0 at ui/weird-exprs.rs:69:34: 69:48
    let mut _4: bool;                    // in scope 0 at ui/weird-exprs.rs:69:35: 69:47
    let mut _5: bool;                    // in scope 0 at ui/weird-exprs.rs:69:43: 69:46
    let mut _6: !;                       // in scope 0 at ui/weird-exprs.rs:69:35: 69:47
    let mut _8: &();                     // in scope 0 at ui/weird-exprs.rs:70:15: 70:29
    let mut _9: bool;                    // in scope 0 at ui/weird-exprs.rs:70:15: 70:29
    let mut _10: bool;                   // in scope 0 at ui/weird-exprs.rs:70:23: 70:28
    let mut _11: !;                      // in scope 0 at ui/weird-exprs.rs:70:15: 70:29
    let mut _12: &();                    // in scope 0 at ui/weird-exprs.rs:70:33: 70:35
    let _14: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: &[&str];                // in scope 0 at ui/weird-exprs.rs:71:30: 71:34
    let mut _17: &[&str; 2];             // in scope 0 at ui/weird-exprs.rs:71:30: 71:34
    let _18: &[&str; 2];                 // in scope 0 at ui/weird-exprs.rs:71:30: 71:34
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _22: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _23: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/weird-exprs.rs:71:36: 71:37
    let mut _24: &i32;                   // in scope 0 at ui/weird-exprs.rs:71:36: 71:37
    let _25: &i32;                       // in scope 0 at ui/weird-exprs.rs:71:36: 71:37
    let mut _30: &();                    // in scope 0 at ui/weird-exprs.rs:69:34: 69:48
    let mut _31: &();                    // in scope 0 at ui/weird-exprs.rs:69:15: 69:30
    scope 1 {
        debug _a => _1;                  // in scope 1 at ui/weird-exprs.rs:69:9: 69:11
        let _7: bool;                    // in scope 1 at ui/weird-exprs.rs:70:9: 70:11
        let mut _28: &();                // in scope 1 at ui/weird-exprs.rs:70:33: 70:35
        let mut _29: &();                // in scope 1 at ui/weird-exprs.rs:70:15: 70:29
        scope 2 {
            debug _c => _7;              // in scope 2 at ui/weird-exprs.rs:70:9: 70:11
            let _13: bool;               // in scope 2 at ui/weird-exprs.rs:71:9: 71:11
            let mut _26: &i32;           // in scope 2 at ui/weird-exprs.rs:71:36: 71:37
            let mut _27: &[&str; 2];     // in scope 2 at ui/weird-exprs.rs:71:30: 71:34
            scope 3 {
                debug _b => _13;         // in scope 3 at ui/weird-exprs.rs:71:9: 71:11
            }
        }
    }

    bb0: {
        _31 = const _;                   // scope 0 at ui/weird-exprs.rs:69:15: 69:30
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:69:15: 69:30
                                         // + literal: Const { ty: &(), val: Unevaluated(canttouchthis, [], Some(promoted[6])) }
        _2 = _31;                        // scope 0 at ui/weird-exprs.rs:69:15: 69:30
        _5 = p() -> bb1;                 // scope 0 at ui/weird-exprs.rs:69:43: 69:46
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:69:43: 69:44
                                         // + literal: Const { ty: fn() -> bool {p}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Not(move _5);               // scope 0 at ui/weird-exprs.rs:69:35: 69:47
        switchInt(move _4) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/weird-exprs.rs:69:35: 69:47
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: p()"); // scope 0 at ui/weird-exprs.rs:69:35: 69:47
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:69:35: 69:47
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _30 = const _;                   // scope 0 at ui/weird-exprs.rs:69:34: 69:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:69:34: 69:48
                                         // + literal: Const { ty: &(), val: Unevaluated(canttouchthis, [], Some(promoted[5])) }
        _3 = _30;                        // scope 0 at ui/weird-exprs.rs:69:34: 69:48
        _1 = <() as PartialEq>::eq(move _2, move _3) -> bb4; // scope 0 at ui/weird-exprs.rs:69:14: 69:49
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:69:14: 69:49
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = p() -> bb5;                // scope 1 at ui/weird-exprs.rs:70:23: 70:28
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:70:24: 70:25
                                         // + literal: Const { ty: fn() -> bool {p}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = Not(move _10);              // scope 1 at ui/weird-exprs.rs:70:15: 70:29
        switchInt(move _9) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/weird-exprs.rs:70:15: 70:29
    }

    bb6: {
        _11 = core::panicking::panic(const "assertion failed: (p())"); // scope 1 at ui/weird-exprs.rs:70:15: 70:29
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:70:15: 70:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _29 = const _;                   // scope 1 at ui/weird-exprs.rs:70:15: 70:29
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:70:15: 70:29
                                         // + literal: Const { ty: &(), val: Unevaluated(canttouchthis, [], Some(promoted[4])) }
        _8 = _29;                        // scope 1 at ui/weird-exprs.rs:70:15: 70:29
        _28 = const _;                   // scope 1 at ui/weird-exprs.rs:70:33: 70:35
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:70:33: 70:35
                                         // + literal: Const { ty: &(), val: Unevaluated(canttouchthis, [], Some(promoted[3])) }
        _12 = _28;                       // scope 1 at ui/weird-exprs.rs:70:33: 70:35
        _7 = <() as PartialEq>::eq(move _8, move _12) -> bb8; // scope 1 at ui/weird-exprs.rs:70:14: 70:36
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:70:14: 70:36
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = const _;                   // scope 2 at ui/weird-exprs.rs:71:30: 71:34
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:71:30: 71:34
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(canttouchthis, [], Some(promoted[2])) }
        _18 = _27;                       // scope 2 at ui/weird-exprs.rs:71:30: 71:34
        _17 = _18;                       // scope 2 at ui/weird-exprs.rs:71:30: 71:34
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 2 at ui/weird-exprs.rs:71:30: 71:34
        _26 = const _;                   // scope 2 at ui/weird-exprs.rs:71:36: 71:37
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:71:36: 71:37
                                         // + literal: Const { ty: &i32, val: Unevaluated(canttouchthis, [], Some(promoted[1])) }
        _25 = _26;                       // scope 2 at ui/weird-exprs.rs:71:36: 71:37
        _24 = _25;                       // scope 2 at ui/weird-exprs.rs:71:36: 71:37
        _23 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _24) -> bb9; // scope 2 at ui/weird-exprs.rs:71:36: 71:37
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:71:36: 71:37
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = [move _23];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = &_22;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = move _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> bb10; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb10: {
        _14 = _print(move _15) -> bb11;  // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb11: {
        _0 = const 0_usize;              // scope 2 at ui/weird-exprs.rs:71:50: 71:51
        return;                          // scope 0 at ui/weird-exprs.rs:72:2: 72:2
    }
}

promoted[0] in canttouchthis: &() = {
    let mut _0: &();                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:136:23: 138:6
    let mut _1: ();                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:136:23: 138:6

    bb0: {
        _1 = const ();                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:136:23: 138:6
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:136:23: 138:6
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:136:23: 138:6
    }
}

promoted[1] in canttouchthis: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/weird-exprs.rs:71:36: 71:37
    let mut _1: i32;                     // in scope 0 at ui/weird-exprs.rs:71:36: 71:37

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/weird-exprs.rs:71:36: 71:37
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:71:36: 71:37
        return;                          // scope 0 at ui/weird-exprs.rs:71:36: 71:37
    }
}

promoted[2] in canttouchthis: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/weird-exprs.rs:71:30: 71:34
    let mut _1: [&str; 2];               // in scope 0 at ui/weird-exprs.rs:71:30: 71:34

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/weird-exprs.rs:71:30: 71:34
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:71:30: 71:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:71:30: 71:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:71:30: 71:34
        return;                          // scope 0 at ui/weird-exprs.rs:71:30: 71:34
    }
}

promoted[3] in canttouchthis: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:70:33: 70:35
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:70:33: 70:35

    bb0: {
        _1 = ();                         // scope 0 at ui/weird-exprs.rs:70:33: 70:35
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:70:33: 70:35
        return;                          // scope 0 at ui/weird-exprs.rs:70:33: 70:35
    }
}

promoted[4] in canttouchthis: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:70:15: 70:29
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:70:15: 70:29

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:70:29: 70:29
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:70:15: 70:29
        return;                          // scope 0 at ui/weird-exprs.rs:70:15: 70:29
    }
}

promoted[5] in canttouchthis: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:69:34: 69:48
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:69:34: 69:48

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:69:48: 69:48
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:69:34: 69:48
        return;                          // scope 0 at ui/weird-exprs.rs:69:34: 69:48
    }
}

promoted[6] in canttouchthis: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:69:15: 69:30
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:69:15: 69:30

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:69:30: 69:30
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:69:15: 69:30
        return;                          // scope 0 at ui/weird-exprs.rs:69:15: 69:30
    }
}

fn p() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/weird-exprs.rs:68:15: 68:19

    bb0: {
        _0 = const true;                 // scope 0 at ui/weird-exprs.rs:68:22: 68:26
        return;                          // scope 0 at ui/weird-exprs.rs:68:28: 68:28
    }
}

fn angrydome() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:74:16: 74:16
    let mut _1: i32;                     // in scope 0 at ui/weird-exprs.rs:76:9: 76:14
    let mut _2: (i32, bool);             // in scope 0 at ui/weird-exprs.rs:77:12: 77:18
    let mut _3: i32;                     // in scope 0 at ui/weird-exprs.rs:77:23: 77:24
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/weird-exprs.rs:76:9: 76:14
    }

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/weird-exprs.rs:76:17: 76:18
        goto -> bb1;                     // scope 1 at ui/weird-exprs.rs:77:5: 78:15
    }

    bb1: {
        _2 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:77:12: 77:18
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb2; // scope 1 at ui/weird-exprs.rs:77:12: 77:18
    }

    bb2: {
        _1 = move (_2.0: i32);           // scope 1 at ui/weird-exprs.rs:77:12: 77:18
        _3 = _1;                         // scope 1 at ui/weird-exprs.rs:77:23: 77:24
        switchInt(move _3) -> [1: bb1, otherwise: bb3]; // scope 1 at ui/weird-exprs.rs:77:23: 77:29
    }

    bb3: {
        return;                          // scope 0 at ui/weird-exprs.rs:79:2: 79:2
    }
}

fn evil_lincoln() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:81:19: 81:19
    let _1: ();                          // in scope 0 at ui/weird-exprs.rs:81:25: 81:30
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/weird-exprs.rs:81:42: 81:51
    let mut _5: &[&str; 1];              // in scope 0 at ui/weird-exprs.rs:81:42: 81:51
    let _6: &[&str; 1];                  // in scope 0 at ui/weird-exprs.rs:81:42: 81:51
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str; 1];             // in scope 0 at ui/weird-exprs.rs:81:42: 81:51
    scope 1 {
        debug _evil => _1;               // in scope 1 at ui/weird-exprs.rs:81:25: 81:30
    }

    bb0: {
        _11 = const _;                   // scope 0 at ui/weird-exprs.rs:81:42: 81:51
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:81:42: 81:51
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(evil_lincoln, [], Some(promoted[1])) }
        _6 = _11;                        // scope 0 at ui/weird-exprs.rs:81:42: 81:51
        _5 = _6;                         // scope 0 at ui/weird-exprs.rs:81:42: 81:51
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/weird-exprs.rs:81:42: 81:51
        _10 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(evil_lincoln, [], Some(promoted[0])) }
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/weird-exprs.rs:81:55: 81:55
    }
}

promoted[0] in evil_lincoln: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in evil_lincoln: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/weird-exprs.rs:81:42: 81:51
    let mut _1: [&str; 1];               // in scope 0 at ui/weird-exprs.rs:81:42: 81:51

    bb0: {
        _1 = [const "lincoln\n"];        // scope 0 at ui/weird-exprs.rs:81:42: 81:51
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:81:42: 81:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:81:42: 81:51
        return;                          // scope 0 at ui/weird-exprs.rs:81:42: 81:51
    }
}

fn dots() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:83:11: 83:11
    let mut _1: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at ui/weird-exprs.rs:84:16: 84:82
    let mut _4: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let _6: std::string::String;         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    let mut _7: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _8: &[&str];                 // in scope 0 at ui/weird-exprs.rs:85:24: 85:30
    let mut _9: &[&str; 1];              // in scope 0 at ui/weird-exprs.rs:85:24: 85:30
    let _10: &[&str; 1];                 // in scope 0 at ui/weird-exprs.rs:85:24: 85:30
    let mut _11: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _14: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _15: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/weird-exprs.rs:85:32: 86:67
    let mut _16: &std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:32: 86:67
    let _17: &std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:32: 86:67
    let _18: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _19: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _22: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _23: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _25: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _26: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _27: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _28: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _29: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _30: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _32: &std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:32: 86:67
    let mut _33: &[&str; 1];             // in scope 0 at ui/weird-exprs.rs:85:24: 85:30
    scope 1 {
        debug res => _6;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
    }
    scope 2 {
        debug left_val => _18;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _19;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _24: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _24;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = <String as From<&str>>::from(const "..................................................") -> bb1; // scope 0 at ui/weird-exprs.rs:84:16: 84:82
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:84:16: 84:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:84:29: 84:81
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _33 = const _;                   // scope 0 at ui/weird-exprs.rs:85:24: 85:30
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:85:24: 85:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(dots, [], Some(promoted[1])) }
        _10 = _33;                       // scope 0 at ui/weird-exprs.rs:85:24: 85:30
        _9 = _10;                        // scope 0 at ui/weird-exprs.rs:85:24: 85:30
        _8 = move _9 as &[&str] (Pointer(Unsize)); // scope 0 at ui/weird-exprs.rs:85:24: 85:30
        _32 = const _;                   // scope 0 at ui/weird-exprs.rs:85:32: 86:67
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:85:32: 86:67
                                         // + literal: Const { ty: &RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>>>>>>, val: Unevaluated(dots, [], Some(promoted[0])) }
        _17 = _32;                       // scope 0 at ui/weird-exprs.rs:85:32: 86:67
        _16 = _17;                       // scope 0 at ui/weird-exprs.rs:85:32: 86:67
        _15 = core::fmt::ArgumentV1::<'_>::new_debug::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>>>>>>>(move _16) -> [return: bb2, unwind: bb11]; // scope 0 at ui/weird-exprs.rs:85:32: 86:67
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:85:32: 86:67
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>>>>>>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>>>>>>>}, val: Value(<ZST>) }
    }

    bb2: {
        _14 = [move _15];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _13 = &_14;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _12 = _13;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = move _12 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _7 = Arguments::<'_>::new_v1(move _8, move _11) -> [return: bb3, unwind: bb11]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = format(move _7) -> [return: bb4, unwind: bb11]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = move _6;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _18 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _19 = (_1.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _22 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _23 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _21 = <String as PartialEq>::eq(move _22, move _23) -> [return: bb5, unwind: bb10]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _20 = Not(move _21);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _20) -> [0: bb7, otherwise: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _24 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = _18;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _28;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = _30;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _25 = core::panicking::assert_failed::<String, String>(move _26, move _27, move _29, move _31) -> bb10; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_5) -> [return: bb8, unwind: bb11]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        drop(_3) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        return;                          // scope 0 at ui/weird-exprs.rs:87:2: 87:2
    }

    bb10 (cleanup): {
        drop(_5) -> bb11;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb11 (cleanup): {
        drop(_3) -> bb12;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/weird-exprs.rs:83:1: 87:2
    }
}

promoted[0] in dots: &RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>>>>>> = {
    let mut _0: &std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>>>>>>; // return place in scope 0 at ui/weird-exprs.rs:85:32: 86:67
    let mut _1: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:32: 86:67
    let mut _2: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:35: 86:67
    let mut _3: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:38: 86:67
    let mut _4: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:41: 86:67
    let mut _5: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:44: 86:67
    let mut _6: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:47: 86:67
    let mut _7: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:50: 86:67
    let mut _8: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:53: 86:67
    let mut _9: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:56: 86:67
    let mut _10: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:59: 86:67
    let mut _11: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:62: 86:67
    let mut _12: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:65: 86:67
    let mut _13: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:85:68: 86:67
    let mut _14: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:86:32: 86:67
    let mut _15: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:86:35: 86:67
    let mut _16: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:86:38: 86:67
    let mut _17: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>>; // in scope 0 at ui/weird-exprs.rs:86:41: 86:67
    let mut _18: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>>; // in scope 0 at ui/weird-exprs.rs:86:44: 86:67
    let mut _19: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>>; // in scope 0 at ui/weird-exprs.rs:86:47: 86:67
    let mut _20: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>>; // in scope 0 at ui/weird-exprs.rs:86:50: 86:67
    let mut _21: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>>; // in scope 0 at ui/weird-exprs.rs:86:53: 86:67
    let mut _22: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>>; // in scope 0 at ui/weird-exprs.rs:86:56: 86:67
    let mut _23: std::ops::RangeTo<std::ops::RangeTo<std::ops::RangeFull>>; // in scope 0 at ui/weird-exprs.rs:86:59: 86:67
    let mut _24: std::ops::RangeTo<std::ops::RangeFull>; // in scope 0 at ui/weird-exprs.rs:86:62: 86:67
    let mut _25: std::ops::RangeFull;    // in scope 0 at ui/weird-exprs.rs:86:65: 86:67

    bb0: {
        _25 = RangeFull;                 // scope 0 at ui/weird-exprs.rs:86:65: 86:67
        _24 = RangeTo::<RangeFull> { end: move _25 }; // scope 0 at ui/weird-exprs.rs:86:62: 86:67
        _23 = RangeTo::<RangeTo<RangeFull>> { end: move _24 }; // scope 0 at ui/weird-exprs.rs:86:59: 86:67
        _22 = RangeTo::<RangeTo<RangeTo<RangeFull>>> { end: move _23 }; // scope 0 at ui/weird-exprs.rs:86:56: 86:67
        _21 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeFull>>>> { end: move _22 }; // scope 0 at ui/weird-exprs.rs:86:53: 86:67
        _20 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>> { end: move _21 }; // scope 0 at ui/weird-exprs.rs:86:50: 86:67
        _19 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>> { end: move _20 }; // scope 0 at ui/weird-exprs.rs:86:47: 86:67
        _18 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>> { end: move _19 }; // scope 0 at ui/weird-exprs.rs:86:44: 86:67
        _17 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>> { end: move _18 }; // scope 0 at ui/weird-exprs.rs:86:41: 86:67
        _16 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>> { end: move _17 }; // scope 0 at ui/weird-exprs.rs:86:38: 86:67
        _15 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>> { end: move _16 }; // scope 0 at ui/weird-exprs.rs:86:35: 86:67
        _14 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>> { end: move _15 }; // scope 0 at ui/weird-exprs.rs:86:32: 86:67
        _13 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>> { end: move _14 }; // scope 0 at ui/weird-exprs.rs:85:68: 86:67
        _12 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>> { end: move _13 }; // scope 0 at ui/weird-exprs.rs:85:65: 86:67
        _11 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>> { end: move _12 }; // scope 0 at ui/weird-exprs.rs:85:62: 86:67
        _10 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>> { end: move _11 }; // scope 0 at ui/weird-exprs.rs:85:59: 86:67
        _9 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>> { end: move _10 }; // scope 0 at ui/weird-exprs.rs:85:56: 86:67
        _8 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>> { end: move _9 }; // scope 0 at ui/weird-exprs.rs:85:53: 86:67
        _7 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>> { end: move _8 }; // scope 0 at ui/weird-exprs.rs:85:50: 86:67
        _6 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>> { end: move _7 }; // scope 0 at ui/weird-exprs.rs:85:47: 86:67
        _5 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>> { end: move _6 }; // scope 0 at ui/weird-exprs.rs:85:44: 86:67
        _4 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>>> { end: move _5 }; // scope 0 at ui/weird-exprs.rs:85:41: 86:67
        _3 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>>>> { end: move _4 }; // scope 0 at ui/weird-exprs.rs:85:38: 86:67
        _2 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>>>>> { end: move _3 }; // scope 0 at ui/weird-exprs.rs:85:35: 86:67
        _1 = RangeTo::<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeTo<RangeFull>>>>>>>>>>>>>>>>>>>>>>>> { end: move _2 }; // scope 0 at ui/weird-exprs.rs:85:32: 86:67
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:85:32: 86:67
        return;                          // scope 0 at ui/weird-exprs.rs:85:32: 86:67
    }
}

promoted[1] in dots: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/weird-exprs.rs:85:24: 85:30
    let mut _1: [&str; 1];               // in scope 0 at ui/weird-exprs.rs:85:24: 85:30

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/weird-exprs.rs:85:24: 85:30
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:85:24: 85:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:85:24: 85:30
        return;                          // scope 0 at ui/weird-exprs.rs:85:24: 85:30
    }
}

fn u8(_1: u8) -> () {
    debug u8 => _1;                      // in scope 0 at ui/weird-exprs.rs:89:7: 89:9
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:89:15: 89:15
    let mut _2: u8;                      // in scope 0 at ui/weird-exprs.rs:90:8: 90:10
    let mut _3: (&u8, &u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: u8;                          // in scope 0 at ui/weird-exprs.rs:91:25: 107:10
    let _7: u8;                          // in scope 0 at ui/weird-exprs.rs:104:18: 104:20
    let mut _8: &u8;                     // in scope 0 at ui/weird-exprs.rs:104:28: 104:40
    let _9: &u8;                         // in scope 0 at ui/weird-exprs.rs:104:28: 104:40
    let mut _10: &u8;                    // in scope 0 at ui/weird-exprs.rs:104:35: 104:39
    let _11: &u8;                        // in scope 0 at ui/weird-exprs.rs:104:35: 104:39
    let _12: ();                         // in scope 0 at ui/weird-exprs.rs:105:13: 105:22
    let _13: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _14: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: &u8;                    // in scope 0 at ui/weird-exprs.rs:104:35: 104:39
    let mut _28: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug u8 => _7;                  // in scope 1 at ui/weird-exprs.rs:104:18: 104:20
    }
    scope 2 {
        debug left_val => _13;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _14;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _19: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 3 {
            debug kind => _19;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _2 = _1;                         // scope 0 at ui/weird-exprs.rs:90:8: 90:10
        switchInt(move _2) -> [0: bb5, otherwise: bb1]; // scope 0 at ui/weird-exprs.rs:90:8: 90:17
    }

    bb1: {
        _28 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &u8, val: Unevaluated(u8, [], Some(promoted[1])) }
        _4 = _28;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 0 at ui/weird-exprs.rs:104:35: 104:39
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:104:35: 104:39
                                         // + literal: Const { ty: &u8, val: Unevaluated(u8, [], Some(promoted[0])) }
        _11 = _27;                       // scope 0 at ui/weird-exprs.rs:104:35: 104:39
        _10 = _11;                       // scope 0 at ui/weird-exprs.rs:104:35: 104:39
        _9 = u8::u8::u8::<'_>(move _10) -> bb2; // scope 0 at ui/weird-exprs.rs:104:28: 104:40
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:104:28: 104:34
                                         // + literal: Const { ty: fn(&u8) -> &u8 {u8::u8::u8::<'_>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _9;                         // scope 0 at ui/weird-exprs.rs:104:28: 104:40
        _7 = (*_8);                      // scope 0 at ui/weird-exprs.rs:104:18: 104:20
        _12 = u8(const 0_u8) -> bb3;     // scope 1 at ui/weird-exprs.rs:105:13: 105:22
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:105:13: 105:17
                                         // + literal: Const { ty: fn(u8) {u8}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = _7;                         // scope 1 at ui/weird-exprs.rs:106:13: 106:15
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_3.0: &u8);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_3.1: &u8);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = const 8_u8;                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = (*_14);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _19 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<u8, u8>(move _21, move _22, move _24, move _26); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/weird-exprs.rs:109:2: 109:2
    }
}

promoted[0] in u8: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/weird-exprs.rs:104:35: 104:39
    let mut _1: u8;                      // in scope 0 at ui/weird-exprs.rs:104:36: 104:39

    bb0: {
        _1 = const 8_u8;                 // scope 0 at ui/weird-exprs.rs:104:36: 104:39
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:104:35: 104:39
        return;                          // scope 0 at ui/weird-exprs.rs:104:35: 104:39
    }
}

promoted[1] in u8: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: u8;                      // in scope 0 at ui/weird-exprs.rs:91:20: 91:23

    bb0: {
        _1 = const 8_u8;                 // scope 0 at ui/weird-exprs.rs:91:20: 91:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn u8::u8::u8(_1: &u8) -> &u8 {
    debug u8 => _1;                      // in scope 0 at ui/weird-exprs.rs:95:51: 95:53
    let mut _0: &u8;                     // return place in scope 0 at ui/weird-exprs.rs:95:67: 95:74

    bb0: {
        _0 = _1;                         // scope 0 at ui/weird-exprs.rs:97:29: 97:31
        return;                          // scope 0 at ui/weird-exprs.rs:98:26: 98:26
    }
}

fn fishy() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:111:12: 111:12
    let mut _1: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at ui/weird-exprs.rs:112:16: 112:35
    let mut _4: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: std::string::String;         // in scope 0 at ui/weird-exprs.rs:113:16: 113:85
    let mut _6: std::iter::Rev<std::str::Chars<'_>>; // in scope 0 at ui/weird-exprs.rs:113:16: 113:65
    let mut _7: std::str::Chars<'_>;     // in scope 0 at ui/weird-exprs.rs:113:16: 113:55
    let mut _8: &str;                    // in scope 0 at ui/weird-exprs.rs:113:16: 113:55
    let _9: &str;                        // in scope 0 at ui/weird-exprs.rs:113:16: 113:55
    let mut _10: &std::string::String;   // in scope 0 at ui/weird-exprs.rs:113:16: 113:55
    let _11: std::string::String;        // in scope 0 at ui/weird-exprs.rs:113:16: 113:43
    let _12: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _13: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _12;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _13;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _18: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _18;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = <String as From<&str>>::from(const "><>") -> bb1; // scope 0 at ui/weird-exprs.rs:112:16: 112:35
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:112:16: 112:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:112:29: 112:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _11 = <String as From<&str>>::from(const "><>") -> [return: bb2, unwind: bb15]; // scope 0 at ui/weird-exprs.rs:113:16: 113:43
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:113:16: 113:36
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:113:37: 113:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _10 = &_11;                      // scope 0 at ui/weird-exprs.rs:113:16: 113:55
        _9 = <String as Deref>::deref(move _10) -> [return: bb3, unwind: bb14]; // scope 0 at ui/weird-exprs.rs:113:16: 113:55
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:113:16: 113:55
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = _9;                         // scope 0 at ui/weird-exprs.rs:113:16: 113:55
        _7 = core::str::<impl str>::chars(move _8) -> [return: bb4, unwind: bb14]; // scope 0 at ui/weird-exprs.rs:113:16: 113:55
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:113:44: 113:49
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Chars<'a> {core::str::<impl str>::chars}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = <Chars<'_> as Iterator>::rev(move _7) -> [return: bb5, unwind: bb14]; // scope 0 at ui/weird-exprs.rs:113:16: 113:65
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:113:56: 113:59
                                         // + literal: Const { ty: fn(Chars<'_>) -> Rev<Chars<'_>> {<Chars<'_> as Iterator>::rev}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = <Rev<Chars<'_>> as Iterator>::collect::<String>(move _6) -> [return: bb6, unwind: bb14]; // scope 0 at ui/weird-exprs.rs:113:16: 113:85
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:113:66: 113:73
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Rev<Chars<'_>>) -> String {<Rev<Chars<'_>> as Iterator>::collect::<String>}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_1.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <String as PartialEq>::eq(move _16, move _17) -> [return: bb7, unwind: bb13]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = Not(move _15);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb9, otherwise: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _18 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<String, String>(move _20, move _21, move _23, move _25) -> bb13; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_5) -> [return: bb10, unwind: bb14]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb10: {
        drop(_11) -> [return: bb11, unwind: bb15]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb11: {
        drop(_3) -> bb12;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12: {
        return;                          // scope 0 at ui/weird-exprs.rs:114:2: 114:2
    }

    bb13 (cleanup): {
        drop(_5) -> bb14;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb14 (cleanup): {
        drop(_11) -> bb15;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15 (cleanup): {
        drop(_3) -> bb16;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/weird-exprs.rs:111:1: 114:2
    }
}

fn union() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:116:12: 116:12

    bb0: {
        return;                          // scope 0 at ui/weird-exprs.rs:118:2: 118:2
    }
}

fn special_characters() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:120:25: 120:25
    let _1: bool;                        // in scope 0 at ui/weird-exprs.rs:121:9: 121:12
    let mut _2: bool;                    // in scope 0 at ui/weird-exprs.rs:121:16: 121:83
    let mut _3: &();                     // in scope 0 at ui/weird-exprs.rs:121:17: 121:65
    let _4: ();                          // in scope 0 at ui/weird-exprs.rs:121:17: 121:65
    let mut _5: &[closure@ui/weird-exprs.rs:121:18: 121:41]; // in scope 0 at ui/weird-exprs.rs:121:17: 121:44
    let mut _6: ((&str, char), ());      // in scope 0 at ui/weird-exprs.rs:121:17: 121:65
    let mut _7: (&str, char);            // in scope 0 at ui/weird-exprs.rs:121:45: 121:57
    let mut _8: &str;                    // in scope 0 at ui/weird-exprs.rs:121:46: 121:52
    let _9: &str;                        // in scope 0 at ui/weird-exprs.rs:121:48: 121:52
    let mut _10: ();                     // in scope 0 at ui/weird-exprs.rs:121:62: 121:64
    let mut _11: &();                    // in scope 0 at ui/weird-exprs.rs:121:67: 121:82
    let _12: &[std::ops::RangeToInclusive<std::ops::RangeFull>]; // in scope 0 at ui/weird-exprs.rs:121:69: 121:80
    let mut _13: &[std::ops::RangeToInclusive<std::ops::RangeFull>; 1]; // in scope 0 at ui/weird-exprs.rs:121:69: 121:76
    let mut _14: std::ops::RangeFull;    // in scope 0 at ui/weird-exprs.rs:121:77: 121:79
    let mut _15: bool;                   // in scope 0 at ui/weird-exprs.rs:123:5: 123:18
    let mut _16: bool;                   // in scope 0 at ui/weird-exprs.rs:123:13: 123:17
    let mut _17: bool;                   // in scope 0 at ui/weird-exprs.rs:123:14: 123:17
    let mut _18: !;                      // in scope 0 at ui/weird-exprs.rs:123:5: 123:18
    let mut _19: &();                    // in scope 0 at ui/weird-exprs.rs:121:67: 121:82
    let mut _20: &[std::ops::RangeToInclusive<std::ops::RangeFull>; 1]; // in scope 0 at ui/weird-exprs.rs:121:69: 121:76
    let mut _21: &[closure@ui/weird-exprs.rs:121:18: 121:41]; // in scope 0 at ui/weird-exprs.rs:121:17: 121:44
    scope 1 {
        debug val => _1;                 // in scope 1 at ui/weird-exprs.rs:121:9: 121:12
    }

    bb0: {
        _21 = const _;                   // scope 0 at ui/weird-exprs.rs:121:17: 121:44
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:121:17: 121:44
                                         // + literal: Const { ty: &[closure@ui/weird-exprs.rs:121:18: 121:41], val: Unevaluated(special_characters, [], Some(promoted[2])) }
        _5 = _21;                        // scope 0 at ui/weird-exprs.rs:121:17: 121:44
        _9 = const "\\";                 // scope 0 at ui/weird-exprs.rs:121:48: 121:52
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:121:48: 121:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/weird-exprs.rs:121:46: 121:52
        _7 = (move _8, const '🤔');       // scope 0 at ui/weird-exprs.rs:121:45: 121:57
        _6 = (move _7, move _10);        // scope 0 at ui/weird-exprs.rs:121:17: 121:65
        _4 = <[closure@ui/weird-exprs.rs:121:18: 121:41] as Fn<((&str, char), ())>>::call(move _5, move _6) -> bb1; // scope 0 at ui/weird-exprs.rs:121:17: 121:65
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:121:17: 121:44
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/weird-exprs.rs:121:18: 121:41], ((&str, char), ())) -> <[closure@ui/weird-exprs.rs:121:18: 121:41] as FnOnce<((&str, char), ())>>::Output {<[closure@ui/weird-exprs.rs:121:18: 121:41] as Fn<((&str, char), ())>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = &_4;                        // scope 0 at ui/weird-exprs.rs:121:17: 121:65
        _20 = const _;                   // scope 0 at ui/weird-exprs.rs:121:69: 121:76
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:121:69: 121:76
                                         // + literal: Const { ty: &[RangeToInclusive<RangeFull>; 1], val: Unevaluated(special_characters, [], Some(promoted[1])) }
        _13 = _20;                       // scope 0 at ui/weird-exprs.rs:121:69: 121:76
        _12 = <[RangeToInclusive<RangeFull>; 1] as Index<RangeFull>>::index(move _13, move _14) -> bb2; // scope 0 at ui/weird-exprs.rs:121:69: 121:80
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:121:69: 121:80
                                         // + literal: Const { ty: for<'a> fn(&'a [RangeToInclusive<RangeFull>; 1], RangeFull) -> &'a <[RangeToInclusive<RangeFull>; 1] as Index<RangeFull>>::Output {<[RangeToInclusive<RangeFull>; 1] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb2: {
        _19 = const _;                   // scope 0 at ui/weird-exprs.rs:121:67: 121:82
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:121:67: 121:82
                                         // + literal: Const { ty: &(), val: Unevaluated(special_characters, [], Some(promoted[0])) }
        _11 = _19;                       // scope 0 at ui/weird-exprs.rs:121:67: 121:82
        _2 = <() as PartialEq>::eq(move _3, move _11) -> bb3; // scope 0 at ui/weird-exprs.rs:121:16: 121:83
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:121:16: 121:83
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _1 = Not(move _2);               // scope 0 at ui/weird-exprs.rs:121:15: 121:83
        _17 = _1;                        // scope 1 at ui/weird-exprs.rs:123:14: 123:17
        _16 = Not(move _17);             // scope 1 at ui/weird-exprs.rs:123:13: 123:17
        _15 = Not(move _16);             // scope 1 at ui/weird-exprs.rs:123:5: 123:18
        switchInt(move _15) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/weird-exprs.rs:123:5: 123:18
    }

    bb4: {
        _18 = core::panicking::panic(const "assertion failed: !val"); // scope 1 at ui/weird-exprs.rs:123:5: 123:18
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:123:5: 123:18
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        return;                          // scope 0 at ui/weird-exprs.rs:124:2: 124:2
    }
}

promoted[0] in special_characters: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:121:67: 121:82
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:121:67: 121:82

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:121:67: 121:82
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:121:67: 121:82
        return;                          // scope 0 at ui/weird-exprs.rs:121:67: 121:82
    }
}

promoted[1] in special_characters: &[RangeToInclusive<RangeFull>; 1] = {
    let mut _0: &[std::ops::RangeToInclusive<std::ops::RangeFull>; 1]; // return place in scope 0 at ui/weird-exprs.rs:121:69: 121:76
    let mut _1: [std::ops::RangeToInclusive<std::ops::RangeFull>; 1]; // in scope 0 at ui/weird-exprs.rs:121:69: 121:76
    let mut _2: std::ops::RangeToInclusive<std::ops::RangeFull>; // in scope 0 at ui/weird-exprs.rs:121:70: 121:75
    let mut _3: std::ops::RangeFull;     // in scope 0 at ui/weird-exprs.rs:121:73: 121:75

    bb0: {
        _3 = RangeFull;                  // scope 0 at ui/weird-exprs.rs:121:73: 121:75
        _2 = RangeToInclusive::<RangeFull> { end: move _3 }; // scope 0 at ui/weird-exprs.rs:121:70: 121:75
        _1 = [move _2];                  // scope 0 at ui/weird-exprs.rs:121:69: 121:76
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:121:69: 121:76
        return;                          // scope 0 at ui/weird-exprs.rs:121:69: 121:76
    }
}

promoted[2] in special_characters: &[closure@ui/weird-exprs.rs:121:18: 121:41] = {
    let mut _0: &[closure@ui/weird-exprs.rs:121:18: 121:41]; // return place in scope 0 at ui/weird-exprs.rs:121:17: 121:44
    let mut _1: [closure@ui/weird-exprs.rs:121:18: 121:41]; // in scope 0 at ui/weird-exprs.rs:121:17: 121:44

    bb0: {
        _1 = [closure@ui/weird-exprs.rs:121:18: 121:41]; // scope 0 at ui/weird-exprs.rs:121:17: 121:44
                                         // closure
                                         // + def_id: DefId(0:25 ~ weird_exprs[0730]::special_characters::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(((&str, char), ())),
                                         //     (),
                                         // ]
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:121:17: 121:44
        return;                          // scope 0 at ui/weird-exprs.rs:121:17: 121:44
    }
}

fn special_characters::{closure#0}(_1: &[closure@ui/weird-exprs.rs:121:18: 121:41], _2: (&str, char), _3: ()) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:121:41: 121:41
    let _4: ();                          // in scope 0 at ui/weird-exprs.rs:121:32: 121:34
    scope 1 {
        debug __ => _4;                  // in scope 1 at ui/weird-exprs.rs:121:32: 121:34
    }

    bb0: {
        return;                          // scope 0 at ui/weird-exprs.rs:121:44: 121:44
    }
}

fn punch_card() -> impl Debug {
    let mut _0: impl std::fmt::Debug;    // return place in scope 0 at ui/weird-exprs.rs:126:20: 126:40

    bb0: {
        return;                          // scope 0 at ui/weird-exprs.rs:134:2: 134:2
    }
}

fn r#match() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:136:14: 136:14
    let _1: ();                          // in scope 0 at ui/weird-exprs.rs:137:9: 137:12
    let mut _2: (&(), &());              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug val => _1;                 // in scope 1 at ui/weird-exprs.rs:137:9: 137:12
        let _5: &();                     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &();                     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _19: &();                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _3 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(), val: Unevaluated(r#match, [], Some(promoted[0])) }
        _4 = _19;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &());                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &());                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <() as PartialEq>::eq(move _9, move _10) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<(), ()>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (), &'b (), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(), ()>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/weird-exprs.rs:149:2: 149:2
    }
}

promoted[0] in r#match: &() = {
    let mut _0: &();                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:148:21: 148:23

    bb0: {
        _1 = ();                         // scope 0 at ui/weird-exprs.rs:148:21: 148:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn i_yield() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:151:14: 151:14

    bb0: {
        return;                          // scope 0 at ui/weird-exprs.rs:155:2: 155:2
    }
}

fn i_yield::{closure#0}(_1: Pin<&mut [static generator@ui/weird-exprs.rs:152:5: 152:14]>, _2: ()) -> GeneratorState<(), ()> {
    let mut _0: std::ops::GeneratorState<(), ()>; // return place in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _3: ();                      // in scope 0 at ui/weird-exprs.rs:153:15: 153:62
    let mut _4: ();                      // in scope 0 at ui/weird-exprs.rs:153:21: 153:62
    let mut _5: ();                      // in scope 0 at ui/weird-exprs.rs:153:27: 153:62
    let mut _6: ();                      // in scope 0 at ui/weird-exprs.rs:153:33: 153:62
    let mut _7: ();                      // in scope 0 at ui/weird-exprs.rs:153:39: 153:62
    let mut _8: ();                      // in scope 0 at ui/weird-exprs.rs:153:45: 153:62
    let mut _9: ();                      // in scope 0 at ui/weird-exprs.rs:153:51: 153:62
    let mut _10: ();                     // in scope 0 at ui/weird-exprs.rs:153:57: 153:62
    let mut _11: ();                     // in scope 0 at ui/weird-exprs.rs:153:57: 153:62
    let mut _12: ();                     // in scope 0 at ui/weird-exprs.rs:152:15: 152:15
    let mut _13: u32;                    // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _14: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _15: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _16: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _17: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _18: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _19: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _20: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _21: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _22: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _23: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6
    let mut _24: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]; // in scope 0 at ui/weird-exprs.rs:152:5: 154:6

    bb0: {
        _14 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        _13 = discriminant((*_14));      // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        switchInt(move _13) -> [0: bb1, 1: bb11, 3: bb2, 4: bb3, 5: bb4, 6: bb5, 7: bb6, 8: bb7, 9: bb8, 10: bb9, 11: bb10, otherwise: bb12]; // scope 0 at ui/weird-exprs.rs:152:5: 154:6
    }

    bb1: {
        _11 = ();                        // scope 0 at ui/weird-exprs.rs:153:57: 153:62
        _0 = GeneratorState::<(), ()>::Yielded(move _11); // scope 0 at ui/weird-exprs.rs:153:57: 153:62
        _15 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:153:57: 153:62
        discriminant((*_15)) = 3;        // scope 0 at ui/weird-exprs.rs:153:57: 153:62
        return;                          // scope 0 at ui/weird-exprs.rs:153:57: 153:62
    }

    bb2: {
        _10 = move _2;                   // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        _0 = GeneratorState::<(), ()>::Yielded(move _10); // scope 0 at ui/weird-exprs.rs:153:51: 153:62
        _16 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:153:51: 153:62
        discriminant((*_16)) = 4;        // scope 0 at ui/weird-exprs.rs:153:51: 153:62
        return;                          // scope 0 at ui/weird-exprs.rs:153:51: 153:62
    }

    bb3: {
        _9 = move _2;                    // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        _0 = GeneratorState::<(), ()>::Yielded(move _9); // scope 0 at ui/weird-exprs.rs:153:45: 153:62
        _17 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:153:45: 153:62
        discriminant((*_17)) = 5;        // scope 0 at ui/weird-exprs.rs:153:45: 153:62
        return;                          // scope 0 at ui/weird-exprs.rs:153:45: 153:62
    }

    bb4: {
        _8 = move _2;                    // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        _0 = GeneratorState::<(), ()>::Yielded(move _8); // scope 0 at ui/weird-exprs.rs:153:39: 153:62
        _18 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:153:39: 153:62
        discriminant((*_18)) = 6;        // scope 0 at ui/weird-exprs.rs:153:39: 153:62
        return;                          // scope 0 at ui/weird-exprs.rs:153:39: 153:62
    }

    bb5: {
        _7 = move _2;                    // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        _0 = GeneratorState::<(), ()>::Yielded(move _7); // scope 0 at ui/weird-exprs.rs:153:33: 153:62
        _19 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:153:33: 153:62
        discriminant((*_19)) = 7;        // scope 0 at ui/weird-exprs.rs:153:33: 153:62
        return;                          // scope 0 at ui/weird-exprs.rs:153:33: 153:62
    }

    bb6: {
        _6 = move _2;                    // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        _0 = GeneratorState::<(), ()>::Yielded(move _6); // scope 0 at ui/weird-exprs.rs:153:27: 153:62
        _20 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:153:27: 153:62
        discriminant((*_20)) = 8;        // scope 0 at ui/weird-exprs.rs:153:27: 153:62
        return;                          // scope 0 at ui/weird-exprs.rs:153:27: 153:62
    }

    bb7: {
        _5 = move _2;                    // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        _0 = GeneratorState::<(), ()>::Yielded(move _5); // scope 0 at ui/weird-exprs.rs:153:21: 153:62
        _21 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:153:21: 153:62
        discriminant((*_21)) = 9;        // scope 0 at ui/weird-exprs.rs:153:21: 153:62
        return;                          // scope 0 at ui/weird-exprs.rs:153:21: 153:62
    }

    bb8: {
        _4 = move _2;                    // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        _0 = GeneratorState::<(), ()>::Yielded(move _4); // scope 0 at ui/weird-exprs.rs:153:15: 153:62
        _22 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:153:15: 153:62
        discriminant((*_22)) = 10;       // scope 0 at ui/weird-exprs.rs:153:15: 153:62
        return;                          // scope 0 at ui/weird-exprs.rs:153:15: 153:62
    }

    bb9: {
        _3 = move _2;                    // scope 0 at ui/weird-exprs.rs:152:5: 154:6
        _0 = GeneratorState::<(), ()>::Yielded(move _3); // scope 0 at ui/weird-exprs.rs:153:9: 153:62
        _23 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:153:9: 153:62
        discriminant((*_23)) = 11;       // scope 0 at ui/weird-exprs.rs:153:9: 153:62
        return;                          // scope 0 at ui/weird-exprs.rs:153:9: 153:62
    }

    bb10: {
        _12 = const ();                  // scope 0 at ui/weird-exprs.rs:152:15: 154:6
        _0 = GeneratorState::<(), ()>::Complete(move _12); // scope 0 at ui/weird-exprs.rs:154:6: 154:6
        _24 = deref_copy (_1.0: &mut [static generator@ui/weird-exprs.rs:152:5: 152:14]); // scope 0 at ui/weird-exprs.rs:154:6: 154:6
        discriminant((*_24)) = 1;        // scope 0 at ui/weird-exprs.rs:154:6: 154:6
        return;                          // scope 0 at ui/weird-exprs.rs:154:6: 154:6
    }

    bb11: {
        assert(const false, "generator resumed after completion") -> bb11; // scope 0 at ui/weird-exprs.rs:152:5: 154:6
    }

    bb12: {
        unreachable;                     // scope 0 at ui/weird-exprs.rs:152:5: 154:6
    }
}

fn match_nested_if() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:157:22: 157:22
    let _1: bool;                        // in scope 0 at ui/weird-exprs.rs:158:9: 158:12
    let mut _2: bool;                    // in scope 0 at ui/weird-exprs.rs:159:15: 159:88
    let mut _3: bool;                    // in scope 0 at ui/weird-exprs.rs:159:18: 159:68
    let mut _4: bool;                    // in scope 0 at ui/weird-exprs.rs:159:21: 159:48
    let mut _5: bool;                    // in scope 0 at ui/weird-exprs.rs:162:5: 162:17
    let mut _6: bool;                    // in scope 0 at ui/weird-exprs.rs:162:13: 162:16
    let mut _7: !;                       // in scope 0 at ui/weird-exprs.rs:162:5: 162:17
    scope 1 {
        debug val => _1;                 // in scope 1 at ui/weird-exprs.rs:158:9: 158:12
    }

    bb0: {
        _4 = const true;                 // scope 0 at ui/weird-exprs.rs:159:30: 159:34
        switchInt(move _4) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/weird-exprs.rs:159:21: 159:48
    }

    bb1: {
        _3 = const true;                 // scope 0 at ui/weird-exprs.rs:159:50: 159:54
        goto -> bb3;                     // scope 0 at ui/weird-exprs.rs:159:18: 159:68
    }

    bb2: {
        _3 = const false;                // scope 0 at ui/weird-exprs.rs:159:62: 159:67
        goto -> bb3;                     // scope 0 at ui/weird-exprs.rs:159:18: 159:68
    }

    bb3: {
        switchInt(move _3) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/weird-exprs.rs:159:18: 159:68
    }

    bb4: {
        _2 = const true;                 // scope 0 at ui/weird-exprs.rs:159:70: 159:74
        goto -> bb6;                     // scope 0 at ui/weird-exprs.rs:159:15: 159:88
    }

    bb5: {
        _2 = const false;                // scope 0 at ui/weird-exprs.rs:159:82: 159:87
        goto -> bb6;                     // scope 0 at ui/weird-exprs.rs:159:15: 159:88
    }

    bb6: {
        switchInt(move _2) -> [0: bb8, otherwise: bb7]; // scope 0 at ui/weird-exprs.rs:159:15: 159:88
    }

    bb7: {
        _1 = const true;                 // scope 0 at ui/weird-exprs.rs:159:92: 159:96
        goto -> bb9;                     // scope 0 at ui/weird-exprs.rs:159:92: 159:96
    }

    bb8: {
        _1 = const false;                // scope 0 at ui/weird-exprs.rs:160:14: 160:19
        goto -> bb9;                     // scope 0 at ui/weird-exprs.rs:160:14: 160:19
    }

    bb9: {
        _6 = _1;                         // scope 1 at ui/weird-exprs.rs:162:13: 162:16
        _5 = Not(move _6);               // scope 1 at ui/weird-exprs.rs:162:5: 162:17
        switchInt(move _5) -> [0: bb11, otherwise: bb10]; // scope 1 at ui/weird-exprs.rs:162:5: 162:17
    }

    bb10: {
        _7 = core::panicking::panic(const "assertion failed: val"); // scope 1 at ui/weird-exprs.rs:162:5: 162:17
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:162:5: 162:17
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        return;                          // scope 0 at ui/weird-exprs.rs:163:2: 163:2
    }
}

fn monkey_barrel() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:165:20: 165:20
    let _1: ();                          // in scope 0 at ui/weird-exprs.rs:166:9: 166:12
    let mut _2: (&(), &());              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &();                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug val => _1;                 // in scope 1 at ui/weird-exprs.rs:166:9: 166:12
        let _5: &();                     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &();                     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _19: &();                // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 26 {
            debug left_val => _5;        // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 27 {
                debug kind => _11;       // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
    }
    scope 3 {
    }
    scope 4 {
    }
    scope 5 {
    }
    scope 6 {
    }
    scope 7 {
    }
    scope 8 {
    }
    scope 9 {
    }
    scope 10 {
    }
    scope 11 {
    }
    scope 12 {
    }
    scope 13 {
    }
    scope 14 {
    }
    scope 15 {
    }
    scope 16 {
    }
    scope 17 {
    }
    scope 18 {
    }
    scope 19 {
    }
    scope 20 {
    }
    scope 21 {
    }
    scope 22 {
    }
    scope 23 {
    }
    scope 24 {
    }
    scope 25 {
    }

    bb0: {
        _3 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(), val: Unevaluated(monkey_barrel, [], Some(promoted[0])) }
        _4 = _19;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &());                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &());                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <() as PartialEq>::eq(move _9, move _10) -> bb1; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Not(move _8);               // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<(), ()>(move _13, move _14, move _16, move _18); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (), &'b (), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(), ()>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/weird-exprs.rs:168:2: 168:2
    }
}

promoted[0] in monkey_barrel: &() = {
    let mut _0: &();                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:167:21: 167:23

    bb0: {
        _1 = ();                         // scope 0 at ui/weird-exprs.rs:167:21: 167:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn 𝚌𝚘𝚗𝚝𝚒𝚗𝚞𝚎() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:170:15: 170:15
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: i32;                         // in scope 0 at ui/weird-exprs.rs:176:16: 178:6
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = 𝚋𝚛𝚎𝚊𝚔() -> bb1;             // scope 0 at ui/weird-exprs.rs:177:15: 177:23
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:177:15: 177:20
                                         // + literal: Const { ty: fn() -> i32 {𝚋𝚛𝚎𝚊𝚔}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(𝚌𝚘𝚗𝚝𝚒𝚗𝚞𝚎, [], Some(promoted[0])) }
        _4 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 42_i32;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<i32, i32>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/weird-exprs.rs:179:2: 179:2
    }
}

promoted[0] in 𝚌𝚘𝚗𝚝𝚒𝚗𝚞𝚎: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/weird-exprs.rs:178:8: 178:10

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/weird-exprs.rs:178:8: 178:10
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn 𝚋𝚛𝚎𝚊𝚔() -> i32 {
    let mut _0: i32;                     // return place in scope 0 at ui/weird-exprs.rs:172:19: 172:23
    let _1: i32;                         // in scope 0 at ui/weird-exprs.rs:173:13: 173:19
    scope 1 {
        debug 𝚛𝚎𝚝𝚞𝚛𝚗 => _1;              // in scope 1 at ui/weird-exprs.rs:173:13: 173:19
    }

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/weird-exprs.rs:173:22: 173:24
        _0 = const 42_i32;               // scope 1 at ui/weird-exprs.rs:174:16: 174:22
        return;                          // scope 0 at ui/weird-exprs.rs:175:6: 175:6
    }
}

fn function() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:181:15: 181:15
    let mut _1: function::foo;           // in scope 0 at ui/weird-exprs.rs:189:15: 189:53
    let mut _2: function::foo;           // in scope 0 at ui/weird-exprs.rs:189:15: 189:51
    let mut _3: function::foo;           // in scope 0 at ui/weird-exprs.rs:189:15: 189:49
    let mut _4: function::foo;           // in scope 0 at ui/weird-exprs.rs:189:15: 189:47
    let mut _5: function::foo;           // in scope 0 at ui/weird-exprs.rs:189:15: 189:45
    let mut _6: function::foo;           // in scope 0 at ui/weird-exprs.rs:189:15: 189:42
    let mut _7: function::foo;           // in scope 0 at ui/weird-exprs.rs:189:15: 189:40
    let mut _8: function::foo;           // in scope 0 at ui/weird-exprs.rs:189:15: 189:38
    let mut _9: function::foo;           // in scope 0 at ui/weird-exprs.rs:189:15: 189:36
    let mut _10: function::foo;          // in scope 0 at ui/weird-exprs.rs:189:15: 189:33
    let mut _11: function::foo;          // in scope 0 at ui/weird-exprs.rs:189:15: 189:31
    let mut _12: function::foo;          // in scope 0 at ui/weird-exprs.rs:189:15: 189:29
    let mut _13: function::foo;          // in scope 0 at ui/weird-exprs.rs:189:15: 189:26
    let mut _14: function::foo;          // in scope 0 at ui/weird-exprs.rs:189:15: 189:24
    let mut _15: function::foo;          // in scope 0 at ui/weird-exprs.rs:189:15: 189:21
    let mut _16: function::foo;          // in scope 0 at ui/weird-exprs.rs:189:15: 189:18
    let mut _17: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:21
    let mut _18: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:24
    let mut _19: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:26
    let mut _20: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:29
    let mut _21: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:31
    let mut _22: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:33
    let mut _23: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:36
    let mut _24: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:38
    let mut _25: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:40
    let mut _26: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:42
    let mut _27: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:45
    let mut _28: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:47
    let mut _29: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:49
    let mut _30: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:51
    let mut _31: ();                     // in scope 0 at ui/weird-exprs.rs:189:15: 189:53
    scope 1 {
    }

    bb0: {
        _15 = <foo as FnOnce<()>>::call_once(move _16, move _17) -> bb1; // scope 0 at ui/weird-exprs.rs:189:15: 189:21
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:18
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        _14 = <foo as FnOnce<()>>::call_once(move _15, move _18) -> bb2; // scope 0 at ui/weird-exprs.rs:189:15: 189:24
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:21
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = <foo as FnOnce<()>>::call_once(move _14, move _19) -> bb3; // scope 0 at ui/weird-exprs.rs:189:15: 189:26
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:24
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = <foo as FnOnce<()>>::call_once(move _13, move _20) -> bb4; // scope 0 at ui/weird-exprs.rs:189:15: 189:29
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:26
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = <foo as FnOnce<()>>::call_once(move _12, move _21) -> bb5; // scope 0 at ui/weird-exprs.rs:189:15: 189:31
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:29
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = <foo as FnOnce<()>>::call_once(move _11, move _22) -> bb6; // scope 0 at ui/weird-exprs.rs:189:15: 189:33
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:31
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = <foo as FnOnce<()>>::call_once(move _10, move _23) -> bb7; // scope 0 at ui/weird-exprs.rs:189:15: 189:36
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:33
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = <foo as FnOnce<()>>::call_once(move _9, move _24) -> bb8; // scope 0 at ui/weird-exprs.rs:189:15: 189:38
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:36
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb8: {
        _7 = <foo as FnOnce<()>>::call_once(move _8, move _25) -> bb9; // scope 0 at ui/weird-exprs.rs:189:15: 189:40
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:38
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb9: {
        _6 = <foo as FnOnce<()>>::call_once(move _7, move _26) -> bb10; // scope 0 at ui/weird-exprs.rs:189:15: 189:42
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:40
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb10: {
        _5 = <foo as FnOnce<()>>::call_once(move _6, move _27) -> bb11; // scope 0 at ui/weird-exprs.rs:189:15: 189:45
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:42
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb11: {
        _4 = <foo as FnOnce<()>>::call_once(move _5, move _28) -> bb12; // scope 0 at ui/weird-exprs.rs:189:15: 189:47
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:45
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb12: {
        _3 = <foo as FnOnce<()>>::call_once(move _4, move _29) -> bb13; // scope 0 at ui/weird-exprs.rs:189:15: 189:49
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:47
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb13: {
        _2 = <foo as FnOnce<()>>::call_once(move _3, move _30) -> bb14; // scope 0 at ui/weird-exprs.rs:189:15: 189:51
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:49
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb14: {
        _1 = <foo as FnOnce<()>>::call_once(move _2, move _31) -> bb15; // scope 0 at ui/weird-exprs.rs:189:15: 189:53
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:189:15: 189:51
                                         // + literal: Const { ty: extern "rust-call" fn(foo, ()) -> <foo as FnOnce<()>>::Output {<foo as FnOnce<()>>::call_once}, val: Value(<ZST>) }
    }

    bb15: {
        return;                          // scope 0 at ui/weird-exprs.rs:190:2: 190:2
    }
}

fn function::<impl at ui/weird-exprs.rs:183:5: 183:28>::call_once(_1: foo, _2: ()) -> foo {
    debug self => _1;                    // in scope 0 at ui/weird-exprs.rs:185:41: 185:45
    debug _args => _2;                   // in scope 0 at ui/weird-exprs.rs:185:47: 185:52
    let mut _0: function::foo;           // return place in scope 0 at ui/weird-exprs.rs:185:61: 185:73

    bb0: {
        return;                          // scope 0 at ui/weird-exprs.rs:187:10: 187:10
    }
}

fn bathroom_stall() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:192:21: 192:21
    let mut _1: i32;                     // in scope 0 at ui/weird-exprs.rs:193:9: 193:14
    let mut _2: bool;                    // in scope 0 at ui/weird-exprs.rs:194:32: 194:48
    let mut _3: &();                     // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _4: (i32, bool);             // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _5: &();                     // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _6: (i32, bool);             // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _7: bool;                    // in scope 0 at ui/weird-exprs.rs:194:32: 194:48
    let mut _8: &();                     // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _9: (i32, bool);             // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _10: &();                    // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _11: (i32, bool);            // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _12: bool;                   // in scope 0 at ui/weird-exprs.rs:194:32: 194:48
    let mut _13: &();                    // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _14: (i32, bool);            // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _15: &();                    // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _16: (i32, bool);            // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _17: bool;                   // in scope 0 at ui/weird-exprs.rs:194:32: 194:48
    let mut _18: &();                    // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _19: (i32, bool);            // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _20: &();                    // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _21: (i32, bool);            // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _22: bool;                   // in scope 0 at ui/weird-exprs.rs:194:32: 194:48
    let mut _23: &();                    // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _24: (i32, bool);            // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _25: &();                    // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _26: (i32, bool);            // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _27: bool;                   // in scope 0 at ui/weird-exprs.rs:194:32: 194:48
    let mut _28: &();                    // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _29: (i32, bool);            // in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _30: &();                    // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _31: (i32, bool);            // in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _32: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug i => _1;                   // in scope 1 at ui/weird-exprs.rs:193:9: 193:14
        let _35: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _36: &i32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _49: &i32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _50: &();                // in scope 1 at ui/weird-exprs.rs:194:42: 194:48
        let mut _51: &();                // in scope 1 at ui/weird-exprs.rs:194:32: 194:38
        let mut _52: &();                // in scope 1 at ui/weird-exprs.rs:194:42: 194:48
        let mut _53: &();                // in scope 1 at ui/weird-exprs.rs:194:32: 194:38
        let mut _54: &();                // in scope 1 at ui/weird-exprs.rs:194:42: 194:48
        let mut _55: &();                // in scope 1 at ui/weird-exprs.rs:194:32: 194:38
        let mut _56: &();                // in scope 1 at ui/weird-exprs.rs:194:42: 194:48
        let mut _57: &();                // in scope 1 at ui/weird-exprs.rs:194:32: 194:38
        let mut _58: &();                // in scope 1 at ui/weird-exprs.rs:194:42: 194:48
        let mut _59: &();                // in scope 1 at ui/weird-exprs.rs:194:32: 194:38
        let mut _60: &();                // in scope 1 at ui/weird-exprs.rs:194:42: 194:48
        let mut _61: &();                // in scope 1 at ui/weird-exprs.rs:194:32: 194:38
        scope 2 {
            debug left_val => _35;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _36;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _41: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _41;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/weird-exprs.rs:193:17: 193:18
        _4 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb1; // scope 1 at ui/weird-exprs.rs:194:32: 194:38
    }

    bb1: {
        _1 = move (_4.0: i32);           // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _61 = const _;                   // scope 1 at ui/weird-exprs.rs:194:32: 194:38
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:38
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[12])) }
        _3 = _61;                        // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _6 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb2; // scope 1 at ui/weird-exprs.rs:194:42: 194:48
    }

    bb2: {
        _1 = move (_6.0: i32);           // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _60 = const _;                   // scope 1 at ui/weird-exprs.rs:194:42: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:42: 194:48
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[11])) }
        _5 = _60;                        // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _2 = <() as PartialEq>::ne(move _3, move _5) -> bb3; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb3: {
        switchInt(move _2) -> [0: bb4, otherwise: bb23]; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
    }

    bb4: {
        _9 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb5; // scope 1 at ui/weird-exprs.rs:194:32: 194:38
    }

    bb5: {
        _1 = move (_9.0: i32);           // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _59 = const _;                   // scope 1 at ui/weird-exprs.rs:194:32: 194:38
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:38
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[10])) }
        _8 = _59;                        // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _11 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb6; // scope 1 at ui/weird-exprs.rs:194:42: 194:48
    }

    bb6: {
        _1 = move (_11.0: i32);          // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _58 = const _;                   // scope 1 at ui/weird-exprs.rs:194:42: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:42: 194:48
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[9])) }
        _10 = _58;                       // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _7 = <() as PartialEq>::ne(move _8, move _10) -> bb7; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _7) -> [0: bb8, otherwise: bb23]; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
    }

    bb8: {
        _14 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        assert(!move (_14.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb9; // scope 1 at ui/weird-exprs.rs:194:32: 194:38
    }

    bb9: {
        _1 = move (_14.0: i32);          // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _57 = const _;                   // scope 1 at ui/weird-exprs.rs:194:32: 194:38
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:38
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[8])) }
        _13 = _57;                       // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _16 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        assert(!move (_16.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb10; // scope 1 at ui/weird-exprs.rs:194:42: 194:48
    }

    bb10: {
        _1 = move (_16.0: i32);          // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _56 = const _;                   // scope 1 at ui/weird-exprs.rs:194:42: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:42: 194:48
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[7])) }
        _15 = _56;                       // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _12 = <() as PartialEq>::ne(move _13, move _15) -> bb11; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb11: {
        switchInt(move _12) -> [0: bb12, otherwise: bb23]; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
    }

    bb12: {
        _19 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb13; // scope 1 at ui/weird-exprs.rs:194:32: 194:38
    }

    bb13: {
        _1 = move (_19.0: i32);          // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _55 = const _;                   // scope 1 at ui/weird-exprs.rs:194:32: 194:38
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:38
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[6])) }
        _18 = _55;                       // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _21 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        assert(!move (_21.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb14; // scope 1 at ui/weird-exprs.rs:194:42: 194:48
    }

    bb14: {
        _1 = move (_21.0: i32);          // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _54 = const _;                   // scope 1 at ui/weird-exprs.rs:194:42: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:42: 194:48
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[5])) }
        _20 = _54;                       // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _17 = <() as PartialEq>::ne(move _18, move _20) -> bb15; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _17) -> [0: bb16, otherwise: bb23]; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
    }

    bb16: {
        _24 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        assert(!move (_24.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb17; // scope 1 at ui/weird-exprs.rs:194:32: 194:38
    }

    bb17: {
        _1 = move (_24.0: i32);          // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _53 = const _;                   // scope 1 at ui/weird-exprs.rs:194:32: 194:38
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:38
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[4])) }
        _23 = _53;                       // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _26 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        assert(!move (_26.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb18; // scope 1 at ui/weird-exprs.rs:194:42: 194:48
    }

    bb18: {
        _1 = move (_26.0: i32);          // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _52 = const _;                   // scope 1 at ui/weird-exprs.rs:194:42: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:42: 194:48
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[3])) }
        _25 = _52;                       // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _22 = <() as PartialEq>::ne(move _23, move _25) -> bb19; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _22) -> [0: bb20, otherwise: bb23]; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
    }

    bb20: {
        _29 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        assert(!move (_29.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb21; // scope 1 at ui/weird-exprs.rs:194:32: 194:38
    }

    bb21: {
        _1 = move (_29.0: i32);          // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _51 = const _;                   // scope 1 at ui/weird-exprs.rs:194:32: 194:38
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:38
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[2])) }
        _28 = _51;                       // scope 1 at ui/weird-exprs.rs:194:32: 194:38
        _31 = CheckedAdd(_1, const 1_i32); // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        assert(!move (_31.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, const 1_i32) -> bb22; // scope 1 at ui/weird-exprs.rs:194:42: 194:48
    }

    bb22: {
        _1 = move (_31.0: i32);          // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _50 = const _;                   // scope 1 at ui/weird-exprs.rs:194:42: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:42: 194:48
                                         // + literal: Const { ty: &(), val: Unevaluated(bathroom_stall, [], Some(promoted[1])) }
        _30 = _50;                       // scope 1 at ui/weird-exprs.rs:194:42: 194:48
        _27 = <() as PartialEq>::ne(move _28, move _30) -> bb23; // scope 1 at ui/weird-exprs.rs:194:32: 194:48
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:194:32: 194:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb23: {
        _33 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _49 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(bathroom_stall, [], Some(promoted[0])) }
        _34 = _49;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _34);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_32.0: &i32);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_32.1: &i32);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = (*_35);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = const 13_i32;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = Eq(move _39, move _40);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _37 = Not(move _38);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb25, otherwise: bb24]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _41 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<i32, i32>(move _43, move _44, move _46, move _48); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb25: {
        return;                          // scope 0 at ui/weird-exprs.rs:196:2: 196:2
    }
}

promoted[0] in bathroom_stall: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/weird-exprs.rs:195:19: 195:21

    bb0: {
        _1 = const 13_i32;               // scope 0 at ui/weird-exprs.rs:195:19: 195:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:42: 194:48

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        return;                          // scope 0 at ui/weird-exprs.rs:194:42: 194:48
    }
}

promoted[2] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:32: 194:38

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        return;                          // scope 0 at ui/weird-exprs.rs:194:32: 194:38
    }
}

promoted[3] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:42: 194:48

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        return;                          // scope 0 at ui/weird-exprs.rs:194:42: 194:48
    }
}

promoted[4] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:32: 194:38

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        return;                          // scope 0 at ui/weird-exprs.rs:194:32: 194:38
    }
}

promoted[5] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:42: 194:48

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        return;                          // scope 0 at ui/weird-exprs.rs:194:42: 194:48
    }
}

promoted[6] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:32: 194:38

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        return;                          // scope 0 at ui/weird-exprs.rs:194:32: 194:38
    }
}

promoted[7] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:42: 194:48

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        return;                          // scope 0 at ui/weird-exprs.rs:194:42: 194:48
    }
}

promoted[8] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:32: 194:38

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        return;                          // scope 0 at ui/weird-exprs.rs:194:32: 194:38
    }
}

promoted[9] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:42: 194:48

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        return;                          // scope 0 at ui/weird-exprs.rs:194:42: 194:48
    }
}

promoted[10] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:32: 194:38

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        return;                          // scope 0 at ui/weird-exprs.rs:194:32: 194:38
    }
}

promoted[11] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:42: 194:48
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:42: 194:48

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:42: 194:48
        return;                          // scope 0 at ui/weird-exprs.rs:194:42: 194:48
    }
}

promoted[12] in bathroom_stall: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/weird-exprs.rs:194:32: 194:38
    let mut _1: ();                      // in scope 0 at ui/weird-exprs.rs:194:32: 194:38

    bb0: {
        _1 = const ();                   // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        _0 = &_1;                        // scope 0 at ui/weird-exprs.rs:194:32: 194:38
        return;                          // scope 0 at ui/weird-exprs.rs:194:32: 194:38
    }
}

fn closure_matching() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:198:23: 198:23
    let _1: [closure@ui/weird-exprs.rs:199:13: 199:16]; // in scope 0 at ui/weird-exprs.rs:199:9: 199:10
    let mut _3: std::option::Option<i32>; // in scope 0 at ui/weird-exprs.rs:200:25: 200:30
    let mut _4: &[closure@ui/weird-exprs.rs:199:13: 199:16]; // in scope 0 at ui/weird-exprs.rs:200:25: 200:26
    let mut _5: (std::ops::RangeFull,);  // in scope 0 at ui/weird-exprs.rs:200:25: 200:30
    let mut _6: std::option::Option<i32>; // in scope 0 at ui/weird-exprs.rs:204:22: 204:27
    let mut _7: &[closure@ui/weird-exprs.rs:201:24: 201:27]; // in scope 0 at ui/weird-exprs.rs:204:22: 204:23
    let mut _8: (std::ops::RangeFull,);  // in scope 0 at ui/weird-exprs.rs:204:22: 204:27
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/weird-exprs.rs:199:9: 199:10
        let _2: [closure@ui/weird-exprs.rs:201:24: 201:27]; // in scope 1 at ui/weird-exprs.rs:200:11: 200:12
        scope 2 {
            debug x => _2;               // in scope 2 at ui/weird-exprs.rs:200:11: 200:12
        }
    }

    bb0: {
        _4 = &_1;                        // scope 1 at ui/weird-exprs.rs:200:25: 200:26
        _3 = <[closure@ui/weird-exprs.rs:199:13: 199:16] as Fn<(RangeFull,)>>::call(move _4, move _5) -> bb1; // scope 1 at ui/weird-exprs.rs:200:25: 200:30
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:200:25: 200:26
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/weird-exprs.rs:199:13: 199:16], (RangeFull,)) -> <[closure@ui/weird-exprs.rs:199:13: 199:16] as FnOnce<(RangeFull,)>>::Output {<[closure@ui/weird-exprs.rs:199:13: 199:16] as Fn<(RangeFull,)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &_2;                        // scope 2 at ui/weird-exprs.rs:204:22: 204:23
        _6 = <[closure@ui/weird-exprs.rs:201:24: 201:27] as Fn<(RangeFull,)>>::call(move _7, move _8) -> bb2; // scope 2 at ui/weird-exprs.rs:204:22: 204:27
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:204:22: 204:23
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/weird-exprs.rs:201:24: 201:27], (RangeFull,)) -> <[closure@ui/weird-exprs.rs:201:24: 201:27] as FnOnce<(RangeFull,)>>::Output {<[closure@ui/weird-exprs.rs:201:24: 201:27] as Fn<(RangeFull,)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/weird-exprs.rs:205:2: 205:2
    }
}

fn closure_matching::{closure#0}(_1: &[closure@ui/weird-exprs.rs:199:13: 199:16], _2: RangeFull) -> Option<i32> {
    let mut _0: std::option::Option<i32>; // return place in scope 0 at ui/weird-exprs.rs:199:17: 199:17

    bb0: {
        _0 = Option::<i32>::Some(const 1_i32); // scope 0 at ui/weird-exprs.rs:199:17: 199:24
        return;                          // scope 0 at ui/weird-exprs.rs:199:24: 199:24
    }
}

fn closure_matching::{closure#1}(_1: &[closure@ui/weird-exprs.rs:201:24: 201:27], _2: RangeFull) -> Option<i32> {
    let mut _0: std::option::Option<i32>; // return place in scope 0 at ui/weird-exprs.rs:201:28: 201:28

    bb0: {
        _0 = Option::<i32>::Some(const 3_i32); // scope 0 at ui/weird-exprs.rs:201:28: 201:35
        return;                          // scope 0 at ui/weird-exprs.rs:201:35: 201:35
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/weird-exprs.rs:207:15: 207:15
    let _1: bool;                        // in scope 0 at ui/weird-exprs.rs:208:5: 208:14
    let _2: ();                          // in scope 0 at ui/weird-exprs.rs:209:5: 209:12
    let _3: ();                          // in scope 0 at ui/weird-exprs.rs:210:5: 210:11
    let _4: ();                          // in scope 0 at ui/weird-exprs.rs:211:5: 211:18
    let _5: ();                          // in scope 0 at ui/weird-exprs.rs:212:5: 212:14
    let _6: usize;                       // in scope 0 at ui/weird-exprs.rs:213:5: 213:20
    let _7: ();                          // in scope 0 at ui/weird-exprs.rs:214:5: 214:16
    let _8: ();                          // in scope 0 at ui/weird-exprs.rs:215:5: 215:19
    let _9: ();                          // in scope 0 at ui/weird-exprs.rs:216:5: 216:11
    let _10: ();                         // in scope 0 at ui/weird-exprs.rs:217:5: 217:12
    let _11: ();                         // in scope 0 at ui/weird-exprs.rs:218:5: 218:12
    let _12: ();                         // in scope 0 at ui/weird-exprs.rs:219:5: 219:12
    let _13: ();                         // in scope 0 at ui/weird-exprs.rs:220:5: 220:25
    let _14: impl std::fmt::Debug;       // in scope 0 at ui/weird-exprs.rs:221:5: 221:17
    let _15: ();                         // in scope 0 at ui/weird-exprs.rs:222:5: 222:14
    let _16: ();                         // in scope 0 at ui/weird-exprs.rs:223:5: 223:14
    let _17: ();                         // in scope 0 at ui/weird-exprs.rs:224:5: 224:22
    let _18: ();                         // in scope 0 at ui/weird-exprs.rs:225:5: 225:20
    let _19: ();                         // in scope 0 at ui/weird-exprs.rs:226:5: 226:15
    let _20: ();                         // in scope 0 at ui/weird-exprs.rs:227:5: 227:15
    let _21: ();                         // in scope 0 at ui/weird-exprs.rs:228:5: 228:21
    let _22: ();                         // in scope 0 at ui/weird-exprs.rs:229:5: 229:23

    bb0: {
        _1 = strange() -> bb1;           // scope 0 at ui/weird-exprs.rs:208:5: 208:14
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:208:5: 208:12
                                         // + literal: Const { ty: fn() -> bool {strange}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = funny() -> bb2;             // scope 0 at ui/weird-exprs.rs:209:5: 209:12
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:209:5: 209:10
                                         // + literal: Const { ty: fn() {funny}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = what() -> bb3;              // scope 0 at ui/weird-exprs.rs:210:5: 210:11
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:210:5: 210:9
                                         // + literal: Const { ty: fn() {what}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = zombiejesus() -> bb4;       // scope 0 at ui/weird-exprs.rs:211:5: 211:18
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:211:5: 211:16
                                         // + literal: Const { ty: fn() {zombiejesus}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = notsure() -> bb5;           // scope 0 at ui/weird-exprs.rs:212:5: 212:14
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:212:5: 212:12
                                         // + literal: Const { ty: fn() {notsure}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = canttouchthis() -> bb6;     // scope 0 at ui/weird-exprs.rs:213:5: 213:20
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:213:5: 213:18
                                         // + literal: Const { ty: fn() -> usize {canttouchthis}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = angrydome() -> bb7;         // scope 0 at ui/weird-exprs.rs:214:5: 214:16
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:214:5: 214:14
                                         // + literal: Const { ty: fn() {angrydome}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = evil_lincoln() -> bb8;      // scope 0 at ui/weird-exprs.rs:215:5: 215:19
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:215:5: 215:17
                                         // + literal: Const { ty: fn() {evil_lincoln}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = dots() -> bb9;              // scope 0 at ui/weird-exprs.rs:216:5: 216:11
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:216:5: 216:9
                                         // + literal: Const { ty: fn() {dots}, val: Value(<ZST>) }
    }

    bb9: {
        _10 = u8(const 8_u8) -> bb10;    // scope 0 at ui/weird-exprs.rs:217:5: 217:12
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:217:5: 217:7
                                         // + literal: Const { ty: fn(u8) {u8}, val: Value(<ZST>) }
    }

    bb10: {
        _11 = fishy() -> bb11;           // scope 0 at ui/weird-exprs.rs:218:5: 218:12
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:218:5: 218:10
                                         // + literal: Const { ty: fn() {fishy}, val: Value(<ZST>) }
    }

    bb11: {
        _12 = union() -> bb12;           // scope 0 at ui/weird-exprs.rs:219:5: 219:12
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:219:5: 219:10
                                         // + literal: Const { ty: fn() {union}, val: Value(<ZST>) }
    }

    bb12: {
        _13 = special_characters() -> bb13; // scope 0 at ui/weird-exprs.rs:220:5: 220:25
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:220:5: 220:23
                                         // + literal: Const { ty: fn() {special_characters}, val: Value(<ZST>) }
    }

    bb13: {
        _14 = punch_card() -> bb14;      // scope 0 at ui/weird-exprs.rs:221:5: 221:17
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:221:5: 221:15
                                         // + literal: Const { ty: fn() -> impl Debug {punch_card}, val: Value(<ZST>) }
    }

    bb14: {
        _15 = r#match() -> bb15;         // scope 0 at ui/weird-exprs.rs:222:5: 222:14
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:222:5: 222:12
                                         // + literal: Const { ty: fn() {r#match}, val: Value(<ZST>) }
    }

    bb15: {
        _16 = i_yield() -> bb16;         // scope 0 at ui/weird-exprs.rs:223:5: 223:14
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:223:5: 223:12
                                         // + literal: Const { ty: fn() {i_yield}, val: Value(<ZST>) }
    }

    bb16: {
        _17 = match_nested_if() -> bb17; // scope 0 at ui/weird-exprs.rs:224:5: 224:22
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:224:5: 224:20
                                         // + literal: Const { ty: fn() {match_nested_if}, val: Value(<ZST>) }
    }

    bb17: {
        _18 = monkey_barrel() -> bb18;   // scope 0 at ui/weird-exprs.rs:225:5: 225:20
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:225:5: 225:18
                                         // + literal: Const { ty: fn() {monkey_barrel}, val: Value(<ZST>) }
    }

    bb18: {
        _19 = 𝚌𝚘𝚗𝚝𝚒𝚗𝚞𝚎() -> bb19;        // scope 0 at ui/weird-exprs.rs:226:5: 226:15
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:226:5: 226:13
                                         // + literal: Const { ty: fn() {𝚌𝚘𝚗𝚝𝚒𝚗𝚞𝚎}, val: Value(<ZST>) }
    }

    bb19: {
        _20 = function() -> bb20;        // scope 0 at ui/weird-exprs.rs:227:5: 227:15
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:227:5: 227:13
                                         // + literal: Const { ty: fn() {function}, val: Value(<ZST>) }
    }

    bb20: {
        _21 = bathroom_stall() -> bb21;  // scope 0 at ui/weird-exprs.rs:228:5: 228:21
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:228:5: 228:19
                                         // + literal: Const { ty: fn() {bathroom_stall}, val: Value(<ZST>) }
    }

    bb21: {
        _22 = closure_matching() -> bb22; // scope 0 at ui/weird-exprs.rs:229:5: 229:23
                                         // mir::Constant
                                         // + span: ui/weird-exprs.rs:229:5: 229:21
                                         // + literal: Const { ty: fn() {closure_matching}, val: Value(<ZST>) }
    }

    bb22: {
        return;                          // scope 0 at ui/weird-exprs.rs:230:2: 230:2
    }
}
