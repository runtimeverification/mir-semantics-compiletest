// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:6:11: 6:11
    let mut _1: std::vec::Vec<i32>;      // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:7:9: 7:24
    let mut _6: std::ops::RangeInclusive<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
    let mut _7: std::ops::RangeInclusive<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
    let mut _8: i32;                     // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:20
    let mut _9: i32;                     // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:23: 13:30
    let _11: ();                         // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
    let mut _12: std::option::Option<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
    let mut _13: &mut std::ops::RangeInclusive<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
    let mut _14: &mut std::ops::RangeInclusive<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
    let mut _15: isize;                  // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:5: 25:6
    let _17: ();                         // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:9: 16:10
    let mut _18: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:25: 14:29
    let mut _19: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:25: 14:29
    let mut _20: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:16: 14:22
    let mut _21: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:16: 14:22
    let mut _22: &mut std::vec::Vec<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:15:13: 15:32
    let mut _23: i32;                    // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:15:30: 15:31
    let mut _24: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:17: 18:22
    let mut _25: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:17: 18:22
    let mut _26: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:17: 22:21
    let mut _27: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:17: 22:21
    let mut _28: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:17: 21:21
    let mut _29: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:17: 21:21
    let mut _30: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:17: 20:35
    let mut _31: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:17: 20:35
    let mut _32: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:18: 19:22
    let mut _33: bool;                   // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:18: 19:22
    let mut _34: &mut std::vec::Vec<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:26: 18:42
    let mut _35: i32;                    // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:40: 18:41
    let mut _37: &mut std::vec::Vec<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:31: 19:45
    let mut _38: i32;                    // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:43: 19:44
    let mut _40: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _41: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _42: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _45: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _46: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _47: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _48: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _50: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _51: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _52: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _53: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _54: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _55: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _58: &mut std::vec::Vec<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:25: 21:43
    let mut _59: i32;                    // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:41: 21:42
    let mut _61: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _62: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _63: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _68: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _69: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _71: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _72: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _73: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _74: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _75: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _76: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _79: &mut std::vec::Vec<i32>; // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:23:18: 23:32
    let mut _80: i32;                    // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:23:30: 23:31
    let mut _81: (&std::vec::Vec<i32>, &[i32; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _82: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _83: &[i32; 4];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _86: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _87: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _88: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _89: &[i32; 4];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _91: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _92: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _93: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _94: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _95: &[i32; 4];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _96: &[i32; 4];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _97: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _98: (&std::vec::Vec<i32>, &[i32; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _99: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _100: &[i32; 4];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _103: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _104: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _105: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _106: &[i32; 4];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _108: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _109: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _110: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _111: &std::vec::Vec<i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _112: &[i32; 4];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _113: &[i32; 4];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _114: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _115: (&std::vec::Vec<i32>, &[i32; 5]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _116: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _117: &[i32; 5];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _120: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _121: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _122: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _123: &[i32; 5];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _125: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _126: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _127: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _128: &std::vec::Vec<i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _129: &[i32; 5];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _130: &[i32; 5];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _131: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _132: (&std::vec::Vec<i32>, &[i32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _133: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _134: &[i32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _137: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _138: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _139: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _140: &[i32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _142: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _143: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _144: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _145: &std::vec::Vec<i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _146: &[i32; 3];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _147: &[i32; 3];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _148: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _149: (&std::vec::Vec<i32>, &[i32; 2]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _150: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _151: &[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _154: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _155: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _156: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _157: &[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _159: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _160: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _161: &std::vec::Vec<i32>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _162: &std::vec::Vec<i32>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _163: &[i32; 2];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _164: &[i32; 2];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _165: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug if_lettable => _1;         // in scope 1 at ui/half-open-range-patterns/range_pat_interactions0.rs:7:9: 7:24
        let mut _2: std::vec::Vec<i32>;  // in scope 1 at ui/half-open-range-patterns/range_pat_interactions0.rs:8:9: 8:21
        scope 2 {
            debug first_or => _2;        // in scope 2 at ui/half-open-range-patterns/range_pat_interactions0.rs:8:9: 8:21
            let mut _3: std::vec::Vec<i32>; // in scope 2 at ui/half-open-range-patterns/range_pat_interactions0.rs:9:9: 9:19
            scope 3 {
                debug or_two => _3;      // in scope 3 at ui/half-open-range-patterns/range_pat_interactions0.rs:9:9: 9:19
                let mut _4: std::vec::Vec<i32>; // in scope 3 at ui/half-open-range-patterns/range_pat_interactions0.rs:10:9: 10:23
                scope 4 {
                    debug range_from => _4; // in scope 4 at ui/half-open-range-patterns/range_pat_interactions0.rs:10:9: 10:23
                    let mut _5: std::vec::Vec<i32>; // in scope 4 at ui/half-open-range-patterns/range_pat_interactions0.rs:11:9: 11:19
                    scope 5 {
                        debug bottom => _5; // in scope 5 at ui/half-open-range-patterns/range_pat_interactions0.rs:11:9: 11:19
                        let mut _10: std::ops::RangeInclusive<i32>; // in scope 5 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
                        let _84: &std::vec::Vec<i32>; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _85: &[i32; 4]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _101: &std::vec::Vec<i32>; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _102: &[i32; 4]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _118: &std::vec::Vec<i32>; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _119: &[i32; 5]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _135: &std::vec::Vec<i32>; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _136: &[i32; 3]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _152: &std::vec::Vec<i32>; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _153: &[i32; 2]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let mut _166: &[i32; 2]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        let mut _167: &[i32; 3]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        let mut _168: &[i32; 5]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        let mut _169: &[i32; 4]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        let mut _170: &[i32; 4]; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 6 {
                            debug iter => _10; // in scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
                            let _16: i32; // in scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:9: 13:10
                            scope 7 {
                                debug x => _16; // in scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:9: 13:10
                                let _36: i32; // in scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:13: 19:14
                                let _39: i32; // in scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:13: 20:14
                                let _57: i32; // in scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:13: 21:14
                                let _60: i32; // in scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:13: 22:14
                                let _78: i32; // in scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:23:13: 23:14
                                scope 8 {
                                }
                                scope 9 {
                                    debug y => _36; // in scope 9 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:13: 19:14
                                }
                                scope 10 {
                                    debug y => _39; // in scope 10 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:13: 20:14
                                    let _43: &i32; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    let _44: &i32; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let mut _171: &i32; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                    scope 11 {
                                        debug left_val => _43; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        debug right_val => _44; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _49: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        scope 12 {
                                            debug kind => _49; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        }
                                    }
                                }
                                scope 13 {
                                    debug y => _57; // in scope 13 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:13: 21:14
                                }
                                scope 14 {
                                    debug y => _60; // in scope 14 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:13: 22:14
                                    let _64: &i32; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    let _65: &i32; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let mut _172: &i32; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                    scope 15 {
                                        debug left_val => _64; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        debug right_val => _65; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _70: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        scope 16 {
                                            debug kind => _70; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        }
                                    }
                                }
                                scope 17 {
                                    debug y => _78; // in scope 17 at ui/half-open-range-patterns/range_pat_interactions0.rs:23:13: 23:14
                                }
                            }
                        }
                        scope 18 {
                            debug left_val => _84; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _85; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _90: core::panicking::AssertKind; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 19 {
                                debug kind => _90; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 20 {
                            debug left_val => _101; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _102; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _107: core::panicking::AssertKind; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 21 {
                                debug kind => _107; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 22 {
                            debug left_val => _118; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _119; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _124: core::panicking::AssertKind; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 23 {
                                debug kind => _124; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 24 {
                            debug left_val => _135; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _136; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _141: core::panicking::AssertKind; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 25 {
                                debug kind => _141; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 26 {
                            debug left_val => _152; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _153; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _158: core::panicking::AssertKind; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 27 {
                                debug kind => _158; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Vec::<i32>::new() -> bb1;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Vec::<i32>::new() -> [return: bb2, unwind: bb64]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Vec::<i32>::new() -> [return: bb3, unwind: bb63]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = Vec::<i32>::new() -> [return: bb4, unwind: bb62]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = Vec::<i32>::new() -> [return: bb5, unwind: bb61]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = const -8_i32;               // scope 5 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:20
        _9 = const 7_i32;                // scope 5 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:23: 13:30
        _7 = RangeInclusive::<i32>::new(move _8, move _9) -> [return: bb6, unwind: bb60]; // scope 5 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _6 = <RangeInclusive<i32> as IntoIterator>::into_iter(move _7) -> [return: bb7, unwind: bb60]; // scope 5 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
                                         // + literal: Const { ty: fn(RangeInclusive<i32>) -> <RangeInclusive<i32> as IntoIterator>::IntoIter {<RangeInclusive<i32> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = move _6;                   // scope 5 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
        goto -> bb8;                     // scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:5: 25:6
    }

    bb8: {
        _14 = &mut _10;                  // scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
        _13 = &mut (*_14);               // scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
        _12 = <RangeInclusive<i32> as Iterator>::next(move _13) -> [return: bb9, unwind: bb60]; // scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<i32>) -> Option<<RangeInclusive<i32> as Iterator>::Item> {<RangeInclusive<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _15 = discriminant(_12);         // scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
        switchInt(move _15) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
    }

    bb10: {
        _16 = ((_12 as Some).0: i32);    // scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:9: 13:10
        _20 = Le(const -1_i32, _16);     // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:16: 14:22
        switchInt(move _20) -> [0: bb14, otherwise: bb13]; // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:16: 14:22
    }

    bb11: {
        unreachable;                     // scope 6 at ui/half-open-range-patterns/range_pat_interactions0.rs:13:14: 13:30
    }

    bb12: {
        _82 = &_1;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _170 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 4], val: Unevaluated(main, [], Some(promoted[4])) }
        _83 = _170;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _81 = (move _82, move _83);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _84 = (_81.0: &std::vec::Vec<i32>); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _85 = (_81.1: &[i32; 4]);        // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _88 = _84;                       // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _89 = _85;                       // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _87 = <Vec<i32> as PartialEq<[i32; 4]>>::eq(move _88, move _89) -> [return: bb40, unwind: bb60]; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 4]) -> bool {<Vec<i32> as PartialEq<[i32; 4]>>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _21 = Le(_16, const 0_i32);      // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:16: 14:22
        switchInt(move _21) -> [0: bb14, otherwise: bb17]; // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:16: 14:22
    }

    bb14: {
        _18 = Le(const 2_i32, _16);      // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:25: 14:29
        switchInt(move _18) -> [0: bb16, otherwise: bb15]; // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:25: 14:29
    }

    bb15: {
        _19 = Lt(_16, const 3_i32);      // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:25: 14:29
        switchInt(move _19) -> [0: bb16, otherwise: bb17]; // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:25: 14:29
    }

    bb16: {
        switchInt(_16) -> [4: bb17, otherwise: bb18]; // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:14:16: 14:33
    }

    bb17: {
        _22 = &mut _1;                   // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:15:13: 15:32
        _23 = _16;                       // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:15:30: 15:31
        _17 = Vec::<i32>::push(move _22, move _23) -> [return: bb66, unwind: bb60]; // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:15:13: 15:32
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/range_pat_interactions0.rs:15:25: 15:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb18: {
        switchInt(_16) -> [1: bb31, otherwise: bb19]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:17:9: 17:16
    }

    bb19: {
        _24 = Le(const -3_i32, _16);     // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:17: 18:22
        switchInt(move _24) -> [0: bb21, otherwise: bb20]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:17: 18:22
    }

    bb20: {
        _25 = Lt(_16, const 0_i32);      // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:17: 18:22
        switchInt(move _25) -> [0: bb21, otherwise: bb31]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:17: 18:22
    }

    bb21: {
        _32 = Le(const 0_i32, _16);      // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:18: 19:22
        switchInt(move _32) -> [0: bb23, otherwise: bb22]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:18: 19:22
    }

    bb22: {
        _33 = Lt(_16, const 5_i32);      // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:18: 19:22
        switchInt(move _33) -> [0: bb23, otherwise: bb33]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:18: 19:22
    }

    bb23: {
        switchInt(_16) -> [6: bb34, otherwise: bb24]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:17:9: 17:16
    }

    bb24: {
        _30 = Le(const 0_i32, _16);      // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:17: 20:35
        switchInt(move _30) -> [0: bb26, otherwise: bb25]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:17: 20:35
    }

    bb25: {
        _31 = Lt(_16, const 6_i32);      // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:17: 20:35
        switchInt(move _31) -> [0: bb26, otherwise: bb35]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:17: 20:35
    }

    bb26: {
        _28 = Le(const -5_i32, _16);     // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:17: 21:21
        switchInt(move _28) -> [0: bb28, otherwise: bb27]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:17: 21:21
    }

    bb27: {
        _29 = Le(_16, const i32::MAX);   // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:17: 21:21
        switchInt(move _29) -> [0: bb28, otherwise: bb37]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:17: 21:21
    }

    bb28: {
        _26 = Le(const i32::MIN, _16);   // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:17: 22:21
        switchInt(move _26) -> [0: bb30, otherwise: bb29]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:17: 22:21
    }

    bb29: {
        _27 = Lt(_16, const -7_i32);     // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:17: 22:21
        switchInt(move _27) -> [0: bb30, otherwise: bb38]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:17: 22:21
    }

    bb30: {
        _78 = _16;                       // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:23:13: 23:14
        _79 = &mut _5;                   // scope 17 at ui/half-open-range-patterns/range_pat_interactions0.rs:23:18: 23:32
        _80 = _78;                       // scope 17 at ui/half-open-range-patterns/range_pat_interactions0.rs:23:30: 23:31
        _11 = Vec::<i32>::push(move _79, move _80) -> [return: bb67, unwind: bb60]; // scope 17 at ui/half-open-range-patterns/range_pat_interactions0.rs:23:18: 23:32
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/range_pat_interactions0.rs:23:25: 23:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb31: {
        _34 = &mut _2;                   // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:26: 18:42
        _35 = _16;                       // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:40: 18:41
        _11 = Vec::<i32>::push(move _34, move _35) -> [return: bb68, unwind: bb60]; // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:26: 18:42
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/range_pat_interactions0.rs:18:35: 18:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb32: {
        _37 = &mut _3;                   // scope 9 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:31: 19:45
        _38 = _36;                       // scope 9 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:43: 19:44
        _11 = Vec::<i32>::push(move _37, move _38) -> [return: bb69, unwind: bb60]; // scope 9 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:31: 19:45
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/range_pat_interactions0.rs:19:38: 19:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb33: {
        _36 = _16;                       // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:13: 19:14
        goto -> bb32;                    // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:17:9: 24:10
    }

    bb34: {
        _36 = _16;                       // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:13: 19:14
        goto -> bb32;                    // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:17:9: 24:10
    }

    bb35: {
        _39 = _16;                       // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:13: 20:14
        _41 = &_39;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _171 = const _;                  // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[5])) }
        _42 = _171;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _40 = (move _41, move _42);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _43 = (_40.0: &i32);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _44 = (_40.1: &i32);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _47 = (*_43);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _48 = const 5_i32;               // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _46 = Eq(move _47, move _48);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _45 = Not(move _46);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _45) -> [0: bb8, otherwise: bb36]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb36: {
        _49 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _53 = _43;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _53;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _55 = _44;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = _55;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _56 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _50 = core::panicking::assert_failed::<i32, i32>(move _51, move _52, move _54, move _56) -> bb60; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb37: {
        _57 = _16;                       // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:13: 21:14
        _58 = &mut _4;                   // scope 13 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:25: 21:43
        _59 = _57;                       // scope 13 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:41: 21:42
        _11 = Vec::<i32>::push(move _58, move _59) -> [return: bb70, unwind: bb60]; // scope 13 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:25: 21:43
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/range_pat_interactions0.rs:21:36: 21:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb38: {
        _60 = _16;                       // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:13: 22:14
        _62 = &_60;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _172 = const _;                  // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[6])) }
        _63 = _172;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _61 = (move _62, move _63);      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _64 = (_61.0: &i32);             // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _65 = (_61.1: &i32);             // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _68 = (*_64);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _69 = const -8_i32;              // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _67 = Eq(move _68, move _69);    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _66 = Not(move _67);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _66) -> [0: bb8, otherwise: bb39]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb39: {
        _70 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _72 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _74 = _64;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _73 = _74;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _76 = _65;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = _76;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _77 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _71 = core::panicking::assert_failed::<i32, i32>(move _72, move _73, move _75, move _77) -> bb60; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb40: {
        _86 = Not(move _87);             // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _86) -> [0: bb42, otherwise: bb41]; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb41: {
        _90 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _92 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _94 = _84;                       // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _93 = _94;                       // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _85;                       // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _95 = _96;                       // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _97 = Option::<Arguments<'_>>::None; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _91 = core::panicking::assert_failed::<Vec<i32>, [i32; 4]>(move _92, move _93, move _95, move _97) -> bb60; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 4]>}, val: Value(<ZST>) }
    }

    bb42: {
        _99 = &_2;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _169 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 4], val: Unevaluated(main, [], Some(promoted[3])) }
        _100 = _169;                     // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _98 = (move _99, move _100);     // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _101 = (_98.0: &std::vec::Vec<i32>); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _102 = (_98.1: &[i32; 4]);       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _105 = _101;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _106 = _102;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _104 = <Vec<i32> as PartialEq<[i32; 4]>>::eq(move _105, move _106) -> [return: bb43, unwind: bb60]; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 4]) -> bool {<Vec<i32> as PartialEq<[i32; 4]>>::eq}, val: Value(<ZST>) }
    }

    bb43: {
        _103 = Not(move _104);           // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _103) -> [0: bb45, otherwise: bb44]; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb44: {
        _107 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _109 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _111 = _101;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _110 = _111;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _113 = _102;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _112 = _113;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _114 = Option::<Arguments<'_>>::None; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _108 = core::panicking::assert_failed::<Vec<i32>, [i32; 4]>(move _109, move _110, move _112, move _114) -> bb60; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 4]>}, val: Value(<ZST>) }
    }

    bb45: {
        _116 = &_3;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _168 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 5], val: Unevaluated(main, [], Some(promoted[2])) }
        _117 = _168;                     // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _115 = (move _116, move _117);   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _118 = (_115.0: &std::vec::Vec<i32>); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _119 = (_115.1: &[i32; 5]);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _122 = _118;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _123 = _119;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _121 = <Vec<i32> as PartialEq<[i32; 5]>>::eq(move _122, move _123) -> [return: bb46, unwind: bb60]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 5]) -> bool {<Vec<i32> as PartialEq<[i32; 5]>>::eq}, val: Value(<ZST>) }
    }

    bb46: {
        _120 = Not(move _121);           // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _120) -> [0: bb48, otherwise: bb47]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _124 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _126 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _128 = _118;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _127 = _128;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _130 = _119;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _129 = _130;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _131 = Option::<Arguments<'_>>::None; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _125 = core::panicking::assert_failed::<Vec<i32>, [i32; 5]>(move _126, move _127, move _129, move _131) -> bb60; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 5], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 5]>}, val: Value(<ZST>) }
    }

    bb48: {
        _133 = &_4;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _167 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _134 = _167;                     // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _132 = (move _133, move _134);   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _135 = (_132.0: &std::vec::Vec<i32>); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _136 = (_132.1: &[i32; 3]);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _139 = _135;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _140 = _136;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _138 = <Vec<i32> as PartialEq<[i32; 3]>>::eq(move _139, move _140) -> [return: bb49, unwind: bb60]; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 3]) -> bool {<Vec<i32> as PartialEq<[i32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb49: {
        _137 = Not(move _138);           // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _137) -> [0: bb51, otherwise: bb50]; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb50: {
        _141 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _143 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _145 = _135;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _144 = _145;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _147 = _136;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _146 = _147;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _148 = Option::<Arguments<'_>>::None; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _142 = core::panicking::assert_failed::<Vec<i32>, [i32; 3]>(move _143, move _144, move _146, move _148) -> bb60; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 3]>}, val: Value(<ZST>) }
    }

    bb51: {
        _150 = &_5;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _166 = const _;                  // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _151 = _166;                     // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _149 = (move _150, move _151);   // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _152 = (_149.0: &std::vec::Vec<i32>); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _153 = (_149.1: &[i32; 2]);      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _156 = _152;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _157 = _153;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _155 = <Vec<i32> as PartialEq<[i32; 2]>>::eq(move _156, move _157) -> [return: bb52, unwind: bb60]; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 2]) -> bool {<Vec<i32> as PartialEq<[i32; 2]>>::eq}, val: Value(<ZST>) }
    }

    bb52: {
        _154 = Not(move _155);           // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _154) -> [0: bb54, otherwise: bb53]; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb53: {
        _158 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _160 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _162 = _152;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _161 = _162;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _164 = _153;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _163 = _164;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _165 = Option::<Arguments<'_>>::None; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _159 = core::panicking::assert_failed::<Vec<i32>, [i32; 2]>(move _160, move _161, move _163, move _165) -> bb60; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 2], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 2]>}, val: Value(<ZST>) }
    }

    bb54: {
        drop(_5) -> [return: bb55, unwind: bb61]; // scope 4 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb55: {
        drop(_4) -> [return: bb56, unwind: bb62]; // scope 3 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb56: {
        drop(_3) -> [return: bb57, unwind: bb63]; // scope 2 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb57: {
        drop(_2) -> [return: bb58, unwind: bb64]; // scope 1 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb58: {
        drop(_1) -> bb59;                // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb59: {
        return;                          // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:2: 31:2
    }

    bb60 (cleanup): {
        drop(_5) -> bb61;                // scope 4 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb61 (cleanup): {
        drop(_4) -> bb62;                // scope 3 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb62 (cleanup): {
        drop(_3) -> bb63;                // scope 2 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb63 (cleanup): {
        drop(_2) -> bb64;                // scope 1 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb64 (cleanup): {
        drop(_1) -> bb65;                // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:31:1: 31:2
    }

    bb65 (cleanup): {
        resume;                          // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:6:1: 31:2
    }

    bb66: {
        goto -> bb18;                    // scope 8 at ui/half-open-range-patterns/range_pat_interactions0.rs:15:13: 15:32
    }

    bb67: {
        goto -> bb8;                     // scope 17 at ui/half-open-range-patterns/range_pat_interactions0.rs:23:18: 23:32
    }

    bb68: {
        goto -> bb8;                     // scope 7 at ui/half-open-range-patterns/range_pat_interactions0.rs:18:26: 18:42
    }

    bb69: {
        goto -> bb8;                     // scope 9 at ui/half-open-range-patterns/range_pat_interactions0.rs:19:31: 19:45
    }

    bb70: {
        goto -> bb8;                     // scope 13 at ui/half-open-range-patterns/range_pat_interactions0.rs:21:25: 21:43
    }
}

promoted[0] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 2];                // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:30:24: 30:32

    bb0: {
        _1 = [const -7_i32, const -6_i32]; // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:30:24: 30:32
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 3];                // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:29:28: 29:39

    bb0: {
        _1 = [const -5_i32, const -4_i32, const 7_i32]; // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:29:28: 29:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &[i32; 5] = {
    let mut _0: &[i32; 5];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 5];                // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:28:24: 28:39

    bb0: {
        _1 = [const 0_i32, const 2_i32, const 3_i32, const 4_i32, const 6_i32]; // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:28:24: 28:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 4];                // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:27:26: 27:41

    bb0: {
        _1 = [const -3_i32, const -2_i32, const -1_i32, const 1_i32]; // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:27:26: 27:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 4];                // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:26:29: 26:42

    bb0: {
        _1 = [const -1_i32, const 0_i32, const 2_i32, const 4_i32]; // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:26:29: 26:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:53: 20:54

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:53: 20:54
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:39: 22:41

    bb0: {
        _1 = const -8_i32;               // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:22:39: 22:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

main::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:26: 20:35
    let mut _1: (i32, bool);             // in scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:28: 20:33

    bb0: {
        _1 = CheckedAdd(const 5_i32, const 1_i32); // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:28: 20:33
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const 5_i32, const 1_i32) -> bb1; // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:28: 20:33
    }

    bb1: {
        _0 = move (_1.0: i32);           // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:28: 20:33
        return;                          // scope 0 at ui/half-open-range-patterns/range_pat_interactions0.rs:20:26: 20:35
    }
}
