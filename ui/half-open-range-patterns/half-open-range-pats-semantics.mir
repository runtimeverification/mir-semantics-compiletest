// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn range_to_inclusive() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let _3: bool;
    let mut _4: u8;
    let mut _6: (&bool, &bool);
    let mut _7: &bool;
    let mut _8: &bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: !;
    let mut _19: bool;
    let mut _20: bool;
    let _21: bool;
    let mut _22: u8;
    let mut _23: bool;
    let mut _24: bool;
    let mut _26: (&bool, &bool);
    let mut _27: &bool;
    let mut _28: &bool;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: bool;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: !;
    let mut _39: bool;
    let mut _40: bool;
    let _41: bool;
    let mut _42: u8;
    let mut _43: bool;
    let mut _44: bool;
    let mut _46: (&bool, &bool);
    let mut _47: &bool;
    let mut _48: &bool;
    let mut _51: bool;
    let mut _52: bool;
    let mut _53: bool;
    let mut _54: bool;
    let _56: !;
    let mut _57: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _58: !;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let _62: bool;
    let mut _63: u8;
    let mut _64: bool;
    let mut _65: bool;
    let mut _67: (&bool, &bool);
    let mut _68: &bool;
    let mut _69: &bool;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: !;
    let mut _80: bool;
    let mut _81: bool;
    let _82: bool;
    let mut _83: i16;
    let mut _85: (&bool, &bool);
    let mut _86: &bool;
    let mut _87: &bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let mut _93: bool;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: !;
    let mut _98: bool;
    let mut _99: bool;
    let _100: bool;
    let mut _101: i16;
    let mut _102: bool;
    let mut _103: bool;
    let mut _105: (&bool, &bool);
    let mut _106: &bool;
    let mut _107: &bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let mut _113: bool;
    let _115: !;
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _117: !;
    let mut _118: bool;
    let mut _119: bool;
    let _120: bool;
    let mut _121: i16;
    let mut _122: bool;
    let mut _123: bool;
    let mut _125: (&bool, &bool);
    let mut _126: &bool;
    let mut _127: &bool;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: bool;
    let mut _133: bool;
    let _135: !;
    let mut _136: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _137: !;
    let mut _138: bool;
    let mut _139: bool;
    let _140: bool;
    let mut _141: i32;
    let mut _142: bool;
    let mut _143: bool;
    let mut _145: (&bool, &bool);
    let mut _146: &bool;
    let mut _147: &bool;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: bool;
    let mut _153: bool;
    let _155: !;
    let mut _156: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _157: !;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: bool;
    let _161: bool;
    let mut _162: i32;
    let mut _163: bool;
    let mut _164: bool;
    let mut _166: (&bool, &bool);
    let mut _167: &bool;
    let mut _168: &bool;
    let mut _171: bool;
    let mut _172: bool;
    let mut _173: bool;
    let mut _174: bool;
    let _176: !;
    let mut _177: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _178: !;
    let mut _179: bool;
    let mut _180: bool;
    let _181: bool;
    let mut _182: char;
    let mut _184: (&bool, &bool);
    let mut _185: &bool;
    let mut _186: &bool;
    let mut _189: bool;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: bool;
    let _194: !;
    let mut _195: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: !;
    let mut _197: bool;
    let mut _198: bool;
    let _199: bool;
    let mut _200: char;
    let mut _201: bool;
    let mut _202: bool;
    let mut _204: (&bool, &bool);
    let mut _205: &bool;
    let mut _206: &bool;
    let mut _209: bool;
    let mut _210: bool;
    let mut _211: bool;
    let mut _212: bool;
    let _214: !;
    let mut _215: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _216: !;
    let mut _217: bool;
    let mut _218: bool;
    let _219: bool;
    let mut _220: char;
    let mut _221: bool;
    let mut _222: bool;
    let mut _224: (&bool, &bool);
    let mut _225: &bool;
    let mut _226: &bool;
    let mut _229: bool;
    let mut _230: bool;
    let mut _231: bool;
    let mut _232: bool;
    let _234: !;
    let mut _235: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _236: !;
    let mut _237: bool;
    let mut _238: bool;
    let mut _239: bool;
    let _240: bool;
    let mut _241: char;
    let mut _242: bool;
    let mut _243: bool;
    let mut _245: (&bool, &bool);
    let mut _246: &bool;
    let mut _247: &bool;
    let mut _250: bool;
    let mut _251: bool;
    let mut _252: bool;
    let mut _253: bool;
    let _255: !;
    let mut _256: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _257: !;
    let mut _258: bool;
    let mut _259: bool;
    let _260: bool;
    let mut _261: f32;
    let mut _262: bool;
    let mut _264: (&bool, &bool);
    let mut _265: &bool;
    let mut _266: &bool;
    let mut _269: bool;
    let mut _270: bool;
    let mut _271: bool;
    let mut _272: bool;
    let _274: !;
    let mut _275: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _276: !;
    let mut _277: bool;
    let mut _278: bool;
    let _279: bool;
    let mut _280: f32;
    let mut _281: bool;
    let mut _282: bool;
    let mut _284: (&bool, &bool);
    let mut _285: &bool;
    let mut _286: &bool;
    let mut _289: bool;
    let mut _290: bool;
    let mut _291: bool;
    let mut _292: bool;
    let _294: !;
    let mut _295: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _296: !;
    let mut _297: bool;
    let mut _298: bool;
    let _299: bool;
    let mut _300: f32;
    let mut _301: bool;
    let mut _302: bool;
    let mut _304: (&bool, &bool);
    let mut _305: &bool;
    let mut _306: &bool;
    let mut _309: bool;
    let mut _310: bool;
    let mut _311: bool;
    let mut _312: bool;
    let _314: !;
    let mut _315: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _316: !;
    let mut _317: bool;
    let mut _318: bool;
    let mut _319: bool;
    let _320: bool;
    let mut _321: f32;
    let mut _322: bool;
    let mut _323: bool;
    let mut _325: (&bool, &bool);
    let mut _326: &bool;
    let mut _327: &bool;
    let mut _330: bool;
    let mut _331: bool;
    let mut _332: bool;
    let mut _333: bool;
    let _335: !;
    let mut _336: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _337: !;
    let mut _338: bool;
    let mut _339: bool;
    let _340: bool;
    let mut _341: f64;
    let mut _342: bool;
    let mut _344: (&bool, &bool);
    let mut _345: &bool;
    let mut _346: &bool;
    let mut _349: bool;
    let mut _350: bool;
    let mut _351: bool;
    let mut _352: bool;
    let _354: !;
    let mut _355: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _356: !;
    let mut _357: bool;
    let mut _358: bool;
    let _359: bool;
    let mut _360: f64;
    let mut _361: bool;
    let mut _362: bool;
    let mut _364: (&bool, &bool);
    let mut _365: &bool;
    let mut _366: &bool;
    let mut _369: bool;
    let mut _370: bool;
    let mut _371: bool;
    let mut _372: bool;
    let _374: !;
    let mut _375: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _376: !;
    let mut _377: bool;
    let mut _378: bool;
    let _379: bool;
    let mut _380: f64;
    let mut _381: bool;
    let mut _382: bool;
    let mut _384: (&bool, &bool);
    let mut _385: &bool;
    let mut _386: &bool;
    let mut _389: bool;
    let mut _390: bool;
    let mut _391: bool;
    let mut _392: bool;
    let _394: !;
    let mut _395: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _396: !;
    let mut _397: bool;
    let mut _398: bool;
    let mut _399: bool;
    let _400: bool;
    let mut _401: f64;
    let mut _402: bool;
    let mut _403: bool;
    let mut _405: (&bool, &bool);
    let mut _406: &bool;
    let mut _407: &bool;
    let mut _410: bool;
    let mut _411: bool;
    let mut _412: bool;
    let mut _413: bool;
    let _415: !;
    let mut _416: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _417: !;
    scope 1 {
        debug m => _3;
        let _5: bool;
        let mut _458: &u8;
        let mut _459: &std::ops::RangeToInclusive<u8>;
        scope 2 {
            debug c => _5;
            let _9: &bool;
            let _10: &bool;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
    }
    scope 5 {
        debug m => _21;
        let _25: bool;
        let mut _456: &u8;
        let mut _457: &std::ops::RangeToInclusive<u8>;
        scope 6 {
            debug c => _25;
            let _29: &bool;
            let _30: &bool;
            scope 7 {
                debug left_val => _29;
                debug right_val => _30;
                let _35: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _35;
                }
            }
        }
    }
    scope 9 {
        debug m => _41;
        let _45: bool;
        let mut _454: &u8;
        let mut _455: &std::ops::RangeToInclusive<u8>;
        scope 10 {
            debug c => _45;
            let _49: &bool;
            let _50: &bool;
            scope 11 {
                debug left_val => _49;
                debug right_val => _50;
                let _55: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _55;
                }
            }
        }
    }
    scope 13 {
        debug m => _62;
        let _66: bool;
        let mut _452: &u8;
        let mut _453: &std::ops::RangeToInclusive<u8>;
        scope 14 {
            debug c => _66;
            let _70: &bool;
            let _71: &bool;
            scope 15 {
                debug left_val => _70;
                debug right_val => _71;
                let _76: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _76;
                }
            }
        }
    }
    scope 17 {
        debug m => _82;
        let _84: bool;
        let mut _450: &i16;
        let mut _451: &std::ops::RangeToInclusive<i16>;
        scope 18 {
            debug c => _84;
            let _88: &bool;
            let _89: &bool;
            scope 19 {
                debug left_val => _88;
                debug right_val => _89;
                let _94: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _94;
                }
            }
        }
    }
    scope 21 {
        debug m => _100;
        let _104: bool;
        let mut _448: &i16;
        let mut _449: &std::ops::RangeToInclusive<i16>;
        scope 22 {
            debug c => _104;
            let _108: &bool;
            let _109: &bool;
            scope 23 {
                debug left_val => _108;
                debug right_val => _109;
                let _114: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _114;
                }
            }
        }
    }
    scope 25 {
        debug m => _120;
        let _124: bool;
        let mut _446: &i16;
        let mut _447: &std::ops::RangeToInclusive<i16>;
        scope 26 {
            debug c => _124;
            let _128: &bool;
            let _129: &bool;
            scope 27 {
                debug left_val => _128;
                debug right_val => _129;
                let _134: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _134;
                }
            }
        }
    }
    scope 29 {
        debug m => _140;
        let _144: bool;
        let mut _444: &i32;
        let mut _445: &std::ops::RangeToInclusive<i32>;
        scope 30 {
            debug c => _144;
            let _148: &bool;
            let _149: &bool;
            scope 31 {
                debug left_val => _148;
                debug right_val => _149;
                let _154: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _154;
                }
            }
        }
    }
    scope 33 {
        debug m => _161;
        let _165: bool;
        let mut _442: &i32;
        let mut _443: &std::ops::RangeToInclusive<i32>;
        scope 34 {
            debug c => _165;
            let _169: &bool;
            let _170: &bool;
            scope 35 {
                debug left_val => _169;
                debug right_val => _170;
                let _175: core::panicking::AssertKind;
                scope 36 {
                    debug kind => _175;
                }
            }
        }
    }
    scope 37 {
        debug m => _181;
        let _183: bool;
        let mut _440: &char;
        let mut _441: &std::ops::RangeToInclusive<char>;
        scope 38 {
            debug c => _183;
            let _187: &bool;
            let _188: &bool;
            scope 39 {
                debug left_val => _187;
                debug right_val => _188;
                let _193: core::panicking::AssertKind;
                scope 40 {
                    debug kind => _193;
                }
            }
        }
    }
    scope 41 {
        debug m => _199;
        let _203: bool;
        let mut _438: &char;
        let mut _439: &std::ops::RangeToInclusive<char>;
        scope 42 {
            debug c => _203;
            let _207: &bool;
            let _208: &bool;
            scope 43 {
                debug left_val => _207;
                debug right_val => _208;
                let _213: core::panicking::AssertKind;
                scope 44 {
                    debug kind => _213;
                }
            }
        }
    }
    scope 45 {
        debug m => _219;
        let _223: bool;
        let mut _436: &char;
        let mut _437: &std::ops::RangeToInclusive<char>;
        scope 46 {
            debug c => _223;
            let _227: &bool;
            let _228: &bool;
            scope 47 {
                debug left_val => _227;
                debug right_val => _228;
                let _233: core::panicking::AssertKind;
                scope 48 {
                    debug kind => _233;
                }
            }
        }
    }
    scope 49 {
        debug m => _240;
        let _244: bool;
        let mut _434: &char;
        let mut _435: &std::ops::RangeToInclusive<char>;
        scope 50 {
            debug c => _244;
            let _248: &bool;
            let _249: &bool;
            scope 51 {
                debug left_val => _248;
                debug right_val => _249;
                let _254: core::panicking::AssertKind;
                scope 52 {
                    debug kind => _254;
                }
            }
        }
    }
    scope 53 {
        debug m => _260;
        let _263: bool;
        let mut _432: &f32;
        let mut _433: &std::ops::RangeToInclusive<f32>;
        scope 54 {
            debug c => _263;
            let _267: &bool;
            let _268: &bool;
            scope 55 {
                debug left_val => _267;
                debug right_val => _268;
                let _273: core::panicking::AssertKind;
                scope 56 {
                    debug kind => _273;
                }
            }
        }
    }
    scope 57 {
        debug m => _279;
        let _283: bool;
        let mut _430: &f32;
        let mut _431: &std::ops::RangeToInclusive<f32>;
        scope 58 {
            debug c => _283;
            let _287: &bool;
            let _288: &bool;
            scope 59 {
                debug left_val => _287;
                debug right_val => _288;
                let _293: core::panicking::AssertKind;
                scope 60 {
                    debug kind => _293;
                }
            }
        }
    }
    scope 61 {
        debug m => _299;
        let _303: bool;
        let mut _428: &f32;
        let mut _429: &std::ops::RangeToInclusive<f32>;
        scope 62 {
            debug c => _303;
            let _307: &bool;
            let _308: &bool;
            scope 63 {
                debug left_val => _307;
                debug right_val => _308;
                let _313: core::panicking::AssertKind;
                scope 64 {
                    debug kind => _313;
                }
            }
        }
    }
    scope 65 {
        debug m => _320;
        let _324: bool;
        let mut _426: &f32;
        let mut _427: &std::ops::RangeToInclusive<f32>;
        scope 66 {
            debug c => _324;
            let _328: &bool;
            let _329: &bool;
            scope 67 {
                debug left_val => _328;
                debug right_val => _329;
                let _334: core::panicking::AssertKind;
                scope 68 {
                    debug kind => _334;
                }
            }
        }
    }
    scope 69 {
        debug m => _340;
        let _343: bool;
        let mut _424: &f64;
        let mut _425: &std::ops::RangeToInclusive<f64>;
        scope 70 {
            debug c => _343;
            let _347: &bool;
            let _348: &bool;
            scope 71 {
                debug left_val => _347;
                debug right_val => _348;
                let _353: core::panicking::AssertKind;
                scope 72 {
                    debug kind => _353;
                }
            }
        }
    }
    scope 73 {
        debug m => _359;
        let _363: bool;
        let mut _422: &f64;
        let mut _423: &std::ops::RangeToInclusive<f64>;
        scope 74 {
            debug c => _363;
            let _367: &bool;
            let _368: &bool;
            scope 75 {
                debug left_val => _367;
                debug right_val => _368;
                let _373: core::panicking::AssertKind;
                scope 76 {
                    debug kind => _373;
                }
            }
        }
    }
    scope 77 {
        debug m => _379;
        let _383: bool;
        let mut _420: &f64;
        let mut _421: &std::ops::RangeToInclusive<f64>;
        scope 78 {
            debug c => _383;
            let _387: &bool;
            let _388: &bool;
            scope 79 {
                debug left_val => _387;
                debug right_val => _388;
                let _393: core::panicking::AssertKind;
                scope 80 {
                    debug kind => _393;
                }
            }
        }
    }
    scope 81 {
        debug m => _400;
        let _404: bool;
        let mut _418: &f64;
        let mut _419: &std::ops::RangeToInclusive<f64>;
        scope 82 {
            debug c => _404;
            let _408: &bool;
            let _409: &bool;
            scope 83 {
                debug left_val => _408;
                debug right_val => _409;
                let _414: core::panicking::AssertKind;
                scope 84 {
                    debug kind => _414;
                }
            }
        }
    }

    bb0: {
        _4 = const _;
        _3 = Eq(_4, const 0_u8);
        _459 = const _;
        _458 = const _;
        _5 = RangeToInclusive::<u8>::contains::<u8>(_459, _458) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_3;
        _8 = &_5;
        _6 = (move _7, move _8);
        _9 = (_6.0: &bool);
        _10 = (_6.1: &bool);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = assert_failed::<bool, bool>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb3: {
        _2 = _3;
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _18 = panic(const "assertion failed: yes!(u8 :: MIN, ..= u8 :: MIN)") -> unwind continue;
    }

    bb5: {
        _22 = const _;
        _23 = Le(const 0_u8, _22);
        switchInt(move _23) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _24 = Le(_22, const 5_u8);
        _21 = _24;
        goto -> bb8;
    }

    bb7: {
        _21 = const false;
        goto -> bb8;
    }

    bb8: {
        _457 = const _;
        _456 = const _;
        _25 = RangeToInclusive::<u8>::contains::<u8>(_457, _456) -> [return: bb9, unwind continue];
    }

    bb9: {
        _27 = &_21;
        _28 = &_25;
        _26 = (move _27, move _28);
        _29 = (_26.0: &bool);
        _30 = (_26.1: &bool);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = assert_failed::<bool, bool>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb11: {
        _20 = _21;
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _38 = panic(const "assertion failed: yes!(u8 :: MIN, ..= 5)") -> unwind continue;
    }

    bb13: {
        _42 = const 5_u8;
        _43 = Le(const 0_u8, _42);
        switchInt(move _43) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _44 = Le(_42, const 5_u8);
        _41 = _44;
        goto -> bb16;
    }

    bb15: {
        _41 = const false;
        goto -> bb16;
    }

    bb16: {
        _455 = const _;
        _454 = const _;
        _45 = RangeToInclusive::<u8>::contains::<u8>(_455, _454) -> [return: bb17, unwind continue];
    }

    bb17: {
        _47 = &_41;
        _48 = &_45;
        _46 = (move _47, move _48);
        _49 = (_46.0: &bool);
        _50 = (_46.1: &bool);
        _53 = (*_49);
        _54 = (*_50);
        _52 = Eq(move _53, move _54);
        _51 = Not(move _52);
        switchInt(move _51) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _55 = core::panicking::AssertKind::Eq;
        _57 = Option::<Arguments<'_>>::None;
        _56 = assert_failed::<bool, bool>(move _55, _49, _50, move _57) -> unwind continue;
    }

    bb19: {
        _40 = _41;
        _39 = Not(move _40);
        switchInt(move _39) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _58 = panic(const "assertion failed: yes!(5u8, ..= 5)") -> unwind continue;
    }

    bb21: {
        _63 = const 6_u8;
        _64 = Le(const 0_u8, _63);
        switchInt(move _64) -> [0: bb23, otherwise: bb22];
    }

    bb22: {
        _65 = Le(_63, const 5_u8);
        _62 = _65;
        goto -> bb24;
    }

    bb23: {
        _62 = const false;
        goto -> bb24;
    }

    bb24: {
        _453 = const _;
        _452 = const _;
        _66 = RangeToInclusive::<u8>::contains::<u8>(_453, _452) -> [return: bb25, unwind continue];
    }

    bb25: {
        _68 = &_62;
        _69 = &_66;
        _67 = (move _68, move _69);
        _70 = (_67.0: &bool);
        _71 = (_67.1: &bool);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = assert_failed::<bool, bool>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb27: {
        _61 = _62;
        _60 = Not(move _61);
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _79 = panic(const "assertion failed: !yes!(6u8, ..= 5)") -> unwind continue;
    }

    bb29: {
        _83 = const _;
        _82 = Eq(_83, const i16::MIN);
        _451 = const _;
        _450 = const _;
        _84 = RangeToInclusive::<i16>::contains::<i16>(_451, _450) -> [return: bb30, unwind continue];
    }

    bb30: {
        _86 = &_82;
        _87 = &_84;
        _85 = (move _86, move _87);
        _88 = (_85.0: &bool);
        _89 = (_85.1: &bool);
        _92 = (*_88);
        _93 = (*_89);
        _91 = Eq(move _92, move _93);
        _90 = Not(move _91);
        switchInt(move _90) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = assert_failed::<bool, bool>(move _94, _88, _89, move _96) -> unwind continue;
    }

    bb32: {
        _81 = _82;
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _97 = panic(const "assertion failed: yes!(i16 :: MIN, ..= i16 :: MIN)") -> unwind continue;
    }

    bb34: {
        _101 = const _;
        _102 = Le(const i16::MIN, _101);
        switchInt(move _102) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _103 = Le(_101, const 0_i16);
        _100 = _103;
        goto -> bb37;
    }

    bb36: {
        _100 = const false;
        goto -> bb37;
    }

    bb37: {
        _449 = const _;
        _448 = const _;
        _104 = RangeToInclusive::<i16>::contains::<i16>(_449, _448) -> [return: bb38, unwind continue];
    }

    bb38: {
        _106 = &_100;
        _107 = &_104;
        _105 = (move _106, move _107);
        _108 = (_105.0: &bool);
        _109 = (_105.1: &bool);
        _112 = (*_108);
        _113 = (*_109);
        _111 = Eq(move _112, move _113);
        _110 = Not(move _111);
        switchInt(move _110) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _114 = core::panicking::AssertKind::Eq;
        _116 = Option::<Arguments<'_>>::None;
        _115 = assert_failed::<bool, bool>(move _114, _108, _109, move _116) -> unwind continue;
    }

    bb40: {
        _99 = _100;
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _117 = panic(const "assertion failed: yes!(i16 :: MIN, ..= 0)") -> unwind continue;
    }

    bb42: {
        _121 = const _;
        _122 = Le(const i16::MIN, _121);
        switchInt(move _122) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _123 = Le(_121, const -5_i16);
        _120 = _123;
        goto -> bb45;
    }

    bb44: {
        _120 = const false;
        goto -> bb45;
    }

    bb45: {
        _447 = const _;
        _446 = const _;
        _124 = RangeToInclusive::<i16>::contains::<i16>(_447, _446) -> [return: bb46, unwind continue];
    }

    bb46: {
        _126 = &_120;
        _127 = &_124;
        _125 = (move _126, move _127);
        _128 = (_125.0: &bool);
        _129 = (_125.1: &bool);
        _132 = (*_128);
        _133 = (*_129);
        _131 = Eq(move _132, move _133);
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _134 = core::panicking::AssertKind::Eq;
        _136 = Option::<Arguments<'_>>::None;
        _135 = assert_failed::<bool, bool>(move _134, _128, _129, move _136) -> unwind continue;
    }

    bb48: {
        _119 = _120;
        _118 = Not(move _119);
        switchInt(move _118) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _137 = panic(const "assertion failed: yes!(i16 :: MIN, ..= - 5)") -> unwind continue;
    }

    bb50: {
        _141 = const -5_i32;
        _142 = Le(const i32::MIN, _141);
        switchInt(move _142) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _143 = Le(_141, const -5_i32);
        _140 = _143;
        goto -> bb53;
    }

    bb52: {
        _140 = const false;
        goto -> bb53;
    }

    bb53: {
        _445 = const _;
        _444 = const _;
        _144 = RangeToInclusive::<i32>::contains::<i32>(_445, _444) -> [return: bb54, unwind continue];
    }

    bb54: {
        _146 = &_140;
        _147 = &_144;
        _145 = (move _146, move _147);
        _148 = (_145.0: &bool);
        _149 = (_145.1: &bool);
        _152 = (*_148);
        _153 = (*_149);
        _151 = Eq(move _152, move _153);
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _154 = core::panicking::AssertKind::Eq;
        _156 = Option::<Arguments<'_>>::None;
        _155 = assert_failed::<bool, bool>(move _154, _148, _149, move _156) -> unwind continue;
    }

    bb56: {
        _139 = _140;
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _157 = panic(const "assertion failed: yes!(- 5, ..= - 5)") -> unwind continue;
    }

    bb58: {
        _162 = const -4_i32;
        _163 = Le(const i32::MIN, _162);
        switchInt(move _163) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _164 = Le(_162, const -5_i32);
        _161 = _164;
        goto -> bb61;
    }

    bb60: {
        _161 = const false;
        goto -> bb61;
    }

    bb61: {
        _443 = const _;
        _442 = const _;
        _165 = RangeToInclusive::<i32>::contains::<i32>(_443, _442) -> [return: bb62, unwind continue];
    }

    bb62: {
        _167 = &_161;
        _168 = &_165;
        _166 = (move _167, move _168);
        _169 = (_166.0: &bool);
        _170 = (_166.1: &bool);
        _173 = (*_169);
        _174 = (*_170);
        _172 = Eq(move _173, move _174);
        _171 = Not(move _172);
        switchInt(move _171) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _175 = core::panicking::AssertKind::Eq;
        _177 = Option::<Arguments<'_>>::None;
        _176 = assert_failed::<bool, bool>(move _175, _169, _170, move _177) -> unwind continue;
    }

    bb64: {
        _160 = _161;
        _159 = Not(move _160);
        _158 = Not(move _159);
        switchInt(move _158) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _178 = panic(const "assertion failed: !yes!(- 4, ..= - 5)") -> unwind continue;
    }

    bb66: {
        _182 = const '\0';
        _181 = Eq(_182, const '\0');
        _441 = const _;
        _440 = const _;
        _183 = RangeToInclusive::<char>::contains::<char>(_441, _440) -> [return: bb67, unwind continue];
    }

    bb67: {
        _185 = &_181;
        _186 = &_183;
        _184 = (move _185, move _186);
        _187 = (_184.0: &bool);
        _188 = (_184.1: &bool);
        _191 = (*_187);
        _192 = (*_188);
        _190 = Eq(move _191, move _192);
        _189 = Not(move _190);
        switchInt(move _189) -> [0: bb69, otherwise: bb68];
    }

    bb68: {
        _193 = core::panicking::AssertKind::Eq;
        _195 = Option::<Arguments<'_>>::None;
        _194 = assert_failed::<bool, bool>(move _193, _187, _188, move _195) -> unwind continue;
    }

    bb69: {
        _180 = _181;
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _196 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', ..= \\'\\\\u{0}\\')") -> unwind continue;
    }

    bb71: {
        _200 = const '\0';
        _201 = Le(const '\0', _200);
        switchInt(move _201) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _202 = Le(_200, const 'a');
        _199 = _202;
        goto -> bb74;
    }

    bb73: {
        _199 = const false;
        goto -> bb74;
    }

    bb74: {
        _439 = const _;
        _438 = const _;
        _203 = RangeToInclusive::<char>::contains::<char>(_439, _438) -> [return: bb75, unwind continue];
    }

    bb75: {
        _205 = &_199;
        _206 = &_203;
        _204 = (move _205, move _206);
        _207 = (_204.0: &bool);
        _208 = (_204.1: &bool);
        _211 = (*_207);
        _212 = (*_208);
        _210 = Eq(move _211, move _212);
        _209 = Not(move _210);
        switchInt(move _209) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _213 = core::panicking::AssertKind::Eq;
        _215 = Option::<Arguments<'_>>::None;
        _214 = assert_failed::<bool, bool>(move _213, _207, _208, move _215) -> unwind continue;
    }

    bb77: {
        _198 = _199;
        _197 = Not(move _198);
        switchInt(move _197) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        _216 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', ..= \\'a\\')") -> unwind continue;
    }

    bb79: {
        _220 = const 'a';
        _221 = Le(const '\0', _220);
        switchInt(move _221) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _222 = Le(_220, const 'a');
        _219 = _222;
        goto -> bb82;
    }

    bb81: {
        _219 = const false;
        goto -> bb82;
    }

    bb82: {
        _437 = const _;
        _436 = const _;
        _223 = RangeToInclusive::<char>::contains::<char>(_437, _436) -> [return: bb83, unwind continue];
    }

    bb83: {
        _225 = &_219;
        _226 = &_223;
        _224 = (move _225, move _226);
        _227 = (_224.0: &bool);
        _228 = (_224.1: &bool);
        _231 = (*_227);
        _232 = (*_228);
        _230 = Eq(move _231, move _232);
        _229 = Not(move _230);
        switchInt(move _229) -> [0: bb85, otherwise: bb84];
    }

    bb84: {
        _233 = core::panicking::AssertKind::Eq;
        _235 = Option::<Arguments<'_>>::None;
        _234 = assert_failed::<bool, bool>(move _233, _227, _228, move _235) -> unwind continue;
    }

    bb85: {
        _218 = _219;
        _217 = Not(move _218);
        switchInt(move _217) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _236 = panic(const "assertion failed: yes!(\\'a\\', ..= \\'a\\')") -> unwind continue;
    }

    bb87: {
        _241 = const 'b';
        _242 = Le(const '\0', _241);
        switchInt(move _242) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        _243 = Le(_241, const 'a');
        _240 = _243;
        goto -> bb90;
    }

    bb89: {
        _240 = const false;
        goto -> bb90;
    }

    bb90: {
        _435 = const _;
        _434 = const _;
        _244 = RangeToInclusive::<char>::contains::<char>(_435, _434) -> [return: bb91, unwind continue];
    }

    bb91: {
        _246 = &_240;
        _247 = &_244;
        _245 = (move _246, move _247);
        _248 = (_245.0: &bool);
        _249 = (_245.1: &bool);
        _252 = (*_248);
        _253 = (*_249);
        _251 = Eq(move _252, move _253);
        _250 = Not(move _251);
        switchInt(move _250) -> [0: bb93, otherwise: bb92];
    }

    bb92: {
        _254 = core::panicking::AssertKind::Eq;
        _256 = Option::<Arguments<'_>>::None;
        _255 = assert_failed::<bool, bool>(move _254, _248, _249, move _256) -> unwind continue;
    }

    bb93: {
        _239 = _240;
        _238 = Not(move _239);
        _237 = Not(move _238);
        switchInt(move _237) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        _257 = panic(const "assertion failed: !yes!(\\'b\\', ..= \\'a\\')") -> unwind continue;
    }

    bb95: {
        _261 = const _;
        _262 = Eq(const -Inff32, _261);
        _260 = _262;
        _433 = const _;
        _432 = const _;
        _263 = RangeToInclusive::<f32>::contains::<f32>(_433, _432) -> [return: bb96, unwind continue];
    }

    bb96: {
        _265 = &_260;
        _266 = &_263;
        _264 = (move _265, move _266);
        _267 = (_264.0: &bool);
        _268 = (_264.1: &bool);
        _271 = (*_267);
        _272 = (*_268);
        _270 = Eq(move _271, move _272);
        _269 = Not(move _270);
        switchInt(move _269) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        _273 = core::panicking::AssertKind::Eq;
        _275 = Option::<Arguments<'_>>::None;
        _274 = assert_failed::<bool, bool>(move _273, _267, _268, move _275) -> unwind continue;
    }

    bb98: {
        _259 = _260;
        _258 = Not(move _259);
        switchInt(move _258) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _276 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, ..= f32 :: NEG_INFINITY)") -> unwind continue;
    }

    bb100: {
        _280 = const _;
        _281 = Le(const -Inff32, _280);
        switchInt(move _281) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _282 = Le(_280, const 1f32);
        _279 = _282;
        goto -> bb103;
    }

    bb102: {
        _279 = const false;
        goto -> bb103;
    }

    bb103: {
        _431 = const _;
        _430 = const _;
        _283 = RangeToInclusive::<f32>::contains::<f32>(_431, _430) -> [return: bb104, unwind continue];
    }

    bb104: {
        _285 = &_279;
        _286 = &_283;
        _284 = (move _285, move _286);
        _287 = (_284.0: &bool);
        _288 = (_284.1: &bool);
        _291 = (*_287);
        _292 = (*_288);
        _290 = Eq(move _291, move _292);
        _289 = Not(move _290);
        switchInt(move _289) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _293 = core::panicking::AssertKind::Eq;
        _295 = Option::<Arguments<'_>>::None;
        _294 = assert_failed::<bool, bool>(move _293, _287, _288, move _295) -> unwind continue;
    }

    bb106: {
        _278 = _279;
        _277 = Not(move _278);
        switchInt(move _277) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _296 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, ..= 1.0f32)") -> unwind continue;
    }

    bb108: {
        _300 = const 1.5f32;
        _301 = Le(const -Inff32, _300);
        switchInt(move _301) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _302 = Le(_300, const 1.5f32);
        _299 = _302;
        goto -> bb111;
    }

    bb110: {
        _299 = const false;
        goto -> bb111;
    }

    bb111: {
        _429 = const _;
        _428 = const _;
        _303 = RangeToInclusive::<f32>::contains::<f32>(_429, _428) -> [return: bb112, unwind continue];
    }

    bb112: {
        _305 = &_299;
        _306 = &_303;
        _304 = (move _305, move _306);
        _307 = (_304.0: &bool);
        _308 = (_304.1: &bool);
        _311 = (*_307);
        _312 = (*_308);
        _310 = Eq(move _311, move _312);
        _309 = Not(move _310);
        switchInt(move _309) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _313 = core::panicking::AssertKind::Eq;
        _315 = Option::<Arguments<'_>>::None;
        _314 = assert_failed::<bool, bool>(move _313, _307, _308, move _315) -> unwind continue;
    }

    bb114: {
        _298 = _299;
        _297 = Not(move _298);
        switchInt(move _297) -> [0: bb116, otherwise: bb115];
    }

    bb115: {
        _316 = panic(const "assertion failed: yes!(1.5f32, ..= 1.5f32)") -> unwind continue;
    }

    bb116: {
        _321 = const 1.60000002f32;
        _322 = Le(const -Inff32, _321);
        switchInt(move _322) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _323 = Le(_321, const -1.5f32);
        _320 = _323;
        goto -> bb119;
    }

    bb118: {
        _320 = const false;
        goto -> bb119;
    }

    bb119: {
        _427 = const _;
        _426 = const _;
        _324 = RangeToInclusive::<f32>::contains::<f32>(_427, _426) -> [return: bb120, unwind continue];
    }

    bb120: {
        _326 = &_320;
        _327 = &_324;
        _325 = (move _326, move _327);
        _328 = (_325.0: &bool);
        _329 = (_325.1: &bool);
        _332 = (*_328);
        _333 = (*_329);
        _331 = Eq(move _332, move _333);
        _330 = Not(move _331);
        switchInt(move _330) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _334 = core::panicking::AssertKind::Eq;
        _336 = Option::<Arguments<'_>>::None;
        _335 = assert_failed::<bool, bool>(move _334, _328, _329, move _336) -> unwind continue;
    }

    bb122: {
        _319 = _320;
        _318 = Not(move _319);
        _317 = Not(move _318);
        switchInt(move _317) -> [0: bb124, otherwise: bb123];
    }

    bb123: {
        _337 = panic(const "assertion failed: !yes!(1.6f32, ..= - 1.5f32)") -> unwind continue;
    }

    bb124: {
        _341 = const _;
        _342 = Eq(const -Inff64, _341);
        _340 = _342;
        _425 = const _;
        _424 = const _;
        _343 = RangeToInclusive::<f64>::contains::<f64>(_425, _424) -> [return: bb125, unwind continue];
    }

    bb125: {
        _345 = &_340;
        _346 = &_343;
        _344 = (move _345, move _346);
        _347 = (_344.0: &bool);
        _348 = (_344.1: &bool);
        _351 = (*_347);
        _352 = (*_348);
        _350 = Eq(move _351, move _352);
        _349 = Not(move _350);
        switchInt(move _349) -> [0: bb127, otherwise: bb126];
    }

    bb126: {
        _353 = core::panicking::AssertKind::Eq;
        _355 = Option::<Arguments<'_>>::None;
        _354 = assert_failed::<bool, bool>(move _353, _347, _348, move _355) -> unwind continue;
    }

    bb127: {
        _339 = _340;
        _338 = Not(move _339);
        switchInt(move _338) -> [0: bb129, otherwise: bb128];
    }

    bb128: {
        _356 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, ..= f64 :: NEG_INFINITY)") -> unwind continue;
    }

    bb129: {
        _360 = const _;
        _361 = Le(const -Inff64, _360);
        switchInt(move _361) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _362 = Le(_360, const 1f64);
        _359 = _362;
        goto -> bb132;
    }

    bb131: {
        _359 = const false;
        goto -> bb132;
    }

    bb132: {
        _423 = const _;
        _422 = const _;
        _363 = RangeToInclusive::<f64>::contains::<f64>(_423, _422) -> [return: bb133, unwind continue];
    }

    bb133: {
        _365 = &_359;
        _366 = &_363;
        _364 = (move _365, move _366);
        _367 = (_364.0: &bool);
        _368 = (_364.1: &bool);
        _371 = (*_367);
        _372 = (*_368);
        _370 = Eq(move _371, move _372);
        _369 = Not(move _370);
        switchInt(move _369) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _373 = core::panicking::AssertKind::Eq;
        _375 = Option::<Arguments<'_>>::None;
        _374 = assert_failed::<bool, bool>(move _373, _367, _368, move _375) -> unwind continue;
    }

    bb135: {
        _358 = _359;
        _357 = Not(move _358);
        switchInt(move _357) -> [0: bb137, otherwise: bb136];
    }

    bb136: {
        _376 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, ..= 1.0f64)") -> unwind continue;
    }

    bb137: {
        _380 = const 1.5f64;
        _381 = Le(const -Inff64, _380);
        switchInt(move _381) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _382 = Le(_380, const 1.5f64);
        _379 = _382;
        goto -> bb140;
    }

    bb139: {
        _379 = const false;
        goto -> bb140;
    }

    bb140: {
        _421 = const _;
        _420 = const _;
        _383 = RangeToInclusive::<f64>::contains::<f64>(_421, _420) -> [return: bb141, unwind continue];
    }

    bb141: {
        _385 = &_379;
        _386 = &_383;
        _384 = (move _385, move _386);
        _387 = (_384.0: &bool);
        _388 = (_384.1: &bool);
        _391 = (*_387);
        _392 = (*_388);
        _390 = Eq(move _391, move _392);
        _389 = Not(move _390);
        switchInt(move _389) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        _393 = core::panicking::AssertKind::Eq;
        _395 = Option::<Arguments<'_>>::None;
        _394 = assert_failed::<bool, bool>(move _393, _387, _388, move _395) -> unwind continue;
    }

    bb143: {
        _378 = _379;
        _377 = Not(move _378);
        switchInt(move _377) -> [0: bb145, otherwise: bb144];
    }

    bb144: {
        _396 = panic(const "assertion failed: yes!(1.5f64, ..= 1.5f64)") -> unwind continue;
    }

    bb145: {
        _401 = const 1.6000000000000001f64;
        _402 = Le(const -Inff64, _401);
        switchInt(move _402) -> [0: bb147, otherwise: bb146];
    }

    bb146: {
        _403 = Le(_401, const -1.5f64);
        _400 = _403;
        goto -> bb148;
    }

    bb147: {
        _400 = const false;
        goto -> bb148;
    }

    bb148: {
        _419 = const _;
        _418 = const _;
        _404 = RangeToInclusive::<f64>::contains::<f64>(_419, _418) -> [return: bb149, unwind continue];
    }

    bb149: {
        _406 = &_400;
        _407 = &_404;
        _405 = (move _406, move _407);
        _408 = (_405.0: &bool);
        _409 = (_405.1: &bool);
        _412 = (*_408);
        _413 = (*_409);
        _411 = Eq(move _412, move _413);
        _410 = Not(move _411);
        switchInt(move _410) -> [0: bb151, otherwise: bb150];
    }

    bb150: {
        _414 = core::panicking::AssertKind::Eq;
        _416 = Option::<Arguments<'_>>::None;
        _415 = assert_failed::<bool, bool>(move _414, _408, _409, move _416) -> unwind continue;
    }

    bb151: {
        _399 = _400;
        _398 = Not(move _399);
        _397 = Not(move _398);
        switchInt(move _397) -> [0: bb153, otherwise: bb152];
    }

    bb152: {
        _417 = panic(const "assertion failed: !yes!(1.6f64, ..= - 1.5f64)") -> unwind continue;
    }

    bb153: {
        return;
    }
}

promoted[0] in range_to_inclusive: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1.6000000000000001f64;
        _0 = &_1;
        return;
    }
}

promoted[1] in range_to_inclusive: &RangeToInclusive<f64> = {
    let mut _0: &std::ops::RangeToInclusive<f64>;
    let mut _1: std::ops::RangeToInclusive<f64>;

    bb0: {
        _1 = RangeToInclusive::<f64> { end: const -1.5f64 };
        _0 = &_1;
        return;
    }
}

promoted[2] in range_to_inclusive: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1.5f64;
        _0 = &_1;
        return;
    }
}

promoted[3] in range_to_inclusive: &RangeToInclusive<f64> = {
    let mut _0: &std::ops::RangeToInclusive<f64>;
    let mut _1: std::ops::RangeToInclusive<f64>;

    bb0: {
        _1 = RangeToInclusive::<f64> { end: const 1.5f64 };
        _0 = &_1;
        return;
    }
}

promoted[4] in range_to_inclusive: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[5] in range_to_inclusive: &RangeToInclusive<f64> = {
    let mut _0: &std::ops::RangeToInclusive<f64>;
    let mut _1: std::ops::RangeToInclusive<f64>;

    bb0: {
        _1 = RangeToInclusive::<f64> { end: const 1f64 };
        _0 = &_1;
        return;
    }
}

promoted[6] in range_to_inclusive: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in range_to_inclusive: &RangeToInclusive<f64> = {
    let mut _0: &std::ops::RangeToInclusive<f64>;
    let mut _1: std::ops::RangeToInclusive<f64>;

    bb0: {
        _1 = RangeToInclusive::<f64> { end: const _ };
        _0 = &_1;
        return;
    }
}

promoted[8] in range_to_inclusive: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 1.60000002f32;
        _0 = &_1;
        return;
    }
}

promoted[9] in range_to_inclusive: &RangeToInclusive<f32> = {
    let mut _0: &std::ops::RangeToInclusive<f32>;
    let mut _1: std::ops::RangeToInclusive<f32>;

    bb0: {
        _1 = RangeToInclusive::<f32> { end: const -1.5f32 };
        _0 = &_1;
        return;
    }
}

promoted[10] in range_to_inclusive: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 1.5f32;
        _0 = &_1;
        return;
    }
}

promoted[11] in range_to_inclusive: &RangeToInclusive<f32> = {
    let mut _0: &std::ops::RangeToInclusive<f32>;
    let mut _1: std::ops::RangeToInclusive<f32>;

    bb0: {
        _1 = RangeToInclusive::<f32> { end: const 1.5f32 };
        _0 = &_1;
        return;
    }
}

promoted[12] in range_to_inclusive: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[13] in range_to_inclusive: &RangeToInclusive<f32> = {
    let mut _0: &std::ops::RangeToInclusive<f32>;
    let mut _1: std::ops::RangeToInclusive<f32>;

    bb0: {
        _1 = RangeToInclusive::<f32> { end: const 1f32 };
        _0 = &_1;
        return;
    }
}

promoted[14] in range_to_inclusive: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[15] in range_to_inclusive: &RangeToInclusive<f32> = {
    let mut _0: &std::ops::RangeToInclusive<f32>;
    let mut _1: std::ops::RangeToInclusive<f32>;

    bb0: {
        _1 = RangeToInclusive::<f32> { end: const _ };
        _0 = &_1;
        return;
    }
}

promoted[16] in range_to_inclusive: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'b';
        _0 = &_1;
        return;
    }
}

promoted[17] in range_to_inclusive: &RangeToInclusive<char> = {
    let mut _0: &std::ops::RangeToInclusive<char>;
    let mut _1: std::ops::RangeToInclusive<char>;

    bb0: {
        _1 = RangeToInclusive::<char> { end: const 'a' };
        _0 = &_1;
        return;
    }
}

promoted[18] in range_to_inclusive: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[19] in range_to_inclusive: &RangeToInclusive<char> = {
    let mut _0: &std::ops::RangeToInclusive<char>;
    let mut _1: std::ops::RangeToInclusive<char>;

    bb0: {
        _1 = RangeToInclusive::<char> { end: const 'a' };
        _0 = &_1;
        return;
    }
}

promoted[20] in range_to_inclusive: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[21] in range_to_inclusive: &RangeToInclusive<char> = {
    let mut _0: &std::ops::RangeToInclusive<char>;
    let mut _1: std::ops::RangeToInclusive<char>;

    bb0: {
        _1 = RangeToInclusive::<char> { end: const 'a' };
        _0 = &_1;
        return;
    }
}

promoted[22] in range_to_inclusive: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[23] in range_to_inclusive: &RangeToInclusive<char> = {
    let mut _0: &std::ops::RangeToInclusive<char>;
    let mut _1: std::ops::RangeToInclusive<char>;

    bb0: {
        _1 = RangeToInclusive::<char> { end: const '\0' };
        _0 = &_1;
        return;
    }
}

promoted[24] in range_to_inclusive: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -4_i32;
        _0 = &_1;
        return;
    }
}

promoted[25] in range_to_inclusive: &RangeToInclusive<i32> = {
    let mut _0: &std::ops::RangeToInclusive<i32>;
    let mut _1: std::ops::RangeToInclusive<i32>;

    bb0: {
        _1 = RangeToInclusive::<i32> { end: const -5_i32 };
        _0 = &_1;
        return;
    }
}

promoted[26] in range_to_inclusive: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -5_i32;
        _0 = &_1;
        return;
    }
}

promoted[27] in range_to_inclusive: &RangeToInclusive<i32> = {
    let mut _0: &std::ops::RangeToInclusive<i32>;
    let mut _1: std::ops::RangeToInclusive<i32>;

    bb0: {
        _1 = RangeToInclusive::<i32> { end: const -5_i32 };
        _0 = &_1;
        return;
    }
}

promoted[28] in range_to_inclusive: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[29] in range_to_inclusive: &RangeToInclusive<i16> = {
    let mut _0: &std::ops::RangeToInclusive<i16>;
    let mut _1: std::ops::RangeToInclusive<i16>;

    bb0: {
        _1 = RangeToInclusive::<i16> { end: const -5_i16 };
        _0 = &_1;
        return;
    }
}

promoted[30] in range_to_inclusive: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[31] in range_to_inclusive: &RangeToInclusive<i16> = {
    let mut _0: &std::ops::RangeToInclusive<i16>;
    let mut _1: std::ops::RangeToInclusive<i16>;

    bb0: {
        _1 = RangeToInclusive::<i16> { end: const 0_i16 };
        _0 = &_1;
        return;
    }
}

promoted[32] in range_to_inclusive: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[33] in range_to_inclusive: &RangeToInclusive<i16> = {
    let mut _0: &std::ops::RangeToInclusive<i16>;
    let mut _1: std::ops::RangeToInclusive<i16>;

    bb0: {
        _1 = RangeToInclusive::<i16> { end: const _ };
        _0 = &_1;
        return;
    }
}

promoted[34] in range_to_inclusive: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 6_u8;
        _0 = &_1;
        return;
    }
}

promoted[35] in range_to_inclusive: &RangeToInclusive<u8> = {
    let mut _0: &std::ops::RangeToInclusive<u8>;
    let mut _1: std::ops::RangeToInclusive<u8>;

    bb0: {
        _1 = RangeToInclusive::<u8> { end: const 5_u8 };
        _0 = &_1;
        return;
    }
}

promoted[36] in range_to_inclusive: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 5_u8;
        _0 = &_1;
        return;
    }
}

promoted[37] in range_to_inclusive: &RangeToInclusive<u8> = {
    let mut _0: &std::ops::RangeToInclusive<u8>;
    let mut _1: std::ops::RangeToInclusive<u8>;

    bb0: {
        _1 = RangeToInclusive::<u8> { end: const 5_u8 };
        _0 = &_1;
        return;
    }
}

promoted[38] in range_to_inclusive: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[39] in range_to_inclusive: &RangeToInclusive<u8> = {
    let mut _0: &std::ops::RangeToInclusive<u8>;
    let mut _1: std::ops::RangeToInclusive<u8>;

    bb0: {
        _1 = RangeToInclusive::<u8> { end: const 5_u8 };
        _0 = &_1;
        return;
    }
}

promoted[40] in range_to_inclusive: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[41] in range_to_inclusive: &RangeToInclusive<u8> = {
    let mut _0: &std::ops::RangeToInclusive<u8>;
    let mut _1: std::ops::RangeToInclusive<u8>;

    bb0: {
        _1 = RangeToInclusive::<u8> { end: const _ };
        _0 = &_1;
        return;
    }
}

fn range_to() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let _3: bool;
    let mut _4: u8;
    let mut _5: bool;
    let mut _6: bool;
    let mut _8: (&bool, &bool);
    let mut _9: &bool;
    let mut _10: &bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let _18: !;
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _20: !;
    let mut _21: bool;
    let mut _22: bool;
    let _23: bool;
    let mut _24: u8;
    let mut _25: bool;
    let mut _26: bool;
    let mut _28: (&bool, &bool);
    let mut _29: &bool;
    let mut _30: &bool;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: !;
    let mut _41: bool;
    let mut _42: bool;
    let mut _43: bool;
    let _44: bool;
    let mut _45: u8;
    let mut _46: bool;
    let mut _47: bool;
    let mut _49: (&bool, &bool);
    let mut _50: &bool;
    let mut _51: &bool;
    let mut _54: bool;
    let mut _55: bool;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: !;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let _65: bool;
    let mut _66: u8;
    let mut _67: bool;
    let mut _68: bool;
    let mut _70: (&bool, &bool);
    let mut _71: &bool;
    let mut _72: &bool;
    let mut _75: bool;
    let mut _76: bool;
    let mut _77: bool;
    let mut _78: bool;
    let _80: !;
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _82: !;
    let mut _83: bool;
    let mut _84: bool;
    let _85: bool;
    let mut _86: u8;
    let mut _87: bool;
    let mut _88: bool;
    let mut _90: (&bool, &bool);
    let mut _91: &bool;
    let mut _92: &bool;
    let mut _95: bool;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: bool;
    let _100: !;
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _102: !;
    let mut _103: bool;
    let mut _104: bool;
    let _105: bool;
    let mut _106: u8;
    let mut _107: bool;
    let mut _108: bool;
    let mut _110: (&bool, &bool);
    let mut _111: &bool;
    let mut _112: &bool;
    let mut _115: bool;
    let mut _116: bool;
    let mut _117: bool;
    let mut _118: bool;
    let _120: !;
    let mut _121: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _122: !;
    let mut _123: bool;
    let mut _124: bool;
    let mut _125: bool;
    let _126: bool;
    let mut _127: u8;
    let mut _128: bool;
    let mut _129: bool;
    let mut _131: (&bool, &bool);
    let mut _132: &bool;
    let mut _133: &bool;
    let mut _136: bool;
    let mut _137: bool;
    let mut _138: bool;
    let mut _139: bool;
    let _141: !;
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _143: !;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: bool;
    let _147: bool;
    let mut _148: u8;
    let mut _149: bool;
    let mut _150: bool;
    let mut _152: (&bool, &bool);
    let mut _153: &bool;
    let mut _154: &bool;
    let mut _157: bool;
    let mut _158: bool;
    let mut _159: bool;
    let mut _160: bool;
    let _162: !;
    let mut _163: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _164: !;
    let mut _165: bool;
    let mut _166: bool;
    let _167: bool;
    let mut _168: i16;
    let mut _169: bool;
    let mut _170: bool;
    let mut _172: (&bool, &bool);
    let mut _173: &bool;
    let mut _174: &bool;
    let mut _177: bool;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: bool;
    let _182: !;
    let mut _183: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _184: !;
    let mut _185: bool;
    let mut _186: bool;
    let _187: bool;
    let mut _188: i16;
    let mut _189: bool;
    let mut _190: bool;
    let mut _192: (&bool, &bool);
    let mut _193: &bool;
    let mut _194: &bool;
    let mut _197: bool;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: bool;
    let _202: !;
    let mut _203: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _204: !;
    let mut _205: bool;
    let mut _206: bool;
    let _207: bool;
    let mut _208: i32;
    let mut _209: bool;
    let mut _210: bool;
    let mut _212: (&bool, &bool);
    let mut _213: &bool;
    let mut _214: &bool;
    let mut _217: bool;
    let mut _218: bool;
    let mut _219: bool;
    let mut _220: bool;
    let _222: !;
    let mut _223: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _224: !;
    let mut _225: bool;
    let mut _226: bool;
    let mut _227: bool;
    let _228: bool;
    let mut _229: i32;
    let mut _230: bool;
    let mut _231: bool;
    let mut _233: (&bool, &bool);
    let mut _234: &bool;
    let mut _235: &bool;
    let mut _238: bool;
    let mut _239: bool;
    let mut _240: bool;
    let mut _241: bool;
    let _243: !;
    let mut _244: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _245: !;
    let mut _246: bool;
    let mut _247: bool;
    let _248: bool;
    let mut _249: char;
    let mut _250: bool;
    let mut _251: bool;
    let mut _253: (&bool, &bool);
    let mut _254: &bool;
    let mut _255: &bool;
    let mut _258: bool;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: bool;
    let _263: !;
    let mut _264: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _265: !;
    let mut _266: bool;
    let mut _267: bool;
    let _268: bool;
    let mut _269: char;
    let mut _270: bool;
    let mut _271: bool;
    let mut _273: (&bool, &bool);
    let mut _274: &bool;
    let mut _275: &bool;
    let mut _278: bool;
    let mut _279: bool;
    let mut _280: bool;
    let mut _281: bool;
    let _283: !;
    let mut _284: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _285: !;
    let mut _286: bool;
    let mut _287: bool;
    let _288: bool;
    let mut _289: char;
    let mut _290: bool;
    let mut _291: bool;
    let mut _293: (&bool, &bool);
    let mut _294: &bool;
    let mut _295: &bool;
    let mut _298: bool;
    let mut _299: bool;
    let mut _300: bool;
    let mut _301: bool;
    let _303: !;
    let mut _304: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _305: !;
    let mut _306: bool;
    let mut _307: bool;
    let mut _308: bool;
    let _309: bool;
    let mut _310: char;
    let mut _311: bool;
    let mut _312: bool;
    let mut _314: (&bool, &bool);
    let mut _315: &bool;
    let mut _316: &bool;
    let mut _319: bool;
    let mut _320: bool;
    let mut _321: bool;
    let mut _322: bool;
    let _324: !;
    let mut _325: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _326: !;
    let mut _327: bool;
    let mut _328: bool;
    let mut _329: bool;
    let _330: bool;
    let mut _331: char;
    let mut _332: bool;
    let mut _333: bool;
    let mut _335: (&bool, &bool);
    let mut _336: &bool;
    let mut _337: &bool;
    let mut _340: bool;
    let mut _341: bool;
    let mut _342: bool;
    let mut _343: bool;
    let _345: !;
    let mut _346: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _347: !;
    let mut _348: bool;
    let mut _349: bool;
    let _350: bool;
    let mut _351: f32;
    let mut _352: bool;
    let mut _353: bool;
    let mut _355: (&bool, &bool);
    let mut _356: &bool;
    let mut _357: &bool;
    let mut _360: bool;
    let mut _361: bool;
    let mut _362: bool;
    let mut _363: bool;
    let _365: !;
    let mut _366: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _367: !;
    let mut _368: bool;
    let mut _369: bool;
    let mut _370: bool;
    let _371: bool;
    let mut _372: f32;
    let mut _373: bool;
    let mut _374: bool;
    let mut _376: (&bool, &bool);
    let mut _377: &bool;
    let mut _378: &bool;
    let mut _381: bool;
    let mut _382: bool;
    let mut _383: bool;
    let mut _384: bool;
    let _386: !;
    let mut _387: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _388: !;
    let mut _389: bool;
    let mut _390: bool;
    let _391: bool;
    let mut _392: f32;
    let mut _393: bool;
    let mut _394: bool;
    let mut _396: (&bool, &bool);
    let mut _397: &bool;
    let mut _398: &bool;
    let mut _401: bool;
    let mut _402: bool;
    let mut _403: bool;
    let mut _404: bool;
    let _406: !;
    let mut _407: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _408: !;
    let mut _409: bool;
    let mut _410: bool;
    let mut _411: bool;
    let _412: bool;
    let mut _413: f32;
    let mut _414: bool;
    let mut _415: bool;
    let mut _417: (&bool, &bool);
    let mut _418: &bool;
    let mut _419: &bool;
    let mut _422: bool;
    let mut _423: bool;
    let mut _424: bool;
    let mut _425: bool;
    let _427: !;
    let mut _428: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _429: !;
    let mut _430: bool;
    let mut _431: bool;
    let _432: bool;
    let mut _433: f64;
    let mut _434: bool;
    let mut _435: bool;
    let mut _437: (&bool, &bool);
    let mut _438: &bool;
    let mut _439: &bool;
    let mut _442: bool;
    let mut _443: bool;
    let mut _444: bool;
    let mut _445: bool;
    let _447: !;
    let mut _448: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _449: !;
    let mut _450: bool;
    let mut _451: bool;
    let mut _452: bool;
    let _453: bool;
    let mut _454: f64;
    let mut _455: bool;
    let mut _456: bool;
    let mut _458: (&bool, &bool);
    let mut _459: &bool;
    let mut _460: &bool;
    let mut _463: bool;
    let mut _464: bool;
    let mut _465: bool;
    let mut _466: bool;
    let _468: !;
    let mut _469: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _470: !;
    let mut _471: bool;
    let mut _472: bool;
    let _473: bool;
    let mut _474: f64;
    let mut _475: bool;
    let mut _476: bool;
    let mut _478: (&bool, &bool);
    let mut _479: &bool;
    let mut _480: &bool;
    let mut _483: bool;
    let mut _484: bool;
    let mut _485: bool;
    let mut _486: bool;
    let _488: !;
    let mut _489: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _490: !;
    let mut _491: bool;
    let mut _492: bool;
    let mut _493: bool;
    let _494: bool;
    let mut _495: f64;
    let mut _496: bool;
    let mut _497: bool;
    let mut _499: (&bool, &bool);
    let mut _500: &bool;
    let mut _501: &bool;
    let mut _504: bool;
    let mut _505: bool;
    let mut _506: bool;
    let mut _507: bool;
    let _509: !;
    let mut _510: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _511: !;
    scope 1 {
        debug m => _3;
        let _7: bool;
        let mut _560: &u8;
        let mut _561: &std::ops::RangeTo<u8>;
        scope 2 {
            debug c => _7;
            let _11: &bool;
            let _12: &bool;
            scope 3 {
                debug left_val => _11;
                debug right_val => _12;
                let _17: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _17;
                }
            }
        }
    }
    scope 5 {
        debug m => _23;
        let _27: bool;
        let mut _558: &u8;
        let mut _559: &std::ops::RangeTo<u8>;
        scope 6 {
            debug c => _27;
            let _31: &bool;
            let _32: &bool;
            scope 7 {
                debug left_val => _31;
                debug right_val => _32;
                let _37: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _37;
                }
            }
        }
    }
    scope 9 {
        debug m => _44;
        let _48: bool;
        let mut _556: &u8;
        let mut _557: &std::ops::RangeTo<u8>;
        scope 10 {
            debug c => _48;
            let _52: &bool;
            let _53: &bool;
            scope 11 {
                debug left_val => _52;
                debug right_val => _53;
                let _58: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _58;
                }
            }
        }
    }
    scope 13 {
        debug m => _65;
        let _69: bool;
        let mut _554: &u8;
        let mut _555: &std::ops::RangeTo<u8>;
        scope 14 {
            debug c => _69;
            let _73: &bool;
            let _74: &bool;
            scope 15 {
                debug left_val => _73;
                debug right_val => _74;
                let _79: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _79;
                }
            }
        }
    }
    scope 17 {
        debug m => _85;
        let _89: bool;
        let mut _552: &u8;
        let mut _553: &std::ops::RangeTo<u8>;
        scope 18 {
            debug c => _89;
            let _93: &bool;
            let _94: &bool;
            scope 19 {
                debug left_val => _93;
                debug right_val => _94;
                let _99: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _99;
                }
            }
        }
    }
    scope 21 {
        debug m => _105;
        let _109: bool;
        let mut _550: &u8;
        let mut _551: &std::ops::RangeTo<u8>;
        scope 22 {
            debug c => _109;
            let _113: &bool;
            let _114: &bool;
            scope 23 {
                debug left_val => _113;
                debug right_val => _114;
                let _119: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _119;
                }
            }
        }
    }
    scope 25 {
        debug m => _126;
        let _130: bool;
        let mut _548: &u8;
        let mut _549: &std::ops::RangeTo<u8>;
        scope 26 {
            debug c => _130;
            let _134: &bool;
            let _135: &bool;
            scope 27 {
                debug left_val => _134;
                debug right_val => _135;
                let _140: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _140;
                }
            }
        }
    }
    scope 29 {
        debug m => _147;
        let _151: bool;
        let mut _546: &u8;
        let mut _547: &std::ops::RangeTo<u8>;
        scope 30 {
            debug c => _151;
            let _155: &bool;
            let _156: &bool;
            scope 31 {
                debug left_val => _155;
                debug right_val => _156;
                let _161: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _161;
                }
            }
        }
    }
    scope 33 {
        debug m => _167;
        let _171: bool;
        let mut _544: &i16;
        let mut _545: &std::ops::RangeTo<i16>;
        scope 34 {
            debug c => _171;
            let _175: &bool;
            let _176: &bool;
            scope 35 {
                debug left_val => _175;
                debug right_val => _176;
                let _181: core::panicking::AssertKind;
                scope 36 {
                    debug kind => _181;
                }
            }
        }
    }
    scope 37 {
        debug m => _187;
        let _191: bool;
        let mut _542: &i16;
        let mut _543: &std::ops::RangeTo<i16>;
        scope 38 {
            debug c => _191;
            let _195: &bool;
            let _196: &bool;
            scope 39 {
                debug left_val => _195;
                debug right_val => _196;
                let _201: core::panicking::AssertKind;
                scope 40 {
                    debug kind => _201;
                }
            }
        }
    }
    scope 41 {
        debug m => _207;
        let _211: bool;
        let mut _540: &i32;
        let mut _541: &std::ops::RangeTo<i32>;
        scope 42 {
            debug c => _211;
            let _215: &bool;
            let _216: &bool;
            scope 43 {
                debug left_val => _215;
                debug right_val => _216;
                let _221: core::panicking::AssertKind;
                scope 44 {
                    debug kind => _221;
                }
            }
        }
    }
    scope 45 {
        debug m => _228;
        let _232: bool;
        let mut _538: &i32;
        let mut _539: &std::ops::RangeTo<i32>;
        scope 46 {
            debug c => _232;
            let _236: &bool;
            let _237: &bool;
            scope 47 {
                debug left_val => _236;
                debug right_val => _237;
                let _242: core::panicking::AssertKind;
                scope 48 {
                    debug kind => _242;
                }
            }
        }
    }
    scope 49 {
        debug m => _248;
        let _252: bool;
        let mut _536: &char;
        let mut _537: &std::ops::RangeTo<char>;
        scope 50 {
            debug c => _252;
            let _256: &bool;
            let _257: &bool;
            scope 51 {
                debug left_val => _256;
                debug right_val => _257;
                let _262: core::panicking::AssertKind;
                scope 52 {
                    debug kind => _262;
                }
            }
        }
    }
    scope 53 {
        debug m => _268;
        let _272: bool;
        let mut _534: &char;
        let mut _535: &std::ops::RangeTo<char>;
        scope 54 {
            debug c => _272;
            let _276: &bool;
            let _277: &bool;
            scope 55 {
                debug left_val => _276;
                debug right_val => _277;
                let _282: core::panicking::AssertKind;
                scope 56 {
                    debug kind => _282;
                }
            }
        }
    }
    scope 57 {
        debug m => _288;
        let _292: bool;
        let mut _532: &char;
        let mut _533: &std::ops::RangeTo<char>;
        scope 58 {
            debug c => _292;
            let _296: &bool;
            let _297: &bool;
            scope 59 {
                debug left_val => _296;
                debug right_val => _297;
                let _302: core::panicking::AssertKind;
                scope 60 {
                    debug kind => _302;
                }
            }
        }
    }
    scope 61 {
        debug m => _309;
        let _313: bool;
        let mut _530: &char;
        let mut _531: &std::ops::RangeTo<char>;
        scope 62 {
            debug c => _313;
            let _317: &bool;
            let _318: &bool;
            scope 63 {
                debug left_val => _317;
                debug right_val => _318;
                let _323: core::panicking::AssertKind;
                scope 64 {
                    debug kind => _323;
                }
            }
        }
    }
    scope 65 {
        debug m => _330;
        let _334: bool;
        let mut _528: &char;
        let mut _529: &std::ops::RangeTo<char>;
        scope 66 {
            debug c => _334;
            let _338: &bool;
            let _339: &bool;
            scope 67 {
                debug left_val => _338;
                debug right_val => _339;
                let _344: core::panicking::AssertKind;
                scope 68 {
                    debug kind => _344;
                }
            }
        }
    }
    scope 69 {
        debug m => _350;
        let _354: bool;
        let mut _526: &f32;
        let mut _527: &std::ops::RangeTo<f32>;
        scope 70 {
            debug c => _354;
            let _358: &bool;
            let _359: &bool;
            scope 71 {
                debug left_val => _358;
                debug right_val => _359;
                let _364: core::panicking::AssertKind;
                scope 72 {
                    debug kind => _364;
                }
            }
        }
    }
    scope 73 {
        debug m => _371;
        let _375: bool;
        let mut _524: &f32;
        let mut _525: &std::ops::RangeTo<f32>;
        scope 74 {
            debug c => _375;
            let _379: &bool;
            let _380: &bool;
            scope 75 {
                debug left_val => _379;
                debug right_val => _380;
                let _385: core::panicking::AssertKind;
                scope 76 {
                    debug kind => _385;
                }
            }
        }
    }
    scope 77 {
        debug m => _391;
        let _395: bool;
        let mut _522: &f32;
        let mut _523: &std::ops::RangeTo<f32>;
        scope 78 {
            debug c => _395;
            let _399: &bool;
            let _400: &bool;
            scope 79 {
                debug left_val => _399;
                debug right_val => _400;
                let _405: core::panicking::AssertKind;
                scope 80 {
                    debug kind => _405;
                }
            }
        }
    }
    scope 81 {
        debug m => _412;
        let _416: bool;
        let mut _520: &f32;
        let mut _521: &std::ops::RangeTo<f32>;
        scope 82 {
            debug c => _416;
            let _420: &bool;
            let _421: &bool;
            scope 83 {
                debug left_val => _420;
                debug right_val => _421;
                let _426: core::panicking::AssertKind;
                scope 84 {
                    debug kind => _426;
                }
            }
        }
    }
    scope 85 {
        debug m => _432;
        let _436: bool;
        let mut _518: &f64;
        let mut _519: &std::ops::RangeTo<f64>;
        scope 86 {
            debug c => _436;
            let _440: &bool;
            let _441: &bool;
            scope 87 {
                debug left_val => _440;
                debug right_val => _441;
                let _446: core::panicking::AssertKind;
                scope 88 {
                    debug kind => _446;
                }
            }
        }
    }
    scope 89 {
        debug m => _453;
        let _457: bool;
        let mut _516: &f64;
        let mut _517: &std::ops::RangeTo<f64>;
        scope 90 {
            debug c => _457;
            let _461: &bool;
            let _462: &bool;
            scope 91 {
                debug left_val => _461;
                debug right_val => _462;
                let _467: core::panicking::AssertKind;
                scope 92 {
                    debug kind => _467;
                }
            }
        }
    }
    scope 93 {
        debug m => _473;
        let _477: bool;
        let mut _514: &f64;
        let mut _515: &std::ops::RangeTo<f64>;
        scope 94 {
            debug c => _477;
            let _481: &bool;
            let _482: &bool;
            scope 95 {
                debug left_val => _481;
                debug right_val => _482;
                let _487: core::panicking::AssertKind;
                scope 96 {
                    debug kind => _487;
                }
            }
        }
    }
    scope 97 {
        debug m => _494;
        let _498: bool;
        let mut _512: &f64;
        let mut _513: &std::ops::RangeTo<f64>;
        scope 98 {
            debug c => _498;
            let _502: &bool;
            let _503: &bool;
            scope 99 {
                debug left_val => _502;
                debug right_val => _503;
                let _508: core::panicking::AssertKind;
                scope 100 {
                    debug kind => _508;
                }
            }
        }
    }

    bb0: {
        _4 = const 0_u8;
        _5 = Le(const 0_u8, _4);
        switchInt(move _5) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _6 = Lt(_4, const 1_u8);
        _3 = _6;
        goto -> bb3;
    }

    bb2: {
        _3 = const false;
        goto -> bb3;
    }

    bb3: {
        _561 = const _;
        _560 = const _;
        _7 = RangeTo::<u8>::contains::<u8>(_561, _560) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = &_3;
        _10 = &_7;
        _8 = (move _9, move _10);
        _11 = (_8.0: &bool);
        _12 = (_8.1: &bool);
        _15 = (*_11);
        _16 = (*_12);
        _14 = Eq(move _15, move _16);
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _17 = core::panicking::AssertKind::Eq;
        _19 = Option::<Arguments<'_>>::None;
        _18 = assert_failed::<bool, bool>(move _17, _11, _12, move _19) -> unwind continue;
    }

    bb6: {
        _2 = _3;
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = panic(const "assertion failed: yes!(0u8, .. 1)") -> unwind continue;
    }

    bb8: {
        _24 = const 0_u8;
        _25 = Le(const 0_u8, _24);
        switchInt(move _25) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _26 = Lt(_24, const 5_u8);
        _23 = _26;
        goto -> bb11;
    }

    bb10: {
        _23 = const false;
        goto -> bb11;
    }

    bb11: {
        _559 = const _;
        _558 = const _;
        _27 = RangeTo::<u8>::contains::<u8>(_559, _558) -> [return: bb12, unwind continue];
    }

    bb12: {
        _29 = &_23;
        _30 = &_27;
        _28 = (move _29, move _30);
        _31 = (_28.0: &bool);
        _32 = (_28.1: &bool);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = assert_failed::<bool, bool>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb14: {
        _22 = _23;
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _40 = panic(const "assertion failed: yes!(0u8, .. 5)") -> unwind continue;
    }

    bb16: {
        _45 = const 5_u8;
        _46 = Le(const 0_u8, _45);
        switchInt(move _46) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _47 = Lt(_45, const 5_u8);
        _44 = _47;
        goto -> bb19;
    }

    bb18: {
        _44 = const false;
        goto -> bb19;
    }

    bb19: {
        _557 = const _;
        _556 = const _;
        _48 = RangeTo::<u8>::contains::<u8>(_557, _556) -> [return: bb20, unwind continue];
    }

    bb20: {
        _50 = &_44;
        _51 = &_48;
        _49 = (move _50, move _51);
        _52 = (_49.0: &bool);
        _53 = (_49.1: &bool);
        _56 = (*_52);
        _57 = (*_53);
        _55 = Eq(move _56, move _57);
        _54 = Not(move _55);
        switchInt(move _54) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = assert_failed::<bool, bool>(move _58, _52, _53, move _60) -> unwind continue;
    }

    bb22: {
        _43 = _44;
        _42 = Not(move _43);
        _41 = Not(move _42);
        switchInt(move _41) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _61 = panic(const "assertion failed: !yes!(5u8, .. 5)") -> unwind continue;
    }

    bb24: {
        _66 = const 6_u8;
        _67 = Le(const 0_u8, _66);
        switchInt(move _67) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _68 = Lt(_66, const 5_u8);
        _65 = _68;
        goto -> bb27;
    }

    bb26: {
        _65 = const false;
        goto -> bb27;
    }

    bb27: {
        _555 = const _;
        _554 = const _;
        _69 = RangeTo::<u8>::contains::<u8>(_555, _554) -> [return: bb28, unwind continue];
    }

    bb28: {
        _71 = &_65;
        _72 = &_69;
        _70 = (move _71, move _72);
        _73 = (_70.0: &bool);
        _74 = (_70.1: &bool);
        _77 = (*_73);
        _78 = (*_74);
        _76 = Eq(move _77, move _78);
        _75 = Not(move _76);
        switchInt(move _75) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _79 = core::panicking::AssertKind::Eq;
        _81 = Option::<Arguments<'_>>::None;
        _80 = assert_failed::<bool, bool>(move _79, _73, _74, move _81) -> unwind continue;
    }

    bb30: {
        _64 = _65;
        _63 = Not(move _64);
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _82 = panic(const "assertion failed: !yes!(6u8, .. 5)") -> unwind continue;
    }

    bb32: {
        _86 = const _;
        _87 = Le(const 0_u8, _86);
        switchInt(move _87) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _88 = Lt(_86, const 1_u8);
        _85 = _88;
        goto -> bb35;
    }

    bb34: {
        _85 = const false;
        goto -> bb35;
    }

    bb35: {
        _553 = const _;
        _552 = const _;
        _89 = RangeTo::<u8>::contains::<u8>(_553, _552) -> [return: bb36, unwind continue];
    }

    bb36: {
        _91 = &_85;
        _92 = &_89;
        _90 = (move _91, move _92);
        _93 = (_90.0: &bool);
        _94 = (_90.1: &bool);
        _97 = (*_93);
        _98 = (*_94);
        _96 = Eq(move _97, move _98);
        _95 = Not(move _96);
        switchInt(move _95) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _99 = core::panicking::AssertKind::Eq;
        _101 = Option::<Arguments<'_>>::None;
        _100 = assert_failed::<bool, bool>(move _99, _93, _94, move _101) -> unwind continue;
    }

    bb38: {
        _84 = _85;
        _83 = Not(move _84);
        switchInt(move _83) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _102 = panic(const "assertion failed: yes!(u8 :: MIN, .. NU8)") -> unwind continue;
    }

    bb40: {
        _106 = const 0_u8;
        _107 = Le(const 0_u8, _106);
        switchInt(move _107) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _108 = Lt(_106, const 5_u8);
        _105 = _108;
        goto -> bb43;
    }

    bb42: {
        _105 = const false;
        goto -> bb43;
    }

    bb43: {
        _551 = const _;
        _550 = const _;
        _109 = RangeTo::<u8>::contains::<u8>(_551, _550) -> [return: bb44, unwind continue];
    }

    bb44: {
        _111 = &_105;
        _112 = &_109;
        _110 = (move _111, move _112);
        _113 = (_110.0: &bool);
        _114 = (_110.1: &bool);
        _117 = (*_113);
        _118 = (*_114);
        _116 = Eq(move _117, move _118);
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _119 = core::panicking::AssertKind::Eq;
        _121 = Option::<Arguments<'_>>::None;
        _120 = assert_failed::<bool, bool>(move _119, _113, _114, move _121) -> unwind continue;
    }

    bb46: {
        _104 = _105;
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _122 = panic(const "assertion failed: yes!(0u8, .. 5)") -> unwind continue;
    }

    bb48: {
        _127 = const 5_u8;
        _128 = Le(const 0_u8, _127);
        switchInt(move _128) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _129 = Lt(_127, const 5_u8);
        _126 = _129;
        goto -> bb51;
    }

    bb50: {
        _126 = const false;
        goto -> bb51;
    }

    bb51: {
        _549 = const _;
        _548 = const _;
        _130 = RangeTo::<u8>::contains::<u8>(_549, _548) -> [return: bb52, unwind continue];
    }

    bb52: {
        _132 = &_126;
        _133 = &_130;
        _131 = (move _132, move _133);
        _134 = (_131.0: &bool);
        _135 = (_131.1: &bool);
        _138 = (*_134);
        _139 = (*_135);
        _137 = Eq(move _138, move _139);
        _136 = Not(move _137);
        switchInt(move _136) -> [0: bb54, otherwise: bb53];
    }

    bb53: {
        _140 = core::panicking::AssertKind::Eq;
        _142 = Option::<Arguments<'_>>::None;
        _141 = assert_failed::<bool, bool>(move _140, _134, _135, move _142) -> unwind continue;
    }

    bb54: {
        _125 = _126;
        _124 = Not(move _125);
        _123 = Not(move _124);
        switchInt(move _123) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _143 = panic(const "assertion failed: !yes!(5u8, .. 5)") -> unwind continue;
    }

    bb56: {
        _148 = const 6_u8;
        _149 = Le(const 0_u8, _148);
        switchInt(move _149) -> [0: bb58, otherwise: bb57];
    }

    bb57: {
        _150 = Lt(_148, const 5_u8);
        _147 = _150;
        goto -> bb59;
    }

    bb58: {
        _147 = const false;
        goto -> bb59;
    }

    bb59: {
        _547 = const _;
        _546 = const _;
        _151 = RangeTo::<u8>::contains::<u8>(_547, _546) -> [return: bb60, unwind continue];
    }

    bb60: {
        _153 = &_147;
        _154 = &_151;
        _152 = (move _153, move _154);
        _155 = (_152.0: &bool);
        _156 = (_152.1: &bool);
        _159 = (*_155);
        _160 = (*_156);
        _158 = Eq(move _159, move _160);
        _157 = Not(move _158);
        switchInt(move _157) -> [0: bb62, otherwise: bb61];
    }

    bb61: {
        _161 = core::panicking::AssertKind::Eq;
        _163 = Option::<Arguments<'_>>::None;
        _162 = assert_failed::<bool, bool>(move _161, _155, _156, move _163) -> unwind continue;
    }

    bb62: {
        _146 = _147;
        _145 = Not(move _146);
        _144 = Not(move _145);
        switchInt(move _144) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _164 = panic(const "assertion failed: !yes!(6u8, .. 5)") -> unwind continue;
    }

    bb64: {
        _168 = const _;
        _169 = Le(const i16::MIN, _168);
        switchInt(move _169) -> [0: bb66, otherwise: bb65];
    }

    bb65: {
        _170 = Lt(_168, const -32767_i16);
        _167 = _170;
        goto -> bb67;
    }

    bb66: {
        _167 = const false;
        goto -> bb67;
    }

    bb67: {
        _545 = const _;
        _544 = const _;
        _171 = RangeTo::<i16>::contains::<i16>(_545, _544) -> [return: bb68, unwind continue];
    }

    bb68: {
        _173 = &_167;
        _174 = &_171;
        _172 = (move _173, move _174);
        _175 = (_172.0: &bool);
        _176 = (_172.1: &bool);
        _179 = (*_175);
        _180 = (*_176);
        _178 = Eq(move _179, move _180);
        _177 = Not(move _178);
        switchInt(move _177) -> [0: bb70, otherwise: bb69];
    }

    bb69: {
        _181 = core::panicking::AssertKind::Eq;
        _183 = Option::<Arguments<'_>>::None;
        _182 = assert_failed::<bool, bool>(move _181, _175, _176, move _183) -> unwind continue;
    }

    bb70: {
        _166 = _167;
        _165 = Not(move _166);
        switchInt(move _165) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _184 = panic(const "assertion failed: yes!(i16 :: MIN, .. NI16)") -> unwind continue;
    }

    bb72: {
        _188 = const _;
        _189 = Le(const i16::MIN, _188);
        switchInt(move _189) -> [0: bb74, otherwise: bb73];
    }

    bb73: {
        _190 = Lt(_188, const 5_i16);
        _187 = _190;
        goto -> bb75;
    }

    bb74: {
        _187 = const false;
        goto -> bb75;
    }

    bb75: {
        _543 = const _;
        _542 = const _;
        _191 = RangeTo::<i16>::contains::<i16>(_543, _542) -> [return: bb76, unwind continue];
    }

    bb76: {
        _193 = &_187;
        _194 = &_191;
        _192 = (move _193, move _194);
        _195 = (_192.0: &bool);
        _196 = (_192.1: &bool);
        _199 = (*_195);
        _200 = (*_196);
        _198 = Eq(move _199, move _200);
        _197 = Not(move _198);
        switchInt(move _197) -> [0: bb78, otherwise: bb77];
    }

    bb77: {
        _201 = core::panicking::AssertKind::Eq;
        _203 = Option::<Arguments<'_>>::None;
        _202 = assert_failed::<bool, bool>(move _201, _195, _196, move _203) -> unwind continue;
    }

    bb78: {
        _186 = _187;
        _185 = Not(move _186);
        switchInt(move _185) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _204 = panic(const "assertion failed: yes!(i16 :: MIN, .. 5)") -> unwind continue;
    }

    bb80: {
        _208 = const -6_i32;
        _209 = Le(const i32::MIN, _208);
        switchInt(move _209) -> [0: bb82, otherwise: bb81];
    }

    bb81: {
        _210 = Lt(_208, const -5_i32);
        _207 = _210;
        goto -> bb83;
    }

    bb82: {
        _207 = const false;
        goto -> bb83;
    }

    bb83: {
        _541 = const _;
        _540 = const _;
        _211 = RangeTo::<i32>::contains::<i32>(_541, _540) -> [return: bb84, unwind continue];
    }

    bb84: {
        _213 = &_207;
        _214 = &_211;
        _212 = (move _213, move _214);
        _215 = (_212.0: &bool);
        _216 = (_212.1: &bool);
        _219 = (*_215);
        _220 = (*_216);
        _218 = Eq(move _219, move _220);
        _217 = Not(move _218);
        switchInt(move _217) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        _221 = core::panicking::AssertKind::Eq;
        _223 = Option::<Arguments<'_>>::None;
        _222 = assert_failed::<bool, bool>(move _221, _215, _216, move _223) -> unwind continue;
    }

    bb86: {
        _206 = _207;
        _205 = Not(move _206);
        switchInt(move _205) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _224 = panic(const "assertion failed: yes!(- 6, .. - 5)") -> unwind continue;
    }

    bb88: {
        _229 = const -5_i32;
        _230 = Le(const i32::MIN, _229);
        switchInt(move _230) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _231 = Lt(_229, const -5_i32);
        _228 = _231;
        goto -> bb91;
    }

    bb90: {
        _228 = const false;
        goto -> bb91;
    }

    bb91: {
        _539 = const _;
        _538 = const _;
        _232 = RangeTo::<i32>::contains::<i32>(_539, _538) -> [return: bb92, unwind continue];
    }

    bb92: {
        _234 = &_228;
        _235 = &_232;
        _233 = (move _234, move _235);
        _236 = (_233.0: &bool);
        _237 = (_233.1: &bool);
        _240 = (*_236);
        _241 = (*_237);
        _239 = Eq(move _240, move _241);
        _238 = Not(move _239);
        switchInt(move _238) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _242 = core::panicking::AssertKind::Eq;
        _244 = Option::<Arguments<'_>>::None;
        _243 = assert_failed::<bool, bool>(move _242, _236, _237, move _244) -> unwind continue;
    }

    bb94: {
        _227 = _228;
        _226 = Not(move _227);
        _225 = Not(move _226);
        switchInt(move _225) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _245 = panic(const "assertion failed: !yes!(- 5, .. - 5)") -> unwind continue;
    }

    bb96: {
        _249 = const '\0';
        _250 = Le(const '\0', _249);
        switchInt(move _250) -> [0: bb98, otherwise: bb97];
    }

    bb97: {
        _251 = Lt(_249, const '\u{1}');
        _248 = _251;
        goto -> bb99;
    }

    bb98: {
        _248 = const false;
        goto -> bb99;
    }

    bb99: {
        _537 = const _;
        _536 = const _;
        _252 = RangeTo::<char>::contains::<char>(_537, _536) -> [return: bb100, unwind continue];
    }

    bb100: {
        _254 = &_248;
        _255 = &_252;
        _253 = (move _254, move _255);
        _256 = (_253.0: &bool);
        _257 = (_253.1: &bool);
        _260 = (*_256);
        _261 = (*_257);
        _259 = Eq(move _260, move _261);
        _258 = Not(move _259);
        switchInt(move _258) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _262 = core::panicking::AssertKind::Eq;
        _264 = Option::<Arguments<'_>>::None;
        _263 = assert_failed::<bool, bool>(move _262, _256, _257, move _264) -> unwind continue;
    }

    bb102: {
        _247 = _248;
        _246 = Not(move _247);
        switchInt(move _246) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _265 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', .. \\'\\\\u{1}\\')") -> unwind continue;
    }

    bb104: {
        _269 = const '\0';
        _270 = Le(const '\0', _269);
        switchInt(move _270) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _271 = Lt(_269, const 'a');
        _268 = _271;
        goto -> bb107;
    }

    bb106: {
        _268 = const false;
        goto -> bb107;
    }

    bb107: {
        _535 = const _;
        _534 = const _;
        _272 = RangeTo::<char>::contains::<char>(_535, _534) -> [return: bb108, unwind continue];
    }

    bb108: {
        _274 = &_268;
        _275 = &_272;
        _273 = (move _274, move _275);
        _276 = (_273.0: &bool);
        _277 = (_273.1: &bool);
        _280 = (*_276);
        _281 = (*_277);
        _279 = Eq(move _280, move _281);
        _278 = Not(move _279);
        switchInt(move _278) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _282 = core::panicking::AssertKind::Eq;
        _284 = Option::<Arguments<'_>>::None;
        _283 = assert_failed::<bool, bool>(move _282, _276, _277, move _284) -> unwind continue;
    }

    bb110: {
        _267 = _268;
        _266 = Not(move _267);
        switchInt(move _266) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _285 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', .. \\'a\\')") -> unwind continue;
    }

    bb112: {
        _289 = const 'a';
        _290 = Le(const '\0', _289);
        switchInt(move _290) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _291 = Lt(_289, const 'b');
        _288 = _291;
        goto -> bb115;
    }

    bb114: {
        _288 = const false;
        goto -> bb115;
    }

    bb115: {
        _533 = const _;
        _532 = const _;
        _292 = RangeTo::<char>::contains::<char>(_533, _532) -> [return: bb116, unwind continue];
    }

    bb116: {
        _294 = &_288;
        _295 = &_292;
        _293 = (move _294, move _295);
        _296 = (_293.0: &bool);
        _297 = (_293.1: &bool);
        _300 = (*_296);
        _301 = (*_297);
        _299 = Eq(move _300, move _301);
        _298 = Not(move _299);
        switchInt(move _298) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _302 = core::panicking::AssertKind::Eq;
        _304 = Option::<Arguments<'_>>::None;
        _303 = assert_failed::<bool, bool>(move _302, _296, _297, move _304) -> unwind continue;
    }

    bb118: {
        _287 = _288;
        _286 = Not(move _287);
        switchInt(move _286) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _305 = panic(const "assertion failed: yes!(\\'a\\', .. \\'b\\')") -> unwind continue;
    }

    bb120: {
        _310 = const 'a';
        _311 = Le(const '\0', _310);
        switchInt(move _311) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _312 = Lt(_310, const 'a');
        _309 = _312;
        goto -> bb123;
    }

    bb122: {
        _309 = const false;
        goto -> bb123;
    }

    bb123: {
        _531 = const _;
        _530 = const _;
        _313 = RangeTo::<char>::contains::<char>(_531, _530) -> [return: bb124, unwind continue];
    }

    bb124: {
        _315 = &_309;
        _316 = &_313;
        _314 = (move _315, move _316);
        _317 = (_314.0: &bool);
        _318 = (_314.1: &bool);
        _321 = (*_317);
        _322 = (*_318);
        _320 = Eq(move _321, move _322);
        _319 = Not(move _320);
        switchInt(move _319) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _323 = core::panicking::AssertKind::Eq;
        _325 = Option::<Arguments<'_>>::None;
        _324 = assert_failed::<bool, bool>(move _323, _317, _318, move _325) -> unwind continue;
    }

    bb126: {
        _308 = _309;
        _307 = Not(move _308);
        _306 = Not(move _307);
        switchInt(move _306) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _326 = panic(const "assertion failed: !yes!(\\'a\\', .. \\'a\\')") -> unwind continue;
    }

    bb128: {
        _331 = const 'b';
        _332 = Le(const '\0', _331);
        switchInt(move _332) -> [0: bb130, otherwise: bb129];
    }

    bb129: {
        _333 = Lt(_331, const 'a');
        _330 = _333;
        goto -> bb131;
    }

    bb130: {
        _330 = const false;
        goto -> bb131;
    }

    bb131: {
        _529 = const _;
        _528 = const _;
        _334 = RangeTo::<char>::contains::<char>(_529, _528) -> [return: bb132, unwind continue];
    }

    bb132: {
        _336 = &_330;
        _337 = &_334;
        _335 = (move _336, move _337);
        _338 = (_335.0: &bool);
        _339 = (_335.1: &bool);
        _342 = (*_338);
        _343 = (*_339);
        _341 = Eq(move _342, move _343);
        _340 = Not(move _341);
        switchInt(move _340) -> [0: bb134, otherwise: bb133];
    }

    bb133: {
        _344 = core::panicking::AssertKind::Eq;
        _346 = Option::<Arguments<'_>>::None;
        _345 = assert_failed::<bool, bool>(move _344, _338, _339, move _346) -> unwind continue;
    }

    bb134: {
        _329 = _330;
        _328 = Not(move _329);
        _327 = Not(move _328);
        switchInt(move _327) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _347 = panic(const "assertion failed: !yes!(\\'b\\', .. \\'a\\')") -> unwind continue;
    }

    bb136: {
        _351 = const _;
        _352 = Le(const -Inff32, _351);
        switchInt(move _352) -> [0: bb138, otherwise: bb137];
    }

    bb137: {
        _353 = Lt(_351, const 1f32);
        _350 = _353;
        goto -> bb139;
    }

    bb138: {
        _350 = const false;
        goto -> bb139;
    }

    bb139: {
        _527 = const _;
        _526 = const _;
        _354 = RangeTo::<f32>::contains::<f32>(_527, _526) -> [return: bb140, unwind continue];
    }

    bb140: {
        _356 = &_350;
        _357 = &_354;
        _355 = (move _356, move _357);
        _358 = (_355.0: &bool);
        _359 = (_355.1: &bool);
        _362 = (*_358);
        _363 = (*_359);
        _361 = Eq(move _362, move _363);
        _360 = Not(move _361);
        switchInt(move _360) -> [0: bb142, otherwise: bb141];
    }

    bb141: {
        _364 = core::panicking::AssertKind::Eq;
        _366 = Option::<Arguments<'_>>::None;
        _365 = assert_failed::<bool, bool>(move _364, _358, _359, move _366) -> unwind continue;
    }

    bb142: {
        _349 = _350;
        _348 = Not(move _349);
        switchInt(move _348) -> [0: bb144, otherwise: bb143];
    }

    bb143: {
        _367 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, .. 1.0f32)") -> unwind continue;
    }

    bb144: {
        _372 = const 1.5f32;
        _373 = Le(const -Inff32, _372);
        switchInt(move _373) -> [0: bb146, otherwise: bb145];
    }

    bb145: {
        _374 = Lt(_372, const 1.5f32);
        _371 = _374;
        goto -> bb147;
    }

    bb146: {
        _371 = const false;
        goto -> bb147;
    }

    bb147: {
        _525 = const _;
        _524 = const _;
        _375 = RangeTo::<f32>::contains::<f32>(_525, _524) -> [return: bb148, unwind continue];
    }

    bb148: {
        _377 = &_371;
        _378 = &_375;
        _376 = (move _377, move _378);
        _379 = (_376.0: &bool);
        _380 = (_376.1: &bool);
        _383 = (*_379);
        _384 = (*_380);
        _382 = Eq(move _383, move _384);
        _381 = Not(move _382);
        switchInt(move _381) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _385 = core::panicking::AssertKind::Eq;
        _387 = Option::<Arguments<'_>>::None;
        _386 = assert_failed::<bool, bool>(move _385, _379, _380, move _387) -> unwind continue;
    }

    bb150: {
        _370 = _371;
        _369 = Not(move _370);
        _368 = Not(move _369);
        switchInt(move _368) -> [0: bb152, otherwise: bb151];
    }

    bb151: {
        _388 = panic(const "assertion failed: !yes!(1.5f32, .. 1.5f32)") -> unwind continue;
    }

    bb152: {
        _392 = const 1.5f32;
        _393 = Le(const -Inff32, _392);
        switchInt(move _393) -> [0: bb154, otherwise: bb153];
    }

    bb153: {
        _394 = Lt(_392, const 1.50000012f32);
        _391 = _394;
        goto -> bb155;
    }

    bb154: {
        _391 = const false;
        goto -> bb155;
    }

    bb155: {
        _523 = const _;
        _522 = const _;
        _395 = RangeTo::<f32>::contains::<f32>(_523, _522) -> [return: bb156, unwind continue];
    }

    bb156: {
        _397 = &_391;
        _398 = &_395;
        _396 = (move _397, move _398);
        _399 = (_396.0: &bool);
        _400 = (_396.1: &bool);
        _403 = (*_399);
        _404 = (*_400);
        _402 = Eq(move _403, move _404);
        _401 = Not(move _402);
        switchInt(move _401) -> [0: bb158, otherwise: bb157];
    }

    bb157: {
        _405 = core::panicking::AssertKind::Eq;
        _407 = Option::<Arguments<'_>>::None;
        _406 = assert_failed::<bool, bool>(move _405, _399, _400, move _407) -> unwind continue;
    }

    bb158: {
        _390 = _391;
        _389 = Not(move _390);
        switchInt(move _389) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        _408 = panic(const "assertion failed: yes!(1.5f32, .. E32)") -> unwind continue;
    }

    bb160: {
        _413 = const 1.60000002f32;
        _414 = Le(const -Inff32, _413);
        switchInt(move _414) -> [0: bb162, otherwise: bb161];
    }

    bb161: {
        _415 = Lt(_413, const 1.5f32);
        _412 = _415;
        goto -> bb163;
    }

    bb162: {
        _412 = const false;
        goto -> bb163;
    }

    bb163: {
        _521 = const _;
        _520 = const _;
        _416 = RangeTo::<f32>::contains::<f32>(_521, _520) -> [return: bb164, unwind continue];
    }

    bb164: {
        _418 = &_412;
        _419 = &_416;
        _417 = (move _418, move _419);
        _420 = (_417.0: &bool);
        _421 = (_417.1: &bool);
        _424 = (*_420);
        _425 = (*_421);
        _423 = Eq(move _424, move _425);
        _422 = Not(move _423);
        switchInt(move _422) -> [0: bb166, otherwise: bb165];
    }

    bb165: {
        _426 = core::panicking::AssertKind::Eq;
        _428 = Option::<Arguments<'_>>::None;
        _427 = assert_failed::<bool, bool>(move _426, _420, _421, move _428) -> unwind continue;
    }

    bb166: {
        _411 = _412;
        _410 = Not(move _411);
        _409 = Not(move _410);
        switchInt(move _409) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _429 = panic(const "assertion failed: !yes!(1.6f32, .. 1.5f32)") -> unwind continue;
    }

    bb168: {
        _433 = const _;
        _434 = Le(const -Inff64, _433);
        switchInt(move _434) -> [0: bb170, otherwise: bb169];
    }

    bb169: {
        _435 = Lt(_433, const 1f64);
        _432 = _435;
        goto -> bb171;
    }

    bb170: {
        _432 = const false;
        goto -> bb171;
    }

    bb171: {
        _519 = const _;
        _518 = const _;
        _436 = RangeTo::<f64>::contains::<f64>(_519, _518) -> [return: bb172, unwind continue];
    }

    bb172: {
        _438 = &_432;
        _439 = &_436;
        _437 = (move _438, move _439);
        _440 = (_437.0: &bool);
        _441 = (_437.1: &bool);
        _444 = (*_440);
        _445 = (*_441);
        _443 = Eq(move _444, move _445);
        _442 = Not(move _443);
        switchInt(move _442) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        _446 = core::panicking::AssertKind::Eq;
        _448 = Option::<Arguments<'_>>::None;
        _447 = assert_failed::<bool, bool>(move _446, _440, _441, move _448) -> unwind continue;
    }

    bb174: {
        _431 = _432;
        _430 = Not(move _431);
        switchInt(move _430) -> [0: bb176, otherwise: bb175];
    }

    bb175: {
        _449 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, .. 1.0f64)") -> unwind continue;
    }

    bb176: {
        _454 = const 1.5f64;
        _455 = Le(const -Inff64, _454);
        switchInt(move _455) -> [0: bb178, otherwise: bb177];
    }

    bb177: {
        _456 = Lt(_454, const 1.5f64);
        _453 = _456;
        goto -> bb179;
    }

    bb178: {
        _453 = const false;
        goto -> bb179;
    }

    bb179: {
        _517 = const _;
        _516 = const _;
        _457 = RangeTo::<f64>::contains::<f64>(_517, _516) -> [return: bb180, unwind continue];
    }

    bb180: {
        _459 = &_453;
        _460 = &_457;
        _458 = (move _459, move _460);
        _461 = (_458.0: &bool);
        _462 = (_458.1: &bool);
        _465 = (*_461);
        _466 = (*_462);
        _464 = Eq(move _465, move _466);
        _463 = Not(move _464);
        switchInt(move _463) -> [0: bb182, otherwise: bb181];
    }

    bb181: {
        _467 = core::panicking::AssertKind::Eq;
        _469 = Option::<Arguments<'_>>::None;
        _468 = assert_failed::<bool, bool>(move _467, _461, _462, move _469) -> unwind continue;
    }

    bb182: {
        _452 = _453;
        _451 = Not(move _452);
        _450 = Not(move _451);
        switchInt(move _450) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        _470 = panic(const "assertion failed: !yes!(1.5f64, .. 1.5f64)") -> unwind continue;
    }

    bb184: {
        _474 = const 1.5f64;
        _475 = Le(const -Inff64, _474);
        switchInt(move _475) -> [0: bb186, otherwise: bb185];
    }

    bb185: {
        _476 = Lt(_474, const 1.5000000000000002f64);
        _473 = _476;
        goto -> bb187;
    }

    bb186: {
        _473 = const false;
        goto -> bb187;
    }

    bb187: {
        _515 = const _;
        _514 = const _;
        _477 = RangeTo::<f64>::contains::<f64>(_515, _514) -> [return: bb188, unwind continue];
    }

    bb188: {
        _479 = &_473;
        _480 = &_477;
        _478 = (move _479, move _480);
        _481 = (_478.0: &bool);
        _482 = (_478.1: &bool);
        _485 = (*_481);
        _486 = (*_482);
        _484 = Eq(move _485, move _486);
        _483 = Not(move _484);
        switchInt(move _483) -> [0: bb190, otherwise: bb189];
    }

    bb189: {
        _487 = core::panicking::AssertKind::Eq;
        _489 = Option::<Arguments<'_>>::None;
        _488 = assert_failed::<bool, bool>(move _487, _481, _482, move _489) -> unwind continue;
    }

    bb190: {
        _472 = _473;
        _471 = Not(move _472);
        switchInt(move _471) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _490 = panic(const "assertion failed: yes!(1.5f64, .. E64)") -> unwind continue;
    }

    bb192: {
        _495 = const 1.6000000000000001f64;
        _496 = Le(const -Inff64, _495);
        switchInt(move _496) -> [0: bb194, otherwise: bb193];
    }

    bb193: {
        _497 = Lt(_495, const 1.5f64);
        _494 = _497;
        goto -> bb195;
    }

    bb194: {
        _494 = const false;
        goto -> bb195;
    }

    bb195: {
        _513 = const _;
        _512 = const _;
        _498 = RangeTo::<f64>::contains::<f64>(_513, _512) -> [return: bb196, unwind continue];
    }

    bb196: {
        _500 = &_494;
        _501 = &_498;
        _499 = (move _500, move _501);
        _502 = (_499.0: &bool);
        _503 = (_499.1: &bool);
        _506 = (*_502);
        _507 = (*_503);
        _505 = Eq(move _506, move _507);
        _504 = Not(move _505);
        switchInt(move _504) -> [0: bb198, otherwise: bb197];
    }

    bb197: {
        _508 = core::panicking::AssertKind::Eq;
        _510 = Option::<Arguments<'_>>::None;
        _509 = assert_failed::<bool, bool>(move _508, _502, _503, move _510) -> unwind continue;
    }

    bb198: {
        _493 = _494;
        _492 = Not(move _493);
        _491 = Not(move _492);
        switchInt(move _491) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        _511 = panic(const "assertion failed: !yes!(1.6f64, .. 1.5f64)") -> unwind continue;
    }

    bb200: {
        return;
    }
}

promoted[0] in range_to: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1.6000000000000001f64;
        _0 = &_1;
        return;
    }
}

promoted[1] in range_to: &RangeTo<f64> = {
    let mut _0: &std::ops::RangeTo<f64>;
    let mut _1: std::ops::RangeTo<f64>;

    bb0: {
        _1 = RangeTo::<f64> { end: const 1.5f64 };
        _0 = &_1;
        return;
    }
}

promoted[2] in range_to: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1.5f64;
        _0 = &_1;
        return;
    }
}

promoted[3] in range_to: &RangeTo<f64> = {
    let mut _0: &std::ops::RangeTo<f64>;
    let mut _1: std::ops::RangeTo<f64>;

    bb0: {
        _1 = RangeTo::<f64> { end: const _ };
        _0 = &_1;
        return;
    }
}

promoted[4] in range_to: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1.5f64;
        _0 = &_1;
        return;
    }
}

promoted[5] in range_to: &RangeTo<f64> = {
    let mut _0: &std::ops::RangeTo<f64>;
    let mut _1: std::ops::RangeTo<f64>;

    bb0: {
        _1 = RangeTo::<f64> { end: const 1.5f64 };
        _0 = &_1;
        return;
    }
}

promoted[6] in range_to: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[7] in range_to: &RangeTo<f64> = {
    let mut _0: &std::ops::RangeTo<f64>;
    let mut _1: std::ops::RangeTo<f64>;

    bb0: {
        _1 = RangeTo::<f64> { end: const 1f64 };
        _0 = &_1;
        return;
    }
}

promoted[8] in range_to: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 1.60000002f32;
        _0 = &_1;
        return;
    }
}

promoted[9] in range_to: &RangeTo<f32> = {
    let mut _0: &std::ops::RangeTo<f32>;
    let mut _1: std::ops::RangeTo<f32>;

    bb0: {
        _1 = RangeTo::<f32> { end: const 1.5f32 };
        _0 = &_1;
        return;
    }
}

promoted[10] in range_to: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 1.5f32;
        _0 = &_1;
        return;
    }
}

promoted[11] in range_to: &RangeTo<f32> = {
    let mut _0: &std::ops::RangeTo<f32>;
    let mut _1: std::ops::RangeTo<f32>;

    bb0: {
        _1 = RangeTo::<f32> { end: const _ };
        _0 = &_1;
        return;
    }
}

promoted[12] in range_to: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 1.5f32;
        _0 = &_1;
        return;
    }
}

promoted[13] in range_to: &RangeTo<f32> = {
    let mut _0: &std::ops::RangeTo<f32>;
    let mut _1: std::ops::RangeTo<f32>;

    bb0: {
        _1 = RangeTo::<f32> { end: const 1.5f32 };
        _0 = &_1;
        return;
    }
}

promoted[14] in range_to: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[15] in range_to: &RangeTo<f32> = {
    let mut _0: &std::ops::RangeTo<f32>;
    let mut _1: std::ops::RangeTo<f32>;

    bb0: {
        _1 = RangeTo::<f32> { end: const 1f32 };
        _0 = &_1;
        return;
    }
}

promoted[16] in range_to: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'b';
        _0 = &_1;
        return;
    }
}

promoted[17] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>;
    let mut _1: std::ops::RangeTo<char>;

    bb0: {
        _1 = RangeTo::<char> { end: const 'a' };
        _0 = &_1;
        return;
    }
}

promoted[18] in range_to: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[19] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>;
    let mut _1: std::ops::RangeTo<char>;

    bb0: {
        _1 = RangeTo::<char> { end: const 'a' };
        _0 = &_1;
        return;
    }
}

promoted[20] in range_to: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[21] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>;
    let mut _1: std::ops::RangeTo<char>;

    bb0: {
        _1 = RangeTo::<char> { end: const 'b' };
        _0 = &_1;
        return;
    }
}

promoted[22] in range_to: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[23] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>;
    let mut _1: std::ops::RangeTo<char>;

    bb0: {
        _1 = RangeTo::<char> { end: const 'a' };
        _0 = &_1;
        return;
    }
}

promoted[24] in range_to: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[25] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>;
    let mut _1: std::ops::RangeTo<char>;

    bb0: {
        _1 = RangeTo::<char> { end: const '\u{1}' };
        _0 = &_1;
        return;
    }
}

promoted[26] in range_to: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -5_i32;
        _0 = &_1;
        return;
    }
}

promoted[27] in range_to: &RangeTo<i32> = {
    let mut _0: &std::ops::RangeTo<i32>;
    let mut _1: std::ops::RangeTo<i32>;

    bb0: {
        _1 = RangeTo::<i32> { end: const -5_i32 };
        _0 = &_1;
        return;
    }
}

promoted[28] in range_to: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -6_i32;
        _0 = &_1;
        return;
    }
}

promoted[29] in range_to: &RangeTo<i32> = {
    let mut _0: &std::ops::RangeTo<i32>;
    let mut _1: std::ops::RangeTo<i32>;

    bb0: {
        _1 = RangeTo::<i32> { end: const -5_i32 };
        _0 = &_1;
        return;
    }
}

promoted[30] in range_to: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[31] in range_to: &RangeTo<i16> = {
    let mut _0: &std::ops::RangeTo<i16>;
    let mut _1: std::ops::RangeTo<i16>;

    bb0: {
        _1 = RangeTo::<i16> { end: const 5_i16 };
        _0 = &_1;
        return;
    }
}

promoted[32] in range_to: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[33] in range_to: &RangeTo<i16> = {
    let mut _0: &std::ops::RangeTo<i16>;
    let mut _1: std::ops::RangeTo<i16>;

    bb0: {
        _1 = RangeTo::<i16> { end: const _ };
        _0 = &_1;
        return;
    }
}

promoted[34] in range_to: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 6_u8;
        _0 = &_1;
        return;
    }
}

promoted[35] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;
    let mut _1: std::ops::RangeTo<u8>;

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 };
        _0 = &_1;
        return;
    }
}

promoted[36] in range_to: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 5_u8;
        _0 = &_1;
        return;
    }
}

promoted[37] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;
    let mut _1: std::ops::RangeTo<u8>;

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 };
        _0 = &_1;
        return;
    }
}

promoted[38] in range_to: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[39] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;
    let mut _1: std::ops::RangeTo<u8>;

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 };
        _0 = &_1;
        return;
    }
}

promoted[40] in range_to: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[41] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;
    let mut _1: std::ops::RangeTo<u8>;

    bb0: {
        _1 = RangeTo::<u8> { end: const _ };
        _0 = &_1;
        return;
    }
}

promoted[42] in range_to: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 6_u8;
        _0 = &_1;
        return;
    }
}

promoted[43] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;
    let mut _1: std::ops::RangeTo<u8>;

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 };
        _0 = &_1;
        return;
    }
}

promoted[44] in range_to: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 5_u8;
        _0 = &_1;
        return;
    }
}

promoted[45] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;
    let mut _1: std::ops::RangeTo<u8>;

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 };
        _0 = &_1;
        return;
    }
}

promoted[46] in range_to: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[47] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;
    let mut _1: std::ops::RangeTo<u8>;

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 };
        _0 = &_1;
        return;
    }
}

promoted[48] in range_to: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[49] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;
    let mut _1: std::ops::RangeTo<u8>;

    bb0: {
        _1 = RangeTo::<u8> { end: const 1_u8 };
        _0 = &_1;
        return;
    }
}

const NU8: u8 = {
    let mut _0: u8;
    let mut _1: (u8, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_u8);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u8) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: u8);
        return;
    }
}

const range_to::NI16: i16 = {
    let mut _0: i16;
    let mut _1: (i16, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_i16);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i16) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: i16);
        return;
    }
}

const E32: f32 = {
    let mut _0: f32;

    bb0: {
        _0 = Add(const 1.5f32, const _);
        return;
    }
}

const E64: f64 = {
    let mut _0: f64;

    bb0: {
        _0 = Add(const 1.5f64, const _);
        return;
    }
}

fn range_from() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let _3: bool;
    let mut _5: (&bool, &bool);
    let mut _6: &bool;
    let mut _7: &bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: !;
    let mut _18: bool;
    let mut _19: bool;
    let _20: bool;
    let mut _22: (&bool, &bool);
    let mut _23: &bool;
    let mut _24: &bool;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: bool;
    let mut _30: bool;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: !;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let _38: bool;
    let mut _39: u8;
    let mut _40: bool;
    let mut _41: bool;
    let mut _43: (&bool, &bool);
    let mut _44: &bool;
    let mut _45: &bool;
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: bool;
    let mut _51: bool;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: !;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: bool;
    let _59: bool;
    let mut _60: i32;
    let mut _61: bool;
    let mut _62: bool;
    let mut _64: (&bool, &bool);
    let mut _65: &bool;
    let mut _66: &bool;
    let mut _69: bool;
    let mut _70: bool;
    let mut _71: bool;
    let mut _72: bool;
    let _74: !;
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _76: !;
    let mut _77: bool;
    let mut _78: bool;
    let _79: bool;
    let mut _80: i32;
    let mut _81: bool;
    let mut _82: bool;
    let mut _84: (&bool, &bool);
    let mut _85: &bool;
    let mut _86: &bool;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: bool;
    let mut _92: bool;
    let _94: !;
    let mut _95: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _96: !;
    let mut _97: bool;
    let mut _98: bool;
    let _99: bool;
    let mut _100: i32;
    let mut _101: bool;
    let mut _102: bool;
    let mut _104: (&bool, &bool);
    let mut _105: &bool;
    let mut _106: &bool;
    let mut _109: bool;
    let mut _110: bool;
    let mut _111: bool;
    let mut _112: bool;
    let _114: !;
    let mut _115: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _116: !;
    let mut _117: bool;
    let mut _118: bool;
    let _119: bool;
    let mut _120: u8;
    let mut _122: (&bool, &bool);
    let mut _123: &bool;
    let mut _124: &bool;
    let mut _127: bool;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: bool;
    let _132: !;
    let mut _133: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _134: !;
    let mut _135: bool;
    let mut _136: bool;
    let _137: bool;
    let mut _139: (&bool, &bool);
    let mut _140: &bool;
    let mut _141: &bool;
    let mut _144: bool;
    let mut _145: bool;
    let mut _146: bool;
    let mut _147: bool;
    let _149: !;
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _151: !;
    let mut _152: bool;
    let mut _153: bool;
    let _154: bool;
    let mut _156: (&bool, &bool);
    let mut _157: &bool;
    let mut _158: &bool;
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: bool;
    let mut _164: bool;
    let _166: !;
    let mut _167: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _168: !;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: bool;
    let _172: bool;
    let mut _173: i16;
    let mut _174: bool;
    let mut _175: bool;
    let mut _177: (&bool, &bool);
    let mut _178: &bool;
    let mut _179: &bool;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: bool;
    let mut _185: bool;
    let _187: !;
    let mut _188: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _189: !;
    let mut _190: bool;
    let mut _191: bool;
    let mut _192: bool;
    let _193: bool;
    let mut _194: i32;
    let mut _195: bool;
    let mut _196: bool;
    let mut _198: (&bool, &bool);
    let mut _199: &bool;
    let mut _200: &bool;
    let mut _203: bool;
    let mut _204: bool;
    let mut _205: bool;
    let mut _206: bool;
    let _208: !;
    let mut _209: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _210: !;
    let mut _211: bool;
    let mut _212: bool;
    let _213: bool;
    let mut _214: i32;
    let mut _215: bool;
    let mut _216: bool;
    let mut _218: (&bool, &bool);
    let mut _219: &bool;
    let mut _220: &bool;
    let mut _223: bool;
    let mut _224: bool;
    let mut _225: bool;
    let mut _226: bool;
    let _228: !;
    let mut _229: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _230: !;
    let mut _231: bool;
    let mut _232: bool;
    let _233: bool;
    let mut _234: i32;
    let mut _235: bool;
    let mut _236: bool;
    let mut _238: (&bool, &bool);
    let mut _239: &bool;
    let mut _240: &bool;
    let mut _243: bool;
    let mut _244: bool;
    let mut _245: bool;
    let mut _246: bool;
    let _248: !;
    let mut _249: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _250: !;
    let mut _251: bool;
    let mut _252: bool;
    let _253: bool;
    let mut _254: i16;
    let mut _256: (&bool, &bool);
    let mut _257: &bool;
    let mut _258: &bool;
    let mut _261: bool;
    let mut _262: bool;
    let mut _263: bool;
    let mut _264: bool;
    let _266: !;
    let mut _267: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _268: !;
    let mut _269: bool;
    let mut _270: bool;
    let _271: bool;
    let mut _273: (&bool, &bool);
    let mut _274: &bool;
    let mut _275: &bool;
    let mut _278: bool;
    let mut _279: bool;
    let mut _280: bool;
    let mut _281: bool;
    let _283: !;
    let mut _284: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _285: !;
    let mut _286: bool;
    let mut _287: bool;
    let _288: bool;
    let mut _290: (&bool, &bool);
    let mut _291: &bool;
    let mut _292: &bool;
    let mut _295: bool;
    let mut _296: bool;
    let mut _297: bool;
    let mut _298: bool;
    let _300: !;
    let mut _301: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _302: !;
    let mut _303: bool;
    let mut _304: bool;
    let _305: bool;
    let mut _306: char;
    let mut _307: bool;
    let mut _308: bool;
    let mut _310: (&bool, &bool);
    let mut _311: &bool;
    let mut _312: &bool;
    let mut _315: bool;
    let mut _316: bool;
    let mut _317: bool;
    let mut _318: bool;
    let _320: !;
    let mut _321: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _322: !;
    let mut _323: bool;
    let mut _324: bool;
    let _325: bool;
    let mut _326: char;
    let mut _327: bool;
    let mut _328: bool;
    let mut _330: (&bool, &bool);
    let mut _331: &bool;
    let mut _332: &bool;
    let mut _335: bool;
    let mut _336: bool;
    let mut _337: bool;
    let mut _338: bool;
    let _340: !;
    let mut _341: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _342: !;
    let mut _343: bool;
    let mut _344: bool;
    let mut _345: bool;
    let _346: bool;
    let mut _347: char;
    let mut _348: bool;
    let mut _349: bool;
    let mut _351: (&bool, &bool);
    let mut _352: &bool;
    let mut _353: &bool;
    let mut _356: bool;
    let mut _357: bool;
    let mut _358: bool;
    let mut _359: bool;
    let _361: !;
    let mut _362: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _363: !;
    let mut _364: bool;
    let mut _365: bool;
    let _366: bool;
    let mut _367: char;
    let mut _369: (&bool, &bool);
    let mut _370: &bool;
    let mut _371: &bool;
    let mut _374: bool;
    let mut _375: bool;
    let mut _376: bool;
    let mut _377: bool;
    let _379: !;
    let mut _380: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _381: !;
    let mut _382: bool;
    let mut _383: bool;
    let _384: bool;
    let mut _385: f32;
    let mut _386: bool;
    let mut _387: bool;
    let mut _389: (&bool, &bool);
    let mut _390: &bool;
    let mut _391: &bool;
    let mut _394: bool;
    let mut _395: bool;
    let mut _396: bool;
    let mut _397: bool;
    let _399: !;
    let mut _400: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _401: !;
    let mut _402: bool;
    let mut _403: bool;
    let _404: bool;
    let mut _405: f32;
    let mut _406: bool;
    let mut _407: bool;
    let mut _409: (&bool, &bool);
    let mut _410: &bool;
    let mut _411: &bool;
    let mut _414: bool;
    let mut _415: bool;
    let mut _416: bool;
    let mut _417: bool;
    let _419: !;
    let mut _420: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _421: !;
    let mut _422: bool;
    let mut _423: bool;
    let mut _424: bool;
    let _425: bool;
    let mut _426: f32;
    let mut _427: bool;
    let mut _428: bool;
    let mut _430: (&bool, &bool);
    let mut _431: &bool;
    let mut _432: &bool;
    let mut _435: bool;
    let mut _436: bool;
    let mut _437: bool;
    let mut _438: bool;
    let _440: !;
    let mut _441: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _442: !;
    let mut _443: bool;
    let mut _444: bool;
    let _445: bool;
    let mut _446: f32;
    let mut _447: bool;
    let mut _448: bool;
    let mut _450: (&bool, &bool);
    let mut _451: &bool;
    let mut _452: &bool;
    let mut _455: bool;
    let mut _456: bool;
    let mut _457: bool;
    let mut _458: bool;
    let _460: !;
    let mut _461: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _462: !;
    let mut _463: bool;
    let mut _464: bool;
    let mut _465: bool;
    let _466: bool;
    let mut _467: f32;
    let mut _468: bool;
    let mut _469: bool;
    let mut _471: (&bool, &bool);
    let mut _472: &bool;
    let mut _473: &bool;
    let mut _476: bool;
    let mut _477: bool;
    let mut _478: bool;
    let mut _479: bool;
    let _481: !;
    let mut _482: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _483: !;
    let mut _484: bool;
    let mut _485: bool;
    let _486: bool;
    let mut _487: f32;
    let mut _488: bool;
    let mut _489: bool;
    let mut _491: (&bool, &bool);
    let mut _492: &bool;
    let mut _493: &bool;
    let mut _496: bool;
    let mut _497: bool;
    let mut _498: bool;
    let mut _499: bool;
    let _501: !;
    let mut _502: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _503: !;
    let mut _504: bool;
    let mut _505: bool;
    let _506: bool;
    let mut _507: f32;
    let mut _508: bool;
    let mut _509: bool;
    let mut _511: (&bool, &bool);
    let mut _512: &bool;
    let mut _513: &bool;
    let mut _516: bool;
    let mut _517: bool;
    let mut _518: bool;
    let mut _519: bool;
    let _521: !;
    let mut _522: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _523: !;
    let mut _524: bool;
    let mut _525: bool;
    let _526: bool;
    let mut _527: f32;
    let mut _528: bool;
    let mut _530: (&bool, &bool);
    let mut _531: &bool;
    let mut _532: &bool;
    let mut _535: bool;
    let mut _536: bool;
    let mut _537: bool;
    let mut _538: bool;
    let _540: !;
    let mut _541: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _542: !;
    let mut _543: bool;
    let mut _544: bool;
    let _545: bool;
    let mut _546: f64;
    let mut _547: bool;
    let mut _548: bool;
    let mut _550: (&bool, &bool);
    let mut _551: &bool;
    let mut _552: &bool;
    let mut _555: bool;
    let mut _556: bool;
    let mut _557: bool;
    let mut _558: bool;
    let _560: !;
    let mut _561: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _562: !;
    let mut _563: bool;
    let mut _564: bool;
    let _565: bool;
    let mut _566: f64;
    let mut _567: bool;
    let mut _568: bool;
    let mut _570: (&bool, &bool);
    let mut _571: &bool;
    let mut _572: &bool;
    let mut _575: bool;
    let mut _576: bool;
    let mut _577: bool;
    let mut _578: bool;
    let _580: !;
    let mut _581: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _582: !;
    let mut _583: bool;
    let mut _584: bool;
    let mut _585: bool;
    let _586: bool;
    let mut _587: f64;
    let mut _588: bool;
    let mut _589: bool;
    let mut _591: (&bool, &bool);
    let mut _592: &bool;
    let mut _593: &bool;
    let mut _596: bool;
    let mut _597: bool;
    let mut _598: bool;
    let mut _599: bool;
    let _601: !;
    let mut _602: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _603: !;
    let mut _604: bool;
    let mut _605: bool;
    let _606: bool;
    let mut _607: f64;
    let mut _608: bool;
    let mut _609: bool;
    let mut _611: (&bool, &bool);
    let mut _612: &bool;
    let mut _613: &bool;
    let mut _616: bool;
    let mut _617: bool;
    let mut _618: bool;
    let mut _619: bool;
    let _621: !;
    let mut _622: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _623: !;
    let mut _624: bool;
    let mut _625: bool;
    let mut _626: bool;
    let _627: bool;
    let mut _628: f64;
    let mut _629: bool;
    let mut _630: bool;
    let mut _632: (&bool, &bool);
    let mut _633: &bool;
    let mut _634: &bool;
    let mut _637: bool;
    let mut _638: bool;
    let mut _639: bool;
    let mut _640: bool;
    let _642: !;
    let mut _643: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _644: !;
    let mut _645: bool;
    let mut _646: bool;
    let _647: bool;
    let mut _648: f64;
    let mut _649: bool;
    let mut _650: bool;
    let mut _652: (&bool, &bool);
    let mut _653: &bool;
    let mut _654: &bool;
    let mut _657: bool;
    let mut _658: bool;
    let mut _659: bool;
    let mut _660: bool;
    let _662: !;
    let mut _663: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _664: !;
    let mut _665: bool;
    let mut _666: bool;
    let _667: bool;
    let mut _668: f64;
    let mut _669: bool;
    let mut _670: bool;
    let mut _672: (&bool, &bool);
    let mut _673: &bool;
    let mut _674: &bool;
    let mut _677: bool;
    let mut _678: bool;
    let mut _679: bool;
    let mut _680: bool;
    let _682: !;
    let mut _683: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _684: !;
    let mut _685: bool;
    let mut _686: bool;
    let _687: bool;
    let mut _688: f64;
    let mut _689: bool;
    let mut _691: (&bool, &bool);
    let mut _692: &bool;
    let mut _693: &bool;
    let mut _696: bool;
    let mut _697: bool;
    let mut _698: bool;
    let mut _699: bool;
    let _701: !;
    let mut _702: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _703: !;
    scope 1 {
        debug m => const true;
        let _4: bool;
        let mut _774: &u8;
        let mut _775: &std::ops::RangeFrom<u8>;
        scope 2 {
            debug c => _4;
            let _8: &bool;
            let _9: &bool;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
        }
    }
    scope 5 {
        debug m => const true;
        let _21: bool;
        let mut _772: &u8;
        let mut _773: &std::ops::RangeFrom<u8>;
        scope 6 {
            debug c => _21;
            let _25: &bool;
            let _26: &bool;
            scope 7 {
                debug left_val => _25;
                debug right_val => _26;
                let _31: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _31;
                }
            }
        }
    }
    scope 9 {
        debug m => _38;
        let _42: bool;
        let mut _770: &u8;
        let mut _771: &std::ops::RangeFrom<u8>;
        scope 10 {
            debug c => _42;
            let _46: &bool;
            let _47: &bool;
            scope 11 {
                debug left_val => _46;
                debug right_val => _47;
                let _52: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _52;
                }
            }
        }
    }
    scope 13 {
        debug m => _59;
        let _63: bool;
        let mut _768: &i32;
        let mut _769: &std::ops::RangeFrom<i32>;
        scope 14 {
            debug c => _63;
            let _67: &bool;
            let _68: &bool;
            scope 15 {
                debug left_val => _67;
                debug right_val => _68;
                let _73: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _73;
                }
            }
        }
    }
    scope 17 {
        debug m => _79;
        let _83: bool;
        let mut _766: &i32;
        let mut _767: &std::ops::RangeFrom<i32>;
        scope 18 {
            debug c => _83;
            let _87: &bool;
            let _88: &bool;
            scope 19 {
                debug left_val => _87;
                debug right_val => _88;
                let _93: core::panicking::AssertKind;
                scope 20 {
                    debug kind => _93;
                }
            }
        }
    }
    scope 21 {
        debug m => _99;
        let _103: bool;
        let mut _764: &i32;
        let mut _765: &std::ops::RangeFrom<i32>;
        scope 22 {
            debug c => _103;
            let _107: &bool;
            let _108: &bool;
            scope 23 {
                debug left_val => _107;
                debug right_val => _108;
                let _113: core::panicking::AssertKind;
                scope 24 {
                    debug kind => _113;
                }
            }
        }
    }
    scope 25 {
        debug m => _119;
        let _121: bool;
        let mut _762: &u8;
        let mut _763: &std::ops::RangeFrom<u8>;
        scope 26 {
            debug c => _121;
            let _125: &bool;
            let _126: &bool;
            scope 27 {
                debug left_val => _125;
                debug right_val => _126;
                let _131: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _131;
                }
            }
        }
    }
    scope 29 {
        debug m => const true;
        let _138: bool;
        let mut _760: &i16;
        let mut _761: &std::ops::RangeFrom<i16>;
        scope 30 {
            debug c => _138;
            let _142: &bool;
            let _143: &bool;
            scope 31 {
                debug left_val => _142;
                debug right_val => _143;
                let _148: core::panicking::AssertKind;
                scope 32 {
                    debug kind => _148;
                }
            }
        }
    }
    scope 33 {
        debug m => const true;
        let _155: bool;
        let mut _758: &i16;
        let mut _759: &std::ops::RangeFrom<i16>;
        scope 34 {
            debug c => _155;
            let _159: &bool;
            let _160: &bool;
            scope 35 {
                debug left_val => _159;
                debug right_val => _160;
                let _165: core::panicking::AssertKind;
                scope 36 {
                    debug kind => _165;
                }
            }
        }
    }
    scope 37 {
        debug m => _172;
        let _176: bool;
        let mut _756: &i16;
        let mut _757: &std::ops::RangeFrom<i16>;
        scope 38 {
            debug c => _176;
            let _180: &bool;
            let _181: &bool;
            scope 39 {
                debug left_val => _180;
                debug right_val => _181;
                let _186: core::panicking::AssertKind;
                scope 40 {
                    debug kind => _186;
                }
            }
        }
    }
    scope 41 {
        debug m => _193;
        let _197: bool;
        let mut _754: &i32;
        let mut _755: &std::ops::RangeFrom<i32>;
        scope 42 {
            debug c => _197;
            let _201: &bool;
            let _202: &bool;
            scope 43 {
                debug left_val => _201;
                debug right_val => _202;
                let _207: core::panicking::AssertKind;
                scope 44 {
                    debug kind => _207;
                }
            }
        }
    }
    scope 45 {
        debug m => _213;
        let _217: bool;
        let mut _752: &i32;
        let mut _753: &std::ops::RangeFrom<i32>;
        scope 46 {
            debug c => _217;
            let _221: &bool;
            let _222: &bool;
            scope 47 {
                debug left_val => _221;
                debug right_val => _222;
                let _227: core::panicking::AssertKind;
                scope 48 {
                    debug kind => _227;
                }
            }
        }
    }
    scope 49 {
        debug m => _233;
        let _237: bool;
        let mut _750: &i32;
        let mut _751: &std::ops::RangeFrom<i32>;
        scope 50 {
            debug c => _237;
            let _241: &bool;
            let _242: &bool;
            scope 51 {
                debug left_val => _241;
                debug right_val => _242;
                let _247: core::panicking::AssertKind;
                scope 52 {
                    debug kind => _247;
                }
            }
        }
    }
    scope 53 {
        debug m => _253;
        let _255: bool;
        let mut _748: &i16;
        let mut _749: &std::ops::RangeFrom<i16>;
        scope 54 {
            debug c => _255;
            let _259: &bool;
            let _260: &bool;
            scope 55 {
                debug left_val => _259;
                debug right_val => _260;
                let _265: core::panicking::AssertKind;
                scope 56 {
                    debug kind => _265;
                }
            }
        }
    }
    scope 57 {
        debug m => const true;
        let _272: bool;
        let mut _746: &char;
        let mut _747: &std::ops::RangeFrom<char>;
        scope 58 {
            debug c => _272;
            let _276: &bool;
            let _277: &bool;
            scope 59 {
                debug left_val => _276;
                debug right_val => _277;
                let _282: core::panicking::AssertKind;
                scope 60 {
                    debug kind => _282;
                }
            }
        }
    }
    scope 61 {
        debug m => const true;
        let _289: bool;
        let mut _744: &char;
        let mut _745: &std::ops::RangeFrom<char>;
        scope 62 {
            debug c => _289;
            let _293: &bool;
            let _294: &bool;
            scope 63 {
                debug left_val => _293;
                debug right_val => _294;
                let _299: core::panicking::AssertKind;
                scope 64 {
                    debug kind => _299;
                }
            }
        }
    }
    scope 65 {
        debug m => _305;
        let _309: bool;
        let mut _742: &char;
        let mut _743: &std::ops::RangeFrom<char>;
        scope 66 {
            debug c => _309;
            let _313: &bool;
            let _314: &bool;
            scope 67 {
                debug left_val => _313;
                debug right_val => _314;
                let _319: core::panicking::AssertKind;
                scope 68 {
                    debug kind => _319;
                }
            }
        }
    }
    scope 69 {
        debug m => _325;
        let _329: bool;
        let mut _740: &char;
        let mut _741: &std::ops::RangeFrom<char>;
        scope 70 {
            debug c => _329;
            let _333: &bool;
            let _334: &bool;
            scope 71 {
                debug left_val => _333;
                debug right_val => _334;
                let _339: core::panicking::AssertKind;
                scope 72 {
                    debug kind => _339;
                }
            }
        }
    }
    scope 73 {
        debug m => _346;
        let _350: bool;
        let mut _738: &char;
        let mut _739: &std::ops::RangeFrom<char>;
        scope 74 {
            debug c => _350;
            let _354: &bool;
            let _355: &bool;
            scope 75 {
                debug left_val => _354;
                debug right_val => _355;
                let _360: core::panicking::AssertKind;
                scope 76 {
                    debug kind => _360;
                }
            }
        }
    }
    scope 77 {
        debug m => _366;
        let _368: bool;
        let mut _736: &char;
        let mut _737: &std::ops::RangeFrom<char>;
        scope 78 {
            debug c => _368;
            let _372: &bool;
            let _373: &bool;
            scope 79 {
                debug left_val => _372;
                debug right_val => _373;
                let _378: core::panicking::AssertKind;
                scope 80 {
                    debug kind => _378;
                }
            }
        }
    }
    scope 81 {
        debug m => _384;
        let _388: bool;
        let mut _734: &f32;
        let mut _735: &std::ops::RangeFrom<f32>;
        scope 82 {
            debug c => _388;
            let _392: &bool;
            let _393: &bool;
            scope 83 {
                debug left_val => _392;
                debug right_val => _393;
                let _398: core::panicking::AssertKind;
                scope 84 {
                    debug kind => _398;
                }
            }
        }
    }
    scope 85 {
        debug m => _404;
        let _408: bool;
        let mut _732: &f32;
        let mut _733: &std::ops::RangeFrom<f32>;
        scope 86 {
            debug c => _408;
            let _412: &bool;
            let _413: &bool;
            scope 87 {
                debug left_val => _412;
                debug right_val => _413;
                let _418: core::panicking::AssertKind;
                scope 88 {
                    debug kind => _418;
                }
            }
        }
    }
    scope 89 {
        debug m => _425;
        let _429: bool;
        let mut _730: &f32;
        let mut _731: &std::ops::RangeFrom<f32>;
        scope 90 {
            debug c => _429;
            let _433: &bool;
            let _434: &bool;
            scope 91 {
                debug left_val => _433;
                debug right_val => _434;
                let _439: core::panicking::AssertKind;
                scope 92 {
                    debug kind => _439;
                }
            }
        }
    }
    scope 93 {
        debug m => _445;
        let _449: bool;
        let mut _728: &f32;
        let mut _729: &std::ops::RangeFrom<f32>;
        scope 94 {
            debug c => _449;
            let _453: &bool;
            let _454: &bool;
            scope 95 {
                debug left_val => _453;
                debug right_val => _454;
                let _459: core::panicking::AssertKind;
                scope 96 {
                    debug kind => _459;
                }
            }
        }
    }
    scope 97 {
        debug m => _466;
        let _470: bool;
        let mut _726: &f32;
        let mut _727: &std::ops::RangeFrom<f32>;
        scope 98 {
            debug c => _470;
            let _474: &bool;
            let _475: &bool;
            scope 99 {
                debug left_val => _474;
                debug right_val => _475;
                let _480: core::panicking::AssertKind;
                scope 100 {
                    debug kind => _480;
                }
            }
        }
    }
    scope 101 {
        debug m => _486;
        let _490: bool;
        let mut _724: &f32;
        let mut _725: &std::ops::RangeFrom<f32>;
        scope 102 {
            debug c => _490;
            let _494: &bool;
            let _495: &bool;
            scope 103 {
                debug left_val => _494;
                debug right_val => _495;
                let _500: core::panicking::AssertKind;
                scope 104 {
                    debug kind => _500;
                }
            }
        }
    }
    scope 105 {
        debug m => _506;
        let _510: bool;
        let mut _722: &f32;
        let mut _723: &std::ops::RangeFrom<f32>;
        scope 106 {
            debug c => _510;
            let _514: &bool;
            let _515: &bool;
            scope 107 {
                debug left_val => _514;
                debug right_val => _515;
                let _520: core::panicking::AssertKind;
                scope 108 {
                    debug kind => _520;
                }
            }
        }
    }
    scope 109 {
        debug m => _526;
        let _529: bool;
        let mut _720: &f32;
        let mut _721: &std::ops::RangeFrom<f32>;
        scope 110 {
            debug c => _529;
            let _533: &bool;
            let _534: &bool;
            scope 111 {
                debug left_val => _533;
                debug right_val => _534;
                let _539: core::panicking::AssertKind;
                scope 112 {
                    debug kind => _539;
                }
            }
        }
    }
    scope 113 {
        debug m => _545;
        let _549: bool;
        let mut _718: &f64;
        let mut _719: &std::ops::RangeFrom<f64>;
        scope 114 {
            debug c => _549;
            let _553: &bool;
            let _554: &bool;
            scope 115 {
                debug left_val => _553;
                debug right_val => _554;
                let _559: core::panicking::AssertKind;
                scope 116 {
                    debug kind => _559;
                }
            }
        }
    }
    scope 117 {
        debug m => _565;
        let _569: bool;
        let mut _716: &f64;
        let mut _717: &std::ops::RangeFrom<f64>;
        scope 118 {
            debug c => _569;
            let _573: &bool;
            let _574: &bool;
            scope 119 {
                debug left_val => _573;
                debug right_val => _574;
                let _579: core::panicking::AssertKind;
                scope 120 {
                    debug kind => _579;
                }
            }
        }
    }
    scope 121 {
        debug m => _586;
        let _590: bool;
        let mut _714: &f64;
        let mut _715: &std::ops::RangeFrom<f64>;
        scope 122 {
            debug c => _590;
            let _594: &bool;
            let _595: &bool;
            scope 123 {
                debug left_val => _594;
                debug right_val => _595;
                let _600: core::panicking::AssertKind;
                scope 124 {
                    debug kind => _600;
                }
            }
        }
    }
    scope 125 {
        debug m => _606;
        let _610: bool;
        let mut _712: &f64;
        let mut _713: &std::ops::RangeFrom<f64>;
        scope 126 {
            debug c => _610;
            let _614: &bool;
            let _615: &bool;
            scope 127 {
                debug left_val => _614;
                debug right_val => _615;
                let _620: core::panicking::AssertKind;
                scope 128 {
                    debug kind => _620;
                }
            }
        }
    }
    scope 129 {
        debug m => _627;
        let _631: bool;
        let mut _710: &f64;
        let mut _711: &std::ops::RangeFrom<f64>;
        scope 130 {
            debug c => _631;
            let _635: &bool;
            let _636: &bool;
            scope 131 {
                debug left_val => _635;
                debug right_val => _636;
                let _641: core::panicking::AssertKind;
                scope 132 {
                    debug kind => _641;
                }
            }
        }
    }
    scope 133 {
        debug m => _647;
        let _651: bool;
        let mut _708: &f64;
        let mut _709: &std::ops::RangeFrom<f64>;
        scope 134 {
            debug c => _651;
            let _655: &bool;
            let _656: &bool;
            scope 135 {
                debug left_val => _655;
                debug right_val => _656;
                let _661: core::panicking::AssertKind;
                scope 136 {
                    debug kind => _661;
                }
            }
        }
    }
    scope 137 {
        debug m => _667;
        let _671: bool;
        let mut _706: &f64;
        let mut _707: &std::ops::RangeFrom<f64>;
        scope 138 {
            debug c => _671;
            let _675: &bool;
            let _676: &bool;
            scope 139 {
                debug left_val => _675;
                debug right_val => _676;
                let _681: core::panicking::AssertKind;
                scope 140 {
                    debug kind => _681;
                }
            }
        }
    }
    scope 141 {
        debug m => _687;
        let _690: bool;
        let mut _704: &f64;
        let mut _705: &std::ops::RangeFrom<f64>;
        scope 142 {
            debug c => _690;
            let _694: &bool;
            let _695: &bool;
            scope 143 {
                debug left_val => _694;
                debug right_val => _695;
                let _700: core::panicking::AssertKind;
                scope 144 {
                    debug kind => _700;
                }
            }
        }
    }

    bb0: {
        _3 = const true;
        _775 = const _;
        _774 = const _;
        _4 = RangeFrom::<u8>::contains::<u8>(_775, _774) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = &_3;
        _7 = &_4;
        _5 = (move _6, move _7);
        _8 = (_5.0: &bool);
        _9 = (_5.1: &bool);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = assert_failed::<bool, bool>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb3: {
        _2 = _3;
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _17 = panic(const "assertion failed: yes!(u8 :: MIN, u8 :: MIN ..)") -> unwind continue;
    }

    bb5: {
        _20 = const true;
        _773 = const _;
        _772 = const _;
        _21 = RangeFrom::<u8>::contains::<u8>(_773, _772) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = &_20;
        _24 = &_21;
        _22 = (move _23, move _24);
        _25 = (_22.0: &bool);
        _26 = (_22.1: &bool);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = assert_failed::<bool, bool>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb8: {
        _19 = _20;
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _34 = panic(const "assertion failed: yes!(u8 :: MAX, u8 :: MIN ..)") -> unwind continue;
    }

    bb10: {
        _39 = const _;
        _40 = Le(const 1_u8, _39);
        switchInt(move _40) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _41 = Le(_39, const u8::MAX);
        _38 = _41;
        goto -> bb13;
    }

    bb12: {
        _38 = const false;
        goto -> bb13;
    }

    bb13: {
        _771 = const _;
        _770 = const _;
        _42 = RangeFrom::<u8>::contains::<u8>(_771, _770) -> [return: bb14, unwind continue];
    }

    bb14: {
        _44 = &_38;
        _45 = &_42;
        _43 = (move _44, move _45);
        _46 = (_43.0: &bool);
        _47 = (_43.1: &bool);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = assert_failed::<bool, bool>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb16: {
        _37 = _38;
        _36 = Not(move _37);
        _35 = Not(move _36);
        switchInt(move _35) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _55 = panic(const "assertion failed: !yes!(u8 :: MIN, 1 ..)") -> unwind continue;
    }

    bb18: {
        _60 = const 4_i32;
        _61 = Le(const 5_i32, _60);
        switchInt(move _61) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _62 = Le(_60, const i32::MAX);
        _59 = _62;
        goto -> bb21;
    }

    bb20: {
        _59 = const false;
        goto -> bb21;
    }

    bb21: {
        _769 = const _;
        _768 = const _;
        _63 = RangeFrom::<i32>::contains::<i32>(_769, _768) -> [return: bb22, unwind continue];
    }

    bb22: {
        _65 = &_59;
        _66 = &_63;
        _64 = (move _65, move _66);
        _67 = (_64.0: &bool);
        _68 = (_64.1: &bool);
        _71 = (*_67);
        _72 = (*_68);
        _70 = Eq(move _71, move _72);
        _69 = Not(move _70);
        switchInt(move _69) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _73 = core::panicking::AssertKind::Eq;
        _75 = Option::<Arguments<'_>>::None;
        _74 = assert_failed::<bool, bool>(move _73, _67, _68, move _75) -> unwind continue;
    }

    bb24: {
        _58 = _59;
        _57 = Not(move _58);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _76 = panic(const "assertion failed: !yes!(4, 5 ..)") -> unwind continue;
    }

    bb26: {
        _80 = const 5_i32;
        _81 = Le(const 5_i32, _80);
        switchInt(move _81) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _82 = Le(_80, const i32::MAX);
        _79 = _82;
        goto -> bb29;
    }

    bb28: {
        _79 = const false;
        goto -> bb29;
    }

    bb29: {
        _767 = const _;
        _766 = const _;
        _83 = RangeFrom::<i32>::contains::<i32>(_767, _766) -> [return: bb30, unwind continue];
    }

    bb30: {
        _85 = &_79;
        _86 = &_83;
        _84 = (move _85, move _86);
        _87 = (_84.0: &bool);
        _88 = (_84.1: &bool);
        _91 = (*_87);
        _92 = (*_88);
        _90 = Eq(move _91, move _92);
        _89 = Not(move _90);
        switchInt(move _89) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _93 = core::panicking::AssertKind::Eq;
        _95 = Option::<Arguments<'_>>::None;
        _94 = assert_failed::<bool, bool>(move _93, _87, _88, move _95) -> unwind continue;
    }

    bb32: {
        _78 = _79;
        _77 = Not(move _78);
        switchInt(move _77) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _96 = panic(const "assertion failed: yes!(5, 5 ..)") -> unwind continue;
    }

    bb34: {
        _100 = const 6_i32;
        _101 = Le(const 5_i32, _100);
        switchInt(move _101) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _102 = Le(_100, const i32::MAX);
        _99 = _102;
        goto -> bb37;
    }

    bb36: {
        _99 = const false;
        goto -> bb37;
    }

    bb37: {
        _765 = const _;
        _764 = const _;
        _103 = RangeFrom::<i32>::contains::<i32>(_765, _764) -> [return: bb38, unwind continue];
    }

    bb38: {
        _105 = &_99;
        _106 = &_103;
        _104 = (move _105, move _106);
        _107 = (_104.0: &bool);
        _108 = (_104.1: &bool);
        _111 = (*_107);
        _112 = (*_108);
        _110 = Eq(move _111, move _112);
        _109 = Not(move _110);
        switchInt(move _109) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _113 = core::panicking::AssertKind::Eq;
        _115 = Option::<Arguments<'_>>::None;
        _114 = assert_failed::<bool, bool>(move _113, _107, _108, move _115) -> unwind continue;
    }

    bb40: {
        _98 = _99;
        _97 = Not(move _98);
        switchInt(move _97) -> [0: bb42, otherwise: bb41];
    }

    bb41: {
        _116 = panic(const "assertion failed: yes!(6, 5 ..)") -> unwind continue;
    }

    bb42: {
        _120 = const _;
        _119 = Eq(_120, const u8::MAX);
        _763 = const _;
        _762 = const _;
        _121 = RangeFrom::<u8>::contains::<u8>(_763, _762) -> [return: bb43, unwind continue];
    }

    bb43: {
        _123 = &_119;
        _124 = &_121;
        _122 = (move _123, move _124);
        _125 = (_122.0: &bool);
        _126 = (_122.1: &bool);
        _129 = (*_125);
        _130 = (*_126);
        _128 = Eq(move _129, move _130);
        _127 = Not(move _128);
        switchInt(move _127) -> [0: bb45, otherwise: bb44];
    }

    bb44: {
        _131 = core::panicking::AssertKind::Eq;
        _133 = Option::<Arguments<'_>>::None;
        _132 = assert_failed::<bool, bool>(move _131, _125, _126, move _133) -> unwind continue;
    }

    bb45: {
        _118 = _119;
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb47, otherwise: bb46];
    }

    bb46: {
        _134 = panic(const "assertion failed: yes!(u8 :: MAX, u8 :: MAX ..)") -> unwind continue;
    }

    bb47: {
        _137 = const true;
        _761 = const _;
        _760 = const _;
        _138 = RangeFrom::<i16>::contains::<i16>(_761, _760) -> [return: bb48, unwind continue];
    }

    bb48: {
        _140 = &_137;
        _141 = &_138;
        _139 = (move _140, move _141);
        _142 = (_139.0: &bool);
        _143 = (_139.1: &bool);
        _146 = (*_142);
        _147 = (*_143);
        _145 = Eq(move _146, move _147);
        _144 = Not(move _145);
        switchInt(move _144) -> [0: bb50, otherwise: bb49];
    }

    bb49: {
        _148 = core::panicking::AssertKind::Eq;
        _150 = Option::<Arguments<'_>>::None;
        _149 = assert_failed::<bool, bool>(move _148, _142, _143, move _150) -> unwind continue;
    }

    bb50: {
        _136 = _137;
        _135 = Not(move _136);
        switchInt(move _135) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _151 = panic(const "assertion failed: yes!(i16 :: MIN, i16 :: MIN ..)") -> unwind continue;
    }

    bb52: {
        _154 = const true;
        _759 = const _;
        _758 = const _;
        _155 = RangeFrom::<i16>::contains::<i16>(_759, _758) -> [return: bb53, unwind continue];
    }

    bb53: {
        _157 = &_154;
        _158 = &_155;
        _156 = (move _157, move _158);
        _159 = (_156.0: &bool);
        _160 = (_156.1: &bool);
        _163 = (*_159);
        _164 = (*_160);
        _162 = Eq(move _163, move _164);
        _161 = Not(move _162);
        switchInt(move _161) -> [0: bb55, otherwise: bb54];
    }

    bb54: {
        _165 = core::panicking::AssertKind::Eq;
        _167 = Option::<Arguments<'_>>::None;
        _166 = assert_failed::<bool, bool>(move _165, _159, _160, move _167) -> unwind continue;
    }

    bb55: {
        _153 = _154;
        _152 = Not(move _153);
        switchInt(move _152) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _168 = panic(const "assertion failed: yes!(i16 :: MAX, i16 :: MIN ..)") -> unwind continue;
    }

    bb57: {
        _173 = const _;
        _174 = Le(const -32767_i16, _173);
        switchInt(move _174) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _175 = Le(_173, const i16::MAX);
        _172 = _175;
        goto -> bb60;
    }

    bb59: {
        _172 = const false;
        goto -> bb60;
    }

    bb60: {
        _757 = const _;
        _756 = const _;
        _176 = RangeFrom::<i16>::contains::<i16>(_757, _756) -> [return: bb61, unwind continue];
    }

    bb61: {
        _178 = &_172;
        _179 = &_176;
        _177 = (move _178, move _179);
        _180 = (_177.0: &bool);
        _181 = (_177.1: &bool);
        _184 = (*_180);
        _185 = (*_181);
        _183 = Eq(move _184, move _185);
        _182 = Not(move _183);
        switchInt(move _182) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _186 = core::panicking::AssertKind::Eq;
        _188 = Option::<Arguments<'_>>::None;
        _187 = assert_failed::<bool, bool>(move _186, _180, _181, move _188) -> unwind continue;
    }

    bb63: {
        _171 = _172;
        _170 = Not(move _171);
        _169 = Not(move _170);
        switchInt(move _169) -> [0: bb65, otherwise: bb64];
    }

    bb64: {
        _189 = panic(const "assertion failed: !yes!(i16 :: MIN, NI16 ..)") -> unwind continue;
    }

    bb65: {
        _194 = const -4_i32;
        _195 = Le(const 5_i32, _194);
        switchInt(move _195) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _196 = Le(_194, const i32::MAX);
        _193 = _196;
        goto -> bb68;
    }

    bb67: {
        _193 = const false;
        goto -> bb68;
    }

    bb68: {
        _755 = const _;
        _754 = const _;
        _197 = RangeFrom::<i32>::contains::<i32>(_755, _754) -> [return: bb69, unwind continue];
    }

    bb69: {
        _199 = &_193;
        _200 = &_197;
        _198 = (move _199, move _200);
        _201 = (_198.0: &bool);
        _202 = (_198.1: &bool);
        _205 = (*_201);
        _206 = (*_202);
        _204 = Eq(move _205, move _206);
        _203 = Not(move _204);
        switchInt(move _203) -> [0: bb71, otherwise: bb70];
    }

    bb70: {
        _207 = core::panicking::AssertKind::Eq;
        _209 = Option::<Arguments<'_>>::None;
        _208 = assert_failed::<bool, bool>(move _207, _201, _202, move _209) -> unwind continue;
    }

    bb71: {
        _192 = _193;
        _191 = Not(move _192);
        _190 = Not(move _191);
        switchInt(move _190) -> [0: bb73, otherwise: bb72];
    }

    bb72: {
        _210 = panic(const "assertion failed: !yes!(- 4, 5 ..)") -> unwind continue;
    }

    bb73: {
        _214 = const -4_i32;
        _215 = Le(const -4_i32, _214);
        switchInt(move _215) -> [0: bb75, otherwise: bb74];
    }

    bb74: {
        _216 = Le(_214, const i32::MAX);
        _213 = _216;
        goto -> bb76;
    }

    bb75: {
        _213 = const false;
        goto -> bb76;
    }

    bb76: {
        _753 = const _;
        _752 = const _;
        _217 = RangeFrom::<i32>::contains::<i32>(_753, _752) -> [return: bb77, unwind continue];
    }

    bb77: {
        _219 = &_213;
        _220 = &_217;
        _218 = (move _219, move _220);
        _221 = (_218.0: &bool);
        _222 = (_218.1: &bool);
        _225 = (*_221);
        _226 = (*_222);
        _224 = Eq(move _225, move _226);
        _223 = Not(move _224);
        switchInt(move _223) -> [0: bb79, otherwise: bb78];
    }

    bb78: {
        _227 = core::panicking::AssertKind::Eq;
        _229 = Option::<Arguments<'_>>::None;
        _228 = assert_failed::<bool, bool>(move _227, _221, _222, move _229) -> unwind continue;
    }

    bb79: {
        _212 = _213;
        _211 = Not(move _212);
        switchInt(move _211) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _230 = panic(const "assertion failed: yes!(- 4, - 4 ..)") -> unwind continue;
    }

    bb81: {
        _234 = const -3_i32;
        _235 = Le(const -4_i32, _234);
        switchInt(move _235) -> [0: bb83, otherwise: bb82];
    }

    bb82: {
        _236 = Le(_234, const i32::MAX);
        _233 = _236;
        goto -> bb84;
    }

    bb83: {
        _233 = const false;
        goto -> bb84;
    }

    bb84: {
        _751 = const _;
        _750 = const _;
        _237 = RangeFrom::<i32>::contains::<i32>(_751, _750) -> [return: bb85, unwind continue];
    }

    bb85: {
        _239 = &_233;
        _240 = &_237;
        _238 = (move _239, move _240);
        _241 = (_238.0: &bool);
        _242 = (_238.1: &bool);
        _245 = (*_241);
        _246 = (*_242);
        _244 = Eq(move _245, move _246);
        _243 = Not(move _244);
        switchInt(move _243) -> [0: bb87, otherwise: bb86];
    }

    bb86: {
        _247 = core::panicking::AssertKind::Eq;
        _249 = Option::<Arguments<'_>>::None;
        _248 = assert_failed::<bool, bool>(move _247, _241, _242, move _249) -> unwind continue;
    }

    bb87: {
        _232 = _233;
        _231 = Not(move _232);
        switchInt(move _231) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        _250 = panic(const "assertion failed: yes!(- 3, - 4 ..)") -> unwind continue;
    }

    bb89: {
        _254 = const _;
        _253 = Eq(_254, const i16::MAX);
        _749 = const _;
        _748 = const _;
        _255 = RangeFrom::<i16>::contains::<i16>(_749, _748) -> [return: bb90, unwind continue];
    }

    bb90: {
        _257 = &_253;
        _258 = &_255;
        _256 = (move _257, move _258);
        _259 = (_256.0: &bool);
        _260 = (_256.1: &bool);
        _263 = (*_259);
        _264 = (*_260);
        _262 = Eq(move _263, move _264);
        _261 = Not(move _262);
        switchInt(move _261) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _265 = core::panicking::AssertKind::Eq;
        _267 = Option::<Arguments<'_>>::None;
        _266 = assert_failed::<bool, bool>(move _265, _259, _260, move _267) -> unwind continue;
    }

    bb92: {
        _252 = _253;
        _251 = Not(move _252);
        switchInt(move _251) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _268 = panic(const "assertion failed: yes!(i16 :: MAX, i16 :: MAX ..)") -> unwind continue;
    }

    bb94: {
        _271 = const true;
        _747 = const _;
        _746 = const _;
        _272 = RangeFrom::<char>::contains::<char>(_747, _746) -> [return: bb95, unwind continue];
    }

    bb95: {
        _274 = &_271;
        _275 = &_272;
        _273 = (move _274, move _275);
        _276 = (_273.0: &bool);
        _277 = (_273.1: &bool);
        _280 = (*_276);
        _281 = (*_277);
        _279 = Eq(move _280, move _281);
        _278 = Not(move _279);
        switchInt(move _278) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        _282 = core::panicking::AssertKind::Eq;
        _284 = Option::<Arguments<'_>>::None;
        _283 = assert_failed::<bool, bool>(move _282, _276, _277, move _284) -> unwind continue;
    }

    bb97: {
        _270 = _271;
        _269 = Not(move _270);
        switchInt(move _269) -> [0: bb99, otherwise: bb98];
    }

    bb98: {
        _285 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', \\'\\\\u{0}\\' ..)") -> unwind continue;
    }

    bb99: {
        _288 = const true;
        _745 = const _;
        _744 = const _;
        _289 = RangeFrom::<char>::contains::<char>(_745, _744) -> [return: bb100, unwind continue];
    }

    bb100: {
        _291 = &_288;
        _292 = &_289;
        _290 = (move _291, move _292);
        _293 = (_290.0: &bool);
        _294 = (_290.1: &bool);
        _297 = (*_293);
        _298 = (*_294);
        _296 = Eq(move _297, move _298);
        _295 = Not(move _296);
        switchInt(move _295) -> [0: bb102, otherwise: bb101];
    }

    bb101: {
        _299 = core::panicking::AssertKind::Eq;
        _301 = Option::<Arguments<'_>>::None;
        _300 = assert_failed::<bool, bool>(move _299, _293, _294, move _301) -> unwind continue;
    }

    bb102: {
        _287 = _288;
        _286 = Not(move _287);
        switchInt(move _286) -> [0: bb104, otherwise: bb103];
    }

    bb103: {
        _302 = panic(const "assertion failed: yes!(core :: char :: MAX, \\'\\\\u{0}\\' ..)") -> unwind continue;
    }

    bb104: {
        _306 = const 'a';
        _307 = Le(const 'a', _306);
        switchInt(move _307) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _308 = Le(_306, const '\u{10ffff}');
        _305 = _308;
        goto -> bb107;
    }

    bb106: {
        _305 = const false;
        goto -> bb107;
    }

    bb107: {
        _743 = const _;
        _742 = const _;
        _309 = RangeFrom::<char>::contains::<char>(_743, _742) -> [return: bb108, unwind continue];
    }

    bb108: {
        _311 = &_305;
        _312 = &_309;
        _310 = (move _311, move _312);
        _313 = (_310.0: &bool);
        _314 = (_310.1: &bool);
        _317 = (*_313);
        _318 = (*_314);
        _316 = Eq(move _317, move _318);
        _315 = Not(move _316);
        switchInt(move _315) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _319 = core::panicking::AssertKind::Eq;
        _321 = Option::<Arguments<'_>>::None;
        _320 = assert_failed::<bool, bool>(move _319, _313, _314, move _321) -> unwind continue;
    }

    bb110: {
        _304 = _305;
        _303 = Not(move _304);
        switchInt(move _303) -> [0: bb112, otherwise: bb111];
    }

    bb111: {
        _322 = panic(const "assertion failed: yes!(\\'a\\', \\'a\\' ..)") -> unwind continue;
    }

    bb112: {
        _326 = const 'b';
        _327 = Le(const 'a', _326);
        switchInt(move _327) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _328 = Le(_326, const '\u{10ffff}');
        _325 = _328;
        goto -> bb115;
    }

    bb114: {
        _325 = const false;
        goto -> bb115;
    }

    bb115: {
        _741 = const _;
        _740 = const _;
        _329 = RangeFrom::<char>::contains::<char>(_741, _740) -> [return: bb116, unwind continue];
    }

    bb116: {
        _331 = &_325;
        _332 = &_329;
        _330 = (move _331, move _332);
        _333 = (_330.0: &bool);
        _334 = (_330.1: &bool);
        _337 = (*_333);
        _338 = (*_334);
        _336 = Eq(move _337, move _338);
        _335 = Not(move _336);
        switchInt(move _335) -> [0: bb118, otherwise: bb117];
    }

    bb117: {
        _339 = core::panicking::AssertKind::Eq;
        _341 = Option::<Arguments<'_>>::None;
        _340 = assert_failed::<bool, bool>(move _339, _333, _334, move _341) -> unwind continue;
    }

    bb118: {
        _324 = _325;
        _323 = Not(move _324);
        switchInt(move _323) -> [0: bb120, otherwise: bb119];
    }

    bb119: {
        _342 = panic(const "assertion failed: yes!(\\'b\\', \\'a\\' ..)") -> unwind continue;
    }

    bb120: {
        _347 = const 'a';
        _348 = Le(const 'b', _347);
        switchInt(move _348) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _349 = Le(_347, const '\u{10ffff}');
        _346 = _349;
        goto -> bb123;
    }

    bb122: {
        _346 = const false;
        goto -> bb123;
    }

    bb123: {
        _739 = const _;
        _738 = const _;
        _350 = RangeFrom::<char>::contains::<char>(_739, _738) -> [return: bb124, unwind continue];
    }

    bb124: {
        _352 = &_346;
        _353 = &_350;
        _351 = (move _352, move _353);
        _354 = (_351.0: &bool);
        _355 = (_351.1: &bool);
        _358 = (*_354);
        _359 = (*_355);
        _357 = Eq(move _358, move _359);
        _356 = Not(move _357);
        switchInt(move _356) -> [0: bb126, otherwise: bb125];
    }

    bb125: {
        _360 = core::panicking::AssertKind::Eq;
        _362 = Option::<Arguments<'_>>::None;
        _361 = assert_failed::<bool, bool>(move _360, _354, _355, move _362) -> unwind continue;
    }

    bb126: {
        _345 = _346;
        _344 = Not(move _345);
        _343 = Not(move _344);
        switchInt(move _343) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _363 = panic(const "assertion failed: !yes!(\\'a\\', \\'b\\' ..)") -> unwind continue;
    }

    bb128: {
        _367 = const _;
        _366 = Eq(_367, const '\u{10ffff}');
        _737 = const _;
        _736 = const _;
        _368 = RangeFrom::<char>::contains::<char>(_737, _736) -> [return: bb129, unwind continue];
    }

    bb129: {
        _370 = &_366;
        _371 = &_368;
        _369 = (move _370, move _371);
        _372 = (_369.0: &bool);
        _373 = (_369.1: &bool);
        _376 = (*_372);
        _377 = (*_373);
        _375 = Eq(move _376, move _377);
        _374 = Not(move _375);
        switchInt(move _374) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _378 = core::panicking::AssertKind::Eq;
        _380 = Option::<Arguments<'_>>::None;
        _379 = assert_failed::<bool, bool>(move _378, _372, _373, move _380) -> unwind continue;
    }

    bb131: {
        _365 = _366;
        _364 = Not(move _365);
        switchInt(move _364) -> [0: bb133, otherwise: bb132];
    }

    bb132: {
        _381 = panic(const "assertion failed: yes!(core :: char :: MAX, core :: char :: MAX ..)") -> unwind continue;
    }

    bb133: {
        _385 = const _;
        _386 = Le(const -Inff32, _385);
        switchInt(move _386) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _387 = Le(_385, const +Inff32);
        _384 = _387;
        goto -> bb136;
    }

    bb135: {
        _384 = const false;
        goto -> bb136;
    }

    bb136: {
        _735 = const _;
        _734 = const _;
        _388 = RangeFrom::<f32>::contains::<f32>(_735, _734) -> [return: bb137, unwind continue];
    }

    bb137: {
        _390 = &_384;
        _391 = &_388;
        _389 = (move _390, move _391);
        _392 = (_389.0: &bool);
        _393 = (_389.1: &bool);
        _396 = (*_392);
        _397 = (*_393);
        _395 = Eq(move _396, move _397);
        _394 = Not(move _395);
        switchInt(move _394) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _398 = core::panicking::AssertKind::Eq;
        _400 = Option::<Arguments<'_>>::None;
        _399 = assert_failed::<bool, bool>(move _398, _392, _393, move _400) -> unwind continue;
    }

    bb139: {
        _383 = _384;
        _382 = Not(move _383);
        switchInt(move _382) -> [0: bb141, otherwise: bb140];
    }

    bb140: {
        _401 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, f32 :: NEG_INFINITY ..)") -> unwind continue;
    }

    bb141: {
        _405 = const _;
        _406 = Le(const -Inff32, _405);
        switchInt(move _406) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        _407 = Le(_405, const +Inff32);
        _404 = _407;
        goto -> bb144;
    }

    bb143: {
        _404 = const false;
        goto -> bb144;
    }

    bb144: {
        _733 = const _;
        _732 = const _;
        _408 = RangeFrom::<f32>::contains::<f32>(_733, _732) -> [return: bb145, unwind continue];
    }

    bb145: {
        _410 = &_404;
        _411 = &_408;
        _409 = (move _410, move _411);
        _412 = (_409.0: &bool);
        _413 = (_409.1: &bool);
        _416 = (*_412);
        _417 = (*_413);
        _415 = Eq(move _416, move _417);
        _414 = Not(move _415);
        switchInt(move _414) -> [0: bb147, otherwise: bb146];
    }

    bb146: {
        _418 = core::panicking::AssertKind::Eq;
        _420 = Option::<Arguments<'_>>::None;
        _419 = assert_failed::<bool, bool>(move _418, _412, _413, move _420) -> unwind continue;
    }

    bb147: {
        _403 = _404;
        _402 = Not(move _403);
        switchInt(move _402) -> [0: bb149, otherwise: bb148];
    }

    bb148: {
        _421 = panic(const "assertion failed: yes!(f32 :: INFINITY, f32 :: NEG_INFINITY ..)") -> unwind continue;
    }

    bb149: {
        _426 = const _;
        _427 = Le(const 1f32, _426);
        switchInt(move _427) -> [0: bb151, otherwise: bb150];
    }

    bb150: {
        _428 = Le(_426, const +Inff32);
        _425 = _428;
        goto -> bb152;
    }

    bb151: {
        _425 = const false;
        goto -> bb152;
    }

    bb152: {
        _731 = const _;
        _730 = const _;
        _429 = RangeFrom::<f32>::contains::<f32>(_731, _730) -> [return: bb153, unwind continue];
    }

    bb153: {
        _431 = &_425;
        _432 = &_429;
        _430 = (move _431, move _432);
        _433 = (_430.0: &bool);
        _434 = (_430.1: &bool);
        _437 = (*_433);
        _438 = (*_434);
        _436 = Eq(move _437, move _438);
        _435 = Not(move _436);
        switchInt(move _435) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _439 = core::panicking::AssertKind::Eq;
        _441 = Option::<Arguments<'_>>::None;
        _440 = assert_failed::<bool, bool>(move _439, _433, _434, move _441) -> unwind continue;
    }

    bb155: {
        _424 = _425;
        _423 = Not(move _424);
        _422 = Not(move _423);
        switchInt(move _422) -> [0: bb157, otherwise: bb156];
    }

    bb156: {
        _442 = panic(const "assertion failed: !yes!(f32 :: NEG_INFINITY, 1.0f32 ..)") -> unwind continue;
    }

    bb157: {
        _446 = const _;
        _447 = Le(const 1f32, _446);
        switchInt(move _447) -> [0: bb159, otherwise: bb158];
    }

    bb158: {
        _448 = Le(_446, const +Inff32);
        _445 = _448;
        goto -> bb160;
    }

    bb159: {
        _445 = const false;
        goto -> bb160;
    }

    bb160: {
        _729 = const _;
        _728 = const _;
        _449 = RangeFrom::<f32>::contains::<f32>(_729, _728) -> [return: bb161, unwind continue];
    }

    bb161: {
        _451 = &_445;
        _452 = &_449;
        _450 = (move _451, move _452);
        _453 = (_450.0: &bool);
        _454 = (_450.1: &bool);
        _457 = (*_453);
        _458 = (*_454);
        _456 = Eq(move _457, move _458);
        _455 = Not(move _456);
        switchInt(move _455) -> [0: bb163, otherwise: bb162];
    }

    bb162: {
        _459 = core::panicking::AssertKind::Eq;
        _461 = Option::<Arguments<'_>>::None;
        _460 = assert_failed::<bool, bool>(move _459, _453, _454, move _461) -> unwind continue;
    }

    bb163: {
        _444 = _445;
        _443 = Not(move _444);
        switchInt(move _443) -> [0: bb165, otherwise: bb164];
    }

    bb164: {
        _462 = panic(const "assertion failed: yes!(f32 :: INFINITY, 1.0f32 ..)") -> unwind continue;
    }

    bb165: {
        _467 = Sub(const 1f32, const _);
        _468 = Le(const 1f32, _467);
        switchInt(move _468) -> [0: bb167, otherwise: bb166];
    }

    bb166: {
        _469 = Le(_467, const +Inff32);
        _466 = _469;
        goto -> bb168;
    }

    bb167: {
        _466 = const false;
        goto -> bb168;
    }

    bb168: {
        _727 = const _;
        _726 = const _;
        _470 = RangeFrom::<f32>::contains::<f32>(_727, _726) -> [return: bb169, unwind continue];
    }

    bb169: {
        _472 = &_466;
        _473 = &_470;
        _471 = (move _472, move _473);
        _474 = (_471.0: &bool);
        _475 = (_471.1: &bool);
        _478 = (*_474);
        _479 = (*_475);
        _477 = Eq(move _478, move _479);
        _476 = Not(move _477);
        switchInt(move _476) -> [0: bb171, otherwise: bb170];
    }

    bb170: {
        _480 = core::panicking::AssertKind::Eq;
        _482 = Option::<Arguments<'_>>::None;
        _481 = assert_failed::<bool, bool>(move _480, _474, _475, move _482) -> unwind continue;
    }

    bb171: {
        _465 = _466;
        _464 = Not(move _465);
        _463 = Not(move _464);
        switchInt(move _463) -> [0: bb173, otherwise: bb172];
    }

    bb172: {
        _483 = panic(const "assertion failed: !yes!(1.0f32 - f32 :: EPSILON, 1.0f32 ..)") -> unwind continue;
    }

    bb173: {
        _487 = const 1f32;
        _488 = Le(const 1f32, _487);
        switchInt(move _488) -> [0: bb175, otherwise: bb174];
    }

    bb174: {
        _489 = Le(_487, const +Inff32);
        _486 = _489;
        goto -> bb176;
    }

    bb175: {
        _486 = const false;
        goto -> bb176;
    }

    bb176: {
        _725 = const _;
        _724 = const _;
        _490 = RangeFrom::<f32>::contains::<f32>(_725, _724) -> [return: bb177, unwind continue];
    }

    bb177: {
        _492 = &_486;
        _493 = &_490;
        _491 = (move _492, move _493);
        _494 = (_491.0: &bool);
        _495 = (_491.1: &bool);
        _498 = (*_494);
        _499 = (*_495);
        _497 = Eq(move _498, move _499);
        _496 = Not(move _497);
        switchInt(move _496) -> [0: bb179, otherwise: bb178];
    }

    bb178: {
        _500 = core::panicking::AssertKind::Eq;
        _502 = Option::<Arguments<'_>>::None;
        _501 = assert_failed::<bool, bool>(move _500, _494, _495, move _502) -> unwind continue;
    }

    bb179: {
        _485 = _486;
        _484 = Not(move _485);
        switchInt(move _484) -> [0: bb181, otherwise: bb180];
    }

    bb180: {
        _503 = panic(const "assertion failed: yes!(1.0f32, 1.0f32 ..)") -> unwind continue;
    }

    bb181: {
        _507 = const _;
        _508 = Le(const 1f32, _507);
        switchInt(move _508) -> [0: bb183, otherwise: bb182];
    }

    bb182: {
        _509 = Le(_507, const +Inff32);
        _506 = _509;
        goto -> bb184;
    }

    bb183: {
        _506 = const false;
        goto -> bb184;
    }

    bb184: {
        _723 = const _;
        _722 = const _;
        _510 = RangeFrom::<f32>::contains::<f32>(_723, _722) -> [return: bb185, unwind continue];
    }

    bb185: {
        _512 = &_506;
        _513 = &_510;
        _511 = (move _512, move _513);
        _514 = (_511.0: &bool);
        _515 = (_511.1: &bool);
        _518 = (*_514);
        _519 = (*_515);
        _517 = Eq(move _518, move _519);
        _516 = Not(move _517);
        switchInt(move _516) -> [0: bb187, otherwise: bb186];
    }

    bb186: {
        _520 = core::panicking::AssertKind::Eq;
        _522 = Option::<Arguments<'_>>::None;
        _521 = assert_failed::<bool, bool>(move _520, _514, _515, move _522) -> unwind continue;
    }

    bb187: {
        _505 = _506;
        _504 = Not(move _505);
        switchInt(move _504) -> [0: bb189, otherwise: bb188];
    }

    bb188: {
        _523 = panic(const "assertion failed: yes!(f32 :: INFINITY, 1.0f32 ..)") -> unwind continue;
    }

    bb189: {
        _527 = const _;
        _528 = Eq(const +Inff32, _527);
        _526 = _528;
        _721 = const _;
        _720 = const _;
        _529 = RangeFrom::<f32>::contains::<f32>(_721, _720) -> [return: bb190, unwind continue];
    }

    bb190: {
        _531 = &_526;
        _532 = &_529;
        _530 = (move _531, move _532);
        _533 = (_530.0: &bool);
        _534 = (_530.1: &bool);
        _537 = (*_533);
        _538 = (*_534);
        _536 = Eq(move _537, move _538);
        _535 = Not(move _536);
        switchInt(move _535) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _539 = core::panicking::AssertKind::Eq;
        _541 = Option::<Arguments<'_>>::None;
        _540 = assert_failed::<bool, bool>(move _539, _533, _534, move _541) -> unwind continue;
    }

    bb192: {
        _525 = _526;
        _524 = Not(move _525);
        switchInt(move _524) -> [0: bb194, otherwise: bb193];
    }

    bb193: {
        _542 = panic(const "assertion failed: yes!(f32 :: INFINITY, f32 :: INFINITY ..)") -> unwind continue;
    }

    bb194: {
        _546 = const _;
        _547 = Le(const -Inff64, _546);
        switchInt(move _547) -> [0: bb196, otherwise: bb195];
    }

    bb195: {
        _548 = Le(_546, const +Inff64);
        _545 = _548;
        goto -> bb197;
    }

    bb196: {
        _545 = const false;
        goto -> bb197;
    }

    bb197: {
        _719 = const _;
        _718 = const _;
        _549 = RangeFrom::<f64>::contains::<f64>(_719, _718) -> [return: bb198, unwind continue];
    }

    bb198: {
        _551 = &_545;
        _552 = &_549;
        _550 = (move _551, move _552);
        _553 = (_550.0: &bool);
        _554 = (_550.1: &bool);
        _557 = (*_553);
        _558 = (*_554);
        _556 = Eq(move _557, move _558);
        _555 = Not(move _556);
        switchInt(move _555) -> [0: bb200, otherwise: bb199];
    }

    bb199: {
        _559 = core::panicking::AssertKind::Eq;
        _561 = Option::<Arguments<'_>>::None;
        _560 = assert_failed::<bool, bool>(move _559, _553, _554, move _561) -> unwind continue;
    }

    bb200: {
        _544 = _545;
        _543 = Not(move _544);
        switchInt(move _543) -> [0: bb202, otherwise: bb201];
    }

    bb201: {
        _562 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, f64 :: NEG_INFINITY ..)") -> unwind continue;
    }

    bb202: {
        _566 = const _;
        _567 = Le(const -Inff64, _566);
        switchInt(move _567) -> [0: bb204, otherwise: bb203];
    }

    bb203: {
        _568 = Le(_566, const +Inff64);
        _565 = _568;
        goto -> bb205;
    }

    bb204: {
        _565 = const false;
        goto -> bb205;
    }

    bb205: {
        _717 = const _;
        _716 = const _;
        _569 = RangeFrom::<f64>::contains::<f64>(_717, _716) -> [return: bb206, unwind continue];
    }

    bb206: {
        _571 = &_565;
        _572 = &_569;
        _570 = (move _571, move _572);
        _573 = (_570.0: &bool);
        _574 = (_570.1: &bool);
        _577 = (*_573);
        _578 = (*_574);
        _576 = Eq(move _577, move _578);
        _575 = Not(move _576);
        switchInt(move _575) -> [0: bb208, otherwise: bb207];
    }

    bb207: {
        _579 = core::panicking::AssertKind::Eq;
        _581 = Option::<Arguments<'_>>::None;
        _580 = assert_failed::<bool, bool>(move _579, _573, _574, move _581) -> unwind continue;
    }

    bb208: {
        _564 = _565;
        _563 = Not(move _564);
        switchInt(move _563) -> [0: bb210, otherwise: bb209];
    }

    bb209: {
        _582 = panic(const "assertion failed: yes!(f64 :: INFINITY, f64 :: NEG_INFINITY ..)") -> unwind continue;
    }

    bb210: {
        _587 = const _;
        _588 = Le(const 1f64, _587);
        switchInt(move _588) -> [0: bb212, otherwise: bb211];
    }

    bb211: {
        _589 = Le(_587, const +Inff64);
        _586 = _589;
        goto -> bb213;
    }

    bb212: {
        _586 = const false;
        goto -> bb213;
    }

    bb213: {
        _715 = const _;
        _714 = const _;
        _590 = RangeFrom::<f64>::contains::<f64>(_715, _714) -> [return: bb214, unwind continue];
    }

    bb214: {
        _592 = &_586;
        _593 = &_590;
        _591 = (move _592, move _593);
        _594 = (_591.0: &bool);
        _595 = (_591.1: &bool);
        _598 = (*_594);
        _599 = (*_595);
        _597 = Eq(move _598, move _599);
        _596 = Not(move _597);
        switchInt(move _596) -> [0: bb216, otherwise: bb215];
    }

    bb215: {
        _600 = core::panicking::AssertKind::Eq;
        _602 = Option::<Arguments<'_>>::None;
        _601 = assert_failed::<bool, bool>(move _600, _594, _595, move _602) -> unwind continue;
    }

    bb216: {
        _585 = _586;
        _584 = Not(move _585);
        _583 = Not(move _584);
        switchInt(move _583) -> [0: bb218, otherwise: bb217];
    }

    bb217: {
        _603 = panic(const "assertion failed: !yes!(f64 :: NEG_INFINITY, 1.0f64 ..)") -> unwind continue;
    }

    bb218: {
        _607 = const _;
        _608 = Le(const 1f64, _607);
        switchInt(move _608) -> [0: bb220, otherwise: bb219];
    }

    bb219: {
        _609 = Le(_607, const +Inff64);
        _606 = _609;
        goto -> bb221;
    }

    bb220: {
        _606 = const false;
        goto -> bb221;
    }

    bb221: {
        _713 = const _;
        _712 = const _;
        _610 = RangeFrom::<f64>::contains::<f64>(_713, _712) -> [return: bb222, unwind continue];
    }

    bb222: {
        _612 = &_606;
        _613 = &_610;
        _611 = (move _612, move _613);
        _614 = (_611.0: &bool);
        _615 = (_611.1: &bool);
        _618 = (*_614);
        _619 = (*_615);
        _617 = Eq(move _618, move _619);
        _616 = Not(move _617);
        switchInt(move _616) -> [0: bb224, otherwise: bb223];
    }

    bb223: {
        _620 = core::panicking::AssertKind::Eq;
        _622 = Option::<Arguments<'_>>::None;
        _621 = assert_failed::<bool, bool>(move _620, _614, _615, move _622) -> unwind continue;
    }

    bb224: {
        _605 = _606;
        _604 = Not(move _605);
        switchInt(move _604) -> [0: bb226, otherwise: bb225];
    }

    bb225: {
        _623 = panic(const "assertion failed: yes!(f64 :: INFINITY, 1.0f64 ..)") -> unwind continue;
    }

    bb226: {
        _628 = Sub(const 1f64, const _);
        _629 = Le(const 1f64, _628);
        switchInt(move _629) -> [0: bb228, otherwise: bb227];
    }

    bb227: {
        _630 = Le(_628, const +Inff64);
        _627 = _630;
        goto -> bb229;
    }

    bb228: {
        _627 = const false;
        goto -> bb229;
    }

    bb229: {
        _711 = const _;
        _710 = const _;
        _631 = RangeFrom::<f64>::contains::<f64>(_711, _710) -> [return: bb230, unwind continue];
    }

    bb230: {
        _633 = &_627;
        _634 = &_631;
        _632 = (move _633, move _634);
        _635 = (_632.0: &bool);
        _636 = (_632.1: &bool);
        _639 = (*_635);
        _640 = (*_636);
        _638 = Eq(move _639, move _640);
        _637 = Not(move _638);
        switchInt(move _637) -> [0: bb232, otherwise: bb231];
    }

    bb231: {
        _641 = core::panicking::AssertKind::Eq;
        _643 = Option::<Arguments<'_>>::None;
        _642 = assert_failed::<bool, bool>(move _641, _635, _636, move _643) -> unwind continue;
    }

    bb232: {
        _626 = _627;
        _625 = Not(move _626);
        _624 = Not(move _625);
        switchInt(move _624) -> [0: bb234, otherwise: bb233];
    }

    bb233: {
        _644 = panic(const "assertion failed: !yes!(1.0f64 - f64 :: EPSILON, 1.0f64 ..)") -> unwind continue;
    }

    bb234: {
        _648 = const 1f64;
        _649 = Le(const 1f64, _648);
        switchInt(move _649) -> [0: bb236, otherwise: bb235];
    }

    bb235: {
        _650 = Le(_648, const +Inff64);
        _647 = _650;
        goto -> bb237;
    }

    bb236: {
        _647 = const false;
        goto -> bb237;
    }

    bb237: {
        _709 = const _;
        _708 = const _;
        _651 = RangeFrom::<f64>::contains::<f64>(_709, _708) -> [return: bb238, unwind continue];
    }

    bb238: {
        _653 = &_647;
        _654 = &_651;
        _652 = (move _653, move _654);
        _655 = (_652.0: &bool);
        _656 = (_652.1: &bool);
        _659 = (*_655);
        _660 = (*_656);
        _658 = Eq(move _659, move _660);
        _657 = Not(move _658);
        switchInt(move _657) -> [0: bb240, otherwise: bb239];
    }

    bb239: {
        _661 = core::panicking::AssertKind::Eq;
        _663 = Option::<Arguments<'_>>::None;
        _662 = assert_failed::<bool, bool>(move _661, _655, _656, move _663) -> unwind continue;
    }

    bb240: {
        _646 = _647;
        _645 = Not(move _646);
        switchInt(move _645) -> [0: bb242, otherwise: bb241];
    }

    bb241: {
        _664 = panic(const "assertion failed: yes!(1.0f64, 1.0f64 ..)") -> unwind continue;
    }

    bb242: {
        _668 = const _;
        _669 = Le(const 1f64, _668);
        switchInt(move _669) -> [0: bb244, otherwise: bb243];
    }

    bb243: {
        _670 = Le(_668, const +Inff64);
        _667 = _670;
        goto -> bb245;
    }

    bb244: {
        _667 = const false;
        goto -> bb245;
    }

    bb245: {
        _707 = const _;
        _706 = const _;
        _671 = RangeFrom::<f64>::contains::<f64>(_707, _706) -> [return: bb246, unwind continue];
    }

    bb246: {
        _673 = &_667;
        _674 = &_671;
        _672 = (move _673, move _674);
        _675 = (_672.0: &bool);
        _676 = (_672.1: &bool);
        _679 = (*_675);
        _680 = (*_676);
        _678 = Eq(move _679, move _680);
        _677 = Not(move _678);
        switchInt(move _677) -> [0: bb248, otherwise: bb247];
    }

    bb247: {
        _681 = core::panicking::AssertKind::Eq;
        _683 = Option::<Arguments<'_>>::None;
        _682 = assert_failed::<bool, bool>(move _681, _675, _676, move _683) -> unwind continue;
    }

    bb248: {
        _666 = _667;
        _665 = Not(move _666);
        switchInt(move _665) -> [0: bb250, otherwise: bb249];
    }

    bb249: {
        _684 = panic(const "assertion failed: yes!(f64 :: INFINITY, 1.0f64 ..)") -> unwind continue;
    }

    bb250: {
        _688 = const _;
        _689 = Eq(const +Inff64, _688);
        _687 = _689;
        _705 = const _;
        _704 = const _;
        _690 = RangeFrom::<f64>::contains::<f64>(_705, _704) -> [return: bb251, unwind continue];
    }

    bb251: {
        _692 = &_687;
        _693 = &_690;
        _691 = (move _692, move _693);
        _694 = (_691.0: &bool);
        _695 = (_691.1: &bool);
        _698 = (*_694);
        _699 = (*_695);
        _697 = Eq(move _698, move _699);
        _696 = Not(move _697);
        switchInt(move _696) -> [0: bb253, otherwise: bb252];
    }

    bb252: {
        _700 = core::panicking::AssertKind::Eq;
        _702 = Option::<Arguments<'_>>::None;
        _701 = assert_failed::<bool, bool>(move _700, _694, _695, move _702) -> unwind continue;
    }

    bb253: {
        _686 = _687;
        _685 = Not(move _686);
        switchInt(move _685) -> [0: bb255, otherwise: bb254];
    }

    bb254: {
        _703 = panic(const "assertion failed: yes!(f64 :: INFINITY, f64 :: INFINITY ..)") -> unwind continue;
    }

    bb255: {
        return;
    }
}

promoted[0] in range_from: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[1] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>;
    let mut _1: std::ops::RangeFrom<f64>;

    bb0: {
        _1 = RangeFrom::<f64> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[2] in range_from: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[3] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>;
    let mut _1: std::ops::RangeFrom<f64>;

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 };
        _0 = &_1;
        return;
    }
}

promoted[4] in range_from: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const 1f64;
        _0 = &_1;
        return;
    }
}

promoted[5] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>;
    let mut _1: std::ops::RangeFrom<f64>;

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 };
        _0 = &_1;
        return;
    }
}

promoted[6] in range_from: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = Sub(const 1f64, const _);
        _0 = &_1;
        return;
    }
}

promoted[7] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>;
    let mut _1: std::ops::RangeFrom<f64>;

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 };
        _0 = &_1;
        return;
    }
}

promoted[8] in range_from: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[9] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>;
    let mut _1: std::ops::RangeFrom<f64>;

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 };
        _0 = &_1;
        return;
    }
}

promoted[10] in range_from: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[11] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>;
    let mut _1: std::ops::RangeFrom<f64>;

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 };
        _0 = &_1;
        return;
    }
}

promoted[12] in range_from: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[13] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>;
    let mut _1: std::ops::RangeFrom<f64>;

    bb0: {
        _1 = RangeFrom::<f64> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[14] in range_from: &f64 = {
    let mut _0: &f64;
    let mut _1: f64;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[15] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>;
    let mut _1: std::ops::RangeFrom<f64>;

    bb0: {
        _1 = RangeFrom::<f64> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[16] in range_from: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[17] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>;
    let mut _1: std::ops::RangeFrom<f32>;

    bb0: {
        _1 = RangeFrom::<f32> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[18] in range_from: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[19] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>;
    let mut _1: std::ops::RangeFrom<f32>;

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 };
        _0 = &_1;
        return;
    }
}

promoted[20] in range_from: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 1f32;
        _0 = &_1;
        return;
    }
}

promoted[21] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>;
    let mut _1: std::ops::RangeFrom<f32>;

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 };
        _0 = &_1;
        return;
    }
}

promoted[22] in range_from: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = Sub(const 1f32, const _);
        _0 = &_1;
        return;
    }
}

promoted[23] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>;
    let mut _1: std::ops::RangeFrom<f32>;

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 };
        _0 = &_1;
        return;
    }
}

promoted[24] in range_from: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[25] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>;
    let mut _1: std::ops::RangeFrom<f32>;

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 };
        _0 = &_1;
        return;
    }
}

promoted[26] in range_from: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[27] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>;
    let mut _1: std::ops::RangeFrom<f32>;

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 };
        _0 = &_1;
        return;
    }
}

promoted[28] in range_from: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[29] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>;
    let mut _1: std::ops::RangeFrom<f32>;

    bb0: {
        _1 = RangeFrom::<f32> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[30] in range_from: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[31] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>;
    let mut _1: std::ops::RangeFrom<f32>;

    bb0: {
        _1 = RangeFrom::<f32> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[32] in range_from: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[33] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>;
    let mut _1: std::ops::RangeFrom<char>;

    bb0: {
        _1 = RangeFrom::<char> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[34] in range_from: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[35] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>;
    let mut _1: std::ops::RangeFrom<char>;

    bb0: {
        _1 = RangeFrom::<char> { start: const 'b' };
        _0 = &_1;
        return;
    }
}

promoted[36] in range_from: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'b';
        _0 = &_1;
        return;
    }
}

promoted[37] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>;
    let mut _1: std::ops::RangeFrom<char>;

    bb0: {
        _1 = RangeFrom::<char> { start: const 'a' };
        _0 = &_1;
        return;
    }
}

promoted[38] in range_from: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[39] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>;
    let mut _1: std::ops::RangeFrom<char>;

    bb0: {
        _1 = RangeFrom::<char> { start: const 'a' };
        _0 = &_1;
        return;
    }
}

promoted[40] in range_from: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[41] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>;
    let mut _1: std::ops::RangeFrom<char>;

    bb0: {
        _1 = RangeFrom::<char> { start: const '\0' };
        _0 = &_1;
        return;
    }
}

promoted[42] in range_from: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const '\0';
        _0 = &_1;
        return;
    }
}

promoted[43] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>;
    let mut _1: std::ops::RangeFrom<char>;

    bb0: {
        _1 = RangeFrom::<char> { start: const '\0' };
        _0 = &_1;
        return;
    }
}

promoted[44] in range_from: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[45] in range_from: &RangeFrom<i16> = {
    let mut _0: &std::ops::RangeFrom<i16>;
    let mut _1: std::ops::RangeFrom<i16>;

    bb0: {
        _1 = RangeFrom::<i16> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[46] in range_from: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -3_i32;
        _0 = &_1;
        return;
    }
}

promoted[47] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>;
    let mut _1: std::ops::RangeFrom<i32>;

    bb0: {
        _1 = RangeFrom::<i32> { start: const -4_i32 };
        _0 = &_1;
        return;
    }
}

promoted[48] in range_from: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -4_i32;
        _0 = &_1;
        return;
    }
}

promoted[49] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>;
    let mut _1: std::ops::RangeFrom<i32>;

    bb0: {
        _1 = RangeFrom::<i32> { start: const -4_i32 };
        _0 = &_1;
        return;
    }
}

promoted[50] in range_from: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -4_i32;
        _0 = &_1;
        return;
    }
}

promoted[51] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>;
    let mut _1: std::ops::RangeFrom<i32>;

    bb0: {
        _1 = RangeFrom::<i32> { start: const 5_i32 };
        _0 = &_1;
        return;
    }
}

promoted[52] in range_from: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[53] in range_from: &RangeFrom<i16> = {
    let mut _0: &std::ops::RangeFrom<i16>;
    let mut _1: std::ops::RangeFrom<i16>;

    bb0: {
        _1 = RangeFrom::<i16> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[54] in range_from: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[55] in range_from: &RangeFrom<i16> = {
    let mut _0: &std::ops::RangeFrom<i16>;
    let mut _1: std::ops::RangeFrom<i16>;

    bb0: {
        _1 = RangeFrom::<i16> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[56] in range_from: &i16 = {
    let mut _0: &i16;
    let mut _1: i16;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[57] in range_from: &RangeFrom<i16> = {
    let mut _0: &std::ops::RangeFrom<i16>;
    let mut _1: std::ops::RangeFrom<i16>;

    bb0: {
        _1 = RangeFrom::<i16> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[58] in range_from: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[59] in range_from: &RangeFrom<u8> = {
    let mut _0: &std::ops::RangeFrom<u8>;
    let mut _1: std::ops::RangeFrom<u8>;

    bb0: {
        _1 = RangeFrom::<u8> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[60] in range_from: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 6_i32;
        _0 = &_1;
        return;
    }
}

promoted[61] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>;
    let mut _1: std::ops::RangeFrom<i32>;

    bb0: {
        _1 = RangeFrom::<i32> { start: const 5_i32 };
        _0 = &_1;
        return;
    }
}

promoted[62] in range_from: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[63] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>;
    let mut _1: std::ops::RangeFrom<i32>;

    bb0: {
        _1 = RangeFrom::<i32> { start: const 5_i32 };
        _0 = &_1;
        return;
    }
}

promoted[64] in range_from: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[65] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>;
    let mut _1: std::ops::RangeFrom<i32>;

    bb0: {
        _1 = RangeFrom::<i32> { start: const 5_i32 };
        _0 = &_1;
        return;
    }
}

promoted[66] in range_from: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[67] in range_from: &RangeFrom<u8> = {
    let mut _0: &std::ops::RangeFrom<u8>;
    let mut _1: std::ops::RangeFrom<u8>;

    bb0: {
        _1 = RangeFrom::<u8> { start: const 1_u8 };
        _0 = &_1;
        return;
    }
}

promoted[68] in range_from: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[69] in range_from: &RangeFrom<u8> = {
    let mut _0: &std::ops::RangeFrom<u8>;
    let mut _1: std::ops::RangeFrom<u8>;

    bb0: {
        _1 = RangeFrom::<u8> { start: const _ };
        _0 = &_1;
        return;
    }
}

promoted[70] in range_from: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const _;
        _0 = &_1;
        return;
    }
}

promoted[71] in range_from: &RangeFrom<u8> = {
    let mut _0: &std::ops::RangeFrom<u8>;
    let mut _1: std::ops::RangeFrom<u8>;

    bb0: {
        _1 = RangeFrom::<u8> { start: const _ };
        _0 = &_1;
        return;
    }
}

const range_from::NI16: i16 = {
    let mut _0: i16;
    let mut _1: (i16, bool);

    bb0: {
        _1 = CheckedAdd(const _, const 1_i16);
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i16) -> [success: bb1, unwind continue];
    }

    bb1: {
        _0 = move (_1.0: i16);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();
    let _3: ();

    bb0: {
        _1 = range_to_inclusive() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = range_to() -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = range_from() -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}
