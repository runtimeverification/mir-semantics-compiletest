// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn range_to_inclusive() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:21:25: 21:25
    let mut _1: bool;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:5: 26:39
    let mut _2: bool;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _3: bool;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _5: &std::ops::RangeToInclusive<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _6: &u8;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _7: &u8;                         // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _8: (&bool, &bool);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: !;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:5: 26:39
    let mut _26: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:5: 27:33
    let mut _27: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _28: bool;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _30: &std::ops::RangeToInclusive<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _31: &u8;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _32: &u8;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _33: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _34: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _35: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _43: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _44: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _45: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _46: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _47: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _48: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _50: !;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:5: 27:33
    let mut _51: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:5: 28:29
    let mut _52: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _53: bool;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _55: &std::ops::RangeToInclusive<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _56: &u8;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _57: &u8;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _58: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _59: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _60: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _63: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _68: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _69: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _70: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _71: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _72: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _73: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _75: !;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:5: 28:29
    let mut _76: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:5: 29:30
    let mut _77: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:13: 29:29
    let mut _78: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _79: bool;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _81: &std::ops::RangeToInclusive<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _82: &u8;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _83: &u8;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _84: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _85: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _86: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _89: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _94: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _95: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _96: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _97: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _98: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _99: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _100: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _101: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:5: 29:30
    let mut _102: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:5: 32:41
    let mut _103: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _104: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _106: &std::ops::RangeToInclusive<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _107: &i16;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _108: &i16;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _109: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _110: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _111: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _114: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _115: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _116: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _117: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _119: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _120: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _121: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _122: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _123: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _124: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _125: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _126: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:5: 32:41
    let mut _127: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:5: 33:34
    let mut _128: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _129: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _131: &std::ops::RangeToInclusive<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _132: &i16;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _133: &i16;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _134: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _135: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _136: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _139: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _140: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _141: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _142: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _144: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _145: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _146: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _147: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _148: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _149: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _150: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _151: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:5: 33:34
    let mut _152: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:5: 34:35
    let mut _153: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _154: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _156: &std::ops::RangeToInclusive<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _157: &i16;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _158: &i16;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _159: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _160: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _161: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _164: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _165: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _166: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _167: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _169: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _170: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _171: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _172: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _173: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _174: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _176: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:5: 34:35
    let mut _177: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:5: 35:29
    let mut _178: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _179: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _181: &std::ops::RangeToInclusive<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _182: &i32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _183: &i32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _184: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _185: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _186: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _189: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _190: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _191: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _192: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _194: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _195: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _196: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _197: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _198: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _199: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _200: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _201: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:5: 35:29
    let mut _202: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:5: 36:30
    let mut _203: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:13: 36:29
    let mut _204: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _205: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _207: &std::ops::RangeToInclusive<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _208: &i32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _209: &i32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _210: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _211: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _212: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _215: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _216: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _217: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _218: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _220: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _221: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _222: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _223: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _224: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _225: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _226: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _227: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:5: 36:30
    let mut _228: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:5: 39:39
    let mut _229: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _230: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _232: &std::ops::RangeToInclusive<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _233: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _234: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _235: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _236: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _237: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _240: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _241: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _242: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _243: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _245: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _246: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _247: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _248: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _249: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _250: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _251: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _252: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:5: 39:39
    let mut _253: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:5: 40:35
    let mut _254: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _255: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _257: &std::ops::RangeToInclusive<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _258: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _259: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _260: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _261: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _262: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _265: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _266: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _267: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _268: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _270: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _271: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _272: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _273: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _274: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _275: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _276: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _277: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:5: 40:35
    let mut _278: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:5: 41:31
    let mut _279: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _280: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _282: &std::ops::RangeToInclusive<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _283: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _284: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _285: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _286: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _287: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _290: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _291: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _292: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _293: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _295: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _296: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _297: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _298: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _299: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _300: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _301: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _302: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:5: 41:31
    let mut _303: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:5: 42:32
    let mut _304: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:13: 42:31
    let mut _305: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _306: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _308: &std::ops::RangeToInclusive<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _309: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _310: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _311: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _312: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _313: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _316: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _317: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _318: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _319: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _321: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _322: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _323: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _324: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _325: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _326: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _327: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _328: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:5: 42:32
    let mut _329: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:5: 45:59
    let mut _330: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _331: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _333: &std::ops::RangeToInclusive<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _334: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _335: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _336: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _337: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _338: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _341: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _342: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _343: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _344: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _346: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _347: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _348: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _349: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _350: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _351: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _352: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _353: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:5: 45:59
    let mut _354: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:5: 46:48
    let mut _355: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _356: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _358: &std::ops::RangeToInclusive<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _359: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _360: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _361: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _362: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _363: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _366: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _367: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _368: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _369: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _371: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _372: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _373: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _374: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _375: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _376: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _377: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _378: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:5: 46:48
    let mut _379: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:5: 47:37
    let mut _380: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _381: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _383: &std::ops::RangeToInclusive<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _384: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _385: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _386: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _387: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _388: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _391: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _392: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _393: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _394: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _396: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _397: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _398: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _399: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _400: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _401: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _402: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _403: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:5: 47:37
    let mut _404: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:5: 48:39
    let mut _405: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:13: 48:38
    let mut _406: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _407: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _409: &std::ops::RangeToInclusive<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _410: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _411: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _412: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _413: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _414: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _417: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _418: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _419: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _420: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _422: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _423: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _424: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _425: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _426: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _427: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _428: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _429: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:5: 48:39
    let mut _430: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:5: 51:59
    let mut _431: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _432: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _434: &std::ops::RangeToInclusive<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _435: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _436: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _437: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _438: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _439: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _442: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _443: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _444: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _445: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _447: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _448: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _449: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _450: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _451: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _452: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _453: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _454: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:5: 51:59
    let mut _455: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:5: 52:48
    let mut _456: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _457: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _459: &std::ops::RangeToInclusive<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _460: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _461: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _462: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _463: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _464: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _467: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _468: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _469: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _470: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _472: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _473: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _474: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _475: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _476: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _477: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _478: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _479: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:5: 52:48
    let mut _480: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:5: 53:37
    let mut _481: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _482: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _484: &std::ops::RangeToInclusive<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _485: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _486: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _487: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _488: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _489: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _492: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _493: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _494: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _495: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _497: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _498: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _499: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _500: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _501: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _502: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _503: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _504: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:5: 53:37
    let mut _505: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:5: 54:39
    let mut _506: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:13: 54:38
    let mut _507: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _508: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _510: &std::ops::RangeToInclusive<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _511: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _512: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _513: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _514: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _515: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _518: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _519: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _520: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _521: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _523: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _524: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _525: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _526: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _527: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _528: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _529: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _530: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:5: 54:39
    scope 1 {
        debug m => _3;                   // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _4: bool;                    // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _571: &u8;               // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _572: &std::ops::RangeToInclusive<u8>; // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 2 {
            debug c => _4;               // in scope 2 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _11: &bool;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _12: &bool;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _11;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _12;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _17: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _17;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 5 {
        debug m => _28;                  // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _29: bool;                   // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _569: &u8;               // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _570: &std::ops::RangeToInclusive<u8>; // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 6 {
            debug c => _29;              // in scope 6 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _36: &bool;              // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _37: &bool;              // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 7 {
                debug left_val => _36;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _37;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _42: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _42;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 9 {
        debug m => _53;                  // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _54: bool;                   // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _567: &u8;               // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _568: &std::ops::RangeToInclusive<u8>; // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 10 {
            debug c => _54;              // in scope 10 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _61: &bool;              // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _62: &bool;              // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 11 {
                debug left_val => _61;   // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _62;  // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _67: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 12 {
                    debug kind => _67;   // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 13 {
        debug m => _79;                  // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _80: bool;                   // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _565: &u8;               // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _566: &std::ops::RangeToInclusive<u8>; // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 14 {
            debug c => _80;              // in scope 14 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _87: &bool;              // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _88: &bool;              // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 15 {
                debug left_val => _87;   // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _88;  // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _93: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 16 {
                    debug kind => _93;   // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 17 {
        debug m => _104;                 // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _105: bool;                  // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _563: &i16;              // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _564: &std::ops::RangeToInclusive<i16>; // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 18 {
            debug c => _105;             // in scope 18 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _112: &bool;             // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _113: &bool;             // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 19 {
                debug left_val => _112;  // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _113; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _118: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 20 {
                    debug kind => _118;  // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 21 {
        debug m => _129;                 // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _130: bool;                  // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _561: &i16;              // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _562: &std::ops::RangeToInclusive<i16>; // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 22 {
            debug c => _130;             // in scope 22 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _137: &bool;             // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _138: &bool;             // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 23 {
                debug left_val => _137;  // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _138; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _143: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 24 {
                    debug kind => _143;  // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 25 {
        debug m => _154;                 // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _155: bool;                  // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _559: &i16;              // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _560: &std::ops::RangeToInclusive<i16>; // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 26 {
            debug c => _155;             // in scope 26 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _162: &bool;             // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _163: &bool;             // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 27 {
                debug left_val => _162;  // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _163; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _168: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 28 {
                    debug kind => _168;  // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 29 {
        debug m => _179;                 // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _180: bool;                  // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _557: &i32;              // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _558: &std::ops::RangeToInclusive<i32>; // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 30 {
            debug c => _180;             // in scope 30 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _187: &bool;             // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _188: &bool;             // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 31 {
                debug left_val => _187;  // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _188; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _193: core::panicking::AssertKind; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 32 {
                    debug kind => _193;  // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 33 {
        debug m => _205;                 // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _206: bool;                  // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _555: &i32;              // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _556: &std::ops::RangeToInclusive<i32>; // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 34 {
            debug c => _206;             // in scope 34 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _213: &bool;             // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _214: &bool;             // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 35 {
                debug left_val => _213;  // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _214; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _219: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 36 {
                    debug kind => _219;  // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 37 {
        debug m => _230;                 // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _231: bool;                  // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _553: &char;             // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _554: &std::ops::RangeToInclusive<char>; // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 38 {
            debug c => _231;             // in scope 38 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _238: &bool;             // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _239: &bool;             // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 39 {
                debug left_val => _238;  // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _239; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _244: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 40 {
                    debug kind => _244;  // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 41 {
        debug m => _255;                 // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _256: bool;                  // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _551: &char;             // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _552: &std::ops::RangeToInclusive<char>; // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 42 {
            debug c => _256;             // in scope 42 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _263: &bool;             // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _264: &bool;             // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 43 {
                debug left_val => _263;  // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _264; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _269: core::panicking::AssertKind; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 44 {
                    debug kind => _269;  // in scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 45 {
        debug m => _280;                 // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _281: bool;                  // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _549: &char;             // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _550: &std::ops::RangeToInclusive<char>; // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 46 {
            debug c => _281;             // in scope 46 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _288: &bool;             // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _289: &bool;             // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 47 {
                debug left_val => _288;  // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _289; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _294: core::panicking::AssertKind; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 48 {
                    debug kind => _294;  // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 49 {
        debug m => _306;                 // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _307: bool;                  // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _547: &char;             // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _548: &std::ops::RangeToInclusive<char>; // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 50 {
            debug c => _307;             // in scope 50 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _314: &bool;             // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _315: &bool;             // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 51 {
                debug left_val => _314;  // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _315; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _320: core::panicking::AssertKind; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 52 {
                    debug kind => _320;  // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 53 {
        debug m => _331;                 // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _332: bool;                  // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _545: &f32;              // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _546: &std::ops::RangeToInclusive<f32>; // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 54 {
            debug c => _332;             // in scope 54 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _339: &bool;             // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _340: &bool;             // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 55 {
                debug left_val => _339;  // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _340; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _345: core::panicking::AssertKind; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 56 {
                    debug kind => _345;  // in scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 57 {
        debug m => _356;                 // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _357: bool;                  // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _543: &f32;              // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _544: &std::ops::RangeToInclusive<f32>; // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 58 {
            debug c => _357;             // in scope 58 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _364: &bool;             // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _365: &bool;             // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 59 {
                debug left_val => _364;  // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _365; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _370: core::panicking::AssertKind; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 60 {
                    debug kind => _370;  // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 61 {
        debug m => _381;                 // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _382: bool;                  // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _541: &f32;              // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _542: &std::ops::RangeToInclusive<f32>; // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 62 {
            debug c => _382;             // in scope 62 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _389: &bool;             // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _390: &bool;             // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 63 {
                debug left_val => _389;  // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _390; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _395: core::panicking::AssertKind; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 64 {
                    debug kind => _395;  // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 65 {
        debug m => _407;                 // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _408: bool;                  // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _539: &f32;              // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _540: &std::ops::RangeToInclusive<f32>; // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 66 {
            debug c => _408;             // in scope 66 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _415: &bool;             // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _416: &bool;             // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 67 {
                debug left_val => _415;  // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _416; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _421: core::panicking::AssertKind; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 68 {
                    debug kind => _421;  // in scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 69 {
        debug m => _432;                 // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _433: bool;                  // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _537: &f64;              // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _538: &std::ops::RangeToInclusive<f64>; // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 70 {
            debug c => _433;             // in scope 70 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _440: &bool;             // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _441: &bool;             // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 71 {
                debug left_val => _440;  // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _441; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _446: core::panicking::AssertKind; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 72 {
                    debug kind => _446;  // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 73 {
        debug m => _457;                 // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _458: bool;                  // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _535: &f64;              // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _536: &std::ops::RangeToInclusive<f64>; // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 74 {
            debug c => _458;             // in scope 74 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _465: &bool;             // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _466: &bool;             // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 75 {
                debug left_val => _465;  // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _466; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _471: core::panicking::AssertKind; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 76 {
                    debug kind => _471;  // in scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 77 {
        debug m => _482;                 // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _483: bool;                  // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _533: &f64;              // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _534: &std::ops::RangeToInclusive<f64>; // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 78 {
            debug c => _483;             // in scope 78 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _490: &bool;             // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _491: &bool;             // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 79 {
                debug left_val => _490;  // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _491; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _496: core::panicking::AssertKind; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 80 {
                    debug kind => _496;  // in scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 81 {
        debug m => _508;                 // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _509: bool;                  // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _531: &f64;              // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _532: &std::ops::RangeToInclusive<f64>; // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 82 {
            debug c => _509;             // in scope 82 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _516: &bool;             // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _517: &bool;             // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 83 {
                debug left_val => _516;  // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _517; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _522: core::panicking::AssertKind; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 84 {
                    debug kind => _522;  // in scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = const true;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _572 = const _;                  // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<u8>, val: Unevaluated(range_to_inclusive, [], Some(promoted[41])) }
        _5 = _572;                       // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _571 = const _;                  // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to_inclusive, [], Some(promoted[40])) }
        _7 = _571;                       // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _6 = _7;                         // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _4 = RangeToInclusive::<u8>::contains::<u8>(move _5, move _6) -> bb1; // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<u8>, &'b u8) -> bool {RangeToInclusive::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &_3;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _10 = &_4;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_8.0: &bool);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_8.1: &bool);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = assert_failed::<bool, bool>(move _19, move _20, move _22, move _24); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _3;                         // scope 2 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _1 = Not(move _2);               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:5: 26:39
        switchInt(move _1) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:5: 26:39
    }

    bb4: {
        _25 = panic(const "assertion failed: yes!(u8 :: MIN, ..= u8 :: MIN)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:5: 26:39
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:5: 26:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _28 = const true;                // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _570 = const _;                  // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<u8>, val: Unevaluated(range_to_inclusive, [], Some(promoted[39])) }
        _30 = _570;                      // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _569 = const _;                  // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to_inclusive, [], Some(promoted[38])) }
        _32 = _569;                      // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _31 = _32;                       // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _29 = RangeToInclusive::<u8>::contains::<u8>(move _30, move _31) -> bb6; // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<u8>, &'b u8) -> bool {RangeToInclusive::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb6: {
        _34 = &_28;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _35 = &_29;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _33 = (move _34, move _35);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _36 = (_33.0: &bool);            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _37 = (_33.1: &bool);            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _40 = (*_36);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _41 = (*_37);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _39 = Eq(move _40, move _41);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _38 = Not(move _39);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _38) -> [0: bb8, otherwise: bb7]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _42 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _44 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _46 = _36;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _46;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _37;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = _48;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _43 = assert_failed::<bool, bool>(move _44, move _45, move _47, move _49); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = _28;                       // scope 6 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _26 = Not(move _27);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:5: 27:33
        switchInt(move _26) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:5: 27:33
    }

    bb9: {
        _50 = panic(const "assertion failed: yes!(u8 :: MIN, ..= 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:5: 27:33
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:5: 27:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _53 = const true;                // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _568 = const _;                  // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<u8>, val: Unevaluated(range_to_inclusive, [], Some(promoted[37])) }
        _55 = _568;                      // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _567 = const _;                  // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to_inclusive, [], Some(promoted[36])) }
        _57 = _567;                      // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _56 = _57;                       // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _54 = RangeToInclusive::<u8>::contains::<u8>(move _55, move _56) -> bb11; // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<u8>, &'b u8) -> bool {RangeToInclusive::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb11: {
        _59 = &_53;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _60 = &_54;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _58 = (move _59, move _60);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _61 = (_58.0: &bool);            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _62 = (_58.1: &bool);            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _65 = (*_61);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _66 = (*_62);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _64 = Eq(move _65, move _66);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _63 = Not(move _64);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _63) -> [0: bb13, otherwise: bb12]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _67 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _69 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _71 = _61;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _71;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _73 = _62;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = _73;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _74 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _68 = assert_failed::<bool, bool>(move _69, move _70, move _72, move _74); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb13: {
        _52 = _53;                       // scope 10 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _51 = Not(move _52);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:5: 28:29
        switchInt(move _51) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:5: 28:29
    }

    bb14: {
        _75 = panic(const "assertion failed: yes!(5u8, ..= 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:5: 28:29
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:5: 28:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _79 = const false;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _566 = const _;                  // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<u8>, val: Unevaluated(range_to_inclusive, [], Some(promoted[35])) }
        _81 = _566;                      // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _565 = const _;                  // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to_inclusive, [], Some(promoted[34])) }
        _83 = _565;                      // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _82 = _83;                       // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _80 = RangeToInclusive::<u8>::contains::<u8>(move _81, move _82) -> bb16; // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<u8>, &'b u8) -> bool {RangeToInclusive::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb16: {
        _85 = &_79;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _86 = &_80;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _84 = (move _85, move _86);      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _87 = (_84.0: &bool);            // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _88 = (_84.1: &bool);            // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _91 = (*_87);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _92 = (*_88);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _90 = Eq(move _91, move _92);    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _89 = Not(move _90);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _89) -> [0: bb18, otherwise: bb17]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _93 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _95 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _97 = _87;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _96 = _97;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _88;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _98 = _99;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _100 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _94 = assert_failed::<bool, bool>(move _95, move _96, move _98, move _100); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb18: {
        _78 = _79;                       // scope 14 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _77 = Not(move _78);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:13: 29:29
        _76 = Not(move _77);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:5: 29:30
        switchInt(move _76) -> [0: bb20, otherwise: bb19]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:5: 29:30
    }

    bb19: {
        _101 = panic(const "assertion failed: !yes!(6u8, ..= 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:5: 29:30
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:5: 29:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _104 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _564 = const _;                  // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<i16>, val: Unevaluated(range_to_inclusive, [], Some(promoted[33])) }
        _106 = _564;                     // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _563 = const _;                  // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i16, val: Unevaluated(range_to_inclusive, [], Some(promoted[32])) }
        _108 = _563;                     // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _107 = _108;                     // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _105 = RangeToInclusive::<i16>::contains::<i16>(move _106, move _107) -> bb21; // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<i16>, &'b i16) -> bool {RangeToInclusive::<i16>::contains::<i16>}, val: Value(<ZST>) }
    }

    bb21: {
        _110 = &_104;                    // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _111 = &_105;                    // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _109 = (move _110, move _111);   // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _112 = (_109.0: &bool);          // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _113 = (_109.1: &bool);          // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _116 = (*_112);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _117 = (*_113);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _115 = Eq(move _116, move _117); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _114 = Not(move _115);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _114) -> [0: bb23, otherwise: bb22]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _118 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _120 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _122 = _112;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _121 = _122;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _124 = _113;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _123 = _124;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _125 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _119 = assert_failed::<bool, bool>(move _120, move _121, move _123, move _125); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb23: {
        _103 = _104;                     // scope 18 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _102 = Not(move _103);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:5: 32:41
        switchInt(move _102) -> [0: bb25, otherwise: bb24]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:5: 32:41
    }

    bb24: {
        _126 = panic(const "assertion failed: yes!(i16 :: MIN, ..= i16 :: MIN)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:5: 32:41
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:5: 32:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _129 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _562 = const _;                  // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<i16>, val: Unevaluated(range_to_inclusive, [], Some(promoted[31])) }
        _131 = _562;                     // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _561 = const _;                  // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i16, val: Unevaluated(range_to_inclusive, [], Some(promoted[30])) }
        _133 = _561;                     // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _132 = _133;                     // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _130 = RangeToInclusive::<i16>::contains::<i16>(move _131, move _132) -> bb26; // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<i16>, &'b i16) -> bool {RangeToInclusive::<i16>::contains::<i16>}, val: Value(<ZST>) }
    }

    bb26: {
        _135 = &_129;                    // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _136 = &_130;                    // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _134 = (move _135, move _136);   // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _137 = (_134.0: &bool);          // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _138 = (_134.1: &bool);          // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _141 = (*_137);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _142 = (*_138);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _140 = Eq(move _141, move _142); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _139 = Not(move _140);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _139) -> [0: bb28, otherwise: bb27]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _143 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _145 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _147 = _137;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _146 = _147;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _149 = _138;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _148 = _149;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _150 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _144 = assert_failed::<bool, bool>(move _145, move _146, move _148, move _150); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb28: {
        _128 = _129;                     // scope 22 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _127 = Not(move _128);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:5: 33:34
        switchInt(move _127) -> [0: bb30, otherwise: bb29]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:5: 33:34
    }

    bb29: {
        _151 = panic(const "assertion failed: yes!(i16 :: MIN, ..= 0)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:5: 33:34
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:5: 33:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _154 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _560 = const _;                  // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<i16>, val: Unevaluated(range_to_inclusive, [], Some(promoted[29])) }
        _156 = _560;                     // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _559 = const _;                  // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i16, val: Unevaluated(range_to_inclusive, [], Some(promoted[28])) }
        _158 = _559;                     // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _157 = _158;                     // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _155 = RangeToInclusive::<i16>::contains::<i16>(move _156, move _157) -> bb31; // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<i16>, &'b i16) -> bool {RangeToInclusive::<i16>::contains::<i16>}, val: Value(<ZST>) }
    }

    bb31: {
        _160 = &_154;                    // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _161 = &_155;                    // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _159 = (move _160, move _161);   // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _162 = (_159.0: &bool);          // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _163 = (_159.1: &bool);          // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _166 = (*_162);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _167 = (*_163);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _165 = Eq(move _166, move _167); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _164 = Not(move _165);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _164) -> [0: bb33, otherwise: bb32]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _168 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _170 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _172 = _162;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _171 = _172;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _174 = _163;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _173 = _174;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _175 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _169 = assert_failed::<bool, bool>(move _170, move _171, move _173, move _175); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb33: {
        _153 = _154;                     // scope 26 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _152 = Not(move _153);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:5: 34:35
        switchInt(move _152) -> [0: bb35, otherwise: bb34]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:5: 34:35
    }

    bb34: {
        _176 = panic(const "assertion failed: yes!(i16 :: MIN, ..= - 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:5: 34:35
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:5: 34:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _179 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _558 = const _;                  // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<i32>, val: Unevaluated(range_to_inclusive, [], Some(promoted[27])) }
        _181 = _558;                     // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _557 = const _;                  // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_to_inclusive, [], Some(promoted[26])) }
        _183 = _557;                     // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _182 = _183;                     // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _180 = RangeToInclusive::<i32>::contains::<i32>(move _181, move _182) -> bb36; // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<i32>, &'b i32) -> bool {RangeToInclusive::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb36: {
        _185 = &_179;                    // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _186 = &_180;                    // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _184 = (move _185, move _186);   // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _187 = (_184.0: &bool);          // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _188 = (_184.1: &bool);          // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _191 = (*_187);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _192 = (*_188);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _190 = Eq(move _191, move _192); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _189 = Not(move _190);           // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _189) -> [0: bb38, otherwise: bb37]; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb37: {
        _193 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _195 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _197 = _187;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _196 = _197;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _199 = _188;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _198 = _199;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _200 = Option::<Arguments<'_>>::None; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _194 = assert_failed::<bool, bool>(move _195, move _196, move _198, move _200); // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb38: {
        _178 = _179;                     // scope 30 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _177 = Not(move _178);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:5: 35:29
        switchInt(move _177) -> [0: bb40, otherwise: bb39]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:5: 35:29
    }

    bb39: {
        _201 = panic(const "assertion failed: yes!(- 5, ..= - 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:5: 35:29
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:5: 35:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb40: {
        _205 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _556 = const _;                  // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<i32>, val: Unevaluated(range_to_inclusive, [], Some(promoted[25])) }
        _207 = _556;                     // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _555 = const _;                  // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_to_inclusive, [], Some(promoted[24])) }
        _209 = _555;                     // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _208 = _209;                     // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _206 = RangeToInclusive::<i32>::contains::<i32>(move _207, move _208) -> bb41; // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<i32>, &'b i32) -> bool {RangeToInclusive::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb41: {
        _211 = &_205;                    // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _212 = &_206;                    // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _210 = (move _211, move _212);   // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _213 = (_210.0: &bool);          // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _214 = (_210.1: &bool);          // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _217 = (*_213);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _218 = (*_214);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _216 = Eq(move _217, move _218); // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _215 = Not(move _216);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _215) -> [0: bb43, otherwise: bb42]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb42: {
        _219 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _221 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _223 = _213;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _222 = _223;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _225 = _214;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _224 = _225;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _226 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _220 = assert_failed::<bool, bool>(move _221, move _222, move _224, move _226); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb43: {
        _204 = _205;                     // scope 34 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _203 = Not(move _204);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:13: 36:29
        _202 = Not(move _203);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:5: 36:30
        switchInt(move _202) -> [0: bb45, otherwise: bb44]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:5: 36:30
    }

    bb44: {
        _227 = panic(const "assertion failed: !yes!(- 4, ..= - 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:5: 36:30
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:5: 36:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb45: {
        _230 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _554 = const _;                  // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<char>, val: Unevaluated(range_to_inclusive, [], Some(promoted[23])) }
        _232 = _554;                     // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _553 = const _;                  // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_to_inclusive, [], Some(promoted[22])) }
        _234 = _553;                     // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _233 = _234;                     // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _231 = RangeToInclusive::<char>::contains::<char>(move _232, move _233) -> bb46; // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<char>, &'b char) -> bool {RangeToInclusive::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb46: {
        _236 = &_230;                    // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _237 = &_231;                    // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _235 = (move _236, move _237);   // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _238 = (_235.0: &bool);          // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _239 = (_235.1: &bool);          // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _242 = (*_238);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _243 = (*_239);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _241 = Eq(move _242, move _243); // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _240 = Not(move _241);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _240) -> [0: bb48, otherwise: bb47]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _244 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _246 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _248 = _238;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _247 = _248;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _250 = _239;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _249 = _250;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _251 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _245 = assert_failed::<bool, bool>(move _246, move _247, move _249, move _251); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb48: {
        _229 = _230;                     // scope 38 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _228 = Not(move _229);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:5: 39:39
        switchInt(move _228) -> [0: bb50, otherwise: bb49]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:5: 39:39
    }

    bb49: {
        _252 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', ..= \\'\\\\u{0}\\')"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:5: 39:39
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:5: 39:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb50: {
        _255 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _552 = const _;                  // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<char>, val: Unevaluated(range_to_inclusive, [], Some(promoted[21])) }
        _257 = _552;                     // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _551 = const _;                  // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_to_inclusive, [], Some(promoted[20])) }
        _259 = _551;                     // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _258 = _259;                     // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _256 = RangeToInclusive::<char>::contains::<char>(move _257, move _258) -> bb51; // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<char>, &'b char) -> bool {RangeToInclusive::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb51: {
        _261 = &_255;                    // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _262 = &_256;                    // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _260 = (move _261, move _262);   // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _263 = (_260.0: &bool);          // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _264 = (_260.1: &bool);          // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _267 = (*_263);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _268 = (*_264);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _266 = Eq(move _267, move _268); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _265 = Not(move _266);           // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _265) -> [0: bb53, otherwise: bb52]; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb52: {
        _269 = const core::panicking::AssertKind::Eq; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _271 = const core::panicking::AssertKind::Eq; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _273 = _263;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _272 = _273;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _275 = _264;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _274 = _275;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _276 = Option::<Arguments<'_>>::None; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _270 = assert_failed::<bool, bool>(move _271, move _272, move _274, move _276); // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb53: {
        _254 = _255;                     // scope 42 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _253 = Not(move _254);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:5: 40:35
        switchInt(move _253) -> [0: bb55, otherwise: bb54]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:5: 40:35
    }

    bb54: {
        _277 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', ..= \\'a\\')"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:5: 40:35
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:5: 40:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        _280 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _550 = const _;                  // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<char>, val: Unevaluated(range_to_inclusive, [], Some(promoted[19])) }
        _282 = _550;                     // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _549 = const _;                  // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_to_inclusive, [], Some(promoted[18])) }
        _284 = _549;                     // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _283 = _284;                     // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _281 = RangeToInclusive::<char>::contains::<char>(move _282, move _283) -> bb56; // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<char>, &'b char) -> bool {RangeToInclusive::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb56: {
        _286 = &_280;                    // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _287 = &_281;                    // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _285 = (move _286, move _287);   // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _288 = (_285.0: &bool);          // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _289 = (_285.1: &bool);          // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _292 = (*_288);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _293 = (*_289);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _291 = Eq(move _292, move _293); // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _290 = Not(move _291);           // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _290) -> [0: bb58, otherwise: bb57]; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb57: {
        _294 = const core::panicking::AssertKind::Eq; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _296 = const core::panicking::AssertKind::Eq; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _298 = _288;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _297 = _298;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _300 = _289;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _299 = _300;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _301 = Option::<Arguments<'_>>::None; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _295 = assert_failed::<bool, bool>(move _296, move _297, move _299, move _301); // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb58: {
        _279 = _280;                     // scope 46 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _278 = Not(move _279);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:5: 41:31
        switchInt(move _278) -> [0: bb60, otherwise: bb59]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:5: 41:31
    }

    bb59: {
        _302 = panic(const "assertion failed: yes!(\\'a\\', ..= \\'a\\')"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:5: 41:31
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:5: 41:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb60: {
        _306 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _548 = const _;                  // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<char>, val: Unevaluated(range_to_inclusive, [], Some(promoted[17])) }
        _308 = _548;                     // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _547 = const _;                  // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_to_inclusive, [], Some(promoted[16])) }
        _310 = _547;                     // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _309 = _310;                     // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _307 = RangeToInclusive::<char>::contains::<char>(move _308, move _309) -> bb61; // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<char>, &'b char) -> bool {RangeToInclusive::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb61: {
        _312 = &_306;                    // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _313 = &_307;                    // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _311 = (move _312, move _313);   // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _314 = (_311.0: &bool);          // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _315 = (_311.1: &bool);          // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _318 = (*_314);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _319 = (*_315);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _317 = Eq(move _318, move _319); // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _316 = Not(move _317);           // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _316) -> [0: bb63, otherwise: bb62]; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _320 = const core::panicking::AssertKind::Eq; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _322 = const core::panicking::AssertKind::Eq; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _324 = _314;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _323 = _324;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _326 = _315;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _325 = _326;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _327 = Option::<Arguments<'_>>::None; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _321 = assert_failed::<bool, bool>(move _322, move _323, move _325, move _327); // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb63: {
        _305 = _306;                     // scope 50 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _304 = Not(move _305);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:13: 42:31
        _303 = Not(move _304);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:5: 42:32
        switchInt(move _303) -> [0: bb65, otherwise: bb64]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:5: 42:32
    }

    bb64: {
        _328 = panic(const "assertion failed: !yes!(\\'b\\', ..= \\'a\\')"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:5: 42:32
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:5: 42:32
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb65: {
        _331 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _546 = const _;                  // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<f32>, val: Unevaluated(range_to_inclusive, [], Some(promoted[15])) }
        _333 = _546;                     // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _545 = const _;                  // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_to_inclusive, [], Some(promoted[14])) }
        _335 = _545;                     // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _334 = _335;                     // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _332 = RangeToInclusive::<f32>::contains::<f32>(move _333, move _334) -> bb66; // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<f32>, &'b f32) -> bool {RangeToInclusive::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb66: {
        _337 = &_331;                    // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _338 = &_332;                    // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _336 = (move _337, move _338);   // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _339 = (_336.0: &bool);          // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _340 = (_336.1: &bool);          // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _343 = (*_339);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _344 = (*_340);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _342 = Eq(move _343, move _344); // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _341 = Not(move _342);           // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _341) -> [0: bb68, otherwise: bb67]; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb67: {
        _345 = const core::panicking::AssertKind::Eq; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _347 = const core::panicking::AssertKind::Eq; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _349 = _339;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _348 = _349;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _351 = _340;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _350 = _351;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _352 = Option::<Arguments<'_>>::None; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _346 = assert_failed::<bool, bool>(move _347, move _348, move _350, move _352); // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb68: {
        _330 = _331;                     // scope 54 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _329 = Not(move _330);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:5: 45:59
        switchInt(move _329) -> [0: bb70, otherwise: bb69]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:5: 45:59
    }

    bb69: {
        _353 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, ..= f32 :: NEG_INFINITY)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:5: 45:59
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:5: 45:59
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb70: {
        _356 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _544 = const _;                  // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<f32>, val: Unevaluated(range_to_inclusive, [], Some(promoted[13])) }
        _358 = _544;                     // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _543 = const _;                  // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_to_inclusive, [], Some(promoted[12])) }
        _360 = _543;                     // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _359 = _360;                     // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _357 = RangeToInclusive::<f32>::contains::<f32>(move _358, move _359) -> bb71; // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<f32>, &'b f32) -> bool {RangeToInclusive::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb71: {
        _362 = &_356;                    // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _363 = &_357;                    // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _361 = (move _362, move _363);   // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _364 = (_361.0: &bool);          // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _365 = (_361.1: &bool);          // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _368 = (*_364);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _369 = (*_365);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _367 = Eq(move _368, move _369); // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _366 = Not(move _367);           // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _366) -> [0: bb73, otherwise: bb72]; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb72: {
        _370 = const core::panicking::AssertKind::Eq; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _372 = const core::panicking::AssertKind::Eq; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _374 = _364;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _373 = _374;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _376 = _365;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _375 = _376;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _377 = Option::<Arguments<'_>>::None; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _371 = assert_failed::<bool, bool>(move _372, move _373, move _375, move _377); // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb73: {
        _355 = _356;                     // scope 58 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _354 = Not(move _355);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:5: 46:48
        switchInt(move _354) -> [0: bb75, otherwise: bb74]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:5: 46:48
    }

    bb74: {
        _378 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, ..= 1.0f32)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:5: 46:48
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:5: 46:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb75: {
        _381 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _542 = const _;                  // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<f32>, val: Unevaluated(range_to_inclusive, [], Some(promoted[11])) }
        _383 = _542;                     // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _541 = const _;                  // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_to_inclusive, [], Some(promoted[10])) }
        _385 = _541;                     // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _384 = _385;                     // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _382 = RangeToInclusive::<f32>::contains::<f32>(move _383, move _384) -> bb76; // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<f32>, &'b f32) -> bool {RangeToInclusive::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb76: {
        _387 = &_381;                    // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _388 = &_382;                    // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _386 = (move _387, move _388);   // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _389 = (_386.0: &bool);          // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _390 = (_386.1: &bool);          // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _393 = (*_389);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _394 = (*_390);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _392 = Eq(move _393, move _394); // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _391 = Not(move _392);           // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _391) -> [0: bb78, otherwise: bb77]; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb77: {
        _395 = const core::panicking::AssertKind::Eq; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _397 = const core::panicking::AssertKind::Eq; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _399 = _389;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _398 = _399;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _401 = _390;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _400 = _401;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _402 = Option::<Arguments<'_>>::None; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _396 = assert_failed::<bool, bool>(move _397, move _398, move _400, move _402); // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb78: {
        _380 = _381;                     // scope 62 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _379 = Not(move _380);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:5: 47:37
        switchInt(move _379) -> [0: bb80, otherwise: bb79]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:5: 47:37
    }

    bb79: {
        _403 = panic(const "assertion failed: yes!(1.5f32, ..= 1.5f32)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:5: 47:37
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:5: 47:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb80: {
        _407 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _540 = const _;                  // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<f32>, val: Unevaluated(range_to_inclusive, [], Some(promoted[9])) }
        _409 = _540;                     // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _539 = const _;                  // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_to_inclusive, [], Some(promoted[8])) }
        _411 = _539;                     // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _410 = _411;                     // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _408 = RangeToInclusive::<f32>::contains::<f32>(move _409, move _410) -> bb81; // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<f32>, &'b f32) -> bool {RangeToInclusive::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb81: {
        _413 = &_407;                    // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _414 = &_408;                    // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _412 = (move _413, move _414);   // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _415 = (_412.0: &bool);          // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _416 = (_412.1: &bool);          // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _419 = (*_415);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _420 = (*_416);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _418 = Eq(move _419, move _420); // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _417 = Not(move _418);           // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _417) -> [0: bb83, otherwise: bb82]; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb82: {
        _421 = const core::panicking::AssertKind::Eq; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _423 = const core::panicking::AssertKind::Eq; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _425 = _415;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _424 = _425;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _427 = _416;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _426 = _427;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _428 = Option::<Arguments<'_>>::None; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _422 = assert_failed::<bool, bool>(move _423, move _424, move _426, move _428); // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb83: {
        _406 = _407;                     // scope 66 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _405 = Not(move _406);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:13: 48:38
        _404 = Not(move _405);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:5: 48:39
        switchInt(move _404) -> [0: bb85, otherwise: bb84]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:5: 48:39
    }

    bb84: {
        _429 = panic(const "assertion failed: !yes!(1.6f32, ..= - 1.5f32)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:5: 48:39
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:5: 48:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb85: {
        _432 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _538 = const _;                  // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<f64>, val: Unevaluated(range_to_inclusive, [], Some(promoted[7])) }
        _434 = _538;                     // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _537 = const _;                  // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_to_inclusive, [], Some(promoted[6])) }
        _436 = _537;                     // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _435 = _436;                     // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _433 = RangeToInclusive::<f64>::contains::<f64>(move _434, move _435) -> bb86; // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<f64>, &'b f64) -> bool {RangeToInclusive::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb86: {
        _438 = &_432;                    // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _439 = &_433;                    // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _437 = (move _438, move _439);   // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _440 = (_437.0: &bool);          // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _441 = (_437.1: &bool);          // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _444 = (*_440);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _445 = (*_441);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _443 = Eq(move _444, move _445); // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _442 = Not(move _443);           // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _442) -> [0: bb88, otherwise: bb87]; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb87: {
        _446 = const core::panicking::AssertKind::Eq; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _448 = const core::panicking::AssertKind::Eq; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _450 = _440;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _449 = _450;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _452 = _441;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _451 = _452;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _453 = Option::<Arguments<'_>>::None; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _447 = assert_failed::<bool, bool>(move _448, move _449, move _451, move _453); // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb88: {
        _431 = _432;                     // scope 70 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _430 = Not(move _431);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:5: 51:59
        switchInt(move _430) -> [0: bb90, otherwise: bb89]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:5: 51:59
    }

    bb89: {
        _454 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, ..= f64 :: NEG_INFINITY)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:5: 51:59
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:5: 51:59
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb90: {
        _457 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _536 = const _;                  // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<f64>, val: Unevaluated(range_to_inclusive, [], Some(promoted[5])) }
        _459 = _536;                     // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _535 = const _;                  // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_to_inclusive, [], Some(promoted[4])) }
        _461 = _535;                     // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _460 = _461;                     // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _458 = RangeToInclusive::<f64>::contains::<f64>(move _459, move _460) -> bb91; // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<f64>, &'b f64) -> bool {RangeToInclusive::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb91: {
        _463 = &_457;                    // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _464 = &_458;                    // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _462 = (move _463, move _464);   // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _465 = (_462.0: &bool);          // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _466 = (_462.1: &bool);          // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _469 = (*_465);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _470 = (*_466);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _468 = Eq(move _469, move _470); // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _467 = Not(move _468);           // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _467) -> [0: bb93, otherwise: bb92]; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb92: {
        _471 = const core::panicking::AssertKind::Eq; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _473 = const core::panicking::AssertKind::Eq; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _475 = _465;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _474 = _475;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _477 = _466;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _476 = _477;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _478 = Option::<Arguments<'_>>::None; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _472 = assert_failed::<bool, bool>(move _473, move _474, move _476, move _478); // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb93: {
        _456 = _457;                     // scope 74 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _455 = Not(move _456);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:5: 52:48
        switchInt(move _455) -> [0: bb95, otherwise: bb94]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:5: 52:48
    }

    bb94: {
        _479 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, ..= 1.0f64)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:5: 52:48
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:5: 52:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb95: {
        _482 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _534 = const _;                  // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<f64>, val: Unevaluated(range_to_inclusive, [], Some(promoted[3])) }
        _484 = _534;                     // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _533 = const _;                  // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_to_inclusive, [], Some(promoted[2])) }
        _486 = _533;                     // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _485 = _486;                     // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _483 = RangeToInclusive::<f64>::contains::<f64>(move _484, move _485) -> bb96; // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<f64>, &'b f64) -> bool {RangeToInclusive::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb96: {
        _488 = &_482;                    // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _489 = &_483;                    // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _487 = (move _488, move _489);   // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _490 = (_487.0: &bool);          // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _491 = (_487.1: &bool);          // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _494 = (*_490);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _495 = (*_491);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _493 = Eq(move _494, move _495); // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _492 = Not(move _493);           // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _492) -> [0: bb98, otherwise: bb97]; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb97: {
        _496 = const core::panicking::AssertKind::Eq; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _498 = const core::panicking::AssertKind::Eq; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _500 = _490;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _499 = _500;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _502 = _491;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _501 = _502;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _503 = Option::<Arguments<'_>>::None; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _497 = assert_failed::<bool, bool>(move _498, move _499, move _501, move _503); // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb98: {
        _481 = _482;                     // scope 78 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _480 = Not(move _481);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:5: 53:37
        switchInt(move _480) -> [0: bb100, otherwise: bb99]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:5: 53:37
    }

    bb99: {
        _504 = panic(const "assertion failed: yes!(1.5f64, ..= 1.5f64)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:5: 53:37
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:5: 53:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb100: {
        _508 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _532 = const _;                  // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeToInclusive<f64>, val: Unevaluated(range_to_inclusive, [], Some(promoted[1])) }
        _510 = _532;                     // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _531 = const _;                  // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_to_inclusive, [], Some(promoted[0])) }
        _512 = _531;                     // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _511 = _512;                     // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _509 = RangeToInclusive::<f64>::contains::<f64>(move _510, move _511) -> bb101; // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeToInclusive<f64>, &'b f64) -> bool {RangeToInclusive::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb101: {
        _514 = &_508;                    // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _515 = &_509;                    // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _513 = (move _514, move _515);   // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _516 = (_513.0: &bool);          // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _517 = (_513.1: &bool);          // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _520 = (*_516);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _521 = (*_517);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _519 = Eq(move _520, move _521); // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _518 = Not(move _519);           // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _518) -> [0: bb103, otherwise: bb102]; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb102: {
        _522 = const core::panicking::AssertKind::Eq; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _524 = const core::panicking::AssertKind::Eq; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _526 = _516;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _525 = _526;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _528 = _517;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _527 = _528;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _529 = Option::<Arguments<'_>>::None; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _523 = assert_failed::<bool, bool>(move _524, move _525, move _527, move _529); // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb103: {
        _507 = _508;                     // scope 82 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _506 = Not(move _507);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:13: 54:38
        _505 = Not(move _506);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:5: 54:39
        switchInt(move _505) -> [0: bb105, otherwise: bb104]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:5: 54:39
    }

    bb104: {
        _530 = panic(const "assertion failed: !yes!(1.6f64, ..= - 1.5f64)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:5: 54:39
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:5: 54:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb105: {
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:55:2: 55:2
    }
}

promoted[0] in range_to_inclusive: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:19: 54:25

    bb0: {
        _1 = const 1.6000000000000001f64; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:19: 54:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[1] in range_to_inclusive: &RangeToInclusive<f64> = {
    let mut _0: &std::ops::RangeToInclusive<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:27: 54:37

    bb0: {
        _1 = RangeToInclusive::<f64> { end: const -1.5f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:54:27: 54:37
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[2] in range_to_inclusive: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:18: 53:24

    bb0: {
        _1 = const 1.5f64;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:18: 53:24
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[3] in range_to_inclusive: &RangeToInclusive<f64> = {
    let mut _0: &std::ops::RangeToInclusive<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:26: 53:35

    bb0: {
        _1 = RangeToInclusive::<f64> { end: const 1.5f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:53:26: 53:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[4] in range_to_inclusive: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:18: 52:35

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:18: 52:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[5] in range_to_inclusive: &RangeToInclusive<f64> = {
    let mut _0: &std::ops::RangeToInclusive<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:37: 52:46

    bb0: {
        _1 = RangeToInclusive::<f64> { end: const 1f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:52:37: 52:46
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[6] in range_to_inclusive: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:18: 51:35

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:18: 51:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[7] in range_to_inclusive: &RangeToInclusive<f64> = {
    let mut _0: &std::ops::RangeToInclusive<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:37: 51:57

    bb0: {
        _1 = RangeToInclusive::<f64> { end: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:51:37: 51:57
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[8] in range_to_inclusive: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:19: 48:25

    bb0: {
        _1 = const 1.60000002f32;        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:19: 48:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[9] in range_to_inclusive: &RangeToInclusive<f32> = {
    let mut _0: &std::ops::RangeToInclusive<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:27: 48:37

    bb0: {
        _1 = RangeToInclusive::<f32> { end: const -1.5f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:48:27: 48:37
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[10] in range_to_inclusive: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:18: 47:24

    bb0: {
        _1 = const 1.5f32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:18: 47:24
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[11] in range_to_inclusive: &RangeToInclusive<f32> = {
    let mut _0: &std::ops::RangeToInclusive<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:26: 47:35

    bb0: {
        _1 = RangeToInclusive::<f32> { end: const 1.5f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:47:26: 47:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[12] in range_to_inclusive: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:18: 46:35

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:18: 46:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[13] in range_to_inclusive: &RangeToInclusive<f32> = {
    let mut _0: &std::ops::RangeToInclusive<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:37: 46:46

    bb0: {
        _1 = RangeToInclusive::<f32> { end: const 1f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:46:37: 46:46
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[14] in range_to_inclusive: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:18: 45:35

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:18: 45:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[15] in range_to_inclusive: &RangeToInclusive<f32> = {
    let mut _0: &std::ops::RangeToInclusive<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:37: 45:57

    bb0: {
        _1 = RangeToInclusive::<f32> { end: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:45:37: 45:57
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[16] in range_to_inclusive: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:19: 42:22

    bb0: {
        _1 = const 'b';                  // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:19: 42:22
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[17] in range_to_inclusive: &RangeToInclusive<char> = {
    let mut _0: &std::ops::RangeToInclusive<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:24: 42:30

    bb0: {
        _1 = RangeToInclusive::<char> { end: const 'a' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:42:24: 42:30
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[18] in range_to_inclusive: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:18: 41:21

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:18: 41:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[19] in range_to_inclusive: &RangeToInclusive<char> = {
    let mut _0: &std::ops::RangeToInclusive<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:23: 41:29

    bb0: {
        _1 = RangeToInclusive::<char> { end: const 'a' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:41:23: 41:29
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[20] in range_to_inclusive: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:18: 40:25

    bb0: {
        _1 = const '\0';                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:18: 40:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[21] in range_to_inclusive: &RangeToInclusive<char> = {
    let mut _0: &std::ops::RangeToInclusive<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:27: 40:33

    bb0: {
        _1 = RangeToInclusive::<char> { end: const 'a' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:40:27: 40:33
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[22] in range_to_inclusive: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:18: 39:25

    bb0: {
        _1 = const '\0';                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:18: 39:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[23] in range_to_inclusive: &RangeToInclusive<char> = {
    let mut _0: &std::ops::RangeToInclusive<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:27: 39:37

    bb0: {
        _1 = RangeToInclusive::<char> { end: const '\0' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:39:27: 39:37
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[24] in range_to_inclusive: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:19: 36:21

    bb0: {
        _1 = const -4_i32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:19: 36:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[25] in range_to_inclusive: &RangeToInclusive<i32> = {
    let mut _0: &std::ops::RangeToInclusive<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:23: 36:28

    bb0: {
        _1 = RangeToInclusive::<i32> { end: const -5_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:36:23: 36:28
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[26] in range_to_inclusive: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:18: 35:20

    bb0: {
        _1 = const -5_i32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:18: 35:20
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[27] in range_to_inclusive: &RangeToInclusive<i32> = {
    let mut _0: &std::ops::RangeToInclusive<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:22: 35:27

    bb0: {
        _1 = RangeToInclusive::<i32> { end: const -5_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:35:22: 35:27
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[28] in range_to_inclusive: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i16;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:18: 34:26

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:18: 34:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[29] in range_to_inclusive: &RangeToInclusive<i16> = {
    let mut _0: &std::ops::RangeToInclusive<i16>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:28: 34:33

    bb0: {
        _1 = RangeToInclusive::<i16> { end: const -5_i16 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:34:28: 34:33
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[30] in range_to_inclusive: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i16;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:18: 33:26

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:18: 33:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[31] in range_to_inclusive: &RangeToInclusive<i16> = {
    let mut _0: &std::ops::RangeToInclusive<i16>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:28: 33:32

    bb0: {
        _1 = RangeToInclusive::<i16> { end: const 0_i16 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:33:28: 33:32
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[32] in range_to_inclusive: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i16;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:18: 32:26

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:18: 32:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[33] in range_to_inclusive: &RangeToInclusive<i16> = {
    let mut _0: &std::ops::RangeToInclusive<i16>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:28: 32:39

    bb0: {
        _1 = RangeToInclusive::<i16> { end: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:32:28: 32:39
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[34] in range_to_inclusive: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:19: 29:22

    bb0: {
        _1 = const 6_u8;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:19: 29:22
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[35] in range_to_inclusive: &RangeToInclusive<u8> = {
    let mut _0: &std::ops::RangeToInclusive<u8>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:24: 29:28

    bb0: {
        _1 = RangeToInclusive::<u8> { end: const 5_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:29:24: 29:28
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[36] in range_to_inclusive: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:18: 28:21

    bb0: {
        _1 = const 5_u8;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:18: 28:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[37] in range_to_inclusive: &RangeToInclusive<u8> = {
    let mut _0: &std::ops::RangeToInclusive<u8>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:23: 28:27

    bb0: {
        _1 = RangeToInclusive::<u8> { end: const 5_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:28:23: 28:27
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[38] in range_to_inclusive: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:18: 27:25

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:18: 27:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[39] in range_to_inclusive: &RangeToInclusive<u8> = {
    let mut _0: &std::ops::RangeToInclusive<u8>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:27: 27:31

    bb0: {
        _1 = RangeToInclusive::<u8> { end: const 5_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:27:27: 27:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[40] in range_to_inclusive: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:18: 26:25

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:18: 26:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[41] in range_to_inclusive: &RangeToInclusive<u8> = {
    let mut _0: &std::ops::RangeToInclusive<u8>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeToInclusive<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:27: 26:37

    bb0: {
        _1 = RangeToInclusive::<u8> { end: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:26:27: 26:37
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

fn range_to() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:57:15: 57:15
    let mut _1: bool;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:5: 62:28
    let mut _2: bool;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _3: bool;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _5: &std::ops::RangeTo<u8>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _6: &u8;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _7: &u8;                         // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _8: (&bool, &bool);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: !;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:5: 62:28
    let mut _26: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:5: 63:28
    let mut _27: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _28: bool;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _30: &std::ops::RangeTo<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _31: &u8;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _32: &u8;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _33: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _34: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _35: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _43: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _44: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _45: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _46: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _47: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _48: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _50: !;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:5: 63:28
    let mut _51: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:5: 64:29
    let mut _52: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:13: 64:28
    let mut _53: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _54: bool;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _56: &std::ops::RangeTo<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _57: &u8;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _58: &u8;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _59: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _60: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _61: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _69: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _70: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _71: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _72: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _73: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _74: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _76: !;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:5: 64:29
    let mut _77: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:5: 65:29
    let mut _78: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:13: 65:28
    let mut _79: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _80: bool;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _82: &std::ops::RangeTo<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _83: &u8;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _84: &u8;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _85: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _87: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _93: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _95: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _96: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _97: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _98: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _99: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _100: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _102: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:5: 65:29
    let mut _103: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:5: 69:34
    let mut _104: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _105: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _107: &std::ops::RangeTo<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _108: &u8;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _109: &u8;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _110: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _111: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _112: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _115: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _116: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _117: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _118: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _120: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _121: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _122: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _123: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _124: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _125: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _127: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:5: 69:34
    let mut _128: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:5: 70:28
    let mut _129: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _130: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _132: &std::ops::RangeTo<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _133: &u8;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _134: &u8;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _135: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _136: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _137: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _140: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _141: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _142: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _143: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _145: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _146: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _147: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _148: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _149: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _150: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _152: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:5: 70:28
    let mut _153: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:5: 71:29
    let mut _154: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:13: 71:28
    let mut _155: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _156: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _158: &std::ops::RangeTo<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _159: &u8;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _160: &u8;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _161: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _162: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _163: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _166: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _167: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _168: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _169: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _171: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _172: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _173: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _174: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _175: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _176: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _177: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _178: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:5: 71:29
    let mut _179: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:5: 72:29
    let mut _180: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:13: 72:28
    let mut _181: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _182: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _184: &std::ops::RangeTo<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _185: &u8;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _186: &u8;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _187: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _188: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _189: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _192: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _193: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _194: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _195: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _197: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _198: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _199: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _200: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _201: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _202: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _203: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _204: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:5: 72:29
    let mut _205: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:5: 76:36
    let mut _206: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _207: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _209: &std::ops::RangeTo<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _210: &i16;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _211: &i16;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _212: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _213: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _214: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _217: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _218: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _219: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _220: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _222: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _223: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _224: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _225: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _226: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _227: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _228: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _229: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:5: 76:36
    let mut _230: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:5: 77:33
    let mut _231: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _232: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _234: &std::ops::RangeTo<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _235: &i16;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _236: &i16;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _237: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _238: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _239: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _242: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _243: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _244: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _245: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _247: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _248: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _249: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _250: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _251: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _252: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _253: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _254: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:5: 77:33
    let mut _255: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:5: 78:28
    let mut _256: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _257: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _259: &std::ops::RangeTo<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _260: &i32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _261: &i32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _262: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _263: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _264: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _267: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _268: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _269: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _270: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _272: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _273: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _274: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _275: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _276: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _277: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _278: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _279: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:5: 78:28
    let mut _280: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:5: 79:29
    let mut _281: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:13: 79:28
    let mut _282: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _283: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _285: &std::ops::RangeTo<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _286: &i32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _287: &i32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _288: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _289: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _290: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _293: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _294: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _295: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _296: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _298: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _299: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _300: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _301: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _302: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _303: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _304: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _305: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:5: 79:29
    let mut _306: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:5: 82:38
    let mut _307: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _308: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _310: &std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _311: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _312: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _313: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _314: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _315: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _318: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _319: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _320: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _321: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _323: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _324: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _325: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _326: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _327: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _328: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _329: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _330: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:5: 82:38
    let mut _331: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:5: 83:34
    let mut _332: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _333: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _335: &std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _336: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _337: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _338: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _339: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _340: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _343: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _344: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _345: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _346: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _348: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _349: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _350: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _351: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _352: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _353: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _354: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _355: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:5: 83:34
    let mut _356: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:5: 84:30
    let mut _357: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _358: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _360: &std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _361: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _362: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _363: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _364: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _365: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _368: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _369: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _370: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _371: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _373: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _374: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _375: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _376: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _377: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _378: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _379: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _380: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:5: 84:30
    let mut _381: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:5: 85:31
    let mut _382: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:13: 85:30
    let mut _383: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _384: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _386: &std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _387: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _388: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _389: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _390: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _391: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _394: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _395: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _396: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _397: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _399: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _400: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _401: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _402: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _403: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _404: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _405: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _406: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:5: 85:31
    let mut _407: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:5: 86:31
    let mut _408: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:13: 86:30
    let mut _409: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _410: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _412: &std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _413: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _414: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _415: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _416: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _417: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _420: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _421: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _422: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _423: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _425: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _426: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _427: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _428: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _429: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _430: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _431: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _432: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:5: 86:31
    let mut _433: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:5: 89:47
    let mut _434: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _435: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _437: &std::ops::RangeTo<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _438: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _439: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _440: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _441: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _442: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _445: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _446: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _447: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _448: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _450: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _451: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _452: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _453: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _454: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _455: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _456: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _457: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:5: 89:47
    let mut _458: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:5: 90:37
    let mut _459: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:13: 90:36
    let mut _460: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _461: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _463: &std::ops::RangeTo<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _464: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _465: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _466: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _467: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _468: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _471: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _472: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _473: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _474: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _476: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _477: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _478: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _479: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _480: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _481: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _482: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _483: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:5: 90:37
    let mut _484: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:5: 92:33
    let mut _485: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _486: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _488: &std::ops::RangeTo<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _489: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _490: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _491: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _492: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _493: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _496: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _497: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _498: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _499: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _501: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _502: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _503: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _504: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _505: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _506: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _507: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _508: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:5: 92:33
    let mut _509: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:5: 93:37
    let mut _510: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:13: 93:36
    let mut _511: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _512: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _514: &std::ops::RangeTo<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _515: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _516: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _517: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _518: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _519: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _522: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _523: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _524: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _525: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _527: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _528: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _529: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _530: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _531: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _532: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _533: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _534: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:5: 93:37
    let mut _535: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:5: 96:47
    let mut _536: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _537: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _539: &std::ops::RangeTo<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _540: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _541: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _542: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _543: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _544: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _547: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _548: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _549: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _550: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _552: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _553: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _554: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _555: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _556: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _557: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _558: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _559: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:5: 96:47
    let mut _560: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:5: 97:37
    let mut _561: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:13: 97:36
    let mut _562: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _563: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _565: &std::ops::RangeTo<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _566: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _567: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _568: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _569: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _570: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _573: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _574: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _575: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _576: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _578: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _579: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _580: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _581: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _582: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _583: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _584: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _585: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:5: 97:37
    let mut _586: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:5: 99:33
    let mut _587: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _588: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _590: &std::ops::RangeTo<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _591: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _592: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _593: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _594: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _595: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _598: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _599: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _600: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _601: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _603: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _604: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _605: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _606: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _607: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _608: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _609: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _610: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:5: 99:33
    let mut _611: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:5: 100:37
    let mut _612: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:13: 100:36
    let mut _613: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _614: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _616: &std::ops::RangeTo<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _617: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _618: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _619: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _620: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _621: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _624: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _625: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _626: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _627: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _629: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _630: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _631: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _632: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _633: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _634: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _635: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _636: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:5: 100:37
    scope 1 {
        debug m => _3;                   // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _4: bool;                    // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _685: &u8;               // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _686: &std::ops::RangeTo<u8>; // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 2 {
            debug c => _4;               // in scope 2 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _11: &bool;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _12: &bool;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _11;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _12;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _17: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _17;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 5 {
        debug m => _28;                  // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _29: bool;                   // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _683: &u8;               // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _684: &std::ops::RangeTo<u8>; // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 6 {
            debug c => _29;              // in scope 6 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _36: &bool;              // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _37: &bool;              // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 7 {
                debug left_val => _36;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _37;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _42: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _42;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 9 {
        debug m => _54;                  // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _55: bool;                   // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _681: &u8;               // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _682: &std::ops::RangeTo<u8>; // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 10 {
            debug c => _55;              // in scope 10 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _62: &bool;              // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _63: &bool;              // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 11 {
                debug left_val => _62;   // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _63;  // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _68: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 12 {
                    debug kind => _68;   // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 13 {
        debug m => _80;                  // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _81: bool;                   // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _679: &u8;               // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _680: &std::ops::RangeTo<u8>; // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 14 {
            debug c => _81;              // in scope 14 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _88: &bool;              // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _89: &bool;              // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 15 {
                debug left_val => _88;   // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _89;  // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _94: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 16 {
                    debug kind => _94;   // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 17 {
        debug m => _105;                 // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _106: bool;                  // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _677: &u8;               // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _678: &std::ops::RangeTo<u8>; // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 18 {
            debug c => _106;             // in scope 18 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _113: &bool;             // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _114: &bool;             // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 19 {
                debug left_val => _113;  // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _114; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _119: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 20 {
                    debug kind => _119;  // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 21 {
        debug m => _130;                 // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _131: bool;                  // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _675: &u8;               // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _676: &std::ops::RangeTo<u8>; // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 22 {
            debug c => _131;             // in scope 22 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _138: &bool;             // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _139: &bool;             // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 23 {
                debug left_val => _138;  // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _139; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _144: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 24 {
                    debug kind => _144;  // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 25 {
        debug m => _156;                 // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _157: bool;                  // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _673: &u8;               // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _674: &std::ops::RangeTo<u8>; // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 26 {
            debug c => _157;             // in scope 26 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _164: &bool;             // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _165: &bool;             // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 27 {
                debug left_val => _164;  // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _165; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _170: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 28 {
                    debug kind => _170;  // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 29 {
        debug m => _182;                 // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _183: bool;                  // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _671: &u8;               // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _672: &std::ops::RangeTo<u8>; // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 30 {
            debug c => _183;             // in scope 30 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _190: &bool;             // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _191: &bool;             // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 31 {
                debug left_val => _190;  // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _191; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _196: core::panicking::AssertKind; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 32 {
                    debug kind => _196;  // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 33 {
        debug m => _207;                 // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _208: bool;                  // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _669: &i16;              // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _670: &std::ops::RangeTo<i16>; // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 34 {
            debug c => _208;             // in scope 34 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _215: &bool;             // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _216: &bool;             // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 35 {
                debug left_val => _215;  // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _216; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _221: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 36 {
                    debug kind => _221;  // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 37 {
        debug m => _232;                 // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _233: bool;                  // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _667: &i16;              // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _668: &std::ops::RangeTo<i16>; // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 38 {
            debug c => _233;             // in scope 38 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _240: &bool;             // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _241: &bool;             // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 39 {
                debug left_val => _240;  // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _241; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _246: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 40 {
                    debug kind => _246;  // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 41 {
        debug m => _257;                 // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _258: bool;                  // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _665: &i32;              // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _666: &std::ops::RangeTo<i32>; // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 42 {
            debug c => _258;             // in scope 42 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _265: &bool;             // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _266: &bool;             // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 43 {
                debug left_val => _265;  // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _266; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _271: core::panicking::AssertKind; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 44 {
                    debug kind => _271;  // in scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 45 {
        debug m => _283;                 // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _284: bool;                  // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _663: &i32;              // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _664: &std::ops::RangeTo<i32>; // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 46 {
            debug c => _284;             // in scope 46 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _291: &bool;             // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _292: &bool;             // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 47 {
                debug left_val => _291;  // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _292; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _297: core::panicking::AssertKind; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 48 {
                    debug kind => _297;  // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 49 {
        debug m => _308;                 // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _309: bool;                  // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _661: &char;             // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _662: &std::ops::RangeTo<char>; // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 50 {
            debug c => _309;             // in scope 50 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _316: &bool;             // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _317: &bool;             // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 51 {
                debug left_val => _316;  // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _317; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _322: core::panicking::AssertKind; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 52 {
                    debug kind => _322;  // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 53 {
        debug m => _333;                 // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _334: bool;                  // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _659: &char;             // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _660: &std::ops::RangeTo<char>; // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 54 {
            debug c => _334;             // in scope 54 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _341: &bool;             // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _342: &bool;             // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 55 {
                debug left_val => _341;  // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _342; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _347: core::panicking::AssertKind; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 56 {
                    debug kind => _347;  // in scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 57 {
        debug m => _358;                 // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _359: bool;                  // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _657: &char;             // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _658: &std::ops::RangeTo<char>; // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 58 {
            debug c => _359;             // in scope 58 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _366: &bool;             // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _367: &bool;             // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 59 {
                debug left_val => _366;  // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _367; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _372: core::panicking::AssertKind; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 60 {
                    debug kind => _372;  // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 61 {
        debug m => _384;                 // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _385: bool;                  // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _655: &char;             // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _656: &std::ops::RangeTo<char>; // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 62 {
            debug c => _385;             // in scope 62 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _392: &bool;             // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _393: &bool;             // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 63 {
                debug left_val => _392;  // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _393; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _398: core::panicking::AssertKind; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 64 {
                    debug kind => _398;  // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 65 {
        debug m => _410;                 // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _411: bool;                  // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _653: &char;             // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _654: &std::ops::RangeTo<char>; // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 66 {
            debug c => _411;             // in scope 66 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _418: &bool;             // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _419: &bool;             // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 67 {
                debug left_val => _418;  // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _419; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _424: core::panicking::AssertKind; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 68 {
                    debug kind => _424;  // in scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 69 {
        debug m => _435;                 // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _436: bool;                  // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _651: &f32;              // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _652: &std::ops::RangeTo<f32>; // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 70 {
            debug c => _436;             // in scope 70 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _443: &bool;             // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _444: &bool;             // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 71 {
                debug left_val => _443;  // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _444; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _449: core::panicking::AssertKind; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 72 {
                    debug kind => _449;  // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 73 {
        debug m => _461;                 // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _462: bool;                  // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _649: &f32;              // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _650: &std::ops::RangeTo<f32>; // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 74 {
            debug c => _462;             // in scope 74 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _469: &bool;             // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _470: &bool;             // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 75 {
                debug left_val => _469;  // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _470; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _475: core::panicking::AssertKind; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 76 {
                    debug kind => _475;  // in scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 77 {
        debug m => _486;                 // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _487: bool;                  // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _647: &f32;              // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _648: &std::ops::RangeTo<f32>; // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 78 {
            debug c => _487;             // in scope 78 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _494: &bool;             // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _495: &bool;             // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 79 {
                debug left_val => _494;  // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _495; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _500: core::panicking::AssertKind; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 80 {
                    debug kind => _500;  // in scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 81 {
        debug m => _512;                 // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _513: bool;                  // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _645: &f32;              // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _646: &std::ops::RangeTo<f32>; // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 82 {
            debug c => _513;             // in scope 82 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _520: &bool;             // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _521: &bool;             // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 83 {
                debug left_val => _520;  // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _521; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _526: core::panicking::AssertKind; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 84 {
                    debug kind => _526;  // in scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 85 {
        debug m => _537;                 // in scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _538: bool;                  // in scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _643: &f64;              // in scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _644: &std::ops::RangeTo<f64>; // in scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 86 {
            debug c => _538;             // in scope 86 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _545: &bool;             // in scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _546: &bool;             // in scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 87 {
                debug left_val => _545;  // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _546; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _551: core::panicking::AssertKind; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 88 {
                    debug kind => _551;  // in scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 89 {
        debug m => _563;                 // in scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _564: bool;                  // in scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _641: &f64;              // in scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _642: &std::ops::RangeTo<f64>; // in scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 90 {
            debug c => _564;             // in scope 90 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _571: &bool;             // in scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _572: &bool;             // in scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 91 {
                debug left_val => _571;  // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _572; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _577: core::panicking::AssertKind; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 92 {
                    debug kind => _577;  // in scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 93 {
        debug m => _588;                 // in scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _589: bool;                  // in scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _639: &f64;              // in scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _640: &std::ops::RangeTo<f64>; // in scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 94 {
            debug c => _589;             // in scope 94 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _596: &bool;             // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _597: &bool;             // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 95 {
                debug left_val => _596;  // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _597; // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _602: core::panicking::AssertKind; // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 96 {
                    debug kind => _602;  // in scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 97 {
        debug m => _614;                 // in scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _615: bool;                  // in scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _637: &f64;              // in scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _638: &std::ops::RangeTo<f64>; // in scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 98 {
            debug c => _615;             // in scope 98 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _622: &bool;             // in scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _623: &bool;             // in scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 99 {
                debug left_val => _622;  // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _623; // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _628: core::panicking::AssertKind; // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 100 {
                    debug kind => _628;  // in scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = const true;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _686 = const _;                  // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<u8>, val: Unevaluated(range_to, [], Some(promoted[49])) }
        _5 = _686;                       // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _685 = const _;                  // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to, [], Some(promoted[48])) }
        _7 = _685;                       // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _6 = _7;                         // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _4 = RangeTo::<u8>::contains::<u8>(move _5, move _6) -> bb1; // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<u8>, &'b u8) -> bool {RangeTo::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &_3;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _10 = &_4;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_8.0: &bool);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_8.1: &bool);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = assert_failed::<bool, bool>(move _19, move _20, move _22, move _24); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _3;                         // scope 2 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _1 = Not(move _2);               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:5: 62:28
        switchInt(move _1) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:5: 62:28
    }

    bb4: {
        _25 = panic(const "assertion failed: yes!(0u8, .. 1)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:5: 62:28
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:5: 62:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _28 = const true;                // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _684 = const _;                  // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<u8>, val: Unevaluated(range_to, [], Some(promoted[47])) }
        _30 = _684;                      // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _683 = const _;                  // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to, [], Some(promoted[46])) }
        _32 = _683;                      // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _31 = _32;                       // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _29 = RangeTo::<u8>::contains::<u8>(move _30, move _31) -> bb6; // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<u8>, &'b u8) -> bool {RangeTo::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb6: {
        _34 = &_28;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _35 = &_29;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _33 = (move _34, move _35);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _36 = (_33.0: &bool);            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _37 = (_33.1: &bool);            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _40 = (*_36);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _41 = (*_37);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _39 = Eq(move _40, move _41);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _38 = Not(move _39);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _38) -> [0: bb8, otherwise: bb7]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _42 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _44 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _46 = _36;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _46;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _37;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = _48;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _43 = assert_failed::<bool, bool>(move _44, move _45, move _47, move _49); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = _28;                       // scope 6 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _26 = Not(move _27);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:5: 63:28
        switchInt(move _26) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:5: 63:28
    }

    bb9: {
        _50 = panic(const "assertion failed: yes!(0u8, .. 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:5: 63:28
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:5: 63:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _54 = const false;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _682 = const _;                  // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<u8>, val: Unevaluated(range_to, [], Some(promoted[45])) }
        _56 = _682;                      // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _681 = const _;                  // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to, [], Some(promoted[44])) }
        _58 = _681;                      // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _57 = _58;                       // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _55 = RangeTo::<u8>::contains::<u8>(move _56, move _57) -> bb11; // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<u8>, &'b u8) -> bool {RangeTo::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb11: {
        _60 = &_54;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _61 = &_55;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _59 = (move _60, move _61);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _62 = (_59.0: &bool);            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _63 = (_59.1: &bool);            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _66 = (*_62);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _67 = (*_63);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _65 = Eq(move _66, move _67);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _64 = Not(move _65);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _64) -> [0: bb13, otherwise: bb12]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _68 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _70 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _72 = _62;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _72;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _63;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = _74;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _69 = assert_failed::<bool, bool>(move _70, move _71, move _73, move _75); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb13: {
        _53 = _54;                       // scope 10 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _52 = Not(move _53);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:13: 64:28
        _51 = Not(move _52);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:5: 64:29
        switchInt(move _51) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:5: 64:29
    }

    bb14: {
        _76 = panic(const "assertion failed: !yes!(5u8, .. 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:5: 64:29
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:5: 64:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _80 = const false;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _680 = const _;                  // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<u8>, val: Unevaluated(range_to, [], Some(promoted[43])) }
        _82 = _680;                      // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _679 = const _;                  // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to, [], Some(promoted[42])) }
        _84 = _679;                      // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _83 = _84;                       // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _81 = RangeTo::<u8>::contains::<u8>(move _82, move _83) -> bb16; // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<u8>, &'b u8) -> bool {RangeTo::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb16: {
        _86 = &_80;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _87 = &_81;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _87);      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _88 = (_85.0: &bool);            // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _89 = (_85.1: &bool);            // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _92 = (*_88);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _93 = (*_89);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _91 = Eq(move _92, move _93);    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _90 = Not(move _91);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _90) -> [0: bb18, otherwise: bb17]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _94 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _96 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _98 = _88;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _98;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _100 = _89;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = _100;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _95 = assert_failed::<bool, bool>(move _96, move _97, move _99, move _101); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb18: {
        _79 = _80;                       // scope 14 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _78 = Not(move _79);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:13: 65:28
        _77 = Not(move _78);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:5: 65:29
        switchInt(move _77) -> [0: bb20, otherwise: bb19]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:5: 65:29
    }

    bb19: {
        _102 = panic(const "assertion failed: !yes!(6u8, .. 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:5: 65:29
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:5: 65:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _105 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _678 = const _;                  // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<u8>, val: Unevaluated(range_to, [], Some(promoted[41])) }
        _107 = _678;                     // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _677 = const _;                  // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to, [], Some(promoted[40])) }
        _109 = _677;                     // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _108 = _109;                     // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _106 = RangeTo::<u8>::contains::<u8>(move _107, move _108) -> bb21; // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<u8>, &'b u8) -> bool {RangeTo::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb21: {
        _111 = &_105;                    // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _112 = &_106;                    // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _110 = (move _111, move _112);   // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _113 = (_110.0: &bool);          // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _114 = (_110.1: &bool);          // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _117 = (*_113);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _118 = (*_114);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _116 = Eq(move _117, move _118); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _115 = Not(move _116);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _115) -> [0: bb23, otherwise: bb22]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _119 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _121 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _123 = _113;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _122 = _123;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _125 = _114;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _124 = _125;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _126 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _120 = assert_failed::<bool, bool>(move _121, move _122, move _124, move _126); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb23: {
        _104 = _105;                     // scope 18 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _103 = Not(move _104);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:5: 69:34
        switchInt(move _103) -> [0: bb25, otherwise: bb24]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:5: 69:34
    }

    bb24: {
        _127 = panic(const "assertion failed: yes!(u8 :: MIN, .. NU8)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:5: 69:34
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:5: 69:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _130 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _676 = const _;                  // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<u8>, val: Unevaluated(range_to, [], Some(promoted[39])) }
        _132 = _676;                     // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _675 = const _;                  // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to, [], Some(promoted[38])) }
        _134 = _675;                     // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _133 = _134;                     // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _131 = RangeTo::<u8>::contains::<u8>(move _132, move _133) -> bb26; // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<u8>, &'b u8) -> bool {RangeTo::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb26: {
        _136 = &_130;                    // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _137 = &_131;                    // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _135 = (move _136, move _137);   // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _138 = (_135.0: &bool);          // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _139 = (_135.1: &bool);          // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _142 = (*_138);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _143 = (*_139);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _141 = Eq(move _142, move _143); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _140 = Not(move _141);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _140) -> [0: bb28, otherwise: bb27]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _144 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _146 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _148 = _138;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _147 = _148;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _150 = _139;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _149 = _150;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _151 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _145 = assert_failed::<bool, bool>(move _146, move _147, move _149, move _151); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb28: {
        _129 = _130;                     // scope 22 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _128 = Not(move _129);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:5: 70:28
        switchInt(move _128) -> [0: bb30, otherwise: bb29]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:5: 70:28
    }

    bb29: {
        _152 = panic(const "assertion failed: yes!(0u8, .. 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:5: 70:28
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:5: 70:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _156 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _674 = const _;                  // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<u8>, val: Unevaluated(range_to, [], Some(promoted[37])) }
        _158 = _674;                     // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _673 = const _;                  // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to, [], Some(promoted[36])) }
        _160 = _673;                     // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _159 = _160;                     // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _157 = RangeTo::<u8>::contains::<u8>(move _158, move _159) -> bb31; // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<u8>, &'b u8) -> bool {RangeTo::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb31: {
        _162 = &_156;                    // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _163 = &_157;                    // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _161 = (move _162, move _163);   // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _164 = (_161.0: &bool);          // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _165 = (_161.1: &bool);          // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _168 = (*_164);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _169 = (*_165);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _167 = Eq(move _168, move _169); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _166 = Not(move _167);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _166) -> [0: bb33, otherwise: bb32]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _170 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _172 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _174 = _164;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _173 = _174;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _176 = _165;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _175 = _176;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _177 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _171 = assert_failed::<bool, bool>(move _172, move _173, move _175, move _177); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb33: {
        _155 = _156;                     // scope 26 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _154 = Not(move _155);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:13: 71:28
        _153 = Not(move _154);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:5: 71:29
        switchInt(move _153) -> [0: bb35, otherwise: bb34]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:5: 71:29
    }

    bb34: {
        _178 = panic(const "assertion failed: !yes!(5u8, .. 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:5: 71:29
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:5: 71:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _182 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _672 = const _;                  // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<u8>, val: Unevaluated(range_to, [], Some(promoted[35])) }
        _184 = _672;                     // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _671 = const _;                  // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_to, [], Some(promoted[34])) }
        _186 = _671;                     // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _185 = _186;                     // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _183 = RangeTo::<u8>::contains::<u8>(move _184, move _185) -> bb36; // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<u8>, &'b u8) -> bool {RangeTo::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb36: {
        _188 = &_182;                    // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _189 = &_183;                    // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _187 = (move _188, move _189);   // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _190 = (_187.0: &bool);          // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _191 = (_187.1: &bool);          // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _194 = (*_190);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _195 = (*_191);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _193 = Eq(move _194, move _195); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _192 = Not(move _193);           // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _192) -> [0: bb38, otherwise: bb37]; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb37: {
        _196 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _198 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _200 = _190;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _199 = _200;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _202 = _191;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _201 = _202;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _203 = Option::<Arguments<'_>>::None; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _197 = assert_failed::<bool, bool>(move _198, move _199, move _201, move _203); // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb38: {
        _181 = _182;                     // scope 30 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _180 = Not(move _181);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:13: 72:28
        _179 = Not(move _180);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:5: 72:29
        switchInt(move _179) -> [0: bb40, otherwise: bb39]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:5: 72:29
    }

    bb39: {
        _204 = panic(const "assertion failed: !yes!(6u8, .. 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:5: 72:29
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:5: 72:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb40: {
        _207 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _670 = const _;                  // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<i16>, val: Unevaluated(range_to, [], Some(promoted[33])) }
        _209 = _670;                     // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _669 = const _;                  // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i16, val: Unevaluated(range_to, [], Some(promoted[32])) }
        _211 = _669;                     // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _210 = _211;                     // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _208 = RangeTo::<i16>::contains::<i16>(move _209, move _210) -> bb41; // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<i16>, &'b i16) -> bool {RangeTo::<i16>::contains::<i16>}, val: Value(<ZST>) }
    }

    bb41: {
        _213 = &_207;                    // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _214 = &_208;                    // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _212 = (move _213, move _214);   // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _215 = (_212.0: &bool);          // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _216 = (_212.1: &bool);          // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _219 = (*_215);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _220 = (*_216);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _218 = Eq(move _219, move _220); // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _217 = Not(move _218);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _217) -> [0: bb43, otherwise: bb42]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb42: {
        _221 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _223 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _225 = _215;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _224 = _225;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _227 = _216;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _226 = _227;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _228 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _222 = assert_failed::<bool, bool>(move _223, move _224, move _226, move _228); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb43: {
        _206 = _207;                     // scope 34 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _205 = Not(move _206);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:5: 76:36
        switchInt(move _205) -> [0: bb45, otherwise: bb44]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:5: 76:36
    }

    bb44: {
        _229 = panic(const "assertion failed: yes!(i16 :: MIN, .. NI16)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:5: 76:36
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:5: 76:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb45: {
        _232 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _668 = const _;                  // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<i16>, val: Unevaluated(range_to, [], Some(promoted[31])) }
        _234 = _668;                     // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _667 = const _;                  // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i16, val: Unevaluated(range_to, [], Some(promoted[30])) }
        _236 = _667;                     // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _235 = _236;                     // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _233 = RangeTo::<i16>::contains::<i16>(move _234, move _235) -> bb46; // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<i16>, &'b i16) -> bool {RangeTo::<i16>::contains::<i16>}, val: Value(<ZST>) }
    }

    bb46: {
        _238 = &_232;                    // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _239 = &_233;                    // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _237 = (move _238, move _239);   // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _240 = (_237.0: &bool);          // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _241 = (_237.1: &bool);          // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _244 = (*_240);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _245 = (*_241);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _243 = Eq(move _244, move _245); // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _242 = Not(move _243);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _242) -> [0: bb48, otherwise: bb47]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _246 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _248 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _250 = _240;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _249 = _250;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _252 = _241;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _251 = _252;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _253 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _247 = assert_failed::<bool, bool>(move _248, move _249, move _251, move _253); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb48: {
        _231 = _232;                     // scope 38 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _230 = Not(move _231);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:5: 77:33
        switchInt(move _230) -> [0: bb50, otherwise: bb49]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:5: 77:33
    }

    bb49: {
        _254 = panic(const "assertion failed: yes!(i16 :: MIN, .. 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:5: 77:33
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:5: 77:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb50: {
        _257 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _666 = const _;                  // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<i32>, val: Unevaluated(range_to, [], Some(promoted[29])) }
        _259 = _666;                     // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _665 = const _;                  // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_to, [], Some(promoted[28])) }
        _261 = _665;                     // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _260 = _261;                     // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _258 = RangeTo::<i32>::contains::<i32>(move _259, move _260) -> bb51; // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<i32>, &'b i32) -> bool {RangeTo::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb51: {
        _263 = &_257;                    // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _264 = &_258;                    // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _262 = (move _263, move _264);   // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _265 = (_262.0: &bool);          // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _266 = (_262.1: &bool);          // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _269 = (*_265);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _270 = (*_266);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _268 = Eq(move _269, move _270); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _267 = Not(move _268);           // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _267) -> [0: bb53, otherwise: bb52]; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb52: {
        _271 = const core::panicking::AssertKind::Eq; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _273 = const core::panicking::AssertKind::Eq; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _275 = _265;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _274 = _275;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _277 = _266;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _276 = _277;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _278 = Option::<Arguments<'_>>::None; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _272 = assert_failed::<bool, bool>(move _273, move _274, move _276, move _278); // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb53: {
        _256 = _257;                     // scope 42 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _255 = Not(move _256);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:5: 78:28
        switchInt(move _255) -> [0: bb55, otherwise: bb54]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:5: 78:28
    }

    bb54: {
        _279 = panic(const "assertion failed: yes!(- 6, .. - 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:5: 78:28
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:5: 78:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        _283 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _664 = const _;                  // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<i32>, val: Unevaluated(range_to, [], Some(promoted[27])) }
        _285 = _664;                     // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _663 = const _;                  // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_to, [], Some(promoted[26])) }
        _287 = _663;                     // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _286 = _287;                     // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _284 = RangeTo::<i32>::contains::<i32>(move _285, move _286) -> bb56; // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<i32>, &'b i32) -> bool {RangeTo::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb56: {
        _289 = &_283;                    // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _290 = &_284;                    // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _288 = (move _289, move _290);   // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _291 = (_288.0: &bool);          // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _292 = (_288.1: &bool);          // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _295 = (*_291);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _296 = (*_292);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _294 = Eq(move _295, move _296); // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _293 = Not(move _294);           // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _293) -> [0: bb58, otherwise: bb57]; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb57: {
        _297 = const core::panicking::AssertKind::Eq; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _299 = const core::panicking::AssertKind::Eq; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _301 = _291;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _300 = _301;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _303 = _292;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _302 = _303;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _304 = Option::<Arguments<'_>>::None; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _298 = assert_failed::<bool, bool>(move _299, move _300, move _302, move _304); // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb58: {
        _282 = _283;                     // scope 46 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _281 = Not(move _282);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:13: 79:28
        _280 = Not(move _281);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:5: 79:29
        switchInt(move _280) -> [0: bb60, otherwise: bb59]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:5: 79:29
    }

    bb59: {
        _305 = panic(const "assertion failed: !yes!(- 5, .. - 5)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:5: 79:29
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:5: 79:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb60: {
        _308 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _662 = const _;                  // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<char>, val: Unevaluated(range_to, [], Some(promoted[25])) }
        _310 = _662;                     // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _661 = const _;                  // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_to, [], Some(promoted[24])) }
        _312 = _661;                     // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _311 = _312;                     // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _309 = RangeTo::<char>::contains::<char>(move _310, move _311) -> bb61; // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<char>, &'b char) -> bool {RangeTo::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb61: {
        _314 = &_308;                    // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _315 = &_309;                    // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _313 = (move _314, move _315);   // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _316 = (_313.0: &bool);          // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _317 = (_313.1: &bool);          // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _320 = (*_316);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _321 = (*_317);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _319 = Eq(move _320, move _321); // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _318 = Not(move _319);           // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _318) -> [0: bb63, otherwise: bb62]; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _322 = const core::panicking::AssertKind::Eq; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _324 = const core::panicking::AssertKind::Eq; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _326 = _316;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _325 = _326;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _328 = _317;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _327 = _328;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _329 = Option::<Arguments<'_>>::None; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _323 = assert_failed::<bool, bool>(move _324, move _325, move _327, move _329); // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb63: {
        _307 = _308;                     // scope 50 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _306 = Not(move _307);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:5: 82:38
        switchInt(move _306) -> [0: bb65, otherwise: bb64]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:5: 82:38
    }

    bb64: {
        _330 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', .. \\'\\\\u{1}\\')"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:5: 82:38
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:5: 82:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb65: {
        _333 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _660 = const _;                  // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<char>, val: Unevaluated(range_to, [], Some(promoted[23])) }
        _335 = _660;                     // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _659 = const _;                  // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_to, [], Some(promoted[22])) }
        _337 = _659;                     // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _336 = _337;                     // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _334 = RangeTo::<char>::contains::<char>(move _335, move _336) -> bb66; // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<char>, &'b char) -> bool {RangeTo::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb66: {
        _339 = &_333;                    // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _340 = &_334;                    // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _338 = (move _339, move _340);   // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _341 = (_338.0: &bool);          // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _342 = (_338.1: &bool);          // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _345 = (*_341);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _346 = (*_342);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _344 = Eq(move _345, move _346); // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _343 = Not(move _344);           // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _343) -> [0: bb68, otherwise: bb67]; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb67: {
        _347 = const core::panicking::AssertKind::Eq; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _349 = const core::panicking::AssertKind::Eq; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _351 = _341;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _350 = _351;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _353 = _342;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _352 = _353;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _354 = Option::<Arguments<'_>>::None; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _348 = assert_failed::<bool, bool>(move _349, move _350, move _352, move _354); // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb68: {
        _332 = _333;                     // scope 54 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _331 = Not(move _332);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:5: 83:34
        switchInt(move _331) -> [0: bb70, otherwise: bb69]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:5: 83:34
    }

    bb69: {
        _355 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', .. \\'a\\')"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:5: 83:34
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:5: 83:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb70: {
        _358 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _658 = const _;                  // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<char>, val: Unevaluated(range_to, [], Some(promoted[21])) }
        _360 = _658;                     // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _657 = const _;                  // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_to, [], Some(promoted[20])) }
        _362 = _657;                     // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _361 = _362;                     // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _359 = RangeTo::<char>::contains::<char>(move _360, move _361) -> bb71; // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<char>, &'b char) -> bool {RangeTo::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb71: {
        _364 = &_358;                    // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _365 = &_359;                    // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _363 = (move _364, move _365);   // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _366 = (_363.0: &bool);          // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _367 = (_363.1: &bool);          // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _370 = (*_366);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _371 = (*_367);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _369 = Eq(move _370, move _371); // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _368 = Not(move _369);           // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _368) -> [0: bb73, otherwise: bb72]; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb72: {
        _372 = const core::panicking::AssertKind::Eq; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _374 = const core::panicking::AssertKind::Eq; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _376 = _366;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _375 = _376;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _378 = _367;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _377 = _378;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _379 = Option::<Arguments<'_>>::None; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _373 = assert_failed::<bool, bool>(move _374, move _375, move _377, move _379); // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb73: {
        _357 = _358;                     // scope 58 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _356 = Not(move _357);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:5: 84:30
        switchInt(move _356) -> [0: bb75, otherwise: bb74]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:5: 84:30
    }

    bb74: {
        _380 = panic(const "assertion failed: yes!(\\'a\\', .. \\'b\\')"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:5: 84:30
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:5: 84:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb75: {
        _384 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _656 = const _;                  // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<char>, val: Unevaluated(range_to, [], Some(promoted[19])) }
        _386 = _656;                     // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _655 = const _;                  // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_to, [], Some(promoted[18])) }
        _388 = _655;                     // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _387 = _388;                     // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _385 = RangeTo::<char>::contains::<char>(move _386, move _387) -> bb76; // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<char>, &'b char) -> bool {RangeTo::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb76: {
        _390 = &_384;                    // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _391 = &_385;                    // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _389 = (move _390, move _391);   // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _392 = (_389.0: &bool);          // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _393 = (_389.1: &bool);          // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _396 = (*_392);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _397 = (*_393);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _395 = Eq(move _396, move _397); // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _394 = Not(move _395);           // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _394) -> [0: bb78, otherwise: bb77]; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb77: {
        _398 = const core::panicking::AssertKind::Eq; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _400 = const core::panicking::AssertKind::Eq; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _402 = _392;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _401 = _402;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _404 = _393;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _403 = _404;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _405 = Option::<Arguments<'_>>::None; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _399 = assert_failed::<bool, bool>(move _400, move _401, move _403, move _405); // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb78: {
        _383 = _384;                     // scope 62 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _382 = Not(move _383);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:13: 85:30
        _381 = Not(move _382);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:5: 85:31
        switchInt(move _381) -> [0: bb80, otherwise: bb79]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:5: 85:31
    }

    bb79: {
        _406 = panic(const "assertion failed: !yes!(\\'a\\', .. \\'a\\')"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:5: 85:31
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:5: 85:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb80: {
        _410 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _654 = const _;                  // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<char>, val: Unevaluated(range_to, [], Some(promoted[17])) }
        _412 = _654;                     // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _653 = const _;                  // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_to, [], Some(promoted[16])) }
        _414 = _653;                     // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _413 = _414;                     // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _411 = RangeTo::<char>::contains::<char>(move _412, move _413) -> bb81; // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<char>, &'b char) -> bool {RangeTo::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb81: {
        _416 = &_410;                    // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _417 = &_411;                    // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _415 = (move _416, move _417);   // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _418 = (_415.0: &bool);          // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _419 = (_415.1: &bool);          // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _422 = (*_418);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _423 = (*_419);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _421 = Eq(move _422, move _423); // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _420 = Not(move _421);           // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _420) -> [0: bb83, otherwise: bb82]; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb82: {
        _424 = const core::panicking::AssertKind::Eq; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _426 = const core::panicking::AssertKind::Eq; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _428 = _418;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _427 = _428;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _430 = _419;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _429 = _430;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _431 = Option::<Arguments<'_>>::None; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _425 = assert_failed::<bool, bool>(move _426, move _427, move _429, move _431); // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb83: {
        _409 = _410;                     // scope 66 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _408 = Not(move _409);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:13: 86:30
        _407 = Not(move _408);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:5: 86:31
        switchInt(move _407) -> [0: bb85, otherwise: bb84]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:5: 86:31
    }

    bb84: {
        _432 = panic(const "assertion failed: !yes!(\\'b\\', .. \\'a\\')"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:5: 86:31
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:5: 86:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb85: {
        _435 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _652 = const _;                  // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<f32>, val: Unevaluated(range_to, [], Some(promoted[15])) }
        _437 = _652;                     // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _651 = const _;                  // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_to, [], Some(promoted[14])) }
        _439 = _651;                     // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _438 = _439;                     // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _436 = RangeTo::<f32>::contains::<f32>(move _437, move _438) -> bb86; // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<f32>, &'b f32) -> bool {RangeTo::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb86: {
        _441 = &_435;                    // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _442 = &_436;                    // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _440 = (move _441, move _442);   // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _443 = (_440.0: &bool);          // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _444 = (_440.1: &bool);          // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _447 = (*_443);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _448 = (*_444);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _446 = Eq(move _447, move _448); // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _445 = Not(move _446);           // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _445) -> [0: bb88, otherwise: bb87]; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb87: {
        _449 = const core::panicking::AssertKind::Eq; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _451 = const core::panicking::AssertKind::Eq; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _453 = _443;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _452 = _453;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _455 = _444;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _454 = _455;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _456 = Option::<Arguments<'_>>::None; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _450 = assert_failed::<bool, bool>(move _451, move _452, move _454, move _456); // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb88: {
        _434 = _435;                     // scope 70 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _433 = Not(move _434);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:5: 89:47
        switchInt(move _433) -> [0: bb90, otherwise: bb89]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:5: 89:47
    }

    bb89: {
        _457 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, .. 1.0f32)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:5: 89:47
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:5: 89:47
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb90: {
        _461 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _650 = const _;                  // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<f32>, val: Unevaluated(range_to, [], Some(promoted[13])) }
        _463 = _650;                     // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _649 = const _;                  // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_to, [], Some(promoted[12])) }
        _465 = _649;                     // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _464 = _465;                     // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _462 = RangeTo::<f32>::contains::<f32>(move _463, move _464) -> bb91; // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<f32>, &'b f32) -> bool {RangeTo::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb91: {
        _467 = &_461;                    // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _468 = &_462;                    // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _466 = (move _467, move _468);   // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _469 = (_466.0: &bool);          // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _470 = (_466.1: &bool);          // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _473 = (*_469);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _474 = (*_470);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _472 = Eq(move _473, move _474); // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _471 = Not(move _472);           // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _471) -> [0: bb93, otherwise: bb92]; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb92: {
        _475 = const core::panicking::AssertKind::Eq; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _477 = const core::panicking::AssertKind::Eq; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _479 = _469;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _478 = _479;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _481 = _470;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _480 = _481;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _482 = Option::<Arguments<'_>>::None; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _476 = assert_failed::<bool, bool>(move _477, move _478, move _480, move _482); // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb93: {
        _460 = _461;                     // scope 74 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _459 = Not(move _460);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:13: 90:36
        _458 = Not(move _459);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:5: 90:37
        switchInt(move _458) -> [0: bb95, otherwise: bb94]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:5: 90:37
    }

    bb94: {
        _483 = panic(const "assertion failed: !yes!(1.5f32, .. 1.5f32)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:5: 90:37
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:5: 90:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb95: {
        _486 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _648 = const _;                  // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<f32>, val: Unevaluated(range_to, [], Some(promoted[11])) }
        _488 = _648;                     // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _647 = const _;                  // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_to, [], Some(promoted[10])) }
        _490 = _647;                     // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _489 = _490;                     // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _487 = RangeTo::<f32>::contains::<f32>(move _488, move _489) -> bb96; // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<f32>, &'b f32) -> bool {RangeTo::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb96: {
        _492 = &_486;                    // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _493 = &_487;                    // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _491 = (move _492, move _493);   // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _494 = (_491.0: &bool);          // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _495 = (_491.1: &bool);          // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _498 = (*_494);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _499 = (*_495);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _497 = Eq(move _498, move _499); // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _496 = Not(move _497);           // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _496) -> [0: bb98, otherwise: bb97]; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb97: {
        _500 = const core::panicking::AssertKind::Eq; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _502 = const core::panicking::AssertKind::Eq; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _504 = _494;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _503 = _504;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _506 = _495;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _505 = _506;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _507 = Option::<Arguments<'_>>::None; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _501 = assert_failed::<bool, bool>(move _502, move _503, move _505, move _507); // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb98: {
        _485 = _486;                     // scope 78 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _484 = Not(move _485);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:5: 92:33
        switchInt(move _484) -> [0: bb100, otherwise: bb99]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:5: 92:33
    }

    bb99: {
        _508 = panic(const "assertion failed: yes!(1.5f32, .. E32)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:5: 92:33
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:5: 92:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb100: {
        _512 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _646 = const _;                  // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<f32>, val: Unevaluated(range_to, [], Some(promoted[9])) }
        _514 = _646;                     // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _645 = const _;                  // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_to, [], Some(promoted[8])) }
        _516 = _645;                     // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _515 = _516;                     // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _513 = RangeTo::<f32>::contains::<f32>(move _514, move _515) -> bb101; // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<f32>, &'b f32) -> bool {RangeTo::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb101: {
        _518 = &_512;                    // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _519 = &_513;                    // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _517 = (move _518, move _519);   // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _520 = (_517.0: &bool);          // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _521 = (_517.1: &bool);          // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _524 = (*_520);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _525 = (*_521);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _523 = Eq(move _524, move _525); // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _522 = Not(move _523);           // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _522) -> [0: bb103, otherwise: bb102]; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb102: {
        _526 = const core::panicking::AssertKind::Eq; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _528 = const core::panicking::AssertKind::Eq; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _530 = _520;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _529 = _530;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _532 = _521;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _531 = _532;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _533 = Option::<Arguments<'_>>::None; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _527 = assert_failed::<bool, bool>(move _528, move _529, move _531, move _533); // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb103: {
        _511 = _512;                     // scope 82 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _510 = Not(move _511);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:13: 93:36
        _509 = Not(move _510);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:5: 93:37
        switchInt(move _509) -> [0: bb105, otherwise: bb104]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:5: 93:37
    }

    bb104: {
        _534 = panic(const "assertion failed: !yes!(1.6f32, .. 1.5f32)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:5: 93:37
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:5: 93:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb105: {
        _537 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _644 = const _;                  // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<f64>, val: Unevaluated(range_to, [], Some(promoted[7])) }
        _539 = _644;                     // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _643 = const _;                  // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_to, [], Some(promoted[6])) }
        _541 = _643;                     // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _540 = _541;                     // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _538 = RangeTo::<f64>::contains::<f64>(move _539, move _540) -> bb106; // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<f64>, &'b f64) -> bool {RangeTo::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb106: {
        _543 = &_537;                    // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _544 = &_538;                    // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _542 = (move _543, move _544);   // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _545 = (_542.0: &bool);          // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _546 = (_542.1: &bool);          // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _549 = (*_545);                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _550 = (*_546);                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _548 = Eq(move _549, move _550); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _547 = Not(move _548);           // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _547) -> [0: bb108, otherwise: bb107]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb107: {
        _551 = const core::panicking::AssertKind::Eq; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _553 = const core::panicking::AssertKind::Eq; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _555 = _545;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _554 = _555;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _557 = _546;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _556 = _557;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _558 = Option::<Arguments<'_>>::None; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _552 = assert_failed::<bool, bool>(move _553, move _554, move _556, move _558); // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb108: {
        _536 = _537;                     // scope 86 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _535 = Not(move _536);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:5: 96:47
        switchInt(move _535) -> [0: bb110, otherwise: bb109]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:5: 96:47
    }

    bb109: {
        _559 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, .. 1.0f64)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:5: 96:47
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:5: 96:47
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb110: {
        _563 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _642 = const _;                  // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<f64>, val: Unevaluated(range_to, [], Some(promoted[5])) }
        _565 = _642;                     // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _641 = const _;                  // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_to, [], Some(promoted[4])) }
        _567 = _641;                     // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _566 = _567;                     // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _564 = RangeTo::<f64>::contains::<f64>(move _565, move _566) -> bb111; // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<f64>, &'b f64) -> bool {RangeTo::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb111: {
        _569 = &_563;                    // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _570 = &_564;                    // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _568 = (move _569, move _570);   // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _571 = (_568.0: &bool);          // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _572 = (_568.1: &bool);          // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _575 = (*_571);                  // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _576 = (*_572);                  // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _574 = Eq(move _575, move _576); // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _573 = Not(move _574);           // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _573) -> [0: bb113, otherwise: bb112]; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb112: {
        _577 = const core::panicking::AssertKind::Eq; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _579 = const core::panicking::AssertKind::Eq; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _581 = _571;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _580 = _581;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _583 = _572;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _582 = _583;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _584 = Option::<Arguments<'_>>::None; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _578 = assert_failed::<bool, bool>(move _579, move _580, move _582, move _584); // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb113: {
        _562 = _563;                     // scope 90 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _561 = Not(move _562);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:13: 97:36
        _560 = Not(move _561);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:5: 97:37
        switchInt(move _560) -> [0: bb115, otherwise: bb114]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:5: 97:37
    }

    bb114: {
        _585 = panic(const "assertion failed: !yes!(1.5f64, .. 1.5f64)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:5: 97:37
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:5: 97:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb115: {
        _588 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _640 = const _;                  // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<f64>, val: Unevaluated(range_to, [], Some(promoted[3])) }
        _590 = _640;                     // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _639 = const _;                  // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_to, [], Some(promoted[2])) }
        _592 = _639;                     // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _591 = _592;                     // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _589 = RangeTo::<f64>::contains::<f64>(move _590, move _591) -> bb116; // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<f64>, &'b f64) -> bool {RangeTo::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb116: {
        _594 = &_588;                    // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _595 = &_589;                    // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _593 = (move _594, move _595);   // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _596 = (_593.0: &bool);          // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _597 = (_593.1: &bool);          // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _600 = (*_596);                  // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _601 = (*_597);                  // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _599 = Eq(move _600, move _601); // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _598 = Not(move _599);           // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _598) -> [0: bb118, otherwise: bb117]; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb117: {
        _602 = const core::panicking::AssertKind::Eq; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _604 = const core::panicking::AssertKind::Eq; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _606 = _596;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _605 = _606;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _608 = _597;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _607 = _608;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _609 = Option::<Arguments<'_>>::None; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _603 = assert_failed::<bool, bool>(move _604, move _605, move _607, move _609); // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb118: {
        _587 = _588;                     // scope 94 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _586 = Not(move _587);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:5: 99:33
        switchInt(move _586) -> [0: bb120, otherwise: bb119]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:5: 99:33
    }

    bb119: {
        _610 = panic(const "assertion failed: yes!(1.5f64, .. E64)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:5: 99:33
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:5: 99:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb120: {
        _614 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _638 = const _;                  // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeTo<f64>, val: Unevaluated(range_to, [], Some(promoted[1])) }
        _616 = _638;                     // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _637 = const _;                  // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_to, [], Some(promoted[0])) }
        _618 = _637;                     // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _617 = _618;                     // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _615 = RangeTo::<f64>::contains::<f64>(move _616, move _617) -> bb121; // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeTo<f64>, &'b f64) -> bool {RangeTo::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb121: {
        _620 = &_614;                    // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _621 = &_615;                    // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _619 = (move _620, move _621);   // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _622 = (_619.0: &bool);          // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _623 = (_619.1: &bool);          // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _626 = (*_622);                  // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _627 = (*_623);                  // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _625 = Eq(move _626, move _627); // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _624 = Not(move _625);           // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _624) -> [0: bb123, otherwise: bb122]; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb122: {
        _628 = const core::panicking::AssertKind::Eq; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _630 = const core::panicking::AssertKind::Eq; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _632 = _622;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _631 = _632;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _634 = _623;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _633 = _634;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _635 = Option::<Arguments<'_>>::None; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _629 = assert_failed::<bool, bool>(move _630, move _631, move _633, move _635); // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb123: {
        _613 = _614;                     // scope 98 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _612 = Not(move _613);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:13: 100:36
        _611 = Not(move _612);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:5: 100:37
        switchInt(move _611) -> [0: bb125, otherwise: bb124]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:5: 100:37
    }

    bb124: {
        _636 = panic(const "assertion failed: !yes!(1.6f64, .. 1.5f64)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:5: 100:37
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:5: 100:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb125: {
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:101:2: 101:2
    }
}

promoted[0] in range_to: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:19: 100:25

    bb0: {
        _1 = const 1.6000000000000001f64; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:19: 100:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[1] in range_to: &RangeTo<f64> = {
    let mut _0: &std::ops::RangeTo<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<f64>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:27: 100:35

    bb0: {
        _1 = RangeTo::<f64> { end: const 1.5f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:100:27: 100:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[2] in range_to: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:18: 99:24

    bb0: {
        _1 = const 1.5f64;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:18: 99:24
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[3] in range_to: &RangeTo<f64> = {
    let mut _0: &std::ops::RangeTo<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<f64>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:26: 99:31

    bb0: {
        _1 = RangeTo::<f64> { end: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:99:26: 99:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[4] in range_to: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:19: 97:25

    bb0: {
        _1 = const 1.5f64;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:19: 97:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[5] in range_to: &RangeTo<f64> = {
    let mut _0: &std::ops::RangeTo<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<f64>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:27: 97:35

    bb0: {
        _1 = RangeTo::<f64> { end: const 1.5f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:97:27: 97:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[6] in range_to: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:18: 96:35

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:18: 96:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[7] in range_to: &RangeTo<f64> = {
    let mut _0: &std::ops::RangeTo<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<f64>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:37: 96:45

    bb0: {
        _1 = RangeTo::<f64> { end: const 1f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:96:37: 96:45
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[8] in range_to: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:19: 93:25

    bb0: {
        _1 = const 1.60000002f32;        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:19: 93:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[9] in range_to: &RangeTo<f32> = {
    let mut _0: &std::ops::RangeTo<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<f32>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:27: 93:35

    bb0: {
        _1 = RangeTo::<f32> { end: const 1.5f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:93:27: 93:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[10] in range_to: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:18: 92:24

    bb0: {
        _1 = const 1.5f32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:18: 92:24
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[11] in range_to: &RangeTo<f32> = {
    let mut _0: &std::ops::RangeTo<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<f32>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:26: 92:31

    bb0: {
        _1 = RangeTo::<f32> { end: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:92:26: 92:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[12] in range_to: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:19: 90:25

    bb0: {
        _1 = const 1.5f32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:19: 90:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[13] in range_to: &RangeTo<f32> = {
    let mut _0: &std::ops::RangeTo<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<f32>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:27: 90:35

    bb0: {
        _1 = RangeTo::<f32> { end: const 1.5f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:90:27: 90:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[14] in range_to: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:18: 89:35

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:18: 89:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[15] in range_to: &RangeTo<f32> = {
    let mut _0: &std::ops::RangeTo<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<f32>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:37: 89:45

    bb0: {
        _1 = RangeTo::<f32> { end: const 1f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:89:37: 89:45
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[16] in range_to: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:19: 86:22

    bb0: {
        _1 = const 'b';                  // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:19: 86:22
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[17] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:24: 86:29

    bb0: {
        _1 = RangeTo::<char> { end: const 'a' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:86:24: 86:29
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[18] in range_to: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:19: 85:22

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:19: 85:22
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[19] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:24: 85:29

    bb0: {
        _1 = RangeTo::<char> { end: const 'a' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:85:24: 85:29
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[20] in range_to: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:18: 84:21

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:18: 84:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[21] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:23: 84:28

    bb0: {
        _1 = RangeTo::<char> { end: const 'b' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:84:23: 84:28
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[22] in range_to: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:18: 83:25

    bb0: {
        _1 = const '\0';                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:18: 83:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[23] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:27: 83:32

    bb0: {
        _1 = RangeTo::<char> { end: const 'a' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:83:27: 83:32
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[24] in range_to: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:18: 82:25

    bb0: {
        _1 = const '\0';                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:18: 82:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[25] in range_to: &RangeTo<char> = {
    let mut _0: &std::ops::RangeTo<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:27: 82:36

    bb0: {
        _1 = RangeTo::<char> { end: const '\u{1}' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:82:27: 82:36
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[26] in range_to: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:19: 79:21

    bb0: {
        _1 = const -5_i32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:19: 79:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[27] in range_to: &RangeTo<i32> = {
    let mut _0: &std::ops::RangeTo<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<i32>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:23: 79:27

    bb0: {
        _1 = RangeTo::<i32> { end: const -5_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:79:23: 79:27
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[28] in range_to: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:18: 78:20

    bb0: {
        _1 = const -6_i32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:18: 78:20
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[29] in range_to: &RangeTo<i32> = {
    let mut _0: &std::ops::RangeTo<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<i32>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:22: 78:26

    bb0: {
        _1 = RangeTo::<i32> { end: const -5_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:78:22: 78:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[30] in range_to: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i16;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:18: 77:26

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:18: 77:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[31] in range_to: &RangeTo<i16> = {
    let mut _0: &std::ops::RangeTo<i16>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<i16>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:28: 77:31

    bb0: {
        _1 = RangeTo::<i16> { end: const 5_i16 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:77:28: 77:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[32] in range_to: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i16;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:18: 76:26

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:18: 76:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[33] in range_to: &RangeTo<i16> = {
    let mut _0: &std::ops::RangeTo<i16>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<i16>;  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:28: 76:34

    bb0: {
        _1 = RangeTo::<i16> { end: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:76:28: 76:34
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[34] in range_to: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:19: 72:22

    bb0: {
        _1 = const 6_u8;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:19: 72:22
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[35] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;  // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<u8>;   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:24: 72:27

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:72:24: 72:27
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[36] in range_to: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:19: 71:22

    bb0: {
        _1 = const 5_u8;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:19: 71:22
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[37] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;  // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<u8>;   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:24: 71:27

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:71:24: 71:27
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[38] in range_to: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:18: 70:21

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:18: 70:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[39] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;  // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<u8>;   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:23: 70:26

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:70:23: 70:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[40] in range_to: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:18: 69:25

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:18: 69:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[41] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;  // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<u8>;   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:27: 69:32

    bb0: {
        _1 = RangeTo::<u8> { end: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:69:27: 69:32
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[42] in range_to: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:19: 65:22

    bb0: {
        _1 = const 6_u8;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:19: 65:22
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[43] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;  // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<u8>;   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:24: 65:27

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:65:24: 65:27
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[44] in range_to: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:19: 64:22

    bb0: {
        _1 = const 5_u8;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:19: 64:22
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[45] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;  // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<u8>;   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:24: 64:27

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:64:24: 64:27
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[46] in range_to: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:18: 63:21

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:18: 63:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[47] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;  // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<u8>;   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:23: 63:26

    bb0: {
        _1 = RangeTo::<u8> { end: const 5_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:63:23: 63:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[48] in range_to: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:18: 62:21

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:18: 62:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[49] in range_to: &RangeTo<u8> = {
    let mut _0: &std::ops::RangeTo<u8>;  // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeTo<u8>;   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:23: 62:26

    bb0: {
        _1 = RangeTo::<u8> { end: const 1_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:62:23: 62:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

const NU8: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:68:16: 68:18
    let mut _1: (u8, bool);              // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:68:21: 68:32

    bb0: {
        _1 = CheckedAdd(const _, const 1_u8); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:68:21: 68:32
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_u8) -> bb1; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:68:21: 68:32
    }

    bb1: {
        _0 = move (_1.0: u8);            // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:68:21: 68:32
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:68:5: 68:33
    }
}

const range_to::NI16: i16 = {
    let mut _0: i16;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:75:17: 75:20
    let mut _1: (i16, bool);             // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:75:23: 75:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_i16); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:75:23: 75:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i16) -> bb1; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:75:23: 75:35
    }

    bb1: {
        _0 = move (_1.0: i16);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:75:23: 75:35
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:75:5: 75:36
    }
}

const E32: f32 = {
    let mut _0: f32;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:91:16: 91:19

    bb0: {
        _0 = Add(const 1.5f32, const _); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:91:22: 91:43
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:91:5: 91:44
    }
}

const E64: f64 = {
    let mut _0: f64;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:98:16: 98:19

    bb0: {
        _0 = Add(const 1.5f64, const _); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:98:22: 98:43
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:98:5: 98:44
    }
}

fn range_from() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:103:17: 103:17
    let mut _1: bool;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:5: 108:38
    let mut _2: bool;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _3: bool;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _5: &std::ops::RangeFrom<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _6: &u8;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _7: &u8;                         // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _8: (&bool, &bool);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: !;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:5: 108:38
    let mut _26: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:5: 109:38
    let mut _27: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _28: bool;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _30: &std::ops::RangeFrom<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _31: &u8;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _32: &u8;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _33: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _34: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _35: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _43: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _44: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _45: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _46: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _47: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _48: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _50: !;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:5: 109:38
    let mut _51: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:5: 110:33
    let mut _52: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:13: 110:32
    let mut _53: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _54: bool;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _56: &std::ops::RangeFrom<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _57: &u8;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _58: &u8;                        // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _59: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _60: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _61: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _64: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _65: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _66: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _67: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _69: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _70: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _71: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _72: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _73: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _74: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _75: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _76: !;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:5: 110:33
    let mut _77: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:5: 111:27
    let mut _78: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:13: 111:26
    let mut _79: bool;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _80: bool;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _82: &std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _83: &i32;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _84: &i32;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _85: (&bool, &bool);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _86: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _87: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _90: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _91: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _93: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _95: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _96: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _97: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _98: &bool;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _99: &bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _100: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _101: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _102: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:5: 111:27
    let mut _103: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:5: 112:26
    let mut _104: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _105: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _107: &std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _108: &i32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _109: &i32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _110: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _111: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _112: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _115: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _116: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _117: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _118: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _120: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _121: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _122: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _123: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _124: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _125: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _126: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _127: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:5: 112:26
    let mut _128: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:5: 113:26
    let mut _129: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _130: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _132: &std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _133: &i32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _134: &i32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _135: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _136: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _137: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _140: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _141: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _142: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _143: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _145: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _146: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _147: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _148: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _149: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _150: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _151: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _152: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:5: 113:26
    let mut _153: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:5: 114:38
    let mut _154: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _155: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _157: &std::ops::RangeFrom<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _158: &u8;                   // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _159: &u8;                       // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _160: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _161: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _162: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _165: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _166: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _167: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _168: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _170: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _171: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _172: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _173: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _174: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _175: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _176: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _177: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:5: 114:38
    let mut _178: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:5: 117:40
    let mut _179: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _180: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _182: &std::ops::RangeFrom<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _183: &i16;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _184: &i16;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _185: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _186: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _187: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _190: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _191: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _192: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _193: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _195: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _196: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _197: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _198: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _199: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _200: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _201: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _202: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:5: 117:40
    let mut _203: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:5: 118:40
    let mut _204: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _205: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _207: &std::ops::RangeFrom<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _208: &i16;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _209: &i16;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _210: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _211: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _212: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _215: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _216: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _217: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _218: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _220: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _221: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _222: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _223: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _224: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _225: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _226: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _227: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:5: 118:40
    let mut _228: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:5: 120:37
    let mut _229: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:13: 120:36
    let mut _230: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _231: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _233: &std::ops::RangeFrom<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _234: &i16;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _235: &i16;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _236: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _237: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _238: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _241: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _242: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _243: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _244: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _246: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _247: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _248: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _249: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _250: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _251: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _252: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _253: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:5: 120:37
    let mut _254: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:5: 121:28
    let mut _255: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:13: 121:27
    let mut _256: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _257: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _259: &std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _260: &i32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _261: &i32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _262: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _263: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _264: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _267: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _268: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _269: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _270: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _272: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _273: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _274: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _275: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _276: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _277: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _278: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _279: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:5: 121:28
    let mut _280: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:5: 122:28
    let mut _281: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _282: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _284: &std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _285: &i32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _286: &i32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _287: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _288: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _289: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _292: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _293: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _294: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _295: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _297: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _298: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _299: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _300: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _301: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _302: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _303: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _304: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:5: 122:28
    let mut _305: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:5: 123:28
    let mut _306: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _307: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _309: &std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _310: &i32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _311: &i32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _312: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _313: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _314: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _317: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _318: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _319: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _320: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _322: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _323: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _324: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _325: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _326: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _327: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _328: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _329: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:5: 123:28
    let mut _330: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:5: 124:40
    let mut _331: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _332: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _334: &std::ops::RangeFrom<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _335: &i16;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _336: &i16;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _337: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _338: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _339: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _342: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _343: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _344: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _345: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _347: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _348: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _349: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _350: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _351: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _352: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _353: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _354: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:5: 124:40
    let mut _355: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:5: 127:38
    let mut _356: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _357: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _359: &std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _360: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _361: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _362: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _363: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _364: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _367: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _368: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _369: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _370: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _372: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _373: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _374: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _375: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _376: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _377: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _378: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _379: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:5: 127:38
    let mut _380: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:5: 128:46
    let mut _381: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _382: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _384: &std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _385: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _386: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _387: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _388: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _389: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _392: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _393: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _394: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _395: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _397: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _398: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _399: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _400: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _401: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _402: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _403: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _404: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:5: 128:46
    let mut _405: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:5: 129:30
    let mut _406: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _407: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _409: &std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _410: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _411: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _412: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _413: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _414: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _417: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _418: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _419: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _420: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _422: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _423: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _424: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _425: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _426: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _427: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _428: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _429: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:5: 129:30
    let mut _430: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:5: 130:30
    let mut _431: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _432: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _434: &std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _435: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _436: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _437: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _438: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _439: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _442: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _443: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _444: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _445: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _447: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _448: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _449: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _450: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _451: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _452: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _453: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _454: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:5: 130:30
    let mut _455: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:5: 131:31
    let mut _456: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:13: 131:30
    let mut _457: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _458: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _460: &std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _461: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _462: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _463: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _464: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _465: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _468: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _469: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _470: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _471: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _473: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _474: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _475: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _476: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _477: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _478: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _479: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _480: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:5: 131:31
    let mut _481: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:5: 132:54
    let mut _482: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _483: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _485: &std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _486: &char;                 // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _487: &char;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _488: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _489: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _490: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _493: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _494: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _495: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _496: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _498: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _499: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _500: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _501: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _502: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _503: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _504: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _505: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:5: 132:54
    let mut _506: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:5: 135:58
    let mut _507: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _508: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _510: &std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _511: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _512: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _513: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _514: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _515: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _518: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _519: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _520: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _521: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _523: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _524: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _525: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _526: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _527: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _528: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _529: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _530: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:5: 135:58
    let mut _531: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:5: 136:54
    let mut _532: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _533: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _535: &std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _536: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _537: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _538: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _539: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _540: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _543: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _544: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _545: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _546: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _548: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _549: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _550: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _551: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _552: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _553: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _554: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _555: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:5: 136:54
    let mut _556: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:5: 137:48
    let mut _557: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:13: 137:47
    let mut _558: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _559: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _561: &std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _562: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _563: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _564: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _565: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _566: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _569: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _570: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _571: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _572: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _574: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _575: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _576: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _577: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _578: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _579: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _580: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _581: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:5: 137:48
    let mut _582: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:5: 138:43
    let mut _583: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _584: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _586: &std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _587: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _588: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _589: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _590: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _591: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _594: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _595: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _596: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _597: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _599: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _600: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _601: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _602: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _603: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _604: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _605: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _606: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:5: 138:43
    let mut _607: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:5: 139:52
    let mut _608: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:13: 139:51
    let mut _609: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _610: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _612: &std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _613: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _614: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _615: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _616: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _617: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _620: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _621: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _622: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _623: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _625: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _626: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _627: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _628: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _629: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _630: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _631: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _632: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:5: 139:52
    let mut _633: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:5: 140:36
    let mut _634: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _635: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _637: &std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _638: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _639: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _640: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _641: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _642: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _645: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _646: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _647: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _648: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _650: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _651: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _652: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _653: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _654: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _655: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _656: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _657: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:5: 140:36
    let mut _658: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:5: 141:43
    let mut _659: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _660: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _662: &std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _663: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _664: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _665: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _666: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _667: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _670: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _671: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _672: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _673: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _675: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _676: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _677: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _678: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _679: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _680: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _681: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _682: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:5: 141:43
    let mut _683: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:5: 142:50
    let mut _684: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _685: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _687: &std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _688: &f32;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _689: &f32;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _690: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _691: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _692: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _695: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _696: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _697: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _698: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _700: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _701: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _702: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _703: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _704: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _705: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _706: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _707: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:5: 142:50
    let mut _708: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:5: 145:58
    let mut _709: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _710: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _712: &std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _713: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _714: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _715: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _716: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _717: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _720: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _721: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _722: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _723: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _725: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _726: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _727: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _728: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _729: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _730: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _731: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _732: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:5: 145:58
    let mut _733: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:5: 146:54
    let mut _734: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _735: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _737: &std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _738: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _739: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _740: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _741: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _742: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _745: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _746: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _747: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _748: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _750: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _751: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _752: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _753: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _754: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _755: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _756: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _757: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:5: 146:54
    let mut _758: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:5: 147:48
    let mut _759: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:13: 147:47
    let mut _760: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _761: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _763: &std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _764: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _765: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _766: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _767: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _768: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _771: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _772: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _773: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _774: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _776: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _777: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _778: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _779: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _780: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _781: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _782: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _783: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:5: 147:48
    let mut _784: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:5: 148:43
    let mut _785: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _786: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _788: &std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _789: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _790: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _791: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _792: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _793: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _796: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _797: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _798: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _799: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _801: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _802: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _803: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _804: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _805: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _806: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _807: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _808: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:5: 148:43
    let mut _809: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:5: 149:52
    let mut _810: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:13: 149:51
    let mut _811: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _812: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _814: &std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _815: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _816: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _817: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _818: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _819: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _822: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _823: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _824: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _825: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _827: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _828: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _829: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _830: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _831: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _832: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _833: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _834: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:5: 149:52
    let mut _835: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:5: 150:36
    let mut _836: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _837: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _839: &std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _840: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _841: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _842: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _843: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _844: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _847: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _848: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _849: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _850: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _852: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _853: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _854: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _855: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _856: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _857: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _858: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _859: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:5: 150:36
    let mut _860: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:5: 151:43
    let mut _861: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _862: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _864: &std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _865: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _866: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _867: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _868: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _869: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _872: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _873: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _874: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _875: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _877: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _878: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _879: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _880: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _881: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _882: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _883: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _884: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:5: 151:43
    let mut _885: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:5: 152:50
    let mut _886: bool;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:12:9: 17:10
    let _887: bool;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
    let mut _889: &std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _890: &f64;                  // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let _891: &f64;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _892: (&bool, &bool);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _893: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _894: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _897: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _898: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _899: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _900: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _902: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _903: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _904: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _905: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _906: &bool;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _907: &bool;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _908: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _909: !;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:5: 152:50
    scope 1 {
        debug m => _3;                   // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _4: bool;                    // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _980: &u8;               // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _981: &std::ops::RangeFrom<u8>; // in scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 2 {
            debug c => _4;               // in scope 2 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _11: &bool;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _12: &bool;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 3 {
                debug left_val => _11;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _12;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _17: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _17;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 5 {
        debug m => _28;                  // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _29: bool;                   // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _978: &u8;               // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _979: &std::ops::RangeFrom<u8>; // in scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 6 {
            debug c => _29;              // in scope 6 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _36: &bool;              // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _37: &bool;              // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 7 {
                debug left_val => _36;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _37;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _42: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _42;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 9 {
        debug m => _54;                  // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _55: bool;                   // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _976: &u8;               // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _977: &std::ops::RangeFrom<u8>; // in scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 10 {
            debug c => _55;              // in scope 10 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _62: &bool;              // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _63: &bool;              // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 11 {
                debug left_val => _62;   // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _63;  // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _68: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 12 {
                    debug kind => _68;   // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 13 {
        debug m => _80;                  // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _81: bool;                   // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _974: &i32;              // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _975: &std::ops::RangeFrom<i32>; // in scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 14 {
            debug c => _81;              // in scope 14 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _88: &bool;              // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _89: &bool;              // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 15 {
                debug left_val => _88;   // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _89;  // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _94: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 16 {
                    debug kind => _94;   // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 17 {
        debug m => _105;                 // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _106: bool;                  // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _972: &i32;              // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _973: &std::ops::RangeFrom<i32>; // in scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 18 {
            debug c => _106;             // in scope 18 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _113: &bool;             // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _114: &bool;             // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 19 {
                debug left_val => _113;  // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _114; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _119: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 20 {
                    debug kind => _119;  // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 21 {
        debug m => _130;                 // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _131: bool;                  // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _970: &i32;              // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _971: &std::ops::RangeFrom<i32>; // in scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 22 {
            debug c => _131;             // in scope 22 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _138: &bool;             // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _139: &bool;             // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 23 {
                debug left_val => _138;  // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _139; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _144: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 24 {
                    debug kind => _144;  // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 25 {
        debug m => _155;                 // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _156: bool;                  // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _968: &u8;               // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _969: &std::ops::RangeFrom<u8>; // in scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 26 {
            debug c => _156;             // in scope 26 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _163: &bool;             // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _164: &bool;             // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 27 {
                debug left_val => _163;  // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _164; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _169: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 28 {
                    debug kind => _169;  // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 29 {
        debug m => _180;                 // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _181: bool;                  // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _966: &i16;              // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _967: &std::ops::RangeFrom<i16>; // in scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 30 {
            debug c => _181;             // in scope 30 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _188: &bool;             // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _189: &bool;             // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 31 {
                debug left_val => _188;  // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _189; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _194: core::panicking::AssertKind; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 32 {
                    debug kind => _194;  // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 33 {
        debug m => _205;                 // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _206: bool;                  // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _964: &i16;              // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _965: &std::ops::RangeFrom<i16>; // in scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 34 {
            debug c => _206;             // in scope 34 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _213: &bool;             // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _214: &bool;             // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 35 {
                debug left_val => _213;  // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _214; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _219: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 36 {
                    debug kind => _219;  // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 37 {
        debug m => _231;                 // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _232: bool;                  // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _962: &i16;              // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _963: &std::ops::RangeFrom<i16>; // in scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 38 {
            debug c => _232;             // in scope 38 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _239: &bool;             // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _240: &bool;             // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 39 {
                debug left_val => _239;  // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _240; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _245: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 40 {
                    debug kind => _245;  // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 41 {
        debug m => _257;                 // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _258: bool;                  // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _960: &i32;              // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _961: &std::ops::RangeFrom<i32>; // in scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 42 {
            debug c => _258;             // in scope 42 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _265: &bool;             // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _266: &bool;             // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 43 {
                debug left_val => _265;  // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _266; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _271: core::panicking::AssertKind; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 44 {
                    debug kind => _271;  // in scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 45 {
        debug m => _282;                 // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _283: bool;                  // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _958: &i32;              // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _959: &std::ops::RangeFrom<i32>; // in scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 46 {
            debug c => _283;             // in scope 46 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _290: &bool;             // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _291: &bool;             // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 47 {
                debug left_val => _290;  // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _291; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _296: core::panicking::AssertKind; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 48 {
                    debug kind => _296;  // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 49 {
        debug m => _307;                 // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _308: bool;                  // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _956: &i32;              // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _957: &std::ops::RangeFrom<i32>; // in scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 50 {
            debug c => _308;             // in scope 50 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _315: &bool;             // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _316: &bool;             // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 51 {
                debug left_val => _315;  // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _316; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _321: core::panicking::AssertKind; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 52 {
                    debug kind => _321;  // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 53 {
        debug m => _332;                 // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _333: bool;                  // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _954: &i16;              // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _955: &std::ops::RangeFrom<i16>; // in scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 54 {
            debug c => _333;             // in scope 54 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _340: &bool;             // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _341: &bool;             // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 55 {
                debug left_val => _340;  // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _341; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _346: core::panicking::AssertKind; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 56 {
                    debug kind => _346;  // in scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 57 {
        debug m => _357;                 // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _358: bool;                  // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _952: &char;             // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _953: &std::ops::RangeFrom<char>; // in scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 58 {
            debug c => _358;             // in scope 58 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _365: &bool;             // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _366: &bool;             // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 59 {
                debug left_val => _365;  // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _366; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _371: core::panicking::AssertKind; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 60 {
                    debug kind => _371;  // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 61 {
        debug m => _382;                 // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _383: bool;                  // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _950: &char;             // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _951: &std::ops::RangeFrom<char>; // in scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 62 {
            debug c => _383;             // in scope 62 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _390: &bool;             // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _391: &bool;             // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 63 {
                debug left_val => _390;  // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _391; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _396: core::panicking::AssertKind; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 64 {
                    debug kind => _396;  // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 65 {
        debug m => _407;                 // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _408: bool;                  // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _948: &char;             // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _949: &std::ops::RangeFrom<char>; // in scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 66 {
            debug c => _408;             // in scope 66 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _415: &bool;             // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _416: &bool;             // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 67 {
                debug left_val => _415;  // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _416; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _421: core::panicking::AssertKind; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 68 {
                    debug kind => _421;  // in scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 69 {
        debug m => _432;                 // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _433: bool;                  // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _946: &char;             // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _947: &std::ops::RangeFrom<char>; // in scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 70 {
            debug c => _433;             // in scope 70 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _440: &bool;             // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _441: &bool;             // in scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 71 {
                debug left_val => _440;  // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _441; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _446: core::panicking::AssertKind; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 72 {
                    debug kind => _446;  // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 73 {
        debug m => _458;                 // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _459: bool;                  // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _944: &char;             // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _945: &std::ops::RangeFrom<char>; // in scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 74 {
            debug c => _459;             // in scope 74 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _466: &bool;             // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _467: &bool;             // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 75 {
                debug left_val => _466;  // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _467; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _472: core::panicking::AssertKind; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 76 {
                    debug kind => _472;  // in scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 77 {
        debug m => _483;                 // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _484: bool;                  // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _942: &char;             // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _943: &std::ops::RangeFrom<char>; // in scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 78 {
            debug c => _484;             // in scope 78 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _491: &bool;             // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _492: &bool;             // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 79 {
                debug left_val => _491;  // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _492; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _497: core::panicking::AssertKind; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 80 {
                    debug kind => _497;  // in scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 81 {
        debug m => _508;                 // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _509: bool;                  // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _940: &f32;              // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _941: &std::ops::RangeFrom<f32>; // in scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 82 {
            debug c => _509;             // in scope 82 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _516: &bool;             // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _517: &bool;             // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 83 {
                debug left_val => _516;  // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _517; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _522: core::panicking::AssertKind; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 84 {
                    debug kind => _522;  // in scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 85 {
        debug m => _533;                 // in scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _534: bool;                  // in scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _938: &f32;              // in scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _939: &std::ops::RangeFrom<f32>; // in scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 86 {
            debug c => _534;             // in scope 86 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _541: &bool;             // in scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _542: &bool;             // in scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 87 {
                debug left_val => _541;  // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _542; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _547: core::panicking::AssertKind; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 88 {
                    debug kind => _547;  // in scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 89 {
        debug m => _559;                 // in scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _560: bool;                  // in scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _936: &f32;              // in scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _937: &std::ops::RangeFrom<f32>; // in scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 90 {
            debug c => _560;             // in scope 90 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _567: &bool;             // in scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _568: &bool;             // in scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 91 {
                debug left_val => _567;  // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _568; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _573: core::panicking::AssertKind; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 92 {
                    debug kind => _573;  // in scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 93 {
        debug m => _584;                 // in scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _585: bool;                  // in scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _934: &f32;              // in scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _935: &std::ops::RangeFrom<f32>; // in scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 94 {
            debug c => _585;             // in scope 94 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _592: &bool;             // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _593: &bool;             // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 95 {
                debug left_val => _592;  // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _593; // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _598: core::panicking::AssertKind; // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 96 {
                    debug kind => _598;  // in scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 97 {
        debug m => _610;                 // in scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _611: bool;                  // in scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _932: &f32;              // in scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _933: &std::ops::RangeFrom<f32>; // in scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 98 {
            debug c => _611;             // in scope 98 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _618: &bool;             // in scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _619: &bool;             // in scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 99 {
                debug left_val => _618;  // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _619; // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _624: core::panicking::AssertKind; // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 100 {
                    debug kind => _624;  // in scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 101 {
        debug m => _635;                 // in scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _636: bool;                  // in scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _930: &f32;              // in scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _931: &std::ops::RangeFrom<f32>; // in scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 102 {
            debug c => _636;             // in scope 102 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _643: &bool;             // in scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _644: &bool;             // in scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 103 {
                debug left_val => _643;  // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _644; // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _649: core::panicking::AssertKind; // in scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 104 {
                    debug kind => _649;  // in scope 104 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 105 {
        debug m => _660;                 // in scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _661: bool;                  // in scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _928: &f32;              // in scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _929: &std::ops::RangeFrom<f32>; // in scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 106 {
            debug c => _661;             // in scope 106 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _668: &bool;             // in scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _669: &bool;             // in scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 107 {
                debug left_val => _668;  // in scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _669; // in scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _674: core::panicking::AssertKind; // in scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 108 {
                    debug kind => _674;  // in scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 109 {
        debug m => _685;                 // in scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _686: bool;                  // in scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _926: &f32;              // in scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _927: &std::ops::RangeFrom<f32>; // in scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 110 {
            debug c => _686;             // in scope 110 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _693: &bool;             // in scope 110 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _694: &bool;             // in scope 110 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 111 {
                debug left_val => _693;  // in scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _694; // in scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _699: core::panicking::AssertKind; // in scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 112 {
                    debug kind => _699;  // in scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 113 {
        debug m => _710;                 // in scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _711: bool;                  // in scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _924: &f64;              // in scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _925: &std::ops::RangeFrom<f64>; // in scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 114 {
            debug c => _711;             // in scope 114 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _718: &bool;             // in scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _719: &bool;             // in scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 115 {
                debug left_val => _718;  // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _719; // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _724: core::panicking::AssertKind; // in scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 116 {
                    debug kind => _724;  // in scope 116 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 117 {
        debug m => _735;                 // in scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _736: bool;                  // in scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _922: &f64;              // in scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _923: &std::ops::RangeFrom<f64>; // in scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 118 {
            debug c => _736;             // in scope 118 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _743: &bool;             // in scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _744: &bool;             // in scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 119 {
                debug left_val => _743;  // in scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _744; // in scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _749: core::panicking::AssertKind; // in scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 120 {
                    debug kind => _749;  // in scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 121 {
        debug m => _761;                 // in scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _762: bool;                  // in scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _920: &f64;              // in scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _921: &std::ops::RangeFrom<f64>; // in scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 122 {
            debug c => _762;             // in scope 122 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _769: &bool;             // in scope 122 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _770: &bool;             // in scope 122 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 123 {
                debug left_val => _769;  // in scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _770; // in scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _775: core::panicking::AssertKind; // in scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 124 {
                    debug kind => _775;  // in scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 125 {
        debug m => _786;                 // in scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _787: bool;                  // in scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _918: &f64;              // in scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _919: &std::ops::RangeFrom<f64>; // in scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 126 {
            debug c => _787;             // in scope 126 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _794: &bool;             // in scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _795: &bool;             // in scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 127 {
                debug left_val => _794;  // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _795; // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _800: core::panicking::AssertKind; // in scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 128 {
                    debug kind => _800;  // in scope 128 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 129 {
        debug m => _812;                 // in scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _813: bool;                  // in scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _916: &f64;              // in scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _917: &std::ops::RangeFrom<f64>; // in scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 130 {
            debug c => _813;             // in scope 130 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _820: &bool;             // in scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _821: &bool;             // in scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 131 {
                debug left_val => _820;  // in scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _821; // in scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _826: core::panicking::AssertKind; // in scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 132 {
                    debug kind => _826;  // in scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 133 {
        debug m => _837;                 // in scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _838: bool;                  // in scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _914: &f64;              // in scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _915: &std::ops::RangeFrom<f64>; // in scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 134 {
            debug c => _838;             // in scope 134 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _845: &bool;             // in scope 134 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _846: &bool;             // in scope 134 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 135 {
                debug left_val => _845;  // in scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _846; // in scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _851: core::panicking::AssertKind; // in scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 136 {
                    debug kind => _851;  // in scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 137 {
        debug m => _862;                 // in scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _863: bool;                  // in scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _912: &f64;              // in scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _913: &std::ops::RangeFrom<f64>; // in scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 138 {
            debug c => _863;             // in scope 138 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _870: &bool;             // in scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _871: &bool;             // in scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 139 {
                debug left_val => _870;  // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _871; // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _876: core::panicking::AssertKind; // in scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 140 {
                    debug kind => _876;  // in scope 140 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 141 {
        debug m => _887;                 // in scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:17: 13:18
        let _888: bool;                  // in scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
        let mut _910: &f64;              // in scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        let mut _911: &std::ops::RangeFrom<f64>; // in scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        scope 142 {
            debug c => _888;             // in scope 142 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:17: 14:18
            let _895: &bool;             // in scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _896: &bool;             // in scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 143 {
                debug left_val => _895;  // in scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _896; // in scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _901: core::panicking::AssertKind; // in scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 144 {
                    debug kind => _901;  // in scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = const true;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _981 = const _;                  // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<u8>, val: Unevaluated(range_from, [], Some(promoted[71])) }
        _5 = _981;                       // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _980 = const _;                  // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_from, [], Some(promoted[70])) }
        _7 = _980;                       // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _6 = _7;                         // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _4 = RangeFrom::<u8>::contains::<u8>(move _5, move _6) -> bb1; // scope 1 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<u8>, &'b u8) -> bool {RangeFrom::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = &_3;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _10 = &_4;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_8.0: &bool);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_8.1: &bool);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb3, otherwise: bb2]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _17 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = assert_failed::<bool, bool>(move _19, move _20, move _22, move _24); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _3;                         // scope 2 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _1 = Not(move _2);               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:5: 108:38
        switchInt(move _1) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:5: 108:38
    }

    bb4: {
        _25 = panic(const "assertion failed: yes!(u8 :: MIN, u8 :: MIN ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:5: 108:38
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:5: 108:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _28 = const true;                // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _979 = const _;                  // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<u8>, val: Unevaluated(range_from, [], Some(promoted[69])) }
        _30 = _979;                      // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _978 = const _;                  // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_from, [], Some(promoted[68])) }
        _32 = _978;                      // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _31 = _32;                       // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _29 = RangeFrom::<u8>::contains::<u8>(move _30, move _31) -> bb6; // scope 5 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<u8>, &'b u8) -> bool {RangeFrom::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb6: {
        _34 = &_28;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _35 = &_29;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _33 = (move _34, move _35);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _36 = (_33.0: &bool);            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _37 = (_33.1: &bool);            // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _40 = (*_36);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _41 = (*_37);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _39 = Eq(move _40, move _41);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _38 = Not(move _39);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _38) -> [0: bb8, otherwise: bb7]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _42 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _44 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _46 = _36;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _46;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _37;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = _48;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _43 = assert_failed::<bool, bool>(move _44, move _45, move _47, move _49); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb8: {
        _27 = _28;                       // scope 6 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _26 = Not(move _27);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:5: 109:38
        switchInt(move _26) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:5: 109:38
    }

    bb9: {
        _50 = panic(const "assertion failed: yes!(u8 :: MAX, u8 :: MIN ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:5: 109:38
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:5: 109:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _54 = const false;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _977 = const _;                  // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<u8>, val: Unevaluated(range_from, [], Some(promoted[67])) }
        _56 = _977;                      // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _976 = const _;                  // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_from, [], Some(promoted[66])) }
        _58 = _976;                      // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _57 = _58;                       // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _55 = RangeFrom::<u8>::contains::<u8>(move _56, move _57) -> bb11; // scope 9 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<u8>, &'b u8) -> bool {RangeFrom::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb11: {
        _60 = &_54;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _61 = &_55;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _59 = (move _60, move _61);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _62 = (_59.0: &bool);            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _63 = (_59.1: &bool);            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _66 = (*_62);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _67 = (*_63);                    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _65 = Eq(move _66, move _67);    // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _64 = Not(move _65);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _64) -> [0: bb13, otherwise: bb12]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb12: {
        _68 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _70 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _72 = _62;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _72;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _74 = _63;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = _74;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _75 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _69 = assert_failed::<bool, bool>(move _70, move _71, move _73, move _75); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb13: {
        _53 = _54;                       // scope 10 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _52 = Not(move _53);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:13: 110:32
        _51 = Not(move _52);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:5: 110:33
        switchInt(move _51) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:5: 110:33
    }

    bb14: {
        _76 = panic(const "assertion failed: !yes!(u8 :: MIN, 1 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:5: 110:33
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:5: 110:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _80 = const false;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _975 = const _;                  // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i32>, val: Unevaluated(range_from, [], Some(promoted[65])) }
        _82 = _975;                      // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _974 = const _;                  // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_from, [], Some(promoted[64])) }
        _84 = _974;                      // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _83 = _84;                       // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _81 = RangeFrom::<i32>::contains::<i32>(move _82, move _83) -> bb16; // scope 13 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i32>, &'b i32) -> bool {RangeFrom::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb16: {
        _86 = &_80;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _87 = &_81;                      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _85 = (move _86, move _87);      // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _88 = (_85.0: &bool);            // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _89 = (_85.1: &bool);            // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _92 = (*_88);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _93 = (*_89);                    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _91 = Eq(move _92, move _93);    // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _90 = Not(move _91);             // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _90) -> [0: bb18, otherwise: bb17]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _94 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _96 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _98 = _88;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _97 = _98;                       // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _100 = _89;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _99 = _100;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _95 = assert_failed::<bool, bool>(move _96, move _97, move _99, move _101); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb18: {
        _79 = _80;                       // scope 14 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _78 = Not(move _79);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:13: 111:26
        _77 = Not(move _78);             // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:5: 111:27
        switchInt(move _77) -> [0: bb20, otherwise: bb19]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:5: 111:27
    }

    bb19: {
        _102 = panic(const "assertion failed: !yes!(4, 5 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:5: 111:27
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:5: 111:27
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _105 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _973 = const _;                  // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i32>, val: Unevaluated(range_from, [], Some(promoted[63])) }
        _107 = _973;                     // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _972 = const _;                  // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_from, [], Some(promoted[62])) }
        _109 = _972;                     // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _108 = _109;                     // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _106 = RangeFrom::<i32>::contains::<i32>(move _107, move _108) -> bb21; // scope 17 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i32>, &'b i32) -> bool {RangeFrom::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb21: {
        _111 = &_105;                    // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _112 = &_106;                    // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _110 = (move _111, move _112);   // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _113 = (_110.0: &bool);          // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _114 = (_110.1: &bool);          // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _117 = (*_113);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _118 = (*_114);                  // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _116 = Eq(move _117, move _118); // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _115 = Not(move _116);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _115) -> [0: bb23, otherwise: bb22]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _119 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _121 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _123 = _113;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _122 = _123;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _125 = _114;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _124 = _125;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _126 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _120 = assert_failed::<bool, bool>(move _121, move _122, move _124, move _126); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb23: {
        _104 = _105;                     // scope 18 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _103 = Not(move _104);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:5: 112:26
        switchInt(move _103) -> [0: bb25, otherwise: bb24]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:5: 112:26
    }

    bb24: {
        _127 = panic(const "assertion failed: yes!(5, 5 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:5: 112:26
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:5: 112:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb25: {
        _130 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _971 = const _;                  // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i32>, val: Unevaluated(range_from, [], Some(promoted[61])) }
        _132 = _971;                     // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _970 = const _;                  // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_from, [], Some(promoted[60])) }
        _134 = _970;                     // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _133 = _134;                     // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _131 = RangeFrom::<i32>::contains::<i32>(move _132, move _133) -> bb26; // scope 21 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i32>, &'b i32) -> bool {RangeFrom::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb26: {
        _136 = &_130;                    // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _137 = &_131;                    // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _135 = (move _136, move _137);   // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _138 = (_135.0: &bool);          // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _139 = (_135.1: &bool);          // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _142 = (*_138);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _143 = (*_139);                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _141 = Eq(move _142, move _143); // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _140 = Not(move _141);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _140) -> [0: bb28, otherwise: bb27]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _144 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _146 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _148 = _138;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _147 = _148;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _150 = _139;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _149 = _150;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _151 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _145 = assert_failed::<bool, bool>(move _146, move _147, move _149, move _151); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb28: {
        _129 = _130;                     // scope 22 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _128 = Not(move _129);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:5: 113:26
        switchInt(move _128) -> [0: bb30, otherwise: bb29]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:5: 113:26
    }

    bb29: {
        _152 = panic(const "assertion failed: yes!(6, 5 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:5: 113:26
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:5: 113:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        _155 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _969 = const _;                  // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<u8>, val: Unevaluated(range_from, [], Some(promoted[59])) }
        _157 = _969;                     // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _968 = const _;                  // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &u8, val: Unevaluated(range_from, [], Some(promoted[58])) }
        _159 = _968;                     // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _158 = _159;                     // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _156 = RangeFrom::<u8>::contains::<u8>(move _157, move _158) -> bb31; // scope 25 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<u8>, &'b u8) -> bool {RangeFrom::<u8>::contains::<u8>}, val: Value(<ZST>) }
    }

    bb31: {
        _161 = &_155;                    // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _162 = &_156;                    // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _160 = (move _161, move _162);   // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _163 = (_160.0: &bool);          // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _164 = (_160.1: &bool);          // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _167 = (*_163);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _168 = (*_164);                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _166 = Eq(move _167, move _168); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _165 = Not(move _166);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _165) -> [0: bb33, otherwise: bb32]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _169 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _171 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _173 = _163;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _172 = _173;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _175 = _164;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _174 = _175;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _176 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _170 = assert_failed::<bool, bool>(move _171, move _172, move _174, move _176); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb33: {
        _154 = _155;                     // scope 26 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _153 = Not(move _154);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:5: 114:38
        switchInt(move _153) -> [0: bb35, otherwise: bb34]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:5: 114:38
    }

    bb34: {
        _177 = panic(const "assertion failed: yes!(u8 :: MAX, u8 :: MAX ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:5: 114:38
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:5: 114:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _180 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _967 = const _;                  // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i16>, val: Unevaluated(range_from, [], Some(promoted[57])) }
        _182 = _967;                     // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _966 = const _;                  // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i16, val: Unevaluated(range_from, [], Some(promoted[56])) }
        _184 = _966;                     // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _183 = _184;                     // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _181 = RangeFrom::<i16>::contains::<i16>(move _182, move _183) -> bb36; // scope 29 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i16>, &'b i16) -> bool {RangeFrom::<i16>::contains::<i16>}, val: Value(<ZST>) }
    }

    bb36: {
        _186 = &_180;                    // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _187 = &_181;                    // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _185 = (move _186, move _187);   // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _188 = (_185.0: &bool);          // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _189 = (_185.1: &bool);          // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _192 = (*_188);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _193 = (*_189);                  // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _191 = Eq(move _192, move _193); // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _190 = Not(move _191);           // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _190) -> [0: bb38, otherwise: bb37]; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb37: {
        _194 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _196 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _198 = _188;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _197 = _198;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _200 = _189;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _199 = _200;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _201 = Option::<Arguments<'_>>::None; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _195 = assert_failed::<bool, bool>(move _196, move _197, move _199, move _201); // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb38: {
        _179 = _180;                     // scope 30 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _178 = Not(move _179);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:5: 117:40
        switchInt(move _178) -> [0: bb40, otherwise: bb39]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:5: 117:40
    }

    bb39: {
        _202 = panic(const "assertion failed: yes!(i16 :: MIN, i16 :: MIN ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:5: 117:40
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:5: 117:40
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb40: {
        _205 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _965 = const _;                  // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i16>, val: Unevaluated(range_from, [], Some(promoted[55])) }
        _207 = _965;                     // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _964 = const _;                  // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i16, val: Unevaluated(range_from, [], Some(promoted[54])) }
        _209 = _964;                     // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _208 = _209;                     // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _206 = RangeFrom::<i16>::contains::<i16>(move _207, move _208) -> bb41; // scope 33 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i16>, &'b i16) -> bool {RangeFrom::<i16>::contains::<i16>}, val: Value(<ZST>) }
    }

    bb41: {
        _211 = &_205;                    // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _212 = &_206;                    // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _210 = (move _211, move _212);   // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _213 = (_210.0: &bool);          // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _214 = (_210.1: &bool);          // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _217 = (*_213);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _218 = (*_214);                  // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _216 = Eq(move _217, move _218); // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _215 = Not(move _216);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _215) -> [0: bb43, otherwise: bb42]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb42: {
        _219 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _221 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _223 = _213;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _222 = _223;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _225 = _214;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _224 = _225;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _226 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _220 = assert_failed::<bool, bool>(move _221, move _222, move _224, move _226); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb43: {
        _204 = _205;                     // scope 34 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _203 = Not(move _204);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:5: 118:40
        switchInt(move _203) -> [0: bb45, otherwise: bb44]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:5: 118:40
    }

    bb44: {
        _227 = panic(const "assertion failed: yes!(i16 :: MAX, i16 :: MIN ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:5: 118:40
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:5: 118:40
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb45: {
        _231 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _963 = const _;                  // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i16>, val: Unevaluated(range_from, [], Some(promoted[53])) }
        _233 = _963;                     // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _962 = const _;                  // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i16, val: Unevaluated(range_from, [], Some(promoted[52])) }
        _235 = _962;                     // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _234 = _235;                     // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _232 = RangeFrom::<i16>::contains::<i16>(move _233, move _234) -> bb46; // scope 37 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i16>, &'b i16) -> bool {RangeFrom::<i16>::contains::<i16>}, val: Value(<ZST>) }
    }

    bb46: {
        _237 = &_231;                    // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _238 = &_232;                    // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _236 = (move _237, move _238);   // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _239 = (_236.0: &bool);          // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _240 = (_236.1: &bool);          // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _243 = (*_239);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _244 = (*_240);                  // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _242 = Eq(move _243, move _244); // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _241 = Not(move _242);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _241) -> [0: bb48, otherwise: bb47]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _245 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _247 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _249 = _239;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _248 = _249;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _251 = _240;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _250 = _251;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _252 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _246 = assert_failed::<bool, bool>(move _247, move _248, move _250, move _252); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb48: {
        _230 = _231;                     // scope 38 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _229 = Not(move _230);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:13: 120:36
        _228 = Not(move _229);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:5: 120:37
        switchInt(move _228) -> [0: bb50, otherwise: bb49]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:5: 120:37
    }

    bb49: {
        _253 = panic(const "assertion failed: !yes!(i16 :: MIN, NI16 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:5: 120:37
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:5: 120:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb50: {
        _257 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _961 = const _;                  // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i32>, val: Unevaluated(range_from, [], Some(promoted[51])) }
        _259 = _961;                     // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _960 = const _;                  // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_from, [], Some(promoted[50])) }
        _261 = _960;                     // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _260 = _261;                     // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _258 = RangeFrom::<i32>::contains::<i32>(move _259, move _260) -> bb51; // scope 41 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i32>, &'b i32) -> bool {RangeFrom::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb51: {
        _263 = &_257;                    // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _264 = &_258;                    // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _262 = (move _263, move _264);   // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _265 = (_262.0: &bool);          // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _266 = (_262.1: &bool);          // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _269 = (*_265);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _270 = (*_266);                  // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _268 = Eq(move _269, move _270); // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _267 = Not(move _268);           // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _267) -> [0: bb53, otherwise: bb52]; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb52: {
        _271 = const core::panicking::AssertKind::Eq; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _273 = const core::panicking::AssertKind::Eq; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _275 = _265;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _274 = _275;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _277 = _266;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _276 = _277;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _278 = Option::<Arguments<'_>>::None; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _272 = assert_failed::<bool, bool>(move _273, move _274, move _276, move _278); // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb53: {
        _256 = _257;                     // scope 42 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _255 = Not(move _256);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:13: 121:27
        _254 = Not(move _255);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:5: 121:28
        switchInt(move _254) -> [0: bb55, otherwise: bb54]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:5: 121:28
    }

    bb54: {
        _279 = panic(const "assertion failed: !yes!(- 4, 5 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:5: 121:28
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:5: 121:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        _282 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _959 = const _;                  // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i32>, val: Unevaluated(range_from, [], Some(promoted[49])) }
        _284 = _959;                     // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _958 = const _;                  // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_from, [], Some(promoted[48])) }
        _286 = _958;                     // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _285 = _286;                     // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _283 = RangeFrom::<i32>::contains::<i32>(move _284, move _285) -> bb56; // scope 45 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i32>, &'b i32) -> bool {RangeFrom::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb56: {
        _288 = &_282;                    // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _289 = &_283;                    // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _287 = (move _288, move _289);   // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _290 = (_287.0: &bool);          // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _291 = (_287.1: &bool);          // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _294 = (*_290);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _295 = (*_291);                  // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _293 = Eq(move _294, move _295); // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _292 = Not(move _293);           // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _292) -> [0: bb58, otherwise: bb57]; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb57: {
        _296 = const core::panicking::AssertKind::Eq; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _298 = const core::panicking::AssertKind::Eq; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _300 = _290;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _299 = _300;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _302 = _291;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _301 = _302;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _303 = Option::<Arguments<'_>>::None; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _297 = assert_failed::<bool, bool>(move _298, move _299, move _301, move _303); // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb58: {
        _281 = _282;                     // scope 46 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _280 = Not(move _281);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:5: 122:28
        switchInt(move _280) -> [0: bb60, otherwise: bb59]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:5: 122:28
    }

    bb59: {
        _304 = panic(const "assertion failed: yes!(- 4, - 4 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:5: 122:28
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:5: 122:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb60: {
        _307 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _957 = const _;                  // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i32>, val: Unevaluated(range_from, [], Some(promoted[47])) }
        _309 = _957;                     // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _956 = const _;                  // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i32, val: Unevaluated(range_from, [], Some(promoted[46])) }
        _311 = _956;                     // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _310 = _311;                     // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _308 = RangeFrom::<i32>::contains::<i32>(move _309, move _310) -> bb61; // scope 49 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i32>, &'b i32) -> bool {RangeFrom::<i32>::contains::<i32>}, val: Value(<ZST>) }
    }

    bb61: {
        _313 = &_307;                    // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _314 = &_308;                    // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _312 = (move _313, move _314);   // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _315 = (_312.0: &bool);          // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _316 = (_312.1: &bool);          // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _319 = (*_315);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _320 = (*_316);                  // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _318 = Eq(move _319, move _320); // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _317 = Not(move _318);           // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _317) -> [0: bb63, otherwise: bb62]; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _321 = const core::panicking::AssertKind::Eq; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _323 = const core::panicking::AssertKind::Eq; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _325 = _315;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _324 = _325;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _327 = _316;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _326 = _327;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _328 = Option::<Arguments<'_>>::None; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _322 = assert_failed::<bool, bool>(move _323, move _324, move _326, move _328); // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb63: {
        _306 = _307;                     // scope 50 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _305 = Not(move _306);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:5: 123:28
        switchInt(move _305) -> [0: bb65, otherwise: bb64]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:5: 123:28
    }

    bb64: {
        _329 = panic(const "assertion failed: yes!(- 3, - 4 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:5: 123:28
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:5: 123:28
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb65: {
        _332 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _955 = const _;                  // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<i16>, val: Unevaluated(range_from, [], Some(promoted[45])) }
        _334 = _955;                     // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _954 = const _;                  // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &i16, val: Unevaluated(range_from, [], Some(promoted[44])) }
        _336 = _954;                     // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _335 = _336;                     // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _333 = RangeFrom::<i16>::contains::<i16>(move _334, move _335) -> bb66; // scope 53 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<i16>, &'b i16) -> bool {RangeFrom::<i16>::contains::<i16>}, val: Value(<ZST>) }
    }

    bb66: {
        _338 = &_332;                    // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _339 = &_333;                    // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _337 = (move _338, move _339);   // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _340 = (_337.0: &bool);          // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _341 = (_337.1: &bool);          // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _344 = (*_340);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _345 = (*_341);                  // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _343 = Eq(move _344, move _345); // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _342 = Not(move _343);           // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _342) -> [0: bb68, otherwise: bb67]; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb67: {
        _346 = const core::panicking::AssertKind::Eq; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _348 = const core::panicking::AssertKind::Eq; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _350 = _340;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _349 = _350;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _352 = _341;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _351 = _352;                     // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _353 = Option::<Arguments<'_>>::None; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _347 = assert_failed::<bool, bool>(move _348, move _349, move _351, move _353); // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb68: {
        _331 = _332;                     // scope 54 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _330 = Not(move _331);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:5: 124:40
        switchInt(move _330) -> [0: bb70, otherwise: bb69]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:5: 124:40
    }

    bb69: {
        _354 = panic(const "assertion failed: yes!(i16 :: MAX, i16 :: MAX ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:5: 124:40
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:5: 124:40
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb70: {
        _357 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _953 = const _;                  // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<char>, val: Unevaluated(range_from, [], Some(promoted[43])) }
        _359 = _953;                     // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _952 = const _;                  // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_from, [], Some(promoted[42])) }
        _361 = _952;                     // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _360 = _361;                     // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _358 = RangeFrom::<char>::contains::<char>(move _359, move _360) -> bb71; // scope 57 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<char>, &'b char) -> bool {RangeFrom::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb71: {
        _363 = &_357;                    // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _364 = &_358;                    // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _362 = (move _363, move _364);   // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _365 = (_362.0: &bool);          // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _366 = (_362.1: &bool);          // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _369 = (*_365);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _370 = (*_366);                  // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _368 = Eq(move _369, move _370); // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _367 = Not(move _368);           // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _367) -> [0: bb73, otherwise: bb72]; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb72: {
        _371 = const core::panicking::AssertKind::Eq; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _373 = const core::panicking::AssertKind::Eq; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _375 = _365;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _374 = _375;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _377 = _366;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _376 = _377;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _378 = Option::<Arguments<'_>>::None; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _372 = assert_failed::<bool, bool>(move _373, move _374, move _376, move _378); // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb73: {
        _356 = _357;                     // scope 58 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _355 = Not(move _356);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:5: 127:38
        switchInt(move _355) -> [0: bb75, otherwise: bb74]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:5: 127:38
    }

    bb74: {
        _379 = panic(const "assertion failed: yes!(\\'\\\\u{0}\\', \\'\\\\u{0}\\' ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:5: 127:38
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:5: 127:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb75: {
        _382 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _951 = const _;                  // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<char>, val: Unevaluated(range_from, [], Some(promoted[41])) }
        _384 = _951;                     // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _950 = const _;                  // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_from, [], Some(promoted[40])) }
        _386 = _950;                     // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _385 = _386;                     // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _383 = RangeFrom::<char>::contains::<char>(move _384, move _385) -> bb76; // scope 61 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<char>, &'b char) -> bool {RangeFrom::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb76: {
        _388 = &_382;                    // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _389 = &_383;                    // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _387 = (move _388, move _389);   // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _390 = (_387.0: &bool);          // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _391 = (_387.1: &bool);          // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _394 = (*_390);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _395 = (*_391);                  // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _393 = Eq(move _394, move _395); // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _392 = Not(move _393);           // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _392) -> [0: bb78, otherwise: bb77]; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb77: {
        _396 = const core::panicking::AssertKind::Eq; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _398 = const core::panicking::AssertKind::Eq; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _400 = _390;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _399 = _400;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _402 = _391;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _401 = _402;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _403 = Option::<Arguments<'_>>::None; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _397 = assert_failed::<bool, bool>(move _398, move _399, move _401, move _403); // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb78: {
        _381 = _382;                     // scope 62 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _380 = Not(move _381);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:5: 128:46
        switchInt(move _380) -> [0: bb80, otherwise: bb79]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:5: 128:46
    }

    bb79: {
        _404 = panic(const "assertion failed: yes!(core :: char :: MAX, \\'\\\\u{0}\\' ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:5: 128:46
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:5: 128:46
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb80: {
        _407 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _949 = const _;                  // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<char>, val: Unevaluated(range_from, [], Some(promoted[39])) }
        _409 = _949;                     // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _948 = const _;                  // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_from, [], Some(promoted[38])) }
        _411 = _948;                     // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _410 = _411;                     // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _408 = RangeFrom::<char>::contains::<char>(move _409, move _410) -> bb81; // scope 65 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<char>, &'b char) -> bool {RangeFrom::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb81: {
        _413 = &_407;                    // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _414 = &_408;                    // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _412 = (move _413, move _414);   // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _415 = (_412.0: &bool);          // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _416 = (_412.1: &bool);          // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _419 = (*_415);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _420 = (*_416);                  // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _418 = Eq(move _419, move _420); // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _417 = Not(move _418);           // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _417) -> [0: bb83, otherwise: bb82]; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb82: {
        _421 = const core::panicking::AssertKind::Eq; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _423 = const core::panicking::AssertKind::Eq; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _425 = _415;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _424 = _425;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _427 = _416;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _426 = _427;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _428 = Option::<Arguments<'_>>::None; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _422 = assert_failed::<bool, bool>(move _423, move _424, move _426, move _428); // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb83: {
        _406 = _407;                     // scope 66 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _405 = Not(move _406);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:5: 129:30
        switchInt(move _405) -> [0: bb85, otherwise: bb84]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:5: 129:30
    }

    bb84: {
        _429 = panic(const "assertion failed: yes!(\\'a\\', \\'a\\' ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:5: 129:30
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:5: 129:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb85: {
        _432 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _947 = const _;                  // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<char>, val: Unevaluated(range_from, [], Some(promoted[37])) }
        _434 = _947;                     // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _946 = const _;                  // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_from, [], Some(promoted[36])) }
        _436 = _946;                     // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _435 = _436;                     // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _433 = RangeFrom::<char>::contains::<char>(move _434, move _435) -> bb86; // scope 69 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<char>, &'b char) -> bool {RangeFrom::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb86: {
        _438 = &_432;                    // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _439 = &_433;                    // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _437 = (move _438, move _439);   // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _440 = (_437.0: &bool);          // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _441 = (_437.1: &bool);          // scope 70 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _444 = (*_440);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _445 = (*_441);                  // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _443 = Eq(move _444, move _445); // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _442 = Not(move _443);           // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _442) -> [0: bb88, otherwise: bb87]; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb87: {
        _446 = const core::panicking::AssertKind::Eq; // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _448 = const core::panicking::AssertKind::Eq; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _450 = _440;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _449 = _450;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _452 = _441;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _451 = _452;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _453 = Option::<Arguments<'_>>::None; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _447 = assert_failed::<bool, bool>(move _448, move _449, move _451, move _453); // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb88: {
        _431 = _432;                     // scope 70 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _430 = Not(move _431);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:5: 130:30
        switchInt(move _430) -> [0: bb90, otherwise: bb89]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:5: 130:30
    }

    bb89: {
        _454 = panic(const "assertion failed: yes!(\\'b\\', \\'a\\' ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:5: 130:30
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:5: 130:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb90: {
        _458 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _945 = const _;                  // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<char>, val: Unevaluated(range_from, [], Some(promoted[35])) }
        _460 = _945;                     // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _944 = const _;                  // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_from, [], Some(promoted[34])) }
        _462 = _944;                     // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _461 = _462;                     // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _459 = RangeFrom::<char>::contains::<char>(move _460, move _461) -> bb91; // scope 73 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<char>, &'b char) -> bool {RangeFrom::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb91: {
        _464 = &_458;                    // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _465 = &_459;                    // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _463 = (move _464, move _465);   // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _466 = (_463.0: &bool);          // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _467 = (_463.1: &bool);          // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _470 = (*_466);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _471 = (*_467);                  // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _469 = Eq(move _470, move _471); // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _468 = Not(move _469);           // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _468) -> [0: bb93, otherwise: bb92]; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb92: {
        _472 = const core::panicking::AssertKind::Eq; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _474 = const core::panicking::AssertKind::Eq; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _476 = _466;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _475 = _476;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _478 = _467;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _477 = _478;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _479 = Option::<Arguments<'_>>::None; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _473 = assert_failed::<bool, bool>(move _474, move _475, move _477, move _479); // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb93: {
        _457 = _458;                     // scope 74 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _456 = Not(move _457);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:13: 131:30
        _455 = Not(move _456);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:5: 131:31
        switchInt(move _455) -> [0: bb95, otherwise: bb94]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:5: 131:31
    }

    bb94: {
        _480 = panic(const "assertion failed: !yes!(\\'a\\', \\'b\\' ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:5: 131:31
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:5: 131:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb95: {
        _483 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _943 = const _;                  // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<char>, val: Unevaluated(range_from, [], Some(promoted[33])) }
        _485 = _943;                     // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _942 = const _;                  // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &char, val: Unevaluated(range_from, [], Some(promoted[32])) }
        _487 = _942;                     // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _486 = _487;                     // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _484 = RangeFrom::<char>::contains::<char>(move _485, move _486) -> bb96; // scope 77 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<char>, &'b char) -> bool {RangeFrom::<char>::contains::<char>}, val: Value(<ZST>) }
    }

    bb96: {
        _489 = &_483;                    // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _490 = &_484;                    // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _488 = (move _489, move _490);   // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _491 = (_488.0: &bool);          // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _492 = (_488.1: &bool);          // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _495 = (*_491);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _496 = (*_492);                  // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _494 = Eq(move _495, move _496); // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _493 = Not(move _494);           // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _493) -> [0: bb98, otherwise: bb97]; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb97: {
        _497 = const core::panicking::AssertKind::Eq; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _499 = const core::panicking::AssertKind::Eq; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _501 = _491;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _500 = _501;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _503 = _492;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _502 = _503;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _504 = Option::<Arguments<'_>>::None; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _498 = assert_failed::<bool, bool>(move _499, move _500, move _502, move _504); // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb98: {
        _482 = _483;                     // scope 78 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _481 = Not(move _482);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:5: 132:54
        switchInt(move _481) -> [0: bb100, otherwise: bb99]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:5: 132:54
    }

    bb99: {
        _505 = panic(const "assertion failed: yes!(core :: char :: MAX, core :: char :: MAX ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:5: 132:54
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:5: 132:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb100: {
        _508 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _941 = const _;                  // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f32>, val: Unevaluated(range_from, [], Some(promoted[31])) }
        _510 = _941;                     // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _940 = const _;                  // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_from, [], Some(promoted[30])) }
        _512 = _940;                     // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _511 = _512;                     // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _509 = RangeFrom::<f32>::contains::<f32>(move _510, move _511) -> bb101; // scope 81 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f32>, &'b f32) -> bool {RangeFrom::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb101: {
        _514 = &_508;                    // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _515 = &_509;                    // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _513 = (move _514, move _515);   // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _516 = (_513.0: &bool);          // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _517 = (_513.1: &bool);          // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _520 = (*_516);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _521 = (*_517);                  // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _519 = Eq(move _520, move _521); // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _518 = Not(move _519);           // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _518) -> [0: bb103, otherwise: bb102]; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb102: {
        _522 = const core::panicking::AssertKind::Eq; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _524 = const core::panicking::AssertKind::Eq; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _526 = _516;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _525 = _526;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _528 = _517;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _527 = _528;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _529 = Option::<Arguments<'_>>::None; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _523 = assert_failed::<bool, bool>(move _524, move _525, move _527, move _529); // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb103: {
        _507 = _508;                     // scope 82 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _506 = Not(move _507);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:5: 135:58
        switchInt(move _506) -> [0: bb105, otherwise: bb104]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:5: 135:58
    }

    bb104: {
        _530 = panic(const "assertion failed: yes!(f32 :: NEG_INFINITY, f32 :: NEG_INFINITY ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:5: 135:58
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:5: 135:58
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb105: {
        _533 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _939 = const _;                  // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f32>, val: Unevaluated(range_from, [], Some(promoted[29])) }
        _535 = _939;                     // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _938 = const _;                  // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_from, [], Some(promoted[28])) }
        _537 = _938;                     // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _536 = _537;                     // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _534 = RangeFrom::<f32>::contains::<f32>(move _535, move _536) -> bb106; // scope 85 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f32>, &'b f32) -> bool {RangeFrom::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb106: {
        _539 = &_533;                    // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _540 = &_534;                    // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _538 = (move _539, move _540);   // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _541 = (_538.0: &bool);          // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _542 = (_538.1: &bool);          // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _545 = (*_541);                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _546 = (*_542);                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _544 = Eq(move _545, move _546); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _543 = Not(move _544);           // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _543) -> [0: bb108, otherwise: bb107]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb107: {
        _547 = const core::panicking::AssertKind::Eq; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _549 = const core::panicking::AssertKind::Eq; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _551 = _541;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _550 = _551;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _553 = _542;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _552 = _553;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _554 = Option::<Arguments<'_>>::None; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _548 = assert_failed::<bool, bool>(move _549, move _550, move _552, move _554); // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb108: {
        _532 = _533;                     // scope 86 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _531 = Not(move _532);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:5: 136:54
        switchInt(move _531) -> [0: bb110, otherwise: bb109]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:5: 136:54
    }

    bb109: {
        _555 = panic(const "assertion failed: yes!(f32 :: INFINITY, f32 :: NEG_INFINITY ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:5: 136:54
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:5: 136:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb110: {
        _559 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _937 = const _;                  // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f32>, val: Unevaluated(range_from, [], Some(promoted[27])) }
        _561 = _937;                     // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _936 = const _;                  // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_from, [], Some(promoted[26])) }
        _563 = _936;                     // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _562 = _563;                     // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _560 = RangeFrom::<f32>::contains::<f32>(move _561, move _562) -> bb111; // scope 89 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f32>, &'b f32) -> bool {RangeFrom::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb111: {
        _565 = &_559;                    // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _566 = &_560;                    // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _564 = (move _565, move _566);   // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _567 = (_564.0: &bool);          // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _568 = (_564.1: &bool);          // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _571 = (*_567);                  // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _572 = (*_568);                  // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _570 = Eq(move _571, move _572); // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _569 = Not(move _570);           // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _569) -> [0: bb113, otherwise: bb112]; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb112: {
        _573 = const core::panicking::AssertKind::Eq; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _575 = const core::panicking::AssertKind::Eq; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _577 = _567;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _576 = _577;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _579 = _568;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _578 = _579;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _580 = Option::<Arguments<'_>>::None; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _574 = assert_failed::<bool, bool>(move _575, move _576, move _578, move _580); // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb113: {
        _558 = _559;                     // scope 90 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _557 = Not(move _558);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:13: 137:47
        _556 = Not(move _557);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:5: 137:48
        switchInt(move _556) -> [0: bb115, otherwise: bb114]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:5: 137:48
    }

    bb114: {
        _581 = panic(const "assertion failed: !yes!(f32 :: NEG_INFINITY, 1.0f32 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:5: 137:48
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:5: 137:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb115: {
        _584 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _935 = const _;                  // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f32>, val: Unevaluated(range_from, [], Some(promoted[25])) }
        _586 = _935;                     // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _934 = const _;                  // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_from, [], Some(promoted[24])) }
        _588 = _934;                     // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _587 = _588;                     // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _585 = RangeFrom::<f32>::contains::<f32>(move _586, move _587) -> bb116; // scope 93 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f32>, &'b f32) -> bool {RangeFrom::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb116: {
        _590 = &_584;                    // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _591 = &_585;                    // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _589 = (move _590, move _591);   // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _592 = (_589.0: &bool);          // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _593 = (_589.1: &bool);          // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _596 = (*_592);                  // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _597 = (*_593);                  // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _595 = Eq(move _596, move _597); // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _594 = Not(move _595);           // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _594) -> [0: bb118, otherwise: bb117]; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb117: {
        _598 = const core::panicking::AssertKind::Eq; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _600 = const core::panicking::AssertKind::Eq; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _602 = _592;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _601 = _602;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _604 = _593;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _603 = _604;                     // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _605 = Option::<Arguments<'_>>::None; // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _599 = assert_failed::<bool, bool>(move _600, move _601, move _603, move _605); // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb118: {
        _583 = _584;                     // scope 94 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _582 = Not(move _583);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:5: 138:43
        switchInt(move _582) -> [0: bb120, otherwise: bb119]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:5: 138:43
    }

    bb119: {
        _606 = panic(const "assertion failed: yes!(f32 :: INFINITY, 1.0f32 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:5: 138:43
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:5: 138:43
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb120: {
        _610 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _933 = const _;                  // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f32>, val: Unevaluated(range_from, [], Some(promoted[23])) }
        _612 = _933;                     // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _932 = const _;                  // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_from, [], Some(promoted[22])) }
        _614 = _932;                     // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _613 = _614;                     // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _611 = RangeFrom::<f32>::contains::<f32>(move _612, move _613) -> bb121; // scope 97 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f32>, &'b f32) -> bool {RangeFrom::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb121: {
        _616 = &_610;                    // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _617 = &_611;                    // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _615 = (move _616, move _617);   // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _618 = (_615.0: &bool);          // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _619 = (_615.1: &bool);          // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _622 = (*_618);                  // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _623 = (*_619);                  // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _621 = Eq(move _622, move _623); // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _620 = Not(move _621);           // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _620) -> [0: bb123, otherwise: bb122]; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb122: {
        _624 = const core::panicking::AssertKind::Eq; // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _626 = const core::panicking::AssertKind::Eq; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _628 = _618;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _627 = _628;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _630 = _619;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _629 = _630;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _631 = Option::<Arguments<'_>>::None; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _625 = assert_failed::<bool, bool>(move _626, move _627, move _629, move _631); // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb123: {
        _609 = _610;                     // scope 98 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _608 = Not(move _609);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:13: 139:51
        _607 = Not(move _608);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:5: 139:52
        switchInt(move _607) -> [0: bb125, otherwise: bb124]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:5: 139:52
    }

    bb124: {
        _632 = panic(const "assertion failed: !yes!(1.0f32 - f32 :: EPSILON, 1.0f32 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:5: 139:52
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:5: 139:52
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb125: {
        _635 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _931 = const _;                  // scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f32>, val: Unevaluated(range_from, [], Some(promoted[21])) }
        _637 = _931;                     // scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _930 = const _;                  // scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_from, [], Some(promoted[20])) }
        _639 = _930;                     // scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _638 = _639;                     // scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _636 = RangeFrom::<f32>::contains::<f32>(move _637, move _638) -> bb126; // scope 101 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f32>, &'b f32) -> bool {RangeFrom::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb126: {
        _641 = &_635;                    // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _642 = &_636;                    // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _640 = (move _641, move _642);   // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _643 = (_640.0: &bool);          // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _644 = (_640.1: &bool);          // scope 102 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _647 = (*_643);                  // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _648 = (*_644);                  // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _646 = Eq(move _647, move _648); // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _645 = Not(move _646);           // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _645) -> [0: bb128, otherwise: bb127]; // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb127: {
        _649 = const core::panicking::AssertKind::Eq; // scope 103 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _651 = const core::panicking::AssertKind::Eq; // scope 104 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _653 = _643;                     // scope 104 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _652 = _653;                     // scope 104 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _655 = _644;                     // scope 104 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _654 = _655;                     // scope 104 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _656 = Option::<Arguments<'_>>::None; // scope 104 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _650 = assert_failed::<bool, bool>(move _651, move _652, move _654, move _656); // scope 104 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb128: {
        _634 = _635;                     // scope 102 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _633 = Not(move _634);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:5: 140:36
        switchInt(move _633) -> [0: bb130, otherwise: bb129]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:5: 140:36
    }

    bb129: {
        _657 = panic(const "assertion failed: yes!(1.0f32, 1.0f32 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:5: 140:36
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:5: 140:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb130: {
        _660 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _929 = const _;                  // scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f32>, val: Unevaluated(range_from, [], Some(promoted[19])) }
        _662 = _929;                     // scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _928 = const _;                  // scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_from, [], Some(promoted[18])) }
        _664 = _928;                     // scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _663 = _664;                     // scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _661 = RangeFrom::<f32>::contains::<f32>(move _662, move _663) -> bb131; // scope 105 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f32>, &'b f32) -> bool {RangeFrom::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb131: {
        _666 = &_660;                    // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _667 = &_661;                    // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _665 = (move _666, move _667);   // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _668 = (_665.0: &bool);          // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _669 = (_665.1: &bool);          // scope 106 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _672 = (*_668);                  // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _673 = (*_669);                  // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _671 = Eq(move _672, move _673); // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _670 = Not(move _671);           // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _670) -> [0: bb133, otherwise: bb132]; // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb132: {
        _674 = const core::panicking::AssertKind::Eq; // scope 107 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _676 = const core::panicking::AssertKind::Eq; // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _678 = _668;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _677 = _678;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _680 = _669;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _679 = _680;                     // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _681 = Option::<Arguments<'_>>::None; // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _675 = assert_failed::<bool, bool>(move _676, move _677, move _679, move _681); // scope 108 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb133: {
        _659 = _660;                     // scope 106 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _658 = Not(move _659);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:5: 141:43
        switchInt(move _658) -> [0: bb135, otherwise: bb134]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:5: 141:43
    }

    bb134: {
        _682 = panic(const "assertion failed: yes!(f32 :: INFINITY, 1.0f32 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:5: 141:43
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:5: 141:43
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb135: {
        _685 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _927 = const _;                  // scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f32>, val: Unevaluated(range_from, [], Some(promoted[17])) }
        _687 = _927;                     // scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _926 = const _;                  // scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f32, val: Unevaluated(range_from, [], Some(promoted[16])) }
        _689 = _926;                     // scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _688 = _689;                     // scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _686 = RangeFrom::<f32>::contains::<f32>(move _687, move _688) -> bb136; // scope 109 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f32>, &'b f32) -> bool {RangeFrom::<f32>::contains::<f32>}, val: Value(<ZST>) }
    }

    bb136: {
        _691 = &_685;                    // scope 110 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _692 = &_686;                    // scope 110 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _690 = (move _691, move _692);   // scope 110 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _693 = (_690.0: &bool);          // scope 110 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _694 = (_690.1: &bool);          // scope 110 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _697 = (*_693);                  // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _698 = (*_694);                  // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _696 = Eq(move _697, move _698); // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _695 = Not(move _696);           // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _695) -> [0: bb138, otherwise: bb137]; // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb137: {
        _699 = const core::panicking::AssertKind::Eq; // scope 111 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _701 = const core::panicking::AssertKind::Eq; // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _703 = _693;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _702 = _703;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _705 = _694;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _704 = _705;                     // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _706 = Option::<Arguments<'_>>::None; // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _700 = assert_failed::<bool, bool>(move _701, move _702, move _704, move _706); // scope 112 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb138: {
        _684 = _685;                     // scope 110 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _683 = Not(move _684);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:5: 142:50
        switchInt(move _683) -> [0: bb140, otherwise: bb139]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:5: 142:50
    }

    bb139: {
        _707 = panic(const "assertion failed: yes!(f32 :: INFINITY, f32 :: INFINITY ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:5: 142:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:5: 142:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb140: {
        _710 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _925 = const _;                  // scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f64>, val: Unevaluated(range_from, [], Some(promoted[15])) }
        _712 = _925;                     // scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _924 = const _;                  // scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_from, [], Some(promoted[14])) }
        _714 = _924;                     // scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _713 = _714;                     // scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _711 = RangeFrom::<f64>::contains::<f64>(move _712, move _713) -> bb141; // scope 113 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f64>, &'b f64) -> bool {RangeFrom::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb141: {
        _716 = &_710;                    // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _717 = &_711;                    // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _715 = (move _716, move _717);   // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _718 = (_715.0: &bool);          // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _719 = (_715.1: &bool);          // scope 114 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _722 = (*_718);                  // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _723 = (*_719);                  // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _721 = Eq(move _722, move _723); // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _720 = Not(move _721);           // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _720) -> [0: bb143, otherwise: bb142]; // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb142: {
        _724 = const core::panicking::AssertKind::Eq; // scope 115 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _726 = const core::panicking::AssertKind::Eq; // scope 116 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _728 = _718;                     // scope 116 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _727 = _728;                     // scope 116 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _730 = _719;                     // scope 116 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _729 = _730;                     // scope 116 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _731 = Option::<Arguments<'_>>::None; // scope 116 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _725 = assert_failed::<bool, bool>(move _726, move _727, move _729, move _731); // scope 116 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb143: {
        _709 = _710;                     // scope 114 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _708 = Not(move _709);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:5: 145:58
        switchInt(move _708) -> [0: bb145, otherwise: bb144]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:5: 145:58
    }

    bb144: {
        _732 = panic(const "assertion failed: yes!(f64 :: NEG_INFINITY, f64 :: NEG_INFINITY ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:5: 145:58
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:5: 145:58
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb145: {
        _735 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _923 = const _;                  // scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f64>, val: Unevaluated(range_from, [], Some(promoted[13])) }
        _737 = _923;                     // scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _922 = const _;                  // scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_from, [], Some(promoted[12])) }
        _739 = _922;                     // scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _738 = _739;                     // scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _736 = RangeFrom::<f64>::contains::<f64>(move _737, move _738) -> bb146; // scope 117 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f64>, &'b f64) -> bool {RangeFrom::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb146: {
        _741 = &_735;                    // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _742 = &_736;                    // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _740 = (move _741, move _742);   // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _743 = (_740.0: &bool);          // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _744 = (_740.1: &bool);          // scope 118 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _747 = (*_743);                  // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _748 = (*_744);                  // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _746 = Eq(move _747, move _748); // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _745 = Not(move _746);           // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _745) -> [0: bb148, otherwise: bb147]; // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb147: {
        _749 = const core::panicking::AssertKind::Eq; // scope 119 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _751 = const core::panicking::AssertKind::Eq; // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _753 = _743;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _752 = _753;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _755 = _744;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _754 = _755;                     // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _756 = Option::<Arguments<'_>>::None; // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _750 = assert_failed::<bool, bool>(move _751, move _752, move _754, move _756); // scope 120 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb148: {
        _734 = _735;                     // scope 118 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _733 = Not(move _734);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:5: 146:54
        switchInt(move _733) -> [0: bb150, otherwise: bb149]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:5: 146:54
    }

    bb149: {
        _757 = panic(const "assertion failed: yes!(f64 :: INFINITY, f64 :: NEG_INFINITY ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:5: 146:54
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:5: 146:54
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb150: {
        _761 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _921 = const _;                  // scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f64>, val: Unevaluated(range_from, [], Some(promoted[11])) }
        _763 = _921;                     // scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _920 = const _;                  // scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_from, [], Some(promoted[10])) }
        _765 = _920;                     // scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _764 = _765;                     // scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _762 = RangeFrom::<f64>::contains::<f64>(move _763, move _764) -> bb151; // scope 121 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f64>, &'b f64) -> bool {RangeFrom::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb151: {
        _767 = &_761;                    // scope 122 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _768 = &_762;                    // scope 122 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _766 = (move _767, move _768);   // scope 122 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _769 = (_766.0: &bool);          // scope 122 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _770 = (_766.1: &bool);          // scope 122 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _773 = (*_769);                  // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _774 = (*_770);                  // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _772 = Eq(move _773, move _774); // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _771 = Not(move _772);           // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _771) -> [0: bb153, otherwise: bb152]; // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb152: {
        _775 = const core::panicking::AssertKind::Eq; // scope 123 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _777 = const core::panicking::AssertKind::Eq; // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _779 = _769;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _778 = _779;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _781 = _770;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _780 = _781;                     // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _782 = Option::<Arguments<'_>>::None; // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _776 = assert_failed::<bool, bool>(move _777, move _778, move _780, move _782); // scope 124 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb153: {
        _760 = _761;                     // scope 122 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _759 = Not(move _760);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:13: 147:47
        _758 = Not(move _759);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:5: 147:48
        switchInt(move _758) -> [0: bb155, otherwise: bb154]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:5: 147:48
    }

    bb154: {
        _783 = panic(const "assertion failed: !yes!(f64 :: NEG_INFINITY, 1.0f64 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:5: 147:48
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:5: 147:48
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb155: {
        _786 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _919 = const _;                  // scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f64>, val: Unevaluated(range_from, [], Some(promoted[9])) }
        _788 = _919;                     // scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _918 = const _;                  // scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_from, [], Some(promoted[8])) }
        _790 = _918;                     // scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _789 = _790;                     // scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _787 = RangeFrom::<f64>::contains::<f64>(move _788, move _789) -> bb156; // scope 125 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f64>, &'b f64) -> bool {RangeFrom::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb156: {
        _792 = &_786;                    // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _793 = &_787;                    // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _791 = (move _792, move _793);   // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _794 = (_791.0: &bool);          // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _795 = (_791.1: &bool);          // scope 126 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _798 = (*_794);                  // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _799 = (*_795);                  // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _797 = Eq(move _798, move _799); // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _796 = Not(move _797);           // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _796) -> [0: bb158, otherwise: bb157]; // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb157: {
        _800 = const core::panicking::AssertKind::Eq; // scope 127 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _802 = const core::panicking::AssertKind::Eq; // scope 128 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _804 = _794;                     // scope 128 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _803 = _804;                     // scope 128 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _806 = _795;                     // scope 128 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _805 = _806;                     // scope 128 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _807 = Option::<Arguments<'_>>::None; // scope 128 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _801 = assert_failed::<bool, bool>(move _802, move _803, move _805, move _807); // scope 128 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb158: {
        _785 = _786;                     // scope 126 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _784 = Not(move _785);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:5: 148:43
        switchInt(move _784) -> [0: bb160, otherwise: bb159]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:5: 148:43
    }

    bb159: {
        _808 = panic(const "assertion failed: yes!(f64 :: INFINITY, 1.0f64 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:5: 148:43
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:5: 148:43
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb160: {
        _812 = const false;              // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:61: 13:66
        _917 = const _;                  // scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f64>, val: Unevaluated(range_from, [], Some(promoted[7])) }
        _814 = _917;                     // scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _916 = const _;                  // scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_from, [], Some(promoted[6])) }
        _816 = _916;                     // scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _815 = _816;                     // scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _813 = RangeFrom::<f64>::contains::<f64>(move _814, move _815) -> bb161; // scope 129 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f64>, &'b f64) -> bool {RangeFrom::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb161: {
        _818 = &_812;                    // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _819 = &_813;                    // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _817 = (move _818, move _819);   // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _820 = (_817.0: &bool);          // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _821 = (_817.1: &bool);          // scope 130 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _824 = (*_820);                  // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _825 = (*_821);                  // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _823 = Eq(move _824, move _825); // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _822 = Not(move _823);           // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _822) -> [0: bb163, otherwise: bb162]; // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb162: {
        _826 = const core::panicking::AssertKind::Eq; // scope 131 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _828 = const core::panicking::AssertKind::Eq; // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _830 = _820;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _829 = _830;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _832 = _821;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _831 = _832;                     // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _833 = Option::<Arguments<'_>>::None; // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _827 = assert_failed::<bool, bool>(move _828, move _829, move _831, move _833); // scope 132 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb163: {
        _811 = _812;                     // scope 130 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _810 = Not(move _811);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:13: 149:51
        _809 = Not(move _810);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:5: 149:52
        switchInt(move _809) -> [0: bb165, otherwise: bb164]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:5: 149:52
    }

    bb164: {
        _834 = panic(const "assertion failed: !yes!(1.0f64 - f64 :: EPSILON, 1.0f64 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:5: 149:52
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:5: 149:52
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb165: {
        _837 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _915 = const _;                  // scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f64>, val: Unevaluated(range_from, [], Some(promoted[5])) }
        _839 = _915;                     // scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _914 = const _;                  // scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_from, [], Some(promoted[4])) }
        _841 = _914;                     // scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _840 = _841;                     // scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _838 = RangeFrom::<f64>::contains::<f64>(move _839, move _840) -> bb166; // scope 133 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f64>, &'b f64) -> bool {RangeFrom::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb166: {
        _843 = &_837;                    // scope 134 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _844 = &_838;                    // scope 134 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _842 = (move _843, move _844);   // scope 134 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _845 = (_842.0: &bool);          // scope 134 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _846 = (_842.1: &bool);          // scope 134 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _849 = (*_845);                  // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _850 = (*_846);                  // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _848 = Eq(move _849, move _850); // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _847 = Not(move _848);           // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _847) -> [0: bb168, otherwise: bb167]; // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb167: {
        _851 = const core::panicking::AssertKind::Eq; // scope 135 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _853 = const core::panicking::AssertKind::Eq; // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _855 = _845;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _854 = _855;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _857 = _846;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _856 = _857;                     // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _858 = Option::<Arguments<'_>>::None; // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _852 = assert_failed::<bool, bool>(move _853, move _854, move _856, move _858); // scope 136 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb168: {
        _836 = _837;                     // scope 134 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _835 = Not(move _836);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:5: 150:36
        switchInt(move _835) -> [0: bb170, otherwise: bb169]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:5: 150:36
    }

    bb169: {
        _859 = panic(const "assertion failed: yes!(1.0f64, 1.0f64 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:5: 150:36
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:5: 150:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb170: {
        _862 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _913 = const _;                  // scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f64>, val: Unevaluated(range_from, [], Some(promoted[3])) }
        _864 = _913;                     // scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _912 = const _;                  // scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_from, [], Some(promoted[2])) }
        _866 = _912;                     // scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _865 = _866;                     // scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _863 = RangeFrom::<f64>::contains::<f64>(move _864, move _865) -> bb171; // scope 137 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f64>, &'b f64) -> bool {RangeFrom::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb171: {
        _868 = &_862;                    // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _869 = &_863;                    // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _867 = (move _868, move _869);   // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _870 = (_867.0: &bool);          // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _871 = (_867.1: &bool);          // scope 138 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _874 = (*_870);                  // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _875 = (*_871);                  // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _873 = Eq(move _874, move _875); // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _872 = Not(move _873);           // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _872) -> [0: bb173, otherwise: bb172]; // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb172: {
        _876 = const core::panicking::AssertKind::Eq; // scope 139 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _878 = const core::panicking::AssertKind::Eq; // scope 140 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _880 = _870;                     // scope 140 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _879 = _880;                     // scope 140 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _882 = _871;                     // scope 140 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _881 = _882;                     // scope 140 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _883 = Option::<Arguments<'_>>::None; // scope 140 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _877 = assert_failed::<bool, bool>(move _878, move _879, move _881, move _883); // scope 140 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb173: {
        _861 = _862;                     // scope 138 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _860 = Not(move _861);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:5: 151:43
        switchInt(move _860) -> [0: bb175, otherwise: bb174]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:5: 151:43
    }

    bb174: {
        _884 = panic(const "assertion failed: yes!(f64 :: INFINITY, 1.0f64 ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:5: 151:43
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:5: 151:43
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb175: {
        _887 = const true;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:13:50: 13:54
        _911 = const _;                  // scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // + literal: Const { ty: &RangeFrom<f64>, val: Unevaluated(range_from, [], Some(promoted[1])) }
        _889 = _911;                     // scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        _910 = const _;                  // scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
                                         // + literal: Const { ty: &f64, val: Unevaluated(range_from, [], Some(promoted[0])) }
        _891 = _910;                     // scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _890 = _891;                     // scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        _888 = RangeFrom::<f64>::contains::<f64>(move _889, move _890) -> bb176; // scope 141 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:30: 14:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a RangeFrom<f64>, &'b f64) -> bool {RangeFrom::<f64>::contains::<f64>}, val: Value(<ZST>) }
    }

    bb176: {
        _893 = &_887;                    // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _894 = &_888;                    // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _892 = (move _893, move _894);   // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _895 = (_892.0: &bool);          // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _896 = (_892.1: &bool);          // scope 142 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _899 = (*_895);                  // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _900 = (*_896);                  // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _898 = Eq(move _899, move _900); // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _897 = Not(move _898);           // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _897) -> [0: bb178, otherwise: bb177]; // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb177: {
        _901 = const core::panicking::AssertKind::Eq; // scope 143 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _903 = const core::panicking::AssertKind::Eq; // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: AssertKind, val: Value(Scalar(0x00)) }
        _905 = _895;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _904 = _905;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _907 = _896;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _906 = _907;                     // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _908 = Option::<Arguments<'_>>::None; // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _902 = assert_failed::<bool, bool>(move _903, move _904, move _906, move _908); // scope 144 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(AssertKind, &'a bool, &'b bool, Option<Arguments<'c>>) -> ! {assert_failed::<bool, bool>}, val: Value(<ZST>) }
    }

    bb178: {
        _886 = _887;                     // scope 142 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:16:13: 16:14
        _885 = Not(move _886);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:5: 152:50
        switchInt(move _885) -> [0: bb180, otherwise: bb179]; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:5: 152:50
    }

    bb179: {
        _909 = panic(const "assertion failed: yes!(f64 :: INFINITY, f64 :: INFINITY ..)"); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:5: 152:50
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:5: 152:50
                                         // + literal: Const { ty: fn(&'static str) -> ! {panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb180: {
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:153:2: 153:2
    }
}

promoted[0] in range_from: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:18: 152:31

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:18: 152:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[1] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:33: 152:48

    bb0: {
        _1 = RangeFrom::<f64> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:152:33: 152:48
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[2] in range_from: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:18: 151:31

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:18: 151:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[3] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:33: 151:41

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:151:33: 151:41
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[4] in range_from: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:18: 150:24

    bb0: {
        _1 = const 1f64;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:18: 150:24
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[5] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:26: 150:34

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:150:26: 150:34
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[6] in range_from: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:19: 149:40

    bb0: {
        _1 = Sub(const 1f64, const _);   // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:19: 149:40
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[7] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:42: 149:50

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:149:42: 149:50
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[8] in range_from: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:18: 148:31

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:18: 148:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[9] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:33: 148:41

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:148:33: 148:41
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[10] in range_from: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:19: 147:36

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:19: 147:36
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[11] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:38: 147:46

    bb0: {
        _1 = RangeFrom::<f64> { start: const 1f64 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:147:38: 147:46
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[12] in range_from: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:18: 146:31

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:18: 146:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[13] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:33: 146:52

    bb0: {
        _1 = RangeFrom::<f64> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:146:33: 146:52
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[14] in range_from: &f64 = {
    let mut _0: &f64;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f64;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:18: 145:35

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:18: 145:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[15] in range_from: &RangeFrom<f64> = {
    let mut _0: &std::ops::RangeFrom<f64>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f64>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:37: 145:56

    bb0: {
        _1 = RangeFrom::<f64> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:145:37: 145:56
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[16] in range_from: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:18: 142:31

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:18: 142:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[17] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:33: 142:48

    bb0: {
        _1 = RangeFrom::<f32> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:142:33: 142:48
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[18] in range_from: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:18: 141:31

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:18: 141:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[19] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:33: 141:41

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:141:33: 141:41
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[20] in range_from: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:18: 140:24

    bb0: {
        _1 = const 1f32;                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:18: 140:24
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[21] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:26: 140:34

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:140:26: 140:34
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[22] in range_from: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:19: 139:40

    bb0: {
        _1 = Sub(const 1f32, const _);   // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:19: 139:40
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[23] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:42: 139:50

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:139:42: 139:50
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[24] in range_from: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:18: 138:31

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:18: 138:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[25] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:33: 138:41

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:138:33: 138:41
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[26] in range_from: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:19: 137:36

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:19: 137:36
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[27] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:38: 137:46

    bb0: {
        _1 = RangeFrom::<f32> { start: const 1f32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:137:38: 137:46
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[28] in range_from: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:18: 136:31

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:18: 136:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[29] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:33: 136:52

    bb0: {
        _1 = RangeFrom::<f32> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:136:33: 136:52
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[30] in range_from: &f32 = {
    let mut _0: &f32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: f32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:18: 135:35

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:18: 135:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[31] in range_from: &RangeFrom<f32> = {
    let mut _0: &std::ops::RangeFrom<f32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<f32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:37: 135:56

    bb0: {
        _1 = RangeFrom::<f32> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:135:37: 135:56
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[32] in range_from: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:18: 132:33

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:18: 132:33
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[33] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:35: 132:52

    bb0: {
        _1 = RangeFrom::<char> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:132:35: 132:52
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[34] in range_from: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:19: 131:22

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:19: 131:22
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[35] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:24: 131:29

    bb0: {
        _1 = RangeFrom::<char> { start: const 'b' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:131:24: 131:29
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[36] in range_from: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:18: 130:21

    bb0: {
        _1 = const 'b';                  // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:18: 130:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[37] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:23: 130:28

    bb0: {
        _1 = RangeFrom::<char> { start: const 'a' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:130:23: 130:28
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[38] in range_from: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:18: 129:21

    bb0: {
        _1 = const 'a';                  // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:18: 129:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[39] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:23: 129:28

    bb0: {
        _1 = RangeFrom::<char> { start: const 'a' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:129:23: 129:28
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[40] in range_from: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:18: 128:33

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:18: 128:33
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[41] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:35: 128:44

    bb0: {
        _1 = RangeFrom::<char> { start: const '\0' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:128:35: 128:44
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[42] in range_from: &char = {
    let mut _0: &char;                   // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: char;                    // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:18: 127:25

    bb0: {
        _1 = const '\0';                 // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:18: 127:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[43] in range_from: &RangeFrom<char> = {
    let mut _0: &std::ops::RangeFrom<char>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<char>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:27: 127:36

    bb0: {
        _1 = RangeFrom::<char> { start: const '\0' }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:127:27: 127:36
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[44] in range_from: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i16;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:18: 124:26

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:18: 124:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[45] in range_from: &RangeFrom<i16> = {
    let mut _0: &std::ops::RangeFrom<i16>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:28: 124:38

    bb0: {
        _1 = RangeFrom::<i16> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:124:28: 124:38
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[46] in range_from: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:18: 123:20

    bb0: {
        _1 = const -3_i32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:18: 123:20
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[47] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:22: 123:26

    bb0: {
        _1 = RangeFrom::<i32> { start: const -4_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:123:22: 123:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[48] in range_from: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:18: 122:20

    bb0: {
        _1 = const -4_i32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:18: 122:20
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[49] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:22: 122:26

    bb0: {
        _1 = RangeFrom::<i32> { start: const -4_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:122:22: 122:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[50] in range_from: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:19: 121:21

    bb0: {
        _1 = const -4_i32;               // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:19: 121:21
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[51] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:23: 121:26

    bb0: {
        _1 = RangeFrom::<i32> { start: const 5_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:121:23: 121:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[52] in range_from: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i16;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:19: 120:27

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:19: 120:27
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[53] in range_from: &RangeFrom<i16> = {
    let mut _0: &std::ops::RangeFrom<i16>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:29: 120:35

    bb0: {
        _1 = RangeFrom::<i16> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:120:29: 120:35
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[54] in range_from: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i16;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:18: 118:26

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:18: 118:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[55] in range_from: &RangeFrom<i16> = {
    let mut _0: &std::ops::RangeFrom<i16>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:28: 118:38

    bb0: {
        _1 = RangeFrom::<i16> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:118:28: 118:38
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[56] in range_from: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i16;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:18: 117:26

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:18: 117:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[57] in range_from: &RangeFrom<i16> = {
    let mut _0: &std::ops::RangeFrom<i16>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i16>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:28: 117:38

    bb0: {
        _1 = RangeFrom::<i16> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:117:28: 117:38
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[58] in range_from: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:18: 114:25

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:18: 114:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[59] in range_from: &RangeFrom<u8> = {
    let mut _0: &std::ops::RangeFrom<u8>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:27: 114:36

    bb0: {
        _1 = RangeFrom::<u8> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:114:27: 114:36
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[60] in range_from: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:18: 113:19

    bb0: {
        _1 = const 6_i32;                // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:18: 113:19
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[61] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:21: 113:24

    bb0: {
        _1 = RangeFrom::<i32> { start: const 5_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:113:21: 113:24
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[62] in range_from: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:18: 112:19

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:18: 112:19
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[63] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:21: 112:24

    bb0: {
        _1 = RangeFrom::<i32> { start: const 5_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:112:21: 112:24
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[64] in range_from: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: i32;                     // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:19: 111:20

    bb0: {
        _1 = const 4_i32;                // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:19: 111:20
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[65] in range_from: &RangeFrom<i32> = {
    let mut _0: &std::ops::RangeFrom<i32>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<i32>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:22: 111:25

    bb0: {
        _1 = RangeFrom::<i32> { start: const 5_i32 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:111:22: 111:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[66] in range_from: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:19: 110:26

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:19: 110:26
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[67] in range_from: &RangeFrom<u8> = {
    let mut _0: &std::ops::RangeFrom<u8>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:28: 110:31

    bb0: {
        _1 = RangeFrom::<u8> { start: const 1_u8 }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:110:28: 110:31
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[68] in range_from: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:18: 109:25

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:18: 109:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[69] in range_from: &RangeFrom<u8> = {
    let mut _0: &std::ops::RangeFrom<u8>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:27: 109:36

    bb0: {
        _1 = RangeFrom::<u8> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:109:27: 109:36
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

promoted[70] in range_from: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    let mut _1: u8;                      // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:18: 108:25

    bb0: {
        _1 = const _;                    // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:18: 108:25
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:39: 14:50
    }
}

promoted[71] in range_from: &RangeFrom<u8> = {
    let mut _0: &std::ops::RangeFrom<u8>; // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    let mut _1: std::ops::RangeFrom<u8>; // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:27: 108:36

    bb0: {
        _1 = RangeFrom::<u8> { start: const _ }; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:108:27: 108:36
        _0 = &_1;                        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:14:21: 14:51
    }
}

const range_from::NI16: i16 = {
    let mut _0: i16;                     // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:119:17: 119:20
    let mut _1: (i16, bool);             // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:119:23: 119:35

    bb0: {
        _1 = CheckedAdd(const _, const 1_i16); // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:119:23: 119:35
        assert(!move (_1.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 1_i16) -> bb1; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:119:23: 119:35
    }

    bb1: {
        _0 = move (_1.0: i16);           // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:119:23: 119:35
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:119:5: 119:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:155:11: 155:11
    let _1: ();                          // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:156:5: 156:25
    let _2: ();                          // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:157:5: 157:15
    let _3: ();                          // in scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:158:5: 158:17

    bb0: {
        _1 = range_to_inclusive() -> bb1; // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:156:5: 156:25
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:156:5: 156:23
                                         // + literal: Const { ty: fn() {range_to_inclusive}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = range_to() -> bb2;          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:157:5: 157:15
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:157:5: 157:13
                                         // + literal: Const { ty: fn() {range_to}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = range_from() -> bb3;        // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:158:5: 158:17
                                         // mir::Constant
                                         // + span: ui/half-open-range-patterns/half-open-range-pats-semantics.rs:158:5: 158:15
                                         // + literal: Const { ty: fn() {range_from}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/half-open-range-patterns/half-open-range-pats-semantics.rs:159:2: 159:2
    }
}
