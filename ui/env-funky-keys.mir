// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/env-funky-keys.rs:23:11: 23:11
    let mut _1: usize;                   // in scope 0 at ui/env-funky-keys.rs:24:8: 24:30
    let mut _2: std::env::ArgsOs;        // in scope 0 at ui/env-funky-keys.rs:24:8: 24:22
    let mut _3: std::env::VarsOs;        // in scope 0 at ui/env-funky-keys.rs:25:29: 25:43
    let mut _4: std::env::VarsOs;        // in scope 0 at ui/env-funky-keys.rs:25:29: 25:43
    let mut _5: std::env::VarsOs;        // in scope 0 at ui/env-funky-keys.rs:25:29: 25:43
    let mut _6: std::option::Option<(std::ffi::OsString, std::ffi::OsString)>; // in scope 0 at ui/env-funky-keys.rs:25:29: 25:43
    let mut _7: &mut std::env::VarsOs;   // in scope 0 at ui/env-funky-keys.rs:25:29: 25:43
    let mut _8: &mut std::env::VarsOs;   // in scope 0 at ui/env-funky-keys.rs:25:29: 25:43
    let mut _9: isize;                   // in scope 0 at ui/env-funky-keys.rs:25:9: 27:10
    let mut _12: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _14: &[&str];                // in scope 0 at ui/env-funky-keys.rs:26:20: 26:47
    let mut _15: &[&str; 2];             // in scope 0 at ui/env-funky-keys.rs:26:20: 26:47
    let _16: &[&str; 2];                 // in scope 0 at ui/env-funky-keys.rs:26:20: 26:47
    let mut _17: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _18: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _19: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _20: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _21: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/env-funky-keys.rs:26:49: 26:52
    let mut _22: &std::ffi::OsString;    // in scope 0 at ui/env-funky-keys.rs:26:49: 26:52
    let _23: &std::ffi::OsString;        // in scope 0 at ui/env-funky-keys.rs:26:49: 26:52
    let mut _24: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/env-funky-keys.rs:26:54: 26:59
    let mut _25: &std::ffi::OsString;    // in scope 0 at ui/env-funky-keys.rs:26:54: 26:59
    let _26: &std::ffi::OsString;        // in scope 0 at ui/env-funky-keys.rs:26:54: 26:59
    let _27: std::ffi::CString;          // in scope 0 at ui/env-funky-keys.rs:31:9: 31:20
    let mut _28: std::result::Result<std::ffi::CString, std::ffi::NulError>; // in scope 0 at ui/env-funky-keys.rs:31:23: 34:52
    let mut _29: &[u8];                  // in scope 0 at ui/env-funky-keys.rs:31:36: 34:51
    let mut _30: &std::ffi::OsStr;       // in scope 0 at ui/env-funky-keys.rs:31:36: 34:51
    let _31: &std::ffi::OsStr;           // in scope 0 at ui/env-funky-keys.rs:31:36: 33:52
    let mut _32: &std::path::Path;       // in scope 0 at ui/env-funky-keys.rs:31:36: 33:52
    let _33: &std::path::Path;           // in scope 0 at ui/env-funky-keys.rs:31:36: 33:52
    let mut _34: &std::path::PathBuf;    // in scope 0 at ui/env-funky-keys.rs:31:36: 33:52
    let _35: std::path::PathBuf;         // in scope 0 at ui/env-funky-keys.rs:31:36: 32:49
    let mut _36: std::result::Result<std::path::PathBuf, std::io::Error>; // in scope 0 at ui/env-funky-keys.rs:31:36: 31:54
    let mut _38: std::result::Result<std::ffi::CString, std::ffi::NulError>; // in scope 0 at ui/env-funky-keys.rs:35:23: 35:45
    let mut _40: &std::ffi::CStr;        // in scope 0 at ui/env-funky-keys.rs:36:35: 36:55
    let _41: &std::ffi::CStr;            // in scope 0 at ui/env-funky-keys.rs:36:35: 36:55
    let mut _42: &std::ffi::CString;     // in scope 0 at ui/env-funky-keys.rs:36:35: 36:55
    let mut _44: &[*const i8; 3];        // in scope 0 at ui/env-funky-keys.rs:37:34: 37:68
    let _45: &[*const i8; 3];            // in scope 0 at ui/env-funky-keys.rs:37:34: 37:68
    let _46: [*const i8; 3];             // in scope 0 at ui/env-funky-keys.rs:37:35: 37:68
    let mut _47: *const i8;              // in scope 0 at ui/env-funky-keys.rs:37:36: 37:44
    let mut _48: *const i8;              // in scope 0 at ui/env-funky-keys.rs:37:46: 37:54
    let mut _49: *const i8;              // in scope 0 at ui/env-funky-keys.rs:37:56: 37:67
    let mut _51: &[*const i8; 2];        // in scope 0 at ui/env-funky-keys.rs:38:34: 38:70
    let _52: &[*const i8; 2];            // in scope 0 at ui/env-funky-keys.rs:38:34: 38:70
    let _53: [*const i8; 2];             // in scope 0 at ui/env-funky-keys.rs:38:35: 38:70
    let mut _54: *const i8;              // in scope 0 at ui/env-funky-keys.rs:38:36: 38:56
    let mut _55: &std::ffi::CStr;        // in scope 0 at ui/env-funky-keys.rs:38:36: 38:56
    let _56: &std::ffi::CStr;            // in scope 0 at ui/env-funky-keys.rs:38:36: 38:56
    let mut _57: &std::ffi::CString;     // in scope 0 at ui/env-funky-keys.rs:38:36: 38:56
    let mut _58: *const i8;              // in scope 0 at ui/env-funky-keys.rs:38:58: 38:69
    let _59: i32;                        // in scope 0 at ui/env-funky-keys.rs:40:9: 40:45
    let mut _60: *const i8;              // in scope 0 at ui/env-funky-keys.rs:40:16: 40:24
    let mut _61: *const *const i8;       // in scope 0 at ui/env-funky-keys.rs:40:26: 40:34
    let _62: &*const i8;                 // in scope 0 at ui/env-funky-keys.rs:40:26: 40:34
    let _63: usize;                      // in scope 0 at ui/env-funky-keys.rs:40:32: 40:33
    let mut _64: usize;                  // in scope 0 at ui/env-funky-keys.rs:40:27: 40:34
    let mut _65: bool;                   // in scope 0 at ui/env-funky-keys.rs:40:27: 40:34
    let mut _66: *const *const i8;       // in scope 0 at ui/env-funky-keys.rs:40:36: 40:44
    let _67: &*const i8;                 // in scope 0 at ui/env-funky-keys.rs:40:36: 40:44
    let _68: usize;                      // in scope 0 at ui/env-funky-keys.rs:40:42: 40:43
    let mut _69: usize;                  // in scope 0 at ui/env-funky-keys.rs:40:37: 40:44
    let mut _70: bool;                   // in scope 0 at ui/env-funky-keys.rs:40:37: 40:44
    let mut _71: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug iter => _5;                // in scope 1 at ui/env-funky-keys.rs:25:29: 25:43
        let _10: std::ffi::OsString;     // in scope 1 at ui/env-funky-keys.rs:25:14: 25:17
        let _11: std::ffi::OsString;     // in scope 1 at ui/env-funky-keys.rs:25:19: 25:24
        scope 2 {
            debug key => _10;            // in scope 2 at ui/env-funky-keys.rs:25:14: 25:17
            debug value => _11;          // in scope 2 at ui/env-funky-keys.rs:25:19: 25:24
            let mut _72: &[&str; 2];     // in scope 2 at ui/env-funky-keys.rs:26:20: 26:47
        }
    }
    scope 3 {
        debug current_exe => _27;        // in scope 3 at ui/env-funky-keys.rs:31:9: 31:20
        let _37: std::ffi::CString;      // in scope 3 at ui/env-funky-keys.rs:35:9: 35:20
        scope 4 {
            debug new_env_var => _37;    // in scope 4 at ui/env-funky-keys.rs:35:9: 35:20
            let _39: *const i8;          // in scope 4 at ui/env-funky-keys.rs:36:9: 36:17
            scope 5 {
                debug filename => _39;   // in scope 5 at ui/env-funky-keys.rs:36:9: 36:17
                let _43: &[*const i8];   // in scope 5 at ui/env-funky-keys.rs:37:9: 37:13
                scope 6 {
                    debug argv => _43;   // in scope 6 at ui/env-funky-keys.rs:37:9: 37:13
                    let _50: &[*const i8]; // in scope 6 at ui/env-funky-keys.rs:38:9: 38:13
                    scope 7 {
                        debug envp => _50; // in scope 7 at ui/env-funky-keys.rs:38:9: 38:13
                        scope 8 {
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = args_os() -> bb1;           // scope 0 at ui/env-funky-keys.rs:24:8: 24:22
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:24:8: 24:20
                                         // + literal: Const { ty: fn() -> ArgsOs {args_os}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <ArgsOs as Iterator>::count(move _2) -> bb2; // scope 0 at ui/env-funky-keys.rs:24:8: 24:30
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:24:23: 24:28
                                         // + literal: Const { ty: fn(ArgsOs) -> usize {<ArgsOs as Iterator>::count}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _1) -> [2: bb3, otherwise: bb14]; // scope 0 at ui/env-funky-keys.rs:24:8: 24:35
    }

    bb3: {
        _4 = vars_os() -> bb4;           // scope 0 at ui/env-funky-keys.rs:25:29: 25:43
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:25:29: 25:41
                                         // + literal: Const { ty: fn() -> VarsOs {vars_os}, val: Value(<ZST>) }
    }

    bb4: {
        _3 = <VarsOs as IntoIterator>::into_iter(move _4) -> bb5; // scope 0 at ui/env-funky-keys.rs:25:29: 25:43
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:25:29: 25:43
                                         // + literal: Const { ty: fn(VarsOs) -> <VarsOs as IntoIterator>::IntoIter {<VarsOs as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = move _3;                    // scope 0 at ui/env-funky-keys.rs:25:29: 25:43
        _8 = &mut _5;                    // scope 1 at ui/env-funky-keys.rs:25:29: 25:43
        _7 = &mut (*_8);                 // scope 1 at ui/env-funky-keys.rs:25:29: 25:43
        _6 = <VarsOs as Iterator>::next(move _7) -> [return: bb6, unwind: bb39]; // scope 1 at ui/env-funky-keys.rs:25:29: 25:43
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:25:29: 25:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut VarsOs) -> Option<<VarsOs as Iterator>::Item> {<VarsOs as Iterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = discriminant(_6);           // scope 1 at ui/env-funky-keys.rs:25:29: 25:43
        switchInt(move _9) -> [0: bb9, 1: bb7, otherwise: bb8]; // scope 1 at ui/env-funky-keys.rs:25:29: 25:43
    }

    bb7: {
        _10 = move (((_6 as Some).0: (std::ffi::OsString, std::ffi::OsString)).0: std::ffi::OsString); // scope 1 at ui/env-funky-keys.rs:25:14: 25:17
        _11 = move (((_6 as Some).0: (std::ffi::OsString, std::ffi::OsString)).1: std::ffi::OsString); // scope 1 at ui/env-funky-keys.rs:25:19: 25:24
        _72 = const _;                   // scope 2 at ui/env-funky-keys.rs:26:20: 26:47
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:26:20: 26:47
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _16 = _72;                       // scope 2 at ui/env-funky-keys.rs:26:20: 26:47
        _15 = _16;                       // scope 2 at ui/env-funky-keys.rs:26:20: 26:47
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 2 at ui/env-funky-keys.rs:26:20: 26:47
        _23 = &_10;                      // scope 2 at ui/env-funky-keys.rs:26:49: 26:52
        _22 = _23;                       // scope 2 at ui/env-funky-keys.rs:26:49: 26:52
        _21 = core::fmt::ArgumentV1::<'_>::new_debug::<OsString>(move _22) -> [return: bb10, unwind: bb37]; // scope 2 at ui/env-funky-keys.rs:26:49: 26:52
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:26:49: 26:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b OsString) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<OsString>}, val: Value(<ZST>) }
    }

    bb8: {
        unreachable;                     // scope 1 at ui/env-funky-keys.rs:25:29: 25:43
    }

    bb9: {
        drop(_5) -> bb13;                // scope 0 at ui/env-funky-keys.rs:27:9: 27:10
    }

    bb10: {
        _26 = &_11;                      // scope 2 at ui/env-funky-keys.rs:26:54: 26:59
        _25 = _26;                       // scope 2 at ui/env-funky-keys.rs:26:54: 26:59
        _24 = core::fmt::ArgumentV1::<'_>::new_debug::<OsString>(move _25) -> [return: bb11, unwind: bb37]; // scope 2 at ui/env-funky-keys.rs:26:54: 26:59
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:26:54: 26:59
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b OsString) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<OsString>}, val: Value(<ZST>) }
    }

    bb11: {
        _20 = [move _21, move _24];      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _19 = &_20;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _17 = move _18 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> [return: bb12, unwind: bb37]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _12 = panic_fmt(move _13) -> bb37; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at ui/env-funky-keys.rs:43:2: 43:2
    }

    bb14: {
        _36 = current_exe() -> bb15;     // scope 0 at ui/env-funky-keys.rs:31:36: 31:54
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:31:36: 31:52
                                         // + literal: Const { ty: fn() -> Result<PathBuf, std::io::Error> {current_exe}, val: Value(<ZST>) }
    }

    bb15: {
        _35 = Result::<PathBuf, std::io::Error>::unwrap(move _36) -> bb16; // scope 0 at ui/env-funky-keys.rs:31:36: 32:49
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:32:41: 32:47
                                         // + literal: Const { ty: fn(Result<PathBuf, std::io::Error>) -> PathBuf {Result::<PathBuf, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb16: {
        _34 = &_35;                      // scope 0 at ui/env-funky-keys.rs:31:36: 33:52
        _33 = <PathBuf as Deref>::deref(move _34) -> [return: bb17, unwind: bb36]; // scope 0 at ui/env-funky-keys.rs:31:36: 33:52
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:31:36: 33:52
                                         // + literal: Const { ty: for<'a> fn(&'a PathBuf) -> &'a <PathBuf as Deref>::Target {<PathBuf as Deref>::deref}, val: Value(<ZST>) }
    }

    bb17: {
        _32 = _33;                       // scope 0 at ui/env-funky-keys.rs:31:36: 33:52
        _31 = Path::as_os_str(move _32) -> [return: bb18, unwind: bb36]; // scope 0 at ui/env-funky-keys.rs:31:36: 33:52
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:33:41: 33:50
                                         // + literal: Const { ty: for<'a> fn(&'a Path) -> &'a OsStr {Path::as_os_str}, val: Value(<ZST>) }
    }

    bb18: {
        _30 = _31;                       // scope 0 at ui/env-funky-keys.rs:31:36: 34:51
        _29 = <OsStr as std::os::unix::ffi::OsStrExt>::as_bytes(move _30) -> [return: bb19, unwind: bb36]; // scope 0 at ui/env-funky-keys.rs:31:36: 34:51
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:34:41: 34:49
                                         // + literal: Const { ty: for<'a> fn(&'a OsStr) -> &'a [u8] {<OsStr as std::os::unix::ffi::OsStrExt>::as_bytes}, val: Value(<ZST>) }
    }

    bb19: {
        _28 = CString::new::<&[u8]>(move _29) -> [return: bb20, unwind: bb36]; // scope 0 at ui/env-funky-keys.rs:31:23: 34:52
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:31:23: 31:35
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[u8]) -> Result<CString, NulError> {CString::new::<&[u8]>}, val: Value(<ZST>) }
    }

    bb20: {
        _27 = Result::<CString, NulError>::unwrap(move _28) -> [return: bb21, unwind: bb36]; // scope 0 at ui/env-funky-keys.rs:31:23: 34:61
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:34:53: 34:59
                                         // + literal: Const { ty: fn(Result<CString, NulError>) -> CString {Result::<CString, NulError>::unwrap}, val: Value(<ZST>) }
    }

    bb21: {
        drop(_35) -> [return: bb22, unwind: bb35]; // scope 0 at ui/env-funky-keys.rs:34:61: 34:62
    }

    bb22: {
        _38 = CString::new::<&str>(const "FOOBAR") -> [return: bb23, unwind: bb35]; // scope 3 at ui/env-funky-keys.rs:35:23: 35:45
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:35:23: 35:35
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&str) -> Result<CString, NulError> {CString::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:35:36: 35:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        _37 = Result::<CString, NulError>::unwrap(move _38) -> [return: bb24, unwind: bb35]; // scope 3 at ui/env-funky-keys.rs:35:23: 35:54
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:35:46: 35:52
                                         // + literal: Const { ty: fn(Result<CString, NulError>) -> CString {Result::<CString, NulError>::unwrap}, val: Value(<ZST>) }
    }

    bb24: {
        _42 = &_27;                      // scope 4 at ui/env-funky-keys.rs:36:35: 36:55
        _41 = <CString as Deref>::deref(move _42) -> [return: bb25, unwind: bb34]; // scope 4 at ui/env-funky-keys.rs:36:35: 36:55
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:36:35: 36:55
                                         // + literal: Const { ty: for<'a> fn(&'a CString) -> &'a <CString as Deref>::Target {<CString as Deref>::deref}, val: Value(<ZST>) }
    }

    bb25: {
        _40 = _41;                       // scope 4 at ui/env-funky-keys.rs:36:35: 36:55
        _39 = CStr::as_ptr(move _40) -> [return: bb26, unwind: bb34]; // scope 4 at ui/env-funky-keys.rs:36:35: 36:55
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:36:47: 36:53
                                         // + literal: Const { ty: for<'a> fn(&'a CStr) -> *const i8 {CStr::as_ptr}, val: Value(<ZST>) }
    }

    bb26: {
        _47 = _39;                       // scope 5 at ui/env-funky-keys.rs:37:36: 37:44
        _48 = _39;                       // scope 5 at ui/env-funky-keys.rs:37:46: 37:54
        _49 = null::<i8>() -> [return: bb27, unwind: bb34]; // scope 5 at ui/env-funky-keys.rs:37:56: 37:67
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:37:56: 37:65
                                         // + literal: Const { ty: fn() -> *const i8 {null::<i8>}, val: Value(<ZST>) }
    }

    bb27: {
        _46 = [move _47, move _48, move _49]; // scope 5 at ui/env-funky-keys.rs:37:35: 37:68
        _45 = &_46;                      // scope 5 at ui/env-funky-keys.rs:37:34: 37:68
        _44 = _45;                       // scope 5 at ui/env-funky-keys.rs:37:34: 37:68
        _43 = move _44 as &[*const i8] (Pointer(Unsize)); // scope 5 at ui/env-funky-keys.rs:37:34: 37:68
        _57 = &_37;                      // scope 6 at ui/env-funky-keys.rs:38:36: 38:56
        _56 = <CString as Deref>::deref(move _57) -> [return: bb28, unwind: bb34]; // scope 6 at ui/env-funky-keys.rs:38:36: 38:56
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:38:36: 38:56
                                         // + literal: Const { ty: for<'a> fn(&'a CString) -> &'a <CString as Deref>::Target {<CString as Deref>::deref}, val: Value(<ZST>) }
    }

    bb28: {
        _55 = _56;                       // scope 6 at ui/env-funky-keys.rs:38:36: 38:56
        _54 = CStr::as_ptr(move _55) -> [return: bb29, unwind: bb34]; // scope 6 at ui/env-funky-keys.rs:38:36: 38:56
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:38:48: 38:54
                                         // + literal: Const { ty: for<'a> fn(&'a CStr) -> *const i8 {CStr::as_ptr}, val: Value(<ZST>) }
    }

    bb29: {
        _58 = null::<i8>() -> [return: bb30, unwind: bb34]; // scope 6 at ui/env-funky-keys.rs:38:58: 38:69
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:38:58: 38:67
                                         // + literal: Const { ty: fn() -> *const i8 {null::<i8>}, val: Value(<ZST>) }
    }

    bb30: {
        _53 = [move _54, move _58];      // scope 6 at ui/env-funky-keys.rs:38:35: 38:70
        _52 = &_53;                      // scope 6 at ui/env-funky-keys.rs:38:34: 38:70
        _51 = _52;                       // scope 6 at ui/env-funky-keys.rs:38:34: 38:70
        _50 = move _51 as &[*const i8] (Pointer(Unsize)); // scope 6 at ui/env-funky-keys.rs:38:34: 38:70
        _60 = _39;                       // scope 8 at ui/env-funky-keys.rs:40:16: 40:24
        _63 = const 0_usize;             // scope 8 at ui/env-funky-keys.rs:40:32: 40:33
        _64 = Len((*_43));               // scope 8 at ui/env-funky-keys.rs:40:27: 40:34
        _65 = Lt(_63, _64);              // scope 8 at ui/env-funky-keys.rs:40:27: 40:34
        assert(move _65, "index out of bounds: the length is {} but the index is {}", move _64, _63) -> [success: bb31, unwind: bb34]; // scope 8 at ui/env-funky-keys.rs:40:27: 40:34
    }

    bb31: {
        _62 = &(*_43)[_63];              // scope 8 at ui/env-funky-keys.rs:40:26: 40:34
        _61 = &raw const (*_62);         // scope 8 at ui/env-funky-keys.rs:40:26: 40:34
        _68 = const 0_usize;             // scope 8 at ui/env-funky-keys.rs:40:42: 40:43
        _69 = Len((*_50));               // scope 8 at ui/env-funky-keys.rs:40:37: 40:44
        _70 = Lt(_68, _69);              // scope 8 at ui/env-funky-keys.rs:40:37: 40:44
        assert(move _70, "index out of bounds: the length is {} but the index is {}", move _69, _68) -> [success: bb32, unwind: bb34]; // scope 8 at ui/env-funky-keys.rs:40:37: 40:44
    }

    bb32: {
        _67 = &(*_50)[_68];              // scope 8 at ui/env-funky-keys.rs:40:36: 40:44
        _66 = &raw const (*_67);         // scope 8 at ui/env-funky-keys.rs:40:36: 40:44
        _59 = execve(move _60, move _61, move _66) -> [return: bb33, unwind: bb34]; // scope 8 at ui/env-funky-keys.rs:40:9: 40:45
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:40:9: 40:15
                                         // + literal: Const { ty: unsafe extern "C" fn(*const i8, *const *const i8, *const *const i8) -> i32 {execve}, val: Value(<ZST>) }
    }

    bb33: {
        _71 = begin_panic::<&str>(const "execve failed") -> bb34; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:42:12: 42:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb34 (cleanup): {
        drop(_37) -> bb35;               // scope 3 at ui/env-funky-keys.rs:43:1: 43:2
    }

    bb35 (cleanup): {
        drop(_27) -> bb40;               // scope 0 at ui/env-funky-keys.rs:43:1: 43:2
    }

    bb36 (cleanup): {
        drop(_35) -> bb40;               // scope 0 at ui/env-funky-keys.rs:34:61: 34:62
    }

    bb37 (cleanup): {
        drop(_11) -> bb38;               // scope 1 at ui/env-funky-keys.rs:27:9: 27:10
    }

    bb38 (cleanup): {
        drop(_10) -> bb39;               // scope 1 at ui/env-funky-keys.rs:27:9: 27:10
    }

    bb39 (cleanup): {
        drop(_5) -> bb40;                // scope 0 at ui/env-funky-keys.rs:27:9: 27:10
    }

    bb40 (cleanup): {
        resume;                          // scope 0 at ui/env-funky-keys.rs:23:1: 43:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/env-funky-keys.rs:26:20: 26:47
    let mut _1: [&str; 2];               // in scope 0 at ui/env-funky-keys.rs:26:20: 26:47

    bb0: {
        _1 = [const "found env value ", const " "]; // scope 0 at ui/env-funky-keys.rs:26:20: 26:47
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:26:20: 26:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/env-funky-keys.rs:26:20: 26:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/env-funky-keys.rs:26:20: 26:47
        return;                          // scope 0 at ui/env-funky-keys.rs:26:20: 26:47
    }
}
