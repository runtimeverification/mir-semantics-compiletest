// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Bound::dummy(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:5:14: 5:19
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:5:21: 5:21

    bb0: {
        return;                          // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:5:24: 5:24
    }
}

fn <impl at ui/where-clauses/where-clause-bounds-inconsistency.rs:15:1: 15:20>::a(_1: &bool, _2: T) -> () {
    debug self => _1;                    // in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:16:20: 16:25
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:16:33: 16:33

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:16:34: 16:35
    }

    bb1: {
        return;                          // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:16:35: 16:35
    }
}

fn <impl at ui/where-clauses/where-clause-bounds-inconsistency.rs:15:1: 15:20>::b(_1: &bool, _2: T) -> () {
    debug self => _1;                    // in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:18:13: 18:18
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:18:26: 18:26

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:18:42: 18:43
    }

    bb1: {
        return;                          // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:18:43: 18:43
    }
}

fn <impl at ui/where-clauses/where-clause-bounds-inconsistency.rs:15:1: 15:20>::c(_1: &bool, _2: T) -> () {
    debug self => _1;                    // in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:19:20: 19:25
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:19:33: 19:33

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:19:34: 19:35
    }

    bb1: {
        return;                          // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:19:35: 19:35
    }
}

fn <impl at ui/where-clauses/where-clause-bounds-inconsistency.rs:15:1: 15:20>::d(_1: &bool, _2: T) -> () {
    debug self => _1;                    // in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:20:13: 20:18
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:20:26: 20:26

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:20:42: 20:43
    }

    bb1: {
        return;                          // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:20:43: 20:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/where-clauses/where-clause-bounds-inconsistency.rs:23:13: 23:13
    }
}
