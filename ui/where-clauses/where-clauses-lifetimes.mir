// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: I) -> () {
    debug it => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::slice::Iter<'_, isize>;
    let mut _3: &[isize];
    let mut _4: &[isize; 2];

    bb0: {
        _4 = const _;
        _3 = _4 as &[isize] (Pointer(Unsize));
        _2 = core::slice::<impl [isize]>::iter(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = foo::<'_, std::slice::Iter<'_, isize>>(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &[isize; 2] = {
    let mut _0: &[isize; 2];
    let mut _1: [isize; 2];

    bb0: {
        _1 = [const 1_isize, const 2_isize];
        _0 = &_1;
        return;
    }
}
