// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/where-clauses/where-clauses.rs:8:1: 8:20>::equal(_1: &T, _2: &T) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &&T;
    let mut _4: &&T;

    bb0: {
        _3 = &_1;
        _4 = &_2;
        _0 = <&T as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/where-clauses/where-clauses.rs:8:1: 8:20>::equals(_1: &T, _2: &U, _3: &U, _4: &X, _5: &X) -> bool {
    debug self => _1;
    debug this => _2;
    debug other => _3;
    debug x => _4;
    debug y => _5;
    let mut _0: bool;
    let mut _6: bool;
    let mut _7: &&U;
    let mut _8: &&U;
    let mut _9: bool;
    let mut _10: &&X;
    let mut _11: &&X;

    bb0: {
        _7 = &_2;
        _8 = &_3;
        _6 = <&U as PartialEq>::eq(move _7, move _8) -> [return: bb4, unwind continue];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _10 = &_4;
        _11 = &_5;
        _9 = <&X as PartialEq>::eq(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _6) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _9;
        goto -> bb3;
    }
}

fn equal(_1: &T, _2: &T) -> bool {
    debug x => _1;
    debug y => _2;
    let mut _0: bool;
    let mut _3: &&T;
    let mut _4: &&T;

    bb0: {
        _3 = &_1;
        _4 = &_2;
        _0 = <&T as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &bool;
    let _9: bool;
    let _10: ();
    let mut _11: std::fmt::Arguments<'_>;
    let mut _12: &[&str];
    let mut _13: &[core::fmt::rt::Argument<'_>];
    let _14: &[core::fmt::rt::Argument<'_>; 1];
    let _15: [core::fmt::rt::Argument<'_>; 1];
    let mut _16: core::fmt::rt::Argument<'_>;
    let _17: &bool;
    let _18: bool;
    let _19: ();
    let mut _20: std::fmt::Arguments<'_>;
    let mut _21: &[&str];
    let mut _22: &[core::fmt::rt::Argument<'_>];
    let _23: &[core::fmt::rt::Argument<'_>; 1];
    let _24: [core::fmt::rt::Argument<'_>; 1];
    let mut _25: core::fmt::rt::Argument<'_>;
    let _26: &bool;
    let _27: bool;
    let _28: ();
    let mut _29: std::fmt::Arguments<'_>;
    let mut _30: &[&str];
    let mut _31: &[core::fmt::rt::Argument<'_>];
    let _32: &[core::fmt::rt::Argument<'_>; 1];
    let _33: [core::fmt::rt::Argument<'_>; 1];
    let mut _34: core::fmt::rt::Argument<'_>;
    let _35: &bool;
    let _36: bool;
    let mut _37: &&str;
    let mut _38: &&str;
    let mut _39: &isize;
    let mut _40: &isize;
    let mut _41: &&str;
    let mut _42: &[&str; 2];
    let mut _43: &&str;
    let mut _44: &&str;
    let mut _45: &[&str; 2];
    let mut _46: &i32;
    let mut _47: &i32;
    let mut _48: &[&str; 2];
    let mut _49: &i32;
    let mut _50: &i32;
    let mut _51: &[&str; 2];

    bb0: {
        _51 = const _;
        _3 = _51 as &[&str] (Pointer(Unsize));
        _50 = const _;
        _49 = const _;
        _9 = equal::<i32>(_50, _49) -> [return: bb1, unwind continue];
    }

    bb1: {
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _48 = const _;
        _12 = _48 as &[&str] (Pointer(Unsize));
        _47 = const _;
        _46 = const _;
        _18 = equal::<i32>(_47, _46) -> [return: bb5, unwind continue];
    }

    bb5: {
        _17 = &_18;
        _16 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_17) -> [return: bb6, unwind continue];
    }

    bb6: {
        _15 = [move _16];
        _14 = &_15;
        _13 = _14 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _11 = Arguments::<'_>::new_v1(move _12, move _13) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = _print(move _11) -> [return: bb8, unwind continue];
    }

    bb8: {
        _45 = const _;
        _21 = _45 as &[&str] (Pointer(Unsize));
        _44 = const _;
        _43 = const _;
        _27 = <&str as Equal>::equal(_44, _43) -> [return: bb9, unwind continue];
    }

    bb9: {
        _26 = &_27;
        _25 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_26) -> [return: bb10, unwind continue];
    }

    bb10: {
        _24 = [move _25];
        _23 = &_24;
        _22 = _23 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _20 = Arguments::<'_>::new_v1(move _21, move _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        _19 = _print(move _20) -> [return: bb12, unwind continue];
    }

    bb12: {
        _42 = const _;
        _30 = _42 as &[&str] (Pointer(Unsize));
        _41 = const _;
        _40 = const _;
        _39 = const _;
        _38 = const _;
        _37 = const _;
        _36 = <&str as Equal>::equals::<isize, &str>(_41, _40, _39, _38, _37) -> [return: bb13, unwind continue];
    }

    bb13: {
        _35 = &_36;
        _34 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_35) -> [return: bb14, unwind continue];
    }

    bb14: {
        _33 = [move _34];
        _32 = &_33;
        _31 = _32 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _29 = Arguments::<'_>::new_v1(move _30, move _31) -> [return: bb15, unwind continue];
    }

    bb15: {
        _28 = _print(move _29) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "bar";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foo";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "hello";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "hello";
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "hello";
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
