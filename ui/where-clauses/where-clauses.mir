// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/where-clauses/where-clauses.rs:8:1: 8:20>::equal(_1: &T, _2: &T) -> bool {
    debug self => _1;
    debug other => _2;
    let mut _0: bool;
    let mut _3: &&T;
    let mut _4: &&T;

    bb0: {
        _3 = &_1;
        _4 = &_2;
        _0 = <&T as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/where-clauses/where-clauses.rs:8:1: 8:20>::equals(_1: &T, _2: &U, _3: &U, _4: &X, _5: &X) -> bool {
    debug self => _1;
    debug this => _2;
    debug other => _3;
    debug x => _4;
    debug y => _5;
    let mut _0: bool;
    let mut _6: bool;
    let mut _7: &&U;
    let mut _8: &&U;
    let mut _9: bool;
    let mut _10: &&X;
    let mut _11: &&X;

    bb0: {
        _7 = &_2;
        _8 = &_3;
        _6 = <&U as PartialEq>::eq(move _7, move _8) -> [return: bb4, unwind continue];
    }

    bb1: {
        _0 = const false;
        goto -> bb3;
    }

    bb2: {
        _10 = &_4;
        _11 = &_5;
        _9 = <&X as PartialEq>::eq(move _10, move _11) -> [return: bb5, unwind continue];
    }

    bb3: {
        return;
    }

    bb4: {
        switchInt(move _6) -> [0: bb1, otherwise: bb2];
    }

    bb5: {
        _0 = move _9;
        goto -> bb3;
    }
}

fn equal(_1: &T, _2: &T) -> bool {
    debug x => _1;
    debug y => _2;
    let mut _0: bool;
    let mut _3: &&T;
    let mut _4: &&T;

    bb0: {
        _3 = &_1;
        _4 = &_2;
        _0 = <&T as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let _4: &[&str; 2];
    let _5: [&str; 2];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &bool;
    let _11: bool;
    let _12: &i32;
    let _13: i32;
    let _14: &i32;
    let _15: i32;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: [core::fmt::rt::Argument<'_>; 1];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &bool;
    let _26: bool;
    let _27: &i32;
    let _28: i32;
    let _29: &i32;
    let _30: i32;
    let _31: ();
    let mut _32: std::fmt::Arguments<'_>;
    let mut _33: &[&str];
    let _34: &[&str; 2];
    let _35: [&str; 2];
    let mut _36: &[core::fmt::rt::Argument<'_>];
    let _37: &[core::fmt::rt::Argument<'_>; 1];
    let _38: [core::fmt::rt::Argument<'_>; 1];
    let mut _39: core::fmt::rt::Argument<'_>;
    let _40: &bool;
    let _41: bool;
    let mut _42: &&str;
    let _43: &str;
    let _44: &&str;
    let _45: &str;
    let _46: ();
    let mut _47: std::fmt::Arguments<'_>;
    let mut _48: &[&str];
    let _49: &[&str; 2];
    let _50: [&str; 2];
    let mut _51: &[core::fmt::rt::Argument<'_>];
    let _52: &[core::fmt::rt::Argument<'_>; 1];
    let _53: [core::fmt::rt::Argument<'_>; 1];
    let mut _54: core::fmt::rt::Argument<'_>;
    let _55: &bool;
    let _56: bool;
    let mut _57: &&str;
    let _58: &str;
    let _59: &isize;
    let _60: isize;
    let _61: &isize;
    let _62: isize;
    let _63: &&str;
    let _64: &str;
    let _65: &&str;
    let _66: &str;

    bb0: {
        _5 = [const "", const "\n"];
        _4 = &_5;
        _3 = _4 as &[&str] (PointerCoercion(Unsize));
        _13 = const 1_i32;
        _12 = &_13;
        _15 = const 2_i32;
        _14 = &_15;
        _11 = equal::<i32>(_12, _14) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _1 = _print(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _20 = [const "", const "\n"];
        _19 = &_20;
        _18 = _19 as &[&str] (PointerCoercion(Unsize));
        _28 = const 1_i32;
        _27 = &_28;
        _30 = const 1_i32;
        _29 = &_30;
        _26 = equal::<i32>(_27, _29) -> [return: bb5, unwind continue];
    }

    bb5: {
        _25 = &_26;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_25) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = [move _24];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = _print(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        _35 = [const "", const "\n"];
        _34 = &_35;
        _33 = _34 as &[&str] (PointerCoercion(Unsize));
        _43 = const "hello";
        _42 = &_43;
        _45 = const "hello";
        _44 = &_45;
        _41 = <&str as Equal>::equal(move _42, _44) -> [return: bb9, unwind continue];
    }

    bb9: {
        _40 = &_41;
        _39 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_40) -> [return: bb10, unwind continue];
    }

    bb10: {
        _38 = [move _39];
        _37 = &_38;
        _36 = _37 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _32 = Arguments::<'_>::new_v1(move _33, move _36) -> [return: bb11, unwind continue];
    }

    bb11: {
        _31 = _print(move _32) -> [return: bb12, unwind continue];
    }

    bb12: {
        _50 = [const "", const "\n"];
        _49 = &_50;
        _48 = _49 as &[&str] (PointerCoercion(Unsize));
        _58 = const "hello";
        _57 = &_58;
        _60 = const 1_isize;
        _59 = &_60;
        _62 = const 1_isize;
        _61 = &_62;
        _64 = const "foo";
        _63 = &_64;
        _66 = const "bar";
        _65 = &_66;
        _56 = <&str as Equal>::equals::<isize, &str>(move _57, _59, _61, _63, _65) -> [return: bb13, unwind continue];
    }

    bb13: {
        _55 = &_56;
        _54 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_55) -> [return: bb14, unwind continue];
    }

    bb14: {
        _53 = [move _54];
        _52 = &_53;
        _51 = _52 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _47 = Arguments::<'_>::new_v1(move _48, move _51) -> [return: bb15, unwind continue];
    }

    bb15: {
        _46 = _print(move _47) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }
}
