// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/where-clauses/where-clauses-method.rs:9:1: 9:15>::equals(_1: &Foo<T>, _2: &Foo<T>) -> bool {
    debug self => _1;
    debug u => _2;
    let mut _0: bool;
    let mut _3: &T;
    let mut _4: &T;

    bb0: {
        _3 = &((*_1).0: T);
        _4 = &((*_2).0: T);
        _0 = <T as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo<i32>;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: &[&str; 2];
    let _7: [&str; 2];
    let mut _8: &[core::fmt::rt::Argument<'_>];
    let _9: &[core::fmt::rt::Argument<'_>; 1];
    let _10: [core::fmt::rt::Argument<'_>; 1];
    let mut _11: core::fmt::rt::Argument<'_>;
    let _12: &bool;
    let _13: bool;
    let mut _14: &Foo<i32>;
    let _15: &Foo<i32>;
    let _16: ();
    let mut _17: std::fmt::Arguments<'_>;
    let mut _18: &[&str];
    let _19: &[&str; 2];
    let _20: [&str; 2];
    let mut _21: &[core::fmt::rt::Argument<'_>];
    let _22: &[core::fmt::rt::Argument<'_>; 1];
    let _23: [core::fmt::rt::Argument<'_>; 1];
    let mut _24: core::fmt::rt::Argument<'_>;
    let _25: &bool;
    let _26: bool;
    let mut _27: &Foo<i32>;
    let _28: &Foo<i32>;
    scope 1 {
        debug x => _1;
        let _2: Foo<i32>;
        scope 2 {
            debug y => _2;
        }
    }

    bb0: {
        _1 = Foo::<i32> { value: const 1_i32 };
        _2 = Foo::<i32> { value: const 2_i32 };
        _7 = [const "", const "\n"];
        _6 = &_7;
        _5 = _6 as &[&str] (PointerCoercion(Unsize));
        _14 = &_1;
        _15 = &_1;
        _13 = Foo::<i32>::equals(move _14, _15) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = &_13;
        _11 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_12) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = [move _11];
        _9 = &_10;
        _8 = _9 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _20 = [const "", const "\n"];
        _19 = &_20;
        _18 = _19 as &[&str] (PointerCoercion(Unsize));
        _27 = &_1;
        _28 = &_2;
        _26 = Foo::<i32>::equals(move _27, _28) -> [return: bb5, unwind continue];
    }

    bb5: {
        _25 = &_26;
        _24 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_25) -> [return: bb6, unwind continue];
    }

    bb6: {
        _23 = [move _24];
        _22 = &_23;
        _21 = _22 as &[core::fmt::rt::Argument<'_>] (PointerCoercion(Unsize));
        _17 = Arguments::<'_>::new_v1(move _18, move _21) -> [return: bb7, unwind continue];
    }

    bb7: {
        _16 = _print(move _17) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}
