// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/where-clauses/where-clauses-method.rs:9:1: 9:15>::equals(_1: &Foo<T>, _2: &Foo<T>) -> bool {
    debug self => _1;
    debug u => _2;
    let mut _0: bool;
    let mut _3: &T;
    let mut _4: &T;

    bb0: {
        _3 = &((*_1).0: T);
        _4 = &((*_2).0: T);
        _0 = <T as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo<i32>;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &bool;
    let _11: bool;
    let mut _12: &Foo<i32>;
    let _13: &Foo<i32>;
    let _14: ();
    let mut _15: std::fmt::Arguments<'_>;
    let mut _16: &[&str];
    let mut _17: &[core::fmt::rt::Argument<'_>];
    let _18: &[core::fmt::rt::Argument<'_>; 1];
    let _19: [core::fmt::rt::Argument<'_>; 1];
    let mut _20: core::fmt::rt::Argument<'_>;
    let _21: &bool;
    let _22: bool;
    let mut _23: &Foo<i32>;
    let _24: &Foo<i32>;
    scope 1 {
        debug x => _1;
        let _2: Foo<i32>;
        scope 2 {
            debug y => _2;
            let mut _25: &[&str; 2];
            let mut _26: &[&str; 2];
        }
    }

    bb0: {
        _1 = Foo::<i32> { value: const 1_i32 };
        _2 = Foo::<i32> { value: const 2_i32 };
        _26 = const _;
        _5 = _26 as &[&str] (Pointer(Unsize));
        _12 = &_1;
        _13 = &_1;
        _11 = Foo::<i32>::equals(move _12, _13) -> [return: bb1, unwind continue];
    }

    bb1: {
        _10 = &_11;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind continue];
    }

    bb4: {
        _25 = const _;
        _16 = _25 as &[&str] (Pointer(Unsize));
        _23 = &_1;
        _24 = &_2;
        _22 = Foo::<i32>::equals(move _23, _24) -> [return: bb5, unwind continue];
    }

    bb5: {
        _21 = &_22;
        _20 = core::fmt::rt::Argument::<'_>::new_display::<bool>(_21) -> [return: bb6, unwind continue];
    }

    bb6: {
        _19 = [move _20];
        _18 = &_19;
        _17 = _18 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _15 = Arguments::<'_>::new_v1(move _16, move _17) -> [return: bb7, unwind continue];
    }

    bb7: {
        _14 = _print(move _15) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
