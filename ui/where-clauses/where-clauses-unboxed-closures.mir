// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn warm_up(_1: F) -> () {
    debug f => _1;                       // in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:8:19: 8:20
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:8:25: 8:25

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:9:1: 9:2
    }

    bb1: {
        return;                          // scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:9:2: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:11:11: 11:11
    let _1: ();                          // in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:13:5: 13:35
    let mut _2: [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:13:13: 13:30]; // in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:13:13: 13:33
    let _3: ();                          // in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:16:5: 16:21
    let mut _4: [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:16:13: 16:16]; // in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:16:13: 16:19

    bb0: {
        _1 = warm_up::<'_, [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:13:13: 13:30]>(move _2) -> bb1; // scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:13:5: 13:35
                                         // mir::Constant
                                         // + span: ui/where-clauses/where-clauses-unboxed-closures.rs:13:5: 13:12
                                         // + literal: Const { ty: fn([closure@ui/where-clauses/where-clauses-unboxed-closures.rs:13:13: 13:30]) {warm_up::<'_, [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:13:13: 13:30]>}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = warm_up::<'_, [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:16:13: 16:16]>(move _4) -> bb2; // scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:16:5: 16:21
                                         // mir::Constant
                                         // + span: ui/where-clauses/where-clauses-unboxed-closures.rs:16:5: 16:12
                                         // + literal: Const { ty: fn([closure@ui/where-clauses/where-clauses-unboxed-closures.rs:16:13: 16:16]) {warm_up::<'_, [closure@ui/where-clauses/where-clauses-unboxed-closures.rs:16:13: 16:16]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:17:2: 17:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/where-clauses/where-clauses-unboxed-closures.rs:13:13: 13:30], _2: &mut Bencher) -> () {
    debug b => _2;                       // in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:13:14: 13:15
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:13:31: 13:31

    bb0: {
        return;                          // scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:13:33: 13:33
    }
}

fn main::{closure#1}(_1: &[closure@ui/where-clauses/where-clauses-unboxed-closures.rs:16:13: 16:16], _2: &mut Bencher) -> () {
    debug b => _2;                       // in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:16:14: 16:15
    let mut _0: ();                      // return place in scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:16:17: 16:17

    bb0: {
        return;                          // scope 0 at ui/where-clauses/where-clauses-unboxed-closures.rs:16:19: 16:19
    }
}
