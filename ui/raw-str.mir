// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let _2: &&str;
    let _3: &&str;
    let mut _4: bool;
    let mut _5: bool;
    let _7: !;
    let mut _8: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _9: (&&str, &&str);
    let _10: &&str;
    let _11: &&str;
    let mut _12: bool;
    let mut _13: bool;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&&str, &&str);
    let _18: &&str;
    let _19: &&str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&&str, &&str);
    let _26: &&str;
    let _27: &&str;
    let mut _28: bool;
    let mut _29: bool;
    let _31: !;
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: (&&str, &&str);
    let _34: &&str;
    let _35: &&str;
    let mut _36: bool;
    let mut _37: bool;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _41: (&&str, &&str);
    let _42: &&str;
    let _43: &&str;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&&str, &&str);
    let _50: &&str;
    let _51: &&str;
    let mut _52: bool;
    let mut _53: bool;
    let _55: !;
    let mut _56: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _57: (&&str, &&str);
    let _58: &&str;
    let _59: &&str;
    let mut _60: bool;
    let mut _61: bool;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&&str, &&str);
    let _66: &&str;
    let _67: &&str;
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: &&str;
    let mut _74: &&str;
    let mut _75: &&str;
    let mut _76: &&str;
    let mut _77: &&str;
    let mut _78: &&str;
    let mut _79: &&str;
    let mut _80: &&str;
    let mut _81: &&str;
    let mut _82: &&str;
    let mut _83: &&str;
    let mut _84: &&str;
    let mut _85: &&str;
    let mut _86: &&str;
    let mut _87: &&str;
    let mut _88: &&str;
    let mut _89: &&str;
    let mut _90: &&str;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _6: core::panicking::AssertKind;
        scope 2 {
            debug kind => _6;
        }
    }
    scope 3 {
        debug left_val => _10;
        debug right_val => _11;
        let _14: core::panicking::AssertKind;
        scope 4 {
            debug kind => _14;
        }
    }
    scope 5 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 6 {
            debug kind => _22;
        }
    }
    scope 7 {
        debug left_val => _26;
        debug right_val => _27;
        let _30: core::panicking::AssertKind;
        scope 8 {
            debug kind => _30;
        }
    }
    scope 9 {
        debug left_val => _34;
        debug right_val => _35;
        let _38: core::panicking::AssertKind;
        scope 10 {
            debug kind => _38;
        }
    }
    scope 11 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 12 {
            debug kind => _46;
        }
    }
    scope 13 {
        debug left_val => _50;
        debug right_val => _51;
        let _54: core::panicking::AssertKind;
        scope 14 {
            debug kind => _54;
        }
    }
    scope 15 {
        debug left_val => _58;
        debug right_val => _59;
        let _62: core::panicking::AssertKind;
        scope 16 {
            debug kind => _62;
        }
    }
    scope 17 {
        debug left_val => _66;
        debug right_val => _67;
        let _70: core::panicking::AssertKind;
        scope 18 {
            debug kind => _70;
        }
    }

    bb0: {
        _90 = const _;
        _89 = const _;
        _1 = (_90, _89);
        _2 = (_1.0: &&str);
        _3 = (_1.1: &&str);
        _5 = <&str as PartialEq>::eq(_2, _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::AssertKind::Eq;
        _8 = Option::<Arguments<'_>>::None;
        _7 = core::panicking::assert_failed::<&str, &str>(move _6, _2, _3, move _8) -> unwind continue;
    }

    bb3: {
        _88 = const _;
        _87 = const _;
        _9 = (_88, _87);
        _10 = (_9.0: &&str);
        _11 = (_9.1: &&str);
        _13 = <&str as PartialEq>::eq(_10, _11) -> [return: bb4, unwind continue];
    }

    bb4: {
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<&str, &str>(move _14, _10, _11, move _16) -> unwind continue;
    }

    bb6: {
        _86 = const _;
        _85 = const _;
        _17 = (_86, _85);
        _18 = (_17.0: &&str);
        _19 = (_17.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> [return: bb7, unwind continue];
    }

    bb7: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb9: {
        _84 = const _;
        _83 = const _;
        _25 = (_84, _83);
        _26 = (_25.0: &&str);
        _27 = (_25.1: &&str);
        _29 = <&str as PartialEq>::eq(_26, _27) -> [return: bb10, unwind continue];
    }

    bb10: {
        _28 = Not(move _29);
        switchInt(move _28) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _30 = core::panicking::AssertKind::Eq;
        _32 = Option::<Arguments<'_>>::None;
        _31 = core::panicking::assert_failed::<&str, &str>(move _30, _26, _27, move _32) -> unwind continue;
    }

    bb12: {
        _82 = const _;
        _81 = const _;
        _33 = (_82, _81);
        _34 = (_33.0: &&str);
        _35 = (_33.1: &&str);
        _37 = <&str as PartialEq>::eq(_34, _35) -> [return: bb13, unwind continue];
    }

    bb13: {
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<&str, &str>(move _38, _34, _35, move _40) -> unwind continue;
    }

    bb15: {
        _80 = const _;
        _79 = const _;
        _41 = (_80, _79);
        _42 = (_41.0: &&str);
        _43 = (_41.1: &&str);
        _45 = <&str as PartialEq>::eq(_42, _43) -> [return: bb16, unwind continue];
    }

    bb16: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<&str, &str>(move _46, _42, _43, move _48) -> unwind continue;
    }

    bb18: {
        _78 = const _;
        _77 = const _;
        _49 = (_78, _77);
        _50 = (_49.0: &&str);
        _51 = (_49.1: &&str);
        _53 = <&str as PartialEq>::eq(_50, _51) -> [return: bb19, unwind continue];
    }

    bb19: {
        _52 = Not(move _53);
        switchInt(move _52) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _54 = core::panicking::AssertKind::Eq;
        _56 = Option::<Arguments<'_>>::None;
        _55 = core::panicking::assert_failed::<&str, &str>(move _54, _50, _51, move _56) -> unwind continue;
    }

    bb21: {
        _76 = const _;
        _75 = const _;
        _57 = (_76, _75);
        _58 = (_57.0: &&str);
        _59 = (_57.1: &&str);
        _61 = <&str as PartialEq>::eq(_58, _59) -> [return: bb22, unwind continue];
    }

    bb22: {
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<&str, &str>(move _62, _58, _59, move _64) -> unwind continue;
    }

    bb24: {
        _74 = const _;
        _73 = const _;
        _65 = (_74, _73);
        _66 = (_65.0: &&str);
        _67 = (_65.1: &&str);
        _69 = <&str as PartialEq>::eq(_66, _67) -> [return: bb25, unwind continue];
    }

    bb25: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb27, otherwise: bb26];
    }

    bb26: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<&str, &str>(move _70, _66, _67, move _72) -> unwind continue;
    }

    bb27: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "newline:'\n', tab:'\t', unicode:'●', null:'\0'";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "newline:'\n', tab:'\t', unicode:'●', null:'\0'";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "\"%\\(\\d\\+\\$\\)\\=[-+' #0*]*\\(\\d*\\|\\*\\|\\*\\d\\+\\$\\)\\(\\.\\(\\d*\\|\\*\\|\\*\\d\\+\\$\\)\\)\\=\\([hlLjzt]\\|ll\\|hh\\)\\=\\([aAbdiuoxXDOUfFeEgGcCsSpn?]\\|\\[\\^\\=.[^]]*\\]\\)\"";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "\"%\\(\\d\\+\\$\\)\\=[-+' #0*]*\\(\\d*\\|\\*\\|\\*\\d\\+\\$\\)\\(\\.\\(\\d*\\|\\*\\|\\*\\d\\+\\$\\)\\)\\=\\([hlLjzt]\\|ll\\|hh\\)\\=\\([aAbdiuoxXDOUfFeEgGcCsSpn?]\\|\\[\\^\\=.[^]]*\\]\\)\"";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "a\"#\"b";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "a\"#\"b";
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "#\"\\n\"";
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "#\"\\n\"";
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "\\\"";
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "\\\"";
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "\\";
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "\\";
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "###";
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "###";
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "abc";
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "abc";
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "abc";
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "abc";
        _0 = &_1;
        return;
    }
}
