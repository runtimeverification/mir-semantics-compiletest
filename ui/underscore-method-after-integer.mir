// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Tr::_method_on_numbers(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/underscore-method-after-integer.rs:4:27: 4:31
    let mut _0: ();                      // return place in scope 0 at ui/underscore-method-after-integer.rs:4:33: 4:33

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/underscore-method-after-integer.rs:4:34: 4:35
    }

    bb1: {
        return;                          // scope 0 at ui/underscore-method-after-integer.rs:4:35: 4:35
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/underscore-method-after-integer.rs:9:11: 9:11
    let _1: ();                          // in scope 0 at ui/underscore-method-after-integer.rs:10:5: 10:28

    bb0: {
        _1 = <i32 as Tr>::_method_on_numbers(const 42_i32) -> bb1; // scope 0 at ui/underscore-method-after-integer.rs:10:5: 10:28
                                         // mir::Constant
                                         // + span: ui/underscore-method-after-integer.rs:10:8: 10:26
                                         // + literal: Const { ty: fn(i32) {<i32 as Tr>::_method_on_numbers}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/underscore-method-after-integer.rs:11:2: 11:2
    }
}
