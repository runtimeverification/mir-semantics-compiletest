// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/no-warn-on-field-replace-issue-34101.rs:25:1: 25:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:26:13: 26:22
    let mut _0: ();                      // return place in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:26:24: 26:24

    bb0: {
        return;                          // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:26:26: 26:26
    }
}

fn inline() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:29:13: 29:13
    let _1: ();                          // in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:31:9: 31:11
    let mut _3: std::string::String;     // in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:32:21: 32:40
    let mut _4: std::string::String;     // in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:33:11: 33:30
    scope 1 {
        debug _s => _1;                  // in scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:31:9: 31:11
        let mut _2: Foo;                 // in scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:32:9: 32:14
        scope 2 {
            debug f => _2;               // in scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:32:9: 32:14
        }
    }

    bb0: {
        _3 = <String as From<&str>>::from(const "foo") -> bb1; // scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:32:21: 32:40
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:32:21: 32:33
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:32:34: 32:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _2 = Foo(move _3);               // scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:32:17: 32:41
        _4 = <String as From<&str>>::from(const "bar") -> [return: bb2, unwind: bb4]; // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:33:11: 33:30
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:33:11: 33:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:33:24: 33:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        drop((_2.0: std::string::String)) -> [return: bb7, unwind: bb6]; // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:33:5: 33:8
    }

    bb3: {
        return;                          // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:34:2: 34:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:34:1: 34:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:29:1: 34:2
    }

    bb6 (cleanup): {
        (_2.0: std::string::String) = move _4; // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:33:5: 33:8
        goto -> bb4;                     // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:33:5: 33:8
    }

    bb7: {
        (_2.0: std::string::String) = move _4; // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:33:5: 33:8
        drop(_2) -> bb3;                 // scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:34:1: 34:2
    }
}

fn outline() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:36:14: 36:14
    let _1: std::string::String;         // in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:37:9: 37:11
    let mut _3: std::string::String;     // in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:38:21: 38:23
    let mut _4: std::string::String;     // in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:39:11: 39:30
    scope 1 {
        debug _s => _1;                  // in scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:37:9: 37:11
        let mut _2: Foo;                 // in scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:38:9: 38:14
        scope 2 {
            debug f => _2;               // in scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:38:9: 38:14
        }
    }

    bb0: {
        _1 = <String as From<&str>>::from(const "foo") -> bb1; // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:37:14: 37:33
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:37:14: 37:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:37:27: 37:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _3 = move _1;                    // scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:38:21: 38:23
        _2 = Foo(move _3);               // scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:38:17: 38:24
        _4 = <String as From<&str>>::from(const "bar") -> [return: bb2, unwind: bb4]; // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:39:11: 39:30
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:39:11: 39:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:39:24: 39:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        drop((_2.0: std::string::String)) -> [return: bb7, unwind: bb6]; // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:39:5: 39:8
    }

    bb3: {
        return;                          // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:40:2: 40:2
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:40:1: 40:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:36:1: 40:2
    }

    bb6 (cleanup): {
        (_2.0: std::string::String) = move _4; // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:39:5: 39:8
        goto -> bb4;                     // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:39:5: 39:8
    }

    bb7: {
        (_2.0: std::string::String) = move _4; // scope 2 at ui/no-warn-on-field-replace-issue-34101.rs:39:5: 39:8
        drop(_2) -> bb3;                 // scope 1 at ui/no-warn-on-field-replace-issue-34101.rs:40:1: 40:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:43:11: 43:11
    let _1: ();                          // in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:44:5: 44:13
    let _2: ();                          // in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:45:5: 45:14

    bb0: {
        _1 = inline() -> bb1;            // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:44:5: 44:13
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:44:5: 44:11
                                         // + literal: Const { ty: fn() {inline}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = outline() -> bb2;           // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:45:5: 45:14
                                         // mir::Constant
                                         // + span: ui/no-warn-on-field-replace-issue-34101.rs:45:5: 45:12
                                         // + literal: Const { ty: fn() {outline}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:46:2: 46:2
    }
}

fn Foo(_1: String) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:23:1: 23:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:23:1: 23:11
        return;                          // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:23:1: 23:11
    }
}

// MIR FOR CTFE
fn Foo(_1: String) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:23:1: 23:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:23:1: 23:11
        return;                          // scope 0 at ui/no-warn-on-field-replace-issue-34101.rs:23:1: 23:11
    }
}
