// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f(_1: Box<isize>) -> () {
    debug y => _1;
    let mut _0: ();
    let mut _2: (&isize, &isize);
    let mut _3: &isize;
    let _4: &isize;
    let _5: &isize;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: isize;
    let mut _9: isize;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: &isize;
    let mut _14: *const isize;
    let mut _15: *const isize;
    let mut _16: *const ();
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: *const ();
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: bool;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }

    bb0: {
        _14 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _22 = _14 as *const () (PtrToPtr);
        _23 = _22 as usize (Transmute);
        _24 = AlignOf(isize);
        _25 = Sub(_24, const 1_usize);
        _26 = BitAnd(_23, _25);
        _27 = Eq(_26, const 0_usize);
        assert(_27, "misaligned pointer dereference: address must be a multiple of {} but is {}", _24, _23) -> [success: bb7, unwind unreachable];
    }

    bb1: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<isize, isize>(move _10, _4, _5, move _12) -> bb4;
    }

    bb2: {
        drop(_1) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_1) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        _3 = &(*_15);
        _13 = const _;
        _2 = (move _3, _13);
        _4 = (_2.0: &isize);
        _5 = (_2.1: &isize);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        (*_14) = const 5_isize;
        _15 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _16 = _15 as *const () (PtrToPtr);
        _17 = _16 as usize (Transmute);
        _18 = AlignOf(isize);
        _19 = Sub(_18, const 1_usize);
        _20 = BitAnd(_17, _19);
        _21 = Eq(_20, const 0_usize);
        assert(_21, "misaligned pointer dereference: address must be a multiple of {} but is {}", _18, _17) -> [success: bb6, unwind unreachable];
    }
}

promoted[0] in f: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 5_isize;
        _0 = &_1;
        return;
    }
}

fn g() -> () {
    let mut _0: ();
    let _1: [closure@ui/mut-function-arguments.rs:9:16: 9:35];
    let _3: ();
    let mut _4: &[closure@ui/mut-function-arguments.rs:9:16: 9:35];
    let mut _5: (std::boxed::Box<isize>,);
    let mut _6: std::boxed::Box<isize>;
    scope 1 {
        debug frob => const ZeroSized: [closure@ui/mut-function-arguments.rs:9:16: 9:35];
        let _2: std::boxed::Box<isize>;
        scope 2 {
            debug w => _2;
        }
    }

    bb0: {
        _2 = Box::<isize>::new(const 37_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &_1;
        _6 = move _2;
        _5 = (move _6,);
        _3 = <[closure@ui/mut-function-arguments.rs:9:16: 9:35] as Fn<(Box<isize>,)>>::call(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn g::{closure#0}(_1: &[closure@ui/mut-function-arguments.rs:9:16: 9:35], _2: Box<isize>) -> () {
    debug q => _2;
    let mut _0: ();
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: &isize;
    let _6: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &isize;
    let mut _15: *const isize;
    let mut _16: *const isize;
    let mut _17: *const ();
    let mut _18: usize;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: *const ();
    let mut _24: usize;
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _15 = (((_2.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _23 = _15 as *const () (PtrToPtr);
        _24 = _23 as usize (Transmute);
        _25 = AlignOf(isize);
        _26 = Sub(_25, const 1_usize);
        _27 = BitAnd(_24, _26);
        _28 = Eq(_27, const 0_usize);
        assert(_28, "misaligned pointer dereference: address must be a multiple of {} but is {}", _25, _24) -> [success: bb7, unwind unreachable];
    }

    bb1: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> bb4;
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_2) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }

    bb6: {
        _4 = &(*_16);
        _14 = const _;
        _3 = (move _4, _14);
        _5 = (_3.0: &isize);
        _6 = (_3.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb2, otherwise: bb1];
    }

    bb7: {
        (*_15) = const 2_isize;
        _16 = (((_2.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _17 = _16 as *const () (PtrToPtr);
        _18 = _17 as usize (Transmute);
        _19 = AlignOf(isize);
        _20 = Sub(_19, const 1_usize);
        _21 = BitAnd(_18, _20);
        _22 = Eq(_21, const 0_usize);
        assert(_22, "misaligned pointer dereference: address must be a multiple of {} but is {}", _19, _18) -> [success: bb6, unwind unreachable];
    }
}

promoted[0] in g::{closure#0}: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::boxed::Box<isize>;
    let _2: ();
    let mut _3: std::boxed::Box<isize>;
    let _4: ();
    scope 1 {
        debug z => _1;
    }

    bb0: {
        _1 = Box::<isize>::new(const 17_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _1;
        _2 = f(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = g() -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}
