// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/mutual-recursion-group.rs:16:15: 16:15

    bb0: {
        return;                          // scope 0 at ui/mutual-recursion-group.rs:16:18: 16:18
    }
}

fn tree::children(_1: Box<list>) -> tree {
    let mut _0: tree;                    // return place in scope 0 at ui/mutual-recursion-group.rs:10:13: 10:21

    bb0: {
        _0 = tree::children(move _1);    // scope 0 at ui/mutual-recursion-group.rs:10:13: 10:21
        return;                          // scope 0 at ui/mutual-recursion-group.rs:10:13: 10:21
    }
}

// MIR FOR CTFE
fn tree::children(_1: Box<list>) -> tree {
    let mut _0: tree;                    // return place in scope 0 at ui/mutual-recursion-group.rs:10:13: 10:21

    bb0: {
        _0 = tree::children(move _1);    // scope 0 at ui/mutual-recursion-group.rs:10:13: 10:21
        return;                          // scope 0 at ui/mutual-recursion-group.rs:10:13: 10:21
    }
}

fn tree::leaf(_1: colour) -> tree {
    let mut _0: tree;                    // return place in scope 0 at ui/mutual-recursion-group.rs:10:34: 10:38

    bb0: {
        _0 = tree::leaf(move _1);        // scope 0 at ui/mutual-recursion-group.rs:10:34: 10:38
        return;                          // scope 0 at ui/mutual-recursion-group.rs:10:34: 10:38
    }
}

// MIR FOR CTFE
fn tree::leaf(_1: colour) -> tree {
    let mut _0: tree;                    // return place in scope 0 at ui/mutual-recursion-group.rs:10:34: 10:38

    bb0: {
        _0 = tree::leaf(move _1);        // scope 0 at ui/mutual-recursion-group.rs:10:34: 10:38
        return;                          // scope 0 at ui/mutual-recursion-group.rs:10:34: 10:38
    }
}

fn list::cons(_1: Box<tree>, _2: Box<list>) -> list {
    let mut _0: list;                    // return place in scope 0 at ui/mutual-recursion-group.rs:12:13: 12:17

    bb0: {
        _0 = list::cons(move _1, move _2); // scope 0 at ui/mutual-recursion-group.rs:12:13: 12:17
        return;                          // scope 0 at ui/mutual-recursion-group.rs:12:13: 12:17
    }
}

// MIR FOR CTFE
fn list::cons(_1: Box<tree>, _2: Box<list>) -> list {
    let mut _0: list;                    // return place in scope 0 at ui/mutual-recursion-group.rs:12:13: 12:17

    bb0: {
        _0 = list::cons(move _1, move _2); // scope 0 at ui/mutual-recursion-group.rs:12:13: 12:17
        return;                          // scope 0 at ui/mutual-recursion-group.rs:12:13: 12:17
    }
}

fn small_list::kons(_1: isize, _2: Box<small_list>) -> small_list {
    let mut _0: small_list;              // return place in scope 0 at ui/mutual-recursion-group.rs:14:19: 14:23

    bb0: {
        _0 = small_list::kons(move _1, move _2); // scope 0 at ui/mutual-recursion-group.rs:14:19: 14:23
        return;                          // scope 0 at ui/mutual-recursion-group.rs:14:19: 14:23
    }
}

// MIR FOR CTFE
fn small_list::kons(_1: isize, _2: Box<small_list>) -> small_list {
    let mut _0: small_list;              // return place in scope 0 at ui/mutual-recursion-group.rs:14:19: 14:23

    bb0: {
        _0 = small_list::kons(move _1, move _2); // scope 0 at ui/mutual-recursion-group.rs:14:19: 14:23
        return;                          // scope 0 at ui/mutual-recursion-group.rs:14:19: 14:23
    }
}
