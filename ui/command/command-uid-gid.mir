// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/command/command-uid-gid.rs:9:11: 9:11

    bb0: {
        _0 = run() -> bb1;               // scope 0 at ui/command/command-uid-gid.rs:11:5: 11:10
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:11:5: 11:8
                                         // + literal: Const { ty: fn() {run}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/command/command-uid-gid.rs:12:2: 12:2
    }
}

fn run() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/command/command-uid-gid.rs:15:10: 15:10
    let mut _1: std::process::Child;     // in scope 0 at ui/command/command-uid-gid.rs:20:9: 20:14
    let mut _2: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 24:17
    let mut _3: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 24:17
    let mut _4: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 23:40
    let mut _5: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 23:40
    let mut _6: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 22:40
    let mut _7: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 22:40
    let mut _8: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 21:31
    let mut _9: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 21:31
    let mut _10: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 21:19
    let mut _11: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:20:17: 21:19
    let mut _12: std::process::Command;  // in scope 0 at ui/command/command-uid-gid.rs:20:17: 20:40
    let mut _13: u32;                    // in scope 0 at ui/command/command-uid-gid.rs:22:14: 22:39
    let mut _14: u32;                    // in scope 0 at ui/command/command-uid-gid.rs:23:14: 23:39
    let mut _15: bool;                   // in scope 0 at ui/command/command-uid-gid.rs:25:5: 25:41
    let mut _16: bool;                   // in scope 0 at ui/command/command-uid-gid.rs:25:13: 25:40
    let mut _17: &std::process::ExitStatus; // in scope 0 at ui/command/command-uid-gid.rs:25:13: 25:40
    let _18: std::process::ExitStatus;   // in scope 0 at ui/command/command-uid-gid.rs:25:13: 25:30
    let mut _19: std::result::Result<std::process::ExitStatus, std::io::Error>; // in scope 0 at ui/command/command-uid-gid.rs:25:13: 25:21
    let mut _20: &mut std::process::Child; // in scope 0 at ui/command/command-uid-gid.rs:25:13: 25:21
    let mut _21: !;                      // in scope 0 at ui/command/command-uid-gid.rs:25:5: 25:41
    let mut _22: u32;                    // in scope 0 at ui/command/command-uid-gid.rs:29:17: 29:31
    let mut _23: bool;                   // in scope 0 at ui/command/command-uid-gid.rs:30:9: 30:72
    let mut _24: bool;                   // in scope 0 at ui/command/command-uid-gid.rs:30:17: 30:71
    let mut _25: &std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/command/command-uid-gid.rs:30:17: 30:71
    let _26: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/command/command-uid-gid.rs:30:17: 30:62
    let mut _27: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:30:17: 30:62
    let mut _28: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:30:17: 30:54
    let mut _29: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:30:17: 30:54
    let mut _30: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:30:17: 30:47
    let mut _31: &mut std::process::Command; // in scope 0 at ui/command/command-uid-gid.rs:30:17: 30:47
    let mut _32: std::process::Command;  // in scope 0 at ui/command/command-uid-gid.rs:30:17: 30:40
    let mut _33: !;                      // in scope 0 at ui/command/command-uid-gid.rs:30:9: 30:72
    scope 1 {
        debug p => _1;                   // in scope 1 at ui/command/command-uid-gid.rs:20:9: 20:14
        scope 4 {
        }
    }
    scope 2 {
    }
    scope 3 {
    }

    bb0: {
        _12 = Command::new::<&str>(const "/bin/sh") -> bb1; // scope 0 at ui/command/command-uid-gid.rs:20:17: 20:40
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:20:17: 20:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:20:30: 20:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _11 = &mut _12;                  // scope 0 at ui/command/command-uid-gid.rs:20:17: 21:19
        _10 = Command::arg::<&str>(move _11, const "-c") -> [return: bb2, unwind: bb31]; // scope 0 at ui/command/command-uid-gid.rs:20:17: 21:19
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:21:10: 21:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:21:14: 21:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _9 = &mut (*_10);                // scope 0 at ui/command/command-uid-gid.rs:20:17: 21:31
        _8 = Command::arg::<&str>(move _9, const "true") -> [return: bb3, unwind: bb31]; // scope 0 at ui/command/command-uid-gid.rs:20:17: 21:31
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:21:20: 21:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:21:24: 21:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _7 = &mut (*_8);                 // scope 0 at ui/command/command-uid-gid.rs:20:17: 22:40
        _13 = getuid() -> [return: bb4, unwind: bb31]; // scope 2 at ui/command/command-uid-gid.rs:22:23: 22:37
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:22:23: 22:35
                                         // + literal: Const { ty: unsafe extern "C" fn() -> u32 {getuid}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = <Command as std::os::unix::process::CommandExt>::uid(move _7, move _13) -> [return: bb5, unwind: bb31]; // scope 0 at ui/command/command-uid-gid.rs:20:17: 22:40
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:22:10: 22:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, u32) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::uid}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = &mut (*_6);                 // scope 0 at ui/command/command-uid-gid.rs:20:17: 23:40
        _14 = getgid() -> [return: bb6, unwind: bb31]; // scope 3 at ui/command/command-uid-gid.rs:23:23: 23:37
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:23:23: 23:35
                                         // + literal: Const { ty: unsafe extern "C" fn() -> u32 {getgid}, val: Value(<ZST>) }
    }

    bb6: {
        _4 = <Command as std::os::unix::process::CommandExt>::gid(move _5, move _14) -> [return: bb7, unwind: bb31]; // scope 0 at ui/command/command-uid-gid.rs:20:17: 23:40
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:23:10: 23:13
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, u32) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::gid}, val: Value(<ZST>) }
    }

    bb7: {
        _3 = &mut (*_4);                 // scope 0 at ui/command/command-uid-gid.rs:20:17: 24:17
        _2 = Command::spawn(move _3) -> [return: bb8, unwind: bb31]; // scope 0 at ui/command/command-uid-gid.rs:20:17: 24:17
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:24:10: 24:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb8: {
        _1 = Result::<Child, std::io::Error>::unwrap(move _2) -> [return: bb9, unwind: bb31]; // scope 0 at ui/command/command-uid-gid.rs:20:17: 24:26
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:24:18: 24:24
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>) -> Child {Result::<Child, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb9: {
        drop(_12) -> [return: bb10, unwind: bb30]; // scope 0 at ui/command/command-uid-gid.rs:24:26: 24:27
    }

    bb10: {
        _20 = &mut _1;                   // scope 1 at ui/command/command-uid-gid.rs:25:13: 25:21
        _19 = Child::wait(move _20) -> [return: bb11, unwind: bb30]; // scope 1 at ui/command/command-uid-gid.rs:25:13: 25:21
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:25:15: 25:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut Child) -> Result<ExitStatus, std::io::Error> {Child::wait}, val: Value(<ZST>) }
    }

    bb11: {
        _18 = Result::<ExitStatus, std::io::Error>::unwrap(move _19) -> [return: bb12, unwind: bb30]; // scope 1 at ui/command/command-uid-gid.rs:25:13: 25:30
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:25:22: 25:28
                                         // + literal: Const { ty: fn(Result<ExitStatus, std::io::Error>) -> ExitStatus {Result::<ExitStatus, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb12: {
        _17 = &_18;                      // scope 1 at ui/command/command-uid-gid.rs:25:13: 25:40
        _16 = ExitStatus::success(move _17) -> [return: bb13, unwind: bb30]; // scope 1 at ui/command/command-uid-gid.rs:25:13: 25:40
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:25:31: 25:38
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb13: {
        _15 = Not(move _16);             // scope 1 at ui/command/command-uid-gid.rs:25:5: 25:41
        switchInt(move _15) -> [0: bb15, otherwise: bb14]; // scope 1 at ui/command/command-uid-gid.rs:25:5: 25:41
    }

    bb14: {
        _21 = core::panicking::panic(const "assertion failed: p.wait().unwrap().success()") -> bb30; // scope 1 at ui/command/command-uid-gid.rs:25:5: 25:41
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:25:5: 25:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        _22 = getuid() -> [return: bb16, unwind: bb30]; // scope 4 at ui/command/command-uid-gid.rs:29:17: 29:31
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:29:17: 29:29
                                         // + literal: Const { ty: unsafe extern "C" fn() -> u32 {getuid}, val: Value(<ZST>) }
    }

    bb16: {
        switchInt(move _22) -> [0: bb26, otherwise: bb17]; // scope 1 at ui/command/command-uid-gid.rs:29:8: 29:38
    }

    bb17: {
        _32 = Command::new::<&str>(const "/bin/ls") -> [return: bb18, unwind: bb30]; // scope 1 at ui/command/command-uid-gid.rs:30:17: 30:40
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:30:17: 30:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:30:30: 30:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _31 = &mut _32;                  // scope 1 at ui/command/command-uid-gid.rs:30:17: 30:47
        _30 = <Command as std::os::unix::process::CommandExt>::uid(move _31, const 0_u32) -> [return: bb19, unwind: bb29]; // scope 1 at ui/command/command-uid-gid.rs:30:17: 30:47
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:30:41: 30:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, u32) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::uid}, val: Value(<ZST>) }
    }

    bb19: {
        _29 = &mut (*_30);               // scope 1 at ui/command/command-uid-gid.rs:30:17: 30:54
        _28 = <Command as std::os::unix::process::CommandExt>::gid(move _29, const 0_u32) -> [return: bb20, unwind: bb29]; // scope 1 at ui/command/command-uid-gid.rs:30:17: 30:54
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:30:48: 30:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, u32) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::gid}, val: Value(<ZST>) }
    }

    bb20: {
        _27 = &mut (*_28);               // scope 1 at ui/command/command-uid-gid.rs:30:17: 30:62
        _26 = Command::spawn(move _27) -> [return: bb21, unwind: bb29]; // scope 1 at ui/command/command-uid-gid.rs:30:17: 30:62
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:30:55: 30:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb21: {
        _25 = &_26;                      // scope 1 at ui/command/command-uid-gid.rs:30:17: 30:71
        _24 = Result::<Child, std::io::Error>::is_err(move _25) -> [return: bb22, unwind: bb28]; // scope 1 at ui/command/command-uid-gid.rs:30:17: 30:71
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:30:63: 30:69
                                         // + literal: Const { ty: for<'a> fn(&'a Result<Child, std::io::Error>) -> bool {Result::<Child, std::io::Error>::is_err}, val: Value(<ZST>) }
    }

    bb22: {
        _23 = Not(move _24);             // scope 1 at ui/command/command-uid-gid.rs:30:9: 30:72
        drop(_26) -> [return: bb23, unwind: bb29]; // scope 1 at ui/command/command-uid-gid.rs:30:71: 30:72
    }

    bb23: {
        drop(_32) -> [return: bb24, unwind: bb30]; // scope 1 at ui/command/command-uid-gid.rs:30:71: 30:72
    }

    bb24: {
        switchInt(move _23) -> [0: bb26, otherwise: bb25]; // scope 1 at ui/command/command-uid-gid.rs:30:9: 30:72
    }

    bb25: {
        _33 = core::panicking::panic(const "assertion failed: Command::new(\\\"/bin/ls\\\").uid(0).gid(0).spawn().is_err()") -> bb30; // scope 1 at ui/command/command-uid-gid.rs:30:9: 30:72
                                         // mir::Constant
                                         // + span: ui/command/command-uid-gid.rs:30:9: 30:72
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb26: {
        drop(_1) -> bb27;                // scope 0 at ui/command/command-uid-gid.rs:32:1: 32:2
    }

    bb27: {
        return;                          // scope 0 at ui/command/command-uid-gid.rs:32:2: 32:2
    }

    bb28 (cleanup): {
        drop(_26) -> bb29;               // scope 1 at ui/command/command-uid-gid.rs:30:71: 30:72
    }

    bb29 (cleanup): {
        drop(_32) -> bb30;               // scope 1 at ui/command/command-uid-gid.rs:30:71: 30:72
    }

    bb30 (cleanup): {
        drop(_1) -> bb32;                // scope 0 at ui/command/command-uid-gid.rs:32:1: 32:2
    }

    bb31 (cleanup): {
        drop(_12) -> bb32;               // scope 0 at ui/command/command-uid-gid.rs:24:26: 24:27
    }

    bb32 (cleanup): {
        resume;                          // scope 0 at ui/command/command-uid-gid.rs:15:1: 32:2
    }
}
