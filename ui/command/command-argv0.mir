// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/command/command-argv0.rs:10:11: 10:11
    let _1: std::vec::Vec<std::string::String>; // in scope 0 at ui/command/command-argv0.rs:11:9: 11:13
    let mut _2: std::env::Args;          // in scope 0 at ui/command/command-argv0.rs:11:24: 11:35
    let mut _3: bool;                    // in scope 0 at ui/command/command-argv0.rs:13:8: 13:22
    let mut _4: usize;                   // in scope 0 at ui/command/command-argv0.rs:13:8: 13:18
    let mut _5: &std::vec::Vec<std::string::String>; // in scope 0 at ui/command/command-argv0.rs:13:8: 13:18
    let mut _6: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _8: &std::string::String;        // in scope 0 at ui/command/command-argv0.rs:14:20: 14:27
    let mut _9: &std::vec::Vec<std::string::String>; // in scope 0 at ui/command/command-argv0.rs:14:20: 14:24
    let mut _10: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _27: &std::string::String;       // in scope 0 at ui/command/command-argv0.rs:15:20: 15:27
    let mut _28: &std::vec::Vec<std::string::String>; // in scope 0 at ui/command/command-argv0.rs:15:20: 15:24
    let mut _29: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _33: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _34: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _35: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _37: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _38: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _39: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _40: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _41: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _42: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _44: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _45: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _46: &[&str];                // in scope 0 at ui/command/command-argv0.rs:17:18: 17:26
    let mut _47: &[&str; 1];             // in scope 0 at ui/command/command-argv0.rs:17:18: 17:26
    let _48: &[&str; 1];                 // in scope 0 at ui/command/command-argv0.rs:17:18: 17:26
    let mut _49: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _50: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _51: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _53: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-argv0.rs:22:9: 22:86
    let mut _54: &mut std::process::Command; // in scope 0 at ui/command/command-argv0.rs:22:9: 22:86
    let mut _55: &mut std::process::Command; // in scope 0 at ui/command/command-argv0.rs:22:9: 22:77
    let mut _56: &mut std::process::Command; // in scope 0 at ui/command/command-argv0.rs:22:9: 22:77
    let mut _57: &mut std::process::Command; // in scope 0 at ui/command/command-argv0.rs:22:9: 22:49
    let mut _58: &mut std::process::Command; // in scope 0 at ui/command/command-argv0.rs:22:9: 22:49
    let mut _59: std::process::Command;  // in scope 0 at ui/command/command-argv0.rs:22:9: 22:31
    let mut _60: &std::string::String;   // in scope 0 at ui/command/command-argv0.rs:22:22: 22:30
    let _61: &std::string::String;       // in scope 0 at ui/command/command-argv0.rs:22:23: 22:30
    let mut _62: &std::vec::Vec<std::string::String>; // in scope 0 at ui/command/command-argv0.rs:22:23: 22:27
    let mut _63: bool;                   // in scope 0 at ui/command/command-argv0.rs:23:5: 27:6
    let mut _64: bool;                   // in scope 0 at ui/command/command-argv0.rs:24:9: 24:33
    let mut _65: &std::vec::Vec<u8>;     // in scope 0 at ui/command/command-argv0.rs:24:9: 24:33
    let mut _66: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _67: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _68: &[&str];                // in scope 0 at ui/command/command-argv0.rs:25:9: 25:31
    let mut _69: &[&str; 1];             // in scope 0 at ui/command/command-argv0.rs:25:9: 25:31
    let _70: &[&str; 1];                 // in scope 0 at ui/command/command-argv0.rs:25:9: 25:31
    let mut _71: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _72: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _73: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _74: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _75: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/command/command-argv0.rs:26:9: 26:48
    let mut _76: &std::borrow::Cow<'_, str>; // in scope 0 at ui/command/command-argv0.rs:26:9: 26:48
    let _77: &std::borrow::Cow<'_, str>; // in scope 0 at ui/command/command-argv0.rs:26:9: 26:48
    let _78: std::borrow::Cow<'_, str>;  // in scope 0 at ui/command/command-argv0.rs:26:9: 26:48
    let mut _79: &[u8];                  // in scope 0 at ui/command/command-argv0.rs:26:33: 26:47
    let _80: &[u8];                      // in scope 0 at ui/command/command-argv0.rs:26:33: 26:47
    let mut _81: &std::vec::Vec<u8>;     // in scope 0 at ui/command/command-argv0.rs:26:33: 26:47
    let _82: &std::vec::Vec<u8>;         // in scope 0 at ui/command/command-argv0.rs:26:33: 26:47
    let mut _83: bool;                   // in scope 0 at ui/command/command-argv0.rs:28:5: 28:37
    let mut _84: bool;                   // in scope 0 at ui/command/command-argv0.rs:28:13: 28:36
    let mut _85: &std::process::ExitStatus; // in scope 0 at ui/command/command-argv0.rs:28:13: 28:36
    let mut _86: !;                      // in scope 0 at ui/command/command-argv0.rs:28:5: 28:37
    let mut _87: (&std::vec::Vec<u8>, &&[u8; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _88: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _89: &&[u8; 7];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _92: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _93: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _94: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _95: &&[u8; 7];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _97: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _98: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _99: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _100: &std::vec::Vec<u8>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _101: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _102: &&[u8; 7];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _103: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug args => _1;                // in scope 1 at ui/command/command-argv0.rs:11:9: 11:13
        let _11: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _12: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _30: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _31: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _52: std::process::Output;   // in scope 1 at ui/command/command-argv0.rs:21:9: 21:15
        let mut _106: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _107: &[&str; 1];        // in scope 1 at ui/command/command-argv0.rs:17:18: 17:26
        let mut _108: &&str;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _109: &&str;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _11;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _12;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _17: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _17;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _30;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _31;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _36: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _36;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug output => _52;         // in scope 6 at ui/command/command-argv0.rs:21:9: 21:15
            let _90: &std::vec::Vec<u8>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _91: &&[u8; 7];          // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _104: &&[u8; 7];     // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _105: &[&str; 1];    // in scope 6 at ui/command/command-argv0.rs:25:9: 25:31
            scope 7 {
                debug left_val => _90;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _91;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _96: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _96;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = args() -> bb1;              // scope 0 at ui/command/command-argv0.rs:11:24: 11:35
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:11:24: 11:33
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> bb2; // scope 0 at ui/command/command-argv0.rs:11:24: 11:45
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:11:36: 11:43
                                         // + literal: Const { ty: fn(Args) -> Vec<String> {<Args as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_1;                        // scope 1 at ui/command/command-argv0.rs:13:8: 13:18
        _4 = Vec::<String>::len(move _5) -> [return: bb3, unwind: bb41]; // scope 1 at ui/command/command-argv0.rs:13:8: 13:18
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:13:13: 13:16
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> usize {Vec::<String>::len}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = Gt(move _4, const 1_usize); // scope 1 at ui/command/command-argv0.rs:13:8: 13:22
        switchInt(move _3) -> [0: bb15, otherwise: bb4]; // scope 1 at ui/command/command-argv0.rs:13:8: 13:22
    }

    bb4: {
        _9 = &_1;                        // scope 1 at ui/command/command-argv0.rs:14:20: 14:24
        _8 = <Vec<String> as Index<usize>>::index(move _9, const 1_usize) -> [return: bb5, unwind: bb41]; // scope 1 at ui/command/command-argv0.rs:14:20: 14:27
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:14:20: 14:27
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = _8;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _109 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[5])) }
        _10 = _109;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _10);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_6.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_6.1: &&str);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = <String as PartialEq<&str>>::eq(move _15, move _16) -> [return: bb6, unwind: bb41]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = Not(move _14);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb8, otherwise: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<String, &str>(move _19, move _20, move _22, move _24) -> bb41; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb8: {
        _28 = &_1;                       // scope 1 at ui/command/command-argv0.rs:15:20: 15:24
        _27 = <Vec<String> as Index<usize>>::index(move _28, const 0_usize) -> [return: bb9, unwind: bb41]; // scope 1 at ui/command/command-argv0.rs:15:20: 15:27
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:15:20: 15:27
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb9: {
        _26 = _27;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _108 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[4])) }
        _29 = _108;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _29);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _30 = (_25.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _31 = (_25.1: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _34 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _35 = _31;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _33 = <String as PartialEq<&str>>::eq(move _34, move _35) -> [return: bb10, unwind: bb41]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _32 = Not(move _33);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _32) -> [0: bb12, otherwise: bb11]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _36 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _31;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _37 = core::panicking::assert_failed::<String, &str>(move _38, move _39, move _41, move _43) -> bb41; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb12: {
        _107 = const _;                  // scope 1 at ui/command/command-argv0.rs:17:18: 17:26
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:17:18: 17:26
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[3])) }
        _48 = _107;                      // scope 1 at ui/command/command-argv0.rs:17:18: 17:26
        _47 = _48;                       // scope 1 at ui/command/command-argv0.rs:17:18: 17:26
        _46 = move _47 as &[&str] (Pointer(Unsize)); // scope 1 at ui/command/command-argv0.rs:17:18: 17:26
        _106 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[2])) }
        _51 = _106;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _50 = _51;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _49 = move _50 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _45 = Arguments::<'_>::new_v1(move _46, move _49) -> [return: bb13, unwind: bb41]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb13: {
        _44 = _print(move _45) -> [return: bb14, unwind: bb41]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_1) -> bb37;                // scope 0 at ui/command/command-argv0.rs:30:1: 30:2
    }

    bb15: {
        _62 = &_1;                       // scope 1 at ui/command/command-argv0.rs:22:23: 22:27
        _61 = <Vec<String> as Index<usize>>::index(move _62, const 0_usize) -> [return: bb16, unwind: bb41]; // scope 1 at ui/command/command-argv0.rs:22:23: 22:30
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:22:23: 22:30
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb16: {
        _60 = _61;                       // scope 1 at ui/command/command-argv0.rs:22:22: 22:30
        _59 = Command::new::<&String>(move _60) -> [return: bb17, unwind: bb41]; // scope 1 at ui/command/command-argv0.rs:22:9: 22:31
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:22:9: 22:21
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb17: {
        _58 = &mut _59;                  // scope 1 at ui/command/command-argv0.rs:22:9: 22:49
        _57 = Command::arg::<&str>(move _58, const "doing-test") -> [return: bb18, unwind: bb40]; // scope 1 at ui/command/command-argv0.rs:22:9: 22:49
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:22:32: 22:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:22:36: 22:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _56 = &mut (*_57);               // scope 1 at ui/command/command-argv0.rs:22:9: 22:77
        _55 = <Command as std::os::unix::process::CommandExt>::arg0::<&str>(move _56, const "i have a silly name") -> [return: bb19, unwind: bb40]; // scope 1 at ui/command/command-argv0.rs:22:9: 22:77
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:22:50: 22:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::arg0::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:22:55: 22:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        _54 = &mut (*_55);               // scope 1 at ui/command/command-argv0.rs:22:9: 22:86
        _53 = Command::output(move _54) -> [return: bb20, unwind: bb40]; // scope 1 at ui/command/command-argv0.rs:22:9: 22:86
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:22:78: 22:84
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb20: {
        _52 = Result::<Output, std::io::Error>::unwrap(move _53) -> [return: bb21, unwind: bb40]; // scope 1 at ui/command/command-argv0.rs:22:9: 22:95
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:22:87: 22:93
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb21: {
        drop(_59) -> [return: bb22, unwind: bb39]; // scope 1 at ui/command/command-argv0.rs:22:95: 22:96
    }

    bb22: {
        _65 = &(_52.2: std::vec::Vec<u8>); // scope 6 at ui/command/command-argv0.rs:24:9: 24:33
        _64 = Vec::<u8>::is_empty(move _65) -> [return: bb23, unwind: bb39]; // scope 6 at ui/command/command-argv0.rs:24:9: 24:33
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:24:23: 24:31
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb23: {
        _63 = Not(move _64);             // scope 6 at ui/command/command-argv0.rs:23:5: 27:6
        switchInt(move _63) -> [0: bb29, otherwise: bb24]; // scope 6 at ui/command/command-argv0.rs:23:5: 27:6
    }

    bb24: {
        _105 = const _;                  // scope 6 at ui/command/command-argv0.rs:25:9: 25:31
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:25:9: 25:31
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _70 = _105;                      // scope 6 at ui/command/command-argv0.rs:25:9: 25:31
        _69 = _70;                       // scope 6 at ui/command/command-argv0.rs:25:9: 25:31
        _68 = move _69 as &[&str] (Pointer(Unsize)); // scope 6 at ui/command/command-argv0.rs:25:9: 25:31
        _82 = &(_52.2: std::vec::Vec<u8>); // scope 6 at ui/command/command-argv0.rs:26:33: 26:47
        _81 = _82;                       // scope 6 at ui/command/command-argv0.rs:26:33: 26:47
        _80 = <Vec<u8> as Deref>::deref(move _81) -> [return: bb25, unwind: bb39]; // scope 6 at ui/command/command-argv0.rs:26:33: 26:47
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:26:33: 26:47
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> &'a <Vec<u8> as Deref>::Target {<Vec<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb25: {
        _79 = _80;                       // scope 6 at ui/command/command-argv0.rs:26:33: 26:47
        _78 = String::from_utf8_lossy(move _79) -> [return: bb26, unwind: bb39]; // scope 6 at ui/command/command-argv0.rs:26:9: 26:48
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:26:9: 26:32
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> Cow<'a, str> {String::from_utf8_lossy}, val: Value(<ZST>) }
    }

    bb26: {
        _77 = &_78;                      // scope 6 at ui/command/command-argv0.rs:26:9: 26:48
        _76 = _77;                       // scope 6 at ui/command/command-argv0.rs:26:9: 26:48
        _75 = core::fmt::ArgumentV1::<'_>::new_display::<Cow<'_, str>>(move _76) -> [return: bb27, unwind: bb38]; // scope 6 at ui/command/command-argv0.rs:26:9: 26:48
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:26:9: 26:48
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b Cow<'_, str>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<Cow<'_, str>>}, val: Value(<ZST>) }
    }

    bb27: {
        _74 = [move _75];                // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _73 = &_74;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _72 = _73;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _71 = move _72 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _67 = Arguments::<'_>::new_v1(move _68, move _71) -> [return: bb28, unwind: bb38]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb28: {
        _66 = panic_fmt(move _67) -> bb38; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb29: {
        _85 = &(_52.0: std::process::ExitStatus); // scope 6 at ui/command/command-argv0.rs:28:13: 28:36
        _84 = ExitStatus::success(move _85) -> [return: bb30, unwind: bb39]; // scope 6 at ui/command/command-argv0.rs:28:13: 28:36
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:28:27: 28:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb30: {
        _83 = Not(move _84);             // scope 6 at ui/command/command-argv0.rs:28:5: 28:37
        switchInt(move _83) -> [0: bb32, otherwise: bb31]; // scope 6 at ui/command/command-argv0.rs:28:5: 28:37
    }

    bb31: {
        _86 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb39; // scope 6 at ui/command/command-argv0.rs:28:5: 28:37
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:28:5: 28:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb32: {
        _88 = &(_52.1: std::vec::Vec<u8>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _104 = const _;                  // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 7], val: Unevaluated(main, [], Some(promoted[0])) }
        _89 = _104;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _87 = (move _88, move _89);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _90 = (_87.0: &std::vec::Vec<u8>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _91 = (_87.1: &&[u8; 7]);        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _94 = _90;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _95 = _91;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _93 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(move _94, move _95) -> [return: bb33, unwind: bb39]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 7]) -> bool {<Vec<u8> as PartialEq<&[u8; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb33: {
        _92 = Not(move _93);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _92) -> [0: bb35, otherwise: bb34]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb34: {
        _96 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _98 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _100 = _90;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _99 = _100;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _102 = _91;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _101 = _102;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _103 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _97 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _98, move _99, move _101, move _103) -> bb39; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>}, val: Value(<ZST>) }
    }

    bb35: {
        drop(_52) -> [return: bb36, unwind: bb41]; // scope 1 at ui/command/command-argv0.rs:30:1: 30:2
    }

    bb36: {
        drop(_1) -> bb37;                // scope 0 at ui/command/command-argv0.rs:30:1: 30:2
    }

    bb37: {
        return;                          // scope 0 at ui/command/command-argv0.rs:30:2: 30:2
    }

    bb38 (cleanup): {
        drop(_78) -> bb39;               // scope 6 at ui/command/command-argv0.rs:27:5: 27:6
    }

    bb39 (cleanup): {
        drop(_52) -> bb41;               // scope 1 at ui/command/command-argv0.rs:30:1: 30:2
    }

    bb40 (cleanup): {
        drop(_59) -> bb41;               // scope 1 at ui/command/command-argv0.rs:22:95: 22:96
    }

    bb41 (cleanup): {
        drop(_1) -> bb42;                // scope 0 at ui/command/command-argv0.rs:30:1: 30:2
    }

    bb42 (cleanup): {
        resume;                          // scope 0 at ui/command/command-argv0.rs:10:1: 30:2
    }
}

promoted[0] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 7];                // in scope 0 at ui/command/command-argv0.rs:29:31: 29:42

    bb0: {
        _1 = const b"passed\n";          // scope 0 at ui/command/command-argv0.rs:29:31: 29:42
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:29:31: 29:42
                                         // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc1)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc1 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-argv0.rs:25:9: 25:31
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-argv0.rs:25:9: 25:31

    bb0: {
        _1 = [const "Non-empty stderr: "]; // scope 0 at ui/command/command-argv0.rs:25:9: 25:31
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:25:9: 25:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-argv0.rs:25:9: 25:31
        return;                          // scope 0 at ui/command/command-argv0.rs:25:9: 25:31
    }
}

promoted[2] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-argv0.rs:17:18: 17:26
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-argv0.rs:17:18: 17:26

    bb0: {
        _1 = [const "passed\n"];         // scope 0 at ui/command/command-argv0.rs:17:18: 17:26
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:17:18: 17:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-argv0.rs:17:18: 17:26
        return;                          // scope 0 at ui/command/command-argv0.rs:17:18: 17:26
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/command/command-argv0.rs:15:29: 15:50

    bb0: {
        _1 = const "i have a silly name"; // scope 0 at ui/command/command-argv0.rs:15:29: 15:50
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:15:29: 15:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/command/command-argv0.rs:14:29: 14:41

    bb0: {
        _1 = const "doing-test";         // scope 0 at ui/command/command-argv0.rs:14:29: 14:41
                                         // mir::Constant
                                         // + span: ui/command/command-argv0.rs:14:29: 14:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
