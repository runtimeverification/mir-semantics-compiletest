// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/command/command-pre-exec.rs:21:11: 21:11
    let mut _1: std::option::Option<std::string::String>; // in scope 0 at ui/command/command-pre-exec.rs:22:24: 22:42
    let mut _2: &mut std::env::Args;     // in scope 0 at ui/command/command-pre-exec.rs:22:24: 22:42
    let mut _3: std::env::Args;          // in scope 0 at ui/command/command-pre-exec.rs:22:24: 22:35
    let mut _4: isize;                   // in scope 0 at ui/command/command-pre-exec.rs:22:12: 22:21
    let mut _6: &str;                    // in scope 0 at ui/command/command-pre-exec.rs:23:15: 23:23
    let _7: &str;                        // in scope 0 at ui/command/command-pre-exec.rs:23:16: 23:23
    let mut _8: &std::string::String;    // in scope 0 at ui/command/command-pre-exec.rs:23:16: 23:19
    let mut _9: std::ops::RangeFull;     // in scope 0 at ui/command/command-pre-exec.rs:23:20: 23:22
    let mut _10: bool;                   // in scope 0 at ui/command/command-pre-exec.rs:24:13: 24:20
    let mut _11: bool;                   // in scope 0 at ui/command/command-pre-exec.rs:25:13: 25:20
    let mut _12: bool;                   // in scope 0 at ui/command/command-pre-exec.rs:26:13: 26:20
    let mut _13: bool;                   // in scope 0 at ui/command/command-pre-exec.rs:27:13: 27:20
    let _14: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: &[&str];                // in scope 0 at ui/command/command-pre-exec.rs:24:33: 24:41
    let mut _17: &[&str; 1];             // in scope 0 at ui/command/command-pre-exec.rs:24:33: 24:41
    let _18: &[&str; 1];                 // in scope 0 at ui/command/command-pre-exec.rs:24:33: 24:41
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _20: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: std::string::String;        // in scope 0 at ui/command/command-pre-exec.rs:25:35: 25:59
    let mut _25: std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at ui/command/command-pre-exec.rs:25:35: 25:50
    let mut _26: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _41: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _42: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _43: &str;                       // in scope 0 at ui/command/command-pre-exec.rs:26:35: 26:80
    let mut _44: std::option::Option<&str>; // in scope 0 at ui/command/command-pre-exec.rs:26:35: 26:71
    let mut _45: &std::path::Path;       // in scope 0 at ui/command/command-pre-exec.rs:26:35: 26:71
    let _46: &std::path::Path;           // in scope 0 at ui/command/command-pre-exec.rs:26:35: 26:71
    let mut _47: &std::path::PathBuf;    // in scope 0 at ui/command/command-pre-exec.rs:26:35: 26:71
    let _48: std::path::PathBuf;         // in scope 0 at ui/command/command-pre-exec.rs:26:35: 26:62
    let mut _49: std::result::Result<std::path::PathBuf, std::io::Error>; // in scope 0 at ui/command/command-pre-exec.rs:26:35: 26:53
    let mut _50: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _53: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _54: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _55: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _56: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _58: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _59: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _60: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _61: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _62: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _63: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _65: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _66: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _67: &[&str];                // in scope 0 at ui/command/command-pre-exec.rs:28:25: 28:47
    let mut _68: &[&str; 1];             // in scope 0 at ui/command/command-pre-exec.rs:28:25: 28:47
    let _69: &[&str; 1];                 // in scope 0 at ui/command/command-pre-exec.rs:28:25: 28:47
    let mut _70: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _71: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _72: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _73: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _74: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/command/command-pre-exec.rs:28:49: 28:52
    let mut _75: &std::string::String;   // in scope 0 at ui/command/command-pre-exec.rs:28:49: 28:52
    let _76: &std::string::String;       // in scope 0 at ui/command/command-pre-exec.rs:28:49: 28:52
    let _77: std::path::PathBuf;         // in scope 0 at ui/command/command-pre-exec.rs:33:9: 33:11
    let mut _78: std::result::Result<std::path::PathBuf, std::io::Error>; // in scope 0 at ui/command/command-pre-exec.rs:33:14: 33:32
    let mut _80: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-pre-exec.rs:36:9: 42:22
    let mut _81: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:36:9: 42:22
    let mut _82: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:36:9: 41:15
    let mut _83: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:36:9: 41:15
    let mut _84: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:36:9: 37:26
    let mut _85: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:36:9: 37:26
    let mut _86: std::process::Command;  // in scope 0 at ui/command/command-pre-exec.rs:36:9: 36:26
    let mut _87: &std::path::PathBuf;    // in scope 0 at ui/command/command-pre-exec.rs:36:22: 36:25
    let mut _88: [closure@ui/command/command-pre-exec.rs:38:23: 38:25]; // in scope 0 at ui/command/command-pre-exec.rs:38:23: 41:14
    let mut _89: bool;                   // in scope 0 at ui/command/command-pre-exec.rs:45:5: 45:37
    let mut _90: bool;                   // in scope 0 at ui/command/command-pre-exec.rs:45:13: 45:36
    let mut _91: &std::process::ExitStatus; // in scope 0 at ui/command/command-pre-exec.rs:45:13: 45:36
    let mut _92: !;                      // in scope 0 at ui/command/command-pre-exec.rs:45:5: 45:37
    let mut _93: bool;                   // in scope 0 at ui/command/command-pre-exec.rs:46:5: 46:38
    let mut _94: bool;                   // in scope 0 at ui/command/command-pre-exec.rs:46:13: 46:37
    let mut _95: &std::vec::Vec<u8>;     // in scope 0 at ui/command/command-pre-exec.rs:46:13: 46:37
    let mut _96: !;                      // in scope 0 at ui/command/command-pre-exec.rs:46:5: 46:38
    let mut _97: (&std::vec::Vec<u8>, &&[u8; 13]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _98: &std::vec::Vec<u8>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _99: &&[u8; 13];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _102: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _103: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _104: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _105: &&[u8; 13];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _107: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _108: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _109: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _110: &std::vec::Vec<u8>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _111: &&[u8; 13];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _112: &&[u8; 13];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _113: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _115: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-pre-exec.rs:50:9: 56:22
    let mut _116: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:50:9: 56:22
    let mut _117: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:50:9: 55:15
    let mut _118: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:50:9: 55:15
    let mut _119: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:50:9: 51:26
    let mut _120: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:50:9: 51:26
    let mut _121: std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:50:9: 50:26
    let mut _122: &std::path::PathBuf;   // in scope 0 at ui/command/command-pre-exec.rs:50:22: 50:25
    let mut _123: [closure@ui/command/command-pre-exec.rs:52:23: 52:25]; // in scope 0 at ui/command/command-pre-exec.rs:52:23: 55:14
    let mut _124: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:59:5: 59:37
    let mut _125: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:59:13: 59:36
    let mut _126: &std::process::ExitStatus; // in scope 0 at ui/command/command-pre-exec.rs:59:13: 59:36
    let mut _127: !;                     // in scope 0 at ui/command/command-pre-exec.rs:59:5: 59:37
    let mut _128: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:60:5: 60:38
    let mut _129: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:60:13: 60:37
    let mut _130: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-pre-exec.rs:60:13: 60:37
    let mut _131: !;                     // in scope 0 at ui/command/command-pre-exec.rs:60:5: 60:38
    let mut _132: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:61:5: 61:38
    let mut _133: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:61:13: 61:37
    let mut _134: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-pre-exec.rs:61:13: 61:37
    let mut _135: !;                     // in scope 0 at ui/command/command-pre-exec.rs:61:5: 61:38
    let mut _137: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-pre-exec.rs:64:9: 67:22
    let mut _138: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:64:9: 67:22
    let mut _139: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:64:9: 66:61
    let mut _140: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:64:9: 66:61
    let mut _141: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:64:9: 65:24
    let mut _142: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:64:9: 65:24
    let mut _143: std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:64:9: 64:26
    let mut _144: &std::path::PathBuf;   // in scope 0 at ui/command/command-pre-exec.rs:64:22: 64:25
    let mut _145: [closure@ui/command/command-pre-exec.rs:66:23: 66:25]; // in scope 0 at ui/command/command-pre-exec.rs:66:23: 66:60
    let mut _146: (&std::option::Option<i32>, &std::option::Option<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _147: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _148: std::option::Option<i32>;  // in scope 0 at ui/command/command-pre-exec.rs:70:16: 70:37
    let mut _149: &std::io::Error;       // in scope 0 at ui/command/command-pre-exec.rs:70:16: 70:37
    let mut _150: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _153: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _154: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _155: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _156: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _158: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _159: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _160: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _161: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _162: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _163: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _164: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _166: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:73:5: 73:22
    let mut _167: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:73:13: 73:21
    let mut _168: i32;                   // in scope 0 at ui/command/command-pre-exec.rs:73:13: 73:16
    let mut _169: !;                     // in scope 0 at ui/command/command-pre-exec.rs:73:5: 73:22
    let mut _171: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-pre-exec.rs:75:9: 83:22
    let mut _172: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:75:9: 83:22
    let mut _173: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:75:9: 82:15
    let mut _174: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:75:9: 82:15
    let mut _175: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:75:9: 76:26
    let mut _176: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:75:9: 76:26
    let mut _177: std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:75:9: 75:26
    let mut _178: &std::path::PathBuf;   // in scope 0 at ui/command/command-pre-exec.rs:75:22: 75:25
    let mut _179: [closure@ui/command/command-pre-exec.rs:77:23: 77:30]; // in scope 0 at ui/command/command-pre-exec.rs:77:23: 82:14
    let mut _180: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:86:5: 86:37
    let mut _181: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:86:13: 86:36
    let mut _182: &std::process::ExitStatus; // in scope 0 at ui/command/command-pre-exec.rs:86:13: 86:36
    let mut _183: !;                     // in scope 0 at ui/command/command-pre-exec.rs:86:5: 86:37
    let mut _184: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:87:5: 87:38
    let mut _185: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:87:13: 87:37
    let mut _186: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-pre-exec.rs:87:13: 87:37
    let mut _187: !;                     // in scope 0 at ui/command/command-pre-exec.rs:87:5: 87:38
    let mut _188: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:88:5: 88:38
    let mut _189: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:88:13: 88:37
    let mut _190: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-pre-exec.rs:88:13: 88:37
    let mut _191: !;                     // in scope 0 at ui/command/command-pre-exec.rs:88:5: 88:38
    let mut _193: std::sync::atomic::AtomicUsize; // in scope 0 at ui/command/command-pre-exec.rs:90:24: 90:43
    let mut _195: &std::sync::Arc<std::sync::atomic::AtomicUsize>; // in scope 0 at ui/command/command-pre-exec.rs:91:16: 91:27
    let mut _197: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-pre-exec.rs:93:9: 99:22
    let mut _198: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:93:9: 99:22
    let mut _199: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:93:9: 98:15
    let mut _200: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:93:9: 98:15
    let mut _201: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:93:9: 94:26
    let mut _202: &mut std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:93:9: 94:26
    let mut _203: std::process::Command; // in scope 0 at ui/command/command-pre-exec.rs:93:9: 93:26
    let mut _204: &std::path::PathBuf;   // in scope 0 at ui/command/command-pre-exec.rs:93:22: 93:25
    let mut _205: [closure@ui/command/command-pre-exec.rs:95:23: 95:30]; // in scope 0 at ui/command/command-pre-exec.rs:95:23: 98:14
    let mut _206: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:102:5: 102:37
    let mut _207: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:102:13: 102:36
    let mut _208: &std::process::ExitStatus; // in scope 0 at ui/command/command-pre-exec.rs:102:13: 102:36
    let mut _209: !;                     // in scope 0 at ui/command/command-pre-exec.rs:102:5: 102:37
    let mut _210: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:103:5: 103:38
    let mut _211: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:103:13: 103:37
    let mut _212: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-pre-exec.rs:103:13: 103:37
    let mut _213: !;                     // in scope 0 at ui/command/command-pre-exec.rs:103:5: 103:38
    let mut _214: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:104:5: 104:38
    let mut _215: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:104:13: 104:37
    let mut _216: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-pre-exec.rs:104:13: 104:37
    let mut _217: !;                     // in scope 0 at ui/command/command-pre-exec.rs:104:5: 104:38
    let mut _218: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _219: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _220: usize;                     // in scope 0 at ui/command/command-pre-exec.rs:105:16: 105:42
    let mut _221: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/command/command-pre-exec.rs:105:16: 105:42
    let _222: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/command/command-pre-exec.rs:105:16: 105:42
    let mut _223: &std::sync::Arc<std::sync::atomic::AtomicUsize>; // in scope 0 at ui/command/command-pre-exec.rs:105:16: 105:42
    let mut _224: std::sync::atomic::Ordering; // in scope 0 at ui/command/command-pre-exec.rs:105:25: 105:41
    let mut _225: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _228: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _229: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _230: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _231: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _233: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _234: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _235: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _236: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _237: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _238: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _239: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _248: bool;                  // in scope 0 at ui/command/command-pre-exec.rs:106:1: 106:2
    scope 1 {
        debug arg => _5;                 // in scope 1 at ui/command/command-pre-exec.rs:22:17: 22:20
        let _5: std::string::String;     // in scope 1 at ui/command/command-pre-exec.rs:22:17: 22:20
        let _27: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _28: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _51: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _52: &&str;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _240: &[&str; 1];        // in scope 1 at ui/command/command-pre-exec.rs:28:25: 28:47
        let mut _241: &&str;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _242: &&str;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _243: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _244: &[&str; 1];        // in scope 1 at ui/command/command-pre-exec.rs:24:33: 24:41
        scope 2 {
            debug left_val => _27;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _28;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _33: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _33;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 4 {
            debug left_val => _51;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _52;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _57: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _57;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 6 {
        debug me => _77;                 // in scope 6 at ui/command/command-pre-exec.rs:33:9: 33:11
        let _79: std::process::Output;   // in scope 6 at ui/command/command-pre-exec.rs:35:9: 35:15
        scope 7 {
            debug output => _79;         // in scope 7 at ui/command/command-pre-exec.rs:35:9: 35:15
            let _100: &std::vec::Vec<u8>; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _101: &&[u8; 13];        // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _114: std::process::Output; // in scope 7 at ui/command/command-pre-exec.rs:49:9: 49:15
            let mut _247: &&[u8; 13];    // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 9 {
                debug left_val => _100;  // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _101; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _106: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 10 {
                    debug kind => _106;  // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 11 {
                debug output => _114;    // in scope 11 at ui/command/command-pre-exec.rs:49:9: 49:15
                let _136: std::io::Error; // in scope 11 at ui/command/command-pre-exec.rs:63:9: 63:15
                scope 13 {
                    debug output => _136; // in scope 13 at ui/command/command-pre-exec.rs:63:9: 63:15
                    let _151: &std::option::Option<i32>; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _152: &std::option::Option<i32>; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _165: i32;       // in scope 13 at ui/command/command-pre-exec.rs:72:9: 72:12
                    let mut _246: &std::option::Option<i32>; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 15 {
                        debug left_val => _151; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _152; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _157: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 16 {
                            debug kind => _157; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 17 {
                        debug pid => _165; // in scope 17 at ui/command/command-pre-exec.rs:72:9: 72:12
                        let _170: std::process::Output; // in scope 17 at ui/command/command-pre-exec.rs:74:9: 74:15
                        scope 19 {
                            debug output => _170; // in scope 19 at ui/command/command-pre-exec.rs:74:9: 74:15
                            let _192: std::sync::Arc<std::sync::atomic::AtomicUsize>; // in scope 19 at ui/command/command-pre-exec.rs:90:9: 90:12
                            scope 21 {
                                debug mem => _192; // in scope 21 at ui/command/command-pre-exec.rs:90:9: 90:12
                                let _194: std::sync::Arc<std::sync::atomic::AtomicUsize>; // in scope 21 at ui/command/command-pre-exec.rs:91:9: 91:13
                                scope 22 {
                                    debug mem2 => _194; // in scope 22 at ui/command/command-pre-exec.rs:91:9: 91:13
                                    let _196: std::process::Output; // in scope 22 at ui/command/command-pre-exec.rs:92:9: 92:15
                                    scope 23 {
                                        debug output => _196; // in scope 23 at ui/command/command-pre-exec.rs:92:9: 92:15
                                        let _226: &usize; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        let _227: &usize; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let mut _245: &usize; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                        scope 25 {
                                            debug left_val => _226; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            debug right_val => _227; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let _232: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            scope 26 {
                                                debug kind => _232; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            }
                                        }
                                    }
                                    scope 24 {
                                    }
                                }
                            }
                        }
                        scope 20 {
                        }
                    }
                    scope 18 {
                    }
                }
                scope 14 {
                }
            }
            scope 12 {
            }
        }
        scope 8 {
        }
    }

    bb0: {
        _248 = const false;              // scope 0 at ui/command/command-pre-exec.rs:22:5: 31:6
        _3 = args() -> bb1;              // scope 1 at ui/command/command-pre-exec.rs:22:24: 22:35
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:22:24: 22:33
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut _3;                    // scope 1 at ui/command/command-pre-exec.rs:22:24: 22:42
        _1 = <Args as Iterator>::nth(move _2, const 1_usize) -> [return: bb2, unwind: bb141]; // scope 1 at ui/command/command-pre-exec.rs:22:24: 22:42
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:22:36: 22:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Args, usize) -> Option<<Args as Iterator>::Item> {<Args as Iterator>::nth}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = discriminant(_1);           // scope 1 at ui/command/command-pre-exec.rs:22:12: 22:21
        switchInt(move _4) -> [1: bb3, otherwise: bb33]; // scope 1 at ui/command/command-pre-exec.rs:22:12: 22:21
    }

    bb3: {
        _5 = move ((_1 as Some).0: std::string::String); // scope 1 at ui/command/command-pre-exec.rs:22:17: 22:20
        _8 = &_5;                        // scope 1 at ui/command/command-pre-exec.rs:23:16: 23:19
        _7 = <String as Index<RangeFull>>::index(move _8, move _9) -> [return: bb4, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:23:16: 23:23
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:23:16: 23:23
                                         // + literal: Const { ty: for<'a> fn(&'a String, RangeFull) -> &'a <String as Index<RangeFull>>::Output {<String as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = _7;                         // scope 1 at ui/command/command-pre-exec.rs:23:15: 23:23
        _10 = <str as PartialEq>::eq(_6, const "test1") -> [return: bb5, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:24:13: 24:20
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:24:13: 24:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:24:13: 24:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _10) -> [0: bb6, otherwise: bb13]; // scope 1 at ui/command/command-pre-exec.rs:24:13: 24:20
    }

    bb6: {
        _11 = <str as PartialEq>::eq(_6, const "test2") -> [return: bb7, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:25:13: 25:20
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:25:13: 25:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:25:13: 25:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _11) -> [0: bb8, otherwise: bb15]; // scope 1 at ui/command/command-pre-exec.rs:25:13: 25:20
    }

    bb8: {
        _12 = <str as PartialEq>::eq(_6, const "test3") -> [return: bb9, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:26:13: 26:20
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:26:13: 26:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:26:13: 26:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _12) -> [0: bb10, otherwise: bb21]; // scope 1 at ui/command/command-pre-exec.rs:26:13: 26:20
    }

    bb10: {
        _13 = <str as PartialEq>::eq(_6, const "empty") -> [return: bb11, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:27:13: 27:20
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:27:13: 27:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:27:13: 27:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _13) -> [0: bb12, otherwise: bb32]; // scope 1 at ui/command/command-pre-exec.rs:27:13: 27:20
    }

    bb12: {
        _240 = const _;                  // scope 1 at ui/command/command-pre-exec.rs:28:25: 28:47
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:28:25: 28:47
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _69 = _240;                      // scope 1 at ui/command/command-pre-exec.rs:28:25: 28:47
        _68 = _69;                       // scope 1 at ui/command/command-pre-exec.rs:28:25: 28:47
        _67 = move _68 as &[&str] (Pointer(Unsize)); // scope 1 at ui/command/command-pre-exec.rs:28:25: 28:47
        _76 = &_5;                       // scope 1 at ui/command/command-pre-exec.rs:28:49: 28:52
        _75 = _76;                       // scope 1 at ui/command/command-pre-exec.rs:28:49: 28:52
        _74 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _75) -> [return: bb30, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:28:49: 28:52
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:28:49: 28:52
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb13: {
        _244 = const _;                  // scope 1 at ui/command/command-pre-exec.rs:24:33: 24:41
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:24:33: 24:41
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[4])) }
        _18 = _244;                      // scope 1 at ui/command/command-pre-exec.rs:24:33: 24:41
        _17 = _18;                       // scope 1 at ui/command/command-pre-exec.rs:24:33: 24:41
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 1 at ui/command/command-pre-exec.rs:24:33: 24:41
        _243 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[3])) }
        _21 = _243;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = _21;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = move _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> [return: bb14, unwind: bb140]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb14: {
        _14 = _print(move _15) -> [return: bb145, unwind: bb140]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb15: {
        _25 = var::<&str>(const "FOO") -> [return: bb16, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:25:35: 25:50
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:25:35: 25:43
                                         // + literal: Const { ty: fn(&str) -> Result<String, VarError> {var::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:25:44: 25:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb16: {
        _24 = Result::<String, VarError>::unwrap(move _25) -> [return: bb17, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:25:35: 25:59
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:25:51: 25:57
                                         // + literal: Const { ty: fn(Result<String, VarError>) -> String {Result::<String, VarError>::unwrap}, val: Value(<ZST>) }
    }

    bb17: {
        _23 = &_24;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _242 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[2])) }
        _26 = _242;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _26);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_22.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_22.1: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = _27;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = _28;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = <String as PartialEq<&str>>::eq(move _31, move _32) -> [return: bb18, unwind: bb139]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _29 = Not(move _30);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb20, otherwise: bb19]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _33 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<String, &str>(move _35, move _36, move _38, move _40) -> bb139; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb20: {
        drop(_24) -> [return: bb32, unwind: bb140]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb21: {
        _49 = current_dir() -> [return: bb22, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:26:35: 26:53
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:26:35: 26:51
                                         // + literal: Const { ty: fn() -> Result<PathBuf, std::io::Error> {current_dir}, val: Value(<ZST>) }
    }

    bb22: {
        _48 = Result::<PathBuf, std::io::Error>::unwrap(move _49) -> [return: bb23, unwind: bb140]; // scope 1 at ui/command/command-pre-exec.rs:26:35: 26:62
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:26:54: 26:60
                                         // + literal: Const { ty: fn(Result<PathBuf, std::io::Error>) -> PathBuf {Result::<PathBuf, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb23: {
        _47 = &_48;                      // scope 1 at ui/command/command-pre-exec.rs:26:35: 26:71
        _46 = <PathBuf as Deref>::deref(move _47) -> [return: bb24, unwind: bb138]; // scope 1 at ui/command/command-pre-exec.rs:26:35: 26:71
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:26:35: 26:71
                                         // + literal: Const { ty: for<'a> fn(&'a PathBuf) -> &'a <PathBuf as Deref>::Target {<PathBuf as Deref>::deref}, val: Value(<ZST>) }
    }

    bb24: {
        _45 = _46;                       // scope 1 at ui/command/command-pre-exec.rs:26:35: 26:71
        _44 = Path::to_str(move _45) -> [return: bb25, unwind: bb138]; // scope 1 at ui/command/command-pre-exec.rs:26:35: 26:71
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:26:63: 26:69
                                         // + literal: Const { ty: for<'a> fn(&'a Path) -> Option<&'a str> {Path::to_str}, val: Value(<ZST>) }
    }

    bb25: {
        _43 = Option::<&str>::unwrap(move _44) -> [return: bb26, unwind: bb138]; // scope 1 at ui/command/command-pre-exec.rs:26:35: 26:80
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:26:72: 26:78
                                         // + literal: Const { ty: fn(Option<&str>) -> &str {Option::<&str>::unwrap}, val: Value(<ZST>) }
    }

    bb26: {
        _42 = &_43;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _241 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _50 = _241;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _41 = (move _42, move _50);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _51 = (_41.0: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _52 = (_41.1: &&str);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _55 = _51;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _56 = _52;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _54 = <&str as PartialEq>::eq(move _55, move _56) -> [return: bb27, unwind: bb138]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb27: {
        _53 = Not(move _54);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _53) -> [0: bb29, otherwise: bb28]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _57 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _59 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = _51;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _61;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _63 = _52;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _62 = _63;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _58 = core::panicking::assert_failed::<&str, &str>(move _59, move _60, move _62, move _64) -> bb138; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb29: {
        drop(_48) -> [return: bb32, unwind: bb140]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30: {
        _73 = [move _74];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _72 = &_73;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _71 = _72;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _70 = move _71 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _66 = Arguments::<'_>::new_v1(move _67, move _70) -> [return: bb31, unwind: bb140]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb31: {
        _65 = panic_fmt(move _66) -> bb140; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb32: {
        drop(_5) -> [return: bb124, unwind: bb141]; // scope 0 at ui/command/command-pre-exec.rs:31:5: 31:6
    }

    bb33: {
        drop(_1) -> [return: bb34, unwind: bb141]; // scope 0 at ui/command/command-pre-exec.rs:31:5: 31:6
    }

    bb34: {
        drop(_3) -> bb35;                // scope 0 at ui/command/command-pre-exec.rs:31:5: 31:6
    }

    bb35: {
        _78 = current_exe() -> bb36;     // scope 0 at ui/command/command-pre-exec.rs:33:14: 33:32
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:33:14: 33:30
                                         // + literal: Const { ty: fn() -> Result<PathBuf, std::io::Error> {current_exe}, val: Value(<ZST>) }
    }

    bb36: {
        _77 = Result::<PathBuf, std::io::Error>::unwrap(move _78) -> bb37; // scope 0 at ui/command/command-pre-exec.rs:33:14: 33:41
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:33:33: 33:39
                                         // + literal: Const { ty: fn(Result<PathBuf, std::io::Error>) -> PathBuf {Result::<PathBuf, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb37: {
        _87 = &_77;                      // scope 8 at ui/command/command-pre-exec.rs:36:22: 36:25
        _86 = Command::new::<&PathBuf>(move _87) -> [return: bb38, unwind: bb137]; // scope 8 at ui/command/command-pre-exec.rs:36:9: 36:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:36:9: 36:21
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&PathBuf) -> Command {Command::new::<&PathBuf>}, val: Value(<ZST>) }
    }

    bb38: {
        _85 = &mut _86;                  // scope 8 at ui/command/command-pre-exec.rs:36:9: 37:26
        _84 = Command::arg::<&str>(move _85, const "test1") -> [return: bb39, unwind: bb136]; // scope 8 at ui/command/command-pre-exec.rs:36:9: 37:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:37:14: 37:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:37:18: 37:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb39: {
        _83 = &mut (*_84);               // scope 8 at ui/command/command-pre-exec.rs:36:9: 41:15
        _82 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:38:23: 38:25]>(move _83, move _88) -> [return: bb40, unwind: bb136]; // scope 8 at ui/command/command-pre-exec.rs:36:9: 41:15
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:38:14: 38:22
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut Command, [closure@ui/command/command-pre-exec.rs:38:23: 38:25]) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:38:23: 38:25]>}, val: Value(<ZST>) }
    }

    bb40: {
        _81 = &mut (*_82);               // scope 8 at ui/command/command-pre-exec.rs:36:9: 42:22
        _80 = Command::output(move _81) -> [return: bb41, unwind: bb136]; // scope 8 at ui/command/command-pre-exec.rs:36:9: 42:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:42:14: 42:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb41: {
        _79 = Result::<Output, std::io::Error>::unwrap(move _80) -> [return: bb42, unwind: bb136]; // scope 8 at ui/command/command-pre-exec.rs:36:9: 43:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:43:14: 43:20
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb42: {
        drop(_86) -> [return: bb43, unwind: bb135]; // scope 6 at ui/command/command-pre-exec.rs:44:6: 44:7
    }

    bb43: {
        _91 = &(_79.0: std::process::ExitStatus); // scope 7 at ui/command/command-pre-exec.rs:45:13: 45:36
        _90 = ExitStatus::success(move _91) -> [return: bb44, unwind: bb135]; // scope 7 at ui/command/command-pre-exec.rs:45:13: 45:36
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:45:27: 45:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb44: {
        _89 = Not(move _90);             // scope 7 at ui/command/command-pre-exec.rs:45:5: 45:37
        switchInt(move _89) -> [0: bb46, otherwise: bb45]; // scope 7 at ui/command/command-pre-exec.rs:45:5: 45:37
    }

    bb45: {
        _92 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb135; // scope 7 at ui/command/command-pre-exec.rs:45:5: 45:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:45:5: 45:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb46: {
        _95 = &(_79.2: std::vec::Vec<u8>); // scope 7 at ui/command/command-pre-exec.rs:46:13: 46:37
        _94 = Vec::<u8>::is_empty(move _95) -> [return: bb47, unwind: bb135]; // scope 7 at ui/command/command-pre-exec.rs:46:13: 46:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:46:27: 46:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb47: {
        _93 = Not(move _94);             // scope 7 at ui/command/command-pre-exec.rs:46:5: 46:38
        switchInt(move _93) -> [0: bb49, otherwise: bb48]; // scope 7 at ui/command/command-pre-exec.rs:46:5: 46:38
    }

    bb48: {
        _96 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb135; // scope 7 at ui/command/command-pre-exec.rs:46:5: 46:38
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:46:5: 46:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb49: {
        _98 = &(_79.1: std::vec::Vec<u8>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _247 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 13], val: Unevaluated(main, [], Some(promoted[7])) }
        _99 = _247;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _97 = (move _98, move _99);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _100 = (_97.0: &std::vec::Vec<u8>); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _101 = (_97.1: &&[u8; 13]);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _104 = _100;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _105 = _101;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _103 = <Vec<u8> as PartialEq<&[u8; 13]>>::eq(move _104, move _105) -> [return: bb50, unwind: bb135]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 13]) -> bool {<Vec<u8> as PartialEq<&[u8; 13]>>::eq}, val: Value(<ZST>) }
    }

    bb50: {
        _102 = Not(move _103);           // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _102) -> [0: bb52, otherwise: bb51]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb51: {
        _106 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _108 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _110 = _100;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _109 = _110;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _112 = _101;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _111 = _112;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _113 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _107 = core::panicking::assert_failed::<Vec<u8>, &[u8; 13]>(move _108, move _109, move _111, move _113) -> bb135; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 13], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 13]>}, val: Value(<ZST>) }
    }

    bb52: {
        _122 = &_77;                     // scope 12 at ui/command/command-pre-exec.rs:50:22: 50:25
        _121 = Command::new::<&PathBuf>(move _122) -> [return: bb53, unwind: bb135]; // scope 12 at ui/command/command-pre-exec.rs:50:9: 50:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:50:9: 50:21
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&PathBuf) -> Command {Command::new::<&PathBuf>}, val: Value(<ZST>) }
    }

    bb53: {
        _120 = &mut _121;                // scope 12 at ui/command/command-pre-exec.rs:50:9: 51:26
        _119 = Command::arg::<&str>(move _120, const "test3") -> [return: bb54, unwind: bb134]; // scope 12 at ui/command/command-pre-exec.rs:50:9: 51:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:51:14: 51:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:51:18: 51:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb54: {
        _118 = &mut (*_119);             // scope 12 at ui/command/command-pre-exec.rs:50:9: 55:15
        _117 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:52:23: 52:25]>(move _118, move _123) -> [return: bb55, unwind: bb134]; // scope 12 at ui/command/command-pre-exec.rs:50:9: 55:15
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:52:14: 52:22
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut Command, [closure@ui/command/command-pre-exec.rs:52:23: 52:25]) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:52:23: 52:25]>}, val: Value(<ZST>) }
    }

    bb55: {
        _116 = &mut (*_117);             // scope 12 at ui/command/command-pre-exec.rs:50:9: 56:22
        _115 = Command::output(move _116) -> [return: bb56, unwind: bb134]; // scope 12 at ui/command/command-pre-exec.rs:50:9: 56:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:56:14: 56:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb56: {
        _114 = Result::<Output, std::io::Error>::unwrap(move _115) -> [return: bb57, unwind: bb134]; // scope 12 at ui/command/command-pre-exec.rs:50:9: 57:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:57:14: 57:20
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb57: {
        drop(_121) -> [return: bb58, unwind: bb133]; // scope 7 at ui/command/command-pre-exec.rs:58:6: 58:7
    }

    bb58: {
        _126 = &(_114.0: std::process::ExitStatus); // scope 11 at ui/command/command-pre-exec.rs:59:13: 59:36
        _125 = ExitStatus::success(move _126) -> [return: bb59, unwind: bb133]; // scope 11 at ui/command/command-pre-exec.rs:59:13: 59:36
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:59:27: 59:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb59: {
        _124 = Not(move _125);           // scope 11 at ui/command/command-pre-exec.rs:59:5: 59:37
        switchInt(move _124) -> [0: bb61, otherwise: bb60]; // scope 11 at ui/command/command-pre-exec.rs:59:5: 59:37
    }

    bb60: {
        _127 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb133; // scope 11 at ui/command/command-pre-exec.rs:59:5: 59:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:59:5: 59:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb61: {
        _130 = &(_114.2: std::vec::Vec<u8>); // scope 11 at ui/command/command-pre-exec.rs:60:13: 60:37
        _129 = Vec::<u8>::is_empty(move _130) -> [return: bb62, unwind: bb133]; // scope 11 at ui/command/command-pre-exec.rs:60:13: 60:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:60:27: 60:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb62: {
        _128 = Not(move _129);           // scope 11 at ui/command/command-pre-exec.rs:60:5: 60:38
        switchInt(move _128) -> [0: bb64, otherwise: bb63]; // scope 11 at ui/command/command-pre-exec.rs:60:5: 60:38
    }

    bb63: {
        _131 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb133; // scope 11 at ui/command/command-pre-exec.rs:60:5: 60:38
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:60:5: 60:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb64: {
        _134 = &(_114.1: std::vec::Vec<u8>); // scope 11 at ui/command/command-pre-exec.rs:61:13: 61:37
        _133 = Vec::<u8>::is_empty(move _134) -> [return: bb65, unwind: bb133]; // scope 11 at ui/command/command-pre-exec.rs:61:13: 61:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:61:27: 61:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb65: {
        _132 = Not(move _133);           // scope 11 at ui/command/command-pre-exec.rs:61:5: 61:38
        switchInt(move _132) -> [0: bb67, otherwise: bb66]; // scope 11 at ui/command/command-pre-exec.rs:61:5: 61:38
    }

    bb66: {
        _135 = core::panicking::panic(const "assertion failed: output.stdout.is_empty()") -> bb133; // scope 11 at ui/command/command-pre-exec.rs:61:5: 61:38
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:61:5: 61:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb67: {
        _144 = &_77;                     // scope 14 at ui/command/command-pre-exec.rs:64:22: 64:25
        _143 = Command::new::<&PathBuf>(move _144) -> [return: bb68, unwind: bb133]; // scope 14 at ui/command/command-pre-exec.rs:64:9: 64:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:64:9: 64:21
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&PathBuf) -> Command {Command::new::<&PathBuf>}, val: Value(<ZST>) }
    }

    bb68: {
        _142 = &mut _143;                // scope 14 at ui/command/command-pre-exec.rs:64:9: 65:24
        _141 = Command::arg::<&str>(move _142, const "bad") -> [return: bb69, unwind: bb132]; // scope 14 at ui/command/command-pre-exec.rs:64:9: 65:24
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:65:14: 65:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:65:18: 65:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb69: {
        _140 = &mut (*_141);             // scope 14 at ui/command/command-pre-exec.rs:64:9: 66:61
        _139 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:66:23: 66:25]>(move _140, move _145) -> [return: bb70, unwind: bb132]; // scope 14 at ui/command/command-pre-exec.rs:64:9: 66:61
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:66:14: 66:22
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut Command, [closure@ui/command/command-pre-exec.rs:66:23: 66:25]) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:66:23: 66:25]>}, val: Value(<ZST>) }
    }

    bb70: {
        _138 = &mut (*_139);             // scope 14 at ui/command/command-pre-exec.rs:64:9: 67:22
        _137 = Command::output(move _138) -> [return: bb71, unwind: bb132]; // scope 14 at ui/command/command-pre-exec.rs:64:9: 67:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:67:14: 67:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb71: {
        _136 = Result::<Output, std::io::Error>::unwrap_err(move _137) -> [return: bb72, unwind: bb132]; // scope 14 at ui/command/command-pre-exec.rs:64:9: 68:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:68:14: 68:24
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> std::io::Error {Result::<Output, std::io::Error>::unwrap_err}, val: Value(<ZST>) }
    }

    bb72: {
        drop(_143) -> [return: bb73, unwind: bb131]; // scope 11 at ui/command/command-pre-exec.rs:69:6: 69:7
    }

    bb73: {
        _149 = &_136;                    // scope 13 at ui/command/command-pre-exec.rs:70:16: 70:37
        _148 = std::io::Error::raw_os_error(move _149) -> [return: bb74, unwind: bb131]; // scope 13 at ui/command/command-pre-exec.rs:70:16: 70:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:70:23: 70:35
                                         // + literal: Const { ty: for<'a> fn(&'a std::io::Error) -> Option<i32> {std::io::Error::raw_os_error}, val: Value(<ZST>) }
    }

    bb74: {
        _147 = &_148;                    // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _246 = const _;                  // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[6])) }
        _150 = _246;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _146 = (move _147, move _150);   // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _151 = (_146.0: &std::option::Option<i32>); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _152 = (_146.1: &std::option::Option<i32>); // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _155 = _151;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _156 = _152;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _154 = <Option<i32> as PartialEq>::eq(move _155, move _156) -> [return: bb75, unwind: bb131]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb75: {
        _153 = Not(move _154);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _153) -> [0: bb77, otherwise: bb76]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb76: {
        _157 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _159 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _161 = _151;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _160 = _161;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _163 = _152;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _162 = _163;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _164 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _158 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _159, move _160, move _162, move _164) -> bb131; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<i32>, &'b Option<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<i32>, Option<i32>>}, val: Value(<ZST>) }
    }

    bb77: {
        _165 = getpid() -> [return: bb78, unwind: bb131]; // scope 18 at ui/command/command-pre-exec.rs:72:24: 72:38
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:72:24: 72:36
                                         // + literal: Const { ty: unsafe extern "C" fn() -> i32 {getpid}, val: Value(<ZST>) }
    }

    bb78: {
        _168 = _165;                     // scope 17 at ui/command/command-pre-exec.rs:73:13: 73:16
        _167 = Ge(move _168, const 0_i32); // scope 17 at ui/command/command-pre-exec.rs:73:13: 73:21
        _166 = Not(move _167);           // scope 17 at ui/command/command-pre-exec.rs:73:5: 73:22
        switchInt(move _166) -> [0: bb80, otherwise: bb79]; // scope 17 at ui/command/command-pre-exec.rs:73:5: 73:22
    }

    bb79: {
        _169 = core::panicking::panic(const "assertion failed: pid >= 0") -> bb131; // scope 17 at ui/command/command-pre-exec.rs:73:5: 73:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:73:5: 73:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb80: {
        _178 = &_77;                     // scope 20 at ui/command/command-pre-exec.rs:75:22: 75:25
        _177 = Command::new::<&PathBuf>(move _178) -> [return: bb81, unwind: bb131]; // scope 20 at ui/command/command-pre-exec.rs:75:9: 75:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:75:9: 75:21
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&PathBuf) -> Command {Command::new::<&PathBuf>}, val: Value(<ZST>) }
    }

    bb81: {
        _176 = &mut _177;                // scope 20 at ui/command/command-pre-exec.rs:75:9: 76:26
        _175 = Command::arg::<&str>(move _176, const "empty") -> [return: bb82, unwind: bb130]; // scope 20 at ui/command/command-pre-exec.rs:75:9: 76:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:76:14: 76:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:76:18: 76:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb82: {
        _174 = &mut (*_175);             // scope 20 at ui/command/command-pre-exec.rs:75:9: 82:15
        _179 = [closure@ui/command/command-pre-exec.rs:77:23: 77:30] { pid: _165 }; // scope 20 at ui/command/command-pre-exec.rs:77:23: 82:14
                                         // closure
                                         // + def_id: DefId(0:16 ~ command_pre_exec[05df]::main::{closure#3})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::io::Error>,
                                         //     (i32,),
                                         // ]
        _173 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:77:23: 77:30]>(move _174, move _179) -> [return: bb83, unwind: bb130]; // scope 20 at ui/command/command-pre-exec.rs:75:9: 82:15
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:77:14: 77:22
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut Command, [closure@ui/command/command-pre-exec.rs:77:23: 77:30]) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:77:23: 77:30]>}, val: Value(<ZST>) }
    }

    bb83: {
        _172 = &mut (*_173);             // scope 20 at ui/command/command-pre-exec.rs:75:9: 83:22
        _171 = Command::output(move _172) -> [return: bb84, unwind: bb130]; // scope 20 at ui/command/command-pre-exec.rs:75:9: 83:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:83:14: 83:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb84: {
        _170 = Result::<Output, std::io::Error>::unwrap(move _171) -> [return: bb85, unwind: bb130]; // scope 20 at ui/command/command-pre-exec.rs:75:9: 84:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:84:14: 84:20
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb85: {
        drop(_177) -> [return: bb86, unwind: bb129]; // scope 17 at ui/command/command-pre-exec.rs:85:6: 85:7
    }

    bb86: {
        _182 = &(_170.0: std::process::ExitStatus); // scope 19 at ui/command/command-pre-exec.rs:86:13: 86:36
        _181 = ExitStatus::success(move _182) -> [return: bb87, unwind: bb129]; // scope 19 at ui/command/command-pre-exec.rs:86:13: 86:36
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:86:27: 86:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb87: {
        _180 = Not(move _181);           // scope 19 at ui/command/command-pre-exec.rs:86:5: 86:37
        switchInt(move _180) -> [0: bb89, otherwise: bb88]; // scope 19 at ui/command/command-pre-exec.rs:86:5: 86:37
    }

    bb88: {
        _183 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb129; // scope 19 at ui/command/command-pre-exec.rs:86:5: 86:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:86:5: 86:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb89: {
        _186 = &(_170.2: std::vec::Vec<u8>); // scope 19 at ui/command/command-pre-exec.rs:87:13: 87:37
        _185 = Vec::<u8>::is_empty(move _186) -> [return: bb90, unwind: bb129]; // scope 19 at ui/command/command-pre-exec.rs:87:13: 87:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:87:27: 87:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb90: {
        _184 = Not(move _185);           // scope 19 at ui/command/command-pre-exec.rs:87:5: 87:38
        switchInt(move _184) -> [0: bb92, otherwise: bb91]; // scope 19 at ui/command/command-pre-exec.rs:87:5: 87:38
    }

    bb91: {
        _187 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb129; // scope 19 at ui/command/command-pre-exec.rs:87:5: 87:38
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:87:5: 87:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb92: {
        _190 = &(_170.1: std::vec::Vec<u8>); // scope 19 at ui/command/command-pre-exec.rs:88:13: 88:37
        _189 = Vec::<u8>::is_empty(move _190) -> [return: bb93, unwind: bb129]; // scope 19 at ui/command/command-pre-exec.rs:88:13: 88:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:88:27: 88:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb93: {
        _188 = Not(move _189);           // scope 19 at ui/command/command-pre-exec.rs:88:5: 88:38
        switchInt(move _188) -> [0: bb95, otherwise: bb94]; // scope 19 at ui/command/command-pre-exec.rs:88:5: 88:38
    }

    bb94: {
        _191 = core::panicking::panic(const "assertion failed: output.stdout.is_empty()") -> bb129; // scope 19 at ui/command/command-pre-exec.rs:88:5: 88:38
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:88:5: 88:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb95: {
        _193 = AtomicUsize::new(const 0_usize) -> [return: bb96, unwind: bb129]; // scope 19 at ui/command/command-pre-exec.rs:90:24: 90:43
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:90:24: 90:40
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb96: {
        _192 = Arc::<AtomicUsize>::new(move _193) -> [return: bb97, unwind: bb129]; // scope 19 at ui/command/command-pre-exec.rs:90:15: 90:44
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:90:15: 90:23
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(AtomicUsize) -> Arc<AtomicUsize> {Arc::<AtomicUsize>::new}, val: Value(<ZST>) }
    }

    bb97: {
        _195 = &_192;                    // scope 21 at ui/command/command-pre-exec.rs:91:16: 91:27
        _194 = <Arc<AtomicUsize> as Clone>::clone(move _195) -> [return: bb98, unwind: bb128]; // scope 21 at ui/command/command-pre-exec.rs:91:16: 91:27
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:91:20: 91:25
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<AtomicUsize>) -> Arc<AtomicUsize> {<Arc<AtomicUsize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb98: {
        _248 = const true;               // scope 21 at ui/command/command-pre-exec.rs:91:26: 91:27
        _204 = &_77;                     // scope 24 at ui/command/command-pre-exec.rs:93:22: 93:25
        _203 = Command::new::<&PathBuf>(move _204) -> [return: bb99, unwind: bb144]; // scope 24 at ui/command/command-pre-exec.rs:93:9: 93:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:93:9: 93:21
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&PathBuf) -> Command {Command::new::<&PathBuf>}, val: Value(<ZST>) }
    }

    bb99: {
        _202 = &mut _203;                // scope 24 at ui/command/command-pre-exec.rs:93:9: 94:26
        _201 = Command::arg::<&str>(move _202, const "empty") -> [return: bb100, unwind: bb127]; // scope 24 at ui/command/command-pre-exec.rs:93:9: 94:26
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:94:14: 94:17
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:94:18: 94:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb100: {
        _200 = &mut (*_201);             // scope 24 at ui/command/command-pre-exec.rs:93:9: 98:15
        _248 = const false;              // scope 24 at ui/command/command-pre-exec.rs:95:23: 98:14
        _205 = [closure@ui/command/command-pre-exec.rs:95:23: 95:30] { mem2: move _194 }; // scope 24 at ui/command/command-pre-exec.rs:95:23: 98:14
                                         // closure
                                         // + def_id: DefId(0:17 ~ command_pre_exec[05df]::main::{closure#4})
                                         // + substs: [
                                         //     i16,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::io::Error>,
                                         //     (std::sync::Arc<std::sync::atomic::AtomicUsize>,),
                                         // ]
        _199 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:95:23: 95:30]>(move _200, move _205) -> [return: bb101, unwind: bb127]; // scope 24 at ui/command/command-pre-exec.rs:93:9: 98:15
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:95:14: 95:22
                                         // + literal: Const { ty: for<'a> unsafe fn(&'a mut Command, [closure@ui/command/command-pre-exec.rs:95:23: 95:30]) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:95:23: 95:30]>}, val: Value(<ZST>) }
    }

    bb101: {
        _198 = &mut (*_199);             // scope 24 at ui/command/command-pre-exec.rs:93:9: 99:22
        _197 = Command::output(move _198) -> [return: bb102, unwind: bb127]; // scope 24 at ui/command/command-pre-exec.rs:93:9: 99:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:99:14: 99:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb102: {
        _196 = Result::<Output, std::io::Error>::unwrap(move _197) -> [return: bb103, unwind: bb127]; // scope 24 at ui/command/command-pre-exec.rs:93:9: 100:22
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:100:14: 100:20
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb103: {
        drop(_203) -> [return: bb104, unwind: bb126]; // scope 22 at ui/command/command-pre-exec.rs:101:6: 101:7
    }

    bb104: {
        _208 = &(_196.0: std::process::ExitStatus); // scope 23 at ui/command/command-pre-exec.rs:102:13: 102:36
        _207 = ExitStatus::success(move _208) -> [return: bb105, unwind: bb126]; // scope 23 at ui/command/command-pre-exec.rs:102:13: 102:36
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:102:27: 102:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb105: {
        _206 = Not(move _207);           // scope 23 at ui/command/command-pre-exec.rs:102:5: 102:37
        switchInt(move _206) -> [0: bb107, otherwise: bb106]; // scope 23 at ui/command/command-pre-exec.rs:102:5: 102:37
    }

    bb106: {
        _209 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb126; // scope 23 at ui/command/command-pre-exec.rs:102:5: 102:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:102:5: 102:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb107: {
        _212 = &(_196.2: std::vec::Vec<u8>); // scope 23 at ui/command/command-pre-exec.rs:103:13: 103:37
        _211 = Vec::<u8>::is_empty(move _212) -> [return: bb108, unwind: bb126]; // scope 23 at ui/command/command-pre-exec.rs:103:13: 103:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:103:27: 103:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb108: {
        _210 = Not(move _211);           // scope 23 at ui/command/command-pre-exec.rs:103:5: 103:38
        switchInt(move _210) -> [0: bb110, otherwise: bb109]; // scope 23 at ui/command/command-pre-exec.rs:103:5: 103:38
    }

    bb109: {
        _213 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb126; // scope 23 at ui/command/command-pre-exec.rs:103:5: 103:38
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:103:5: 103:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb110: {
        _216 = &(_196.1: std::vec::Vec<u8>); // scope 23 at ui/command/command-pre-exec.rs:104:13: 104:37
        _215 = Vec::<u8>::is_empty(move _216) -> [return: bb111, unwind: bb126]; // scope 23 at ui/command/command-pre-exec.rs:104:13: 104:37
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:104:27: 104:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb111: {
        _214 = Not(move _215);           // scope 23 at ui/command/command-pre-exec.rs:104:5: 104:38
        switchInt(move _214) -> [0: bb113, otherwise: bb112]; // scope 23 at ui/command/command-pre-exec.rs:104:5: 104:38
    }

    bb112: {
        _217 = core::panicking::panic(const "assertion failed: output.stdout.is_empty()") -> bb126; // scope 23 at ui/command/command-pre-exec.rs:104:5: 104:38
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:104:5: 104:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb113: {
        _223 = &_192;                    // scope 23 at ui/command/command-pre-exec.rs:105:16: 105:42
        _222 = <Arc<AtomicUsize> as Deref>::deref(move _223) -> [return: bb114, unwind: bb126]; // scope 23 at ui/command/command-pre-exec.rs:105:16: 105:42
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:105:16: 105:42
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<AtomicUsize>) -> &'a <Arc<AtomicUsize> as Deref>::Target {<Arc<AtomicUsize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb114: {
        _221 = _222;                     // scope 23 at ui/command/command-pre-exec.rs:105:16: 105:42
        _224 = const SeqCst;             // scope 23 at ui/command/command-pre-exec.rs:105:25: 105:41
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:105:25: 105:41
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _220 = AtomicUsize::load(move _221, move _224) -> [return: bb115, unwind: bb126]; // scope 23 at ui/command/command-pre-exec.rs:105:16: 105:42
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:105:20: 105:24
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb115: {
        _219 = &_220;                    // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _245 = const _;                  // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[5])) }
        _225 = _245;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _218 = (move _219, move _225);   // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _226 = (_218.0: &usize);         // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _227 = (_218.1: &usize);         // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _230 = (*_226);                  // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _231 = const 0_usize;            // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _229 = Eq(move _230, move _231); // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _228 = Not(move _229);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _228) -> [0: bb117, otherwise: bb116]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb116: {
        _232 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _234 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _236 = _226;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _235 = _236;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _238 = _227;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _237 = _238;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _239 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _233 = core::panicking::assert_failed::<usize, usize>(move _234, move _235, move _237, move _239) -> bb126; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb117: {
        drop(_196) -> [return: bb118, unwind: bb144]; // scope 22 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb118: {
        _248 = const false;              // scope 21 at ui/command/command-pre-exec.rs:106:1: 106:2
        drop(_192) -> [return: bb119, unwind: bb129]; // scope 19 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb119: {
        drop(_170) -> [return: bb120, unwind: bb131]; // scope 17 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb120: {
        drop(_136) -> [return: bb121, unwind: bb133]; // scope 11 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb121: {
        drop(_114) -> [return: bb122, unwind: bb135]; // scope 7 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb122: {
        drop(_79) -> [return: bb123, unwind: bb137]; // scope 6 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb123: {
        drop(_77) -> bb125;              // scope 0 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb124: {
        drop(_3) -> bb125;               // scope 0 at ui/command/command-pre-exec.rs:31:5: 31:6
    }

    bb125: {
        return;                          // scope 0 at ui/command/command-pre-exec.rs:106:2: 106:2
    }

    bb126 (cleanup): {
        drop(_196) -> bb144;             // scope 22 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb127 (cleanup): {
        drop(_203) -> bb144;             // scope 22 at ui/command/command-pre-exec.rs:101:6: 101:7
    }

    bb128 (cleanup): {
        drop(_192) -> bb129;             // scope 19 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb129 (cleanup): {
        drop(_170) -> bb131;             // scope 17 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb130 (cleanup): {
        drop(_177) -> bb131;             // scope 17 at ui/command/command-pre-exec.rs:85:6: 85:7
    }

    bb131 (cleanup): {
        drop(_136) -> bb133;             // scope 11 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb132 (cleanup): {
        drop(_143) -> bb133;             // scope 11 at ui/command/command-pre-exec.rs:69:6: 69:7
    }

    bb133 (cleanup): {
        drop(_114) -> bb135;             // scope 7 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb134 (cleanup): {
        drop(_121) -> bb135;             // scope 7 at ui/command/command-pre-exec.rs:58:6: 58:7
    }

    bb135 (cleanup): {
        drop(_79) -> bb137;              // scope 6 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb136 (cleanup): {
        drop(_86) -> bb137;              // scope 6 at ui/command/command-pre-exec.rs:44:6: 44:7
    }

    bb137 (cleanup): {
        drop(_77) -> bb142;              // scope 0 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb138 (cleanup): {
        drop(_48) -> bb140;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb139 (cleanup): {
        drop(_24) -> bb140;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb140 (cleanup): {
        drop(_5) -> bb141;               // scope 0 at ui/command/command-pre-exec.rs:31:5: 31:6
    }

    bb141 (cleanup): {
        drop(_3) -> bb142;               // scope 0 at ui/command/command-pre-exec.rs:31:5: 31:6
    }

    bb142 (cleanup): {
        resume;                          // scope 0 at ui/command/command-pre-exec.rs:21:1: 106:2
    }

    bb143 (cleanup): {
        drop(_194) -> bb128;             // scope 21 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb144 (cleanup): {
        switchInt(_248) -> [0: bb128, otherwise: bb143]; // scope 21 at ui/command/command-pre-exec.rs:106:1: 106:2
    }

    bb145: {
        goto -> bb32;                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-pre-exec.rs:28:25: 28:47
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-pre-exec.rs:28:25: 28:47

    bb0: {
        _1 = [const "unknown argument: "]; // scope 0 at ui/command/command-pre-exec.rs:28:25: 28:47
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:28:25: 28:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-pre-exec.rs:28:25: 28:47
        return;                          // scope 0 at ui/command/command-pre-exec.rs:28:25: 28:47
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/command/command-pre-exec.rs:26:82: 26:85

    bb0: {
        _1 = const "/";                  // scope 0 at ui/command/command-pre-exec.rs:26:82: 26:85
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:26:82: 26:85
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/command/command-pre-exec.rs:25:61: 25:66

    bb0: {
        _1 = const "BAR";                // scope 0 at ui/command/command-pre-exec.rs:25:61: 25:66
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:25:61: 25:66
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-pre-exec.rs:24:33: 24:41
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-pre-exec.rs:24:33: 24:41

    bb0: {
        _1 = [const "hello2\n"];         // scope 0 at ui/command/command-pre-exec.rs:24:33: 24:41
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:24:33: 24:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-pre-exec.rs:24:33: 24:41
        return;                          // scope 0 at ui/command/command-pre-exec.rs:24:33: 24:41
    }
}

promoted[5] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/command/command-pre-exec.rs:105:44: 105:45

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/command/command-pre-exec.rs:105:44: 105:45
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/command/command-pre-exec.rs:70:39: 70:48

    bb0: {
        _1 = Option::<i32>::Some(const 102_i32); // scope 0 at ui/command/command-pre-exec.rs:70:39: 70:48
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &&[u8; 13] = {
    let mut _0: &&[u8; 13];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 13];               // in scope 0 at ui/command/command-pre-exec.rs:47:31: 47:49

    bb0: {
        _1 = const b"hello\nhello2\n";   // scope 0 at ui/command/command-pre-exec.rs:47:31: 47:49
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:47:31: 47:49
                                         // + literal: Const { ty: &[u8; 13], val: Value(Scalar(alloc1)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc1 (size: 13, align: 1) {
    68 65 6c 6c 6f 0a 68 65 6c 6c 6f 32 0a          │ hello.hello2.
}

fn main::{closure#0}(_1: &mut [closure@ui/command/command-pre-exec.rs:38:23: 38:25]) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>; // return place in scope 0 at ui/command/command-pre-exec.rs:38:26: 38:26
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
    let mut _5: &[&str; 1];              // in scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
    let _6: &[&str; 1];                  // in scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[&str; 1];             // in scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33

    bb0: {
        _11 = const _;                   // scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:39:26: 39:33
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _6 = _11;                        // scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
        _5 = _6;                         // scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
        _10 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = const Result::<(), std::io::Error>::Ok(()); // scope 0 at ui/command/command-pre-exec.rs:40:17: 40:23
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:40:17: 40:23
                                         // + literal: Const { ty: Result<(), std::io::Error>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/command/command-pre-exec.rs:41:14: 41:14
    }
}

promoted[0] in main::{closure#0}: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33

    bb0: {
        _1 = [const "hello\n"];          // scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:39:26: 39:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
        return;                          // scope 0 at ui/command/command-pre-exec.rs:39:26: 39:33
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/command/command-pre-exec.rs:52:23: 52:25]) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>; // return place in scope 0 at ui/command/command-pre-exec.rs:52:26: 52:26
    let _2: ();                          // in scope 0 at ui/command/command-pre-exec.rs:53:17: 53:51
    let mut _3: std::result::Result<(), std::io::Error>; // in scope 0 at ui/command/command-pre-exec.rs:53:17: 53:42

    bb0: {
        _3 = set_current_dir::<&str>(const "/") -> bb1; // scope 0 at ui/command/command-pre-exec.rs:53:17: 53:42
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:53:17: 53:37
                                         // + literal: Const { ty: fn(&str) -> Result<(), std::io::Error> {set_current_dir::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:53:38: 53:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _2 = Result::<(), std::io::Error>::unwrap(move _3) -> bb2; // scope 0 at ui/command/command-pre-exec.rs:53:17: 53:51
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:53:43: 53:49
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>) {Result::<(), std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = const Result::<(), std::io::Error>::Ok(()); // scope 0 at ui/command/command-pre-exec.rs:54:17: 54:23
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:54:17: 54:23
                                         // + literal: Const { ty: Result<(), std::io::Error>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/command/command-pre-exec.rs:55:14: 55:14
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/command/command-pre-exec.rs:66:23: 66:25]) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>; // return place in scope 0 at ui/command/command-pre-exec.rs:66:26: 66:26
    let mut _2: std::io::Error;          // in scope 0 at ui/command/command-pre-exec.rs:66:30: 66:59

    bb0: {
        _2 = std::io::Error::from_raw_os_error(const 102_i32) -> bb1; // scope 0 at ui/command/command-pre-exec.rs:66:30: 66:59
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:66:30: 66:54
                                         // + literal: Const { ty: fn(i32) -> std::io::Error {std::io::Error::from_raw_os_error}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Result::<(), std::io::Error>::Err(move _2); // scope 0 at ui/command/command-pre-exec.rs:66:26: 66:60
        return;                          // scope 0 at ui/command/command-pre-exec.rs:66:60: 66:60
    }
}

fn main::{closure#3}(_1: &mut [closure@ui/command/command-pre-exec.rs:77:23: 77:30]) -> Result<(), std::io::Error> {
    debug pid => ((*_1).0: i32);         // in scope 0 at ui/command/command-pre-exec.rs:72:9: 72:12
    let mut _0: std::result::Result<(), std::io::Error>; // return place in scope 0 at ui/command/command-pre-exec.rs:77:31: 77:31
    let _2: i32;                         // in scope 0 at ui/command/command-pre-exec.rs:78:21: 78:26
    let mut _3: bool;                    // in scope 0 at ui/command/command-pre-exec.rs:79:17: 79:36
    let mut _4: bool;                    // in scope 0 at ui/command/command-pre-exec.rs:79:25: 79:35
    let mut _5: i32;                     // in scope 0 at ui/command/command-pre-exec.rs:79:25: 79:30
    let mut _6: !;                       // in scope 0 at ui/command/command-pre-exec.rs:79:17: 79:36
    let mut _7: bool;                    // in scope 0 at ui/command/command-pre-exec.rs:80:17: 80:38
    let mut _8: bool;                    // in scope 0 at ui/command/command-pre-exec.rs:80:25: 80:37
    let mut _9: i32;                     // in scope 0 at ui/command/command-pre-exec.rs:80:25: 80:28
    let mut _10: i32;                    // in scope 0 at ui/command/command-pre-exec.rs:80:32: 80:37
    let mut _11: !;                      // in scope 0 at ui/command/command-pre-exec.rs:80:17: 80:38
    scope 1 {
        debug child => _2;               // in scope 1 at ui/command/command-pre-exec.rs:78:21: 78:26
    }

    bb0: {
        _2 = getpid() -> bb1;            // scope 0 at ui/command/command-pre-exec.rs:78:29: 78:43
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:78:29: 78:41
                                         // + literal: Const { ty: unsafe extern "C" fn() -> i32 {getpid}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _2;                         // scope 1 at ui/command/command-pre-exec.rs:79:25: 79:30
        _4 = Ge(move _5, const 0_i32);   // scope 1 at ui/command/command-pre-exec.rs:79:25: 79:35
        _3 = Not(move _4);               // scope 1 at ui/command/command-pre-exec.rs:79:17: 79:36
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 1 at ui/command/command-pre-exec.rs:79:17: 79:36
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: child >= 0"); // scope 1 at ui/command/command-pre-exec.rs:79:17: 79:36
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:79:17: 79:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _9 = ((*_1).0: i32);             // scope 1 at ui/command/command-pre-exec.rs:80:25: 80:28
        _10 = _2;                        // scope 1 at ui/command/command-pre-exec.rs:80:32: 80:37
        _8 = Ne(move _9, move _10);      // scope 1 at ui/command/command-pre-exec.rs:80:25: 80:37
        _7 = Not(move _8);               // scope 1 at ui/command/command-pre-exec.rs:80:17: 80:38
        switchInt(move _7) -> [0: bb5, otherwise: bb4]; // scope 1 at ui/command/command-pre-exec.rs:80:17: 80:38
    }

    bb4: {
        _11 = core::panicking::panic(const "assertion failed: pid != child"); // scope 1 at ui/command/command-pre-exec.rs:80:17: 80:38
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:80:17: 80:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _0 = const Result::<(), std::io::Error>::Ok(()); // scope 1 at ui/command/command-pre-exec.rs:81:17: 81:23
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:81:17: 81:23
                                         // + literal: Const { ty: Result<(), std::io::Error>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/command/command-pre-exec.rs:82:14: 82:14
    }
}

fn main::{closure#4}(_1: &mut [closure@ui/command/command-pre-exec.rs:95:23: 95:30]) -> Result<(), std::io::Error> {
    debug mem2 => ((*_1).0: std::sync::Arc<std::sync::atomic::AtomicUsize>); // in scope 0 at ui/command/command-pre-exec.rs:91:9: 91:13
    let mut _0: std::result::Result<(), std::io::Error>; // return place in scope 0 at ui/command/command-pre-exec.rs:95:31: 95:31
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at ui/command/command-pre-exec.rs:96:28: 96:63
    let mut _5: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/command/command-pre-exec.rs:96:28: 96:63
    let _6: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/command/command-pre-exec.rs:96:28: 96:63
    let mut _7: &std::sync::Arc<std::sync::atomic::AtomicUsize>; // in scope 0 at ui/command/command-pre-exec.rs:96:28: 96:63
    let mut _8: std::sync::atomic::Ordering; // in scope 0 at ui/command/command-pre-exec.rs:96:46: 96:62
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _10;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _7 = &((*_1).0: std::sync::Arc<std::sync::atomic::AtomicUsize>); // scope 0 at ui/command/command-pre-exec.rs:96:28: 96:63
        _6 = <Arc<AtomicUsize> as Deref>::deref(move _7) -> bb1; // scope 0 at ui/command/command-pre-exec.rs:96:28: 96:63
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:96:28: 96:63
                                         // + literal: Const { ty: for<'a> fn(&'a Arc<AtomicUsize>) -> &'a <Arc<AtomicUsize> as Deref>::Target {<Arc<AtomicUsize> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _6;                         // scope 0 at ui/command/command-pre-exec.rs:96:28: 96:63
        _8 = const SeqCst;               // scope 0 at ui/command/command-pre-exec.rs:96:46: 96:62
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:96:46: 96:62
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _4 = AtomicUsize::fetch_add(move _5, const 1_usize, move _8) -> bb2; // scope 0 at ui/command/command-pre-exec.rs:96:28: 96:63
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:96:33: 96:42
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) -> usize {AtomicUsize::fetch_add}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main::{closure#4}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _24;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_2.0: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_2.1: &usize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<usize, usize>(move _18, move _19, move _21, move _23); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = const Result::<(), std::io::Error>::Ok(()); // scope 0 at ui/command/command-pre-exec.rs:97:17: 97:23
                                         // mir::Constant
                                         // + span: ui/command/command-pre-exec.rs:97:17: 97:23
                                         // + literal: Const { ty: Result<(), std::io::Error>, val: Value(Scalar(0x0000000000000000)) }
        return;                          // scope 0 at ui/command/command-pre-exec.rs:98:14: 98:14
    }
}

promoted[0] in main::{closure#4}: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/command/command-pre-exec.rs:96:65: 96:66

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/command/command-pre-exec.rs:96:65: 96:66
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
