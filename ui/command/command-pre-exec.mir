// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::option::Option<std::string::String>;
    let mut _2: &mut std::env::Args;
    let mut _3: std::env::Args;
    let mut _4: isize;
    let mut _6: &str;
    let _7: &str;
    let mut _8: &std::string::String;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _16: (&std::string::String, &&str);
    let mut _17: &std::string::String;
    let _18: std::string::String;
    let mut _19: std::result::Result<std::string::String, std::env::VarError>;
    let mut _22: bool;
    let mut _23: bool;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&&str, &&str);
    let mut _28: &&str;
    let _29: &str;
    let mut _30: std::option::Option<&str>;
    let mut _31: &std::path::Path;
    let _32: &std::path::Path;
    let mut _33: &std::path::PathBuf;
    let _34: std::path::PathBuf;
    let mut _35: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _38: bool;
    let mut _39: bool;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    let _43: !;
    let mut _44: std::fmt::Arguments<'_>;
    let mut _45: &[&str];
    let mut _46: &[core::fmt::rt::Argument<'_>];
    let _47: &[core::fmt::rt::Argument<'_>; 1];
    let _48: [core::fmt::rt::Argument<'_>; 1];
    let mut _49: core::fmt::rt::Argument<'_>;
    let _50: &std::string::String;
    let _51: std::path::PathBuf;
    let mut _52: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _54: std::result::Result<std::process::Output, std::io::Error>;
    let mut _55: &mut std::process::Command;
    let mut _56: &mut std::process::Command;
    let mut _57: &mut std::process::Command;
    let mut _58: &mut std::process::Command;
    let mut _59: &mut std::process::Command;
    let mut _60: std::process::Command;
    let mut _61: &std::path::PathBuf;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: &std::process::ExitStatus;
    let mut _65: !;
    let mut _66: bool;
    let mut _67: bool;
    let mut _68: &std::vec::Vec<u8>;
    let mut _69: !;
    let mut _70: (&std::vec::Vec<u8>, &&[u8; 13]);
    let mut _71: &std::vec::Vec<u8>;
    let mut _74: bool;
    let mut _75: bool;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _80: std::result::Result<std::process::Output, std::io::Error>;
    let mut _81: &mut std::process::Command;
    let mut _82: &mut std::process::Command;
    let mut _83: &mut std::process::Command;
    let mut _84: &mut std::process::Command;
    let mut _85: &mut std::process::Command;
    let mut _86: std::process::Command;
    let mut _87: &std::path::PathBuf;
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: &std::process::ExitStatus;
    let mut _91: !;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: &std::vec::Vec<u8>;
    let mut _95: !;
    let mut _96: bool;
    let mut _97: bool;
    let mut _98: &std::vec::Vec<u8>;
    let mut _99: !;
    let mut _101: std::result::Result<std::process::Output, std::io::Error>;
    let mut _102: &mut std::process::Command;
    let mut _103: &mut std::process::Command;
    let mut _104: &mut std::process::Command;
    let mut _105: &mut std::process::Command;
    let mut _106: &mut std::process::Command;
    let mut _107: std::process::Command;
    let mut _108: &std::path::PathBuf;
    let mut _109: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _110: &std::option::Option<i32>;
    let _111: std::option::Option<i32>;
    let mut _112: &std::io::Error;
    let mut _115: bool;
    let mut _116: bool;
    let _118: !;
    let mut _119: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: bool;
    let mut _122: bool;
    let mut _123: i32;
    let mut _124: !;
    let mut _126: std::result::Result<std::process::Output, std::io::Error>;
    let mut _127: &mut std::process::Command;
    let mut _128: &mut std::process::Command;
    let mut _129: &mut std::process::Command;
    let mut _130: &mut std::process::Command;
    let mut _131: &mut std::process::Command;
    let mut _132: std::process::Command;
    let mut _133: &std::path::PathBuf;
    let mut _134: [closure@ui/command/command-pre-exec.rs:77:23: 77:30];
    let mut _135: bool;
    let mut _136: bool;
    let mut _137: &std::process::ExitStatus;
    let mut _138: !;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: &std::vec::Vec<u8>;
    let mut _142: !;
    let mut _143: bool;
    let mut _144: bool;
    let mut _145: &std::vec::Vec<u8>;
    let mut _146: !;
    let mut _148: std::sync::atomic::AtomicUsize;
    let mut _150: &std::sync::Arc<std::sync::atomic::AtomicUsize>;
    let mut _152: std::result::Result<std::process::Output, std::io::Error>;
    let mut _153: &mut std::process::Command;
    let mut _154: &mut std::process::Command;
    let mut _155: &mut std::process::Command;
    let mut _156: &mut std::process::Command;
    let mut _157: &mut std::process::Command;
    let mut _158: std::process::Command;
    let mut _159: &std::path::PathBuf;
    let mut _160: [closure@ui/command/command-pre-exec.rs:95:23: 95:30];
    let mut _161: bool;
    let mut _162: bool;
    let mut _163: &std::process::ExitStatus;
    let mut _164: !;
    let mut _165: bool;
    let mut _166: bool;
    let mut _167: &std::vec::Vec<u8>;
    let mut _168: !;
    let mut _169: bool;
    let mut _170: bool;
    let mut _171: &std::vec::Vec<u8>;
    let mut _172: !;
    let mut _173: (&usize, &usize);
    let mut _174: &usize;
    let _175: usize;
    let mut _176: &std::sync::atomic::AtomicUsize;
    let _177: &std::sync::atomic::AtomicUsize;
    let mut _178: &std::sync::Arc<std::sync::atomic::AtomicUsize>;
    let mut _179: std::sync::atomic::Ordering;
    let mut _182: bool;
    let mut _183: bool;
    let mut _184: usize;
    let mut _185: usize;
    let _187: !;
    let mut _188: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _196: bool;
    scope 1 {
        debug arg => _5;
        let _5: std::string::String;
        let _20: &std::string::String;
        let _21: &&str;
        let _36: &&str;
        let _37: &&str;
        let mut _192: &[&str; 1];
        let mut _193: &&str;
        let mut _194: &&str;
        let mut _195: &[&str; 1];
        scope 2 {
            debug left_val => _20;
            debug right_val => _21;
            let _24: core::panicking::AssertKind;
            scope 3 {
                debug kind => _24;
            }
        }
        scope 4 {
            debug left_val => _36;
            debug right_val => _37;
            let _40: core::panicking::AssertKind;
            scope 5 {
                debug kind => _40;
            }
        }
    }
    scope 6 {
        debug me => _51;
        let _53: std::process::Output;
        scope 7 {
            debug output => _53;
            let _72: &std::vec::Vec<u8>;
            let _73: &&[u8; 13];
            let _79: std::process::Output;
            let mut _191: &&[u8; 13];
            scope 9 {
                debug left_val => _72;
                debug right_val => _73;
                let _76: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _76;
                }
            }
            scope 11 {
                debug output => _79;
                let _100: std::io::Error;
                scope 13 {
                    debug output => _100;
                    let _113: &std::option::Option<i32>;
                    let _114: &std::option::Option<i32>;
                    let _120: i32;
                    let mut _190: &std::option::Option<i32>;
                    scope 15 {
                        debug left_val => _113;
                        debug right_val => _114;
                        let _117: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _117;
                        }
                    }
                    scope 17 {
                        debug pid => _120;
                        let _125: std::process::Output;
                        scope 19 {
                            debug output => _125;
                            let _147: std::sync::Arc<std::sync::atomic::AtomicUsize>;
                            scope 21 {
                                debug mem => _147;
                                let _149: std::sync::Arc<std::sync::atomic::AtomicUsize>;
                                scope 22 {
                                    debug mem2 => _149;
                                    let _151: std::process::Output;
                                    scope 23 {
                                        debug output => _151;
                                        let _180: &usize;
                                        let _181: &usize;
                                        let mut _189: &usize;
                                        scope 25 {
                                            debug left_val => _180;
                                            debug right_val => _181;
                                            let _186: core::panicking::AssertKind;
                                            scope 26 {
                                                debug kind => _186;
                                            }
                                        }
                                    }
                                    scope 24 {
                                    }
                                }
                            }
                        }
                        scope 20 {
                        }
                    }
                    scope 18 {
                    }
                }
                scope 14 {
                }
            }
            scope 12 {
            }
        }
        scope 8 {
        }
    }

    bb0: {
        _196 = const false;
        _3 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &mut _3;
        _1 = <Args as Iterator>::nth(move _2, const 1_usize) -> [return: bb2, unwind: bb141];
    }

    bb2: {
        _4 = discriminant(_1);
        switchInt(move _4) -> [1: bb3, otherwise: bb33];
    }

    bb3: {
        _5 = move ((_1 as Some).0: std::string::String);
        _8 = &_5;
        _7 = <String as Index<RangeFull>>::index(move _8, const RangeFull) -> [return: bb4, unwind: bb140];
    }

    bb4: {
        _6 = _7;
        _9 = <str as PartialEq>::eq(_6, const "test1") -> [return: bb5, unwind: bb140];
    }

    bb5: {
        switchInt(move _9) -> [0: bb6, otherwise: bb13];
    }

    bb6: {
        _10 = <str as PartialEq>::eq(_6, const "test2") -> [return: bb7, unwind: bb140];
    }

    bb7: {
        switchInt(move _10) -> [0: bb8, otherwise: bb15];
    }

    bb8: {
        _11 = <str as PartialEq>::eq(_6, const "test3") -> [return: bb9, unwind: bb140];
    }

    bb9: {
        switchInt(move _11) -> [0: bb10, otherwise: bb21];
    }

    bb10: {
        _12 = <str as PartialEq>::eq(_6, const "empty") -> [return: bb11, unwind: bb140];
    }

    bb11: {
        switchInt(move _12) -> [0: bb12, otherwise: bb32];
    }

    bb12: {
        _192 = const _;
        _45 = _192 as &[&str] (Pointer(Unsize));
        _50 = &_5;
        _49 = core::fmt::rt::Argument::<'_>::new_display::<String>(_50) -> [return: bb30, unwind: bb140];
    }

    bb13: {
        _195 = const _;
        _15 = _195 as &[&str] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_const(move _15) -> [return: bb14, unwind: bb140];
    }

    bb14: {
        _13 = _print(move _14) -> [return: bb145, unwind: bb140];
    }

    bb15: {
        _19 = var::<&str>(const "FOO") -> [return: bb16, unwind: bb140];
    }

    bb16: {
        _18 = Result::<String, VarError>::unwrap(move _19) -> [return: bb17, unwind: bb140];
    }

    bb17: {
        _17 = &_18;
        _194 = const _;
        _16 = (move _17, _194);
        _20 = (_16.0: &std::string::String);
        _21 = (_16.1: &&str);
        _23 = <String as PartialEq<&str>>::eq(_20, _21) -> [return: bb18, unwind: bb139];
    }

    bb18: {
        _22 = Not(move _23);
        switchInt(move _22) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<String, &str>(move _24, _20, _21, move _26) -> bb139;
    }

    bb20: {
        drop(_18) -> [return: bb32, unwind: bb140];
    }

    bb21: {
        _35 = current_dir() -> [return: bb22, unwind: bb140];
    }

    bb22: {
        _34 = Result::<PathBuf, std::io::Error>::unwrap(move _35) -> [return: bb23, unwind: bb140];
    }

    bb23: {
        _33 = &_34;
        _32 = <PathBuf as Deref>::deref(move _33) -> [return: bb24, unwind: bb138];
    }

    bb24: {
        _31 = _32;
        _30 = Path::to_str(move _31) -> [return: bb25, unwind: bb138];
    }

    bb25: {
        _29 = Option::<&str>::unwrap(move _30) -> [return: bb26, unwind: bb138];
    }

    bb26: {
        _28 = &_29;
        _193 = const _;
        _27 = (move _28, _193);
        _36 = (_27.0: &&str);
        _37 = (_27.1: &&str);
        _39 = <&str as PartialEq>::eq(_36, _37) -> [return: bb27, unwind: bb138];
    }

    bb27: {
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb29, otherwise: bb28];
    }

    bb28: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<&str, &str>(move _40, _36, _37, move _42) -> bb138;
    }

    bb29: {
        drop(_34) -> [return: bb32, unwind: bb140];
    }

    bb30: {
        _48 = [move _49];
        _47 = &_48;
        _46 = _47 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _44 = Arguments::<'_>::new_v1(move _45, move _46) -> [return: bb31, unwind: bb140];
    }

    bb31: {
        _43 = panic_fmt(move _44) -> bb140;
    }

    bb32: {
        drop(_5) -> [return: bb124, unwind: bb141];
    }

    bb33: {
        drop(_1) -> [return: bb34, unwind: bb141];
    }

    bb34: {
        drop(_3) -> [return: bb35, unwind continue];
    }

    bb35: {
        _52 = current_exe() -> [return: bb36, unwind continue];
    }

    bb36: {
        _51 = Result::<PathBuf, std::io::Error>::unwrap(move _52) -> [return: bb37, unwind continue];
    }

    bb37: {
        _61 = &_51;
        _60 = Command::new::<&PathBuf>(move _61) -> [return: bb38, unwind: bb137];
    }

    bb38: {
        _59 = &mut _60;
        _58 = Command::arg::<&str>(move _59, const "test1") -> [return: bb39, unwind: bb136];
    }

    bb39: {
        _57 = _58;
        _56 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:38:23: 38:25]>(move _57, const ZeroSized: [closure@ui/command/command-pre-exec.rs:38:23: 38:25]) -> [return: bb40, unwind: bb136];
    }

    bb40: {
        _55 = _56;
        _54 = Command::output(move _55) -> [return: bb41, unwind: bb136];
    }

    bb41: {
        _53 = Result::<Output, std::io::Error>::unwrap(move _54) -> [return: bb42, unwind: bb136];
    }

    bb42: {
        drop(_60) -> [return: bb43, unwind: bb135];
    }

    bb43: {
        _64 = &(_53.0: std::process::ExitStatus);
        _63 = ExitStatus::success(move _64) -> [return: bb44, unwind: bb135];
    }

    bb44: {
        _62 = Not(move _63);
        switchInt(move _62) -> [0: bb46, otherwise: bb45];
    }

    bb45: {
        _65 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb135;
    }

    bb46: {
        _68 = &(_53.2: std::vec::Vec<u8>);
        _67 = Vec::<u8>::is_empty(move _68) -> [return: bb47, unwind: bb135];
    }

    bb47: {
        _66 = Not(move _67);
        switchInt(move _66) -> [0: bb49, otherwise: bb48];
    }

    bb48: {
        _69 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb135;
    }

    bb49: {
        _71 = &(_53.1: std::vec::Vec<u8>);
        _191 = const _;
        _70 = (move _71, _191);
        _72 = (_70.0: &std::vec::Vec<u8>);
        _73 = (_70.1: &&[u8; 13]);
        _75 = <Vec<u8> as PartialEq<&[u8; 13]>>::eq(_72, _73) -> [return: bb50, unwind: bb135];
    }

    bb50: {
        _74 = Not(move _75);
        switchInt(move _74) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<Vec<u8>, &[u8; 13]>(move _76, _72, _73, move _78) -> bb135;
    }

    bb52: {
        _87 = &_51;
        _86 = Command::new::<&PathBuf>(move _87) -> [return: bb53, unwind: bb135];
    }

    bb53: {
        _85 = &mut _86;
        _84 = Command::arg::<&str>(move _85, const "test3") -> [return: bb54, unwind: bb134];
    }

    bb54: {
        _83 = _84;
        _82 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:52:23: 52:25]>(move _83, const ZeroSized: [closure@ui/command/command-pre-exec.rs:52:23: 52:25]) -> [return: bb55, unwind: bb134];
    }

    bb55: {
        _81 = _82;
        _80 = Command::output(move _81) -> [return: bb56, unwind: bb134];
    }

    bb56: {
        _79 = Result::<Output, std::io::Error>::unwrap(move _80) -> [return: bb57, unwind: bb134];
    }

    bb57: {
        drop(_86) -> [return: bb58, unwind: bb133];
    }

    bb58: {
        _90 = &(_79.0: std::process::ExitStatus);
        _89 = ExitStatus::success(move _90) -> [return: bb59, unwind: bb133];
    }

    bb59: {
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb61, otherwise: bb60];
    }

    bb60: {
        _91 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb133;
    }

    bb61: {
        _94 = &(_79.2: std::vec::Vec<u8>);
        _93 = Vec::<u8>::is_empty(move _94) -> [return: bb62, unwind: bb133];
    }

    bb62: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _95 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb133;
    }

    bb64: {
        _98 = &(_79.1: std::vec::Vec<u8>);
        _97 = Vec::<u8>::is_empty(move _98) -> [return: bb65, unwind: bb133];
    }

    bb65: {
        _96 = Not(move _97);
        switchInt(move _96) -> [0: bb67, otherwise: bb66];
    }

    bb66: {
        _99 = core::panicking::panic(const "assertion failed: output.stdout.is_empty()") -> bb133;
    }

    bb67: {
        _108 = &_51;
        _107 = Command::new::<&PathBuf>(move _108) -> [return: bb68, unwind: bb133];
    }

    bb68: {
        _106 = &mut _107;
        _105 = Command::arg::<&str>(move _106, const "bad") -> [return: bb69, unwind: bb132];
    }

    bb69: {
        _104 = _105;
        _103 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:66:23: 66:25]>(move _104, const ZeroSized: [closure@ui/command/command-pre-exec.rs:66:23: 66:25]) -> [return: bb70, unwind: bb132];
    }

    bb70: {
        _102 = _103;
        _101 = Command::output(move _102) -> [return: bb71, unwind: bb132];
    }

    bb71: {
        _100 = Result::<Output, std::io::Error>::unwrap_err(move _101) -> [return: bb72, unwind: bb132];
    }

    bb72: {
        drop(_107) -> [return: bb73, unwind: bb131];
    }

    bb73: {
        _112 = &_100;
        _111 = std::io::Error::raw_os_error(move _112) -> [return: bb74, unwind: bb131];
    }

    bb74: {
        _110 = &_111;
        _190 = const _;
        _109 = (move _110, _190);
        _113 = (_109.0: &std::option::Option<i32>);
        _114 = (_109.1: &std::option::Option<i32>);
        _116 = <Option<i32> as PartialEq>::eq(_113, _114) -> [return: bb75, unwind: bb131];
    }

    bb75: {
        _115 = Not(move _116);
        switchInt(move _115) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _117 = core::panicking::AssertKind::Eq;
        _119 = Option::<Arguments<'_>>::None;
        _118 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _117, _113, _114, move _119) -> bb131;
    }

    bb77: {
        _120 = getpid() -> [return: bb78, unwind: bb131];
    }

    bb78: {
        _123 = _120;
        _122 = Ge(move _123, const 0_i32);
        _121 = Not(move _122);
        switchInt(move _121) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _124 = core::panicking::panic(const "assertion failed: pid >= 0") -> bb131;
    }

    bb80: {
        _133 = &_51;
        _132 = Command::new::<&PathBuf>(move _133) -> [return: bb81, unwind: bb131];
    }

    bb81: {
        _131 = &mut _132;
        _130 = Command::arg::<&str>(move _131, const "empty") -> [return: bb82, unwind: bb130];
    }

    bb82: {
        _129 = _130;
        _134 = [closure@ui/command/command-pre-exec.rs:77:23: 77:30] { pid: _120 };
        _128 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:77:23: 77:30]>(move _129, move _134) -> [return: bb83, unwind: bb130];
    }

    bb83: {
        _127 = _128;
        _126 = Command::output(move _127) -> [return: bb84, unwind: bb130];
    }

    bb84: {
        _125 = Result::<Output, std::io::Error>::unwrap(move _126) -> [return: bb85, unwind: bb130];
    }

    bb85: {
        drop(_132) -> [return: bb86, unwind: bb129];
    }

    bb86: {
        _137 = &(_125.0: std::process::ExitStatus);
        _136 = ExitStatus::success(move _137) -> [return: bb87, unwind: bb129];
    }

    bb87: {
        _135 = Not(move _136);
        switchInt(move _135) -> [0: bb89, otherwise: bb88];
    }

    bb88: {
        _138 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb129;
    }

    bb89: {
        _141 = &(_125.2: std::vec::Vec<u8>);
        _140 = Vec::<u8>::is_empty(move _141) -> [return: bb90, unwind: bb129];
    }

    bb90: {
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb92, otherwise: bb91];
    }

    bb91: {
        _142 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb129;
    }

    bb92: {
        _145 = &(_125.1: std::vec::Vec<u8>);
        _144 = Vec::<u8>::is_empty(move _145) -> [return: bb93, unwind: bb129];
    }

    bb93: {
        _143 = Not(move _144);
        switchInt(move _143) -> [0: bb95, otherwise: bb94];
    }

    bb94: {
        _146 = core::panicking::panic(const "assertion failed: output.stdout.is_empty()") -> bb129;
    }

    bb95: {
        _148 = AtomicUsize::new(const 0_usize) -> [return: bb96, unwind: bb129];
    }

    bb96: {
        _147 = Arc::<AtomicUsize>::new(move _148) -> [return: bb97, unwind: bb129];
    }

    bb97: {
        _150 = &_147;
        _149 = <Arc<AtomicUsize> as Clone>::clone(move _150) -> [return: bb98, unwind: bb128];
    }

    bb98: {
        _196 = const true;
        _159 = &_51;
        _158 = Command::new::<&PathBuf>(move _159) -> [return: bb99, unwind: bb144];
    }

    bb99: {
        _157 = &mut _158;
        _156 = Command::arg::<&str>(move _157, const "empty") -> [return: bb100, unwind: bb127];
    }

    bb100: {
        _155 = _156;
        _196 = const false;
        _160 = [closure@ui/command/command-pre-exec.rs:95:23: 95:30] { mem2: move _149 };
        _154 = <Command as std::os::unix::process::CommandExt>::pre_exec::<[closure@ui/command/command-pre-exec.rs:95:23: 95:30]>(move _155, move _160) -> [return: bb101, unwind: bb127];
    }

    bb101: {
        _153 = _154;
        _152 = Command::output(move _153) -> [return: bb102, unwind: bb127];
    }

    bb102: {
        _151 = Result::<Output, std::io::Error>::unwrap(move _152) -> [return: bb103, unwind: bb127];
    }

    bb103: {
        drop(_158) -> [return: bb104, unwind: bb126];
    }

    bb104: {
        _163 = &(_151.0: std::process::ExitStatus);
        _162 = ExitStatus::success(move _163) -> [return: bb105, unwind: bb126];
    }

    bb105: {
        _161 = Not(move _162);
        switchInt(move _161) -> [0: bb107, otherwise: bb106];
    }

    bb106: {
        _164 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb126;
    }

    bb107: {
        _167 = &(_151.2: std::vec::Vec<u8>);
        _166 = Vec::<u8>::is_empty(move _167) -> [return: bb108, unwind: bb126];
    }

    bb108: {
        _165 = Not(move _166);
        switchInt(move _165) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _168 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb126;
    }

    bb110: {
        _171 = &(_151.1: std::vec::Vec<u8>);
        _170 = Vec::<u8>::is_empty(move _171) -> [return: bb111, unwind: bb126];
    }

    bb111: {
        _169 = Not(move _170);
        switchInt(move _169) -> [0: bb113, otherwise: bb112];
    }

    bb112: {
        _172 = core::panicking::panic(const "assertion failed: output.stdout.is_empty()") -> bb126;
    }

    bb113: {
        _178 = &_147;
        _177 = <Arc<AtomicUsize> as Deref>::deref(move _178) -> [return: bb114, unwind: bb126];
    }

    bb114: {
        _176 = _177;
        _179 = SeqCst;
        _175 = AtomicUsize::load(move _176, move _179) -> [return: bb115, unwind: bb126];
    }

    bb115: {
        _174 = &_175;
        _189 = const _;
        _173 = (move _174, _189);
        _180 = (_173.0: &usize);
        _181 = (_173.1: &usize);
        _184 = (*_180);
        _185 = (*_181);
        _183 = Eq(move _184, move _185);
        _182 = Not(move _183);
        switchInt(move _182) -> [0: bb117, otherwise: bb116];
    }

    bb116: {
        _186 = core::panicking::AssertKind::Eq;
        _188 = Option::<Arguments<'_>>::None;
        _187 = core::panicking::assert_failed::<usize, usize>(move _186, _180, _181, move _188) -> bb126;
    }

    bb117: {
        drop(_151) -> [return: bb118, unwind: bb144];
    }

    bb118: {
        _196 = const false;
        drop(_147) -> [return: bb119, unwind: bb129];
    }

    bb119: {
        drop(_125) -> [return: bb120, unwind: bb131];
    }

    bb120: {
        drop(_100) -> [return: bb121, unwind: bb133];
    }

    bb121: {
        drop(_79) -> [return: bb122, unwind: bb135];
    }

    bb122: {
        drop(_53) -> [return: bb123, unwind: bb137];
    }

    bb123: {
        drop(_51) -> [return: bb125, unwind continue];
    }

    bb124: {
        drop(_3) -> [return: bb125, unwind continue];
    }

    bb125: {
        return;
    }

    bb126 (cleanup): {
        drop(_151) -> [return: bb144, unwind terminate];
    }

    bb127 (cleanup): {
        drop(_158) -> [return: bb144, unwind terminate];
    }

    bb128 (cleanup): {
        drop(_147) -> [return: bb129, unwind terminate];
    }

    bb129 (cleanup): {
        drop(_125) -> [return: bb131, unwind terminate];
    }

    bb130 (cleanup): {
        drop(_132) -> [return: bb131, unwind terminate];
    }

    bb131 (cleanup): {
        drop(_100) -> [return: bb133, unwind terminate];
    }

    bb132 (cleanup): {
        drop(_107) -> [return: bb133, unwind terminate];
    }

    bb133 (cleanup): {
        drop(_79) -> [return: bb135, unwind terminate];
    }

    bb134 (cleanup): {
        drop(_86) -> [return: bb135, unwind terminate];
    }

    bb135 (cleanup): {
        drop(_53) -> [return: bb137, unwind terminate];
    }

    bb136 (cleanup): {
        drop(_60) -> [return: bb137, unwind terminate];
    }

    bb137 (cleanup): {
        drop(_51) -> [return: bb142, unwind terminate];
    }

    bb138 (cleanup): {
        drop(_34) -> [return: bb140, unwind terminate];
    }

    bb139 (cleanup): {
        drop(_18) -> [return: bb140, unwind terminate];
    }

    bb140 (cleanup): {
        drop(_5) -> [return: bb141, unwind terminate];
    }

    bb141 (cleanup): {
        drop(_3) -> [return: bb142, unwind terminate];
    }

    bb142 (cleanup): {
        resume;
    }

    bb143 (cleanup): {
        drop(_149) -> [return: bb128, unwind terminate];
    }

    bb144 (cleanup): {
        switchInt(_196) -> [0: bb128, otherwise: bb143];
    }

    bb145: {
        goto -> bb32;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::Some(const 102_i32);
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&[u8; 13] = {
    let mut _0: &&[u8; 13];
    let mut _1: &[u8; 13];

    bb0: {
        _1 = const b"hello\nhello2\n";
        _0 = &_1;
        return;
    }
}

alloc1 (size: 13, align: 1) {
    68 65 6c 6c 6f 0a 68 65 6c 6c 6f 32 0a          │ hello.hello2.
}

promoted[3] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "unknown argument: "];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "/";
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "BAR";
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hello2\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/command/command-pre-exec.rs:38:23: 38:25]) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[&str; 1];

    bb0: {
        _5 = const _;
        _4 = _5 as &[&str] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_const(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _print(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        return;
    }
}

promoted[0] in main::{closure#0}: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "hello\n"];
        _0 = &_1;
        return;
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/command/command-pre-exec.rs:52:23: 52:25]) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let _2: ();
    let mut _3: std::result::Result<(), std::io::Error>;

    bb0: {
        _3 = set_current_dir::<&str>(const "/") -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = Result::<(), std::io::Error>::unwrap(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        return;
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/command/command-pre-exec.rs:66:23: 66:25]) -> Result<(), std::io::Error> {
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _2: std::io::Error;

    bb0: {
        _2 = std::io::Error::from_raw_os_error(const 102_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = Result::<(), std::io::Error>::Err(move _2);
        return;
    }
}

fn main::{closure#3}(_1: &mut [closure@ui/command/command-pre-exec.rs:77:23: 77:30]) -> Result<(), std::io::Error> {
    debug pid => ((*_1).0: i32);
    let mut _0: std::result::Result<(), std::io::Error>;
    let _2: i32;
    let mut _3: bool;
    let mut _4: bool;
    let mut _5: i32;
    let mut _6: !;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: i32;
    let mut _10: i32;
    let mut _11: !;
    scope 1 {
        debug child => _2;
    }

    bb0: {
        _2 = getpid() -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = _2;
        _4 = Ge(move _5, const 0_i32);
        _3 = Not(move _4);
        switchInt(move _3) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: child >= 0") -> unwind continue;
    }

    bb3: {
        _9 = ((*_1).0: i32);
        _10 = _2;
        _8 = Ne(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _11 = core::panicking::panic(const "assertion failed: pid != child") -> unwind continue;
    }

    bb5: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        return;
    }
}

fn main::{closure#4}(_1: &mut [closure@ui/command/command-pre-exec.rs:95:23: 95:30]) -> Result<(), std::io::Error> {
    debug mem2 => ((*_1).0: std::sync::Arc<std::sync::atomic::AtomicUsize>);
    let mut _0: std::result::Result<(), std::io::Error>;
    let mut _2: (&usize, &usize);
    let mut _3: &usize;
    let _4: usize;
    let mut _5: &std::sync::atomic::AtomicUsize;
    let _6: &std::sync::atomic::AtomicUsize;
    let mut _7: &std::sync::Arc<std::sync::atomic::AtomicUsize>;
    let mut _8: std::sync::atomic::Ordering;
    let _9: &usize;
    let _10: &usize;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: &usize;
    scope 1 {
        debug left_val => _9;
        debug right_val => _10;
        let _15: core::panicking::AssertKind;
        scope 2 {
            debug kind => _15;
        }
    }

    bb0: {
        _7 = &((*_1).0: std::sync::Arc<std::sync::atomic::AtomicUsize>);
        _6 = <Arc<AtomicUsize> as Deref>::deref(move _7) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = _6;
        _8 = SeqCst;
        _4 = AtomicUsize::fetch_add(move _5, const 1_usize, move _8) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = &_4;
        _18 = const _;
        _2 = (move _3, _18);
        _9 = (_2.0: &usize);
        _10 = (_2.1: &usize);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<usize, usize>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb4: {
        _0 = Result::<(), std::io::Error>::Ok(const ());
        return;
    }
}

promoted[0] in main::{closure#4}: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}
