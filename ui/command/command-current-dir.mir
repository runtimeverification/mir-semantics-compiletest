// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::path::PathBuf;
    let mut _2: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _3: bool;
    let mut _4: std::option::Option<&str>;
    let mut _5: &std::option::Option<std::string::String>;
    let _6: std::option::Option<std::string::String>;
    let mut _7: &mut std::iter::Skip<std::env::Args>;
    let mut _8: std::iter::Skip<std::env::Args>;
    let mut _9: std::env::Args;
    let mut _10: bool;
    let mut _11: isize;
    let mut _13: std::result::Result<std::path::PathBuf, std::io::Error>;
    let mut _14: (&&std::ffi::OsStr, &&str);
    let mut _15: &&std::ffi::OsStr;
    let _16: &std::ffi::OsStr;
    let mut _17: std::option::Option<&std::ffi::OsStr>;
    let mut _18: &std::path::Path;
    let _19: &std::path::Path;
    let mut _20: &std::path::PathBuf;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let _28: !;
    let mut _30: std::option::Option<&std::ffi::OsStr>;
    let mut _31: &std::path::Path;
    let _32: &std::path::Path;
    let mut _33: &std::path::PathBuf;
    let mut _35: std::option::Option<&std::path::Path>;
    let mut _36: &std::path::Path;
    let _37: &std::path::Path;
    let mut _38: &std::path::PathBuf;
    let _39: ();
    let mut _40: std::fmt::Arguments<'_>;
    let mut _41: &[&str];
    let mut _42: &[core::fmt::rt::Argument<'_>];
    let _43: &[core::fmt::rt::Argument<'_>; 1];
    let _44: [core::fmt::rt::Argument<'_>; 1];
    let mut _45: core::fmt::rt::Argument<'_>;
    let _46: &&std::path::Path;
    let _47: ();
    let mut _48: std::result::Result<(), std::io::Error>;
    let mut _49: &&std::path::Path;
    let mut _51: &std::path::Path;
    let mut _53: &std::path::Path;
    let _54: ();
    let mut _55: std::result::Result<(), std::io::Error>;
    let mut _56: &std::path::PathBuf;
    let _57: ();
    let mut _58: std::result::Result<(), std::io::Error>;
    let mut _59: &std::path::PathBuf;
    let _60: u64;
    let mut _61: std::result::Result<u64, std::io::Error>;
    let mut _62: &std::path::PathBuf;
    let mut _63: std::path::PathBuf;
    let mut _64: &std::path::Path;
    let _65: &std::path::Path;
    let mut _66: &std::path::PathBuf;
    let mut _67: &std::ffi::OsStr;
    let mut _69: bool;
    let mut _70: &std::path::Path;
    let _71: &std::path::Path;
    let _72: &str;
    let mut _73: &std::ffi::OsStr;
    let mut _74: &std::path::Path;
    let _75: &std::path::Path;
    let _76: &str;
    let mut _77: &std::ffi::OsStr;
    let mut _79: std::result::Result<std::process::ExitStatus, std::io::Error>;
    let mut _80: &mut std::process::Command;
    let mut _81: &mut std::process::Command;
    let mut _82: &mut std::process::Command;
    let mut _83: &mut std::process::Command;
    let mut _84: &mut std::process::Command;
    let mut _85: std::process::Command;
    let mut _86: std::path::PathBuf;
    let mut _87: bool;
    let mut _88: bool;
    let mut _89: &std::process::ExitStatus;
    let mut _90: !;
    let mut _93: bool;
    scope 1 {
        debug me => _1;
        let _12: std::path::PathBuf;
        let _29: &std::ffi::OsStr;
        scope 2 {
            debug cwd => _12;
            let _21: &&std::ffi::OsStr;
            let _22: &&str;
            let mut _91: &&str;
            scope 3 {
                debug left_val => _21;
                debug right_val => _22;
                let _25: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _25;
                }
            }
        }
        scope 5 {
            debug exe => _29;
            let _34: &std::path::Path;
            scope 6 {
                debug cwd => _34;
                let _50: std::path::PathBuf;
                let mut _92: &[&str; 2];
                scope 7 {
                    debug foo => _50;
                    let _52: std::path::PathBuf;
                    scope 8 {
                        debug bar => _52;
                        let _68: std::path::PathBuf;
                        scope 9 {
                            debug relative_exe => _68;
                            let _78: std::process::ExitStatus;
                            scope 10 {
                                debug status => _78;
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _2 = current_exe() -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Result::<PathBuf, std::io::Error>::unwrap(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = args() -> [return: bb3, unwind: bb67];
    }

    bb3: {
        _8 = <Args as Iterator>::skip(move _9, const 1_usize) -> [return: bb4, unwind: bb67];
    }

    bb4: {
        _7 = &mut _8;
        _6 = <Skip<Args> as Iterator>::next(move _7) -> [return: bb5, unwind: bb66];
    }

    bb5: {
        _5 = &_6;
        _4 = Option::<String>::as_deref(move _5) -> [return: bb6, unwind: bb65];
    }

    bb6: {
        _11 = discriminant(_4);
        switchInt(move _11) -> [1: bb8, otherwise: bb7];
    }

    bb7: {
        _3 = const false;
        goto -> bb10;
    }

    bb8: {
        _10 = <str as PartialEq>::eq(((_4 as Some).0: &str), const "current-dir") -> [return: bb9, unwind: bb65];
    }

    bb9: {
        StorageLive(_93);
        _93 = move _10;
        _3 = _93;
        StorageDead(_93);
        goto -> bb10;
    }

    bb10: {
        drop(_6) -> [return: bb11, unwind: bb66];
    }

    bb11: {
        drop(_8) -> [return: bb12, unwind: bb67];
    }

    bb12: {
        switchInt(move _3) -> [0: bb22, otherwise: bb13];
    }

    bb13: {
        _13 = current_dir() -> [return: bb14, unwind: bb67];
    }

    bb14: {
        _12 = Result::<PathBuf, std::io::Error>::unwrap(move _13) -> [return: bb15, unwind: bb67];
    }

    bb15: {
        _20 = &_12;
        _19 = <PathBuf as Deref>::deref(move _20) -> [return: bb16, unwind: bb64];
    }

    bb16: {
        _18 = _19;
        _17 = Path::file_name(move _18) -> [return: bb17, unwind: bb64];
    }

    bb17: {
        _16 = Option::<&OsStr>::unwrap(move _17) -> [return: bb18, unwind: bb64];
    }

    bb18: {
        _15 = &_16;
        _91 = const _;
        _14 = (move _15, _91);
        _21 = (_14.0: &&std::ffi::OsStr);
        _22 = (_14.1: &&str);
        _24 = <&OsStr as PartialEq<&str>>::eq(_21, _22) -> [return: bb19, unwind: bb64];
    }

    bb19: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<&OsStr, &str>(move _25, _21, _22, move _27) -> bb64;
    }

    bb21: {
        _28 = exit(const 0_i32) -> bb64;
    }

    bb22: {
        _33 = &_1;
        _32 = <PathBuf as Deref>::deref(move _33) -> [return: bb23, unwind: bb67];
    }

    bb23: {
        _31 = _32;
        _30 = Path::file_name(move _31) -> [return: bb24, unwind: bb67];
    }

    bb24: {
        _29 = Option::<&OsStr>::unwrap(move _30) -> [return: bb25, unwind: bb67];
    }

    bb25: {
        _38 = &_1;
        _37 = <PathBuf as Deref>::deref(move _38) -> [return: bb26, unwind: bb67];
    }

    bb26: {
        _36 = _37;
        _35 = Path::parent(move _36) -> [return: bb27, unwind: bb67];
    }

    bb27: {
        _34 = Option::<&Path>::unwrap(move _35) -> [return: bb28, unwind: bb67];
    }

    bb28: {
        _92 = const _;
        _41 = _92 as &[&str] (Pointer(Unsize));
        _46 = &_34;
        _45 = core::fmt::rt::Argument::<'_>::new_debug::<&Path>(_46) -> [return: bb29, unwind: bb67];
    }

    bb29: {
        _44 = [move _45];
        _43 = &_44;
        _42 = _43 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _40 = Arguments::<'_>::new_v1(move _41, move _42) -> [return: bb30, unwind: bb67];
    }

    bb30: {
        _39 = _eprint(move _40) -> [return: bb31, unwind: bb67];
    }

    bb31: {
        _49 = &_34;
        _48 = set_current_dir::<&&Path>(move _49) -> [return: bb32, unwind: bb67];
    }

    bb32: {
        _47 = Result::<(), std::io::Error>::unwrap(move _48) -> [return: bb33, unwind: bb67];
    }

    bb33: {
        _51 = _34;
        _50 = Path::join::<&str>(move _51, const "foo") -> [return: bb34, unwind: bb67];
    }

    bb34: {
        _53 = _34;
        _52 = Path::join::<&str>(move _53, const "bar") -> [return: bb35, unwind: bb63];
    }

    bb35: {
        _56 = &_50;
        _55 = create_dir_all::<&PathBuf>(move _56) -> [return: bb36, unwind: bb62];
    }

    bb36: {
        _54 = Result::<(), std::io::Error>::unwrap(move _55) -> [return: bb37, unwind: bb62];
    }

    bb37: {
        _59 = &_52;
        _58 = create_dir_all::<&PathBuf>(move _59) -> [return: bb38, unwind: bb62];
    }

    bb38: {
        _57 = Result::<(), std::io::Error>::unwrap(move _58) -> [return: bb39, unwind: bb62];
    }

    bb39: {
        _62 = &_1;
        _66 = &_50;
        _65 = <PathBuf as Deref>::deref(move _66) -> [return: bb40, unwind: bb62];
    }

    bb40: {
        _64 = _65;
        _67 = _29;
        _63 = Path::join::<&OsStr>(move _64, move _67) -> [return: bb41, unwind: bb62];
    }

    bb41: {
        _61 = std::fs::copy::<&PathBuf, PathBuf>(move _62, move _63) -> [return: bb42, unwind: bb62];
    }

    bb42: {
        _60 = Result::<u64, std::io::Error>::unwrap(move _61) -> [return: bb43, unwind: bb62];
    }

    bb43: {
        _69 = const false;
        switchInt(move _69) -> [0: bb46, otherwise: bb44];
    }

    bb44: {
        _72 = const "foo";
        _71 = Path::new::<str>(_72) -> [return: bb45, unwind: bb62];
    }

    bb45: {
        _70 = _71;
        _73 = _29;
        _68 = Path::join::<&OsStr>(move _70, move _73) -> [return: bb69, unwind: bb62];
    }

    bb46: {
        _76 = const "../foo";
        _75 = Path::new::<str>(_76) -> [return: bb47, unwind: bb62];
    }

    bb47: {
        _74 = _75;
        _77 = _29;
        _68 = Path::join::<&OsStr>(move _74, move _77) -> [return: bb70, unwind: bb62];
    }

    bb48: {
        _86 = move _68;
        _85 = Command::new::<PathBuf>(move _86) -> [return: bb49, unwind: bb62];
    }

    bb49: {
        _84 = &mut _85;
        _83 = Command::arg::<&str>(move _84, const "current-dir") -> [return: bb50, unwind: bb61];
    }

    bb50: {
        _82 = _83;
        _81 = Command::current_dir::<&str>(move _82, const "bar") -> [return: bb51, unwind: bb61];
    }

    bb51: {
        _80 = _81;
        _79 = Command::status(move _80) -> [return: bb52, unwind: bb61];
    }

    bb52: {
        _78 = Result::<ExitStatus, std::io::Error>::unwrap(move _79) -> [return: bb53, unwind: bb61];
    }

    bb53: {
        drop(_85) -> [return: bb54, unwind: bb62];
    }

    bb54: {
        _89 = &_78;
        _88 = ExitStatus::success(move _89) -> [return: bb55, unwind: bb62];
    }

    bb55: {
        _87 = Not(move _88);
        switchInt(move _87) -> [0: bb57, otherwise: bb56];
    }

    bb56: {
        _90 = core::panicking::panic(const "assertion failed: status.success()") -> bb62;
    }

    bb57: {
        drop(_52) -> [return: bb58, unwind: bb63];
    }

    bb58: {
        drop(_50) -> [return: bb59, unwind: bb67];
    }

    bb59: {
        drop(_1) -> [return: bb60, unwind continue];
    }

    bb60: {
        return;
    }

    bb61 (cleanup): {
        drop(_85) -> [return: bb62, unwind terminate];
    }

    bb62 (cleanup): {
        drop(_52) -> [return: bb63, unwind terminate];
    }

    bb63 (cleanup): {
        drop(_50) -> [return: bb67, unwind terminate];
    }

    bb64 (cleanup): {
        drop(_12) -> [return: bb67, unwind terminate];
    }

    bb65 (cleanup): {
        drop(_6) -> [return: bb66, unwind terminate];
    }

    bb66 (cleanup): {
        drop(_8) -> [return: bb67, unwind terminate];
    }

    bb67 (cleanup): {
        drop(_1) -> [return: bb68, unwind terminate];
    }

    bb68 (cleanup): {
        resume;
    }

    bb69: {
        goto -> bb48;
    }

    bb70: {
        goto -> bb48;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "bar";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "cwd=", const "\n"];
        _0 = &_1;
        return;
    }
}
