// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/command/command-exec.rs:16:11: 16:11
    let mut _1: std::env::Args;          // in scope 0 at ui/command/command-exec.rs:17:9: 17:17
    let mut _3: std::option::Option<std::string::String>; // in scope 0 at ui/command/command-exec.rs:18:14: 18:25
    let mut _4: &mut std::env::Args;     // in scope 0 at ui/command/command-exec.rs:18:14: 18:25
    let mut _5: std::option::Option<std::string::String>; // in scope 0 at ui/command/command-exec.rs:20:24: 20:35
    let mut _6: &mut std::env::Args;     // in scope 0 at ui/command/command-exec.rs:20:24: 20:35
    let mut _7: isize;                   // in scope 0 at ui/command/command-exec.rs:20:12: 20:21
    let mut _9: &str;                    // in scope 0 at ui/command/command-exec.rs:21:15: 21:23
    let _10: &str;                       // in scope 0 at ui/command/command-exec.rs:21:16: 21:23
    let mut _11: &std::string::String;   // in scope 0 at ui/command/command-exec.rs:21:16: 21:19
    let mut _12: std::ops::RangeFull;    // in scope 0 at ui/command/command-exec.rs:21:20: 21:22
    let mut _13: bool;                   // in scope 0 at ui/command/command-exec.rs:22:13: 22:20
    let mut _14: bool;                   // in scope 0 at ui/command/command-exec.rs:24:13: 24:25
    let mut _15: bool;                   // in scope 0 at ui/command/command-exec.rs:29:13: 29:25
    let mut _16: bool;                   // in scope 0 at ui/command/command-exec.rs:34:13: 34:25
    let mut _17: bool;                   // in scope 0 at ui/command/command-exec.rs:39:13: 39:25
    let mut _18: bool;                   // in scope 0 at ui/command/command-exec.rs:44:13: 44:25
    let mut _19: bool;                   // in scope 0 at ui/command/command-exec.rs:51:13: 51:25
    let mut _20: bool;                   // in scope 0 at ui/command/command-exec.rs:56:13: 56:25
    let _21: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _22: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _23: &[&str];                // in scope 0 at ui/command/command-exec.rs:22:33: 22:41
    let mut _24: &[&str; 1];             // in scope 0 at ui/command/command-exec.rs:22:33: 22:41
    let _25: &[&str; 1];                 // in scope 0 at ui/command/command-exec.rs:22:33: 22:41
    let mut _26: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _27: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _28: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _30: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:25:27: 25:64
    let mut _31: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:25:27: 25:57
    let mut _32: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:25:27: 25:57
    let mut _33: std::process::Command;  // in scope 0 at ui/command/command-exec.rs:25:27: 25:44
    let mut _34: &std::string::String;   // in scope 0 at ui/command/command-exec.rs:25:40: 25:43
    let mut _35: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _36: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _37: &[&str];                // in scope 0 at ui/command/command-exec.rs:26:24: 26:45
    let mut _38: &[&str; 1];             // in scope 0 at ui/command/command-exec.rs:26:24: 26:45
    let _39: &[&str; 1];                 // in scope 0 at ui/command/command-exec.rs:26:24: 26:45
    let mut _40: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _41: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _42: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _43: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _44: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/command/command-exec.rs:26:47: 26:50
    let mut _45: &std::io::Error;        // in scope 0 at ui/command/command-exec.rs:26:47: 26:50
    let _46: &std::io::Error;            // in scope 0 at ui/command/command-exec.rs:26:47: 26:50
    let _47: std::io::Error;             // in scope 0 at ui/command/command-exec.rs:30:17: 30:56
    let mut _48: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:30:17: 30:56
    let mut _49: std::process::Command;  // in scope 0 at ui/command/command-exec.rs:30:17: 30:49
    let _50: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _51: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _52: &[&str];                // in scope 0 at ui/command/command-exec.rs:31:26: 31:34
    let mut _53: &[&str; 1];             // in scope 0 at ui/command/command-exec.rs:31:26: 31:34
    let _54: &[&str; 1];                 // in scope 0 at ui/command/command-exec.rs:31:26: 31:34
    let mut _55: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _56: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _57: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _58: std::io::Error;             // in scope 0 at ui/command/command-exec.rs:35:17: 35:54
    let mut _59: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:35:17: 35:54
    let mut _60: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:35:17: 35:47
    let mut _61: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:35:17: 35:47
    let mut _62: std::process::Command;  // in scope 0 at ui/command/command-exec.rs:35:17: 35:34
    let mut _63: &std::string::String;   // in scope 0 at ui/command/command-exec.rs:35:30: 35:33
    let _64: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _65: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _66: &[&str];                // in scope 0 at ui/command/command-exec.rs:36:26: 36:34
    let mut _67: &[&str; 1];             // in scope 0 at ui/command/command-exec.rs:36:26: 36:34
    let _68: &[&str; 1];                 // in scope 0 at ui/command/command-exec.rs:36:26: 36:34
    let mut _69: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _70: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _71: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _72: std::io::Error;             // in scope 0 at ui/command/command-exec.rs:40:17: 40:73
    let mut _73: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:40:17: 40:73
    let mut _74: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:40:17: 40:66
    let mut _75: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:40:17: 40:66
    let mut _76: std::process::Command;  // in scope 0 at ui/command/command-exec.rs:40:17: 40:34
    let mut _77: &std::string::String;   // in scope 0 at ui/command/command-exec.rs:40:30: 40:33
    let _78: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _79: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _80: &[&str];                // in scope 0 at ui/command/command-exec.rs:41:26: 41:34
    let mut _81: &[&str; 1];             // in scope 0 at ui/command/command-exec.rs:41:26: 41:34
    let _82: &[&str; 1];                 // in scope 0 at ui/command/command-exec.rs:41:26: 41:34
    let mut _83: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _84: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _85: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _86: ();                         // in scope 0 at ui/command/command-exec.rs:45:17: 45:48
    let _87: std::io::Error;             // in scope 0 at ui/command/command-exec.rs:46:17: 46:91
    let mut _88: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:46:17: 46:91
    let mut _89: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:46:17: 46:84
    let mut _90: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:46:17: 46:84
    let mut _91: std::process::Command;  // in scope 0 at ui/command/command-exec.rs:46:17: 46:61
    let mut _92: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _93: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _94: std::string::String;        // in scope 0 at ui/command/command-exec.rs:47:28: 47:57
    let mut _95: std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at ui/command/command-exec.rs:47:28: 47:48
    let mut _96: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _99: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _100: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _101: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _102: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _104: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _105: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _106: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _107: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _108: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _109: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _110: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _111: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _112: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _113: &[&str];               // in scope 0 at ui/command/command-exec.rs:48:26: 48:34
    let mut _114: &[&str; 1];            // in scope 0 at ui/command/command-exec.rs:48:26: 48:34
    let _115: &[&str; 1];                // in scope 0 at ui/command/command-exec.rs:48:26: 48:34
    let mut _116: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _117: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _118: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _120: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:52:27: 52:80
    let mut _121: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:52:27: 52:73
    let mut _122: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:52:27: 52:73
    let mut _123: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:52:27: 52:61
    let mut _124: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:52:27: 52:61
    let mut _125: std::process::Command; // in scope 0 at ui/command/command-exec.rs:52:27: 52:47
    let mut _126: !;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _127: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _128: &[&str];               // in scope 0 at ui/command/command-exec.rs:53:24: 53:45
    let mut _129: &[&str; 1];            // in scope 0 at ui/command/command-exec.rs:53:24: 53:45
    let _130: &[&str; 1];                // in scope 0 at ui/command/command-exec.rs:53:24: 53:45
    let mut _131: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _132: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _133: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _134: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _135: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/command/command-exec.rs:53:47: 53:50
    let mut _136: &std::io::Error;       // in scope 0 at ui/command/command-exec.rs:53:47: 53:50
    let _137: &std::io::Error;           // in scope 0 at ui/command/command-exec.rs:53:47: 53:50
    let mut _139: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:57:27: 57:87
    let mut _140: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:57:27: 57:80
    let mut _141: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:57:27: 57:80
    let mut _142: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:57:27: 57:61
    let mut _143: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:57:27: 57:61
    let mut _144: std::process::Command; // in scope 0 at ui/command/command-exec.rs:57:27: 57:47
    let mut _145: !;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _146: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _147: &[&str];               // in scope 0 at ui/command/command-exec.rs:58:24: 58:45
    let mut _148: &[&str; 1];            // in scope 0 at ui/command/command-exec.rs:58:24: 58:45
    let _149: &[&str; 1];                // in scope 0 at ui/command/command-exec.rs:58:24: 58:45
    let mut _150: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _151: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _152: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _153: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _154: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/command/command-exec.rs:58:47: 58:50
    let mut _155: &std::io::Error;       // in scope 0 at ui/command/command-exec.rs:58:47: 58:50
    let _156: &std::io::Error;           // in scope 0 at ui/command/command-exec.rs:58:47: 58:50
    let mut _157: !;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _158: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _159: &[&str];               // in scope 0 at ui/command/command-exec.rs:61:25: 61:47
    let mut _160: &[&str; 1];            // in scope 0 at ui/command/command-exec.rs:61:25: 61:47
    let _161: &[&str; 1];                // in scope 0 at ui/command/command-exec.rs:61:25: 61:47
    let mut _162: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _163: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _164: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _165: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _166: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/command/command-exec.rs:61:49: 61:52
    let mut _167: &std::string::String;  // in scope 0 at ui/command/command-exec.rs:61:49: 61:52
    let _168: &std::string::String;      // in scope 0 at ui/command/command-exec.rs:61:49: 61:52
    let mut _170: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-exec.rs:66:18: 66:62
    let mut _171: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:66:18: 66:62
    let mut _172: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:66:18: 66:53
    let mut _173: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:66:18: 66:53
    let mut _174: std::process::Command; // in scope 0 at ui/command/command-exec.rs:66:18: 66:35
    let mut _175: &std::string::String;  // in scope 0 at ui/command/command-exec.rs:66:31: 66:34
    let mut _176: bool;                  // in scope 0 at ui/command/command-exec.rs:67:5: 67:37
    let mut _177: bool;                  // in scope 0 at ui/command/command-exec.rs:67:13: 67:36
    let mut _178: &std::process::ExitStatus; // in scope 0 at ui/command/command-exec.rs:67:13: 67:36
    let mut _179: !;                     // in scope 0 at ui/command/command-exec.rs:67:5: 67:37
    let mut _180: bool;                  // in scope 0 at ui/command/command-exec.rs:68:5: 68:38
    let mut _181: bool;                  // in scope 0 at ui/command/command-exec.rs:68:13: 68:37
    let mut _182: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-exec.rs:68:13: 68:37
    let mut _183: !;                     // in scope 0 at ui/command/command-exec.rs:68:5: 68:38
    let mut _184: (&std::vec::Vec<u8>, &&[u8; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _185: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _186: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _189: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _190: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _191: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _192: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _194: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _195: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _196: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _197: &std::vec::Vec<u8>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _198: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _199: &&[u8; 7];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _200: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _202: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-exec.rs:71:18: 71:62
    let mut _203: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:71:18: 71:62
    let mut _204: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:71:18: 71:53
    let mut _205: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:71:18: 71:53
    let mut _206: std::process::Command; // in scope 0 at ui/command/command-exec.rs:71:18: 71:35
    let mut _207: &std::string::String;  // in scope 0 at ui/command/command-exec.rs:71:31: 71:34
    let mut _208: bool;                  // in scope 0 at ui/command/command-exec.rs:72:5: 72:37
    let mut _209: bool;                  // in scope 0 at ui/command/command-exec.rs:72:13: 72:36
    let mut _210: &std::process::ExitStatus; // in scope 0 at ui/command/command-exec.rs:72:13: 72:36
    let mut _211: !;                     // in scope 0 at ui/command/command-exec.rs:72:5: 72:37
    let mut _212: bool;                  // in scope 0 at ui/command/command-exec.rs:73:5: 73:38
    let mut _213: bool;                  // in scope 0 at ui/command/command-exec.rs:73:13: 73:37
    let mut _214: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-exec.rs:73:13: 73:37
    let mut _215: !;                     // in scope 0 at ui/command/command-exec.rs:73:5: 73:38
    let mut _216: (&std::vec::Vec<u8>, &&[u8; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _217: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _218: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _221: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _222: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _223: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _224: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _226: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _227: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _228: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _229: &std::vec::Vec<u8>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _230: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _231: &&[u8; 7];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _232: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _234: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-exec.rs:76:18: 76:62
    let mut _235: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:76:18: 76:62
    let mut _236: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:76:18: 76:53
    let mut _237: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:76:18: 76:53
    let mut _238: std::process::Command; // in scope 0 at ui/command/command-exec.rs:76:18: 76:35
    let mut _239: &std::string::String;  // in scope 0 at ui/command/command-exec.rs:76:31: 76:34
    let mut _240: bool;                  // in scope 0 at ui/command/command-exec.rs:77:5: 77:37
    let mut _241: bool;                  // in scope 0 at ui/command/command-exec.rs:77:13: 77:36
    let mut _242: &std::process::ExitStatus; // in scope 0 at ui/command/command-exec.rs:77:13: 77:36
    let mut _243: !;                     // in scope 0 at ui/command/command-exec.rs:77:5: 77:37
    let mut _244: bool;                  // in scope 0 at ui/command/command-exec.rs:78:5: 78:38
    let mut _245: bool;                  // in scope 0 at ui/command/command-exec.rs:78:13: 78:37
    let mut _246: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-exec.rs:78:13: 78:37
    let mut _247: !;                     // in scope 0 at ui/command/command-exec.rs:78:5: 78:38
    let mut _248: (&std::vec::Vec<u8>, &&[u8; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _249: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _250: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _253: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _254: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _255: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _256: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _258: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _259: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _260: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _261: &std::vec::Vec<u8>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _262: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _263: &&[u8; 7];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _264: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _266: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-exec.rs:81:18: 81:62
    let mut _267: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:81:18: 81:62
    let mut _268: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:81:18: 81:53
    let mut _269: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:81:18: 81:53
    let mut _270: std::process::Command; // in scope 0 at ui/command/command-exec.rs:81:18: 81:35
    let mut _271: &std::string::String;  // in scope 0 at ui/command/command-exec.rs:81:31: 81:34
    let mut _272: bool;                  // in scope 0 at ui/command/command-exec.rs:82:5: 82:37
    let mut _273: bool;                  // in scope 0 at ui/command/command-exec.rs:82:13: 82:36
    let mut _274: &std::process::ExitStatus; // in scope 0 at ui/command/command-exec.rs:82:13: 82:36
    let mut _275: !;                     // in scope 0 at ui/command/command-exec.rs:82:5: 82:37
    let mut _276: bool;                  // in scope 0 at ui/command/command-exec.rs:83:5: 83:38
    let mut _277: bool;                  // in scope 0 at ui/command/command-exec.rs:83:13: 83:37
    let mut _278: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-exec.rs:83:13: 83:37
    let mut _279: !;                     // in scope 0 at ui/command/command-exec.rs:83:5: 83:38
    let mut _280: (&std::vec::Vec<u8>, &&[u8; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _281: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _282: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _285: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _286: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _287: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _288: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _290: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _291: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _292: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _293: &std::vec::Vec<u8>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _294: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _295: &&[u8; 7];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _296: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _298: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-exec.rs:86:18: 86:62
    let mut _299: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:86:18: 86:62
    let mut _300: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:86:18: 86:53
    let mut _301: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:86:18: 86:53
    let mut _302: std::process::Command; // in scope 0 at ui/command/command-exec.rs:86:18: 86:35
    let mut _303: &std::string::String;  // in scope 0 at ui/command/command-exec.rs:86:31: 86:34
    let mut _304: bool;                  // in scope 0 at ui/command/command-exec.rs:87:5: 87:37
    let mut _305: bool;                  // in scope 0 at ui/command/command-exec.rs:87:13: 87:36
    let mut _306: &std::process::ExitStatus; // in scope 0 at ui/command/command-exec.rs:87:13: 87:36
    let mut _307: !;                     // in scope 0 at ui/command/command-exec.rs:87:5: 87:37
    let mut _308: bool;                  // in scope 0 at ui/command/command-exec.rs:88:5: 88:38
    let mut _309: bool;                  // in scope 0 at ui/command/command-exec.rs:88:13: 88:37
    let mut _310: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-exec.rs:88:13: 88:37
    let mut _311: !;                     // in scope 0 at ui/command/command-exec.rs:88:5: 88:38
    let mut _312: (&std::vec::Vec<u8>, &&[u8; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _313: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _314: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _317: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _318: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _319: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _320: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _322: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _323: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _324: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _325: &std::vec::Vec<u8>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _326: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _327: &&[u8; 7];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _328: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _330: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-exec.rs:92:22: 92:66
    let mut _331: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:92:22: 92:66
    let mut _332: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:92:22: 92:57
    let mut _333: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:92:22: 92:57
    let mut _334: std::process::Command; // in scope 0 at ui/command/command-exec.rs:92:22: 92:39
    let mut _335: &std::string::String;  // in scope 0 at ui/command/command-exec.rs:92:35: 92:38
    let _336: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _337: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _338: &[&str];               // in scope 0 at ui/command/command-exec.rs:93:18: 93:24
    let mut _339: &[&str; 2];            // in scope 0 at ui/command/command-exec.rs:93:18: 93:24
    let _340: &[&str; 2];                // in scope 0 at ui/command/command-exec.rs:93:18: 93:24
    let mut _341: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _342: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _343: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _344: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _345: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/command/command-exec.rs:93:26: 93:32
    let mut _346: &std::process::Output; // in scope 0 at ui/command/command-exec.rs:93:26: 93:32
    let _347: &std::process::Output;     // in scope 0 at ui/command/command-exec.rs:93:26: 93:32
    let mut _348: bool;                  // in scope 0 at ui/command/command-exec.rs:94:9: 94:41
    let mut _349: bool;                  // in scope 0 at ui/command/command-exec.rs:94:17: 94:40
    let mut _350: &std::process::ExitStatus; // in scope 0 at ui/command/command-exec.rs:94:17: 94:40
    let mut _351: !;                     // in scope 0 at ui/command/command-exec.rs:94:9: 94:41
    let mut _352: bool;                  // in scope 0 at ui/command/command-exec.rs:95:9: 95:42
    let mut _353: bool;                  // in scope 0 at ui/command/command-exec.rs:95:17: 95:41
    let mut _354: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-exec.rs:95:17: 95:41
    let mut _355: !;                     // in scope 0 at ui/command/command-exec.rs:95:9: 95:42
    let mut _356: (&std::vec::Vec<u8>, &&[u8; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _357: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _358: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _361: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _362: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _363: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _364: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _366: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _367: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _368: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _369: &std::vec::Vec<u8>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _370: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _371: &&[u8; 7];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _372: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _374: std::result::Result<std::process::Output, std::io::Error>; // in scope 0 at ui/command/command-exec.rs:98:22: 98:66
    let mut _375: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:98:22: 98:66
    let mut _376: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:98:22: 98:57
    let mut _377: &mut std::process::Command; // in scope 0 at ui/command/command-exec.rs:98:22: 98:57
    let mut _378: std::process::Command; // in scope 0 at ui/command/command-exec.rs:98:22: 98:39
    let mut _379: &std::string::String;  // in scope 0 at ui/command/command-exec.rs:98:35: 98:38
    let _380: ();                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _381: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _382: &[&str];               // in scope 0 at ui/command/command-exec.rs:99:18: 99:24
    let mut _383: &[&str; 2];            // in scope 0 at ui/command/command-exec.rs:99:18: 99:24
    let _384: &[&str; 2];                // in scope 0 at ui/command/command-exec.rs:99:18: 99:24
    let mut _385: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _386: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _387: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _388: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _389: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/command/command-exec.rs:99:26: 99:32
    let mut _390: &std::process::Output; // in scope 0 at ui/command/command-exec.rs:99:26: 99:32
    let _391: &std::process::Output;     // in scope 0 at ui/command/command-exec.rs:99:26: 99:32
    let mut _392: bool;                  // in scope 0 at ui/command/command-exec.rs:100:9: 100:41
    let mut _393: bool;                  // in scope 0 at ui/command/command-exec.rs:100:17: 100:40
    let mut _394: &std::process::ExitStatus; // in scope 0 at ui/command/command-exec.rs:100:17: 100:40
    let mut _395: !;                     // in scope 0 at ui/command/command-exec.rs:100:9: 100:41
    let mut _396: bool;                  // in scope 0 at ui/command/command-exec.rs:101:9: 101:42
    let mut _397: bool;                  // in scope 0 at ui/command/command-exec.rs:101:17: 101:41
    let mut _398: &std::vec::Vec<u8>;    // in scope 0 at ui/command/command-exec.rs:101:17: 101:41
    let mut _399: !;                     // in scope 0 at ui/command/command-exec.rs:101:9: 101:42
    let mut _400: (&std::vec::Vec<u8>, &&[u8; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _401: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _402: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _405: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _406: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _407: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _408: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _410: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _411: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _412: &std::vec::Vec<u8>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _413: &std::vec::Vec<u8>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _414: &&[u8; 7];             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _415: &&[u8; 7];                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _416: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug args => _1;                // in scope 1 at ui/command/command-exec.rs:17:9: 17:17
        let _2: std::string::String;     // in scope 1 at ui/command/command-exec.rs:18:9: 18:11
        scope 2 {
            debug me => _2;              // in scope 2 at ui/command/command-exec.rs:18:9: 18:11
            let _169: std::process::Output; // in scope 2 at ui/command/command-exec.rs:66:9: 66:15
            scope 3 {
                debug arg => _8;         // in scope 3 at ui/command/command-exec.rs:20:17: 20:20
                let _8: std::string::String; // in scope 3 at ui/command/command-exec.rs:20:17: 20:20
                let _29: std::io::Error; // in scope 3 at ui/command/command-exec.rs:25:21: 25:24
                let _97: &std::string::String; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _98: &&str;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _119: std::io::Error; // in scope 3 at ui/command/command-exec.rs:52:21: 52:24
                let _138: std::io::Error; // in scope 3 at ui/command/command-exec.rs:57:21: 57:24
                let mut _417: &[&str; 1]; // in scope 3 at ui/command/command-exec.rs:61:25: 61:47
                let mut _420: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                let mut _421: &[&str; 1]; // in scope 3 at ui/command/command-exec.rs:48:26: 48:34
                let mut _422: &&str;     // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                let mut _423: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                let mut _424: &[&str; 1]; // in scope 3 at ui/command/command-exec.rs:41:26: 41:34
                let mut _425: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                let mut _426: &[&str; 1]; // in scope 3 at ui/command/command-exec.rs:36:26: 36:34
                let mut _427: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                let mut _428: &[&str; 1]; // in scope 3 at ui/command/command-exec.rs:31:26: 31:34
                let mut _430: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                let mut _431: &[&str; 1]; // in scope 3 at ui/command/command-exec.rs:22:33: 22:41
                scope 4 {
                    debug err => _29;    // in scope 4 at ui/command/command-exec.rs:25:21: 25:24
                    let mut _429: &[&str; 1]; // in scope 4 at ui/command/command-exec.rs:26:24: 26:45
                }
                scope 5 {
                    debug left_val => _97; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _98; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _103: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 6 {
                        debug kind => _103; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 7 {
                    debug err => _119;   // in scope 7 at ui/command/command-exec.rs:52:21: 52:24
                    let mut _419: &[&str; 1]; // in scope 7 at ui/command/command-exec.rs:53:24: 53:45
                }
                scope 8 {
                    debug err => _138;   // in scope 8 at ui/command/command-exec.rs:57:21: 57:24
                    let mut _418: &[&str; 1]; // in scope 8 at ui/command/command-exec.rs:58:24: 58:45
                }
            }
            scope 9 {
                debug output => _169;    // in scope 9 at ui/command/command-exec.rs:66:9: 66:15
                let _187: &std::vec::Vec<u8>; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _188: &&[u8; 7];     // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _201: std::process::Output; // in scope 9 at ui/command/command-exec.rs:71:9: 71:15
                let mut _440: &&[u8; 7]; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 10 {
                    debug left_val => _187; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _188; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _193: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 11 {
                        debug kind => _193; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 12 {
                    debug output => _201; // in scope 12 at ui/command/command-exec.rs:71:9: 71:15
                    let _219: &std::vec::Vec<u8>; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _220: &&[u8; 7]; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _233: std::process::Output; // in scope 12 at ui/command/command-exec.rs:76:9: 76:15
                    let mut _439: &&[u8; 7]; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 13 {
                        debug left_val => _219; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _220; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _225: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 14 {
                            debug kind => _225; // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 15 {
                        debug output => _233; // in scope 15 at ui/command/command-exec.rs:76:9: 76:15
                        let _251: &std::vec::Vec<u8>; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        let _252: &&[u8; 7]; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _265: std::process::Output; // in scope 15 at ui/command/command-exec.rs:81:9: 81:15
                        let mut _438: &&[u8; 7]; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                        scope 16 {
                            debug left_val => _251; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            debug right_val => _252; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _257: core::panicking::AssertKind; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            scope 17 {
                                debug kind => _257; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                            }
                        }
                        scope 18 {
                            debug output => _265; // in scope 18 at ui/command/command-exec.rs:81:9: 81:15
                            let _283: &std::vec::Vec<u8>; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _284: &&[u8; 7]; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            let _297: std::process::Output; // in scope 18 at ui/command/command-exec.rs:86:9: 86:15
                            let mut _437: &&[u8; 7]; // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                            scope 19 {
                                debug left_val => _283; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _284; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _289: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 20 {
                                    debug kind => _289; // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                            scope 21 {
                                debug output => _297; // in scope 21 at ui/command/command-exec.rs:86:9: 86:15
                                let _315: &std::vec::Vec<u8>; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                let _316: &&[u8; 7]; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _329: std::process::Output; // in scope 21 at ui/command/command-exec.rs:92:13: 92:19
                                let mut _436: &&[u8; 7]; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                scope 22 {
                                    debug left_val => _315; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    debug right_val => _316; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _321: core::panicking::AssertKind; // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    scope 23 {
                                        debug kind => _321; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                    }
                                }
                                scope 24 {
                                    debug output => _329; // in scope 24 at ui/command/command-exec.rs:92:13: 92:19
                                    let _359: &std::vec::Vec<u8>; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                    let _360: &&[u8; 7]; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                    let _373: std::process::Output; // in scope 24 at ui/command/command-exec.rs:98:13: 98:19
                                    let mut _434: &&[u8; 7]; // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                    let mut _435: &[&str; 2]; // in scope 24 at ui/command/command-exec.rs:93:18: 93:24
                                    scope 25 {
                                        debug left_val => _359; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        debug right_val => _360; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let _365: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        scope 26 {
                                            debug kind => _365; // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                        }
                                    }
                                    scope 27 {
                                        debug output => _373; // in scope 27 at ui/command/command-exec.rs:98:13: 98:19
                                        let _403: &std::vec::Vec<u8>; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                        let _404: &&[u8; 7]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                        let mut _432: &&[u8; 7]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                        let mut _433: &[&str; 2]; // in scope 27 at ui/command/command-exec.rs:99:18: 99:24
                                        scope 28 {
                                            debug left_val => _403; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                            debug right_val => _404; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                            let _409: core::panicking::AssertKind; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            scope 29 {
                                                debug kind => _409; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = args() -> bb1;              // scope 0 at ui/command/command-exec.rs:17:20: 17:31
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:17:20: 17:29
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &mut _1;                    // scope 1 at ui/command/command-exec.rs:18:14: 18:25
        _3 = <Args as Iterator>::next(move _4) -> [return: bb2, unwind: bb229]; // scope 1 at ui/command/command-exec.rs:18:14: 18:25
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:18:19: 18:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut Args) -> Option<<Args as Iterator>::Item> {<Args as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = Option::<String>::unwrap(move _3) -> [return: bb3, unwind: bb229]; // scope 1 at ui/command/command-exec.rs:18:14: 18:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:18:26: 18:32
                                         // + literal: Const { ty: fn(Option<String>) -> String {Option::<String>::unwrap}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &mut _1;                    // scope 3 at ui/command/command-exec.rs:20:24: 20:35
        _5 = <Args as Iterator>::next(move _6) -> [return: bb4, unwind: bb228]; // scope 3 at ui/command/command-exec.rs:20:24: 20:35
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:20:29: 20:33
                                         // + literal: Const { ty: for<'a> fn(&'a mut Args) -> Option<<Args as Iterator>::Item> {<Args as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = discriminant(_5);           // scope 3 at ui/command/command-exec.rs:20:12: 20:21
        switchInt(move _7) -> [1: bb5, otherwise: bb85]; // scope 3 at ui/command/command-exec.rs:20:12: 20:21
    }

    bb5: {
        _8 = move ((_5 as Some).0: std::string::String); // scope 3 at ui/command/command-exec.rs:20:17: 20:20
        _11 = &_8;                       // scope 3 at ui/command/command-exec.rs:21:16: 21:19
        _10 = <String as Index<RangeFull>>::index(move _11, move _12) -> [return: bb6, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:21:16: 21:23
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:21:16: 21:23
                                         // + literal: Const { ty: for<'a> fn(&'a String, RangeFull) -> &'a <String as Index<RangeFull>>::Output {<String as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb6: {
        _9 = _10;                        // scope 3 at ui/command/command-exec.rs:21:15: 21:23
        _13 = <str as PartialEq>::eq(_9, const "test1") -> [return: bb7, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:22:13: 22:20
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:22:13: 22:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:22:13: 22:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _13) -> [0: bb8, otherwise: bb23]; // scope 3 at ui/command/command-exec.rs:22:13: 22:20
    }

    bb8: {
        _14 = <str as PartialEq>::eq(_9, const "exec-test1") -> [return: bb9, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:24:13: 24:25
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:24:13: 24:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:24:13: 24:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _14) -> [0: bb10, otherwise: bb25]; // scope 3 at ui/command/command-exec.rs:24:13: 24:25
    }

    bb10: {
        _15 = <str as PartialEq>::eq(_9, const "exec-test2") -> [return: bb11, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:29:13: 29:25
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:29:13: 29:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:29:13: 29:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        switchInt(move _15) -> [0: bb12, otherwise: bb32]; // scope 3 at ui/command/command-exec.rs:29:13: 29:25
    }

    bb12: {
        _16 = <str as PartialEq>::eq(_9, const "exec-test3") -> [return: bb13, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:34:13: 34:25
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:34:13: 34:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:34:13: 34:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        switchInt(move _16) -> [0: bb14, otherwise: bb38]; // scope 3 at ui/command/command-exec.rs:34:13: 34:25
    }

    bb14: {
        _17 = <str as PartialEq>::eq(_9, const "exec-test4") -> [return: bb15, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:39:13: 39:25
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:39:13: 39:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:39:13: 39:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        switchInt(move _17) -> [0: bb16, otherwise: bb45]; // scope 3 at ui/command/command-exec.rs:39:13: 39:25
    }

    bb16: {
        _18 = <str as PartialEq>::eq(_9, const "exec-test5") -> [return: bb17, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:44:13: 44:25
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:44:13: 44:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:44:13: 44:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb17: {
        switchInt(move _18) -> [0: bb18, otherwise: bb52]; // scope 3 at ui/command/command-exec.rs:44:13: 44:25
    }

    bb18: {
        _19 = <str as PartialEq>::eq(_9, const "exec-test6") -> [return: bb19, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:51:13: 51:25
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:51:13: 51:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:51:13: 51:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        switchInt(move _19) -> [0: bb20, otherwise: bb66]; // scope 3 at ui/command/command-exec.rs:51:13: 51:25
    }

    bb20: {
        _20 = <str as PartialEq>::eq(_9, const "exec-test7") -> [return: bb21, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:56:13: 56:25
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:56:13: 56:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:56:13: 56:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        switchInt(move _20) -> [0: bb22, otherwise: bb74]; // scope 3 at ui/command/command-exec.rs:56:13: 56:25
    }

    bb22: {
        _417 = const _;                  // scope 3 at ui/command/command-exec.rs:61:25: 61:47
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:61:25: 61:47
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _161 = _417;                     // scope 3 at ui/command/command-exec.rs:61:25: 61:47
        _160 = _161;                     // scope 3 at ui/command/command-exec.rs:61:25: 61:47
        _159 = move _160 as &[&str] (Pointer(Unsize)); // scope 3 at ui/command/command-exec.rs:61:25: 61:47
        _168 = &_8;                      // scope 3 at ui/command/command-exec.rs:61:49: 61:52
        _167 = _168;                     // scope 3 at ui/command/command-exec.rs:61:49: 61:52
        _166 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _167) -> [return: bb82, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:61:49: 61:52
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:61:49: 61:52
                                         // + user_ty: UserType(19)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb23: {
        _431 = const _;                  // scope 3 at ui/command/command-exec.rs:22:33: 22:41
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:22:33: 22:41
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[14])) }
        _25 = _431;                      // scope 3 at ui/command/command-exec.rs:22:33: 22:41
        _24 = _25;                       // scope 3 at ui/command/command-exec.rs:22:33: 22:41
        _23 = move _24 as &[&str] (Pointer(Unsize)); // scope 3 at ui/command/command-exec.rs:22:33: 22:41
        _430 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[13])) }
        _28 = _430;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _27 = _28;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _26 = move _27 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = Arguments::<'_>::new_v1(move _23, move _26) -> [return: bb24, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb24: {
        _21 = _print(move _22) -> [return: bb231, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb25: {
        _34 = &_2;                       // scope 3 at ui/command/command-exec.rs:25:40: 25:43
        _33 = Command::new::<&String>(move _34) -> [return: bb26, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:25:27: 25:44
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:25:27: 25:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb26: {
        _32 = &mut _33;                  // scope 3 at ui/command/command-exec.rs:25:27: 25:57
        _31 = Command::arg::<&str>(move _32, const "test1") -> [return: bb27, unwind: bb226]; // scope 3 at ui/command/command-exec.rs:25:27: 25:57
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:25:45: 25:48
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:25:49: 25:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _30 = &mut (*_31);               // scope 3 at ui/command/command-exec.rs:25:27: 25:64
        _29 = <Command as std::os::unix::process::CommandExt>::exec(move _30) -> [return: bb28, unwind: bb226]; // scope 3 at ui/command/command-exec.rs:25:27: 25:64
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:25:58: 25:62
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> std::io::Error {<Command as std::os::unix::process::CommandExt>::exec}, val: Value(<ZST>) }
    }

    bb28: {
        drop(_33) -> [return: bb29, unwind: bb225]; // scope 3 at ui/command/command-exec.rs:25:64: 25:65
    }

    bb29: {
        _429 = const _;                  // scope 4 at ui/command/command-exec.rs:26:24: 26:45
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:26:24: 26:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[12])) }
        _39 = _429;                      // scope 4 at ui/command/command-exec.rs:26:24: 26:45
        _38 = _39;                       // scope 4 at ui/command/command-exec.rs:26:24: 26:45
        _37 = move _38 as &[&str] (Pointer(Unsize)); // scope 4 at ui/command/command-exec.rs:26:24: 26:45
        _46 = &_29;                      // scope 4 at ui/command/command-exec.rs:26:47: 26:50
        _45 = _46;                       // scope 4 at ui/command/command-exec.rs:26:47: 26:50
        _44 = core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>(move _45) -> [return: bb30, unwind: bb225]; // scope 4 at ui/command/command-exec.rs:26:47: 26:50
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:26:47: 26:50
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b std::io::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>}, val: Value(<ZST>) }
    }

    bb30: {
        _43 = [move _44];                // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _42 = &_43;                      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _41 = _42;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _40 = move _41 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _36 = Arguments::<'_>::new_v1(move _37, move _40) -> [return: bb31, unwind: bb225]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb31: {
        _35 = panic_fmt(move _36) -> bb225; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb32: {
        _49 = Command::new::<&str>(const "/path/to/nowhere") -> [return: bb33, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:30:17: 30:49
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:30:17: 30:29
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:30:30: 30:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb33: {
        _48 = &mut _49;                  // scope 3 at ui/command/command-exec.rs:30:17: 30:56
        _47 = <Command as std::os::unix::process::CommandExt>::exec(move _48) -> [return: bb34, unwind: bb224]; // scope 3 at ui/command/command-exec.rs:30:17: 30:56
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:30:50: 30:54
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> std::io::Error {<Command as std::os::unix::process::CommandExt>::exec}, val: Value(<ZST>) }
    }

    bb34: {
        drop(_47) -> [return: bb35, unwind: bb224]; // scope 3 at ui/command/command-exec.rs:30:56: 30:57
    }

    bb35: {
        drop(_49) -> [return: bb36, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:30:56: 30:57
    }

    bb36: {
        _428 = const _;                  // scope 3 at ui/command/command-exec.rs:31:26: 31:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:31:26: 31:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[11])) }
        _54 = _428;                      // scope 3 at ui/command/command-exec.rs:31:26: 31:34
        _53 = _54;                       // scope 3 at ui/command/command-exec.rs:31:26: 31:34
        _52 = move _53 as &[&str] (Pointer(Unsize)); // scope 3 at ui/command/command-exec.rs:31:26: 31:34
        _427 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[10])) }
        _57 = _427;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _56 = _57;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _55 = move _56 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _51 = Arguments::<'_>::new_v1(move _52, move _55) -> [return: bb37, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb37: {
        _50 = _print(move _51) -> [return: bb232, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb38: {
        _63 = &_2;                       // scope 3 at ui/command/command-exec.rs:35:30: 35:33
        _62 = Command::new::<&String>(move _63) -> [return: bb39, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:35:17: 35:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:35:17: 35:29
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb39: {
        _61 = &mut _62;                  // scope 3 at ui/command/command-exec.rs:35:17: 35:47
        _60 = Command::arg::<&str>(move _61, const "bad\0") -> [return: bb40, unwind: bb223]; // scope 3 at ui/command/command-exec.rs:35:17: 35:47
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:35:35: 35:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:35:39: 35:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb40: {
        _59 = &mut (*_60);               // scope 3 at ui/command/command-exec.rs:35:17: 35:54
        _58 = <Command as std::os::unix::process::CommandExt>::exec(move _59) -> [return: bb41, unwind: bb223]; // scope 3 at ui/command/command-exec.rs:35:17: 35:54
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:35:48: 35:52
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> std::io::Error {<Command as std::os::unix::process::CommandExt>::exec}, val: Value(<ZST>) }
    }

    bb41: {
        drop(_58) -> [return: bb42, unwind: bb223]; // scope 3 at ui/command/command-exec.rs:35:54: 35:55
    }

    bb42: {
        drop(_62) -> [return: bb43, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:35:54: 35:55
    }

    bb43: {
        _426 = const _;                  // scope 3 at ui/command/command-exec.rs:36:26: 36:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:36:26: 36:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[9])) }
        _68 = _426;                      // scope 3 at ui/command/command-exec.rs:36:26: 36:34
        _67 = _68;                       // scope 3 at ui/command/command-exec.rs:36:26: 36:34
        _66 = move _67 as &[&str] (Pointer(Unsize)); // scope 3 at ui/command/command-exec.rs:36:26: 36:34
        _425 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[8])) }
        _71 = _425;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _70 = _71;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _69 = move _70 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _65 = Arguments::<'_>::new_v1(move _66, move _69) -> [return: bb44, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb44: {
        _64 = _print(move _65) -> [return: bb233, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb45: {
        _77 = &_2;                       // scope 3 at ui/command/command-exec.rs:40:30: 40:33
        _76 = Command::new::<&String>(move _77) -> [return: bb46, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:40:17: 40:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:40:17: 40:29
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb46: {
        _75 = &mut _76;                  // scope 3 at ui/command/command-exec.rs:40:17: 40:66
        _74 = Command::current_dir::<&str>(move _75, const "/path/to/nowhere") -> [return: bb47, unwind: bb222]; // scope 3 at ui/command/command-exec.rs:40:17: 40:66
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:40:35: 40:46
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::current_dir::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:40:47: 40:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb47: {
        _73 = &mut (*_74);               // scope 3 at ui/command/command-exec.rs:40:17: 40:73
        _72 = <Command as std::os::unix::process::CommandExt>::exec(move _73) -> [return: bb48, unwind: bb222]; // scope 3 at ui/command/command-exec.rs:40:17: 40:73
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:40:67: 40:71
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> std::io::Error {<Command as std::os::unix::process::CommandExt>::exec}, val: Value(<ZST>) }
    }

    bb48: {
        drop(_72) -> [return: bb49, unwind: bb222]; // scope 3 at ui/command/command-exec.rs:40:73: 40:74
    }

    bb49: {
        drop(_76) -> [return: bb50, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:40:73: 40:74
    }

    bb50: {
        _424 = const _;                  // scope 3 at ui/command/command-exec.rs:41:26: 41:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:41:26: 41:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[7])) }
        _82 = _424;                      // scope 3 at ui/command/command-exec.rs:41:26: 41:34
        _81 = _82;                       // scope 3 at ui/command/command-exec.rs:41:26: 41:34
        _80 = move _81 as &[&str] (Pointer(Unsize)); // scope 3 at ui/command/command-exec.rs:41:26: 41:34
        _423 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[6])) }
        _85 = _423;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _84 = _85;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _83 = move _84 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _79 = Arguments::<'_>::new_v1(move _80, move _83) -> [return: bb51, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb51: {
        _78 = _print(move _79) -> [return: bb234, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb52: {
        _86 = set_var::<&str, &str>(const "VARIABLE", const "ABC") -> [return: bb53, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:45:17: 45:48
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:45:17: 45:29
                                         // + literal: Const { ty: fn(&str, &str) {set_var::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:45:30: 45:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:45:42: 45:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        _91 = Command::new::<&str>(const "definitely-not-a-real-binary") -> [return: bb54, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:46:17: 46:61
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:46:17: 46:29
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:46:30: 46:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb54: {
        _90 = &mut _91;                  // scope 3 at ui/command/command-exec.rs:46:17: 46:84
        _89 = Command::env::<&str, &str>(move _90, const "VARIABLE", const "XYZ") -> [return: bb55, unwind: bb221]; // scope 3 at ui/command/command-exec.rs:46:17: 46:84
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:46:62: 46:65
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str, &str) -> &'a mut Command {Command::env::<&str, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:46:66: 46:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:46:78: 46:83
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb55: {
        _88 = &mut (*_89);               // scope 3 at ui/command/command-exec.rs:46:17: 46:91
        _87 = <Command as std::os::unix::process::CommandExt>::exec(move _88) -> [return: bb56, unwind: bb221]; // scope 3 at ui/command/command-exec.rs:46:17: 46:91
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:46:85: 46:89
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> std::io::Error {<Command as std::os::unix::process::CommandExt>::exec}, val: Value(<ZST>) }
    }

    bb56: {
        drop(_87) -> [return: bb57, unwind: bb221]; // scope 3 at ui/command/command-exec.rs:46:91: 46:92
    }

    bb57: {
        drop(_91) -> [return: bb58, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:46:91: 46:92
    }

    bb58: {
        _95 = var::<&str>(const "VARIABLE") -> [return: bb59, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:47:28: 47:48
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:47:28: 47:36
                                         // + literal: Const { ty: fn(&str) -> Result<String, VarError> {var::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:47:37: 47:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb59: {
        _94 = Result::<String, VarError>::unwrap(move _95) -> [return: bb60, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:47:28: 47:57
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:47:49: 47:55
                                         // + literal: Const { ty: fn(Result<String, VarError>) -> String {Result::<String, VarError>::unwrap}, val: Value(<ZST>) }
    }

    bb60: {
        _93 = &_94;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _422 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[5])) }
        _96 = _422;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _92 = (move _93, move _96);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _97 = (_92.0: &std::string::String); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _98 = (_92.1: &&str);            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _101 = _97;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _102 = _98;                      // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _100 = <String as PartialEq<&str>>::eq(move _101, move _102) -> [return: bb61, unwind: bb220]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb61: {
        _99 = Not(move _100);            // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _99) -> [0: bb63, otherwise: bb62]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _103 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _105 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _107 = _97;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _106 = _107;                     // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _109 = _98;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _108 = _109;                     // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _110 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _104 = core::panicking::assert_failed::<String, &str>(move _105, move _106, move _108, move _110) -> bb220; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb63: {
        drop(_94) -> [return: bb64, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb64: {
        _421 = const _;                  // scope 3 at ui/command/command-exec.rs:48:26: 48:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:48:26: 48:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[4])) }
        _115 = _421;                     // scope 3 at ui/command/command-exec.rs:48:26: 48:34
        _114 = _115;                     // scope 3 at ui/command/command-exec.rs:48:26: 48:34
        _113 = move _114 as &[&str] (Pointer(Unsize)); // scope 3 at ui/command/command-exec.rs:48:26: 48:34
        _420 = const _;                  // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(main, [], Some(promoted[3])) }
        _118 = _420;                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _117 = _118;                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _116 = move _117 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _112 = Arguments::<'_>::new_v1(move _113, move _116) -> [return: bb65, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb65: {
        _111 = _print(move _112) -> [return: bb235, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb66: {
        _125 = Command::new::<&str>(const "echo") -> [return: bb67, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:52:27: 52:47
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:52:27: 52:39
                                         // + user_ty: UserType(12)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:52:40: 52:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb67: {
        _124 = &mut _125;                // scope 3 at ui/command/command-exec.rs:52:27: 52:61
        _123 = Command::arg::<&str>(move _124, const "passed") -> [return: bb68, unwind: bb219]; // scope 3 at ui/command/command-exec.rs:52:27: 52:61
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:52:48: 52:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:52:52: 52:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb68: {
        _122 = &mut (*_123);             // scope 3 at ui/command/command-exec.rs:52:27: 52:73
        _121 = Command::env_clear(move _122) -> [return: bb69, unwind: bb219]; // scope 3 at ui/command/command-exec.rs:52:27: 52:73
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:52:62: 52:71
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> &'a mut Command {Command::env_clear}, val: Value(<ZST>) }
    }

    bb69: {
        _120 = &mut (*_121);             // scope 3 at ui/command/command-exec.rs:52:27: 52:80
        _119 = <Command as std::os::unix::process::CommandExt>::exec(move _120) -> [return: bb70, unwind: bb219]; // scope 3 at ui/command/command-exec.rs:52:27: 52:80
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:52:74: 52:78
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> std::io::Error {<Command as std::os::unix::process::CommandExt>::exec}, val: Value(<ZST>) }
    }

    bb70: {
        drop(_125) -> [return: bb71, unwind: bb218]; // scope 3 at ui/command/command-exec.rs:52:80: 52:81
    }

    bb71: {
        _419 = const _;                  // scope 7 at ui/command/command-exec.rs:53:24: 53:45
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:53:24: 53:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[2])) }
        _130 = _419;                     // scope 7 at ui/command/command-exec.rs:53:24: 53:45
        _129 = _130;                     // scope 7 at ui/command/command-exec.rs:53:24: 53:45
        _128 = move _129 as &[&str] (Pointer(Unsize)); // scope 7 at ui/command/command-exec.rs:53:24: 53:45
        _137 = &_119;                    // scope 7 at ui/command/command-exec.rs:53:47: 53:50
        _136 = _137;                     // scope 7 at ui/command/command-exec.rs:53:47: 53:50
        _135 = core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>(move _136) -> [return: bb72, unwind: bb218]; // scope 7 at ui/command/command-exec.rs:53:47: 53:50
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:53:47: 53:50
                                         // + user_ty: UserType(14)
                                         // + literal: Const { ty: for<'b> fn(&'b std::io::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>}, val: Value(<ZST>) }
    }

    bb72: {
        _134 = [move _135];              // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _133 = &_134;                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _132 = _133;                     // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _131 = move _132 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _127 = Arguments::<'_>::new_v1(move _128, move _131) -> [return: bb73, unwind: bb218]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(13)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb73: {
        _126 = panic_fmt(move _127) -> bb218; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb74: {
        _144 = Command::new::<&str>(const "echo") -> [return: bb75, unwind: bb227]; // scope 3 at ui/command/command-exec.rs:57:27: 57:47
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:57:27: 57:39
                                         // + user_ty: UserType(15)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:57:40: 57:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb75: {
        _143 = &mut _144;                // scope 3 at ui/command/command-exec.rs:57:27: 57:61
        _142 = Command::arg::<&str>(move _143, const "passed") -> [return: bb76, unwind: bb217]; // scope 3 at ui/command/command-exec.rs:57:27: 57:61
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:57:48: 57:51
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:57:52: 57:60
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb76: {
        _141 = &mut (*_142);             // scope 3 at ui/command/command-exec.rs:57:27: 57:80
        _140 = Command::env_remove::<&str>(move _141, const "PATH") -> [return: bb77, unwind: bb217]; // scope 3 at ui/command/command-exec.rs:57:27: 57:80
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:57:62: 57:72
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::env_remove::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:57:73: 57:79
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb77: {
        _139 = &mut (*_140);             // scope 3 at ui/command/command-exec.rs:57:27: 57:87
        _138 = <Command as std::os::unix::process::CommandExt>::exec(move _139) -> [return: bb78, unwind: bb217]; // scope 3 at ui/command/command-exec.rs:57:27: 57:87
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:57:81: 57:85
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> std::io::Error {<Command as std::os::unix::process::CommandExt>::exec}, val: Value(<ZST>) }
    }

    bb78: {
        drop(_144) -> [return: bb79, unwind: bb216]; // scope 3 at ui/command/command-exec.rs:57:87: 57:88
    }

    bb79: {
        _418 = const _;                  // scope 8 at ui/command/command-exec.rs:58:24: 58:45
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:58:24: 58:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _149 = _418;                     // scope 8 at ui/command/command-exec.rs:58:24: 58:45
        _148 = _149;                     // scope 8 at ui/command/command-exec.rs:58:24: 58:45
        _147 = move _148 as &[&str] (Pointer(Unsize)); // scope 8 at ui/command/command-exec.rs:58:24: 58:45
        _156 = &_138;                    // scope 8 at ui/command/command-exec.rs:58:47: 58:50
        _155 = _156;                     // scope 8 at ui/command/command-exec.rs:58:47: 58:50
        _154 = core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>(move _155) -> [return: bb80, unwind: bb216]; // scope 8 at ui/command/command-exec.rs:58:47: 58:50
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:58:47: 58:50
                                         // + user_ty: UserType(17)
                                         // + literal: Const { ty: for<'b> fn(&'b std::io::Error) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<std::io::Error>}, val: Value(<ZST>) }
    }

    bb80: {
        _153 = [move _154];              // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _152 = &_153;                    // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _151 = _152;                     // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _150 = move _151 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _146 = Arguments::<'_>::new_v1(move _147, move _150) -> [return: bb81, unwind: bb216]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(16)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb81: {
        _145 = panic_fmt(move _146) -> bb216; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb82: {
        _165 = [move _166];              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _164 = &_165;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _163 = _164;                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _162 = move _163 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _158 = Arguments::<'_>::new_v1(move _159, move _162) -> [return: bb83, unwind: bb227]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(18)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb83: {
        _157 = panic_fmt(move _158) -> bb227; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb84: {
        drop(_8) -> [return: bb199, unwind: bb228]; // scope 2 at ui/command/command-exec.rs:64:5: 64:6
    }

    bb85: {
        drop(_5) -> [return: bb86, unwind: bb228]; // scope 2 at ui/command/command-exec.rs:64:5: 64:6
    }

    bb86: {
        _175 = &_2;                      // scope 2 at ui/command/command-exec.rs:66:31: 66:34
        _174 = Command::new::<&String>(move _175) -> [return: bb87, unwind: bb228]; // scope 2 at ui/command/command-exec.rs:66:18: 66:35
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:66:18: 66:30
                                         // + user_ty: UserType(20)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb87: {
        _173 = &mut _174;                // scope 2 at ui/command/command-exec.rs:66:18: 66:53
        _172 = Command::arg::<&str>(move _173, const "exec-test1") -> [return: bb88, unwind: bb215]; // scope 2 at ui/command/command-exec.rs:66:18: 66:53
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:66:36: 66:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:66:40: 66:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb88: {
        _171 = &mut (*_172);             // scope 2 at ui/command/command-exec.rs:66:18: 66:62
        _170 = Command::output(move _171) -> [return: bb89, unwind: bb215]; // scope 2 at ui/command/command-exec.rs:66:18: 66:62
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:66:54: 66:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb89: {
        _169 = Result::<Output, std::io::Error>::unwrap(move _170) -> [return: bb90, unwind: bb215]; // scope 2 at ui/command/command-exec.rs:66:18: 66:71
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:66:63: 66:69
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb90: {
        drop(_174) -> [return: bb91, unwind: bb214]; // scope 2 at ui/command/command-exec.rs:66:71: 66:72
    }

    bb91: {
        _178 = &(_169.0: std::process::ExitStatus); // scope 9 at ui/command/command-exec.rs:67:13: 67:36
        _177 = ExitStatus::success(move _178) -> [return: bb92, unwind: bb214]; // scope 9 at ui/command/command-exec.rs:67:13: 67:36
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:67:27: 67:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb92: {
        _176 = Not(move _177);           // scope 9 at ui/command/command-exec.rs:67:5: 67:37
        switchInt(move _176) -> [0: bb94, otherwise: bb93]; // scope 9 at ui/command/command-exec.rs:67:5: 67:37
    }

    bb93: {
        _179 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb214; // scope 9 at ui/command/command-exec.rs:67:5: 67:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:67:5: 67:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb94: {
        _182 = &(_169.2: std::vec::Vec<u8>); // scope 9 at ui/command/command-exec.rs:68:13: 68:37
        _181 = Vec::<u8>::is_empty(move _182) -> [return: bb95, unwind: bb214]; // scope 9 at ui/command/command-exec.rs:68:13: 68:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:68:27: 68:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb95: {
        _180 = Not(move _181);           // scope 9 at ui/command/command-exec.rs:68:5: 68:38
        switchInt(move _180) -> [0: bb97, otherwise: bb96]; // scope 9 at ui/command/command-exec.rs:68:5: 68:38
    }

    bb96: {
        _183 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb214; // scope 9 at ui/command/command-exec.rs:68:5: 68:38
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:68:5: 68:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb97: {
        _185 = &(_169.1: std::vec::Vec<u8>); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _440 = const _;                  // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 7], val: Unevaluated(main, [], Some(promoted[23])) }
        _186 = _440;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _184 = (move _185, move _186);   // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _187 = (_184.0: &std::vec::Vec<u8>); // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _188 = (_184.1: &&[u8; 7]);      // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _191 = _187;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _192 = _188;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _190 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(move _191, move _192) -> [return: bb98, unwind: bb214]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 7]) -> bool {<Vec<u8> as PartialEq<&[u8; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb98: {
        _189 = Not(move _190);           // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _189) -> [0: bb100, otherwise: bb99]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb99: {
        _193 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _195 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _197 = _187;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _196 = _197;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _199 = _188;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _198 = _199;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _200 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _194 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _195, move _196, move _198, move _200) -> bb214; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>}, val: Value(<ZST>) }
    }

    bb100: {
        _207 = &_2;                      // scope 9 at ui/command/command-exec.rs:71:31: 71:34
        _206 = Command::new::<&String>(move _207) -> [return: bb101, unwind: bb214]; // scope 9 at ui/command/command-exec.rs:71:18: 71:35
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:71:18: 71:30
                                         // + user_ty: UserType(21)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb101: {
        _205 = &mut _206;                // scope 9 at ui/command/command-exec.rs:71:18: 71:53
        _204 = Command::arg::<&str>(move _205, const "exec-test2") -> [return: bb102, unwind: bb213]; // scope 9 at ui/command/command-exec.rs:71:18: 71:53
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:71:36: 71:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:71:40: 71:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb102: {
        _203 = &mut (*_204);             // scope 9 at ui/command/command-exec.rs:71:18: 71:62
        _202 = Command::output(move _203) -> [return: bb103, unwind: bb213]; // scope 9 at ui/command/command-exec.rs:71:18: 71:62
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:71:54: 71:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb103: {
        _201 = Result::<Output, std::io::Error>::unwrap(move _202) -> [return: bb104, unwind: bb213]; // scope 9 at ui/command/command-exec.rs:71:18: 71:71
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:71:63: 71:69
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb104: {
        drop(_206) -> [return: bb105, unwind: bb212]; // scope 9 at ui/command/command-exec.rs:71:71: 71:72
    }

    bb105: {
        _210 = &(_201.0: std::process::ExitStatus); // scope 12 at ui/command/command-exec.rs:72:13: 72:36
        _209 = ExitStatus::success(move _210) -> [return: bb106, unwind: bb212]; // scope 12 at ui/command/command-exec.rs:72:13: 72:36
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:72:27: 72:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb106: {
        _208 = Not(move _209);           // scope 12 at ui/command/command-exec.rs:72:5: 72:37
        switchInt(move _208) -> [0: bb108, otherwise: bb107]; // scope 12 at ui/command/command-exec.rs:72:5: 72:37
    }

    bb107: {
        _211 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb212; // scope 12 at ui/command/command-exec.rs:72:5: 72:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:72:5: 72:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb108: {
        _214 = &(_201.2: std::vec::Vec<u8>); // scope 12 at ui/command/command-exec.rs:73:13: 73:37
        _213 = Vec::<u8>::is_empty(move _214) -> [return: bb109, unwind: bb212]; // scope 12 at ui/command/command-exec.rs:73:13: 73:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:73:27: 73:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb109: {
        _212 = Not(move _213);           // scope 12 at ui/command/command-exec.rs:73:5: 73:38
        switchInt(move _212) -> [0: bb111, otherwise: bb110]; // scope 12 at ui/command/command-exec.rs:73:5: 73:38
    }

    bb110: {
        _215 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb212; // scope 12 at ui/command/command-exec.rs:73:5: 73:38
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:73:5: 73:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb111: {
        _217 = &(_201.1: std::vec::Vec<u8>); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _439 = const _;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 7], val: Unevaluated(main, [], Some(promoted[22])) }
        _218 = _439;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _216 = (move _217, move _218);   // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _219 = (_216.0: &std::vec::Vec<u8>); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _220 = (_216.1: &&[u8; 7]);      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _223 = _219;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _224 = _220;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _222 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(move _223, move _224) -> [return: bb112, unwind: bb212]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 7]) -> bool {<Vec<u8> as PartialEq<&[u8; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb112: {
        _221 = Not(move _222);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _221) -> [0: bb114, otherwise: bb113]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb113: {
        _225 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _227 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _229 = _219;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _228 = _229;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _231 = _220;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _230 = _231;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _232 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _226 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _227, move _228, move _230, move _232) -> bb212; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>}, val: Value(<ZST>) }
    }

    bb114: {
        _239 = &_2;                      // scope 12 at ui/command/command-exec.rs:76:31: 76:34
        _238 = Command::new::<&String>(move _239) -> [return: bb115, unwind: bb212]; // scope 12 at ui/command/command-exec.rs:76:18: 76:35
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:76:18: 76:30
                                         // + user_ty: UserType(22)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb115: {
        _237 = &mut _238;                // scope 12 at ui/command/command-exec.rs:76:18: 76:53
        _236 = Command::arg::<&str>(move _237, const "exec-test3") -> [return: bb116, unwind: bb211]; // scope 12 at ui/command/command-exec.rs:76:18: 76:53
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:76:36: 76:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:76:40: 76:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb116: {
        _235 = &mut (*_236);             // scope 12 at ui/command/command-exec.rs:76:18: 76:62
        _234 = Command::output(move _235) -> [return: bb117, unwind: bb211]; // scope 12 at ui/command/command-exec.rs:76:18: 76:62
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:76:54: 76:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb117: {
        _233 = Result::<Output, std::io::Error>::unwrap(move _234) -> [return: bb118, unwind: bb211]; // scope 12 at ui/command/command-exec.rs:76:18: 76:71
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:76:63: 76:69
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb118: {
        drop(_238) -> [return: bb119, unwind: bb210]; // scope 12 at ui/command/command-exec.rs:76:71: 76:72
    }

    bb119: {
        _242 = &(_233.0: std::process::ExitStatus); // scope 15 at ui/command/command-exec.rs:77:13: 77:36
        _241 = ExitStatus::success(move _242) -> [return: bb120, unwind: bb210]; // scope 15 at ui/command/command-exec.rs:77:13: 77:36
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:77:27: 77:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb120: {
        _240 = Not(move _241);           // scope 15 at ui/command/command-exec.rs:77:5: 77:37
        switchInt(move _240) -> [0: bb122, otherwise: bb121]; // scope 15 at ui/command/command-exec.rs:77:5: 77:37
    }

    bb121: {
        _243 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb210; // scope 15 at ui/command/command-exec.rs:77:5: 77:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:77:5: 77:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb122: {
        _246 = &(_233.2: std::vec::Vec<u8>); // scope 15 at ui/command/command-exec.rs:78:13: 78:37
        _245 = Vec::<u8>::is_empty(move _246) -> [return: bb123, unwind: bb210]; // scope 15 at ui/command/command-exec.rs:78:13: 78:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:78:27: 78:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb123: {
        _244 = Not(move _245);           // scope 15 at ui/command/command-exec.rs:78:5: 78:38
        switchInt(move _244) -> [0: bb125, otherwise: bb124]; // scope 15 at ui/command/command-exec.rs:78:5: 78:38
    }

    bb124: {
        _247 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb210; // scope 15 at ui/command/command-exec.rs:78:5: 78:38
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:78:5: 78:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb125: {
        _249 = &(_233.1: std::vec::Vec<u8>); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _438 = const _;                  // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 7], val: Unevaluated(main, [], Some(promoted[21])) }
        _250 = _438;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _248 = (move _249, move _250);   // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _251 = (_248.0: &std::vec::Vec<u8>); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _252 = (_248.1: &&[u8; 7]);      // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _255 = _251;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _256 = _252;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _254 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(move _255, move _256) -> [return: bb126, unwind: bb210]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 7]) -> bool {<Vec<u8> as PartialEq<&[u8; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb126: {
        _253 = Not(move _254);           // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _253) -> [0: bb128, otherwise: bb127]; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb127: {
        _257 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _259 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _261 = _251;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _260 = _261;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _263 = _252;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _262 = _263;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _264 = Option::<Arguments<'_>>::None; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _258 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _259, move _260, move _262, move _264) -> bb210; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>}, val: Value(<ZST>) }
    }

    bb128: {
        _271 = &_2;                      // scope 15 at ui/command/command-exec.rs:81:31: 81:34
        _270 = Command::new::<&String>(move _271) -> [return: bb129, unwind: bb210]; // scope 15 at ui/command/command-exec.rs:81:18: 81:35
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:81:18: 81:30
                                         // + user_ty: UserType(23)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb129: {
        _269 = &mut _270;                // scope 15 at ui/command/command-exec.rs:81:18: 81:53
        _268 = Command::arg::<&str>(move _269, const "exec-test4") -> [return: bb130, unwind: bb209]; // scope 15 at ui/command/command-exec.rs:81:18: 81:53
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:81:36: 81:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:81:40: 81:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb130: {
        _267 = &mut (*_268);             // scope 15 at ui/command/command-exec.rs:81:18: 81:62
        _266 = Command::output(move _267) -> [return: bb131, unwind: bb209]; // scope 15 at ui/command/command-exec.rs:81:18: 81:62
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:81:54: 81:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb131: {
        _265 = Result::<Output, std::io::Error>::unwrap(move _266) -> [return: bb132, unwind: bb209]; // scope 15 at ui/command/command-exec.rs:81:18: 81:71
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:81:63: 81:69
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb132: {
        drop(_270) -> [return: bb133, unwind: bb208]; // scope 15 at ui/command/command-exec.rs:81:71: 81:72
    }

    bb133: {
        _274 = &(_265.0: std::process::ExitStatus); // scope 18 at ui/command/command-exec.rs:82:13: 82:36
        _273 = ExitStatus::success(move _274) -> [return: bb134, unwind: bb208]; // scope 18 at ui/command/command-exec.rs:82:13: 82:36
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:82:27: 82:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb134: {
        _272 = Not(move _273);           // scope 18 at ui/command/command-exec.rs:82:5: 82:37
        switchInt(move _272) -> [0: bb136, otherwise: bb135]; // scope 18 at ui/command/command-exec.rs:82:5: 82:37
    }

    bb135: {
        _275 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb208; // scope 18 at ui/command/command-exec.rs:82:5: 82:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:82:5: 82:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb136: {
        _278 = &(_265.2: std::vec::Vec<u8>); // scope 18 at ui/command/command-exec.rs:83:13: 83:37
        _277 = Vec::<u8>::is_empty(move _278) -> [return: bb137, unwind: bb208]; // scope 18 at ui/command/command-exec.rs:83:13: 83:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:83:27: 83:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb137: {
        _276 = Not(move _277);           // scope 18 at ui/command/command-exec.rs:83:5: 83:38
        switchInt(move _276) -> [0: bb139, otherwise: bb138]; // scope 18 at ui/command/command-exec.rs:83:5: 83:38
    }

    bb138: {
        _279 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb208; // scope 18 at ui/command/command-exec.rs:83:5: 83:38
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:83:5: 83:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb139: {
        _281 = &(_265.1: std::vec::Vec<u8>); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _437 = const _;                  // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 7], val: Unevaluated(main, [], Some(promoted[20])) }
        _282 = _437;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _280 = (move _281, move _282);   // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _283 = (_280.0: &std::vec::Vec<u8>); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _284 = (_280.1: &&[u8; 7]);      // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _287 = _283;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _288 = _284;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _286 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(move _287, move _288) -> [return: bb140, unwind: bb208]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 7]) -> bool {<Vec<u8> as PartialEq<&[u8; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb140: {
        _285 = Not(move _286);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _285) -> [0: bb142, otherwise: bb141]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb141: {
        _289 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _291 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _293 = _283;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _292 = _293;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _295 = _284;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _294 = _295;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _296 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _290 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _291, move _292, move _294, move _296) -> bb208; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>}, val: Value(<ZST>) }
    }

    bb142: {
        _303 = &_2;                      // scope 18 at ui/command/command-exec.rs:86:31: 86:34
        _302 = Command::new::<&String>(move _303) -> [return: bb143, unwind: bb208]; // scope 18 at ui/command/command-exec.rs:86:18: 86:35
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:86:18: 86:30
                                         // + user_ty: UserType(24)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb143: {
        _301 = &mut _302;                // scope 18 at ui/command/command-exec.rs:86:18: 86:53
        _300 = Command::arg::<&str>(move _301, const "exec-test5") -> [return: bb144, unwind: bb207]; // scope 18 at ui/command/command-exec.rs:86:18: 86:53
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:86:36: 86:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:86:40: 86:52
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb144: {
        _299 = &mut (*_300);             // scope 18 at ui/command/command-exec.rs:86:18: 86:62
        _298 = Command::output(move _299) -> [return: bb145, unwind: bb207]; // scope 18 at ui/command/command-exec.rs:86:18: 86:62
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:86:54: 86:60
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb145: {
        _297 = Result::<Output, std::io::Error>::unwrap(move _298) -> [return: bb146, unwind: bb207]; // scope 18 at ui/command/command-exec.rs:86:18: 86:71
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:86:63: 86:69
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb146: {
        drop(_302) -> [return: bb147, unwind: bb206]; // scope 18 at ui/command/command-exec.rs:86:71: 86:72
    }

    bb147: {
        _306 = &(_297.0: std::process::ExitStatus); // scope 21 at ui/command/command-exec.rs:87:13: 87:36
        _305 = ExitStatus::success(move _306) -> [return: bb148, unwind: bb206]; // scope 21 at ui/command/command-exec.rs:87:13: 87:36
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:87:27: 87:34
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb148: {
        _304 = Not(move _305);           // scope 21 at ui/command/command-exec.rs:87:5: 87:37
        switchInt(move _304) -> [0: bb150, otherwise: bb149]; // scope 21 at ui/command/command-exec.rs:87:5: 87:37
    }

    bb149: {
        _307 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb206; // scope 21 at ui/command/command-exec.rs:87:5: 87:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:87:5: 87:37
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb150: {
        _310 = &(_297.2: std::vec::Vec<u8>); // scope 21 at ui/command/command-exec.rs:88:13: 88:37
        _309 = Vec::<u8>::is_empty(move _310) -> [return: bb151, unwind: bb206]; // scope 21 at ui/command/command-exec.rs:88:13: 88:37
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:88:27: 88:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb151: {
        _308 = Not(move _309);           // scope 21 at ui/command/command-exec.rs:88:5: 88:38
        switchInt(move _308) -> [0: bb153, otherwise: bb152]; // scope 21 at ui/command/command-exec.rs:88:5: 88:38
    }

    bb152: {
        _311 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb206; // scope 21 at ui/command/command-exec.rs:88:5: 88:38
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:88:5: 88:38
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb153: {
        _313 = &(_297.1: std::vec::Vec<u8>); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _436 = const _;                  // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 7], val: Unevaluated(main, [], Some(promoted[19])) }
        _314 = _436;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _312 = (move _313, move _314);   // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _315 = (_312.0: &std::vec::Vec<u8>); // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _316 = (_312.1: &&[u8; 7]);      // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _319 = _315;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _320 = _316;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _318 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(move _319, move _320) -> [return: bb154, unwind: bb206]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 7]) -> bool {<Vec<u8> as PartialEq<&[u8; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb154: {
        _317 = Not(move _318);           // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _317) -> [0: bb156, otherwise: bb155]; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb155: {
        _321 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _323 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _325 = _315;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _324 = _325;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _327 = _316;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _326 = _327;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _328 = Option::<Arguments<'_>>::None; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _322 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _323, move _324, move _326, move _328) -> bb206; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>}, val: Value(<ZST>) }
    }

    bb156: {
        _335 = &_2;                      // scope 21 at ui/command/command-exec.rs:92:35: 92:38
        _334 = Command::new::<&String>(move _335) -> [return: bb157, unwind: bb206]; // scope 21 at ui/command/command-exec.rs:92:22: 92:39
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:92:22: 92:34
                                         // + user_ty: UserType(25)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb157: {
        _333 = &mut _334;                // scope 21 at ui/command/command-exec.rs:92:22: 92:57
        _332 = Command::arg::<&str>(move _333, const "exec-test6") -> [return: bb158, unwind: bb205]; // scope 21 at ui/command/command-exec.rs:92:22: 92:57
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:92:40: 92:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:92:44: 92:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb158: {
        _331 = &mut (*_332);             // scope 21 at ui/command/command-exec.rs:92:22: 92:66
        _330 = Command::output(move _331) -> [return: bb159, unwind: bb205]; // scope 21 at ui/command/command-exec.rs:92:22: 92:66
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:92:58: 92:64
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb159: {
        _329 = Result::<Output, std::io::Error>::unwrap(move _330) -> [return: bb160, unwind: bb205]; // scope 21 at ui/command/command-exec.rs:92:22: 92:75
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:92:67: 92:73
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb160: {
        drop(_334) -> [return: bb161, unwind: bb204]; // scope 21 at ui/command/command-exec.rs:92:75: 92:76
    }

    bb161: {
        _435 = const _;                  // scope 24 at ui/command/command-exec.rs:93:18: 93:24
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:93:18: 93:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[18])) }
        _340 = _435;                     // scope 24 at ui/command/command-exec.rs:93:18: 93:24
        _339 = _340;                     // scope 24 at ui/command/command-exec.rs:93:18: 93:24
        _338 = move _339 as &[&str] (Pointer(Unsize)); // scope 24 at ui/command/command-exec.rs:93:18: 93:24
        _347 = &_329;                    // scope 24 at ui/command/command-exec.rs:93:26: 93:32
        _346 = _347;                     // scope 24 at ui/command/command-exec.rs:93:26: 93:32
        _345 = core::fmt::ArgumentV1::<'_>::new_debug::<Output>(move _346) -> [return: bb162, unwind: bb204]; // scope 24 at ui/command/command-exec.rs:93:26: 93:32
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:93:26: 93:32
                                         // + user_ty: UserType(27)
                                         // + literal: Const { ty: for<'b> fn(&'b Output) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Output>}, val: Value(<ZST>) }
    }

    bb162: {
        _344 = [move _345];              // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _343 = &_344;                    // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _342 = _343;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _341 = move _342 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _337 = Arguments::<'_>::new_v1(move _338, move _341) -> [return: bb163, unwind: bb204]; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(26)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb163: {
        _336 = _print(move _337) -> [return: bb164, unwind: bb204]; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb164: {
        _350 = &(_329.0: std::process::ExitStatus); // scope 24 at ui/command/command-exec.rs:94:17: 94:40
        _349 = ExitStatus::success(move _350) -> [return: bb165, unwind: bb204]; // scope 24 at ui/command/command-exec.rs:94:17: 94:40
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:94:31: 94:38
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb165: {
        _348 = Not(move _349);           // scope 24 at ui/command/command-exec.rs:94:9: 94:41
        switchInt(move _348) -> [0: bb167, otherwise: bb166]; // scope 24 at ui/command/command-exec.rs:94:9: 94:41
    }

    bb166: {
        _351 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb204; // scope 24 at ui/command/command-exec.rs:94:9: 94:41
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:94:9: 94:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb167: {
        _354 = &(_329.2: std::vec::Vec<u8>); // scope 24 at ui/command/command-exec.rs:95:17: 95:41
        _353 = Vec::<u8>::is_empty(move _354) -> [return: bb168, unwind: bb204]; // scope 24 at ui/command/command-exec.rs:95:17: 95:41
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:95:31: 95:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb168: {
        _352 = Not(move _353);           // scope 24 at ui/command/command-exec.rs:95:9: 95:42
        switchInt(move _352) -> [0: bb170, otherwise: bb169]; // scope 24 at ui/command/command-exec.rs:95:9: 95:42
    }

    bb169: {
        _355 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb204; // scope 24 at ui/command/command-exec.rs:95:9: 95:42
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:95:9: 95:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb170: {
        _357 = &(_329.1: std::vec::Vec<u8>); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _434 = const _;                  // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 7], val: Unevaluated(main, [], Some(promoted[17])) }
        _358 = _434;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _356 = (move _357, move _358);   // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _359 = (_356.0: &std::vec::Vec<u8>); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _360 = (_356.1: &&[u8; 7]);      // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _363 = _359;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _364 = _360;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _362 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(move _363, move _364) -> [return: bb171, unwind: bb204]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 7]) -> bool {<Vec<u8> as PartialEq<&[u8; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb171: {
        _361 = Not(move _362);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _361) -> [0: bb173, otherwise: bb172]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb172: {
        _365 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _367 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _369 = _359;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _368 = _369;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _371 = _360;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _370 = _371;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _372 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _366 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _367, move _368, move _370, move _372) -> bb204; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>}, val: Value(<ZST>) }
    }

    bb173: {
        _379 = &_2;                      // scope 24 at ui/command/command-exec.rs:98:35: 98:38
        _378 = Command::new::<&String>(move _379) -> [return: bb174, unwind: bb204]; // scope 24 at ui/command/command-exec.rs:98:22: 98:39
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:98:22: 98:34
                                         // + user_ty: UserType(28)
                                         // + literal: Const { ty: fn(&String) -> Command {Command::new::<&String>}, val: Value(<ZST>) }
    }

    bb174: {
        _377 = &mut _378;                // scope 24 at ui/command/command-exec.rs:98:22: 98:57
        _376 = Command::arg::<&str>(move _377, const "exec-test7") -> [return: bb175, unwind: bb203]; // scope 24 at ui/command/command-exec.rs:98:22: 98:57
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:98:40: 98:43
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, &str) -> &'a mut Command {Command::arg::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:98:44: 98:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb175: {
        _375 = &mut (*_376);             // scope 24 at ui/command/command-exec.rs:98:22: 98:66
        _374 = Command::output(move _375) -> [return: bb176, unwind: bb203]; // scope 24 at ui/command/command-exec.rs:98:22: 98:66
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:98:58: 98:64
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Output, std::io::Error> {Command::output}, val: Value(<ZST>) }
    }

    bb176: {
        _373 = Result::<Output, std::io::Error>::unwrap(move _374) -> [return: bb177, unwind: bb203]; // scope 24 at ui/command/command-exec.rs:98:22: 98:75
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:98:67: 98:73
                                         // + literal: Const { ty: fn(Result<Output, std::io::Error>) -> Output {Result::<Output, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb177: {
        drop(_378) -> [return: bb178, unwind: bb202]; // scope 24 at ui/command/command-exec.rs:98:75: 98:76
    }

    bb178: {
        _433 = const _;                  // scope 27 at ui/command/command-exec.rs:99:18: 99:24
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:99:18: 99:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[16])) }
        _384 = _433;                     // scope 27 at ui/command/command-exec.rs:99:18: 99:24
        _383 = _384;                     // scope 27 at ui/command/command-exec.rs:99:18: 99:24
        _382 = move _383 as &[&str] (Pointer(Unsize)); // scope 27 at ui/command/command-exec.rs:99:18: 99:24
        _391 = &_373;                    // scope 27 at ui/command/command-exec.rs:99:26: 99:32
        _390 = _391;                     // scope 27 at ui/command/command-exec.rs:99:26: 99:32
        _389 = core::fmt::ArgumentV1::<'_>::new_debug::<Output>(move _390) -> [return: bb179, unwind: bb202]; // scope 27 at ui/command/command-exec.rs:99:26: 99:32
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:99:26: 99:32
                                         // + user_ty: UserType(30)
                                         // + literal: Const { ty: for<'b> fn(&'b Output) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Output>}, val: Value(<ZST>) }
    }

    bb179: {
        _388 = [move _389];              // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _387 = &_388;                    // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _386 = _387;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _385 = move _386 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _381 = Arguments::<'_>::new_v1(move _382, move _385) -> [return: bb180, unwind: bb202]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(29)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb180: {
        _380 = _print(move _381) -> [return: bb181, unwind: bb202]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb181: {
        _394 = &(_373.0: std::process::ExitStatus); // scope 27 at ui/command/command-exec.rs:100:17: 100:40
        _393 = ExitStatus::success(move _394) -> [return: bb182, unwind: bb202]; // scope 27 at ui/command/command-exec.rs:100:17: 100:40
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:100:31: 100:38
                                         // + literal: Const { ty: for<'a> fn(&'a ExitStatus) -> bool {ExitStatus::success}, val: Value(<ZST>) }
    }

    bb182: {
        _392 = Not(move _393);           // scope 27 at ui/command/command-exec.rs:100:9: 100:41
        switchInt(move _392) -> [0: bb184, otherwise: bb183]; // scope 27 at ui/command/command-exec.rs:100:9: 100:41
    }

    bb183: {
        _395 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb202; // scope 27 at ui/command/command-exec.rs:100:9: 100:41
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:100:9: 100:41
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb184: {
        _398 = &(_373.2: std::vec::Vec<u8>); // scope 27 at ui/command/command-exec.rs:101:17: 101:41
        _397 = Vec::<u8>::is_empty(move _398) -> [return: bb185, unwind: bb202]; // scope 27 at ui/command/command-exec.rs:101:17: 101:41
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:101:31: 101:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>) -> bool {Vec::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb185: {
        _396 = Not(move _397);           // scope 27 at ui/command/command-exec.rs:101:9: 101:42
        switchInt(move _396) -> [0: bb187, otherwise: bb186]; // scope 27 at ui/command/command-exec.rs:101:9: 101:42
    }

    bb186: {
        _399 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb202; // scope 27 at ui/command/command-exec.rs:101:9: 101:42
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:101:9: 101:42
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb187: {
        _401 = &(_373.1: std::vec::Vec<u8>); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _432 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[u8; 7], val: Unevaluated(main, [], Some(promoted[15])) }
        _402 = _432;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _400 = (move _401, move _402);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _403 = (_400.0: &std::vec::Vec<u8>); // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _404 = (_400.1: &&[u8; 7]);      // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _407 = _403;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _408 = _404;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _406 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(move _407, move _408) -> [return: bb188, unwind: bb202]; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<u8>, &'b &[u8; 7]) -> bool {<Vec<u8> as PartialEq<&[u8; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb188: {
        _405 = Not(move _406);           // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _405) -> [0: bb190, otherwise: bb189]; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb189: {
        _409 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _411 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _413 = _403;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _412 = _413;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _415 = _404;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _414 = _415;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _416 = Option::<Arguments<'_>>::None; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _410 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _411, move _412, move _414, move _416) -> bb202; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<u8>, &'b &[u8; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>}, val: Value(<ZST>) }
    }

    bb190: {
        drop(_373) -> [return: bb191, unwind: bb204]; // scope 24 at ui/command/command-exec.rs:103:5: 103:6
    }

    bb191: {
        drop(_329) -> [return: bb192, unwind: bb206]; // scope 21 at ui/command/command-exec.rs:103:5: 103:6
    }

    bb192: {
        drop(_297) -> [return: bb193, unwind: bb208]; // scope 18 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb193: {
        drop(_265) -> [return: bb194, unwind: bb210]; // scope 15 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb194: {
        drop(_233) -> [return: bb195, unwind: bb212]; // scope 12 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb195: {
        drop(_201) -> [return: bb196, unwind: bb214]; // scope 9 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb196: {
        drop(_169) -> [return: bb197, unwind: bb228]; // scope 2 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb197: {
        drop(_2) -> [return: bb198, unwind: bb229]; // scope 1 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb198: {
        drop(_1) -> bb201;               // scope 0 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb199: {
        drop(_2) -> [return: bb200, unwind: bb229]; // scope 1 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb200: {
        drop(_1) -> bb201;               // scope 0 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb201: {
        return;                          // scope 0 at ui/command/command-exec.rs:104:2: 104:2
    }

    bb202 (cleanup): {
        drop(_373) -> bb204;             // scope 24 at ui/command/command-exec.rs:103:5: 103:6
    }

    bb203 (cleanup): {
        drop(_378) -> bb204;             // scope 24 at ui/command/command-exec.rs:98:75: 98:76
    }

    bb204 (cleanup): {
        drop(_329) -> bb206;             // scope 21 at ui/command/command-exec.rs:103:5: 103:6
    }

    bb205 (cleanup): {
        drop(_334) -> bb206;             // scope 21 at ui/command/command-exec.rs:92:75: 92:76
    }

    bb206 (cleanup): {
        drop(_297) -> bb208;             // scope 18 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb207 (cleanup): {
        drop(_302) -> bb208;             // scope 18 at ui/command/command-exec.rs:86:71: 86:72
    }

    bb208 (cleanup): {
        drop(_265) -> bb210;             // scope 15 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb209 (cleanup): {
        drop(_270) -> bb210;             // scope 15 at ui/command/command-exec.rs:81:71: 81:72
    }

    bb210 (cleanup): {
        drop(_233) -> bb212;             // scope 12 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb211 (cleanup): {
        drop(_238) -> bb212;             // scope 12 at ui/command/command-exec.rs:76:71: 76:72
    }

    bb212 (cleanup): {
        drop(_201) -> bb214;             // scope 9 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb213 (cleanup): {
        drop(_206) -> bb214;             // scope 9 at ui/command/command-exec.rs:71:71: 71:72
    }

    bb214 (cleanup): {
        drop(_169) -> bb228;             // scope 2 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb215 (cleanup): {
        drop(_174) -> bb228;             // scope 2 at ui/command/command-exec.rs:66:71: 66:72
    }

    bb216 (cleanup): {
        drop(_138) -> bb227;             // scope 3 at ui/command/command-exec.rs:59:13: 59:14
    }

    bb217 (cleanup): {
        drop(_144) -> bb227;             // scope 3 at ui/command/command-exec.rs:57:87: 57:88
    }

    bb218 (cleanup): {
        drop(_119) -> bb227;             // scope 3 at ui/command/command-exec.rs:54:13: 54:14
    }

    bb219 (cleanup): {
        drop(_125) -> bb227;             // scope 3 at ui/command/command-exec.rs:52:80: 52:81
    }

    bb220 (cleanup): {
        drop(_94) -> bb227;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb221 (cleanup): {
        drop(_91) -> bb227;              // scope 3 at ui/command/command-exec.rs:46:91: 46:92
    }

    bb222 (cleanup): {
        drop(_76) -> bb227;              // scope 3 at ui/command/command-exec.rs:40:73: 40:74
    }

    bb223 (cleanup): {
        drop(_62) -> bb227;              // scope 3 at ui/command/command-exec.rs:35:54: 35:55
    }

    bb224 (cleanup): {
        drop(_49) -> bb227;              // scope 3 at ui/command/command-exec.rs:30:56: 30:57
    }

    bb225 (cleanup): {
        drop(_29) -> bb227;              // scope 3 at ui/command/command-exec.rs:27:13: 27:14
    }

    bb226 (cleanup): {
        drop(_33) -> bb227;              // scope 3 at ui/command/command-exec.rs:25:64: 25:65
    }

    bb227 (cleanup): {
        drop(_8) -> bb228;               // scope 2 at ui/command/command-exec.rs:64:5: 64:6
    }

    bb228 (cleanup): {
        drop(_2) -> bb229;               // scope 1 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb229 (cleanup): {
        drop(_1) -> bb230;               // scope 0 at ui/command/command-exec.rs:104:1: 104:2
    }

    bb230 (cleanup): {
        resume;                          // scope 0 at ui/command/command-exec.rs:16:1: 104:2
    }

    bb231: {
        goto -> bb84;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }

    bb232: {
        goto -> bb84;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }

    bb233: {
        goto -> bb84;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }

    bb234: {
        goto -> bb84;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }

    bb235: {
        goto -> bb84;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-exec.rs:61:25: 61:47
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-exec.rs:61:25: 61:47

    bb0: {
        _1 = [const "unknown argument: "]; // scope 0 at ui/command/command-exec.rs:61:25: 61:47
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:61:25: 61:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:61:25: 61:47
        return;                          // scope 0 at ui/command/command-exec.rs:61:25: 61:47
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-exec.rs:58:24: 58:45
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-exec.rs:58:24: 58:45

    bb0: {
        _1 = [const "failed to spawn: "]; // scope 0 at ui/command/command-exec.rs:58:24: 58:45
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:58:24: 58:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:58:24: 58:45
        return;                          // scope 0 at ui/command/command-exec.rs:58:24: 58:45
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-exec.rs:53:24: 53:45
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-exec.rs:53:24: 53:45

    bb0: {
        _1 = [const "failed to spawn: "]; // scope 0 at ui/command/command-exec.rs:53:24: 53:45
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:53:24: 53:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:53:24: 53:45
        return;                          // scope 0 at ui/command/command-exec.rs:53:24: 53:45
    }
}

promoted[3] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[4] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-exec.rs:48:26: 48:34
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-exec.rs:48:26: 48:34

    bb0: {
        _1 = [const "passed\n"];         // scope 0 at ui/command/command-exec.rs:48:26: 48:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:48:26: 48:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:48:26: 48:34
        return;                          // scope 0 at ui/command/command-exec.rs:48:26: 48:34
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/command/command-exec.rs:47:59: 47:64

    bb0: {
        _1 = const "ABC";                // scope 0 at ui/command/command-exec.rs:47:59: 47:64
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:47:59: 47:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[7] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-exec.rs:41:26: 41:34
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-exec.rs:41:26: 41:34

    bb0: {
        _1 = [const "passed\n"];         // scope 0 at ui/command/command-exec.rs:41:26: 41:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:41:26: 41:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:41:26: 41:34
        return;                          // scope 0 at ui/command/command-exec.rs:41:26: 41:34
    }
}

promoted[8] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-exec.rs:36:26: 36:34
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-exec.rs:36:26: 36:34

    bb0: {
        _1 = [const "passed\n"];         // scope 0 at ui/command/command-exec.rs:36:26: 36:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:36:26: 36:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:36:26: 36:34
        return;                          // scope 0 at ui/command/command-exec.rs:36:26: 36:34
    }
}

promoted[10] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-exec.rs:31:26: 31:34
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-exec.rs:31:26: 31:34

    bb0: {
        _1 = [const "passed\n"];         // scope 0 at ui/command/command-exec.rs:31:26: 31:34
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:31:26: 31:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:31:26: 31:34
        return;                          // scope 0 at ui/command/command-exec.rs:31:26: 31:34
    }
}

promoted[12] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-exec.rs:26:24: 26:45
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-exec.rs:26:24: 26:45

    bb0: {
        _1 = [const "failed to spawn: "]; // scope 0 at ui/command/command-exec.rs:26:24: 26:45
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:26:24: 26:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:26:24: 26:45
        return;                          // scope 0 at ui/command/command-exec.rs:26:24: 26:45
    }
}

promoted[13] in main: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[14] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/command/command-exec.rs:22:33: 22:41
    let mut _1: [&str; 1];               // in scope 0 at ui/command/command-exec.rs:22:33: 22:41

    bb0: {
        _1 = [const "passed\n"];         // scope 0 at ui/command/command-exec.rs:22:33: 22:41
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:22:33: 22:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:22:33: 22:41
        return;                          // scope 0 at ui/command/command-exec.rs:22:33: 22:41
    }
}

promoted[15] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 7];                // in scope 0 at ui/command/command-exec.rs:102:35: 102:46

    bb0: {
        _1 = const b"passed\n";          // scope 0 at ui/command/command-exec.rs:102:35: 102:46
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:102:35: 102:46
                                         // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc7)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc7 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[16] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/command/command-exec.rs:99:18: 99:24
    let mut _1: [&str; 2];               // in scope 0 at ui/command/command-exec.rs:99:18: 99:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/command/command-exec.rs:99:18: 99:24
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:99:18: 99:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:99:18: 99:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:99:18: 99:24
        return;                          // scope 0 at ui/command/command-exec.rs:99:18: 99:24
    }
}

promoted[17] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 7];                // in scope 0 at ui/command/command-exec.rs:96:35: 96:46

    bb0: {
        _1 = const b"passed\n";          // scope 0 at ui/command/command-exec.rs:96:35: 96:46
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:96:35: 96:46
                                         // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc6)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc6 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[18] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/command/command-exec.rs:93:18: 93:24
    let mut _1: [&str; 2];               // in scope 0 at ui/command/command-exec.rs:93:18: 93:24

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/command/command-exec.rs:93:18: 93:24
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:93:18: 93:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:93:18: 93:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/command/command-exec.rs:93:18: 93:24
        return;                          // scope 0 at ui/command/command-exec.rs:93:18: 93:24
    }
}

promoted[19] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 7];                // in scope 0 at ui/command/command-exec.rs:89:31: 89:42

    bb0: {
        _1 = const b"passed\n";          // scope 0 at ui/command/command-exec.rs:89:31: 89:42
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:89:31: 89:42
                                         // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc5)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc5 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[20] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 7];                // in scope 0 at ui/command/command-exec.rs:84:31: 84:42

    bb0: {
        _1 = const b"passed\n";          // scope 0 at ui/command/command-exec.rs:84:31: 84:42
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:84:31: 84:42
                                         // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc4)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc4 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[21] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 7];                // in scope 0 at ui/command/command-exec.rs:79:31: 79:42

    bb0: {
        _1 = const b"passed\n";          // scope 0 at ui/command/command-exec.rs:79:31: 79:42
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:79:31: 79:42
                                         // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc3)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc3 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[22] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 7];                // in scope 0 at ui/command/command-exec.rs:74:31: 74:42

    bb0: {
        _1 = const b"passed\n";          // scope 0 at ui/command/command-exec.rs:74:31: 74:42
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:74:31: 74:42
                                         // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc2)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc2 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[23] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[u8; 7];                // in scope 0 at ui/command/command-exec.rs:69:31: 69:42

    bb0: {
        _1 = const b"passed\n";          // scope 0 at ui/command/command-exec.rs:69:31: 69:42
                                         // mir::Constant
                                         // + span: ui/command/command-exec.rs:69:31: 69:42
                                         // + literal: Const { ty: &[u8; 7], val: Value(Scalar(alloc1)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

alloc1 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}
