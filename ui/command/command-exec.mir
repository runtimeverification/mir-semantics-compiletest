// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::env::Args;
    let mut _3: std::option::Option<std::string::String>;
    let mut _4: &mut std::env::Args;
    let mut _5: std::option::Option<std::string::String>;
    let mut _6: &mut std::env::Args;
    let mut _7: isize;
    let mut _9: &str;
    let _10: &str;
    let mut _11: &std::string::String;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: bool;
    let mut _18: bool;
    let mut _19: bool;
    let _20: ();
    let mut _21: std::fmt::Arguments<'_>;
    let mut _22: &[&str];
    let mut _24: &mut std::process::Command;
    let mut _25: &mut std::process::Command;
    let mut _26: &mut std::process::Command;
    let mut _27: std::process::Command;
    let mut _28: &std::string::String;
    let _29: !;
    let mut _30: std::fmt::Arguments<'_>;
    let mut _31: &[&str];
    let mut _32: &[core::fmt::rt::Argument<'_>];
    let _33: &[core::fmt::rt::Argument<'_>; 1];
    let _34: [core::fmt::rt::Argument<'_>; 1];
    let mut _35: core::fmt::rt::Argument<'_>;
    let _36: &std::io::Error;
    let _37: std::io::Error;
    let mut _38: &mut std::process::Command;
    let mut _39: std::process::Command;
    let _40: ();
    let mut _41: std::fmt::Arguments<'_>;
    let mut _42: &[&str];
    let _43: std::io::Error;
    let mut _44: &mut std::process::Command;
    let mut _45: &mut std::process::Command;
    let mut _46: &mut std::process::Command;
    let mut _47: std::process::Command;
    let mut _48: &std::string::String;
    let _49: ();
    let mut _50: std::fmt::Arguments<'_>;
    let mut _51: &[&str];
    let _52: std::io::Error;
    let mut _53: &mut std::process::Command;
    let mut _54: &mut std::process::Command;
    let mut _55: &mut std::process::Command;
    let mut _56: std::process::Command;
    let mut _57: &std::string::String;
    let _58: ();
    let mut _59: std::fmt::Arguments<'_>;
    let mut _60: &[&str];
    let _61: ();
    let _62: std::io::Error;
    let mut _63: &mut std::process::Command;
    let mut _64: &mut std::process::Command;
    let mut _65: &mut std::process::Command;
    let mut _66: std::process::Command;
    let mut _67: (&std::string::String, &&str);
    let mut _68: &std::string::String;
    let _69: std::string::String;
    let mut _70: std::result::Result<std::string::String, std::env::VarError>;
    let mut _73: bool;
    let mut _74: bool;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let _78: ();
    let mut _79: std::fmt::Arguments<'_>;
    let mut _80: &[&str];
    let mut _82: &mut std::process::Command;
    let mut _83: &mut std::process::Command;
    let mut _84: &mut std::process::Command;
    let mut _85: &mut std::process::Command;
    let mut _86: &mut std::process::Command;
    let mut _87: std::process::Command;
    let _88: !;
    let mut _89: std::fmt::Arguments<'_>;
    let mut _90: &[&str];
    let mut _91: &[core::fmt::rt::Argument<'_>];
    let _92: &[core::fmt::rt::Argument<'_>; 1];
    let _93: [core::fmt::rt::Argument<'_>; 1];
    let mut _94: core::fmt::rt::Argument<'_>;
    let _95: &std::io::Error;
    let mut _97: &mut std::process::Command;
    let mut _98: &mut std::process::Command;
    let mut _99: &mut std::process::Command;
    let mut _100: &mut std::process::Command;
    let mut _101: &mut std::process::Command;
    let mut _102: std::process::Command;
    let _103: !;
    let mut _104: std::fmt::Arguments<'_>;
    let mut _105: &[&str];
    let mut _106: &[core::fmt::rt::Argument<'_>];
    let _107: &[core::fmt::rt::Argument<'_>; 1];
    let _108: [core::fmt::rt::Argument<'_>; 1];
    let mut _109: core::fmt::rt::Argument<'_>;
    let _110: &std::io::Error;
    let _111: !;
    let mut _112: std::fmt::Arguments<'_>;
    let mut _113: &[&str];
    let mut _114: &[core::fmt::rt::Argument<'_>];
    let _115: &[core::fmt::rt::Argument<'_>; 1];
    let _116: [core::fmt::rt::Argument<'_>; 1];
    let mut _117: core::fmt::rt::Argument<'_>;
    let _118: &std::string::String;
    let mut _120: std::result::Result<std::process::Output, std::io::Error>;
    let mut _121: &mut std::process::Command;
    let mut _122: &mut std::process::Command;
    let mut _123: &mut std::process::Command;
    let mut _124: std::process::Command;
    let mut _125: &std::string::String;
    let mut _126: bool;
    let mut _127: bool;
    let mut _128: &std::process::ExitStatus;
    let mut _129: !;
    let mut _130: bool;
    let mut _131: bool;
    let mut _132: &std::vec::Vec<u8>;
    let mut _133: !;
    let mut _134: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _135: &std::vec::Vec<u8>;
    let mut _138: bool;
    let mut _139: bool;
    let _141: !;
    let mut _142: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _144: std::result::Result<std::process::Output, std::io::Error>;
    let mut _145: &mut std::process::Command;
    let mut _146: &mut std::process::Command;
    let mut _147: &mut std::process::Command;
    let mut _148: std::process::Command;
    let mut _149: &std::string::String;
    let mut _150: bool;
    let mut _151: bool;
    let mut _152: &std::process::ExitStatus;
    let mut _153: !;
    let mut _154: bool;
    let mut _155: bool;
    let mut _156: &std::vec::Vec<u8>;
    let mut _157: !;
    let mut _158: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _159: &std::vec::Vec<u8>;
    let mut _162: bool;
    let mut _163: bool;
    let _165: !;
    let mut _166: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _168: std::result::Result<std::process::Output, std::io::Error>;
    let mut _169: &mut std::process::Command;
    let mut _170: &mut std::process::Command;
    let mut _171: &mut std::process::Command;
    let mut _172: std::process::Command;
    let mut _173: &std::string::String;
    let mut _174: bool;
    let mut _175: bool;
    let mut _176: &std::process::ExitStatus;
    let mut _177: !;
    let mut _178: bool;
    let mut _179: bool;
    let mut _180: &std::vec::Vec<u8>;
    let mut _181: !;
    let mut _182: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _183: &std::vec::Vec<u8>;
    let mut _186: bool;
    let mut _187: bool;
    let _189: !;
    let mut _190: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _192: std::result::Result<std::process::Output, std::io::Error>;
    let mut _193: &mut std::process::Command;
    let mut _194: &mut std::process::Command;
    let mut _195: &mut std::process::Command;
    let mut _196: std::process::Command;
    let mut _197: &std::string::String;
    let mut _198: bool;
    let mut _199: bool;
    let mut _200: &std::process::ExitStatus;
    let mut _201: !;
    let mut _202: bool;
    let mut _203: bool;
    let mut _204: &std::vec::Vec<u8>;
    let mut _205: !;
    let mut _206: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _207: &std::vec::Vec<u8>;
    let mut _210: bool;
    let mut _211: bool;
    let _213: !;
    let mut _214: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _216: std::result::Result<std::process::Output, std::io::Error>;
    let mut _217: &mut std::process::Command;
    let mut _218: &mut std::process::Command;
    let mut _219: &mut std::process::Command;
    let mut _220: std::process::Command;
    let mut _221: &std::string::String;
    let mut _222: bool;
    let mut _223: bool;
    let mut _224: &std::process::ExitStatus;
    let mut _225: !;
    let mut _226: bool;
    let mut _227: bool;
    let mut _228: &std::vec::Vec<u8>;
    let mut _229: !;
    let mut _230: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _231: &std::vec::Vec<u8>;
    let mut _234: bool;
    let mut _235: bool;
    let _237: !;
    let mut _238: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _239: bool;
    let mut _241: std::result::Result<std::process::Output, std::io::Error>;
    let mut _242: &mut std::process::Command;
    let mut _243: &mut std::process::Command;
    let mut _244: &mut std::process::Command;
    let mut _245: std::process::Command;
    let mut _246: &std::string::String;
    let _247: ();
    let mut _248: std::fmt::Arguments<'_>;
    let mut _249: &[&str];
    let mut _250: &[core::fmt::rt::Argument<'_>];
    let _251: &[core::fmt::rt::Argument<'_>; 1];
    let _252: [core::fmt::rt::Argument<'_>; 1];
    let mut _253: core::fmt::rt::Argument<'_>;
    let _254: &std::process::Output;
    let mut _255: bool;
    let mut _256: bool;
    let mut _257: &std::process::ExitStatus;
    let mut _258: !;
    let mut _259: bool;
    let mut _260: bool;
    let mut _261: &std::vec::Vec<u8>;
    let mut _262: !;
    let mut _263: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _264: &std::vec::Vec<u8>;
    let mut _267: bool;
    let mut _268: bool;
    let _270: !;
    let mut _271: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _273: std::result::Result<std::process::Output, std::io::Error>;
    let mut _274: &mut std::process::Command;
    let mut _275: &mut std::process::Command;
    let mut _276: &mut std::process::Command;
    let mut _277: std::process::Command;
    let mut _278: &std::string::String;
    let _279: ();
    let mut _280: std::fmt::Arguments<'_>;
    let mut _281: &[&str];
    let mut _282: &[core::fmt::rt::Argument<'_>];
    let _283: &[core::fmt::rt::Argument<'_>; 1];
    let _284: [core::fmt::rt::Argument<'_>; 1];
    let mut _285: core::fmt::rt::Argument<'_>;
    let _286: &std::process::Output;
    let mut _287: bool;
    let mut _288: bool;
    let mut _289: &std::process::ExitStatus;
    let mut _290: !;
    let mut _291: bool;
    let mut _292: bool;
    let mut _293: &std::vec::Vec<u8>;
    let mut _294: !;
    let mut _295: (&std::vec::Vec<u8>, &&[u8; 7]);
    let mut _296: &std::vec::Vec<u8>;
    let mut _299: bool;
    let mut _300: bool;
    let _302: !;
    let mut _303: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug args => _1;
        let _2: std::string::String;
        scope 2 {
            debug me => _2;
            let _119: std::process::Output;
            scope 3 {
                debug arg => _8;
                let _8: std::string::String;
                let _23: std::io::Error;
                let _71: &std::string::String;
                let _72: &&str;
                let _81: std::io::Error;
                let _96: std::io::Error;
                let mut _313: &[&str; 1];
                let mut _316: &[&str; 1];
                let mut _317: &&str;
                let mut _318: &[&str; 1];
                let mut _319: &[&str; 1];
                let mut _320: &[&str; 1];
                let mut _322: &[&str; 1];
                scope 4 {
                    debug err => _23;
                    let mut _321: &[&str; 1];
                }
                scope 5 {
                    debug left_val => _71;
                    debug right_val => _72;
                    let _75: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _75;
                    }
                }
                scope 7 {
                    debug err => _81;
                    let mut _315: &[&str; 1];
                }
                scope 8 {
                    debug err => _96;
                    let mut _314: &[&str; 1];
                }
            }
            scope 9 {
                debug output => _119;
                let _136: &std::vec::Vec<u8>;
                let _137: &&[u8; 7];
                let _143: std::process::Output;
                let mut _312: &&[u8; 7];
                scope 10 {
                    debug left_val => _136;
                    debug right_val => _137;
                    let _140: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _140;
                    }
                }
                scope 12 {
                    debug output => _143;
                    let _160: &std::vec::Vec<u8>;
                    let _161: &&[u8; 7];
                    let _167: std::process::Output;
                    let mut _311: &&[u8; 7];
                    scope 13 {
                        debug left_val => _160;
                        debug right_val => _161;
                        let _164: core::panicking::AssertKind;
                        scope 14 {
                            debug kind => _164;
                        }
                    }
                    scope 15 {
                        debug output => _167;
                        let _184: &std::vec::Vec<u8>;
                        let _185: &&[u8; 7];
                        let _191: std::process::Output;
                        let mut _310: &&[u8; 7];
                        scope 16 {
                            debug left_val => _184;
                            debug right_val => _185;
                            let _188: core::panicking::AssertKind;
                            scope 17 {
                                debug kind => _188;
                            }
                        }
                        scope 18 {
                            debug output => _191;
                            let _208: &std::vec::Vec<u8>;
                            let _209: &&[u8; 7];
                            let _215: std::process::Output;
                            let mut _309: &&[u8; 7];
                            scope 19 {
                                debug left_val => _208;
                                debug right_val => _209;
                                let _212: core::panicking::AssertKind;
                                scope 20 {
                                    debug kind => _212;
                                }
                            }
                            scope 21 {
                                debug output => _215;
                                let _232: &std::vec::Vec<u8>;
                                let _233: &&[u8; 7];
                                let _240: std::process::Output;
                                let mut _308: &&[u8; 7];
                                scope 22 {
                                    debug left_val => _232;
                                    debug right_val => _233;
                                    let _236: core::panicking::AssertKind;
                                    scope 23 {
                                        debug kind => _236;
                                    }
                                }
                                scope 24 {
                                    debug output => _240;
                                    let _265: &std::vec::Vec<u8>;
                                    let _266: &&[u8; 7];
                                    let _272: std::process::Output;
                                    let mut _306: &&[u8; 7];
                                    let mut _307: &[&str; 2];
                                    scope 25 {
                                        debug left_val => _265;
                                        debug right_val => _266;
                                        let _269: core::panicking::AssertKind;
                                        scope 26 {
                                            debug kind => _269;
                                        }
                                    }
                                    scope 27 {
                                        debug output => _272;
                                        let _297: &std::vec::Vec<u8>;
                                        let _298: &&[u8; 7];
                                        let mut _304: &&[u8; 7];
                                        let mut _305: &[&str; 2];
                                        scope 28 {
                                            debug left_val => _297;
                                            debug right_val => _298;
                                            let _301: core::panicking::AssertKind;
                                            scope 29 {
                                                debug kind => _301;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = args() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = &mut _1;
        _3 = <Args as Iterator>::next(move _4) -> [return: bb2, unwind: bb230];
    }

    bb2: {
        _2 = Option::<String>::unwrap(move _3) -> [return: bb3, unwind: bb230];
    }

    bb3: {
        _6 = &mut _1;
        _5 = <Args as Iterator>::next(move _6) -> [return: bb4, unwind: bb229];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [1: bb5, otherwise: bb85];
    }

    bb5: {
        _8 = move ((_5 as Some).0: std::string::String);
        _11 = &_8;
        _10 = <String as Index<RangeFull>>::index(move _11, const RangeFull) -> [return: bb6, unwind: bb228];
    }

    bb6: {
        _9 = _10;
        _12 = <str as PartialEq>::eq(_9, const "test1") -> [return: bb7, unwind: bb228];
    }

    bb7: {
        switchInt(move _12) -> [0: bb8, otherwise: bb23];
    }

    bb8: {
        _13 = <str as PartialEq>::eq(_9, const "exec-test1") -> [return: bb9, unwind: bb228];
    }

    bb9: {
        switchInt(move _13) -> [0: bb10, otherwise: bb25];
    }

    bb10: {
        _14 = <str as PartialEq>::eq(_9, const "exec-test2") -> [return: bb11, unwind: bb228];
    }

    bb11: {
        switchInt(move _14) -> [0: bb12, otherwise: bb32];
    }

    bb12: {
        _15 = <str as PartialEq>::eq(_9, const "exec-test3") -> [return: bb13, unwind: bb228];
    }

    bb13: {
        switchInt(move _15) -> [0: bb14, otherwise: bb38];
    }

    bb14: {
        _16 = <str as PartialEq>::eq(_9, const "exec-test4") -> [return: bb15, unwind: bb228];
    }

    bb15: {
        switchInt(move _16) -> [0: bb16, otherwise: bb45];
    }

    bb16: {
        _17 = <str as PartialEq>::eq(_9, const "exec-test5") -> [return: bb17, unwind: bb228];
    }

    bb17: {
        switchInt(move _17) -> [0: bb18, otherwise: bb52];
    }

    bb18: {
        _18 = <str as PartialEq>::eq(_9, const "exec-test6") -> [return: bb19, unwind: bb228];
    }

    bb19: {
        switchInt(move _18) -> [0: bb20, otherwise: bb66];
    }

    bb20: {
        _19 = <str as PartialEq>::eq(_9, const "exec-test7") -> [return: bb21, unwind: bb228];
    }

    bb21: {
        switchInt(move _19) -> [0: bb22, otherwise: bb74];
    }

    bb22: {
        _313 = const _;
        _113 = _313 as &[&str] (Pointer(Unsize));
        _118 = &_8;
        _117 = core::fmt::rt::Argument::<'_>::new_display::<String>(_118) -> [return: bb82, unwind: bb228];
    }

    bb23: {
        _322 = const _;
        _22 = _322 as &[&str] (Pointer(Unsize));
        _21 = Arguments::<'_>::new_const(move _22) -> [return: bb24, unwind: bb228];
    }

    bb24: {
        _20 = _print(move _21) -> [return: bb232, unwind: bb228];
    }

    bb25: {
        _28 = &_2;
        _27 = Command::new::<&String>(move _28) -> [return: bb26, unwind: bb228];
    }

    bb26: {
        _26 = &mut _27;
        _25 = Command::arg::<&str>(move _26, const "test1") -> [return: bb27, unwind: bb227];
    }

    bb27: {
        _24 = _25;
        _23 = <Command as std::os::unix::process::CommandExt>::exec(move _24) -> [return: bb28, unwind: bb227];
    }

    bb28: {
        drop(_27) -> [return: bb29, unwind: bb226];
    }

    bb29: {
        _321 = const _;
        _31 = _321 as &[&str] (Pointer(Unsize));
        _36 = &_23;
        _35 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_36) -> [return: bb30, unwind: bb226];
    }

    bb30: {
        _34 = [move _35];
        _33 = &_34;
        _32 = _33 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _30 = Arguments::<'_>::new_v1(move _31, move _32) -> [return: bb31, unwind: bb226];
    }

    bb31: {
        _29 = panic_fmt(move _30) -> bb226;
    }

    bb32: {
        _39 = Command::new::<&str>(const "/path/to/nowhere") -> [return: bb33, unwind: bb228];
    }

    bb33: {
        _38 = &mut _39;
        _37 = <Command as std::os::unix::process::CommandExt>::exec(move _38) -> [return: bb34, unwind: bb225];
    }

    bb34: {
        drop(_37) -> [return: bb35, unwind: bb225];
    }

    bb35: {
        drop(_39) -> [return: bb36, unwind: bb228];
    }

    bb36: {
        _320 = const _;
        _42 = _320 as &[&str] (Pointer(Unsize));
        _41 = Arguments::<'_>::new_const(move _42) -> [return: bb37, unwind: bb228];
    }

    bb37: {
        _40 = _print(move _41) -> [return: bb233, unwind: bb228];
    }

    bb38: {
        _48 = &_2;
        _47 = Command::new::<&String>(move _48) -> [return: bb39, unwind: bb228];
    }

    bb39: {
        _46 = &mut _47;
        _45 = Command::arg::<&str>(move _46, const "bad\0") -> [return: bb40, unwind: bb224];
    }

    bb40: {
        _44 = _45;
        _43 = <Command as std::os::unix::process::CommandExt>::exec(move _44) -> [return: bb41, unwind: bb224];
    }

    bb41: {
        drop(_43) -> [return: bb42, unwind: bb224];
    }

    bb42: {
        drop(_47) -> [return: bb43, unwind: bb228];
    }

    bb43: {
        _319 = const _;
        _51 = _319 as &[&str] (Pointer(Unsize));
        _50 = Arguments::<'_>::new_const(move _51) -> [return: bb44, unwind: bb228];
    }

    bb44: {
        _49 = _print(move _50) -> [return: bb234, unwind: bb228];
    }

    bb45: {
        _57 = &_2;
        _56 = Command::new::<&String>(move _57) -> [return: bb46, unwind: bb228];
    }

    bb46: {
        _55 = &mut _56;
        _54 = Command::current_dir::<&str>(move _55, const "/path/to/nowhere") -> [return: bb47, unwind: bb223];
    }

    bb47: {
        _53 = _54;
        _52 = <Command as std::os::unix::process::CommandExt>::exec(move _53) -> [return: bb48, unwind: bb223];
    }

    bb48: {
        drop(_52) -> [return: bb49, unwind: bb223];
    }

    bb49: {
        drop(_56) -> [return: bb50, unwind: bb228];
    }

    bb50: {
        _318 = const _;
        _60 = _318 as &[&str] (Pointer(Unsize));
        _59 = Arguments::<'_>::new_const(move _60) -> [return: bb51, unwind: bb228];
    }

    bb51: {
        _58 = _print(move _59) -> [return: bb235, unwind: bb228];
    }

    bb52: {
        _61 = set_var::<&str, &str>(const "VARIABLE", const "ABC") -> [return: bb53, unwind: bb228];
    }

    bb53: {
        _66 = Command::new::<&str>(const "definitely-not-a-real-binary") -> [return: bb54, unwind: bb228];
    }

    bb54: {
        _65 = &mut _66;
        _64 = Command::env::<&str, &str>(move _65, const "VARIABLE", const "XYZ") -> [return: bb55, unwind: bb222];
    }

    bb55: {
        _63 = _64;
        _62 = <Command as std::os::unix::process::CommandExt>::exec(move _63) -> [return: bb56, unwind: bb222];
    }

    bb56: {
        drop(_62) -> [return: bb57, unwind: bb222];
    }

    bb57: {
        drop(_66) -> [return: bb58, unwind: bb228];
    }

    bb58: {
        _70 = var::<&str>(const "VARIABLE") -> [return: bb59, unwind: bb228];
    }

    bb59: {
        _69 = Result::<String, VarError>::unwrap(move _70) -> [return: bb60, unwind: bb228];
    }

    bb60: {
        _68 = &_69;
        _317 = const _;
        _67 = (move _68, _317);
        _71 = (_67.0: &std::string::String);
        _72 = (_67.1: &&str);
        _74 = <String as PartialEq<&str>>::eq(_71, _72) -> [return: bb61, unwind: bb221];
    }

    bb61: {
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<String, &str>(move _75, _71, _72, move _77) -> bb221;
    }

    bb63: {
        drop(_69) -> [return: bb64, unwind: bb228];
    }

    bb64: {
        _316 = const _;
        _80 = _316 as &[&str] (Pointer(Unsize));
        _79 = Arguments::<'_>::new_const(move _80) -> [return: bb65, unwind: bb228];
    }

    bb65: {
        _78 = _print(move _79) -> [return: bb236, unwind: bb228];
    }

    bb66: {
        _87 = Command::new::<&str>(const "echo") -> [return: bb67, unwind: bb228];
    }

    bb67: {
        _86 = &mut _87;
        _85 = Command::arg::<&str>(move _86, const "passed") -> [return: bb68, unwind: bb220];
    }

    bb68: {
        _84 = _85;
        _83 = Command::env_clear(move _84) -> [return: bb69, unwind: bb220];
    }

    bb69: {
        _82 = _83;
        _81 = <Command as std::os::unix::process::CommandExt>::exec(move _82) -> [return: bb70, unwind: bb220];
    }

    bb70: {
        drop(_87) -> [return: bb71, unwind: bb219];
    }

    bb71: {
        _315 = const _;
        _90 = _315 as &[&str] (Pointer(Unsize));
        _95 = &_81;
        _94 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_95) -> [return: bb72, unwind: bb219];
    }

    bb72: {
        _93 = [move _94];
        _92 = &_93;
        _91 = _92 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _89 = Arguments::<'_>::new_v1(move _90, move _91) -> [return: bb73, unwind: bb219];
    }

    bb73: {
        _88 = panic_fmt(move _89) -> bb219;
    }

    bb74: {
        _102 = Command::new::<&str>(const "echo") -> [return: bb75, unwind: bb228];
    }

    bb75: {
        _101 = &mut _102;
        _100 = Command::arg::<&str>(move _101, const "passed") -> [return: bb76, unwind: bb218];
    }

    bb76: {
        _99 = _100;
        _98 = Command::env_remove::<&str>(move _99, const "PATH") -> [return: bb77, unwind: bb218];
    }

    bb77: {
        _97 = _98;
        _96 = <Command as std::os::unix::process::CommandExt>::exec(move _97) -> [return: bb78, unwind: bb218];
    }

    bb78: {
        drop(_102) -> [return: bb79, unwind: bb217];
    }

    bb79: {
        _314 = const _;
        _105 = _314 as &[&str] (Pointer(Unsize));
        _110 = &_96;
        _109 = core::fmt::rt::Argument::<'_>::new_display::<std::io::Error>(_110) -> [return: bb80, unwind: bb217];
    }

    bb80: {
        _108 = [move _109];
        _107 = &_108;
        _106 = _107 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _104 = Arguments::<'_>::new_v1(move _105, move _106) -> [return: bb81, unwind: bb217];
    }

    bb81: {
        _103 = panic_fmt(move _104) -> bb217;
    }

    bb82: {
        _116 = [move _117];
        _115 = &_116;
        _114 = _115 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _112 = Arguments::<'_>::new_v1(move _113, move _114) -> [return: bb83, unwind: bb228];
    }

    bb83: {
        _111 = panic_fmt(move _112) -> bb228;
    }

    bb84: {
        drop(_8) -> [return: bb200, unwind: bb229];
    }

    bb85: {
        drop(_5) -> [return: bb86, unwind: bb229];
    }

    bb86: {
        _125 = &_2;
        _124 = Command::new::<&String>(move _125) -> [return: bb87, unwind: bb229];
    }

    bb87: {
        _123 = &mut _124;
        _122 = Command::arg::<&str>(move _123, const "exec-test1") -> [return: bb88, unwind: bb216];
    }

    bb88: {
        _121 = _122;
        _120 = Command::output(move _121) -> [return: bb89, unwind: bb216];
    }

    bb89: {
        _119 = Result::<Output, std::io::Error>::unwrap(move _120) -> [return: bb90, unwind: bb216];
    }

    bb90: {
        drop(_124) -> [return: bb91, unwind: bb215];
    }

    bb91: {
        _128 = &(_119.0: std::process::ExitStatus);
        _127 = ExitStatus::success(move _128) -> [return: bb92, unwind: bb215];
    }

    bb92: {
        _126 = Not(move _127);
        switchInt(move _126) -> [0: bb94, otherwise: bb93];
    }

    bb93: {
        _129 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb215;
    }

    bb94: {
        _132 = &(_119.2: std::vec::Vec<u8>);
        _131 = Vec::<u8>::is_empty(move _132) -> [return: bb95, unwind: bb215];
    }

    bb95: {
        _130 = Not(move _131);
        switchInt(move _130) -> [0: bb97, otherwise: bb96];
    }

    bb96: {
        _133 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb215;
    }

    bb97: {
        _135 = &(_119.1: std::vec::Vec<u8>);
        _312 = const _;
        _134 = (move _135, _312);
        _136 = (_134.0: &std::vec::Vec<u8>);
        _137 = (_134.1: &&[u8; 7]);
        _139 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_136, _137) -> [return: bb98, unwind: bb215];
    }

    bb98: {
        _138 = Not(move _139);
        switchInt(move _138) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _140 = core::panicking::AssertKind::Eq;
        _142 = Option::<Arguments<'_>>::None;
        _141 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _140, _136, _137, move _142) -> bb215;
    }

    bb100: {
        _149 = &_2;
        _148 = Command::new::<&String>(move _149) -> [return: bb101, unwind: bb215];
    }

    bb101: {
        _147 = &mut _148;
        _146 = Command::arg::<&str>(move _147, const "exec-test2") -> [return: bb102, unwind: bb214];
    }

    bb102: {
        _145 = _146;
        _144 = Command::output(move _145) -> [return: bb103, unwind: bb214];
    }

    bb103: {
        _143 = Result::<Output, std::io::Error>::unwrap(move _144) -> [return: bb104, unwind: bb214];
    }

    bb104: {
        drop(_148) -> [return: bb105, unwind: bb213];
    }

    bb105: {
        _152 = &(_143.0: std::process::ExitStatus);
        _151 = ExitStatus::success(move _152) -> [return: bb106, unwind: bb213];
    }

    bb106: {
        _150 = Not(move _151);
        switchInt(move _150) -> [0: bb108, otherwise: bb107];
    }

    bb107: {
        _153 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb213;
    }

    bb108: {
        _156 = &(_143.2: std::vec::Vec<u8>);
        _155 = Vec::<u8>::is_empty(move _156) -> [return: bb109, unwind: bb213];
    }

    bb109: {
        _154 = Not(move _155);
        switchInt(move _154) -> [0: bb111, otherwise: bb110];
    }

    bb110: {
        _157 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb213;
    }

    bb111: {
        _159 = &(_143.1: std::vec::Vec<u8>);
        _311 = const _;
        _158 = (move _159, _311);
        _160 = (_158.0: &std::vec::Vec<u8>);
        _161 = (_158.1: &&[u8; 7]);
        _163 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_160, _161) -> [return: bb112, unwind: bb213];
    }

    bb112: {
        _162 = Not(move _163);
        switchInt(move _162) -> [0: bb114, otherwise: bb113];
    }

    bb113: {
        _164 = core::panicking::AssertKind::Eq;
        _166 = Option::<Arguments<'_>>::None;
        _165 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _164, _160, _161, move _166) -> bb213;
    }

    bb114: {
        _173 = &_2;
        _172 = Command::new::<&String>(move _173) -> [return: bb115, unwind: bb213];
    }

    bb115: {
        _171 = &mut _172;
        _170 = Command::arg::<&str>(move _171, const "exec-test3") -> [return: bb116, unwind: bb212];
    }

    bb116: {
        _169 = _170;
        _168 = Command::output(move _169) -> [return: bb117, unwind: bb212];
    }

    bb117: {
        _167 = Result::<Output, std::io::Error>::unwrap(move _168) -> [return: bb118, unwind: bb212];
    }

    bb118: {
        drop(_172) -> [return: bb119, unwind: bb211];
    }

    bb119: {
        _176 = &(_167.0: std::process::ExitStatus);
        _175 = ExitStatus::success(move _176) -> [return: bb120, unwind: bb211];
    }

    bb120: {
        _174 = Not(move _175);
        switchInt(move _174) -> [0: bb122, otherwise: bb121];
    }

    bb121: {
        _177 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb211;
    }

    bb122: {
        _180 = &(_167.2: std::vec::Vec<u8>);
        _179 = Vec::<u8>::is_empty(move _180) -> [return: bb123, unwind: bb211];
    }

    bb123: {
        _178 = Not(move _179);
        switchInt(move _178) -> [0: bb125, otherwise: bb124];
    }

    bb124: {
        _181 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb211;
    }

    bb125: {
        _183 = &(_167.1: std::vec::Vec<u8>);
        _310 = const _;
        _182 = (move _183, _310);
        _184 = (_182.0: &std::vec::Vec<u8>);
        _185 = (_182.1: &&[u8; 7]);
        _187 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_184, _185) -> [return: bb126, unwind: bb211];
    }

    bb126: {
        _186 = Not(move _187);
        switchInt(move _186) -> [0: bb128, otherwise: bb127];
    }

    bb127: {
        _188 = core::panicking::AssertKind::Eq;
        _190 = Option::<Arguments<'_>>::None;
        _189 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _188, _184, _185, move _190) -> bb211;
    }

    bb128: {
        _197 = &_2;
        _196 = Command::new::<&String>(move _197) -> [return: bb129, unwind: bb211];
    }

    bb129: {
        _195 = &mut _196;
        _194 = Command::arg::<&str>(move _195, const "exec-test4") -> [return: bb130, unwind: bb210];
    }

    bb130: {
        _193 = _194;
        _192 = Command::output(move _193) -> [return: bb131, unwind: bb210];
    }

    bb131: {
        _191 = Result::<Output, std::io::Error>::unwrap(move _192) -> [return: bb132, unwind: bb210];
    }

    bb132: {
        drop(_196) -> [return: bb133, unwind: bb209];
    }

    bb133: {
        _200 = &(_191.0: std::process::ExitStatus);
        _199 = ExitStatus::success(move _200) -> [return: bb134, unwind: bb209];
    }

    bb134: {
        _198 = Not(move _199);
        switchInt(move _198) -> [0: bb136, otherwise: bb135];
    }

    bb135: {
        _201 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb209;
    }

    bb136: {
        _204 = &(_191.2: std::vec::Vec<u8>);
        _203 = Vec::<u8>::is_empty(move _204) -> [return: bb137, unwind: bb209];
    }

    bb137: {
        _202 = Not(move _203);
        switchInt(move _202) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _205 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb209;
    }

    bb139: {
        _207 = &(_191.1: std::vec::Vec<u8>);
        _309 = const _;
        _206 = (move _207, _309);
        _208 = (_206.0: &std::vec::Vec<u8>);
        _209 = (_206.1: &&[u8; 7]);
        _211 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_208, _209) -> [return: bb140, unwind: bb209];
    }

    bb140: {
        _210 = Not(move _211);
        switchInt(move _210) -> [0: bb142, otherwise: bb141];
    }

    bb141: {
        _212 = core::panicking::AssertKind::Eq;
        _214 = Option::<Arguments<'_>>::None;
        _213 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _212, _208, _209, move _214) -> bb209;
    }

    bb142: {
        _221 = &_2;
        _220 = Command::new::<&String>(move _221) -> [return: bb143, unwind: bb209];
    }

    bb143: {
        _219 = &mut _220;
        _218 = Command::arg::<&str>(move _219, const "exec-test5") -> [return: bb144, unwind: bb208];
    }

    bb144: {
        _217 = _218;
        _216 = Command::output(move _217) -> [return: bb145, unwind: bb208];
    }

    bb145: {
        _215 = Result::<Output, std::io::Error>::unwrap(move _216) -> [return: bb146, unwind: bb208];
    }

    bb146: {
        drop(_220) -> [return: bb147, unwind: bb207];
    }

    bb147: {
        _224 = &(_215.0: std::process::ExitStatus);
        _223 = ExitStatus::success(move _224) -> [return: bb148, unwind: bb207];
    }

    bb148: {
        _222 = Not(move _223);
        switchInt(move _222) -> [0: bb150, otherwise: bb149];
    }

    bb149: {
        _225 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb207;
    }

    bb150: {
        _228 = &(_215.2: std::vec::Vec<u8>);
        _227 = Vec::<u8>::is_empty(move _228) -> [return: bb151, unwind: bb207];
    }

    bb151: {
        _226 = Not(move _227);
        switchInt(move _226) -> [0: bb153, otherwise: bb152];
    }

    bb152: {
        _229 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb207;
    }

    bb153: {
        _231 = &(_215.1: std::vec::Vec<u8>);
        _308 = const _;
        _230 = (move _231, _308);
        _232 = (_230.0: &std::vec::Vec<u8>);
        _233 = (_230.1: &&[u8; 7]);
        _235 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_232, _233) -> [return: bb154, unwind: bb207];
    }

    bb154: {
        _234 = Not(move _235);
        switchInt(move _234) -> [0: bb156, otherwise: bb155];
    }

    bb155: {
        _236 = core::panicking::AssertKind::Eq;
        _238 = Option::<Arguments<'_>>::None;
        _237 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _236, _232, _233, move _238) -> bb207;
    }

    bb156: {
        _239 = const true;
        switchInt(move _239) -> [0: bb193, otherwise: bb157];
    }

    bb157: {
        _246 = &_2;
        _245 = Command::new::<&String>(move _246) -> [return: bb158, unwind: bb207];
    }

    bb158: {
        _244 = &mut _245;
        _243 = Command::arg::<&str>(move _244, const "exec-test6") -> [return: bb159, unwind: bb206];
    }

    bb159: {
        _242 = _243;
        _241 = Command::output(move _242) -> [return: bb160, unwind: bb206];
    }

    bb160: {
        _240 = Result::<Output, std::io::Error>::unwrap(move _241) -> [return: bb161, unwind: bb206];
    }

    bb161: {
        drop(_245) -> [return: bb162, unwind: bb205];
    }

    bb162: {
        _307 = const _;
        _249 = _307 as &[&str] (Pointer(Unsize));
        _254 = &_240;
        _253 = core::fmt::rt::Argument::<'_>::new_debug::<Output>(_254) -> [return: bb163, unwind: bb205];
    }

    bb163: {
        _252 = [move _253];
        _251 = &_252;
        _250 = _251 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _248 = Arguments::<'_>::new_v1(move _249, move _250) -> [return: bb164, unwind: bb205];
    }

    bb164: {
        _247 = _print(move _248) -> [return: bb165, unwind: bb205];
    }

    bb165: {
        _257 = &(_240.0: std::process::ExitStatus);
        _256 = ExitStatus::success(move _257) -> [return: bb166, unwind: bb205];
    }

    bb166: {
        _255 = Not(move _256);
        switchInt(move _255) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _258 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb205;
    }

    bb168: {
        _261 = &(_240.2: std::vec::Vec<u8>);
        _260 = Vec::<u8>::is_empty(move _261) -> [return: bb169, unwind: bb205];
    }

    bb169: {
        _259 = Not(move _260);
        switchInt(move _259) -> [0: bb171, otherwise: bb170];
    }

    bb170: {
        _262 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb205;
    }

    bb171: {
        _264 = &(_240.1: std::vec::Vec<u8>);
        _306 = const _;
        _263 = (move _264, _306);
        _265 = (_263.0: &std::vec::Vec<u8>);
        _266 = (_263.1: &&[u8; 7]);
        _268 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_265, _266) -> [return: bb172, unwind: bb205];
    }

    bb172: {
        _267 = Not(move _268);
        switchInt(move _267) -> [0: bb174, otherwise: bb173];
    }

    bb173: {
        _269 = core::panicking::AssertKind::Eq;
        _271 = Option::<Arguments<'_>>::None;
        _270 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _269, _265, _266, move _271) -> bb205;
    }

    bb174: {
        _278 = &_2;
        _277 = Command::new::<&String>(move _278) -> [return: bb175, unwind: bb205];
    }

    bb175: {
        _276 = &mut _277;
        _275 = Command::arg::<&str>(move _276, const "exec-test7") -> [return: bb176, unwind: bb204];
    }

    bb176: {
        _274 = _275;
        _273 = Command::output(move _274) -> [return: bb177, unwind: bb204];
    }

    bb177: {
        _272 = Result::<Output, std::io::Error>::unwrap(move _273) -> [return: bb178, unwind: bb204];
    }

    bb178: {
        drop(_277) -> [return: bb179, unwind: bb203];
    }

    bb179: {
        _305 = const _;
        _281 = _305 as &[&str] (Pointer(Unsize));
        _286 = &_272;
        _285 = core::fmt::rt::Argument::<'_>::new_debug::<Output>(_286) -> [return: bb180, unwind: bb203];
    }

    bb180: {
        _284 = [move _285];
        _283 = &_284;
        _282 = _283 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _280 = Arguments::<'_>::new_v1(move _281, move _282) -> [return: bb181, unwind: bb203];
    }

    bb181: {
        _279 = _print(move _280) -> [return: bb182, unwind: bb203];
    }

    bb182: {
        _289 = &(_272.0: std::process::ExitStatus);
        _288 = ExitStatus::success(move _289) -> [return: bb183, unwind: bb203];
    }

    bb183: {
        _287 = Not(move _288);
        switchInt(move _287) -> [0: bb185, otherwise: bb184];
    }

    bb184: {
        _290 = core::panicking::panic(const "assertion failed: output.status.success()") -> bb203;
    }

    bb185: {
        _293 = &(_272.2: std::vec::Vec<u8>);
        _292 = Vec::<u8>::is_empty(move _293) -> [return: bb186, unwind: bb203];
    }

    bb186: {
        _291 = Not(move _292);
        switchInt(move _291) -> [0: bb188, otherwise: bb187];
    }

    bb187: {
        _294 = core::panicking::panic(const "assertion failed: output.stderr.is_empty()") -> bb203;
    }

    bb188: {
        _296 = &(_272.1: std::vec::Vec<u8>);
        _304 = const _;
        _295 = (move _296, _304);
        _297 = (_295.0: &std::vec::Vec<u8>);
        _298 = (_295.1: &&[u8; 7]);
        _300 = <Vec<u8> as PartialEq<&[u8; 7]>>::eq(_297, _298) -> [return: bb189, unwind: bb203];
    }

    bb189: {
        _299 = Not(move _300);
        switchInt(move _299) -> [0: bb191, otherwise: bb190];
    }

    bb190: {
        _301 = core::panicking::AssertKind::Eq;
        _303 = Option::<Arguments<'_>>::None;
        _302 = core::panicking::assert_failed::<Vec<u8>, &[u8; 7]>(move _301, _297, _298, move _303) -> bb203;
    }

    bb191: {
        drop(_272) -> [return: bb192, unwind: bb205];
    }

    bb192: {
        drop(_240) -> [return: bb193, unwind: bb207];
    }

    bb193: {
        drop(_215) -> [return: bb194, unwind: bb209];
    }

    bb194: {
        drop(_191) -> [return: bb195, unwind: bb211];
    }

    bb195: {
        drop(_167) -> [return: bb196, unwind: bb213];
    }

    bb196: {
        drop(_143) -> [return: bb197, unwind: bb215];
    }

    bb197: {
        drop(_119) -> [return: bb198, unwind: bb229];
    }

    bb198: {
        drop(_2) -> [return: bb199, unwind: bb230];
    }

    bb199: {
        drop(_1) -> [return: bb202, unwind continue];
    }

    bb200: {
        drop(_2) -> [return: bb201, unwind: bb230];
    }

    bb201: {
        drop(_1) -> [return: bb202, unwind continue];
    }

    bb202: {
        return;
    }

    bb203 (cleanup): {
        drop(_272) -> [return: bb205, unwind terminate];
    }

    bb204 (cleanup): {
        drop(_277) -> [return: bb205, unwind terminate];
    }

    bb205 (cleanup): {
        drop(_240) -> [return: bb207, unwind terminate];
    }

    bb206 (cleanup): {
        drop(_245) -> [return: bb207, unwind terminate];
    }

    bb207 (cleanup): {
        drop(_215) -> [return: bb209, unwind terminate];
    }

    bb208 (cleanup): {
        drop(_220) -> [return: bb209, unwind terminate];
    }

    bb209 (cleanup): {
        drop(_191) -> [return: bb211, unwind terminate];
    }

    bb210 (cleanup): {
        drop(_196) -> [return: bb211, unwind terminate];
    }

    bb211 (cleanup): {
        drop(_167) -> [return: bb213, unwind terminate];
    }

    bb212 (cleanup): {
        drop(_172) -> [return: bb213, unwind terminate];
    }

    bb213 (cleanup): {
        drop(_143) -> [return: bb215, unwind terminate];
    }

    bb214 (cleanup): {
        drop(_148) -> [return: bb215, unwind terminate];
    }

    bb215 (cleanup): {
        drop(_119) -> [return: bb229, unwind terminate];
    }

    bb216 (cleanup): {
        drop(_124) -> [return: bb229, unwind terminate];
    }

    bb217 (cleanup): {
        drop(_96) -> [return: bb228, unwind terminate];
    }

    bb218 (cleanup): {
        drop(_102) -> [return: bb228, unwind terminate];
    }

    bb219 (cleanup): {
        drop(_81) -> [return: bb228, unwind terminate];
    }

    bb220 (cleanup): {
        drop(_87) -> [return: bb228, unwind terminate];
    }

    bb221 (cleanup): {
        drop(_69) -> [return: bb228, unwind terminate];
    }

    bb222 (cleanup): {
        drop(_66) -> [return: bb228, unwind terminate];
    }

    bb223 (cleanup): {
        drop(_56) -> [return: bb228, unwind terminate];
    }

    bb224 (cleanup): {
        drop(_47) -> [return: bb228, unwind terminate];
    }

    bb225 (cleanup): {
        drop(_39) -> [return: bb228, unwind terminate];
    }

    bb226 (cleanup): {
        drop(_23) -> [return: bb228, unwind terminate];
    }

    bb227 (cleanup): {
        drop(_27) -> [return: bb228, unwind terminate];
    }

    bb228 (cleanup): {
        drop(_8) -> [return: bb229, unwind terminate];
    }

    bb229 (cleanup): {
        drop(_2) -> [return: bb230, unwind terminate];
    }

    bb230 (cleanup): {
        drop(_1) -> [return: bb231, unwind terminate];
    }

    bb231 (cleanup): {
        resume;
    }

    bb232: {
        goto -> bb84;
    }

    bb233: {
        goto -> bb84;
    }

    bb234: {
        goto -> bb84;
    }

    bb235: {
        goto -> bb84;
    }

    bb236: {
        goto -> bb84;
    }
}

promoted[0] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];
    let mut _1: &[u8; 7];

    bb0: {
        _1 = const b"passed\n";
        _0 = &_1;
        return;
    }
}

alloc7 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];
    let mut _1: &[u8; 7];

    bb0: {
        _1 = const b"passed\n";
        _0 = &_1;
        return;
    }
}

alloc6 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[3] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];
    let mut _1: &[u8; 7];

    bb0: {
        _1 = const b"passed\n";
        _0 = &_1;
        return;
    }
}

alloc5 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[5] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];
    let mut _1: &[u8; 7];

    bb0: {
        _1 = const b"passed\n";
        _0 = &_1;
        return;
    }
}

alloc4 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[6] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];
    let mut _1: &[u8; 7];

    bb0: {
        _1 = const b"passed\n";
        _0 = &_1;
        return;
    }
}

alloc3 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[7] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];
    let mut _1: &[u8; 7];

    bb0: {
        _1 = const b"passed\n";
        _0 = &_1;
        return;
    }
}

alloc2 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[8] in main: &&[u8; 7] = {
    let mut _0: &&[u8; 7];
    let mut _1: &[u8; 7];

    bb0: {
        _1 = const b"passed\n";
        _0 = &_1;
        return;
    }
}

alloc1 (size: 7, align: 1) {
    70 61 73 73 65 64 0a                            │ passed.
}

promoted[9] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "unknown argument: "];
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "failed to spawn: "];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "failed to spawn: "];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "passed\n"];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "ABC";
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "passed\n"];
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "passed\n"];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "passed\n"];
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "failed to spawn: "];
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "passed\n"];
        _0 = &_1;
        return;
    }
}
