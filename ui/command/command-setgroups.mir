// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/command/command-setgroups.rs:14:11: 14:11

    bb0: {
        _0 = run() -> bb1;               // scope 0 at ui/command/command-setgroups.rs:16:5: 16:10
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:16:5: 16:8
                                         // + literal: Const { ty: fn() {run}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/command/command-setgroups.rs:17:2: 17:2
    }
}

fn run() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/command/command-setgroups.rs:20:10: 20:10
    let _1: i64;                         // in scope 0 at ui/command/command-setgroups.rs:21:9: 21:20
    let mut _3: u32;                     // in scope 0 at ui/command/command-setgroups.rs:22:23: 22:41
    let mut _4: i64;                     // in scope 0 at ui/command/command-setgroups.rs:22:23: 22:34
    let mut _5: (u32, bool);             // in scope 0 at ui/command/command-setgroups.rs:22:23: 22:45
    let mut _7: std::ops::Range<u32>;    // in scope 0 at ui/command/command-setgroups.rs:23:25: 23:41
    let mut _8: u32;                     // in scope 0 at ui/command/command-setgroups.rs:23:29: 23:40
    let mut _10: &mut std::process::Command; // in scope 0 at ui/command/command-setgroups.rs:24:13: 24:61
    let mut _11: &mut std::process::Command; // in scope 0 at ui/command/command-setgroups.rs:24:13: 24:53
    let mut _12: &mut std::process::Command; // in scope 0 at ui/command/command-setgroups.rs:24:13: 24:53
    let mut _13: std::process::Command;  // in scope 0 at ui/command/command-setgroups.rs:24:13: 24:36
    let mut _14: &[u32];                 // in scope 0 at ui/command/command-setgroups.rs:24:44: 24:52
    let _15: &[u32];                     // in scope 0 at ui/command/command-setgroups.rs:24:44: 24:52
    let _16: &[u32];                     // in scope 0 at ui/command/command-setgroups.rs:24:45: 24:52
    let mut _17: &std::vec::Vec<u32>;    // in scope 0 at ui/command/command-setgroups.rs:24:45: 24:48
    let mut _18: std::ops::RangeFull;    // in scope 0 at ui/command/command-setgroups.rs:24:49: 24:51
    let mut _19: bool;                   // in scope 0 at ui/command/command-setgroups.rs:25:5: 25:24
    let mut _20: bool;                   // in scope 0 at ui/command/command-setgroups.rs:25:13: 25:23
    let mut _21: &std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/command/command-setgroups.rs:25:13: 25:23
    let mut _22: !;                      // in scope 0 at ui/command/command-setgroups.rs:25:5: 25:24
    scope 1 {
        debug max_ngroups => _1;         // in scope 1 at ui/command/command-setgroups.rs:21:9: 21:20
        let _2: u32;                     // in scope 1 at ui/command/command-setgroups.rs:22:9: 22:20
        scope 3 {
            debug max_ngroups => _2;     // in scope 3 at ui/command/command-setgroups.rs:22:9: 22:20
            let _6: std::vec::Vec<u32>;  // in scope 3 at ui/command/command-setgroups.rs:23:9: 23:12
            scope 4 {
                debug vec => _6;         // in scope 4 at ui/command/command-setgroups.rs:23:9: 23:12
                let _9: std::result::Result<std::process::Child, std::io::Error>; // in scope 4 at ui/command/command-setgroups.rs:24:9: 24:10
                scope 5 {
                    debug p => _9;       // in scope 5 at ui/command/command-setgroups.rs:24:9: 24:10
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _1 = sysconf(const _) -> bb1;    // scope 2 at ui/command/command-setgroups.rs:21:32: 21:68
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:21:32: 21:45
                                         // + literal: Const { ty: unsafe extern "C" fn(i32) -> i64 {sysconf}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _1;                         // scope 1 at ui/command/command-setgroups.rs:22:23: 22:34
        _3 = move _4 as u32 (IntToInt);  // scope 1 at ui/command/command-setgroups.rs:22:23: 22:41
        _5 = CheckedAdd(_3, const 1_u32); // scope 1 at ui/command/command-setgroups.rs:22:23: 22:45
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 1_u32) -> bb2; // scope 1 at ui/command/command-setgroups.rs:22:23: 22:45
    }

    bb2: {
        _2 = move (_5.0: u32);           // scope 1 at ui/command/command-setgroups.rs:22:23: 22:45
        _8 = _2;                         // scope 3 at ui/command/command-setgroups.rs:23:29: 23:40
        _7 = std::ops::Range::<u32> { start: const 0_u32, end: move _8 }; // scope 3 at ui/command/command-setgroups.rs:23:25: 23:41
        _6 = <std::ops::Range<u32> as Iterator>::collect::<Vec<u32>>(move _7) -> bb3; // scope 3 at ui/command/command-setgroups.rs:23:25: 23:51
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:23:42: 23:49
                                         // + literal: Const { ty: fn(std::ops::Range<u32>) -> Vec<u32> {<std::ops::Range<u32> as Iterator>::collect::<Vec<u32>>}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = Command::new::<&str>(const "/bin/id") -> [return: bb4, unwind: bb16]; // scope 4 at ui/command/command-setgroups.rs:24:13: 24:36
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:24:13: 24:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:24:26: 24:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _12 = &mut _13;                  // scope 4 at ui/command/command-setgroups.rs:24:13: 24:53
        _17 = &_6;                       // scope 4 at ui/command/command-setgroups.rs:24:45: 24:48
        _16 = <Vec<u32> as Index<RangeFull>>::index(move _17, move _18) -> [return: bb5, unwind: bb15]; // scope 4 at ui/command/command-setgroups.rs:24:45: 24:52
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:24:45: 24:52
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u32>, RangeFull) -> &'a <Vec<u32> as Index<RangeFull>>::Output {<Vec<u32> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = _16;                       // scope 4 at ui/command/command-setgroups.rs:24:44: 24:52
        _14 = _15;                       // scope 4 at ui/command/command-setgroups.rs:24:44: 24:52
        _11 = <Command as std::os::unix::process::CommandExt>::groups(move _12, move _14) -> [return: bb6, unwind: bb15]; // scope 4 at ui/command/command-setgroups.rs:24:13: 24:53
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:24:37: 24:43
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Command, &'b [u32]) -> &'a mut Command {<Command as std::os::unix::process::CommandExt>::groups}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = &mut (*_11);               // scope 4 at ui/command/command-setgroups.rs:24:13: 24:61
        _9 = Command::spawn(move _10) -> [return: bb7, unwind: bb15]; // scope 4 at ui/command/command-setgroups.rs:24:13: 24:61
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:24:54: 24:59
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_13) -> [return: bb8, unwind: bb14]; // scope 4 at ui/command/command-setgroups.rs:24:61: 24:62
    }

    bb8: {
        _21 = &_9;                       // scope 5 at ui/command/command-setgroups.rs:25:13: 25:23
        _20 = Result::<Child, std::io::Error>::is_err(move _21) -> [return: bb9, unwind: bb14]; // scope 5 at ui/command/command-setgroups.rs:25:13: 25:23
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:25:15: 25:21
                                         // + literal: Const { ty: for<'a> fn(&'a Result<Child, std::io::Error>) -> bool {Result::<Child, std::io::Error>::is_err}, val: Value(<ZST>) }
    }

    bb9: {
        _19 = Not(move _20);             // scope 5 at ui/command/command-setgroups.rs:25:5: 25:24
        switchInt(move _19) -> [0: bb11, otherwise: bb10]; // scope 5 at ui/command/command-setgroups.rs:25:5: 25:24
    }

    bb10: {
        _22 = core::panicking::panic(const "assertion failed: p.is_err()") -> bb14; // scope 5 at ui/command/command-setgroups.rs:25:5: 25:24
                                         // mir::Constant
                                         // + span: ui/command/command-setgroups.rs:25:5: 25:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        drop(_9) -> [return: bb12, unwind: bb16]; // scope 4 at ui/command/command-setgroups.rs:26:1: 26:2
    }

    bb12: {
        drop(_6) -> bb13;                // scope 3 at ui/command/command-setgroups.rs:26:1: 26:2
    }

    bb13: {
        return;                          // scope 0 at ui/command/command-setgroups.rs:26:2: 26:2
    }

    bb14 (cleanup): {
        drop(_9) -> bb16;                // scope 4 at ui/command/command-setgroups.rs:26:1: 26:2
    }

    bb15 (cleanup): {
        drop(_13) -> bb16;               // scope 4 at ui/command/command-setgroups.rs:24:61: 24:62
    }

    bb16 (cleanup): {
        drop(_6) -> bb17;                // scope 3 at ui/command/command-setgroups.rs:26:1: 26:2
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at ui/command/command-setgroups.rs:20:1: 26:2
    }
}
