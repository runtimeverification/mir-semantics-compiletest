// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn has_clone3() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/command/command-create-pidfd.rs:13:20: 13:24
    let _1: i64;                         // in scope 0 at ui/command/command-create-pidfd.rs:14:9: 14:12
    let mut _3: std::option::Option<std::io::Error>; // in scope 0 at ui/command/command-create-pidfd.rs:15:15: 16:41
    let mut _4: bool;                    // in scope 0 at ui/command/command-create-pidfd.rs:15:15: 15:26
    let mut _5: i64;                     // in scope 0 at ui/command/command-create-pidfd.rs:15:16: 15:19
    let mut _6: [closure@ui/command/command-create-pidfd.rs:16:15: 16:17]; // in scope 0 at ui/command/command-create-pidfd.rs:16:15: 16:40
    let mut _7: &str;                    // in scope 0 at ui/command/command-create-pidfd.rs:17:17: 17:51
    let _8: &str;                        // in scope 0 at ui/command/command-create-pidfd.rs:17:17: 17:51
    let mut _9: bool;                    // in scope 0 at ui/command/command-create-pidfd.rs:29:5: 29:45
    let mut _10: &std::option::Option<i32>; // in scope 0 at ui/command/command-create-pidfd.rs:29:5: 29:23
    let _11: std::option::Option<i32>;   // in scope 0 at ui/command/command-create-pidfd.rs:29:5: 29:23
    let mut _12: &std::io::Error;        // in scope 0 at ui/command/command-create-pidfd.rs:29:5: 29:23
    let mut _13: &std::option::Option<i32>; // in scope 0 at ui/command/command-create-pidfd.rs:29:27: 29:45
    let mut _14: bool;                   // in scope 0 at ui/command/command-create-pidfd.rs:29:49: 29:88
    let mut _15: &std::option::Option<i32>; // in scope 0 at ui/command/command-create-pidfd.rs:29:49: 29:67
    let _16: std::option::Option<i32>;   // in scope 0 at ui/command/command-create-pidfd.rs:29:49: 29:67
    let mut _17: &std::io::Error;        // in scope 0 at ui/command/command-create-pidfd.rs:29:49: 29:67
    let mut _18: &std::option::Option<i32>; // in scope 0 at ui/command/command-create-pidfd.rs:29:71: 29:88
    scope 1 {
        debug res => _1;                 // in scope 1 at ui/command/command-create-pidfd.rs:14:9: 14:12
        let _2: std::io::Error;          // in scope 1 at ui/command/command-create-pidfd.rs:15:9: 15:12
        scope 3 {
            debug err => _2;             // in scope 3 at ui/command/command-create-pidfd.rs:15:9: 15:12
            let mut _19: &std::option::Option<i32>; // in scope 3 at ui/command/command-create-pidfd.rs:29:71: 29:88
            let mut _20: &std::option::Option<i32>; // in scope 3 at ui/command/command-create-pidfd.rs:29:27: 29:45
        }
    }
    scope 2 {
    }

    bb0: {
        _1 = syscall(const _, const 0_i32, const 0_i32) -> bb1; // scope 2 at ui/command/command-create-pidfd.rs:14:24: 14:61
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:14:24: 14:37
                                         // + literal: Const { ty: unsafe extern "C" fn(i64, ...) -> i64 {syscall}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = _1;                         // scope 1 at ui/command/command-create-pidfd.rs:15:16: 15:19
        _4 = Eq(move _5, const -1_i64);  // scope 1 at ui/command/command-create-pidfd.rs:15:15: 15:26
        _3 = core::bool::<impl bool>::then::<std::io::Error, [closure@ui/command/command-create-pidfd.rs:16:15: 16:17]>(move _4, move _6) -> bb2; // scope 1 at ui/command/command-create-pidfd.rs:15:15: 16:41
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:16:10: 16:14
                                         // + literal: Const { ty: fn(bool, [closure@ui/command/command-create-pidfd.rs:16:15: 16:17]) -> Option<std::io::Error> {core::bool::<impl bool>::then::<std::io::Error, [closure@ui/command/command-create-pidfd.rs:16:15: 16:17]>}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = const "probe syscall should not succeed"; // scope 1 at ui/command/command-create-pidfd.rs:17:17: 17:51
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:17:17: 17:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/command/command-create-pidfd.rs:17:17: 17:51
        _2 = Option::<std::io::Error>::expect(move _3, move _7) -> bb3; // scope 1 at ui/command/command-create-pidfd.rs:15:15: 17:52
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:17:10: 17:16
                                         // + literal: Const { ty: for<'a> fn(Option<std::io::Error>, &'a str) -> std::io::Error {Option::<std::io::Error>::expect}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = &_2;                       // scope 3 at ui/command/command-create-pidfd.rs:29:5: 29:23
        _11 = std::io::Error::raw_os_error(move _12) -> [return: bb7, unwind: bb12]; // scope 3 at ui/command/command-create-pidfd.rs:29:5: 29:23
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:29:9: 29:21
                                         // + literal: Const { ty: for<'a> fn(&'a std::io::Error) -> Option<i32> {std::io::Error::raw_os_error}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = const false;                // scope 3 at ui/command/command-create-pidfd.rs:29:5: 29:88
        goto -> bb6;                     // scope 3 at ui/command/command-create-pidfd.rs:29:5: 29:88
    }

    bb5: {
        _17 = &_2;                       // scope 3 at ui/command/command-create-pidfd.rs:29:49: 29:67
        _16 = std::io::Error::raw_os_error(move _17) -> [return: bb9, unwind: bb12]; // scope 3 at ui/command/command-create-pidfd.rs:29:49: 29:67
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:29:53: 29:65
                                         // + literal: Const { ty: for<'a> fn(&'a std::io::Error) -> Option<i32> {std::io::Error::raw_os_error}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_2) -> bb11;                // scope 1 at ui/command/command-create-pidfd.rs:30:1: 30:2
    }

    bb7: {
        _10 = &_11;                      // scope 3 at ui/command/command-create-pidfd.rs:29:5: 29:23
        _20 = const _;                   // scope 3 at ui/command/command-create-pidfd.rs:29:27: 29:45
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:29:27: 29:45
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(has_clone3, [], Some(promoted[1])) }
        _13 = _20;                       // scope 3 at ui/command/command-create-pidfd.rs:29:27: 29:45
        _9 = <Option<i32> as PartialEq>::ne(move _10, move _13) -> [return: bb8, unwind: bb12]; // scope 3 at ui/command/command-create-pidfd.rs:29:5: 29:45
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:29:5: 29:45
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb8: {
        switchInt(move _9) -> [0: bb4, otherwise: bb5]; // scope 3 at ui/command/command-create-pidfd.rs:29:5: 29:88
    }

    bb9: {
        _15 = &_16;                      // scope 3 at ui/command/command-create-pidfd.rs:29:49: 29:67
        _19 = const _;                   // scope 3 at ui/command/command-create-pidfd.rs:29:71: 29:88
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:29:71: 29:88
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(has_clone3, [], Some(promoted[0])) }
        _18 = _19;                       // scope 3 at ui/command/command-create-pidfd.rs:29:71: 29:88
        _14 = <Option<i32> as PartialEq>::ne(move _15, move _18) -> [return: bb10, unwind: bb12]; // scope 3 at ui/command/command-create-pidfd.rs:29:49: 29:88
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:29:49: 29:88
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb10: {
        _0 = move _14;                   // scope 3 at ui/command/command-create-pidfd.rs:29:5: 29:88
        goto -> bb6;                     // scope 3 at ui/command/command-create-pidfd.rs:29:5: 29:88
    }

    bb11: {
        return;                          // scope 0 at ui/command/command-create-pidfd.rs:30:2: 30:2
    }

    bb12 (cleanup): {
        drop(_2) -> bb13;                // scope 1 at ui/command/command-create-pidfd.rs:30:1: 30:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/command/command-create-pidfd.rs:13:1: 30:2
    }
}

promoted[0] in has_clone3: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at ui/command/command-create-pidfd.rs:29:71: 29:88
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/command/command-create-pidfd.rs:29:71: 29:88

    bb0: {
        _1 = Option::<i32>::Some(const _); // scope 0 at ui/command/command-create-pidfd.rs:29:71: 29:88
        _0 = &_1;                        // scope 0 at ui/command/command-create-pidfd.rs:29:71: 29:88
        return;                          // scope 0 at ui/command/command-create-pidfd.rs:29:71: 29:88
    }
}

promoted[1] in has_clone3: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at ui/command/command-create-pidfd.rs:29:27: 29:45
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/command/command-create-pidfd.rs:29:27: 29:45

    bb0: {
        _1 = Option::<i32>::Some(const _); // scope 0 at ui/command/command-create-pidfd.rs:29:27: 29:45
        _0 = &_1;                        // scope 0 at ui/command/command-create-pidfd.rs:29:27: 29:45
        return;                          // scope 0 at ui/command/command-create-pidfd.rs:29:27: 29:45
    }
}

fn has_clone3::{closure#0}(_1: [closure@ui/command/command-create-pidfd.rs:16:15: 16:17]) -> std::io::Error {
    let mut _0: std::io::Error;          // return place in scope 0 at ui/command/command-create-pidfd.rs:16:18: 16:18

    bb0: {
        _0 = std::io::Error::last_os_error() -> bb1; // scope 0 at ui/command/command-create-pidfd.rs:16:18: 16:40
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:16:18: 16:38
                                         // + literal: Const { ty: fn() -> std::io::Error {std::io::Error::last_os_error}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/command/command-create-pidfd.rs:16:40: 16:40
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/command/command-create-pidfd.rs:32:11: 32:11
    let mut _1: bool;                    // in scope 0 at ui/command/command-create-pidfd.rs:34:8: 34:21
    let mut _2: bool;                    // in scope 0 at ui/command/command-create-pidfd.rs:34:9: 34:21
    let mut _3: &std::os::linux::process::PidFd; // in scope 0 at ui/command/command-create-pidfd.rs:40:13: 44:50
    let mut _4: std::result::Result<&std::os::linux::process::PidFd, std::io::Error>; // in scope 0 at ui/command/command-create-pidfd.rs:40:13: 44:17
    let mut _5: &std::process::Child;    // in scope 0 at ui/command/command-create-pidfd.rs:40:13: 44:17
    let _6: std::process::Child;         // in scope 0 at ui/command/command-create-pidfd.rs:40:13: 43:18
    let mut _7: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/command/command-create-pidfd.rs:40:13: 42:17
    let mut _8: &mut std::process::Command; // in scope 0 at ui/command/command-create-pidfd.rs:40:13: 42:17
    let mut _9: &mut std::process::Command; // in scope 0 at ui/command/command-create-pidfd.rs:40:13: 41:28
    let mut _10: &mut std::process::Command; // in scope 0 at ui/command/command-create-pidfd.rs:40:13: 41:28
    let mut _11: std::process::Command;  // in scope 0 at ui/command/command-create-pidfd.rs:40:13: 40:33
    let mut _12: &str;                   // in scope 0 at ui/command/command-create-pidfd.rs:44:25: 44:49
    let _13: &str;                       // in scope 0 at ui/command/command-create-pidfd.rs:44:25: 44:49
    let mut _14: std::io::Error;         // in scope 0 at ui/command/command-create-pidfd.rs:46:13: 50:96
    let mut _15: std::result::Result<&std::os::linux::process::PidFd, std::io::Error>; // in scope 0 at ui/command/command-create-pidfd.rs:46:13: 50:17
    let mut _16: &std::process::Child;   // in scope 0 at ui/command/command-create-pidfd.rs:46:13: 50:17
    let _17: std::process::Child;        // in scope 0 at ui/command/command-create-pidfd.rs:46:13: 49:18
    let mut _18: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/command/command-create-pidfd.rs:46:13: 48:17
    let mut _19: &mut std::process::Command; // in scope 0 at ui/command/command-create-pidfd.rs:46:13: 48:17
    let mut _20: &mut std::process::Command; // in scope 0 at ui/command/command-create-pidfd.rs:46:13: 47:29
    let mut _21: &mut std::process::Command; // in scope 0 at ui/command/command-create-pidfd.rs:46:13: 47:29
    let mut _22: std::process::Command;  // in scope 0 at ui/command/command-create-pidfd.rs:46:13: 46:33
    let mut _23: &str;                   // in scope 0 at ui/command/command-create-pidfd.rs:50:29: 50:95
    let _24: &str;                       // in scope 0 at ui/command/command-create-pidfd.rs:50:29: 50:95
    let mut _25: std::io::Error;         // in scope 0 at ui/command/command-create-pidfd.rs:52:13: 55:66
    let mut _26: std::result::Result<&std::os::linux::process::PidFd, std::io::Error>; // in scope 0 at ui/command/command-create-pidfd.rs:52:13: 55:17
    let mut _27: &std::process::Child;   // in scope 0 at ui/command/command-create-pidfd.rs:52:13: 55:17
    let _28: std::process::Child;        // in scope 0 at ui/command/command-create-pidfd.rs:52:13: 54:18
    let mut _29: std::result::Result<std::process::Child, std::io::Error>; // in scope 0 at ui/command/command-create-pidfd.rs:52:13: 53:17
    let mut _30: &mut std::process::Command; // in scope 0 at ui/command/command-create-pidfd.rs:52:13: 53:17
    let mut _31: std::process::Command;  // in scope 0 at ui/command/command-create-pidfd.rs:52:13: 52:33
    let mut _32: &str;                   // in scope 0 at ui/command/command-create-pidfd.rs:55:29: 55:65
    let _33: &str;                       // in scope 0 at ui/command/command-create-pidfd.rs:55:29: 55:65
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        _2 = has_clone3() -> bb1;        // scope 0 at ui/command/command-create-pidfd.rs:34:9: 34:21
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:34:9: 34:19
                                         // + literal: Const { ty: fn() -> bool {has_clone3}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/command/command-create-pidfd.rs:34:8: 34:21
        switchInt(move _1) -> [0: bb2, otherwise: bb27]; // scope 0 at ui/command/command-create-pidfd.rs:34:8: 34:21
    }

    bb2: {
        _11 = Command::new::<&str>(const "echo") -> bb3; // scope 0 at ui/command/command-create-pidfd.rs:40:13: 40:33
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:40:13: 40:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:40:26: 40:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _10 = &mut _11;                  // scope 0 at ui/command/command-create-pidfd.rs:40:13: 41:28
        _9 = <Command as std::os::linux::process::CommandExt>::create_pidfd(move _10, const true) -> [return: bb4, unwind: bb33]; // scope 0 at ui/command/command-create-pidfd.rs:40:13: 41:28
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:41:10: 41:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, bool) -> &'a mut Command {<Command as std::os::linux::process::CommandExt>::create_pidfd}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = &mut (*_9);                 // scope 0 at ui/command/command-create-pidfd.rs:40:13: 42:17
        _7 = Command::spawn(move _8) -> [return: bb5, unwind: bb33]; // scope 0 at ui/command/command-create-pidfd.rs:40:13: 42:17
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:42:10: 42:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = Result::<Child, std::io::Error>::unwrap(move _7) -> [return: bb6, unwind: bb33]; // scope 0 at ui/command/command-create-pidfd.rs:40:13: 43:18
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:43:10: 43:16
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>) -> Child {Result::<Child, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _5 = &_6;                        // scope 0 at ui/command/command-create-pidfd.rs:40:13: 44:17
        _4 = <Child as ChildExt>::pidfd(move _5) -> [return: bb7, unwind: bb32]; // scope 0 at ui/command/command-create-pidfd.rs:40:13: 44:17
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:44:10: 44:15
                                         // + literal: Const { ty: for<'a> fn(&'a Child) -> Result<&'a PidFd, std::io::Error> {<Child as ChildExt>::pidfd}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = const "failed to obtain pidfd"; // scope 0 at ui/command/command-create-pidfd.rs:44:25: 44:49
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:44:25: 44:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/command/command-create-pidfd.rs:44:25: 44:49
        _3 = Result::<&PidFd, std::io::Error>::expect(move _4, move _12) -> [return: bb8, unwind: bb32]; // scope 0 at ui/command/command-create-pidfd.rs:40:13: 44:50
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:44:18: 44:24
                                         // + literal: Const { ty: for<'a> fn(Result<&PidFd, std::io::Error>, &'a str) -> &PidFd {Result::<&PidFd, std::io::Error>::expect}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_6) -> [return: bb9, unwind: bb33]; // scope 0 at ui/command/command-create-pidfd.rs:44:50: 44:51
    }

    bb9: {
        drop(_11) -> bb10;               // scope 0 at ui/command/command-create-pidfd.rs:44:50: 44:51
    }

    bb10: {
        _22 = Command::new::<&str>(const "echo") -> bb11; // scope 1 at ui/command/command-create-pidfd.rs:46:13: 46:33
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:46:13: 46:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:46:26: 46:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb11: {
        _21 = &mut _22;                  // scope 1 at ui/command/command-create-pidfd.rs:46:13: 47:29
        _20 = <Command as std::os::linux::process::CommandExt>::create_pidfd(move _21, const false) -> [return: bb12, unwind: bb31]; // scope 1 at ui/command/command-create-pidfd.rs:46:13: 47:29
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:47:10: 47:22
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command, bool) -> &'a mut Command {<Command as std::os::linux::process::CommandExt>::create_pidfd}, val: Value(<ZST>) }
    }

    bb12: {
        _19 = &mut (*_20);               // scope 1 at ui/command/command-create-pidfd.rs:46:13: 48:17
        _18 = Command::spawn(move _19) -> [return: bb13, unwind: bb31]; // scope 1 at ui/command/command-create-pidfd.rs:46:13: 48:17
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:48:10: 48:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb13: {
        _17 = Result::<Child, std::io::Error>::unwrap(move _18) -> [return: bb14, unwind: bb31]; // scope 1 at ui/command/command-create-pidfd.rs:46:13: 49:18
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:49:10: 49:16
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>) -> Child {Result::<Child, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb14: {
        _16 = &_17;                      // scope 1 at ui/command/command-create-pidfd.rs:46:13: 50:17
        _15 = <Child as ChildExt>::pidfd(move _16) -> [return: bb15, unwind: bb30]; // scope 1 at ui/command/command-create-pidfd.rs:46:13: 50:17
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:50:10: 50:15
                                         // + literal: Const { ty: for<'a> fn(&'a Child) -> Result<&'a PidFd, std::io::Error> {<Child as ChildExt>::pidfd}, val: Value(<ZST>) }
    }

    bb15: {
        _24 = const "pidfd should not have been created when create_pid(false) is set"; // scope 1 at ui/command/command-create-pidfd.rs:50:29: 50:95
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:50:29: 50:95
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _23 = _24;                       // scope 1 at ui/command/command-create-pidfd.rs:50:29: 50:95
        _14 = Result::<&PidFd, std::io::Error>::expect_err(move _15, move _23) -> [return: bb16, unwind: bb30]; // scope 1 at ui/command/command-create-pidfd.rs:46:13: 50:96
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:50:18: 50:28
                                         // + literal: Const { ty: for<'a> fn(Result<&PidFd, std::io::Error>, &'a str) -> std::io::Error {Result::<&PidFd, std::io::Error>::expect_err}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_14) -> [return: bb17, unwind: bb30]; // scope 1 at ui/command/command-create-pidfd.rs:50:96: 50:97
    }

    bb17: {
        drop(_17) -> [return: bb18, unwind: bb31]; // scope 1 at ui/command/command-create-pidfd.rs:50:96: 50:97
    }

    bb18: {
        drop(_22) -> bb19;               // scope 1 at ui/command/command-create-pidfd.rs:50:96: 50:97
    }

    bb19: {
        _31 = Command::new::<&str>(const "echo") -> bb20; // scope 2 at ui/command/command-create-pidfd.rs:52:13: 52:33
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:52:13: 52:25
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&str) -> Command {Command::new::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:52:26: 52:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb20: {
        _30 = &mut _31;                  // scope 2 at ui/command/command-create-pidfd.rs:52:13: 53:17
        _29 = Command::spawn(move _30) -> [return: bb21, unwind: bb29]; // scope 2 at ui/command/command-create-pidfd.rs:52:13: 53:17
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:53:10: 53:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Command) -> Result<Child, std::io::Error> {Command::spawn}, val: Value(<ZST>) }
    }

    bb21: {
        _28 = Result::<Child, std::io::Error>::unwrap(move _29) -> [return: bb22, unwind: bb29]; // scope 2 at ui/command/command-create-pidfd.rs:52:13: 54:18
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:54:10: 54:16
                                         // + literal: Const { ty: fn(Result<Child, std::io::Error>) -> Child {Result::<Child, std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb22: {
        _27 = &_28;                      // scope 2 at ui/command/command-create-pidfd.rs:52:13: 55:17
        _26 = <Child as ChildExt>::pidfd(move _27) -> [return: bb23, unwind: bb28]; // scope 2 at ui/command/command-create-pidfd.rs:52:13: 55:17
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:55:10: 55:15
                                         // + literal: Const { ty: for<'a> fn(&'a Child) -> Result<&'a PidFd, std::io::Error> {<Child as ChildExt>::pidfd}, val: Value(<ZST>) }
    }

    bb23: {
        _33 = const "pidfd should not have been created"; // scope 2 at ui/command/command-create-pidfd.rs:55:29: 55:65
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:55:29: 55:65
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _32 = _33;                       // scope 2 at ui/command/command-create-pidfd.rs:55:29: 55:65
        _25 = Result::<&PidFd, std::io::Error>::expect_err(move _26, move _32) -> [return: bb24, unwind: bb28]; // scope 2 at ui/command/command-create-pidfd.rs:52:13: 55:66
                                         // mir::Constant
                                         // + span: ui/command/command-create-pidfd.rs:55:18: 55:28
                                         // + literal: Const { ty: for<'a> fn(Result<&PidFd, std::io::Error>, &'a str) -> std::io::Error {Result::<&PidFd, std::io::Error>::expect_err}, val: Value(<ZST>) }
    }

    bb24: {
        drop(_25) -> [return: bb25, unwind: bb28]; // scope 2 at ui/command/command-create-pidfd.rs:55:66: 55:67
    }

    bb25: {
        drop(_28) -> [return: bb26, unwind: bb29]; // scope 2 at ui/command/command-create-pidfd.rs:55:66: 55:67
    }

    bb26: {
        drop(_31) -> bb27;               // scope 2 at ui/command/command-create-pidfd.rs:55:66: 55:67
    }

    bb27: {
        return;                          // scope 0 at ui/command/command-create-pidfd.rs:56:2: 56:2
    }

    bb28 (cleanup): {
        drop(_28) -> bb29;               // scope 2 at ui/command/command-create-pidfd.rs:55:66: 55:67
    }

    bb29 (cleanup): {
        drop(_31) -> bb34;               // scope 2 at ui/command/command-create-pidfd.rs:55:66: 55:67
    }

    bb30 (cleanup): {
        drop(_17) -> bb31;               // scope 1 at ui/command/command-create-pidfd.rs:50:96: 50:97
    }

    bb31 (cleanup): {
        drop(_22) -> bb34;               // scope 1 at ui/command/command-create-pidfd.rs:50:96: 50:97
    }

    bb32 (cleanup): {
        drop(_6) -> bb33;                // scope 0 at ui/command/command-create-pidfd.rs:44:50: 44:51
    }

    bb33 (cleanup): {
        drop(_11) -> bb34;               // scope 0 at ui/command/command-create-pidfd.rs:44:50: 44:51
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at ui/command/command-create-pidfd.rs:32:1: 56:2
    }
}
