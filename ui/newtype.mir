// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/newtype.rs:4:16: 4:21>::clone(_1: &mytype) -> mytype {
    debug self => _1;
    let mut _0: mytype;
    scope 1 {
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn <impl at ui/newtype.rs:7:16: 7:21>::clone(_1: &Mytype) -> Mytype {
    debug self => _1;
    let mut _0: Mytype;
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);
        return;
    }
}

fn compute(_1: mytype) -> isize {
    debug i => _1;
    let mut _0: isize;
    let _2: Mytype;
    let mut _3: isize;
    scope 1 {
        debug m => _2;
    }

    bb0: {
        _2 = (_1.0: Mytype);
        _3 = (_2.1: isize);
        _0 = Add(move _3, const 20_isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: mytype;
    let mut _2: Mytype;
    let mut _3: fn(mytype) -> isize;
    let _4: ();
    let mut _5: std::fmt::Arguments<'_>;
    let mut _6: &[&str];
    let mut _7: &[core::fmt::rt::Argument<'_>];
    let _8: &[core::fmt::rt::Argument<'_>; 1];
    let _9: [core::fmt::rt::Argument<'_>; 1];
    let mut _10: core::fmt::rt::Argument<'_>;
    let _11: &isize;
    let _12: isize;
    let mut _14: (&isize, &isize);
    let mut _15: &isize;
    let _16: isize;
    let mut _17: fn(mytype) -> isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug myval => _1;
        let _13: Mytype;
        let mut _28: &[&str; 2];
        scope 2 {
            debug m => _13;
            let _18: &isize;
            let _19: &isize;
            let mut _27: &isize;
            scope 3 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _24;
                }
            }
        }
    }

    bb0: {
        _3 = compute as fn(mytype) -> isize (Pointer(ReifyFnPointer));
        _2 = Mytype { compute: move _3, val: const 30_isize };
        _1 = mytype(move _2);
        _28 = const _;
        _6 = _28 as &[&str] (Pointer(Unsize));
        _12 = compute(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = &_12;
        _10 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = [move _10];
        _8 = &_9;
        _7 = _8 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _5 = Arguments::<'_>::new_v1(move _6, move _7) -> [return: bb3, unwind continue];
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = (_1.0: Mytype);
        _17 = (_13.0: fn(mytype) -> isize);
        _16 = move _17(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = &_16;
        _27 = const _;
        _14 = (move _15, _27);
        _18 = (_14.0: &isize);
        _19 = (_14.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb7: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 50_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn mytype(_1: Mytype) -> mytype {
    let mut _0: mytype;

    bb0: {
        _0 = mytype(move _1);
        return;
    }
}

// MIR FOR CTFE
fn mytype(_1: Mytype) -> mytype {
    let mut _0: mytype;

    bb0: {
        _0 = mytype(move _1);
        return;
    }
}
