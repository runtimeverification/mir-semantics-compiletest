// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/newtype.rs:4:16: 4:21>::clone(_1: &mytype) -> mytype {
    debug self => _1;                    // in scope 0 at ui/newtype.rs:4:16: 4:21
    let mut _0: mytype;                  // return place in scope 0 at ui/newtype.rs:4:16: 4:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/newtype.rs:4:16: 4:21
        return;                          // scope 0 at ui/newtype.rs:4:21: 4:21
    }
}

fn <impl at ui/newtype.rs:7:16: 7:21>::clone(_1: &Mytype) -> Mytype {
    debug self => _1;                    // in scope 0 at ui/newtype.rs:7:16: 7:21
    let mut _0: Mytype;                  // return place in scope 0 at ui/newtype.rs:7:16: 7:21
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/newtype.rs:7:16: 7:21
        return;                          // scope 0 at ui/newtype.rs:7:21: 7:21
    }
}

fn compute(_1: mytype) -> isize {
    debug i => _1;                       // in scope 0 at ui/newtype.rs:13:12: 13:13
    let mut _0: isize;                   // return place in scope 0 at ui/newtype.rs:13:26: 13:31
    let _2: Mytype;                      // in scope 0 at ui/newtype.rs:14:16: 14:17
    let mut _3: isize;                   // in scope 0 at ui/newtype.rs:15:12: 15:17
    let mut _4: (isize, bool);           // in scope 0 at ui/newtype.rs:15:12: 15:22
    scope 1 {
        debug m => _2;                   // in scope 1 at ui/newtype.rs:14:16: 14:17
    }

    bb0: {
        _2 = (_1.0: Mytype);             // scope 0 at ui/newtype.rs:14:16: 14:17
        _3 = (_2.1: isize);              // scope 1 at ui/newtype.rs:15:12: 15:17
        _4 = CheckedAdd(_3, const 20_isize); // scope 1 at ui/newtype.rs:15:12: 15:22
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _3, const 20_isize) -> bb1; // scope 1 at ui/newtype.rs:15:12: 15:22
    }

    bb1: {
        _0 = move (_4.0: isize);         // scope 1 at ui/newtype.rs:15:12: 15:22
        return;                          // scope 0 at ui/newtype.rs:16:2: 16:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/newtype.rs:18:15: 18:15
    let _1: mytype;                      // in scope 0 at ui/newtype.rs:19:9: 19:14
    let mut _2: Mytype;                  // in scope 0 at ui/newtype.rs:19:24: 19:57
    let mut _3: fn(mytype) -> isize;     // in scope 0 at ui/newtype.rs:19:40: 19:47
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/newtype.rs:20:14: 20:18
    let mut _7: &[&str; 2];              // in scope 0 at ui/newtype.rs:20:14: 20:18
    let _8: &[&str; 2];                  // in scope 0 at ui/newtype.rs:20:14: 20:18
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/newtype.rs:20:20: 20:34
    let mut _14: &isize;                 // in scope 0 at ui/newtype.rs:20:20: 20:34
    let _15: &isize;                     // in scope 0 at ui/newtype.rs:20:20: 20:34
    let _16: isize;                      // in scope 0 at ui/newtype.rs:20:20: 20:34
    let mut _17: mytype;                 // in scope 0 at ui/newtype.rs:20:28: 20:33
    let mut _19: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: isize;                      // in scope 0 at ui/newtype.rs:22:16: 22:34
    let mut _22: fn(mytype) -> isize;    // in scope 0 at ui/newtype.rs:22:16: 22:27
    let mut _23: mytype;                 // in scope 0 at ui/newtype.rs:22:28: 22:33
    let mut _24: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug myval => _1;               // in scope 1 at ui/newtype.rs:19:9: 19:14
        let _18: Mytype;                 // in scope 1 at ui/newtype.rs:21:16: 21:17
        let mut _40: &[&str; 2];         // in scope 1 at ui/newtype.rs:20:14: 20:18
        scope 2 {
            debug m => _18;              // in scope 2 at ui/newtype.rs:21:16: 21:17
            let _25: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _26: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _39: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _25;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _26;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _31: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _31;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _3 = compute as fn(mytype) -> isize (Pointer(ReifyFnPointer)); // scope 0 at ui/newtype.rs:19:40: 19:47
                                         // mir::Constant
                                         // + span: ui/newtype.rs:19:40: 19:47
                                         // + literal: Const { ty: fn(mytype) -> isize {compute}, val: Value(<ZST>) }
        _2 = Mytype { compute: move _3, val: const 30_isize }; // scope 0 at ui/newtype.rs:19:24: 19:57
        _1 = mytype(move _2);            // scope 0 at ui/newtype.rs:19:17: 19:58
        _40 = const _;                   // scope 1 at ui/newtype.rs:20:14: 20:18
                                         // mir::Constant
                                         // + span: ui/newtype.rs:20:14: 20:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _40;                        // scope 1 at ui/newtype.rs:20:14: 20:18
        _7 = _8;                         // scope 1 at ui/newtype.rs:20:14: 20:18
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/newtype.rs:20:14: 20:18
        _17 = _1;                        // scope 1 at ui/newtype.rs:20:28: 20:33
        _16 = compute(move _17) -> bb1;  // scope 1 at ui/newtype.rs:20:20: 20:34
                                         // mir::Constant
                                         // + span: ui/newtype.rs:20:20: 20:27
                                         // + literal: Const { ty: fn(mytype) -> isize {compute}, val: Value(<ZST>) }
    }

    bb1: {
        _15 = &_16;                      // scope 1 at ui/newtype.rs:20:20: 20:34
        _14 = _15;                       // scope 1 at ui/newtype.rs:20:20: 20:34
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _14) -> bb2; // scope 1 at ui/newtype.rs:20:20: 20:34
                                         // mir::Constant
                                         // + span: ui/newtype.rs:20:20: 20:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _print(move _5) -> bb4;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = (_1.0: Mytype);            // scope 1 at ui/newtype.rs:21:16: 21:17
        _22 = (_18.0: fn(mytype) -> isize); // scope 2 at ui/newtype.rs:22:16: 22:27
        _23 = _1;                        // scope 2 at ui/newtype.rs:22:28: 22:33
        _21 = move _22(move _23) -> bb5; // scope 2 at ui/newtype.rs:22:16: 22:34
    }

    bb5: {
        _20 = &_21;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _39 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _24 = _39;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _24);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_19.0: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_19.1: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = (*_25);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = const 50_isize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = Eq(move _29, move _30);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _27 = Not(move _28);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _31 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<isize, isize>(move _33, move _34, move _36, move _38); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/newtype.rs:23:2: 23:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/newtype.rs:22:36: 22:38

    bb0: {
        _1 = const 50_isize;             // scope 0 at ui/newtype.rs:22:36: 22:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/newtype.rs:20:14: 20:18
    let mut _1: [&str; 2];               // in scope 0 at ui/newtype.rs:20:14: 20:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/newtype.rs:20:14: 20:18
                                         // mir::Constant
                                         // + span: ui/newtype.rs:20:14: 20:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/newtype.rs:20:14: 20:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/newtype.rs:20:14: 20:18
        return;                          // scope 0 at ui/newtype.rs:20:14: 20:18
    }
}

fn mytype(_1: Mytype) -> mytype {
    let mut _0: mytype;                  // return place in scope 0 at ui/newtype.rs:5:1: 5:14

    bb0: {
        _0 = mytype(move _1);            // scope 0 at ui/newtype.rs:5:1: 5:14
        return;                          // scope 0 at ui/newtype.rs:5:1: 5:14
    }
}

// MIR FOR CTFE
fn mytype(_1: Mytype) -> mytype {
    let mut _0: mytype;                  // return place in scope 0 at ui/newtype.rs:5:1: 5:14

    bb0: {
        _0 = mytype(move _1);            // scope 0 at ui/newtype.rs:5:1: 5:14
        return;                          // scope 0 at ui/newtype.rs:5:1: 5:14
    }
}
