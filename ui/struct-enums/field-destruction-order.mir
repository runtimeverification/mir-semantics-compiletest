// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut hit: bool = {
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/field-destruction-order.rs:26:17: 26:21

    bb0: {
        _0 = const false;                // scope 0 at ui/struct-enums/field-destruction-order.rs:26:24: 26:29
        return;                          // scope 0 at ui/struct-enums/field-destruction-order.rs:26:1: 26:30
    }
}

fn <impl at ui/struct-enums/field-destruction-order.rs:28:1: 28:16>::drop(_1: &mut A) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/field-destruction-order.rs:29:13: 29:22
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/field-destruction-order.rs:29:24: 29:24
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/field-destruction-order.rs:31:13: 31:26
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/field-destruction-order.rs:31:21: 31:25
    let mut _4: bool;                    // in scope 0 at ui/struct-enums/field-destruction-order.rs:31:22: 31:25
    let mut _5: *mut bool;               // in scope 0 at ui/struct-enums/field-destruction-order.rs:31:22: 31:25
    let mut _6: !;                       // in scope 0 at ui/struct-enums/field-destruction-order.rs:31:13: 31:26
    let mut _7: *mut bool;               // in scope 0 at ui/struct-enums/field-destruction-order.rs:32:13: 32:16
    scope 1 {
    }

    bb0: {
        _5 = const {alloc1: *mut bool};  // scope 1 at ui/struct-enums/field-destruction-order.rs:31:22: 31:25
                                         // mir::Constant
                                         // + span: ui/struct-enums/field-destruction-order.rs:31:22: 31:25
                                         // + literal: Const { ty: *mut bool, val: Value(Scalar(alloc1)) }
        _4 = (*_5);                      // scope 1 at ui/struct-enums/field-destruction-order.rs:31:22: 31:25
        _3 = Not(move _4);               // scope 1 at ui/struct-enums/field-destruction-order.rs:31:21: 31:25
        _2 = Not(move _3);               // scope 1 at ui/struct-enums/field-destruction-order.rs:31:13: 31:26
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/struct-enums/field-destruction-order.rs:31:13: 31:26
    }

    bb1: {
        _6 = core::panicking::panic(const "assertion failed: !hit"); // scope 1 at ui/struct-enums/field-destruction-order.rs:31:13: 31:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/field-destruction-order.rs:31:13: 31:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _7 = const {alloc1: *mut bool};  // scope 1 at ui/struct-enums/field-destruction-order.rs:32:13: 32:16
                                         // mir::Constant
                                         // + span: ui/struct-enums/field-destruction-order.rs:32:13: 32:16
                                         // + literal: Const { ty: *mut bool, val: Value(Scalar(alloc1)) }
        (*_7) = const true;              // scope 1 at ui/struct-enums/field-destruction-order.rs:32:13: 32:23
        return;                          // scope 0 at ui/struct-enums/field-destruction-order.rs:34:6: 34:6
    }
}

alloc1 (static: hit, size: 1, align: 1) {
    00                                              │ .
}

fn <impl at ui/struct-enums/field-destruction-order.rs:37:1: 37:16>::drop(_1: &mut B) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/field-destruction-order.rs:38:13: 38:22
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/field-destruction-order.rs:38:24: 38:24
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/field-destruction-order.rs:40:13: 40:25
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/field-destruction-order.rs:40:21: 40:24
    let mut _4: *mut bool;               // in scope 0 at ui/struct-enums/field-destruction-order.rs:40:21: 40:24
    let mut _5: !;                       // in scope 0 at ui/struct-enums/field-destruction-order.rs:40:13: 40:25
    scope 1 {
    }

    bb0: {
        _4 = const {alloc1: *mut bool};  // scope 1 at ui/struct-enums/field-destruction-order.rs:40:21: 40:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/field-destruction-order.rs:40:21: 40:24
                                         // + literal: Const { ty: *mut bool, val: Value(Scalar(alloc1)) }
        _3 = (*_4);                      // scope 1 at ui/struct-enums/field-destruction-order.rs:40:21: 40:24
        _2 = Not(move _3);               // scope 1 at ui/struct-enums/field-destruction-order.rs:40:13: 40:25
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 1 at ui/struct-enums/field-destruction-order.rs:40:13: 40:25
    }

    bb1: {
        _5 = core::panicking::panic(const "assertion failed: hit"); // scope 1 at ui/struct-enums/field-destruction-order.rs:40:13: 40:25
                                         // mir::Constant
                                         // + span: ui/struct-enums/field-destruction-order.rs:40:13: 40:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/field-destruction-order.rs:42:6: 42:6
    }
}

alloc1 (static: hit, size: 1, align: 1) {
    00                                              │ .
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/field-destruction-order.rs:45:15: 45:15
    let _1: C;                           // in scope 0 at ui/struct-enums/field-destruction-order.rs:46:9: 46:11
    scope 1 {
        debug _c => _1;                  // in scope 1 at ui/struct-enums/field-destruction-order.rs:46:9: 46:11
    }

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/struct-enums/field-destruction-order.rs:47:1: 47:2
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/field-destruction-order.rs:47:2: 47:2
    }
}
