// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _foo(_1: Foo) -> () {
    debug f => _1;                       // in scope 0 at ui/struct-enums/namespaced-enums.rs:11:10: 11:11
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/namespaced-enums.rs:11:18: 11:18
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/namespaced-enums.rs:13:9: 13:15

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/struct-enums/namespaced-enums.rs:12:11: 12:12
        switchInt(move _2) -> [0: bb2, 1: bb2, 2: bb2, otherwise: bb1]; // scope 0 at ui/struct-enums/namespaced-enums.rs:12:5: 12:12
    }

    bb1: {
        unreachable;                     // scope 0 at ui/struct-enums/namespaced-enums.rs:12:11: 12:12
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/namespaced-enums.rs:15:2: 15:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/namespaced-enums.rs:17:15: 17:15

    bb0: {
        return;                          // scope 0 at ui/struct-enums/namespaced-enums.rs:17:17: 17:17
    }
}

fn Foo::B(_1: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/namespaced-enums.rs:7:5: 7:6

    bb0: {
        _0 = Foo::B(move _1);            // scope 0 at ui/struct-enums/namespaced-enums.rs:7:5: 7:6
        return;                          // scope 0 at ui/struct-enums/namespaced-enums.rs:7:5: 7:6
    }
}

// MIR FOR CTFE
fn Foo::B(_1: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/namespaced-enums.rs:7:5: 7:6

    bb0: {
        _0 = Foo::B(move _1);            // scope 0 at ui/struct-enums/namespaced-enums.rs:7:5: 7:6
        return;                          // scope 0 at ui/struct-enums/namespaced-enums.rs:7:5: 7:6
    }
}
