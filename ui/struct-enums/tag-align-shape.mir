// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/tag-align-shape.rs:5:10: 5:15>::fmt(_1: &a_tag, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
    let _3: &u64;                        // in scope 0 at ui/struct-enums/tag-align-shape.rs:7:15: 7:18
    let mut _4: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
    let mut _5: &str;                    // in scope 0 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
    let _6: &str;                        // in scope 0 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
    let mut _7: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/tag-align-shape.rs:7:15: 7:18
    let mut _8: &&u64;                   // in scope 0 at ui/struct-enums/tag-align-shape.rs:7:15: 7:18
    let _9: &&u64;                       // in scope 0 at ui/struct-enums/tag-align-shape.rs:7:15: 7:18
    scope 1 {
        debug __self_0 => _3;            // in scope 1 at ui/struct-enums/tag-align-shape.rs:7:15: 7:18
    }

    bb0: {
        _3 = &(((*_1) as a_tag_var).0: u64); // scope 0 at ui/struct-enums/tag-align-shape.rs:7:15: 7:18
        _4 = &mut (*_2);                 // scope 1 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
        _6 = const "a_tag_var";          // scope 1 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 1 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
        _9 = &_3;                        // scope 1 at ui/struct-enums/tag-align-shape.rs:7:15: 7:18
        _8 = _9;                         // scope 1 at ui/struct-enums/tag-align-shape.rs:7:15: 7:18
        _7 = move _8 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/struct-enums/tag-align-shape.rs:7:15: 7:18
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _4, move _5, move _7) -> bb1; // scope 1 at ui/struct-enums/tag-align-shape.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:5:10: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/tag-align-shape.rs:5:15: 5:15
    }
}

fn <impl at ui/struct-enums/tag-align-shape.rs:10:10: 10:15>::fmt(_1: &t_rec, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
    debug f => _2;                       // in scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
    let _5: &str;                        // in scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
    let mut _6: &str;                    // in scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
    let _7: &str;                        // in scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
    let mut _9: &u8;                     // in scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
    let _10: &u8;                        // in scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
    let mut _11: &str;                   // in scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
    let _12: &str;                       // in scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
    let mut _14: &&a_tag;                // in scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
    let _15: &&a_tag;                    // in scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
    let _16: &a_tag;                     // in scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
        _5 = const "t_rec";              // scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:10:10: 10:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
        _7 = const "c8";                 // scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:12:5: 12:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
        _10 = &((*_1).0: u8);            // scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
        _9 = _10;                        // scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/tag-align-shape.rs:12:5: 12:11
        _12 = const "t";                 // scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:13:5: 13:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
        _16 = &((*_1).1: a_tag);         // scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
        _15 = &_16;                      // scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
        _14 = _15;                       // scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/tag-align-shape.rs:13:5: 13:13
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/struct-enums/tag-align-shape.rs:10:10: 10:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:10:10: 10:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/tag-align-shape.rs:10:15: 10:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag-align-shape.rs:16:15: 16:15
    let _1: t_rec;                       // in scope 0 at ui/struct-enums/tag-align-shape.rs:17:9: 17:10
    let mut _2: a_tag;                   // in scope 0 at ui/struct-enums/tag-align-shape.rs:17:31: 17:51
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _6: &[&str];                 // in scope 0 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
    let mut _7: &[&str; 1];              // in scope 0 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
    let _8: &[&str; 1];                  // in scope 0 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/tag-align-shape.rs:18:29: 18:30
    let mut _14: &t_rec;                 // in scope 0 at ui/struct-enums/tag-align-shape.rs:18:29: 18:30
    let _15: &t_rec;                     // in scope 0 at ui/struct-enums/tag-align-shape.rs:18:29: 18:30
    let _16: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _17: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _18: &[&str];                // in scope 0 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
    let mut _19: &[&str; 2];             // in scope 0 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
    let _20: &[&str; 2];                 // in scope 0 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
    let mut _21: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _23: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _24: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/tag-align-shape.rs:19:26: 19:27
    let mut _26: &std::string::String;   // in scope 0 at ui/struct-enums/tag-align-shape.rs:19:26: 19:27
    let _27: &std::string::String;       // in scope 0 at ui/struct-enums/tag-align-shape.rs:19:26: 19:27
    let mut _28: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _29: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _30: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _31: std::string::String;        // in scope 0 at ui/struct-enums/tag-align-shape.rs:20:19: 20:67
    let mut _32: &str;                   // in scope 0 at ui/struct-enums/tag-align-shape.rs:20:19: 20:67
    let _33: &str;                       // in scope 0 at ui/struct-enums/tag-align-shape.rs:20:19: 20:55
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _38: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _39: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _41: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _42: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _43: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _44: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _45: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _46: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/struct-enums/tag-align-shape.rs:17:9: 17:10
        let _3: std::string::String;     // in scope 1 at ui/struct-enums/tag-align-shape.rs:18:9: 18:10
        let _4: std::string::String;     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let mut _49: &[&str; 1];         // in scope 1 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
        scope 2 {
            debug y => _3;               // in scope 2 at ui/struct-enums/tag-align-shape.rs:18:9: 18:10
            let _34: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _35: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _48: &[&str; 2];     // in scope 2 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
            scope 4 {
                debug left_val => _34;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _35;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _40: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _40;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
        scope 3 {
            debug res => _4;             // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
    }

    bb0: {
        _2 = const a_tag::a_tag_var(44_u64); // scope 0 at ui/struct-enums/tag-align-shape.rs:17:31: 17:51
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:17:31: 17:51
                                         // + literal: Const { ty: a_tag, val: Value(Scalar(0x000000000000002c)) }
        _1 = t_rec { c8: const 22_u8, t: move _2 }; // scope 0 at ui/struct-enums/tag-align-shape.rs:17:13: 17:52
        _49 = const _;                   // scope 1 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:18:21: 18:27
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _8 = _49;                        // scope 1 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
        _7 = _8;                         // scope 1 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
        _15 = &_1;                       // scope 1 at ui/struct-enums/tag-align-shape.rs:18:29: 18:30
        _14 = _15;                       // scope 1 at ui/struct-enums/tag-align-shape.rs:18:29: 18:30
        _13 = core::fmt::ArgumentV1::<'_>::new_debug::<t_rec>(move _14) -> bb1; // scope 1 at ui/struct-enums/tag-align-shape.rs:18:29: 18:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:18:29: 18:30
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b t_rec) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<t_rec>}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = [move _13];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = format(move _5) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = move _4;                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _48 = const _;                   // scope 2 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:19:14: 19:24
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _20 = _48;                       // scope 2 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
        _19 = _20;                       // scope 2 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
        _18 = move _19 as &[&str] (Pointer(Unsize)); // scope 2 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
        _27 = &_3;                       // scope 2 at ui/struct-enums/tag-align-shape.rs:19:26: 19:27
        _26 = _27;                       // scope 2 at ui/struct-enums/tag-align-shape.rs:19:26: 19:27
        _25 = core::fmt::ArgumentV1::<'_>::new_debug::<String>(move _26) -> [return: bb4, unwind: bb14]; // scope 2 at ui/struct-enums/tag-align-shape.rs:19:26: 19:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:19:26: 19:27
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<String>}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = [move _25];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _23 = &_24;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _22 = _23;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _21 = move _22 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _17 = Arguments::<'_>::new_v1(move _18, move _21) -> [return: bb5, unwind: bb14]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = _print(move _17) -> [return: bb6, unwind: bb14]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = &_3;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _33 = const "t_rec { c8: 22, t: a_tag_var(44) }"; // scope 2 at ui/struct-enums/tag-align-shape.rs:20:19: 20:55
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:20:19: 20:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _32 = _33;                       // scope 2 at ui/struct-enums/tag-align-shape.rs:20:19: 20:67
        _31 = <str as ToString>::to_string(move _32) -> [return: bb7, unwind: bb14]; // scope 2 at ui/struct-enums/tag-align-shape.rs:20:19: 20:67
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:20:56: 20:65
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb7: {
        _30 = &_31;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _28 = (move _29, move _30);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_28.0: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_28.1: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _38 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _39 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _37 = <String as PartialEq>::eq(move _38, move _39) -> [return: bb8, unwind: bb13]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _36 = Not(move _37);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _36) -> [0: bb10, otherwise: bb9]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _40 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _42 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _43 = _44;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _46 = _35;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _45 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _41 = core::panicking::assert_failed::<String, String>(move _42, move _43, move _45, move _47) -> bb13; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_31) -> [return: bb11, unwind: bb14]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb11: {
        drop(_3) -> bb12;                // scope 1 at ui/struct-enums/tag-align-shape.rs:21:1: 21:2
    }

    bb12: {
        return;                          // scope 0 at ui/struct-enums/tag-align-shape.rs:21:2: 21:2
    }

    bb13 (cleanup): {
        drop(_31) -> bb14;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb14 (cleanup): {
        drop(_3) -> bb15;                // scope 1 at ui/struct-enums/tag-align-shape.rs:21:1: 21:2
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/tag-align-shape.rs:16:1: 21:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
    let mut _1: [&str; 2];               // in scope 0 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24

    bb0: {
        _1 = [const "y = ", const "\n"]; // scope 0 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:19:14: 19:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:19:14: 19:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
        return;                          // scope 0 at ui/struct-enums/tag-align-shape.rs:19:14: 19:24
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-align-shape.rs:18:21: 18:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
        return;                          // scope 0 at ui/struct-enums/tag-align-shape.rs:18:21: 18:27
    }
}

fn a_tag::a_tag_var(_1: u64) -> a_tag {
    let mut _0: a_tag;                   // return place in scope 0 at ui/struct-enums/tag-align-shape.rs:7:5: 7:14

    bb0: {
        _0 = a_tag::a_tag_var(move _1);  // scope 0 at ui/struct-enums/tag-align-shape.rs:7:5: 7:14
        return;                          // scope 0 at ui/struct-enums/tag-align-shape.rs:7:5: 7:14
    }
}

// MIR FOR CTFE
fn a_tag::a_tag_var(_1: u64) -> a_tag {
    let mut _0: a_tag;                   // return place in scope 0 at ui/struct-enums/tag-align-shape.rs:7:5: 7:14

    bb0: {
        _0 = a_tag::a_tag_var(move _1);  // scope 0 at ui/struct-enums/tag-align-shape.rs:7:5: 7:14
        return;                          // scope 0 at ui/struct-enums/tag-align-shape.rs:7:5: 7:14
    }
}
