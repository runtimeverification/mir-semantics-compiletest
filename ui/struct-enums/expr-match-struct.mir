// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/expr-match-struct.rs:8:16: 8:21>::clone(_1: &R) -> R {
    debug self => _1;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:8:16: 8:21
    let mut _0: R;                       // return place in scope 0 at ui/struct-enums/expr-match-struct.rs:8:16: 8:21
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/struct-enums/expr-match-struct.rs:8:16: 8:21
        return;                          // scope 0 at ui/struct-enums/expr-match-struct.rs:8:21: 8:21
    }
}

fn test_rec() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/expr-match-struct.rs:11:15: 11:15
    let _1: R;                           // in scope 0 at ui/struct-enums/expr-match-struct.rs:12:9: 12:11
    let mut _2: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug rs => _1;                  // in scope 1 at ui/struct-enums/expr-match-struct.rs:12:9: 12:11
        let _5: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &isize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _19: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = const R {{ i: 100_isize }}; // scope 0 at ui/struct-enums/expr-match-struct.rs:12:35: 12:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/expr-match-struct.rs:12:35: 12:45
                                         // + literal: Const { ty: R, val: Value(Scalar(0x0000000000000064)) }
        _3 = &(_1.0: isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(test_rec, [], Some(promoted[0])) }
        _4 = _19;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &isize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 100_isize;           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<isize, isize>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/expr-match-struct.rs:14:2: 14:2
    }
}

promoted[0] in test_rec: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:13:22: 13:25

    bb0: {
        _1 = const 100_isize;            // scope 0 at ui/struct-enums/expr-match-struct.rs:13:22: 13:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn <impl at ui/struct-enums/expr-match-struct.rs:16:16: 16:21>::clone(_1: &mood) -> mood {
    debug self => _1;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:16:16: 16:21
    let mut _0: mood;                    // return place in scope 0 at ui/struct-enums/expr-match-struct.rs:16:16: 16:21

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/struct-enums/expr-match-struct.rs:16:16: 16:21
        return;                          // scope 0 at ui/struct-enums/expr-match-struct.rs:16:21: 16:21
    }
}

fn <impl at ui/struct-enums/expr-match-struct.rs:16:23: 16:28>::fmt(_1: &mood, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
    debug f => _2;                       // in scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
    let _6: &str;                        // in scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
    let _7: &str;                        // in scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
        _5 = discriminant((*_1));        // scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
        switchInt(move _5) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
    }

    bb1: {
        _7 = const "sad";                // scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/expr-match-struct.rs:16:23: 16:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
        goto -> bb4;                     // scope 0 at ui/struct-enums/expr-match-struct.rs:16:27: 16:28
    }

    bb2: {
        unreachable;                     // scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
    }

    bb3: {
        _6 = const "happy";              // scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/expr-match-struct.rs:16:23: 16:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
        goto -> bb4;                     // scope 0 at ui/struct-enums/expr-match-struct.rs:16:27: 16:28
    }

    bb4: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb5; // scope 0 at ui/struct-enums/expr-match-struct.rs:16:23: 16:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/expr-match-struct.rs:16:23: 16:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/struct-enums/expr-match-struct.rs:16:28: 16:28
    }
}

fn <impl at ui/struct-enums/expr-match-struct.rs:19:1: 19:24>::eq(_1: &mood, _2: &mood) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:20:11: 20:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:20:18: 20:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/expr-match-struct.rs:20:35: 20:39
    let mut _3: usize;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:27
    let _4: mood;                        // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:10: 21:17
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:10: 21:17
    let mut _6: bool;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:27
    let mut _7: bool;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:27
    let mut _8: usize;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:31: 21:50
    let _9: mood;                        // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:32: 21:40
    let mut _10: isize;                  // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:32: 21:40
    let mut _11: bool;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:31: 21:50
    let mut _12: bool;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:21:31: 21:50

    bb0: {
        _4 = (*_1);                      // scope 0 at ui/struct-enums/expr-match-struct.rs:21:10: 21:17
        _5 = discriminant(_4);           // scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:27
        _6 = Ge(const 1_isize, _5);      // scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:27
        assume(_6);                      // scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:27
        _7 = Le(const 0_isize, _5);      // scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:27
        assume(_7);                      // scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:27
        _3 = move _5 as usize (IntToInt); // scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:27
        _9 = (*_2);                      // scope 0 at ui/struct-enums/expr-match-struct.rs:21:32: 21:40
        _10 = discriminant(_9);          // scope 0 at ui/struct-enums/expr-match-struct.rs:21:31: 21:50
        _11 = Ge(const 1_isize, _10);    // scope 0 at ui/struct-enums/expr-match-struct.rs:21:31: 21:50
        assume(_11);                     // scope 0 at ui/struct-enums/expr-match-struct.rs:21:31: 21:50
        _12 = Le(const 0_isize, _10);    // scope 0 at ui/struct-enums/expr-match-struct.rs:21:31: 21:50
        assume(_12);                     // scope 0 at ui/struct-enums/expr-match-struct.rs:21:31: 21:50
        _8 = move _10 as usize (IntToInt); // scope 0 at ui/struct-enums/expr-match-struct.rs:21:31: 21:50
        _0 = Eq(move _3, move _8);       // scope 0 at ui/struct-enums/expr-match-struct.rs:21:9: 21:50
        return;                          // scope 0 at ui/struct-enums/expr-match-struct.rs:22:6: 22:6
    }
}

fn <impl at ui/struct-enums/expr-match-struct.rs:19:1: 19:24>::ne(_1: &mood, _2: &mood) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:23:11: 23:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:23:18: 23:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/expr-match-struct.rs:23:35: 23:39
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:23:43: 23:60
    let mut _4: &mood;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:23:43: 23:60
    let mut _5: &mood;                   // in scope 0 at ui/struct-enums/expr-match-struct.rs:23:54: 23:59

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/expr-match-struct.rs:23:43: 23:60
        _5 = _2;                         // scope 0 at ui/struct-enums/expr-match-struct.rs:23:54: 23:59
        _3 = <mood as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/struct-enums/expr-match-struct.rs:23:43: 23:60
                                         // mir::Constant
                                         // + span: ui/struct-enums/expr-match-struct.rs:23:51: 23:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mood, &'b mood) -> bool {<mood as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/struct-enums/expr-match-struct.rs:23:42: 23:60
        return;                          // scope 0 at ui/struct-enums/expr-match-struct.rs:23:62: 23:62
    }
}

fn test_tag() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/expr-match-struct.rs:26:15: 26:15
    let _1: mood;                        // in scope 0 at ui/struct-enums/expr-match-struct.rs:27:9: 27:11
    let mut _2: (&mood, &mood);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &mood;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &mood;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &mood;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &mood;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &mood;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &mood;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &mood;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &mood;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug rs => _1;                  // in scope 1 at ui/struct-enums/expr-match-struct.rs:27:9: 27:11
        let _5: &mood;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _6: &mood;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _19: &mood;              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _5;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _6;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _11: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _11;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = mood::happy;                // scope 0 at ui/struct-enums/expr-match-struct.rs:27:37: 27:48
        _3 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &mood, val: Unevaluated(test_tag, [], Some(promoted[0])) }
        _4 = _19;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &mood);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &mood);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <mood as PartialEq>::eq(move _9, move _10) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mood, &'b mood) -> bool {<mood as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Not(move _8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<mood, mood>(move _13, move _14, move _16, move _18); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a mood, &'b mood, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<mood, mood>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/expr-match-struct.rs:29:2: 29:2
    }
}

promoted[0] in test_tag: &mood = {
    let mut _0: &mood;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: mood;                    // in scope 0 at ui/struct-enums/expr-match-struct.rs:28:20: 28:31

    bb0: {
        _1 = mood::happy;                // scope 0 at ui/struct-enums/expr-match-struct.rs:28:20: 28:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/expr-match-struct.rs:31:15: 31:15
    let _1: ();                          // in scope 0 at ui/struct-enums/expr-match-struct.rs:31:17: 31:27
    let _2: ();                          // in scope 0 at ui/struct-enums/expr-match-struct.rs:31:29: 31:39

    bb0: {
        _1 = test_rec() -> bb1;          // scope 0 at ui/struct-enums/expr-match-struct.rs:31:17: 31:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/expr-match-struct.rs:31:17: 31:25
                                         // + literal: Const { ty: fn() {test_rec}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test_tag() -> bb2;          // scope 0 at ui/struct-enums/expr-match-struct.rs:31:29: 31:39
                                         // mir::Constant
                                         // + span: ui/struct-enums/expr-match-struct.rs:31:29: 31:37
                                         // + literal: Const { ty: fn() {test_tag}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/expr-match-struct.rs:31:42: 31:42
    }
}
