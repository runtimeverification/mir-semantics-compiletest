// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn cat(_1: String) -> cat {
    debug in_name => _1;                 // in scope 0 at ui/struct-enums/class-str-field.rs:13:8: 13:15
    let mut _0: cat;                     // return place in scope 0 at ui/struct-enums/class-str-field.rs:13:28: 13:31
    let mut _2: std::string::String;     // in scope 0 at ui/struct-enums/class-str-field.rs:15:15: 15:22

    bb0: {
        _2 = move _1;                    // scope 0 at ui/struct-enums/class-str-field.rs:15:15: 15:22
        _0 = cat { name: move _2 };      // scope 0 at ui/struct-enums/class-str-field.rs:14:5: 16:6
        return;                          // scope 0 at ui/struct-enums/class-str-field.rs:17:2: 17:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-str-field.rs:19:15: 19:15
    let _1: cat;                         // in scope 0 at ui/struct-enums/class-str-field.rs:20:7: 20:12
    let mut _2: std::string::String;     // in scope 0 at ui/struct-enums/class-str-field.rs:20:19: 20:37
    let mut _3: &str;                    // in scope 0 at ui/struct-enums/class-str-field.rs:20:19: 20:37
    let _4: &str;                        // in scope 0 at ui/struct-enums/class-str-field.rs:20:19: 20:25
    scope 1 {
        debug _nyan => _1;               // in scope 1 at ui/struct-enums/class-str-field.rs:20:7: 20:12
    }

    bb0: {
        _4 = const "nyan";               // scope 0 at ui/struct-enums/class-str-field.rs:20:19: 20:25
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-str-field.rs:20:19: 20:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/struct-enums/class-str-field.rs:20:19: 20:37
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/struct-enums/class-str-field.rs:20:19: 20:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-str-field.rs:20:26: 20:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = cat(move _2) -> bb2;        // scope 0 at ui/struct-enums/class-str-field.rs:20:15: 20:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-str-field.rs:20:15: 20:18
                                         // + literal: Const { ty: fn(String) -> cat {cat}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/struct-enums/class-str-field.rs:21:1: 21:2
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/class-str-field.rs:21:2: 21:2
    }
}
