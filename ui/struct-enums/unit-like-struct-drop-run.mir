// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/unit-like-struct-drop-run.rs:11:1: 11:18>::drop(_1: &mut Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:12:13: 12:22
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:12:24: 12:24
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _2 = begin_panic::<&str>(const "This panic should happen."); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/unit-like-struct-drop-run.rs:13:16: 13:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:17:15: 17:15
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:18:9: 18:10
    let mut _2: std::thread::JoinHandle<()>; // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:18:13: 20:7
    let mut _3: [closure@ui/struct-enums/unit-like-struct-drop-run.rs:18:27: 18:33]; // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:18:27: 20:6
    let mut _5: std::result::Result<std::boxed::Box<&str>, std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:22:13: 22:54
    let mut _6: std::boxed::Box<dyn std::any::Any + std::marker::Send>; // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:22:13: 22:27
    let mut _7: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:22:13: 22:14
    let mut _8: (&&str, &&str);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _10: &str;                       // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:23:16: 23:20
    let mut _11: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: &str;                   // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:22:9: 22:10
    let mut _28: *const &str;            // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:22:9: 22:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/struct-enums/unit-like-struct-drop-run.rs:18:9: 18:10
        let _4: std::boxed::Box<&str>;   // in scope 1 at ui/struct-enums/unit-like-struct-drop-run.rs:22:9: 22:10
        scope 2 {
            debug s => _4;               // in scope 2 at ui/struct-enums/unit-like-struct-drop-run.rs:22:9: 22:10
            let _12: &&str;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _13: &&str;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _26: &&str;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _12;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _13;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _18;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = spawn::<[closure@ui/struct-enums/unit-like-struct-drop-run.rs:18:27: 18:33], ()>(move _3) -> bb1; // scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:18:13: 20:7
                                         // mir::Constant
                                         // + span: ui/struct-enums/unit-like-struct-drop-run.rs:18:13: 18:26
                                         // + literal: Const { ty: fn([closure@ui/struct-enums/unit-like-struct-drop-run.rs:18:27: 18:33]) -> JoinHandle<()> {spawn::<[closure@ui/struct-enums/unit-like-struct-drop-run.rs:18:27: 18:33], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = JoinHandle::<()>::join(move _2) -> bb2; // scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:18:13: 20:14
                                         // mir::Constant
                                         // + span: ui/struct-enums/unit-like-struct-drop-run.rs:20:8: 20:12
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = move _1;                    // scope 1 at ui/struct-enums/unit-like-struct-drop-run.rs:22:13: 22:14
        _6 = Result::<(), Box<dyn Any + Send>>::unwrap_err(move _7) -> bb3; // scope 1 at ui/struct-enums/unit-like-struct-drop-run.rs:22:13: 22:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/unit-like-struct-drop-run.rs:22:15: 22:25
                                         // + literal: Const { ty: fn(Result<(), Box<dyn Any + Send>>) -> Box<dyn Any + Send> {Result::<(), Box<dyn Any + Send>>::unwrap_err}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = Box::<(dyn Any + Send + 'static)>::downcast::<&str>(move _6) -> bb4; // scope 1 at ui/struct-enums/unit-like-struct-drop-run.rs:22:13: 22:54
                                         // mir::Constant
                                         // + span: ui/struct-enums/unit-like-struct-drop-run.rs:22:28: 22:36
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<(dyn Any + Send + 'static)>) -> Result<Box<&str>, Box<(dyn Any + Send + 'static)>> {Box::<(dyn Any + Send + 'static)>::downcast::<&str>}, val: Value(<ZST>) }
    }

    bb4: {
        _4 = Result::<Box<&str>, Box<dyn Any + Send>>::unwrap(move _5) -> bb5; // scope 1 at ui/struct-enums/unit-like-struct-drop-run.rs:22:13: 22:63
                                         // mir::Constant
                                         // + span: ui/struct-enums/unit-like-struct-drop-run.rs:22:55: 22:61
                                         // + literal: Const { ty: fn(Result<Box<&str>, Box<dyn Any + Send>>) -> Box<&str> {Result::<Box<&str>, Box<dyn Any + Send>>::unwrap}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = (((_4.0: std::ptr::Unique<&str>).0: std::ptr::NonNull<&str>).0: *const &str); // scope 2 at ui/struct-enums/unit-like-struct-drop-run.rs:23:16: 23:20
        _27 = deref_copy (*_28);         // scope 2 at ui/struct-enums/unit-like-struct-drop-run.rs:23:16: 23:20
        _10 = _27;                       // scope 2 at ui/struct-enums/unit-like-struct-drop-run.rs:23:16: 23:20
        _9 = &_10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _26;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _11);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_8.0: &&str);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_8.1: &&str);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <&str as PartialEq>::eq(move _16, move _17) -> [return: bb6, unwind: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<&str, &str>(move _20, move _21, move _23, move _25) -> bb10; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_4) -> bb9;                 // scope 1 at ui/struct-enums/unit-like-struct-drop-run.rs:24:1: 24:2
    }

    bb9: {
        return;                          // scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:24:2: 24:2
    }

    bb10 (cleanup): {
        drop(_4) -> bb11;                // scope 1 at ui/struct-enums/unit-like-struct-drop-run.rs:24:1: 24:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:17:1: 24:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:23:22: 23:49

    bb0: {
        _1 = const "This panic should happen."; // scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:23:22: 23:49
                                         // mir::Constant
                                         // + span: ui/struct-enums/unit-like-struct-drop-run.rs:23:22: 23:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main::{closure#0}(_1: [closure@ui/struct-enums/unit-like-struct-drop-run.rs:18:27: 18:33]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:18:34: 18:34
    let _2: Foo;                         // in scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:19:13: 19:15
    scope 1 {
        debug _b => _2;                  // in scope 1 at ui/struct-enums/unit-like-struct-drop-run.rs:19:13: 19:15
    }

    bb0: {
        drop(_2) -> bb1;                 // scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:20:5: 20:6
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/unit-like-struct-drop-run.rs:20:6: 20:6
    }
}
