// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/class-separate-impl.rs:14:1: 14:9>::speak(_1: &mut cat) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-separate-impl.rs:15:18: 15:27
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:15:29: 15:29
    let _2: ();                          // in scope 0 at ui/struct-enums/class-separate-impl.rs:15:31: 15:42
    let mut _3: &mut cat;                // in scope 0 at ui/struct-enums/class-separate-impl.rs:15:31: 15:42

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/struct-enums/class-separate-impl.rs:15:31: 15:42
        _2 = cat::meow(move _3) -> bb1;  // scope 0 at ui/struct-enums/class-separate-impl.rs:15:31: 15:42
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:15:36: 15:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat) {cat::meow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:15:45: 15:45
    }
}

fn <impl at ui/struct-enums/class-separate-impl.rs:14:1: 14:9>::eat(_1: &mut cat) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-separate-impl.rs:17:16: 17:25
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:17:30: 17:34
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/class-separate-impl.rs:18:12: 18:31
    let mut _3: isize;                   // in scope 0 at ui/struct-enums/class-separate-impl.rs:18:12: 18:27
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
    let mut _7: &[&str; 1];              // in scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
    let _8: &[&str; 1];                  // in scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: (isize, bool);          // in scope 0 at ui/struct-enums/class-separate-impl.rs:20:13: 20:33
    let _13: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str];                // in scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
    let mut _16: &[&str; 1];             // in scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
    let _17: &[&str; 1];                 // in scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _19: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _20: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: &[&str; 1];             // in scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
    let mut _23: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: &[&str; 1];             // in scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34

    bb0: {
        _3 = ((*_1).1: isize);           // scope 0 at ui/struct-enums/class-separate-impl.rs:18:12: 18:27
        _2 = Gt(move _3, const 0_isize); // scope 0 at ui/struct-enums/class-separate-impl.rs:18:12: 18:31
        switchInt(move _2) -> [0: bb5, otherwise: bb1]; // scope 0 at ui/struct-enums/class-separate-impl.rs:18:12: 18:31
    }

    bb1: {
        _24 = const _;                   // scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:19:22: 19:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(cat::eat, [], Some(promoted[3])) }
        _8 = _24;                        // scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
        _7 = _8;                         // scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
        _23 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(cat::eat, [], Some(promoted[2])) }
        _11 = _23;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _print(move _5) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = CheckedSub(((*_1).1: isize), const 2_isize); // scope 0 at ui/struct-enums/class-separate-impl.rs:20:13: 20:33
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).1: isize), const 2_isize) -> bb4; // scope 0 at ui/struct-enums/class-separate-impl.rs:20:13: 20:33
    }

    bb4: {
        ((*_1).1: isize) = move (_12.0: isize); // scope 0 at ui/struct-enums/class-separate-impl.rs:20:13: 20:33
        _0 = const true;                 // scope 0 at ui/struct-enums/class-separate-impl.rs:21:20: 21:24
        goto -> bb8;                     // scope 0 at ui/struct-enums/class-separate-impl.rs:21:13: 21:24
    }

    bb5: {
        _22 = const _;                   // scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:24:22: 24:35
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(cat::eat, [], Some(promoted[1])) }
        _17 = _22;                       // scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
        _16 = _17;                       // scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
        _15 = move _16 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(cat::eat, [], Some(promoted[0])) }
        _20 = _21;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = _20;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = move _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _print(move _14) -> bb7;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = const false;                // scope 0 at ui/struct-enums/class-separate-impl.rs:25:20: 25:25
        goto -> bb8;                     // scope 0 at ui/struct-enums/class-separate-impl.rs:25:13: 25:25
    }

    bb8: {
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:27:6: 27:6
    }
}

promoted[0] in <impl at ui/struct-enums/class-separate-impl.rs:14:1: 14:9>::eat: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/struct-enums/class-separate-impl.rs:14:1: 14:9>::eat: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35

    bb0: {
        _1 = [const "Not hungry!\n"];    // scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:24:22: 24:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:24:22: 24:35
    }
}

promoted[2] in <impl at ui/struct-enums/class-separate-impl.rs:14:1: 14:9>::eat: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[3] in <impl at ui/struct-enums/class-separate-impl.rs:14:1: 14:9>::eat: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34

    bb0: {
        _1 = [const "OM NOM NOM\n"];     // scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:19:22: 19:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:19:22: 19:34
    }
}

fn <impl at ui/struct-enums/class-separate-impl.rs:30:1: 30:9>::meow(_1: &mut cat) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-separate-impl.rs:31:13: 31:22
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:31:24: 31:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
    let mut _5: &[&str; 1];              // in scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
    let _6: &[&str; 1];                  // in scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: (usize, bool);          // in scope 0 at ui/struct-enums/class-separate-impl.rs:33:9: 33:24
    let mut _11: usize;                  // in scope 0 at ui/struct-enums/class-separate-impl.rs:34:12: 34:26
    let mut _12: usize;                  // in scope 0 at ui/struct-enums/class-separate-impl.rs:34:12: 34:22
    let mut _13: (isize, bool);          // in scope 0 at ui/struct-enums/class-separate-impl.rs:35:13: 35:33
    let mut _14: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str; 1];             // in scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24

    bb0: {
        _15 = const _;                   // scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:32:18: 32:24
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(cat::meow, [], Some(promoted[1])) }
        _6 = _15;                        // scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
        _5 = _6;                         // scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
        _14 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(cat::meow, [], Some(promoted[0])) }
        _9 = _14;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = CheckedAdd(((*_1).0: usize), const 1_usize); // scope 0 at ui/struct-enums/class-separate-impl.rs:33:9: 33:24
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> bb3; // scope 0 at ui/struct-enums/class-separate-impl.rs:33:9: 33:24
    }

    bb3: {
        ((*_1).0: usize) = move (_10.0: usize); // scope 0 at ui/struct-enums/class-separate-impl.rs:33:9: 33:24
        _12 = ((*_1).0: usize);          // scope 0 at ui/struct-enums/class-separate-impl.rs:34:12: 34:22
        _11 = Rem(move _12, const 5_usize); // scope 0 at ui/struct-enums/class-separate-impl.rs:34:12: 34:26
        switchInt(move _11) -> [0: bb4, otherwise: bb6]; // scope 0 at ui/struct-enums/class-separate-impl.rs:34:12: 34:31
    }

    bb4: {
        _13 = CheckedAdd(((*_1).1: isize), const 1_isize); // scope 0 at ui/struct-enums/class-separate-impl.rs:35:13: 35:33
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: isize), const 1_isize) -> bb5; // scope 0 at ui/struct-enums/class-separate-impl.rs:35:13: 35:33
    }

    bb5: {
        ((*_1).1: isize) = move (_13.0: isize); // scope 0 at ui/struct-enums/class-separate-impl.rs:35:13: 35:33
        goto -> bb6;                     // scope 0 at ui/struct-enums/class-separate-impl.rs:34:9: 36:10
    }

    bb6: {
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:37:6: 37:6
    }
}

promoted[0] in <impl at ui/struct-enums/class-separate-impl.rs:30:1: 30:9>::meow: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/struct-enums/class-separate-impl.rs:30:1: 30:9>::meow: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24

    bb0: {
        _1 = [const "Meow\n"];           // scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:32:18: 32:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:32:18: 32:24
    }
}

fn cat(_1: usize, _2: isize, _3: String) -> cat {
    debug in_x => _1;                    // in scope 0 at ui/struct-enums/class-separate-impl.rs:40:8: 40:12
    debug in_y => _2;                    // in scope 0 at ui/struct-enums/class-separate-impl.rs:40:22: 40:26
    debug in_name => _3;                 // in scope 0 at ui/struct-enums/class-separate-impl.rs:40:36: 40:43
    let mut _0: cat;                     // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:40:56: 40:59
    let mut _4: usize;                   // in scope 0 at ui/struct-enums/class-separate-impl.rs:42:16: 42:20
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/class-separate-impl.rs:43:21: 43:25
    let mut _6: std::string::String;     // in scope 0 at ui/struct-enums/class-separate-impl.rs:44:15: 44:22

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/class-separate-impl.rs:42:16: 42:20
        _5 = _2;                         // scope 0 at ui/struct-enums/class-separate-impl.rs:43:21: 43:25
        _6 = move _3;                    // scope 0 at ui/struct-enums/class-separate-impl.rs:44:15: 44:22
        _0 = cat { meows: move _4, how_hungry: move _5, name: move _6 }; // scope 0 at ui/struct-enums/class-separate-impl.rs:41:5: 45:6
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:46:2: 46:2
    }
}

fn <impl at ui/struct-enums/class-separate-impl.rs:48:1: 48:26>::fmt(_1: &cat, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-separate-impl.rs:49:12: 49:17
    debug f => _2;                       // in scope 0 at ui/struct-enums/class-separate-impl.rs:49:19: 49:20
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:49:46: 49:57
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _5: &[&str];                 // in scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
    let mut _6: &[&str; 1];              // in scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
    let _7: &[&str; 1];                  // in scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/class-separate-impl.rs:50:25: 50:34
    let mut _13: &std::string::String;   // in scope 0 at ui/struct-enums/class-separate-impl.rs:50:25: 50:34
    let _14: &std::string::String;       // in scope 0 at ui/struct-enums/class-separate-impl.rs:50:25: 50:34
    let mut _15: &[&str; 1];             // in scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
        _15 = const _;                   // scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:50:19: 50:23
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(<cat as std::fmt::Display>::fmt, [], Some(promoted[0])) }
        _7 = _15;                        // scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
        _6 = _7;                         // scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
        _14 = &((*_1).2: std::string::String); // scope 0 at ui/struct-enums/class-separate-impl.rs:50:25: 50:34
        _13 = _14;                       // scope 0 at ui/struct-enums/class-separate-impl.rs:50:25: 50:34
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _13) -> bb1; // scope 0 at ui/struct-enums/class-separate-impl.rs:50:25: 50:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:50:25: 50:34
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:24: 520:54
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Formatter::<'_>::write_fmt(move _3, move _4) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:9: 520:55
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:520:14: 520:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, Arguments<'b>) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_fmt}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:51:6: 51:6
    }
}

promoted[0] in <impl at ui/struct-enums/class-separate-impl.rs:48:1: 48:26>::fmt: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:50:19: 50:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:50:19: 50:23
    }
}

fn print_out(_1: Box<dyn ToString>, _2: String) -> () {
    debug thing => _1;                   // in scope 0 at ui/struct-enums/class-separate-impl.rs:54:14: 54:19
    debug expected => _2;                // in scope 0 at ui/struct-enums/class-separate-impl.rs:54:40: 54:48
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:54:58: 54:58
    let _3: std::string::String;         // in scope 0 at ui/struct-enums/class-separate-impl.rs:55:7: 55:13
    let mut _4: &dyn std::string::ToString; // in scope 0 at ui/struct-enums/class-separate-impl.rs:55:16: 55:36
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
    let mut _8: &[&str; 2];              // in scope 0 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
    let _9: &[&str; 2];                  // in scope 0 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/class-separate-impl.rs:56:18: 56:24
    let mut _15: &std::string::String;   // in scope 0 at ui/struct-enums/class-separate-impl.rs:56:18: 56:24
    let _16: &std::string::String;       // in scope 0 at ui/struct-enums/class-separate-impl.rs:56:18: 56:24
    let mut _17: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _18: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _19: std::string::String;        // in scope 0 at ui/struct-enums/class-separate-impl.rs:57:14: 57:32
    let mut _20: &std::string::String;   // in scope 0 at ui/struct-enums/class-separate-impl.rs:57:14: 57:32
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: *const dyn std::string::ToString; // in scope 0 at ui/struct-enums/class-separate-impl.rs:54:14: 54:19
    scope 1 {
        debug actual => _3;              // in scope 1 at ui/struct-enums/class-separate-impl.rs:55:7: 55:13
        let _22: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _23: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _36: &[&str; 2];         // in scope 1 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
        scope 2 {
            debug left_val => _22;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _23;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _28: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _28;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _37 = (((_1.0: std::ptr::Unique<dyn std::string::ToString>).0: std::ptr::NonNull<dyn std::string::ToString>).0: *const dyn std::string::ToString); // scope 0 at ui/struct-enums/class-separate-impl.rs:55:16: 55:36
        _4 = &(*_37);                    // scope 0 at ui/struct-enums/class-separate-impl.rs:55:16: 55:36
        _3 = <dyn ToString as ToString>::to_string(move _4) -> [return: bb1, unwind: bb15]; // scope 0 at ui/struct-enums/class-separate-impl.rs:55:16: 55:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:55:25: 55:34
                                         // + literal: Const { ty: for<'a> fn(&'a dyn ToString) -> String {<dyn ToString as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _36 = const _;                   // scope 1 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:56:12: 56:16
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(print_out, [], Some(promoted[0])) }
        _9 = _36;                        // scope 1 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
        _8 = _9;                         // scope 1 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 1 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
        _16 = &_3;                       // scope 1 at ui/struct-enums/class-separate-impl.rs:56:18: 56:24
        _15 = _16;                       // scope 1 at ui/struct-enums/class-separate-impl.rs:56:18: 56:24
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _15) -> [return: bb2, unwind: bb14]; // scope 1 at ui/struct-enums/class-separate-impl.rs:56:18: 56:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:56:18: 56:24
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = [move _14];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> [return: bb3, unwind: bb14]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _print(move _6) -> [return: bb4, unwind: bb14]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = &_3;                       // scope 1 at ui/struct-enums/class-separate-impl.rs:57:14: 57:32
        _19 = <String as ToString>::to_string(move _20) -> [return: bb5, unwind: bb14]; // scope 1 at ui/struct-enums/class-separate-impl.rs:57:14: 57:32
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:57:21: 57:30
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = &_19;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = &_2;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _17 = (move _18, move _21);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_17.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_17.1: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = _23;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = <String as PartialEq>::eq(move _26, move _27) -> [return: bb6, unwind: bb13]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _24 = Not(move _25);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb8, otherwise: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _28 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<String, String>(move _30, move _31, move _33, move _35) -> bb13; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_19) -> [return: bb9, unwind: bb14]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        drop(_3) -> [return: bb10, unwind: bb15]; // scope 0 at ui/struct-enums/class-separate-impl.rs:58:1: 58:2
    }

    bb10: {
        drop(_2) -> [return: bb11, unwind: bb16]; // scope 0 at ui/struct-enums/class-separate-impl.rs:58:1: 58:2
    }

    bb11: {
        drop(_1) -> bb12;                // scope 0 at ui/struct-enums/class-separate-impl.rs:58:1: 58:2
    }

    bb12: {
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:58:2: 58:2
    }

    bb13 (cleanup): {
        drop(_19) -> bb14;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb14 (cleanup): {
        drop(_3) -> bb15;                // scope 0 at ui/struct-enums/class-separate-impl.rs:58:1: 58:2
    }

    bb15 (cleanup): {
        drop(_2) -> bb16;                // scope 0 at ui/struct-enums/class-separate-impl.rs:58:1: 58:2
    }

    bb16 (cleanup): {
        drop(_1) -> bb17;                // scope 0 at ui/struct-enums/class-separate-impl.rs:58:1: 58:2
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:54:1: 58:2
    }
}

promoted[0] in print_out: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
    let mut _1: [&str; 2];               // in scope 0 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:56:12: 56:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:56:12: 56:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:56:12: 56:16
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-separate-impl.rs:60:15: 60:15
    let _1: std::boxed::Box<dyn std::string::ToString>; // in scope 0 at ui/struct-enums/class-separate-impl.rs:61:7: 61:11
    let mut _2: std::boxed::Box<dyn std::string::ToString>; // in scope 0 at ui/struct-enums/class-separate-impl.rs:61:33: 61:93
    let mut _3: std::boxed::Box<dyn std::string::ToString>; // in scope 0 at ui/struct-enums/class-separate-impl.rs:61:33: 61:93
    let mut _4: std::boxed::Box<cat>;    // in scope 0 at ui/struct-enums/class-separate-impl.rs:61:33: 61:72
    let mut _5: cat;                     // in scope 0 at ui/struct-enums/class-separate-impl.rs:61:42: 61:71
    let mut _6: std::string::String;     // in scope 0 at ui/struct-enums/class-separate-impl.rs:61:52: 61:70
    let mut _7: &str;                    // in scope 0 at ui/struct-enums/class-separate-impl.rs:61:52: 61:70
    let _8: &str;                        // in scope 0 at ui/struct-enums/class-separate-impl.rs:61:52: 61:58
    let _9: ();                          // in scope 0 at ui/struct-enums/class-separate-impl.rs:62:3: 62:38
    let mut _10: std::boxed::Box<dyn std::string::ToString>; // in scope 0 at ui/struct-enums/class-separate-impl.rs:62:13: 62:17
    let mut _11: std::boxed::Box<dyn std::string::ToString>; // in scope 0 at ui/struct-enums/class-separate-impl.rs:62:13: 62:17
    let mut _12: std::string::String;    // in scope 0 at ui/struct-enums/class-separate-impl.rs:62:19: 62:37
    let mut _13: &str;                   // in scope 0 at ui/struct-enums/class-separate-impl.rs:62:19: 62:37
    let _14: &str;                       // in scope 0 at ui/struct-enums/class-separate-impl.rs:62:19: 62:25
    let mut _15: bool;                   // in scope 0 at ui/struct-enums/class-separate-impl.rs:62:37: 62:38
    scope 1 {
        debug nyan => _1;                // in scope 1 at ui/struct-enums/class-separate-impl.rs:61:7: 61:11
    }

    bb0: {
        _15 = const false;               // scope 0 at ui/struct-enums/class-separate-impl.rs:61:7: 61:11
        _8 = const "nyan";               // scope 0 at ui/struct-enums/class-separate-impl.rs:61:52: 61:58
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:61:52: 61:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at ui/struct-enums/class-separate-impl.rs:61:52: 61:70
        _6 = <str as ToString>::to_string(move _7) -> bb1; // scope 0 at ui/struct-enums/class-separate-impl.rs:61:52: 61:70
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:61:59: 61:68
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = cat(const 0_usize, const 2_isize, move _6) -> bb2; // scope 0 at ui/struct-enums/class-separate-impl.rs:61:42: 61:71
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:61:42: 61:45
                                         // + literal: Const { ty: fn(usize, isize, String) -> cat {cat}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Box::<cat>::new(move _5) -> bb3; // scope 0 at ui/struct-enums/class-separate-impl.rs:61:33: 61:72
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:61:33: 61:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(cat) -> Box<cat> {Box::<cat>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = move _4 as std::boxed::Box<dyn std::string::ToString> (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-separate-impl.rs:61:33: 61:72
        _2 = move _3;                    // scope 0 at ui/struct-enums/class-separate-impl.rs:61:33: 61:93
        _1 = move _2 as std::boxed::Box<dyn std::string::ToString> (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-separate-impl.rs:61:33: 61:93
        _11 = move _1;                   // scope 1 at ui/struct-enums/class-separate-impl.rs:62:13: 62:17
        _15 = const true;                // scope 1 at ui/struct-enums/class-separate-impl.rs:62:13: 62:17
        _10 = move _11 as std::boxed::Box<dyn std::string::ToString> (Pointer(Unsize)); // scope 1 at ui/struct-enums/class-separate-impl.rs:62:13: 62:17
        _14 = const "nyan";              // scope 1 at ui/struct-enums/class-separate-impl.rs:62:19: 62:25
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:62:19: 62:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 1 at ui/struct-enums/class-separate-impl.rs:62:19: 62:37
        _12 = <str as ToString>::to_string(move _13) -> [return: bb4, unwind: bb8]; // scope 1 at ui/struct-enums/class-separate-impl.rs:62:19: 62:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:62:26: 62:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = const false;               // scope 1 at ui/struct-enums/class-separate-impl.rs:62:3: 62:38
        _9 = print_out(move _10, move _12) -> [return: bb5, unwind: bb8]; // scope 1 at ui/struct-enums/class-separate-impl.rs:62:3: 62:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-separate-impl.rs:62:3: 62:12
                                         // + literal: Const { ty: fn(Box<(dyn ToString + 'static)>, String) {print_out}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = const false;               // scope 1 at ui/struct-enums/class-separate-impl.rs:62:37: 62:38
        return;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:63:2: 63:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/class-separate-impl.rs:60:1: 63:2
    }

    bb7 (cleanup): {
        drop(_10) -> bb6;                // scope 1 at ui/struct-enums/class-separate-impl.rs:62:37: 62:38
    }

    bb8 (cleanup): {
        switchInt(_15) -> [0: bb6, otherwise: bb7]; // scope 1 at ui/struct-enums/class-separate-impl.rs:62:37: 62:38
    }
}
