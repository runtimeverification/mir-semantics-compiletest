// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:10:15: 10:15
    let _1: W;                           // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:12:9: 12:10
    let mut _3: W;                       // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:14:13: 14:58
    let _4: ();                          // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:14:15: 14:26
    let mut _5: u32;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:14:41: 14:54
    let mut _6: u32;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:14:41: 14:50
    let mut _7: (u32, bool);             // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:14:41: 14:54
    let mut _8: S;                       // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:15:11: 18:10
    let mut _9: W;                       // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:16:17: 16:34
    let _10: ();                         // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:16:19: 16:30
    let mut _11: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _13: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: bool;                   // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:23:5: 24:61
    let mut _31: bool;                   // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:23:13: 23:29
    let mut _32: usize;                  // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:23:13: 23:19
    let mut _33: usize;                  // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:23:23: 23:29
    let mut _34: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _35: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _36: &[&str];                // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
    let mut _37: &[&str; 2];             // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
    let _38: &[&str; 2];                 // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
    let mut _39: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _40: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _41: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _42: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _43: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:46: 24:52
    let mut _44: &usize;                 // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:46: 24:52
    let _45: &usize;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:46: 24:52
    let mut _46: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:54: 24:60
    let mut _47: &usize;                 // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:54: 24:60
    let _48: &usize;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:54: 24:60
    scope 1 {
        debug w => _1;                   // in scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:12:9: 12:10
        let _2: S;                       // in scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:13:9: 13:10
        scope 2 {
            debug s => _2;               // in scope 2 at ui/struct-enums/struct-order-of-eval-3.rs:13:9: 13:10
            let _14: &u32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _15: &u32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _28: usize;              // in scope 2 at ui/struct-enums/struct-order-of-eval-3.rs:21:9: 21:15
            let mut _50: &u32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _14;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _15;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _20: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _20;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug actual => _28;     // in scope 5 at ui/struct-enums/struct-order-of-eval-3.rs:21:9: 21:15
                let _29: usize;          // in scope 5 at ui/struct-enums/struct-order-of-eval-3.rs:22:9: 22:15
                scope 6 {
                    debug expect => _29; // in scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:22:9: 22:15
                    let mut _49: &[&str; 2]; // in scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
                }
            }
        }
    }

    bb0: {
        _1 = const W {{ wrapped: 2309737967_u32 }}; // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:12:13: 12:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:12:13: 12:31
                                         // + literal: Const { ty: W, val: Value(Scalar(0x89abcdef)) }
        _4 = event(const 1_u8) -> bb1;   // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:14:15: 14:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:14:15: 14:20
                                         // + literal: Const { ty: fn(u8) {event}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = (_1.0: u32);                // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:14:41: 14:50
        _7 = CheckedAdd(_6, const 1_u32); // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:14:41: 14:54
        assert(!move (_7.1: bool), "attempt to compute `{} + {}`, which would overflow", move _6, const 1_u32) -> bb2; // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:14:41: 14:54
    }

    bb2: {
        _5 = move (_7.0: u32);           // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:14:41: 14:54
        _3 = W { wrapped: move _5 };     // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:14:28: 14:56
        _10 = event(const 2_u8) -> bb3;  // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:16:19: 16:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:16:19: 16:24
                                         // + literal: Const { ty: fn(u8) {event}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = move _1;                    // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:16:32: 16:33
        _8 = S { f0: move _9, _f1: const 23_i32 }; // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:15:11: 18:10
        _2 = S { f0: move _3, _f1: (_8.1: i32) }; // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:13:13: 19:6
        _12 = &((_2.0: W).0: u32);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _50 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[1])) }
        _13 = _50;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _13);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_11.0: &u32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_11.1: &u32);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = (*_14);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = const 2309737968_u32;      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = Eq(move _18, move _19);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _16 = Not(move _17);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<u32, u32>(move _22, move _23, move _25, move _27); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = event_log() -> bb6;        // scope 2 at ui/struct-enums/struct-order-of-eval-3.rs:21:18: 21:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:21:18: 21:27
                                         // + literal: Const { ty: fn() -> usize {event_log}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = const 258_usize;           // scope 5 at ui/struct-enums/struct-order-of-eval-3.rs:22:18: 22:25
        _32 = _29;                       // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:23:13: 23:19
        _33 = _28;                       // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:23:23: 23:29
        _31 = Eq(move _32, move _33);    // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:23:13: 23:29
        _30 = Not(move _31);             // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:23:5: 24:61
        switchInt(move _30) -> [0: bb11, otherwise: bb7]; // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:23:5: 24:61
    }

    bb7: {
        _49 = const _;                   // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _38 = _49;                       // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
        _37 = _38;                       // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
        _36 = move _37 as &[&str] (Pointer(Unsize)); // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
        _45 = &_29;                      // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:46: 24:52
        _44 = _45;                       // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:46: 24:52
        _43 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>(move _44) -> bb8; // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:46: 24:52
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:24:46: 24:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _48 = &_28;                      // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:54: 24:60
        _47 = _48;                       // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:54: 24:60
        _46 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>(move _47) -> bb9; // scope 6 at ui/struct-enums/struct-order-of-eval-3.rs:24:54: 24:60
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:24:54: 24:60
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _42 = [move _43, move _46];      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _41 = &_42;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _40 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _39 = move _40 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _35 = Arguments::<'_>::new_v1(move _36, move _39) -> bb10; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb10: {
        _34 = panic_fmt(move _35);       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:25:2: 25:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
    let mut _1: [&str; 2];               // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44

    bb0: {
        _1 = [const "expect: 0x", const " actual: 0x"]; // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:24:13: 24:44
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:20:30: 20:37
    let mut _2: (u32, bool);             // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:20:30: 20:37

    bb0: {
        _2 = CheckedAdd(const _, const 1_u32); // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:20:30: 20:37
        _1 = move (_2.0: u32);           // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:20:30: 20:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

const VAL: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:11:16: 11:19

    bb0: {
        _0 = const 2309737967_u32;       // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:11:22: 11:33
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:11:5: 11:34
    }
}

static LOG: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:27:13: 27:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:27:27: 27:46
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:27:27: 27:46
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:27:27: 27:43
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:27:1: 27:47
    }
}

fn event_log() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:29:19: 29:24
    let mut _1: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:30:5: 30:31
    let _2: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:30:5: 30:8
    let mut _3: std::sync::atomic::Ordering; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:30:14: 30:30

    bb0: {
        _2 = const {alloc1: &AtomicUsize}; // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:30:5: 30:8
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:30:5: 30:8
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _1 = _2;                         // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:30:5: 30:31
        _3 = const SeqCst;               // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:30:14: 30:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:30:14: 30:30
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _0 = AtomicUsize::load(move _1, move _3) -> bb1; // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:30:5: 30:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:30:9: 30:13
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:31:2: 31:2
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn event(_1: u8) -> () {
    debug tag => _1;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:33:10: 33:13
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:33:19: 33:19
    let _2: usize;                       // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:34:9: 34:16
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:34:19: 34:45
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:34:19: 34:22
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:34:28: 34:44
    let mut _7: usize;                   // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:35:19: 35:33
    let mut _8: usize;                   // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:35:20: 35:27
    let mut _9: (usize, bool);           // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:35:19: 35:33
    let mut _10: usize;                  // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:35:36: 35:48
    let mut _11: u8;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:35:36: 35:39
    let mut _12: (usize, bool);          // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:35:19: 35:48
    let _13: ();                         // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:36:5: 36:41
    let mut _14: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:36:5: 36:41
    let _15: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:36:5: 36:8
    let mut _16: usize;                  // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:36:15: 36:22
    let mut _17: std::sync::atomic::Ordering; // in scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:36:24: 36:40
    scope 1 {
        debug old_log => _2;             // in scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:34:9: 34:16
        let _6: usize;                   // in scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:9: 35:16
        scope 2 {
            debug new_log => _6;         // in scope 2 at ui/struct-enums/struct-order-of-eval-3.rs:35:9: 35:16
        }
    }

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:34:19: 34:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:34:19: 34:22
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:34:19: 34:45
        _5 = const SeqCst;               // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:34:28: 34:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:34:28: 34:44
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::load(move _3, move _5) -> bb1; // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:34:19: 34:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:34:23: 34:27
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _2;                         // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:20: 35:27
        _9 = CheckedShl(_8, const 8_i32); // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:19: 35:33
        assert(!move (_9.1: bool), "attempt to shift left by `{}`, which would overflow", const 8_i32) -> bb2; // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:19: 35:33
    }

    bb2: {
        _7 = move (_9.0: usize);         // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:19: 35:33
        _11 = _1;                        // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:36: 35:39
        _10 = move _11 as usize (IntToInt); // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:36: 35:48
        _12 = CheckedAdd(_7, _10);       // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:19: 35:48
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _10) -> bb3; // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:19: 35:48
    }

    bb3: {
        _6 = move (_12.0: usize);        // scope 1 at ui/struct-enums/struct-order-of-eval-3.rs:35:19: 35:48
        _15 = const {alloc1: &AtomicUsize}; // scope 2 at ui/struct-enums/struct-order-of-eval-3.rs:36:5: 36:8
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:36:5: 36:8
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _14 = _15;                       // scope 2 at ui/struct-enums/struct-order-of-eval-3.rs:36:5: 36:41
        _16 = _6;                        // scope 2 at ui/struct-enums/struct-order-of-eval-3.rs:36:15: 36:22
        _17 = const SeqCst;              // scope 2 at ui/struct-enums/struct-order-of-eval-3.rs:36:24: 36:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:36:24: 36:40
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _13 = AtomicUsize::store(move _14, move _16, move _17) -> bb4; // scope 2 at ui/struct-enums/struct-order-of-eval-3.rs:36:5: 36:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-3.rs:36:9: 36:14
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-3.rs:37:2: 37:2
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}
