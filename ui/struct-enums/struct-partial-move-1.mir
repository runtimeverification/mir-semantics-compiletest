// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/struct-partial-move-1.rs:2:10: 2:19>::eq(_1: &Partial<T>, _2: &Partial<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:10: 2:19
    debug other => _2;                   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:10: 2:19
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:10: 2:19
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
    let mut _4: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
    let mut _5: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
    let mut _6: bool;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    let mut _7: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    let mut _8: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
        _5 = &((*_2).0: T);              // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
        _3 = <T as PartialEq>::eq(move _4, move _5) -> bb4; // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
        goto -> bb3;                     // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    }

    bb2: {
        _7 = &((*_1).1: T);              // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
        _8 = &((*_2).1: T);              // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
        _6 = <T as PartialEq>::eq(move _7, move _8) -> bb5; // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:19: 2:19
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    }

    bb5: {
        _0 = move _6;                    // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
        goto -> bb3;                     // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    }
}

fn <impl at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26>::fmt(_1: &Partial<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
    debug f => _2;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
    let _5: &str;                        // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
    let mut _6: &str;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
    let _7: &str;                        // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
    let mut _9: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
    let _10: &T;                         // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
    let mut _11: &str;                   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    let _12: &str;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    let mut _14: &&T;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    let _15: &&T;                        // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
    let _16: &T;                         // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
        _5 = const "Partial";            // scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
        _7 = const "x";                  // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
        _10 = &((*_1).0: T);             // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
        _9 = _10;                        // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:25: 3:29
        _12 = const "y";                 // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
        _16 = &((*_1).1: T);             // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
        _15 = &_16;                      // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
        _14 = _15;                       // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/struct-partial-move-1.rs:3:31: 3:35
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:2:21: 2:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:2:26: 2:26
    }
}

fn <impl at ui/struct-enums/struct-partial-move-1.rs:5:10: 5:19>::eq(_1: &S, _2: &S) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:10: 5:19
    debug other => _2;                   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:10: 5:19
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:10: 5:19
    let mut _3: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22

    bb0: {
        _3 = ((*_1).0: isize);           // scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
        _4 = ((*_2).0: isize);           // scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
        _0 = Eq(move _3, move _4);       // scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:19: 5:19
    }
}

fn <impl at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26>::fmt(_1: &S, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
    debug f => _2;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
    let _5: &str;                        // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
    let mut _6: &str;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
    let _7: &str;                        // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
    let mut _9: &&isize;                 // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
    let _10: &&isize;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
    let _11: &isize;                     // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
        _5 = const "S";                  // scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
        _7 = const "val";                // scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
        _11 = &((*_1).0: isize);         // scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
        _10 = &_11;                      // scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
        _9 = _10;                        // scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/struct-partial-move-1.rs:6:12: 6:22
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:5:21: 5:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:5:26: 5:26
    }
}

fn <impl at ui/struct-enums/struct-partial-move-1.rs:7:1: 7:7>::new(_1: isize) -> S {
    debug v => _1;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:7:17: 7:18
    let mut _0: S;                       // return place in scope 0 at ui/struct-enums/struct-partial-move-1.rs:7:30: 7:31
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:7:43: 7:44

    bb0: {
        _2 = _1;                         // scope 0 at ui/struct-enums/struct-partial-move-1.rs:7:43: 7:44
        _0 = S { val: move _2 };         // scope 0 at ui/struct-enums/struct-partial-move-1.rs:7:34: 7:46
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:7:48: 7:48
    }
}

fn <impl at ui/struct-enums/struct-partial-move-1.rs:8:1: 8:16>::drop(_1: &mut S) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:8:27: 8:36
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-partial-move-1.rs:8:38: 8:38

    bb0: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:8:41: 8:41
    }
}

fn f(_1: (T, T), _2: F) -> Partial<T> {
    debug f => _2;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:10:34: 10:39
    let mut _0: Partial<T>;              // return place in scope 0 at ui/struct-enums/struct-partial-move-1.rs:10:47: 10:57
    let _3: T;                           // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:10:17: 10:19
    let _4: T;                           // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:10:21: 10:23
    let mut _6: T;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:11:26: 11:28
    let mut _7: T;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:11:33: 11:35
    let mut _8: T;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:15:18: 15:24
    let mut _9: &mut F;                  // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:15:18: 15:19
    let mut _10: (T,);                   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:15:18: 15:24
    let mut _11: T;                      // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:15:20: 15:23
    scope 1 {
        debug b1 => _3;                  // in scope 1 at ui/struct-enums/struct-partial-move-1.rs:10:17: 10:19
        debug b2 => _4;                  // in scope 1 at ui/struct-enums/struct-partial-move-1.rs:10:21: 10:23
        let _5: Partial<T>;              // in scope 1 at ui/struct-enums/struct-partial-move-1.rs:11:9: 11:10
        scope 2 {
            debug p => _5;               // in scope 2 at ui/struct-enums/struct-partial-move-1.rs:11:9: 11:10
        }
    }

    bb0: {
        _3 = move (_1.0: T);             // scope 0 at ui/struct-enums/struct-partial-move-1.rs:10:17: 10:19
        _4 = move (_1.1: T);             // scope 0 at ui/struct-enums/struct-partial-move-1.rs:10:21: 10:23
        _6 = move _3;                    // scope 1 at ui/struct-enums/struct-partial-move-1.rs:11:26: 11:28
        _7 = move _4;                    // scope 1 at ui/struct-enums/struct-partial-move-1.rs:11:33: 11:35
        _5 = Partial::<T> { x: move _6, y: move _7 }; // scope 1 at ui/struct-enums/struct-partial-move-1.rs:11:13: 11:37
        _9 = &mut _2;                    // scope 2 at ui/struct-enums/struct-partial-move-1.rs:15:18: 15:19
        _11 = move (_5.1: T);            // scope 2 at ui/struct-enums/struct-partial-move-1.rs:15:20: 15:23
        _10 = (move _11,);               // scope 2 at ui/struct-enums/struct-partial-move-1.rs:15:18: 15:24
        _8 = <F as FnMut<(T,)>>::call_mut(move _9, move _10) -> [return: bb1, unwind: bb3]; // scope 2 at ui/struct-enums/struct-partial-move-1.rs:15:18: 15:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:15:18: 15:19
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (T,)) -> <F as FnOnce<(T,)>>::Output {<F as FnMut<(T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Partial::<T> { x: move (_5.0: T), y: move _8 }; // scope 2 at ui/struct-enums/struct-partial-move-1.rs:15:5: 15:31
        drop(_2) -> bb2;                 // scope 0 at ui/struct-enums/struct-partial-move-1.rs:16:1: 16:2
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:16:2: 16:2
    }

    bb3 (cleanup): {
        drop((_5.0: T)) -> bb5;          // scope 1 at ui/struct-enums/struct-partial-move-1.rs:16:1: 16:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:10:1: 16:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/struct-enums/struct-partial-move-1.rs:16:1: 16:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-partial-move-1.rs:18:15: 18:15
    let _1: Partial<S>;                  // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:9: 19:10
    let mut _2: (S, S);                  // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:15: 19:37
    let mut _3: S;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:16: 19:25
    let mut _4: S;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:27: 19:36
    let mut _5: [closure@ui/struct-enums/struct-partial-move-1.rs:19:39: 19:53]; // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:39: 19:65
    let mut _6: (&Partial<S>, &Partial<S>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &Partial<S>;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _8: &Partial<S>;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _9: Partial<S>;                  // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:20:19: 20:57
    let mut _10: S;                      // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:20:32: 20:41
    let mut _11: S;                      // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:20:46: 20:55
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &Partial<S>;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &Partial<S>;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &Partial<S>;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &Partial<S>;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &Partial<S>;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &Partial<S>;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug p => _1;                   // in scope 1 at ui/struct-enums/struct-partial-move-1.rs:19:9: 19:10
        let _12: &Partial<S>;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &Partial<S>;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _12;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _18;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _3 = S::new(const 3_isize) -> bb1; // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:16: 19:25
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:19:16: 19:22
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = S::new(const 4_isize) -> [return: bb2, unwind: bb14]; // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:27: 19:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:19:27: 19:33
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = (move _3, move _4);         // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:15: 19:37
        _1 = f::<S, [closure@ui/struct-enums/struct-partial-move-1.rs:19:39: 19:53]>(move _2, move _5) -> bb3; // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:13: 19:66
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:19:13: 19:14
                                         // + literal: Const { ty: fn((S, S), [closure@ui/struct-enums/struct-partial-move-1.rs:19:39: 19:53]) -> Partial<S> {f::<S, [closure@ui/struct-enums/struct-partial-move-1.rs:19:39: 19:53]>}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _10 = S::new(const 3_isize) -> [return: bb4, unwind: bb13]; // scope 1 at ui/struct-enums/struct-partial-move-1.rs:20:32: 20:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:20:32: 20:38
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = S::new(const 5_isize) -> [return: bb5, unwind: bb12]; // scope 1 at ui/struct-enums/struct-partial-move-1.rs:20:46: 20:55
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:20:46: 20:52
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = Partial::<S> { x: move _10, y: move _11 }; // scope 1 at ui/struct-enums/struct-partial-move-1.rs:20:19: 20:57
        _8 = &_9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _8);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_6.0: &Partial<S>);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_6.1: &Partial<S>);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <Partial<S> as PartialEq>::eq(move _16, move _17) -> [return: bb6, unwind: bb11]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Partial<S>, &'b Partial<S>) -> bool {<Partial<S> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = Not(move _15);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb8, otherwise: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<Partial<S>, Partial<S>>(move _20, move _21, move _23, move _25) -> bb11; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Partial<S>, &'b Partial<S>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Partial<S>, Partial<S>>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_9) -> [return: bb9, unwind: bb13]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/struct-enums/struct-partial-move-1.rs:21:1: 21:2
    }

    bb10: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:21:2: 21:2
    }

    bb11 (cleanup): {
        drop(_9) -> bb13;                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12 (cleanup): {
        drop(_10) -> bb13;               // scope 1 at ui/struct-enums/struct-partial-move-1.rs:20:56: 20:57
    }

    bb13 (cleanup): {
        drop(_1) -> bb15;                // scope 0 at ui/struct-enums/struct-partial-move-1.rs:21:1: 21:2
    }

    bb14 (cleanup): {
        drop(_3) -> bb15;                // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:36: 19:37
    }

    bb15 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:18:1: 21:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/struct-enums/struct-partial-move-1.rs:19:39: 19:53], _2: S) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:54: 19:54
    let _3: isize;                       // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:49: 19:50
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:61: 19:64
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:61: 19:62
    let mut _6: (isize, bool);           // in scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:61: 19:64
    scope 1 {
        debug z => _3;                   // in scope 1 at ui/struct-enums/struct-partial-move-1.rs:19:49: 19:50
    }

    bb0: {
        _3 = (_2.0: isize);              // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:49: 19:50
        _5 = _3;                         // scope 1 at ui/struct-enums/struct-partial-move-1.rs:19:61: 19:62
        _6 = CheckedAdd(_5, const 1_isize); // scope 1 at ui/struct-enums/struct-partial-move-1.rs:19:61: 19:64
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, const 1_isize) -> [success: bb1, unwind: bb4]; // scope 1 at ui/struct-enums/struct-partial-move-1.rs:19:61: 19:64
    }

    bb1: {
        _4 = move (_6.0: isize);         // scope 1 at ui/struct-enums/struct-partial-move-1.rs:19:61: 19:64
        _0 = S::new(move _4) -> [return: bb2, unwind: bb4]; // scope 1 at ui/struct-enums/struct-partial-move-1.rs:19:54: 19:65
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-1.rs:19:54: 19:60
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:64: 19:65
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:65: 19:65
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:64: 19:65
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/struct-partial-move-1.rs:19:39: 19:65
    }
}
