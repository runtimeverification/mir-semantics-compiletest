// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tuple-struct-trivial.rs:7:15: 7:15

    bb0: {
        return;                          // scope 0 at ui/struct-enums/tuple-struct-trivial.rs:8:2: 8:2
    }
}

fn Foo(_1: isize, _2: isize, _3: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/tuple-struct-trivial.rs:5:1: 5:11

    bb0: {
        _0 = Foo(move _1, move _2, move _3); // scope 0 at ui/struct-enums/tuple-struct-trivial.rs:5:1: 5:11
        return;                          // scope 0 at ui/struct-enums/tuple-struct-trivial.rs:5:1: 5:11
    }
}

// MIR FOR CTFE
fn Foo(_1: isize, _2: isize, _3: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/tuple-struct-trivial.rs:5:1: 5:11

    bb0: {
        _0 = Foo(move _1, move _2, move _3); // scope 0 at ui/struct-enums/tuple-struct-trivial.rs:5:1: 5:11
        return;                          // scope 0 at ui/struct-enums/tuple-struct-trivial.rs:5:1: 5:11
    }
}
