// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15>::fmt(_1: &Foo<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
    debug f => _2;                       // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
    let _5: &str;                        // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
    let mut _6: &str;                    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let _7: &str;                        // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let mut _9: &T;                      // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let _10: &T;                         // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let mut _11: &str;                   // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    let _12: &str;                       // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    let mut _14: &&T;                    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    let _15: &&T;                        // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    let _16: &T;                         // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
        _5 = const "Foo";                // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
        _7 = const "bar";                // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
        _10 = &((*_1).0: T);             // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
        _9 = _10;                        // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
        _12 = const "baz";               // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        _16 = &((*_1).1: T);             // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        _15 = &_16;                      // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        _14 = _15;                       // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:2:10: 2:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:15: 2:15
    }
}

fn <impl at ui/struct-enums/struct-lit-functional-no-fields.rs:2:16: 2:25>::eq(_1: &Foo<T>, _2: &Foo<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:16: 2:25
    debug other => _2;                   // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:16: 2:25
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:16: 2:25
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let mut _4: &T;                      // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let mut _5: &T;                      // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let mut _6: bool;                    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    let mut _7: &T;                      // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    let mut _8: &T;                      // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
        _5 = &((*_2).0: T);              // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
        _3 = <T as PartialEq>::eq(move _4, move _5) -> bb4; // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        goto -> bb3;                     // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    }

    bb2: {
        _7 = &((*_1).1: T);              // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        _8 = &((*_2).1: T);              // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        _6 = <T as PartialEq>::eq(move _7, move _8) -> bb5; // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:25: 2:25
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    }

    bb5: {
        _0 = move _6;                    // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        goto -> bb3;                     // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    }
}

fn <impl at ui/struct-enums/struct-lit-functional-no-fields.rs:2:26: 2:31>::clone(_1: &Foo<T>) -> Foo<T> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:26: 2:31
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:26: 2:31
    let mut _2: T;                       // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let mut _3: &T;                      // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let _4: &T;                          // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
    let mut _5: T;                       // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    let mut _6: &T;                      // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
    let _7: &T;                          // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
        _3 = _4;                         // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
        _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:4:5: 4:11
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = &((*_1).1: T);              // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        _6 = _7;                         // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
        _5 = <T as Clone>::clone(move _6) -> [return: bb2, unwind: bb3]; // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:5:5: 5:11
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb2: {
        _0 = Foo::<T> { bar: move _2, baz: move _5 }; // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:26: 2:31
        return;                          // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:31: 2:31
    }

    bb3 (cleanup): {
        drop(_2) -> bb4;                 // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:30: 2:31
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:2:26: 2:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:8:15: 8:15
    let _1: Foo<i32>;                    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:9:9: 9:12
    let mut _3: &Foo<i32>;               // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:14:16: 14:27
    let mut _5: (&Foo<i32>, &Foo<i32>);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &Foo<i32>;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _7: &Foo<i32>;               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &Foo<i32>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &Foo<i32>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &Foo<i32>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &Foo<i32>;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &Foo<i32>;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &Foo<i32>;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _23: std::string::String;    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:19:14: 19:31
    let mut _24: &str;                   // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:19:14: 19:31
    let _25: &str;                       // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:19:14: 19:19
    let mut _26: std::string::String;    // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:20:14: 20:31
    let mut _27: &str;                   // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:20:14: 20:31
    let _28: &str;                       // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:20:14: 20:19
    let mut _30: &Foo<std::string::String>; // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:23:16: 23:27
    let mut _32: (&Foo<std::string::String>, &Foo<std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _33: &Foo<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _34: &Foo<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: &Foo<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: &Foo<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &Foo<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &Foo<std::string::String>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &Foo<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &Foo<std::string::String>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: bool;                   // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    let mut _50: bool;                   // in scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/struct-enums/struct-lit-functional-no-fields.rs:9:9: 9:12
        let _2: Foo<i32>;                // in scope 1 at ui/struct-enums/struct-lit-functional-no-fields.rs:14:9: 14:13
        scope 2 {
            debug foo_ => _2;            // in scope 2 at ui/struct-enums/struct-lit-functional-no-fields.rs:14:9: 14:13
            let _4: Foo<i32>;            // in scope 2 at ui/struct-enums/struct-lit-functional-no-fields.rs:15:9: 15:12
            scope 3 {
                debug foo => _4;         // in scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:15:9: 15:12
                let _8: &Foo<i32>;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _9: &Foo<i32>;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _22: Foo<std::string::String>; // in scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:18:9: 18:12
                scope 4 {
                    debug left_val => _8; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _9; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _14: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 5 {
                        debug kind => _14; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 6 {
                    debug foo => _22;    // in scope 6 at ui/struct-enums/struct-lit-functional-no-fields.rs:18:9: 18:12
                    let _29: Foo<std::string::String>; // in scope 6 at ui/struct-enums/struct-lit-functional-no-fields.rs:23:9: 23:13
                    scope 7 {
                        debug foo_ => _29; // in scope 7 at ui/struct-enums/struct-lit-functional-no-fields.rs:23:9: 23:13
                        let _31: Foo<std::string::String>; // in scope 7 at ui/struct-enums/struct-lit-functional-no-fields.rs:24:9: 24:12
                        scope 8 {
                            debug foo => _31; // in scope 8 at ui/struct-enums/struct-lit-functional-no-fields.rs:24:9: 24:12
                            let _35: &Foo<std::string::String>; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _36: &Foo<std::string::String>; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            scope 9 {
                                debug left_val => _35; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _36; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _41: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 10 {
                                    debug kind => _41; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _50 = const false;               // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:9:9: 9:12
        _49 = const false;               // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:9:9: 9:12
        _1 = Foo::<i32> { bar: const 0_i32, baz: const 1_i32 }; // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:9:15: 12:6
        _3 = &_1;                        // scope 1 at ui/struct-enums/struct-lit-functional-no-fields.rs:14:16: 14:27
        _2 = <Foo<i32> as Clone>::clone(move _3) -> bb1; // scope 1 at ui/struct-enums/struct-lit-functional-no-fields.rs:14:16: 14:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:14:20: 14:25
                                         // + literal: Const { ty: for<'a> fn(&'a Foo<i32>) -> Foo<i32> {<Foo<i32> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Foo::<i32> { bar: (_1.0: i32), baz: (_1.1: i32) }; // scope 2 at ui/struct-enums/struct-lit-functional-no-fields.rs:15:15: 15:28
        _6 = &_4;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = &_2;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _7);         // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_5.0: &Foo<i32>);          // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_5.1: &Foo<i32>);          // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <Foo<i32> as PartialEq>::eq(move _12, move _13) -> bb2; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo<i32>, &'b Foo<i32>) -> bool {<Foo<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Not(move _11);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<Foo<i32>, Foo<i32>>(move _16, move _17, move _19, move _21); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo<i32>, &'b Foo<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo<i32>, Foo<i32>>}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = const "one";               // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:19:14: 19:19
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:19:14: 19:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = _25;                       // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:19:14: 19:31
        _23 = <str as ToString>::to_string(move _24) -> bb5; // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:19:14: 19:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:19:20: 19:29
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _28 = const "two";               // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:20:14: 20:19
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:20:14: 20:19
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _27 = _28;                       // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:20:14: 20:31
        _26 = <str as ToString>::to_string(move _27) -> [return: bb6, unwind: bb15]; // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:20:14: 20:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:20:20: 20:29
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb6: {
        _49 = const true;                // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:18:15: 21:6
        _50 = const true;                // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:18:15: 21:6
        _22 = Foo::<String> { bar: move _23, baz: move _26 }; // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:18:15: 21:6
        _30 = &_22;                      // scope 6 at ui/struct-enums/struct-lit-functional-no-fields.rs:23:16: 23:27
        _29 = <Foo<String> as Clone>::clone(move _30) -> [return: bb7, unwind: bb20]; // scope 6 at ui/struct-enums/struct-lit-functional-no-fields.rs:23:16: 23:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-lit-functional-no-fields.rs:23:20: 23:25
                                         // + literal: Const { ty: for<'a> fn(&'a Foo<String>) -> Foo<String> {<Foo<String> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb7: {
        _50 = const false;               // scope 7 at ui/struct-enums/struct-lit-functional-no-fields.rs:24:15: 24:28
        _49 = const false;               // scope 7 at ui/struct-enums/struct-lit-functional-no-fields.rs:24:15: 24:28
        _31 = Foo::<String> { bar: move (_22.0: std::string::String), baz: move (_22.1: std::string::String) }; // scope 7 at ui/struct-enums/struct-lit-functional-no-fields.rs:24:15: 24:28
        _33 = &_31;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _34 = &_29;                      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _32 = (move _33, move _34);      // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_32.0: &Foo<std::string::String>); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_32.1: &Foo<std::string::String>); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = _35;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = _36;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = <Foo<String> as PartialEq>::eq(move _39, move _40) -> [return: bb8, unwind: bb13]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo<String>, &'b Foo<String>) -> bool {<Foo<String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _37 = Not(move _38);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb10, otherwise: bb9]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _41 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<Foo<String>, Foo<String>>(move _43, move _44, move _46, move _48) -> bb13; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo<String>, &'b Foo<String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo<String>, Foo<String>>}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_31) -> [return: bb11, unwind: bb14]; // scope 7 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    }

    bb11: {
        drop(_29) -> [return: bb12, unwind: bb20]; // scope 6 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    }

    bb12: {
        _49 = const false;               // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
        _50 = const false;               // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
        return;                          // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:2: 26:2
    }

    bb13 (cleanup): {
        drop(_31) -> bb14;               // scope 7 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    }

    bb14 (cleanup): {
        drop(_29) -> bb20;               // scope 6 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    }

    bb15 (cleanup): {
        drop(_23) -> bb16;               // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:21:5: 21:6
    }

    bb16 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/struct-lit-functional-no-fields.rs:8:1: 26:2
    }

    bb17 (cleanup): {
        switchInt(_49) -> [0: bb16, otherwise: bb18]; // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    }

    bb18 (cleanup): {
        drop((_22.1: std::string::String)) -> bb16; // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    }

    bb19 (cleanup): {
        drop((_22.0: std::string::String)) -> bb17; // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    }

    bb20 (cleanup): {
        switchInt(_50) -> [0: bb17, otherwise: bb19]; // scope 3 at ui/struct-enums/struct-lit-functional-no-fields.rs:26:1: 26:2
    }
}
