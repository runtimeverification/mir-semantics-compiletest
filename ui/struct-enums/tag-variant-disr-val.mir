// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
color::red::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:8:11: 8:19

    bb0: {
        _0 = const 16711680_isize;       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:8:11: 8:19
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:8:11: 8:19
    }
}

color::green::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:9:13: 9:21

    bb0: {
        _0 = const 65280_isize;          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:9:13: 9:21
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:9:13: 9:21
    }
}

color::blue::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:10:12: 10:20

    bb0: {
        _0 = const 255_isize;            // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:10:12: 10:20
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:10:12: 10:20
    }
}

color::black::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:11:13: 11:21

    bb0: {
        _0 = const 0_isize;              // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:11:13: 11:21
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:11:13: 11:21
    }
}

color::white::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:12:13: 12:21

    bb0: {
        _0 = const 16777215_isize;       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:12:13: 12:21
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:12:13: 12:21
    }
}

color::imaginary::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:13:17: 13:19

    bb0: {
        _0 = const -1_isize;             // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:13:17: 13:19
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:13:17: 13:19
    }
}

color::purple::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:14:14: 14:20
    let mut _1: (isize, bool);           // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:14:14: 14:20

    bb0: {
        _1 = CheckedShl(const 1_isize, const 1_i32); // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:14:14: 14:20
        assert(!move (_1.1: bool), "attempt to shift left by `{}`, which would overflow", const 1_i32) -> bb1; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:14:14: 14:20
    }

    bb1: {
        _0 = move (_1.0: isize);         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:14:14: 14:20
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:14:14: 14:20
    }
}

color::orange::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:15:14: 15:20
    let mut _1: (isize, bool);           // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:15:14: 15:20

    bb0: {
        _1 = CheckedShr(const 8_isize, const 1_i32); // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:15:14: 15:20
        assert(!move (_1.1: bool), "attempt to shift right by `{}`, which would overflow", const 1_i32) -> bb1; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:15:14: 15:20
    }

    bb1: {
        _0 = move (_1.0: isize);         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:15:14: 15:20
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:15:14: 15:20
    }
}

fn <impl at ui/struct-enums/tag-variant-disr-val.rs:6:16: 6:21>::clone(_1: &color) -> color {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:6:16: 6:21
    let mut _0: color;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:6:16: 6:21

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:6:16: 6:21
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:6:21: 6:21
    }
}

fn <impl at ui/struct-enums/tag-variant-disr-val.rs:18:1: 18:25>::eq(_1: &color, _2: &color) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:19:11: 19:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:19:18: 19:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:19:36: 19:40
    let mut _3: usize;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:9: 20:27
    let _4: color;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:10: 20:17
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:10: 20:17
    let mut _6: usize;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:31: 20:50
    let _7: color;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:32: 20:40
    let mut _8: isize;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:32: 20:40

    bb0: {
        _4 = (*_1);                      // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:10: 20:17
        _5 = discriminant(_4);           // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:9: 20:27
        _3 = move _5 as usize (IntToInt); // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:9: 20:27
        _7 = (*_2);                      // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:32: 20:40
        _8 = discriminant(_7);           // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:31: 20:50
        _6 = move _8 as usize (IntToInt); // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:31: 20:50
        _0 = Eq(move _3, move _6);       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:20:9: 20:50
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:21:6: 21:6
    }
}

fn <impl at ui/struct-enums/tag-variant-disr-val.rs:18:1: 18:25>::ne(_1: &color, _2: &color) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:11: 22:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:18: 22:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:36: 22:40
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:44: 22:61
    let mut _4: &color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:44: 22:61
    let mut _5: &color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:55: 22:60

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:44: 22:61
        _5 = _2;                         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:55: 22:60
        _3 = <color as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:44: 22:61
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:22:52: 22:54
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a color, &'b color) -> bool {<color as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:43: 22:61
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:22:63: 22:63
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:25:15: 25:15
    let _1: ();                          // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:5: 26:49
    let mut _2: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:16: 26:19
    let mut _3: std::string::String;     // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:31: 26:48
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:31: 26:48
    let _5: &str;                        // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:31: 26:36
    let _6: ();                          // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:5: 27:53
    let mut _7: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:16: 27:21
    let mut _8: std::string::String;     // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:33: 27:52
    let mut _9: &str;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:33: 27:52
    let _10: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:33: 27:40
    let _11: ();                         // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:5: 28:51
    let mut _12: color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:16: 28:20
    let mut _13: std::string::String;    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:32: 28:50
    let mut _14: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:32: 28:50
    let _15: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:32: 28:38
    let _16: ();                         // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:5: 29:53
    let mut _17: color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:16: 29:21
    let mut _18: std::string::String;    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:33: 29:52
    let mut _19: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:33: 29:52
    let _20: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:33: 29:40
    let _21: ();                         // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:5: 30:53
    let mut _22: color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:16: 30:21
    let mut _23: std::string::String;    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:33: 30:52
    let mut _24: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:33: 30:52
    let _25: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:33: 30:40
    let _26: ();                         // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:5: 31:55
    let mut _27: color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:16: 31:25
    let mut _28: std::string::String;    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:31: 31:54
    let mut _29: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:31: 31:54
    let _30: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:31: 31:42
    let _31: ();                         // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:5: 32:48
    let mut _32: color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:16: 32:22
    let mut _33: std::string::String;    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:27: 32:47
    let mut _34: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:27: 32:47
    let _35: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:27: 32:35
    let _36: ();                         // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:5: 33:48
    let mut _37: color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:16: 33:22
    let mut _38: std::string::String;    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:27: 33:47
    let mut _39: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:27: 33:47
    let _40: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:27: 33:35

    bb0: {
        _2 = const color::red;           // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:16: 26:19
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:26:16: 26:19
                                         // + literal: Const { ty: color, val: Value(Scalar(0x00ff0000)) }
        _5 = const "red";                // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:31: 26:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:26:31: 26:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:31: 26:48
        _3 = <str as ToString>::to_string(move _4) -> bb1; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:31: 26:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:26:37: 26:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = test_color(move _2, const 16711680_isize, move _3) -> bb2; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:26:5: 26:49
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:26:5: 26:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = const color::green;         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:16: 27:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:27:16: 27:21
                                         // + literal: Const { ty: color, val: Value(Scalar(0x0000ff00)) }
        _10 = const "green";             // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:33: 27:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:27:33: 27:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:33: 27:52
        _8 = <str as ToString>::to_string(move _9) -> bb3; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:33: 27:52
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:27:41: 27:50
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = test_color(move _7, const 65280_isize, move _8) -> bb4; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:27:5: 27:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:27:5: 27:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = const color::blue;         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:16: 28:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:28:16: 28:20
                                         // + literal: Const { ty: color, val: Value(Scalar(0x000000ff)) }
        _15 = const "blue";              // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:32: 28:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:28:32: 28:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:32: 28:50
        _13 = <str as ToString>::to_string(move _14) -> bb5; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:32: 28:50
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:28:39: 28:48
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = test_color(move _12, const 255_isize, move _13) -> bb6; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:28:5: 28:51
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:28:5: 28:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = const color::black;        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:16: 29:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:29:16: 29:21
                                         // + literal: Const { ty: color, val: Value(Scalar(0x00000000)) }
        _20 = const "black";             // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:33: 29:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:29:33: 29:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:33: 29:52
        _18 = <str as ToString>::to_string(move _19) -> bb7; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:33: 29:52
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:29:41: 29:50
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = test_color(move _17, const 0_isize, move _18) -> bb8; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:29:5: 29:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:29:5: 29:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = const color::white;        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:16: 30:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:30:16: 30:21
                                         // + literal: Const { ty: color, val: Value(Scalar(0x00ffffff)) }
        _25 = const "white";             // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:33: 30:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:30:33: 30:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _24 = _25;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:33: 30:52
        _23 = <str as ToString>::to_string(move _24) -> bb9; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:33: 30:52
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:30:41: 30:50
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb9: {
        _21 = test_color(move _22, const 16777215_isize, move _23) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:30:5: 30:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:30:5: 30:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb10: {
        _27 = const color::imaginary;    // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:16: 31:25
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:31:16: 31:25
                                         // + literal: Const { ty: color, val: Value(Scalar(0xffffffff)) }
        _30 = const "imaginary";         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:31: 31:42
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:31:31: 31:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _29 = _30;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:31: 31:54
        _28 = <str as ToString>::to_string(move _29) -> bb11; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:31: 31:54
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:31:43: 31:52
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        _26 = test_color(move _27, const -1_isize, move _28) -> bb12; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:31:5: 31:55
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:31:5: 31:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb12: {
        _32 = const color::purple;       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:16: 32:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:32:16: 32:22
                                         // + literal: Const { ty: color, val: Value(Scalar(0x00000002)) }
        _35 = const "purple";            // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:27: 32:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:32:27: 32:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _34 = _35;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:27: 32:47
        _33 = <str as ToString>::to_string(move _34) -> bb13; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:27: 32:47
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:32:36: 32:45
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb13: {
        _31 = test_color(move _32, const 2_isize, move _33) -> bb14; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:32:5: 32:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:32:5: 32:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb14: {
        _37 = const color::orange;       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:16: 33:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:33:16: 33:22
                                         // + literal: Const { ty: color, val: Value(Scalar(0x00000004)) }
        _40 = const "orange";            // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:27: 33:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:33:27: 33:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _39 = _40;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:27: 33:47
        _38 = <str as ToString>::to_string(move _39) -> bb15; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:27: 33:47
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:33:36: 33:45
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb15: {
        _36 = test_color(move _37, const 4_isize, move _38) -> bb16; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:33:5: 33:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:33:5: 33:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb16: {
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:34:2: 34:2
    }
}

fn test_color(_1: color, _2: isize, _3: String) -> () {
    debug color => _1;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:36:15: 36:20
    debug val => _2;                     // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:36:29: 36:32
    debug name => _3;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:36:41: 36:45
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:36:55: 36:55
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: isize;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:38:16: 38:30
    let _7: color;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:38:16: 38:21
    let mut _8: isize;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:38:16: 38:21
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _26: std::string::String;        // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:39:16: 39:36
    let mut _27: color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:39:30: 39:35
    let mut _28: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _44: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _45: std::string::String;        // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:40:16: 40:35
    let mut _46: color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:40:29: 40:34
    let mut _47: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _48: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _49: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _50: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _51: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _52: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _53: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _55: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _56: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _57: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _58: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _59: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _60: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _61: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _10;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _48;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _49;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _54: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _54;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _7 = _1;                         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:38:16: 38:21
        _8 = discriminant(_7);           // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:38:16: 38:30
        _6 = move _8 as isize (IntToInt); // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:38:16: 38:30
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = &_2;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_4.0: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_4.1: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _16 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23) -> bb16; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _27 = _1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:39:30: 39:35
        _26 = get_color_alt(move _27) -> [return: bb3, unwind: bb16]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:39:16: 39:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:39:16: 39:29
                                         // + literal: Const { ty: fn(color) -> String {get_color_alt}, val: Value(<ZST>) }
    }

    bb3: {
        _25 = &_26;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _28 = &_3;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_24.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_24.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = _30;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = <String as PartialEq>::eq(move _33, move _34) -> [return: bb4, unwind: bb15]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<String, String>(move _37, move _38, move _40, move _42) -> bb15; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_26) -> [return: bb7, unwind: bb16]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        _46 = _1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:40:29: 40:34
        _45 = get_color_if(move _46) -> [return: bb8, unwind: bb16]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:40:16: 40:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:40:16: 40:28
                                         // + literal: Const { ty: fn(color) -> String {get_color_if}, val: Value(<ZST>) }
    }

    bb8: {
        _44 = &_45;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _47 = &_3;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _43 = (move _44, move _47);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _48 = (_43.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _49 = (_43.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _52 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _53 = _49;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _51 = <String as PartialEq>::eq(move _52, move _53) -> [return: bb9, unwind: bb14]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _50 = Not(move _51);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _50) -> [0: bb11, otherwise: bb10]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _54 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _58 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _57 = _58;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _60 = _49;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _61 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _55 = core::panicking::assert_failed::<String, String>(move _56, move _57, move _59, move _61) -> bb14; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb11: {
        drop(_45) -> [return: bb12, unwind: bb16]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12: {
        drop(_3) -> bb13;                // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:41:1: 41:2
    }

    bb13: {
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:41:2: 41:2
    }

    bb14 (cleanup): {
        drop(_45) -> bb16;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15 (cleanup): {
        drop(_26) -> bb16;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb16 (cleanup): {
        drop(_3) -> bb17;                // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:41:1: 41:2
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:36:1: 41:2
    }
}

fn get_color_alt(_1: color) -> String {
    debug color => _1;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:43:18: 43:23
    let mut _0: std::string::String;     // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:43:35: 43:41
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:45:7: 45:10
    let mut _3: &str;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:45:15: 45:32
    let _4: &str;                        // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:45:15: 45:20
    let mut _5: &str;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:46:17: 46:36
    let _6: &str;                        // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:46:17: 46:24
    let mut _7: &str;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:47:16: 47:34
    let _8: &str;                        // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:47:16: 47:22
    let mut _9: &str;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:48:17: 48:36
    let _10: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:48:17: 48:24
    let mut _11: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:49:17: 49:36
    let _12: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:49:17: 49:24
    let mut _13: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:50:21: 50:44
    let _14: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:50:21: 50:32
    let mut _15: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:51:18: 51:38
    let _16: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:51:18: 51:26
    let mut _17: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:52:18: 52:38
    let _18: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:52:18: 52:26

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:44:11: 44:16
        switchInt(move _2) -> [16711680: bb3, 65280: bb4, 255: bb5, 0: bb6, 16777215: bb7, 18446744073709551615: bb8, 2: bb9, 4: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:44:5: 44:16
    }

    bb1: {
        _18 = const "orange";            // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:52:18: 52:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:52:18: 52:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _17 = _18;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:52:18: 52:38
        _0 = <str as ToString>::to_string(move _17) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:52:18: 52:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:52:27: 52:36
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:44:11: 44:16
    }

    bb3: {
        _4 = const "red";                // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:45:15: 45:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:45:15: 45:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:45:15: 45:32
        _0 = <str as ToString>::to_string(move _3) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:45:15: 45:32
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:45:21: 45:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _6 = const "green";              // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:46:17: 46:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:46:17: 46:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:46:17: 46:36
        _0 = <str as ToString>::to_string(move _5) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:46:17: 46:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:46:25: 46:34
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _8 = const "blue";               // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:47:16: 47:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:47:16: 47:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:47:16: 47:34
        _0 = <str as ToString>::to_string(move _7) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:47:16: 47:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:47:23: 47:32
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb6: {
        _10 = const "black";             // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:48:17: 48:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:48:17: 48:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:48:17: 48:36
        _0 = <str as ToString>::to_string(move _9) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:48:17: 48:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:48:25: 48:34
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = const "white";             // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:49:17: 49:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:49:17: 49:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:49:17: 49:36
        _0 = <str as ToString>::to_string(move _11) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:49:17: 49:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:49:25: 49:34
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb8: {
        _14 = const "imaginary";         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:50:21: 50:32
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:50:21: 50:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _13 = _14;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:50:21: 50:44
        _0 = <str as ToString>::to_string(move _13) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:50:21: 50:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:50:33: 50:42
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb9: {
        _16 = const "purple";            // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:51:18: 51:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:51:18: 51:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = _16;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:51:18: 51:38
        _0 = <str as ToString>::to_string(move _15) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:51:18: 51:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:51:27: 51:36
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:54:2: 54:2
    }
}

fn get_color_if(_1: color) -> String {
    debug color => _1;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:56:17: 56:22
    let mut _0: std::string::String;     // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:56:34: 56:40
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:8: 57:20
    let mut _3: &color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:8: 57:13
    let mut _4: &color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20
    let mut _5: &str;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:22: 57:39
    let _6: &str;                        // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:22: 57:27
    let mut _7: bool;                    // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:13: 58:27
    let mut _8: &color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:13: 58:18
    let mut _9: &color;                  // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27
    let mut _10: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:29: 58:48
    let _11: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:29: 58:36
    let mut _12: bool;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:13: 59:26
    let mut _13: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:13: 59:18
    let mut _14: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26
    let mut _15: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:28: 59:46
    let _16: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:28: 59:34
    let mut _17: bool;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:13: 60:27
    let mut _18: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:13: 60:18
    let mut _19: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27
    let mut _20: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:29: 60:48
    let _21: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:29: 60:36
    let mut _22: bool;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:13: 61:27
    let mut _23: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:13: 61:18
    let mut _24: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27
    let mut _25: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:29: 61:48
    let _26: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:29: 61:36
    let mut _27: bool;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:13: 62:31
    let mut _28: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:13: 62:18
    let mut _29: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31
    let mut _30: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:33: 62:56
    let _31: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:33: 62:44
    let mut _32: bool;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:13: 63:28
    let mut _33: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:13: 63:18
    let mut _34: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28
    let mut _35: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:30: 63:50
    let _36: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:30: 63:38
    let mut _37: bool;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:13: 64:28
    let mut _38: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:13: 64:18
    let mut _39: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28
    let mut _40: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:30: 64:50
    let _41: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:30: 64:38
    let mut _42: &str;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:65:11: 65:32
    let _43: &str;                       // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:65:11: 65:20
    let mut _44: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28
    let mut _45: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28
    let mut _46: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31
    let mut _47: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27
    let mut _48: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27
    let mut _49: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26
    let mut _50: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27
    let mut _51: &color;                 // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20

    bb0: {
        _3 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:8: 57:13
        _51 = const _;                   // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20
                                         // + literal: Const { ty: &color, val: Unevaluated(get_color_if, [], Some(promoted[7])) }
        _4 = _51;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20
        _2 = <color as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:8: 57:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:57:8: 57:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a color, &'b color) -> bool {<color as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:8: 57:20
    }

    bb2: {
        _6 = const "red";                // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:22: 57:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:57:22: 57:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _5 = _6;                         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:22: 57:39
        _0 = <str as ToString>::to_string(move _5) -> bb25; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:22: 57:39
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:57:28: 57:37
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:13: 58:18
        _50 = const _;                   // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27
                                         // + literal: Const { ty: &color, val: Unevaluated(get_color_if, [], Some(promoted[6])) }
        _9 = _50;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27
        _7 = <color as PartialEq>::eq(move _8, move _9) -> bb4; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:13: 58:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:58:13: 58:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a color, &'b color) -> bool {<color as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        switchInt(move _7) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:13: 58:27
    }

    bb5: {
        _11 = const "green";             // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:29: 58:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:58:29: 58:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:29: 58:48
        _0 = <str as ToString>::to_string(move _10) -> bb25; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:29: 58:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:58:37: 58:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = &_1;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:13: 59:18
        _49 = const _;                   // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26
                                         // + literal: Const { ty: &color, val: Unevaluated(get_color_if, [], Some(promoted[5])) }
        _14 = _49;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26
        _12 = <color as PartialEq>::eq(move _13, move _14) -> bb7; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:13: 59:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:59:13: 59:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a color, &'b color) -> bool {<color as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb7: {
        switchInt(move _12) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:13: 59:26
    }

    bb8: {
        _16 = const "blue";              // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:28: 59:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:59:28: 59:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = _16;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:28: 59:46
        _0 = <str as ToString>::to_string(move _15) -> bb25; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:28: 59:46
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:59:35: 59:44
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = &_1;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:13: 60:18
        _48 = const _;                   // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27
                                         // + literal: Const { ty: &color, val: Unevaluated(get_color_if, [], Some(promoted[4])) }
        _19 = _48;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27
        _17 = <color as PartialEq>::eq(move _18, move _19) -> bb10; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:13: 60:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:60:13: 60:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a color, &'b color) -> bool {<color as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        switchInt(move _17) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:13: 60:27
    }

    bb11: {
        _21 = const "black";             // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:29: 60:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:60:29: 60:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _20 = _21;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:29: 60:48
        _0 = <str as ToString>::to_string(move _20) -> bb25; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:29: 60:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:60:37: 60:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb12: {
        _23 = &_1;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:13: 61:18
        _47 = const _;                   // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27
                                         // + literal: Const { ty: &color, val: Unevaluated(get_color_if, [], Some(promoted[3])) }
        _24 = _47;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27
        _22 = <color as PartialEq>::eq(move _23, move _24) -> bb13; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:13: 61:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:61:13: 61:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a color, &'b color) -> bool {<color as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        switchInt(move _22) -> [0: bb15, otherwise: bb14]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:13: 61:27
    }

    bb14: {
        _26 = const "white";             // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:29: 61:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:61:29: 61:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _25 = _26;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:29: 61:48
        _0 = <str as ToString>::to_string(move _25) -> bb25; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:29: 61:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:61:37: 61:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb15: {
        _28 = &_1;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:13: 62:18
        _46 = const _;                   // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31
                                         // + literal: Const { ty: &color, val: Unevaluated(get_color_if, [], Some(promoted[2])) }
        _29 = _46;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31
        _27 = <color as PartialEq>::eq(move _28, move _29) -> bb16; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:13: 62:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:62:13: 62:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a color, &'b color) -> bool {<color as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        switchInt(move _27) -> [0: bb18, otherwise: bb17]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:13: 62:31
    }

    bb17: {
        _31 = const "imaginary";         // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:33: 62:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:62:33: 62:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _30 = _31;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:33: 62:56
        _0 = <str as ToString>::to_string(move _30) -> bb25; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:33: 62:56
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:62:45: 62:54
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb18: {
        _33 = &_1;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:13: 63:18
        _45 = const _;                   // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28
                                         // + literal: Const { ty: &color, val: Unevaluated(get_color_if, [], Some(promoted[1])) }
        _34 = _45;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28
        _32 = <color as PartialEq>::eq(move _33, move _34) -> bb19; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:13: 63:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:63:13: 63:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a color, &'b color) -> bool {<color as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb19: {
        switchInt(move _32) -> [0: bb21, otherwise: bb20]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:13: 63:28
    }

    bb20: {
        _36 = const "purple";            // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:30: 63:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:63:30: 63:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _35 = _36;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:30: 63:50
        _0 = <str as ToString>::to_string(move _35) -> bb25; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:30: 63:50
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:63:39: 63:48
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb21: {
        _38 = &_1;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:13: 64:18
        _44 = const _;                   // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28
                                         // + literal: Const { ty: &color, val: Unevaluated(get_color_if, [], Some(promoted[0])) }
        _39 = _44;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28
        _37 = <color as PartialEq>::eq(move _38, move _39) -> bb22; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:13: 64:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:64:13: 64:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a color, &'b color) -> bool {<color as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        switchInt(move _37) -> [0: bb24, otherwise: bb23]; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:13: 64:28
    }

    bb23: {
        _41 = const "orange";            // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:30: 64:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:64:30: 64:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _40 = _41;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:30: 64:50
        _0 = <str as ToString>::to_string(move _40) -> bb25; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:30: 64:50
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:64:39: 64:48
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb24: {
        _43 = const "unknown";           // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:65:11: 65:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:65:11: 65:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _42 = _43;                       // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:65:11: 65:32
        _0 = <str as ToString>::to_string(move _42) -> bb25; // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:65:11: 65:32
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-variant-disr-val.rs:65:21: 65:30
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb25: {
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:66:2: 66:2
    }
}

promoted[0] in get_color_if: &color = {
    let mut _0: &color;                  // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28
    let mut _1: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28

    bb0: {
        _1 = color::orange;              // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:64:22: 64:28
    }
}

promoted[1] in get_color_if: &color = {
    let mut _0: &color;                  // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28
    let mut _1: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28

    bb0: {
        _1 = color::purple;              // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:63:22: 63:28
    }
}

promoted[2] in get_color_if: &color = {
    let mut _0: &color;                  // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31
    let mut _1: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31

    bb0: {
        _1 = color::imaginary;           // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:62:22: 62:31
    }
}

promoted[3] in get_color_if: &color = {
    let mut _0: &color;                  // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27
    let mut _1: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27

    bb0: {
        _1 = color::white;               // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:61:22: 61:27
    }
}

promoted[4] in get_color_if: &color = {
    let mut _0: &color;                  // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27
    let mut _1: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27

    bb0: {
        _1 = color::black;               // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:60:22: 60:27
    }
}

promoted[5] in get_color_if: &color = {
    let mut _0: &color;                  // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26
    let mut _1: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26

    bb0: {
        _1 = color::blue;                // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:59:22: 59:26
    }
}

promoted[6] in get_color_if: &color = {
    let mut _0: &color;                  // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27
    let mut _1: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27

    bb0: {
        _1 = color::green;               // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:58:22: 58:27
    }
}

promoted[7] in get_color_if: &color = {
    let mut _0: &color;                  // return place in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20
    let mut _1: color;                   // in scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20

    bb0: {
        _1 = color::red;                 // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20
        _0 = &_1;                        // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-val.rs:57:17: 57:20
    }
}
