// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:10:15: 10:15
    let _1: W;                           // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:12:9: 12:10
    let mut _3: i32;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:14:14: 14:33
    let _4: ();                          // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:14:16: 14:27
    let mut _5: W;                       // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:15:13: 15:31
    let _6: ();                          // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:15:15: 15:26
    let mut _7: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: bool;                   // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:20:5: 21:61
    let mut _27: bool;                   // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:20:13: 20:29
    let mut _28: usize;                  // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:20:13: 20:19
    let mut _29: usize;                  // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:20:23: 20:29
    let mut _30: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _31: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _32: &[&str];                // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
    let mut _33: &[&str; 2];             // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
    let _34: &[&str; 2];                 // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
    let mut _35: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _36: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _37: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _38: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _39: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:46: 21:52
    let mut _40: &usize;                 // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:46: 21:52
    let _41: &usize;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:46: 21:52
    let mut _42: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:54: 21:60
    let mut _43: &usize;                 // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:54: 21:60
    let _44: &usize;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:54: 21:60
    scope 1 {
        debug w => _1;                   // in scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:12:9: 12:10
        let _2: S;                       // in scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:13:9: 13:10
        scope 2 {
            debug s => _2;               // in scope 2 at ui/struct-enums/struct-order-of-eval-4.rs:13:9: 13:10
            let _10: &u32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &u32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _24: usize;              // in scope 2 at ui/struct-enums/struct-order-of-eval-4.rs:18:9: 18:15
            let mut _46: &u32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug actual => _24;     // in scope 5 at ui/struct-enums/struct-order-of-eval-4.rs:18:9: 18:15
                let _25: usize;          // in scope 5 at ui/struct-enums/struct-order-of-eval-4.rs:19:9: 19:15
                scope 6 {
                    debug expect => _25; // in scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:19:9: 19:15
                    let mut _45: &[&str; 2]; // in scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
                }
            }
        }
    }

    bb0: {
        _1 = const W {{ wrapped: 2309737967_u32 }}; // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:12:13: 12:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:12:13: 12:31
                                         // + literal: Const { ty: W, val: Value(Scalar(0x89abcdef)) }
        _4 = event(const 1_u8) -> bb1;   // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:14:16: 14:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:14:16: 14:21
                                         // + literal: Const { ty: fn(u8) {event}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = const 23_i32;               // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:14:29: 14:31
        _6 = event(const 2_u8) -> bb2;   // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:15:15: 15:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:15:15: 15:20
                                         // + literal: Const { ty: fn(u8) {event}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = move _1;                    // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:15:28: 15:29
        _2 = S { f0: move _5, _f1: move _3 }; // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:13:13: 16:6
        _8 = &((_2.0: W).0: u32);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _46 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[1])) }
        _9 = _46;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &u32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &u32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 2309737967_u32;      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<u32, u32>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb4: {
        _24 = event_log() -> bb5;        // scope 2 at ui/struct-enums/struct-order-of-eval-4.rs:18:18: 18:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:18:18: 18:27
                                         // + literal: Const { ty: fn() -> usize {event_log}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = const 258_usize;           // scope 5 at ui/struct-enums/struct-order-of-eval-4.rs:19:18: 19:25
        _28 = _25;                       // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:20:13: 20:19
        _29 = _24;                       // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:20:23: 20:29
        _27 = Eq(move _28, move _29);    // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:20:13: 20:29
        _26 = Not(move _27);             // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:20:5: 21:61
        switchInt(move _26) -> [0: bb10, otherwise: bb6]; // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:20:5: 21:61
    }

    bb6: {
        _45 = const _;                   // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _34 = _45;                       // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
        _33 = _34;                       // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
        _32 = move _33 as &[&str] (Pointer(Unsize)); // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
        _41 = &_25;                      // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:46: 21:52
        _40 = _41;                       // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:46: 21:52
        _39 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>(move _40) -> bb7; // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:46: 21:52
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:21:46: 21:52
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>}, val: Value(<ZST>) }
    }

    bb7: {
        _44 = &_24;                      // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:54: 21:60
        _43 = _44;                       // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:54: 21:60
        _42 = core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>(move _43) -> bb8; // scope 6 at ui/struct-enums/struct-order-of-eval-4.rs:21:54: 21:60
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:21:54: 21:60
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_lower_hex::<usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _38 = [move _39, move _42];      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _37 = &_38;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _36 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _35 = move _36 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _31 = Arguments::<'_>::new_v1(move _32, move _35) -> bb9; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb9: {
        _30 = panic_fmt(move _31);       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:22:2: 22:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
    let mut _1: [&str; 2];               // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44

    bb0: {
        _1 = [const "expect: 0x", const " actual: 0x"]; // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:21:13: 21:44
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:17:30: 17:33

    bb0: {
        _1 = const _;                    // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:17:30: 17:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

const VAL: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:11:16: 11:19

    bb0: {
        _0 = const 2309737967_u32;       // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:11:22: 11:33
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:11:5: 11:34
    }
}

static LOG: AtomicUsize = {
    let mut _0: std::sync::atomic::AtomicUsize; // return place in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:24:13: 24:24

    bb0: {
        ConstEvalCounter;                // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:24:27: 24:46
        _0 = AtomicUsize::new(const 0_usize) -> bb1; // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:24:27: 24:46
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:24:27: 24:43
                                         // + literal: Const { ty: fn(usize) -> AtomicUsize {AtomicUsize::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:24:1: 24:47
    }
}

fn event_log() -> usize {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:26:19: 26:24
    let mut _1: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:27:5: 27:31
    let _2: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:27:5: 27:8
    let mut _3: std::sync::atomic::Ordering; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:27:14: 27:30

    bb0: {
        _2 = const {alloc1: &AtomicUsize}; // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:27:5: 27:8
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:27:5: 27:8
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _1 = _2;                         // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:27:5: 27:31
        _3 = const SeqCst;               // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:27:14: 27:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:27:14: 27:30
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _0 = AtomicUsize::load(move _1, move _3) -> bb1; // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:27:5: 27:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:27:9: 27:13
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:28:2: 28:2
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

fn event(_1: u8) -> () {
    debug tag => _1;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:30:10: 30:13
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:30:19: 30:19
    let _2: usize;                       // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:31:9: 31:16
    let mut _3: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:31:19: 31:45
    let _4: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:31:19: 31:22
    let mut _5: std::sync::atomic::Ordering; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:31:28: 31:44
    let mut _7: usize;                   // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:32:19: 32:33
    let mut _8: usize;                   // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:32:20: 32:27
    let mut _9: (usize, bool);           // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:32:19: 32:33
    let mut _10: usize;                  // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:32:36: 32:48
    let mut _11: u8;                     // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:32:36: 32:39
    let mut _12: (usize, bool);          // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:32:19: 32:48
    let _13: ();                         // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:33:5: 33:41
    let mut _14: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:33:5: 33:41
    let _15: &std::sync::atomic::AtomicUsize; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:33:5: 33:8
    let mut _16: usize;                  // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:33:15: 33:22
    let mut _17: std::sync::atomic::Ordering; // in scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:33:24: 33:40
    scope 1 {
        debug old_log => _2;             // in scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:31:9: 31:16
        let _6: usize;                   // in scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:9: 32:16
        scope 2 {
            debug new_log => _6;         // in scope 2 at ui/struct-enums/struct-order-of-eval-4.rs:32:9: 32:16
        }
    }

    bb0: {
        _4 = const {alloc1: &AtomicUsize}; // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:31:19: 31:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:31:19: 31:22
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:31:19: 31:45
        _5 = const SeqCst;               // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:31:28: 31:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:31:28: 31:44
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _2 = AtomicUsize::load(move _3, move _5) -> bb1; // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:31:19: 31:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:31:23: 31:27
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, std::sync::atomic::Ordering) -> usize {AtomicUsize::load}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = _2;                         // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:20: 32:27
        _9 = CheckedShl(_8, const 8_i32); // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:19: 32:33
        assert(!move (_9.1: bool), "attempt to shift left by `{}`, which would overflow", const 8_i32) -> bb2; // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:19: 32:33
    }

    bb2: {
        _7 = move (_9.0: usize);         // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:19: 32:33
        _11 = _1;                        // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:36: 32:39
        _10 = move _11 as usize (IntToInt); // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:36: 32:48
        _12 = CheckedAdd(_7, _10);       // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:19: 32:48
        assert(!move (_12.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _10) -> bb3; // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:19: 32:48
    }

    bb3: {
        _6 = move (_12.0: usize);        // scope 1 at ui/struct-enums/struct-order-of-eval-4.rs:32:19: 32:48
        _15 = const {alloc1: &AtomicUsize}; // scope 2 at ui/struct-enums/struct-order-of-eval-4.rs:33:5: 33:8
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:33:5: 33:8
                                         // + literal: Const { ty: &AtomicUsize, val: Value(Scalar(alloc1)) }
        _14 = _15;                       // scope 2 at ui/struct-enums/struct-order-of-eval-4.rs:33:5: 33:41
        _16 = _6;                        // scope 2 at ui/struct-enums/struct-order-of-eval-4.rs:33:15: 33:22
        _17 = const SeqCst;              // scope 2 at ui/struct-enums/struct-order-of-eval-4.rs:33:24: 33:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:33:24: 33:40
                                         // + literal: Const { ty: std::sync::atomic::Ordering, val: Value(Scalar(0x04)) }
        _13 = AtomicUsize::store(move _14, move _16, move _17) -> bb4; // scope 2 at ui/struct-enums/struct-order-of-eval-4.rs:33:5: 33:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-4.rs:33:9: 33:14
                                         // + literal: Const { ty: for<'a> fn(&'a AtomicUsize, usize, std::sync::atomic::Ordering) {AtomicUsize::store}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-4.rs:34:2: 34:2
    }
}

alloc1 (static: LOG, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}
