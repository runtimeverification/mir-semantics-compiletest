// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/newtype-struct-drop-run.rs:8:1: 8:26>::drop(_1: &mut Foo<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:9:13: 9:22
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:9:24: 9:24
    let _2: &std::cell::Cell<isize>;     // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:10:17: 10:18
    let _3: ();                          // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:11:9: 11:18
    let mut _4: &std::cell::Cell<isize>; // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:11:9: 11:18
    scope 1 {
        debug i => _2;                   // in scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:10:17: 10:18
    }

    bb0: {
        _2 = ((*_1).0: &std::cell::Cell<isize>); // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:10:17: 10:18
        _4 = _2;                         // scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:11:9: 11:18
        _3 = Cell::<isize>::set(move _4, const 23_isize) -> bb1; // scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:11:9: 11:18
                                         // mir::Constant
                                         // + span: ui/struct-enums/newtype-struct-drop-run.rs:11:11: 11:14
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>, isize) {Cell::<isize>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:12:6: 12:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:15:15: 15:15
    let _1: &std::cell::Cell<isize>;     // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:16:9: 16:10
    let _2: std::cell::Cell<isize>;      // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:16:14: 16:27
    let mut _4: &std::cell::Cell<isize>; // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:18:22: 18:23
    let mut _5: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: isize;                       // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:20:16: 20:23
    let mut _8: &std::cell::Cell<isize>; // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:20:16: 20:23
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug y => _1;                   // in scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:16:9: 16:10
        let _3: Foo<'_>;                 // in scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:18:13: 18:15
        let _10: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &isize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _24: &isize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug _x => _3;              // in scope 2 at ui/struct-enums/newtype-struct-drop-run.rs:18:13: 18:15
        }
        scope 3 {
            debug left_val => _10;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _16;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _2 = Cell::<isize>::new(const 32_isize) -> bb1; // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:16:14: 16:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/newtype-struct-drop-run.rs:16:14: 16:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Cell<isize> {Cell::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = &_2;                        // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:16:13: 16:27
        _4 = _1;                         // scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:18:22: 18:23
        _3 = Foo::<'_>(move _4);         // scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:18:18: 18:24
        drop(_3) -> bb2;                 // scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:19:5: 19:6
    }

    bb2: {
        _8 = _1;                         // scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:20:16: 20:23
        _7 = Cell::<isize>::get(move _8) -> bb3; // scope 1 at ui/struct-enums/newtype-struct-drop-run.rs:20:16: 20:23
                                         // mir::Constant
                                         // + span: ui/struct-enums/newtype-struct-drop-run.rs:20:18: 20:21
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<isize>) -> isize {Cell::<isize>::get}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _24;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_5.0: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_5.1: &isize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 23_isize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:21:2: 21:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:20:25: 20:27

    bb0: {
        _1 = const 23_isize;             // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:20:25: 20:27
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Foo(_1: &Cell<isize>) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:6:1: 6:15

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:6:1: 6:15
        return;                          // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:6:1: 6:15
    }
}

// MIR FOR CTFE
fn Foo(_1: &Cell<isize>) -> Foo<'_> {
    let mut _0: Foo<'_>;                 // return place in scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:6:1: 6:15

    bb0: {
        _0 = Foo::<'_>(move _1);         // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:6:1: 6:15
        return;                          // scope 0 at ui/struct-enums/newtype-struct-drop-run.rs:6:1: 6:15
    }
}
