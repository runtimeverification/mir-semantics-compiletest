// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:6:15: 6:15
    let _1: std::string::String;         // in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:7:9: 7:10
    let mut _2: &str;                    // in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:7:13: 7:40
    let _3: &str;                        // in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:7:13: 7:28
    let mut _5: std::string::String;     // in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:9:13: 9:26
    let mut _6: &std::string::String;    // in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:9:13: 9:26
    let mut _7: S;                       // in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:10:11: 13:10
    let mut _8: std::string::String;     // in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:11:17: 11:18
    let mut _9: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _27: bool;                   // in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:16:1: 16:2
    scope 1 {
        debug s => _1;                   // in scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:7:9: 7:10
        let _4: S;                       // in scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:8:9: 8:10
        scope 2 {
            debug s => _4;               // in scope 2 at ui/struct-enums/struct-order-of-eval-1.rs:8:9: 8:10
            let _12: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _13: &&str;              // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _26: &&str;          // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _12;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _13;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _18;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _27 = const false;               // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:7:9: 7:10
        _3 = const "Hello, world!";      // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:7:13: 7:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-1.rs:7:13: 7:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = _3;                         // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:7:13: 7:40
        _27 = const true;                // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:7:13: 7:40
        _1 = <str as ToString>::to_string(move _2) -> bb1; // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:7:13: 7:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-1.rs:7:29: 7:38
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &_1;                        // scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:9:13: 9:26
        _5 = <String as ToString>::to_string(move _6) -> [return: bb2, unwind: bb11]; // scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:9:13: 9:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-1.rs:9:15: 9:24
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _27 = const false;               // scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:11:17: 11:18
        _8 = move _1;                    // scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:11:17: 11:18
        _7 = S { f0: move _8, f1: const 23_isize }; // scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:10:11: 13:10
        _4 = S { f0: move _5, f1: (_7.1: isize) }; // scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:8:13: 14:6
        drop(_7) -> [return: bb3, unwind: bb8]; // scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:14:6: 14:7
    }

    bb3: {
        _10 = &(_4.0: std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _26 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _26;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_9.0: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_9.1: &&str);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <String as PartialEq<&str>>::eq(move _16, move _17) -> [return: bb4, unwind: bb8]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<String, &str>(move _20, move _21, move _23, move _25) -> bb8; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb6: {
        drop(_4) -> [return: bb7, unwind: bb11]; // scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:16:1: 16:2
    }

    bb7: {
        _27 = const false;               // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:16:1: 16:2
        return;                          // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:16:2: 16:2
    }

    bb8 (cleanup): {
        drop(_4) -> bb11;                // scope 1 at ui/struct-enums/struct-order-of-eval-1.rs:16:1: 16:2
    }

    bb9 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:6:1: 16:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb9;                 // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:16:1: 16:2
    }

    bb11 (cleanup): {
        switchInt(_27) -> [0: bb9, otherwise: bb10]; // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:16:1: 16:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:15:22: 15:37

    bb0: {
        _1 = const "Hello, world!";      // scope 0 at ui/struct-enums/struct-order-of-eval-1.rs:15:22: 15:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-order-of-eval-1.rs:15:22: 15:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
