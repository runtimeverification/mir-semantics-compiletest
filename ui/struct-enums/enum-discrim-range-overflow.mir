// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
E64::H64::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:7:11: 7:32

    bb0: {
        _0 = const isize::MAX;           // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:7:11: 7:32
        return;                          // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:7:11: 7:32
    }
}

E64::L64::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:8:11: 8:32

    bb0: {
        _0 = const isize::MIN;           // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:8:11: 8:32
        return;                          // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:8:11: 8:32
    }
}

E32::H32::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:11:11: 11:22

    bb0: {
        _0 = const 2147483647_isize;     // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:11:11: 11:22
        return;                          // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:11:11: 11:22
    }
}

E32::L32::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:12:11: 12:22

    bb0: {
        _0 = const 2147483648_isize;     // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:12:11: 12:22
        return;                          // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:12:11: 12:22
    }
}

fn f(_1: E64, _2: E32) -> (bool, bool) {
    debug e64 => _1;                     // in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:15:10: 15:13
    debug e32 => _2;                     // in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:15:20: 15:23
    let mut _0: (bool, bool);            // return place in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:15:33: 15:44
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:16:6: 19:6
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:17:9: 17:17
    let mut _5: bool;                    // in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:20:6: 23:6
    let mut _6: isize;                   // in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:21:9: 21:17

    bb0: {
        _4 = discriminant(_1);           // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:16:12: 16:15
        switchInt(move _4) -> [9223372036854775807: bb3, 9223372036854775808: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:16:6: 16:15
    }

    bb1: {
        _3 = const false;                // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:18:21: 18:26
        goto -> bb4;                     // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:18:21: 18:26
    }

    bb2: {
        unreachable;                     // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:16:12: 16:15
    }

    bb3: {
        _3 = const true;                 // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:17:21: 17:25
        goto -> bb4;                     // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:17:21: 17:25
    }

    bb4: {
        _6 = discriminant(_2);           // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:20:12: 20:15
        switchInt(move _6) -> [2147483647: bb7, 2147483648: bb5, otherwise: bb6]; // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:20:6: 20:15
    }

    bb5: {
        _5 = const false;                // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:22:21: 22:26
        goto -> bb8;                     // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:22:21: 22:26
    }

    bb6: {
        unreachable;                     // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:20:12: 20:15
    }

    bb7: {
        _5 = const true;                 // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:21:21: 21:25
        goto -> bb8;                     // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:21:21: 21:25
    }

    bb8: {
        _0 = (move _3, move _5);         // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:16:5: 23:7
        return;                          // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:24:2: 24:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:26:15: 26:15

    bb0: {
        return;                          // scope 0 at ui/struct-enums/enum-discrim-range-overflow.rs:26:18: 26:18
    }
}
