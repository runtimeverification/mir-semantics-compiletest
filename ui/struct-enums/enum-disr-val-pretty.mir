// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
color::red::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:6:20: 6:21

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:6:20: 6:21
        return;                          // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:6:20: 6:21
    }
}

color::imaginary::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:6:48: 6:50

    bb0: {
        _0 = const -1_isize;             // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:6:48: 6:50
        return;                          // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:6:48: 6:50
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:8:15: 8:15
    let _1: ();                          // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:5: 9:49
    let mut _2: color;                   // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:16: 9:26
    let mut _3: std::string::String;     // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:31: 9:48
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:31: 9:48
    let _5: &str;                        // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:31: 9:36
    let _6: ();                          // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:5: 10:53
    let mut _7: color;                   // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:16: 10:28
    let mut _8: std::string::String;     // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:33: 10:52
    let mut _9: &str;                    // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:33: 10:52
    let _10: &str;                       // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:33: 10:40
    let _11: ();                         // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:5: 11:51
    let mut _12: color;                  // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:16: 11:27
    let mut _13: std::string::String;    // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:32: 11:50
    let mut _14: &str;                   // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:32: 11:50
    let _15: &str;                       // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:32: 11:38
    let _16: ();                         // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:5: 12:62
    let mut _17: color;                  // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:16: 12:32
    let mut _18: std::string::String;    // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:38: 12:61
    let mut _19: &str;                   // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:38: 12:61
    let _20: &str;                       // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:38: 12:49

    bb0: {
        _2 = const color::red;           // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:16: 9:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:9:16: 9:26
                                         // + literal: Const { ty: color, val: Value(Scalar(0x01)) }
        _5 = const "red";                // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:31: 9:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:9:31: 9:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:31: 9:48
        _3 = <str as ToString>::to_string(move _4) -> bb1; // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:31: 9:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:9:37: 9:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = test_color(move _2, const 1_isize, move _3) -> bb2; // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:9:5: 9:49
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:9:5: 9:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = const color::green;         // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:16: 10:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:10:16: 10:28
                                         // + literal: Const { ty: color, val: Value(Scalar(0x02)) }
        _10 = const "green";             // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:33: 10:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:10:33: 10:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:33: 10:52
        _8 = <str as ToString>::to_string(move _9) -> bb3; // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:33: 10:52
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:10:41: 10:50
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = test_color(move _7, const 2_isize, move _8) -> bb4; // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:10:5: 10:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:10:5: 10:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = const color::blue;         // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:16: 11:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:11:16: 11:27
                                         // + literal: Const { ty: color, val: Value(Scalar(0x03)) }
        _15 = const "blue";              // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:32: 11:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:11:32: 11:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:32: 11:50
        _13 = <str as ToString>::to_string(move _14) -> bb5; // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:32: 11:50
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:11:39: 11:48
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = test_color(move _12, const 3_isize, move _13) -> bb6; // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:11:5: 11:51
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:11:5: 11:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb6: {
        _17 = const color::imaginary;    // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:16: 12:32
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:12:16: 12:32
                                         // + literal: Const { ty: color, val: Value(Scalar(0xff)) }
        _20 = const "imaginary";         // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:38: 12:49
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:12:38: 12:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _19 = _20;                       // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:38: 12:61
        _18 = <str as ToString>::to_string(move _19) -> bb7; // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:38: 12:61
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:12:50: 12:59
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb7: {
        _16 = test_color(move _17, const -1_isize, move _18) -> bb8; // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:12:5: 12:62
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-disr-val-pretty.rs:12:5: 12:15
                                         // + literal: Const { ty: fn(color, isize, String) {test_color}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:13:2: 13:2
    }
}

fn test_color(_1: color, _2: isize, _3: String) -> () {
    debug color => _1;                   // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:15:15: 15:20
    debug val => _2;                     // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:15:29: 15:32
    debug _name => _3;                   // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:15:41: 15:46
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:15:56: 15:56
    let mut _4: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _6: isize;                       // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:16:16: 16:30
    let _7: color;                       // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:16:16: 16:21
    let mut _8: isize;                   // in scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:16:16: 16:21
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _10;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _7 = move _1;                    // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:16:16: 16:21
        _8 = discriminant(_7);           // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:16:16: 16:30
        _6 = move _8 as isize (IntToInt); // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:16:16: 16:30
        _5 = &_6;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = &_2;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_4.0: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_4.1: &isize);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = (*_11);                    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _16 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23) -> bb4; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_3) -> bb3;                 // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:17:1: 17:2
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:17:2: 17:2
    }

    bb4 (cleanup): {
        drop(_3) -> bb5;                 // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:17:1: 17:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/enum-disr-val-pretty.rs:15:1: 17:2
    }
}
