// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/struct-partial-move-2.rs:2:10: 2:19>::eq(_1: &Partial<T>, _2: &Partial<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:10: 2:19
    debug other => _2;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:10: 2:19
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:10: 2:19
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
    let mut _4: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
    let mut _5: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
    let mut _6: bool;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    let mut _7: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    let mut _8: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
        _5 = &((*_2).0: T);              // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
        _3 = <T as PartialEq>::eq(move _4, move _5) -> bb4; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
        goto -> bb3;                     // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    }

    bb2: {
        _7 = &((*_1).1: T);              // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
        _8 = &((*_2).1: T);              // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
        _6 = <T as PartialEq>::eq(move _7, move _8) -> bb5; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a T, &'b T) -> bool {<T as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:19: 2:19
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    }

    bb5: {
        _0 = move _6;                    // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
        goto -> bb3;                     // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    }
}

fn <impl at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26>::fmt(_1: &Partial<T>, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
    debug f => _2;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
    let _5: &str;                        // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
    let mut _6: &str;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
    let _7: &str;                        // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
    let mut _9: &T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
    let _10: &T;                         // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
    let mut _11: &str;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    let _12: &str;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    let mut _14: &&T;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    let _15: &&T;                        // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
    let _16: &T;                         // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
        _5 = const "Partial";            // scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
        _7 = const "x";                  // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
        _10 = &((*_1).0: T);             // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
        _9 = _10;                        // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:25: 3:29
        _12 = const "y";                 // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
        _16 = &((*_1).1: T);             // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
        _15 = &_16;                      // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
        _14 = _15;                       // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/struct-partial-move-2.rs:3:31: 3:35
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:2:21: 2:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:2:26: 2:26
    }
}

fn <impl at ui/struct-enums/struct-partial-move-2.rs:5:10: 5:19>::eq(_1: &S, _2: &S) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:10: 5:19
    debug other => _2;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:10: 5:19
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:10: 5:19
    let mut _3: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22

    bb0: {
        _3 = ((*_1).0: isize);           // scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
        _4 = ((*_2).0: isize);           // scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
        _0 = Eq(move _3, move _4);       // scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:19: 5:19
    }
}

fn <impl at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26>::fmt(_1: &S, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
    debug f => _2;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
    let _5: &str;                        // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
    let mut _6: &str;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
    let _7: &str;                        // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
    let mut _9: &&isize;                 // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
    let _10: &&isize;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
    let _11: &isize;                     // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
        _5 = const "S";                  // scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
        _7 = const "val";                // scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
        _11 = &((*_1).0: isize);         // scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
        _10 = &_11;                      // scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
        _9 = _10;                        // scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/struct-partial-move-2.rs:6:12: 6:22
        _0 = Formatter::<'_>::debug_struct_field1_finish(move _3, move _4, move _6, move _8) -> bb1; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:5:21: 5:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:5:26: 5:26
    }
}

fn <impl at ui/struct-enums/struct-partial-move-2.rs:7:1: 7:7>::new(_1: isize) -> S {
    debug v => _1;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:7:17: 7:18
    let mut _0: S;                       // return place in scope 0 at ui/struct-enums/struct-partial-move-2.rs:7:30: 7:31
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:7:43: 7:44

    bb0: {
        _2 = _1;                         // scope 0 at ui/struct-enums/struct-partial-move-2.rs:7:43: 7:44
        _0 = S { val: move _2 };         // scope 0 at ui/struct-enums/struct-partial-move-2.rs:7:34: 7:46
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:7:48: 7:48
    }
}

fn <impl at ui/struct-enums/struct-partial-move-2.rs:8:1: 8:16>::drop(_1: &mut S) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:8:27: 8:36
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-partial-move-2.rs:8:38: 8:38

    bb0: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:8:41: 8:41
    }
}

fn f(_1: (T, T), _2: (T, T), _3: F) -> (Partial<T>, Partial<T>) {
    debug f => _3;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:52: 12:57
    let mut _0: (Partial<T>, Partial<T>); // return place in scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:65: 12:71
    let _4: T;                           // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:17: 12:19
    let _5: T;                           // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:21: 12:23
    let _6: T;                           // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:35: 12:37
    let _7: T;                           // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:39: 12:41
    let mut _9: T;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:13:26: 13:28
    let mut _10: T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:13:33: 13:35
    let mut _12: T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:14:26: 14:28
    let mut _13: T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:14:33: 14:35
    let mut _14: Partial<T>;             // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:6: 19:32
    let mut _15: T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:19: 19:25
    let mut _16: &mut F;                 // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:19: 19:20
    let mut _17: (T,);                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:19: 19:25
    let mut _18: T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:21: 19:24
    let mut _19: Partial<T>;             // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:34: 19:60
    let mut _20: T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:47: 19:53
    let mut _21: &mut F;                 // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:47: 19:48
    let mut _22: (T,);                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:47: 19:53
    let mut _23: T;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:19:49: 19:52
    let mut _24: bool;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
    let mut _25: bool;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
    scope 1 {
        debug b1 => _4;                  // in scope 1 at ui/struct-enums/struct-partial-move-2.rs:12:17: 12:19
        debug b2 => _5;                  // in scope 1 at ui/struct-enums/struct-partial-move-2.rs:12:21: 12:23
        debug b3 => _6;                  // in scope 1 at ui/struct-enums/struct-partial-move-2.rs:12:35: 12:37
        debug b4 => _7;                  // in scope 1 at ui/struct-enums/struct-partial-move-2.rs:12:39: 12:41
        let _8: Partial<T>;              // in scope 1 at ui/struct-enums/struct-partial-move-2.rs:13:9: 13:10
        scope 2 {
            debug p => _8;               // in scope 2 at ui/struct-enums/struct-partial-move-2.rs:13:9: 13:10
            let _11: Partial<T>;         // in scope 2 at ui/struct-enums/struct-partial-move-2.rs:14:9: 14:10
            scope 3 {
                debug q => _11;          // in scope 3 at ui/struct-enums/struct-partial-move-2.rs:14:9: 14:10
            }
        }
    }

    bb0: {
        _25 = const false;               // scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:17: 12:19
        _24 = const false;               // scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:17: 12:19
        _4 = move (_1.0: T);             // scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:17: 12:19
        _5 = move (_1.1: T);             // scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:21: 12:23
        _6 = move (_2.0: T);             // scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:35: 12:37
        _7 = move (_2.1: T);             // scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:39: 12:41
        _9 = move _4;                    // scope 1 at ui/struct-enums/struct-partial-move-2.rs:13:26: 13:28
        _10 = move _5;                   // scope 1 at ui/struct-enums/struct-partial-move-2.rs:13:33: 13:35
        _24 = const true;                // scope 1 at ui/struct-enums/struct-partial-move-2.rs:13:13: 13:37
        _25 = const true;                // scope 1 at ui/struct-enums/struct-partial-move-2.rs:13:13: 13:37
        _8 = Partial::<T> { x: move _9, y: move _10 }; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:13:13: 13:37
        _12 = move _6;                   // scope 2 at ui/struct-enums/struct-partial-move-2.rs:14:26: 14:28
        _13 = move _7;                   // scope 2 at ui/struct-enums/struct-partial-move-2.rs:14:33: 14:35
        _11 = Partial::<T> { x: move _12, y: move _13 }; // scope 2 at ui/struct-enums/struct-partial-move-2.rs:14:13: 14:37
        _16 = &mut _3;                   // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:19: 19:20
        _18 = move (_11.1: T);           // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:21: 19:24
        _17 = (move _18,);               // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:19: 19:25
        _15 = <F as FnMut<(T,)>>::call_mut(move _16, move _17) -> [return: bb1, unwind: bb8]; // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:19: 19:25
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:19:19: 19:20
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (T,)) -> <F as FnOnce<(T,)>>::Output {<F as FnMut<(T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _25 = const false;               // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:6: 19:32
        _14 = Partial::<T> { x: move _15, y: move (_8.1: T) }; // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:6: 19:32
        _21 = &mut _3;                   // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:47: 19:48
        _24 = const false;               // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:49: 19:52
        _23 = move (_8.0: T);            // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:49: 19:52
        _22 = (move _23,);               // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:47: 19:53
        _20 = <F as FnMut<(T,)>>::call_mut(move _21, move _22) -> [return: bb2, unwind: bb4]; // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:47: 19:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:19:47: 19:48
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a mut F, (T,)) -> <F as FnOnce<(T,)>>::Output {<F as FnMut<(T,)>>::call_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _19 = Partial::<T> { x: move (_11.0: T), y: move _20 }; // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:34: 19:60
        _0 = (move _14, move _19);       // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:5: 19:61
        _24 = const false;               // scope 1 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
        _25 = const false;               // scope 1 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
        drop(_3) -> bb3;                 // scope 0 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:20:2: 20:2
    }

    bb4 (cleanup): {
        drop(_14) -> bb8;                // scope 3 at ui/struct-enums/struct-partial-move-2.rs:19:60: 19:61
    }

    bb5 (cleanup): {
        drop(_3) -> bb6;                 // scope 0 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:12:1: 20:2
    }

    bb7 (cleanup): {
        switchInt(_24) -> [0: bb9, otherwise: bb11]; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
    }

    bb8 (cleanup): {
        drop((_11.0: T)) -> bb7;         // scope 2 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
    }

    bb9 (cleanup): {
        switchInt(_25) -> [0: bb5, otherwise: bb10]; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
    }

    bb10 (cleanup): {
        drop((_8.1: T)) -> bb5;          // scope 1 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
    }

    bb11 (cleanup): {
        drop((_8.0: T)) -> bb9;          // scope 1 at ui/struct-enums/struct-partial-move-2.rs:20:1: 20:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-partial-move-2.rs:22:15: 22:15
    let _1: (Partial<S>, Partial<S>);    // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:9: 23:12
    let mut _2: (S, S);                  // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:17: 23:39
    let mut _3: S;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:18: 23:27
    let mut _4: S;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:29: 23:38
    let mut _5: (S, S);                  // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:24:17: 24:39
    let mut _6: S;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:24:18: 24:27
    let mut _7: S;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:24:29: 24:38
    let mut _8: [closure@ui/struct-enums/struct-partial-move-2.rs:25:17: 25:31]; // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:17: 25:43
    let mut _9: (&(Partial<S>, Partial<S>), &(Partial<S>, Partial<S>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &(Partial<S>, Partial<S>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &(Partial<S>, Partial<S>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _12: (Partial<S>, Partial<S>);   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:26:21: 27:61
    let mut _13: Partial<S>;             // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:26:22: 26:60
    let mut _14: S;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:26:35: 26:44
    let mut _15: S;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:26:49: 26:58
    let mut _16: Partial<S>;             // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:27:22: 27:60
    let mut _17: S;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:27:35: 27:44
    let mut _18: S;                      // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:27:49: 27:58
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _23: &(Partial<S>, Partial<S>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _24: &(Partial<S>, Partial<S>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _26: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _27: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _28: &(Partial<S>, Partial<S>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _29: &(Partial<S>, Partial<S>);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _30: &(Partial<S>, Partial<S>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _31: &(Partial<S>, Partial<S>);  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _33: bool;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:43: 25:44
    scope 1 {
        debug two => _1;                 // in scope 1 at ui/struct-enums/struct-partial-move-2.rs:23:9: 23:12
        let _19: &(Partial<S>, Partial<S>); // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _20: &(Partial<S>, Partial<S>); // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        scope 2 {
            debug left_val => _19;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _20;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _25: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _25;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _33 = const false;               // scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:9: 23:12
        _3 = S::new(const 1_isize) -> bb1; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:18: 23:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:23:18: 23:24
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = S::new(const 3_isize) -> [return: bb2, unwind: bb21]; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:29: 23:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:23:29: 23:35
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb2: {
        _33 = const true;                // scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:17: 23:39
        _2 = (move _3, move _4);         // scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:17: 23:39
        _6 = S::new(const 5_isize) -> [return: bb3, unwind: bb24]; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:24:18: 24:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:24:18: 24:24
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = S::new(const 7_isize) -> [return: bb4, unwind: bb20]; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:24:29: 24:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:24:29: 24:35
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = (move _6, move _7);         // scope 0 at ui/struct-enums/struct-partial-move-2.rs:24:17: 24:39
        _33 = const false;               // scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:15: 25:44
        _1 = f::<S, [closure@ui/struct-enums/struct-partial-move-2.rs:25:17: 25:31]>(move _2, move _5, move _8) -> [return: bb5, unwind: bb24]; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:15: 25:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:23:15: 23:16
                                         // + literal: Const { ty: fn((S, S), (S, S), [closure@ui/struct-enums/struct-partial-move-2.rs:25:17: 25:31]) -> (Partial<S>, Partial<S>) {f::<S, [closure@ui/struct-enums/struct-partial-move-2.rs:25:17: 25:31]>}, val: Value(<ZST>) }
    }

    bb5: {
        _33 = const false;               // scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:43: 25:44
        _10 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _14 = S::new(const 8_isize) -> [return: bb6, unwind: bb19]; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:26:35: 26:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:26:35: 26:41
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = S::new(const 3_isize) -> [return: bb7, unwind: bb18]; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:26:49: 26:58
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:26:49: 26:55
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = Partial::<S> { x: move _14, y: move _15 }; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:26:22: 26:60
        _17 = S::new(const 5_isize) -> [return: bb8, unwind: bb17]; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:27:35: 27:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:27:35: 27:41
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = S::new(const 2_isize) -> [return: bb9, unwind: bb16]; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:27:49: 27:58
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:27:49: 27:55
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb9: {
        _16 = Partial::<S> { x: move _17, y: move _18 }; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:27:22: 27:60
        _12 = (move _13, move _16);      // scope 1 at ui/struct-enums/struct-partial-move-2.rs:26:21: 27:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _19 = (_9.0: &(Partial<S>, Partial<S>)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _20 = (_9.1: &(Partial<S>, Partial<S>)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _23 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _24 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _22 = <(Partial<S>, Partial<S>) as PartialEq>::eq(move _23, move _24) -> [return: bb10, unwind: bb15]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (Partial<S>, Partial<S>), &'b (Partial<S>, Partial<S>)) -> bool {<(Partial<S>, Partial<S>) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _21 = Not(move _22);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _21) -> [0: bb12, otherwise: bb11]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _25 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _29;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = _31;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _26 = core::panicking::assert_failed::<(Partial<S>, Partial<S>), (Partial<S>, Partial<S>)>(move _27, move _28, move _30, move _32) -> bb15; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (Partial<S>, Partial<S>), &'b (Partial<S>, Partial<S>), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(Partial<S>, Partial<S>), (Partial<S>, Partial<S>)>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_12) -> [return: bb13, unwind: bb19]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13: {
        drop(_1) -> bb14;                // scope 0 at ui/struct-enums/struct-partial-move-2.rs:28:1: 28:2
    }

    bb14: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:28:2: 28:2
    }

    bb15 (cleanup): {
        drop(_12) -> bb19;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb16 (cleanup): {
        drop(_17) -> bb17;               // scope 1 at ui/struct-enums/struct-partial-move-2.rs:27:59: 27:60
    }

    bb17 (cleanup): {
        drop(_13) -> bb19;               // scope 1 at ui/struct-enums/struct-partial-move-2.rs:27:60: 27:61
    }

    bb18 (cleanup): {
        drop(_14) -> bb19;               // scope 1 at ui/struct-enums/struct-partial-move-2.rs:26:59: 26:60
    }

    bb19 (cleanup): {
        drop(_1) -> bb22;                // scope 0 at ui/struct-enums/struct-partial-move-2.rs:28:1: 28:2
    }

    bb20 (cleanup): {
        drop(_6) -> bb24;                // scope 0 at ui/struct-enums/struct-partial-move-2.rs:24:38: 24:39
    }

    bb21 (cleanup): {
        drop(_3) -> bb22;                // scope 0 at ui/struct-enums/struct-partial-move-2.rs:23:38: 23:39
    }

    bb22 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:22:1: 28:2
    }

    bb23 (cleanup): {
        drop(_2) -> bb22;                // scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:43: 25:44
    }

    bb24 (cleanup): {
        switchInt(_33) -> [0: bb22, otherwise: bb23]; // scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:43: 25:44
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/struct-enums/struct-partial-move-2.rs:25:17: 25:31], _2: S) -> S {
    let mut _0: S;                       // return place in scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:32: 25:32
    let _3: isize;                       // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:27: 25:28
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:39: 25:42
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:39: 25:40
    let mut _6: (isize, bool);           // in scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:39: 25:42
    scope 1 {
        debug z => _3;                   // in scope 1 at ui/struct-enums/struct-partial-move-2.rs:25:27: 25:28
    }

    bb0: {
        _3 = (_2.0: isize);              // scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:27: 25:28
        _5 = _3;                         // scope 1 at ui/struct-enums/struct-partial-move-2.rs:25:39: 25:40
        _6 = CheckedAdd(_5, const 1_isize); // scope 1 at ui/struct-enums/struct-partial-move-2.rs:25:39: 25:42
        assert(!move (_6.1: bool), "attempt to compute `{} + {}`, which would overflow", move _5, const 1_isize) -> [success: bb1, unwind: bb4]; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:25:39: 25:42
    }

    bb1: {
        _4 = move (_6.0: isize);         // scope 1 at ui/struct-enums/struct-partial-move-2.rs:25:39: 25:42
        _0 = S::new(move _4) -> [return: bb2, unwind: bb4]; // scope 1 at ui/struct-enums/struct-partial-move-2.rs:25:32: 25:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-partial-move-2.rs:25:32: 25:38
                                         // + literal: Const { ty: fn(isize) -> S {S::new}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:42: 25:43
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:43: 25:43
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:42: 25:43
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/struct-partial-move-2.rs:25:17: 25:43
    }
}
