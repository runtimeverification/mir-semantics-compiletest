// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/empty-tag.rs:5:16: 5:21>::clone(_1: &chan) -> chan {
    debug self => _1;                    // in scope 0 at ui/struct-enums/empty-tag.rs:5:16: 5:21
    let mut _0: chan;                    // return place in scope 0 at ui/struct-enums/empty-tag.rs:5:16: 5:21

    bb0: {
        return;                          // scope 0 at ui/struct-enums/empty-tag.rs:5:21: 5:21
    }
}

fn <impl at ui/struct-enums/empty-tag.rs:5:23: 5:28>::fmt(_1: &chan, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28
    debug f => _2;                       // in scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28
    let _5: &str;                        // in scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28
        _5 = const "chan_t";             // scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/empty-tag.rs:5:23: 5:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb1; // scope 0 at ui/struct-enums/empty-tag.rs:5:23: 5:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/empty-tag.rs:5:23: 5:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/empty-tag.rs:5:28: 5:28
    }
}

fn <impl at ui/struct-enums/empty-tag.rs:8:1: 8:24>::eq(_1: &chan, _2: &chan) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/empty-tag.rs:9:11: 9:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/empty-tag.rs:9:18: 9:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/empty-tag.rs:9:35: 9:39

    bb0: {
        _0 = const true;                 // scope 0 at ui/struct-enums/empty-tag.rs:10:9: 10:50
        return;                          // scope 0 at ui/struct-enums/empty-tag.rs:11:6: 11:6
    }
}

fn <impl at ui/struct-enums/empty-tag.rs:8:1: 8:24>::ne(_1: &chan, _2: &chan) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/empty-tag.rs:12:11: 12:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/empty-tag.rs:12:18: 12:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/empty-tag.rs:12:35: 12:39
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/empty-tag.rs:12:43: 12:60
    let mut _4: &chan;                   // in scope 0 at ui/struct-enums/empty-tag.rs:12:43: 12:60
    let mut _5: &chan;                   // in scope 0 at ui/struct-enums/empty-tag.rs:12:54: 12:59

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/empty-tag.rs:12:43: 12:60
        _5 = _2;                         // scope 0 at ui/struct-enums/empty-tag.rs:12:54: 12:59
        _3 = <chan as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/struct-enums/empty-tag.rs:12:43: 12:60
                                         // mir::Constant
                                         // + span: ui/struct-enums/empty-tag.rs:12:51: 12:53
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chan, &'b chan) -> bool {<chan as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/struct-enums/empty-tag.rs:12:42: 12:60
        return;                          // scope 0 at ui/struct-enums/empty-tag.rs:12:62: 12:62
    }
}

fn wrapper3(_1: chan) -> () {
    debug i => _1;                       // in scope 0 at ui/struct-enums/empty-tag.rs:15:13: 15:14
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/empty-tag.rs:15:22: 15:22
    let mut _2: (&chan, &chan);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &chan;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _4: &chan;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &chan;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &chan;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &chan;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &chan;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &chan;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &chan;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &chan;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &chan;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: &chan;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _19 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &chan, val: Unevaluated(wrapper3, [], Some(promoted[0])) }
        _4 = _19;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_2.0: &chan);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_2.1: &chan);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <chan as PartialEq>::eq(move _9, move _10) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a chan, &'b chan) -> bool {<chan as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<chan, chan>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a chan, &'b chan, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<chan, chan>}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/empty-tag.rs:17:2: 17:2
    }
}

promoted[0] in wrapper3: &chan = {
    let mut _0: &chan;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: chan;                    // in scope 0 at ui/struct-enums/empty-tag.rs:16:19: 16:31

    bb0: {
        _1 = chan::chan_t;               // scope 0 at ui/struct-enums/empty-tag.rs:16:19: 16:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/empty-tag.rs:19:15: 19:15
    let _1: [closure@ui/struct-enums/empty-tag.rs:20:20: 20:22]; // in scope 0 at ui/struct-enums/empty-tag.rs:20:9: 20:16
    let _2: ();                          // in scope 0 at ui/struct-enums/empty-tag.rs:21:5: 21:14
    let mut _3: &[closure@ui/struct-enums/empty-tag.rs:20:20: 20:22]; // in scope 0 at ui/struct-enums/empty-tag.rs:21:5: 21:12
    let mut _4: ();                      // in scope 0 at ui/struct-enums/empty-tag.rs:21:5: 21:14
    scope 1 {
        debug wrapped => _1;             // in scope 1 at ui/struct-enums/empty-tag.rs:20:9: 20:16
    }

    bb0: {
        _3 = &_1;                        // scope 1 at ui/struct-enums/empty-tag.rs:21:5: 21:12
        _2 = <[closure@ui/struct-enums/empty-tag.rs:20:20: 20:22] as Fn<()>>::call(move _3, move _4) -> bb1; // scope 1 at ui/struct-enums/empty-tag.rs:21:5: 21:14
                                         // mir::Constant
                                         // + span: ui/struct-enums/empty-tag.rs:21:5: 21:12
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/struct-enums/empty-tag.rs:20:20: 20:22], ()) -> <[closure@ui/struct-enums/empty-tag.rs:20:20: 20:22] as FnOnce<()>>::Output {<[closure@ui/struct-enums/empty-tag.rs:20:20: 20:22] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/empty-tag.rs:22:2: 22:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/struct-enums/empty-tag.rs:20:20: 20:22]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/empty-tag.rs:20:22: 20:22
    let mut _2: chan;                    // in scope 0 at ui/struct-enums/empty-tag.rs:20:31: 20:43

    bb0: {
        _0 = wrapper3(move _2) -> bb1;   // scope 0 at ui/struct-enums/empty-tag.rs:20:22: 20:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/empty-tag.rs:20:22: 20:30
                                         // + literal: Const { ty: fn(chan) {wrapper3}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/empty-tag.rs:20:44: 20:44
    }
}
