// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn kitty::<impl at ui/struct-enums/class-exports.rs:16:5: 16:13>::get_name(_1: &cat) -> String {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-exports.rs:17:25: 17:30
    let mut _0: std::string::String;     // return place in scope 0 at ui/struct-enums/class-exports.rs:17:35: 17:41
    let mut _2: &std::string::String;    // in scope 0 at ui/struct-enums/class-exports.rs:17:44: 17:61

    bb0: {
        _2 = &((*_1).1: std::string::String); // scope 0 at ui/struct-enums/class-exports.rs:17:44: 17:61
        _0 = <String as Clone>::clone(move _2) -> bb1; // scope 0 at ui/struct-enums/class-exports.rs:17:44: 17:61
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-exports.rs:17:54: 17:59
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/class-exports.rs:17:63: 17:63
    }
}

fn cat(_1: String) -> cat {
    debug in_name => _1;                 // in scope 0 at ui/struct-enums/class-exports.rs:20:16: 20:23
    let mut _0: kitty::cat;              // return place in scope 0 at ui/struct-enums/class-exports.rs:20:36: 20:39
    let mut _2: std::string::String;     // in scope 0 at ui/struct-enums/class-exports.rs:22:19: 22:26

    bb0: {
        _2 = move _1;                    // scope 0 at ui/struct-enums/class-exports.rs:22:19: 22:26
        _0 = cat { meows: const 0_usize, name: move _2 }; // scope 0 at ui/struct-enums/class-exports.rs:21:9: 24:10
        return;                          // scope 0 at ui/struct-enums/class-exports.rs:25:6: 25:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-exports.rs:28:15: 28:15
    let mut _1: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at ui/struct-enums/class-exports.rs:29:14: 29:53
    let mut _4: &kitty::cat;             // in scope 0 at ui/struct-enums/class-exports.rs:29:14: 29:53
    let _5: kitty::cat;                  // in scope 0 at ui/struct-enums/class-exports.rs:29:14: 29:42
    let mut _6: std::string::String;     // in scope 0 at ui/struct-enums/class-exports.rs:29:18: 29:41
    let mut _7: &str;                    // in scope 0 at ui/struct-enums/class-exports.rs:29:18: 29:41
    let _8: &str;                        // in scope 0 at ui/struct-enums/class-exports.rs:29:18: 29:29
    let mut _9: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _10: std::string::String;        // in scope 0 at ui/struct-enums/class-exports.rs:30:18: 30:41
    let mut _11: &str;                   // in scope 0 at ui/struct-enums/class-exports.rs:30:18: 30:41
    let _12: &str;                       // in scope 0 at ui/struct-enums/class-exports.rs:30:18: 30:29
    let _13: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _14: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _13;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _14;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _19: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _19;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _8 = const "Spreckles";          // scope 0 at ui/struct-enums/class-exports.rs:29:18: 29:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-exports.rs:29:18: 29:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at ui/struct-enums/class-exports.rs:29:18: 29:41
        _6 = <str as ToString>::to_string(move _7) -> bb1; // scope 0 at ui/struct-enums/class-exports.rs:29:18: 29:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-exports.rs:29:30: 29:39
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = cat(move _6) -> bb2;        // scope 0 at ui/struct-enums/class-exports.rs:29:14: 29:42
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-exports.rs:29:14: 29:17
                                         // + literal: Const { ty: fn(String) -> cat {cat}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 0 at ui/struct-enums/class-exports.rs:29:14: 29:53
        _3 = cat::get_name(move _4) -> [return: bb3, unwind: bb13]; // scope 0 at ui/struct-enums/class-exports.rs:29:14: 29:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-exports.rs:29:43: 29:51
                                         // + literal: Const { ty: for<'a> fn(&'a cat) -> String {cat::get_name}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _12 = const "Spreckles";         // scope 0 at ui/struct-enums/class-exports.rs:30:18: 30:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-exports.rs:30:18: 30:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/struct-enums/class-exports.rs:30:18: 30:41
        _10 = <str as ToString>::to_string(move _11) -> [return: bb4, unwind: bb12]; // scope 0 at ui/struct-enums/class-exports.rs:30:18: 30:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-exports.rs:30:30: 30:39
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _9);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_1.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = _13;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = _14;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = <String as PartialEq>::eq(move _17, move _18) -> [return: bb5, unwind: bb11]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = Not(move _16);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb7, otherwise: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _19 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<String, String>(move _21, move _22, move _24, move _26) -> bb11; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_10) -> [return: bb8, unwind: bb12]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        drop(_3) -> [return: bb9, unwind: bb13]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        drop(_5) -> bb10;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb10: {
        return;                          // scope 0 at ui/struct-enums/class-exports.rs:31:2: 31:2
    }

    bb11 (cleanup): {
        drop(_10) -> bb12;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb12 (cleanup): {
        drop(_3) -> bb13;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13 (cleanup): {
        drop(_5) -> bb14;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/class-exports.rs:28:1: 31:2
    }
}
