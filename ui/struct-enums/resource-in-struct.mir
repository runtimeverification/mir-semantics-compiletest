// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/resource-in-struct.rs:16:1: 16:32>::drop(_1: &mut close_res<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/resource-in-struct.rs:17:13: 17:22
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/resource-in-struct.rs:17:24: 17:24
    let _2: ();                          // in scope 0 at ui/struct-enums/resource-in-struct.rs:18:9: 18:26
    let mut _3: &std::cell::Cell<bool>;  // in scope 0 at ui/struct-enums/resource-in-struct.rs:18:9: 18:26
    let mut _4: &std::cell::Cell<bool>;  // in scope 0 at ui/struct-enums/resource-in-struct.rs:17:13: 17:22

    bb0: {
        _4 = deref_copy ((*_1).0: &std::cell::Cell<bool>); // scope 0 at ui/struct-enums/resource-in-struct.rs:18:9: 18:26
        _3 = _4;                         // scope 0 at ui/struct-enums/resource-in-struct.rs:18:9: 18:26
        _2 = Cell::<bool>::set(move _3, const false) -> bb1; // scope 0 at ui/struct-enums/resource-in-struct.rs:18:9: 18:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/resource-in-struct.rs:18:16: 18:19
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>, bool) {Cell::<bool>::set}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/resource-in-struct.rs:19:6: 19:6
    }
}

fn close_res(_1: &Cell<bool>) -> close_res<'_> {
    debug i => _1;                       // in scope 0 at ui/struct-enums/resource-in-struct.rs:22:14: 22:15
    let mut _0: close_res<'_>;           // return place in scope 0 at ui/struct-enums/resource-in-struct.rs:22:30: 22:39
    let mut _2: &std::cell::Cell<bool>;  // in scope 0 at ui/struct-enums/resource-in-struct.rs:24:12: 24:13

    bb0: {
        _2 = _1;                         // scope 0 at ui/struct-enums/resource-in-struct.rs:24:12: 24:13
        _0 = close_res::<'_> { i: move _2 }; // scope 0 at ui/struct-enums/resource-in-struct.rs:23:5: 25:6
        return;                          // scope 0 at ui/struct-enums/resource-in-struct.rs:26:2: 26:2
    }
}

fn sink(_1: option<close_res<'_>>) -> () {
    debug _res => _1;                    // in scope 0 at ui/struct-enums/resource-in-struct.rs:30:9: 30:13
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/resource-in-struct.rs:30:34: 30:34

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/struct-enums/resource-in-struct.rs:30:36: 30:37
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/resource-in-struct.rs:30:37: 30:37
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/resource-in-struct.rs:32:15: 32:15
    let _1: &std::cell::Cell<bool>;      // in scope 0 at ui/struct-enums/resource-in-struct.rs:33:9: 33:10
    let _2: std::cell::Cell<bool>;       // in scope 0 at ui/struct-enums/resource-in-struct.rs:33:14: 33:29
    let _3: ();                          // in scope 0 at ui/struct-enums/resource-in-struct.rs:34:5: 34:23
    let mut _4: option<close_res<'_>>;   // in scope 0 at ui/struct-enums/resource-in-struct.rs:34:10: 34:22
    let _5: ();                          // in scope 0 at ui/struct-enums/resource-in-struct.rs:35:5: 35:37
    let mut _6: option<close_res<'_>>;   // in scope 0 at ui/struct-enums/resource-in-struct.rs:35:10: 35:36
    let mut _7: close_res<'_>;           // in scope 0 at ui/struct-enums/resource-in-struct.rs:35:23: 35:35
    let mut _8: &std::cell::Cell<bool>;  // in scope 0 at ui/struct-enums/resource-in-struct.rs:35:33: 35:34
    let mut _9: bool;                    // in scope 0 at ui/struct-enums/resource-in-struct.rs:36:5: 36:22
    let mut _10: bool;                   // in scope 0 at ui/struct-enums/resource-in-struct.rs:36:13: 36:21
    let mut _11: bool;                   // in scope 0 at ui/struct-enums/resource-in-struct.rs:36:14: 36:21
    let mut _12: &std::cell::Cell<bool>; // in scope 0 at ui/struct-enums/resource-in-struct.rs:36:14: 36:21
    let mut _13: !;                      // in scope 0 at ui/struct-enums/resource-in-struct.rs:36:5: 36:22
    scope 1 {
        debug c => _1;                   // in scope 1 at ui/struct-enums/resource-in-struct.rs:33:9: 33:10
    }

    bb0: {
        _2 = Cell::<bool>::new(const true) -> bb1; // scope 0 at ui/struct-enums/resource-in-struct.rs:33:14: 33:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/resource-in-struct.rs:33:14: 33:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(bool) -> Cell<bool> {Cell::<bool>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = &_2;                        // scope 0 at ui/struct-enums/resource-in-struct.rs:33:13: 33:29
        _4 = const option::<close_res<'_>>::none; // scope 1 at ui/struct-enums/resource-in-struct.rs:34:10: 34:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/resource-in-struct.rs:34:10: 34:22
                                         // + literal: Const { ty: option<close_res<'_>>, val: Value(Scalar(0x0000000000000000)) }
        _3 = sink(move _4) -> bb2;       // scope 1 at ui/struct-enums/resource-in-struct.rs:34:5: 34:23
                                         // mir::Constant
                                         // + span: ui/struct-enums/resource-in-struct.rs:34:5: 34:9
                                         // + literal: Const { ty: for<'a> fn(option<close_res<'a>>) {sink}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = _1;                         // scope 1 at ui/struct-enums/resource-in-struct.rs:35:33: 35:34
        _7 = close_res(move _8) -> bb3;  // scope 1 at ui/struct-enums/resource-in-struct.rs:35:23: 35:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/resource-in-struct.rs:35:23: 35:32
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>) -> close_res<'a> {close_res}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = option::<close_res<'_>>::some(move _7); // scope 1 at ui/struct-enums/resource-in-struct.rs:35:10: 35:36
        _5 = sink(move _6) -> bb4;       // scope 1 at ui/struct-enums/resource-in-struct.rs:35:5: 35:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/resource-in-struct.rs:35:5: 35:9
                                         // + literal: Const { ty: for<'a> fn(option<close_res<'a>>) {sink}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = _1;                        // scope 1 at ui/struct-enums/resource-in-struct.rs:36:14: 36:21
        _11 = Cell::<bool>::get(move _12) -> bb5; // scope 1 at ui/struct-enums/resource-in-struct.rs:36:14: 36:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/resource-in-struct.rs:36:16: 36:19
                                         // + literal: Const { ty: for<'a> fn(&'a Cell<bool>) -> bool {Cell::<bool>::get}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = Not(move _11);             // scope 1 at ui/struct-enums/resource-in-struct.rs:36:13: 36:21
        _9 = Not(move _10);              // scope 1 at ui/struct-enums/resource-in-struct.rs:36:5: 36:22
        switchInt(move _9) -> [0: bb7, otherwise: bb6]; // scope 1 at ui/struct-enums/resource-in-struct.rs:36:5: 36:22
    }

    bb6: {
        _13 = core::panicking::panic(const "assertion failed: !c.get()"); // scope 1 at ui/struct-enums/resource-in-struct.rs:36:5: 36:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/resource-in-struct.rs:36:5: 36:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        return;                          // scope 0 at ui/struct-enums/resource-in-struct.rs:37:2: 37:2
    }
}

fn option::some(_1: T) -> option<T> {
    let mut _0: option<T>;               // return place in scope 0 at ui/struct-enums/resource-in-struct.rs:28:24: 28:28

    bb0: {
        _0 = option::<T>::some(move _1); // scope 0 at ui/struct-enums/resource-in-struct.rs:28:24: 28:28
        return;                          // scope 0 at ui/struct-enums/resource-in-struct.rs:28:24: 28:28
    }
}

// MIR FOR CTFE
fn option::some(_1: T) -> option<T> {
    let mut _0: option<T>;               // return place in scope 0 at ui/struct-enums/resource-in-struct.rs:28:24: 28:28

    bb0: {
        _0 = option::<T>::some(move _1); // scope 0 at ui/struct-enums/resource-in-struct.rs:28:24: 28:28
        return;                          // scope 0 at ui/struct-enums/resource-in-struct.rs:28:24: 28:28
    }
}
