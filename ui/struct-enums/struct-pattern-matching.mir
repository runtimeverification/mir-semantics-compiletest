// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/struct-pattern-matching.rs:9:15: 9:15
    let _1: Foo;                         // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:10:9: 10:10
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
    let mut _7: &[&str; 3];              // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
    let _8: &[&str; 3];                  // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:55: 12:56
    let mut _14: &isize;                 // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:55: 12:56
    let _15: &isize;                     // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:55: 12:56
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:58: 12:59
    let mut _17: &isize;                 // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:58: 12:59
    let _18: &isize;                     // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:58: 12:59
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/struct-enums/struct-pattern-matching.rs:10:9: 10:10
        let _2: isize;                   // in scope 1 at ui/struct-enums/struct-pattern-matching.rs:12:18: 12:19
        let _3: isize;                   // in scope 1 at ui/struct-enums/struct-pattern-matching.rs:12:24: 12:25
        scope 2 {
            debug x => _2;               // in scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:18: 12:19
            debug y => _3;               // in scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:24: 12:25
            let mut _19: &[&str; 3];     // in scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
        }
    }

    bb0: {
        _1 = Foo { x: const 1_isize, y: const 2_isize }; // scope 0 at ui/struct-enums/struct-pattern-matching.rs:10:13: 10:31
        _2 = (_1.0: isize);              // scope 1 at ui/struct-enums/struct-pattern-matching.rs:12:18: 12:19
        _3 = (_1.1: isize);              // scope 1 at ui/struct-enums/struct-pattern-matching.rs:12:24: 12:25
        _19 = const _;                   // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _8 = _19;                        // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
        _7 = _8;                         // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
        _15 = &_2;                       // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:55: 12:56
        _14 = _15;                       // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:55: 12:56
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _14) -> bb1; // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:55: 12:56
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-pattern-matching.rs:12:55: 12:56
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb1: {
        _18 = &_3;                       // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:58: 12:59
        _17 = _18;                       // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:58: 12:59
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _17) -> bb2; // scope 2 at ui/struct-enums/struct-pattern-matching.rs:12:58: 12:59
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-pattern-matching.rs:12:58: 12:59
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13, move _16];      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb3; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _print(move _5) -> bb4;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/struct-enums/struct-pattern-matching.rs:18:2: 18:2
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
    let mut _1: [&str; 3];               // in scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53

    bb0: {
        _1 = [const "yes, ", const ", ", const "\n"]; // scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
        return;                          // scope 0 at ui/struct-enums/struct-pattern-matching.rs:12:40: 12:53
    }
}
