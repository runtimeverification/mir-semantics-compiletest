// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:10: 2:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:10: 2:19
    debug other => _2;                   // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:10: 2:19
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:10: 2:19
    let mut _3: isize;                   // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17

    bb0: {
        _3 = ((*_1).0: isize);           // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
        _4 = ((*_2).0: isize);           // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
        _0 = Eq(move _3, move _4);       // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
        return;                          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:19: 2:19
    }
}

fn <impl at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
    debug f => _2;                       // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
    let _5: &str;                        // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
    let mut _7: &&isize;                 // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
    let _8: &&isize;                     // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
    let _9: &isize;                      // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
        _5 = const "Foo";                // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
        _9 = &((*_1).0: isize);          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
        _8 = &_9;                        // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
        _7 = _8;                         // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:12: 3:17
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-constructor-pointer.rs:2:21: 2:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:2:26: 2:26
    }
}

fn <impl at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:10: 4:19>::eq(_1: &Bar, _2: &Bar) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:10: 4:19
    debug other => _2;                   // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:10: 4:19
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:10: 4:19
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
    let mut _6: bool;                    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
    let mut _7: isize;                   // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
    let mut _8: isize;                   // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24

    bb0: {
        _4 = ((*_1).0: isize);           // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
        _5 = ((*_2).0: isize);           // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
        _3 = Eq(move _4, move _5);       // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
        goto -> bb3;                     // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
    }

    bb2: {
        _7 = ((*_1).1: isize);           // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
        _8 = ((*_2).1: isize);           // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
        _6 = Eq(move _7, move _8);       // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
        _0 = move _6;                    // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
        goto -> bb3;                     // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:19: 4:19
    }
}

fn <impl at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26>::fmt(_1: &Bar, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
    debug f => _2;                       // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
    let _5: &str;                        // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
    let mut _7: &isize;                  // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
    let _8: &isize;                      // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
    let mut _10: &&isize;                // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
    let _11: &&isize;                    // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
    let _12: &isize;                     // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
        _5 = const "Bar";                // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
        _8 = &((*_1).0: isize);          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
        _7 = _8;                         // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:12: 5:17
        _12 = &((*_1).1: isize);         // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
        _11 = &_12;                      // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
        _10 = _11;                       // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:19: 5:24
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _3, move _4, move _6, move _9) -> bb1; // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-constructor-pointer.rs:4:21: 4:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:4:26: 4:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:7:15: 7:15
    let _1: fn(isize) -> Foo;            // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:8:9: 8:10
    let mut _3: (&Foo, &Foo);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: Foo;                         // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:10:16: 10:21
    let mut _6: fn(isize) -> Foo;        // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:10:16: 10:17
    let mut _7: &Foo;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &Foo;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &Foo;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&Bar, &Bar);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: Bar;                        // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:11:16: 11:23
    let mut _25: fn(isize, isize) -> Bar; // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:11:16: 11:17
    let mut _26: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &Bar;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &Bar;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/struct-enums/tuple-struct-constructor-pointer.rs:8:9: 8:10
        let _2: fn(isize, isize) -> Bar; // in scope 1 at ui/struct-enums/tuple-struct-constructor-pointer.rs:9:9: 9:10
        scope 2 {
            debug g => _2;               // in scope 2 at ui/struct-enums/tuple-struct-constructor-pointer.rs:9:9: 9:10
            let _8: &Foo;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _9: &Foo;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _27: &Bar;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _28: &Bar;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _41: &Bar;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _42: &Foo;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _8;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _9;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _14: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _14;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _27;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _28;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _33: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _33;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Foo as fn(isize) -> Foo (Pointer(ReifyFnPointer)); // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:8:31: 8:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-constructor-pointer.rs:8:31: 8:34
                                         // + literal: Const { ty: fn(isize) -> Foo {Foo}, val: Value(<ZST>) }
        _2 = Bar as fn(isize, isize) -> Bar (Pointer(ReifyFnPointer)); // scope 1 at ui/struct-enums/tuple-struct-constructor-pointer.rs:9:38: 9:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-constructor-pointer.rs:9:38: 9:41
                                         // + literal: Const { ty: fn(isize, isize) -> Bar {Bar}, val: Value(<ZST>) }
        _6 = _1;                         // scope 2 at ui/struct-enums/tuple-struct-constructor-pointer.rs:10:16: 10:17
        _5 = move _6(const 42_isize) -> bb1; // scope 2 at ui/struct-enums/tuple-struct-constructor-pointer.rs:10:16: 10:21
    }

    bb1: {
        _4 = &_5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _42 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Foo, val: Unevaluated(main, [], Some(promoted[1])) }
        _7 = _42;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _7);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_3.0: &Foo);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_3.1: &Foo);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = _9;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = <Foo as PartialEq>::eq(move _12, move _13) -> bb2; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Foo, &'b Foo) -> bool {<Foo as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = Not(move _11);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _14 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<Foo, Foo>(move _16, move _17, move _19, move _21); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Foo, &'b Foo, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Foo, Foo>}, val: Value(<ZST>) }
    }

    bb4: {
        _25 = _2;                        // scope 2 at ui/struct-enums/tuple-struct-constructor-pointer.rs:11:16: 11:17
        _24 = move _25(const 4_isize, const 7_isize) -> bb5; // scope 2 at ui/struct-enums/tuple-struct-constructor-pointer.rs:11:16: 11:23
    }

    bb5: {
        _23 = &_24;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _41 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Bar, val: Unevaluated(main, [], Some(promoted[0])) }
        _26 = _41;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _26);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_22.0: &Bar);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_22.1: &Bar);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = <Bar as PartialEq>::eq(move _31, move _32) -> bb6; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Bar, &'b Bar) -> bool {<Bar as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _29 = Not(move _30);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb8, otherwise: bb7]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _33 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<Bar, Bar>(move _35, move _36, move _38, move _40); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Bar, &'b Bar, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Bar, Bar>}, val: Value(<ZST>) }
    }

    bb8: {
        return;                          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:12:2: 12:2
    }
}

promoted[0] in main: &Bar = {
    let mut _0: &Bar;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Bar;                     // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:11:25: 11:34

    bb0: {
        _1 = Bar(const 4_isize, const 7_isize); // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:11:25: 11:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &Foo = {
    let mut _0: &Foo;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: Foo;                     // in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:10:23: 10:30

    bb0: {
        _1 = Foo(const 42_isize);        // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:10:23: 10:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn Foo(_1: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:1: 3:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:1: 3:11
        return;                          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:1: 3:11
    }
}

// MIR FOR CTFE
fn Foo(_1: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:1: 3:11

    bb0: {
        _0 = Foo(move _1);               // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:1: 3:11
        return;                          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:3:1: 3:11
    }
}

fn Bar(_1: isize, _2: isize) -> Bar {
    let mut _0: Bar;                     // return place in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:1: 5:11

    bb0: {
        _0 = Bar(move _1, move _2);      // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:1: 5:11
        return;                          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:1: 5:11
    }
}

// MIR FOR CTFE
fn Bar(_1: isize, _2: isize) -> Bar {
    let mut _0: Bar;                     // return place in scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:1: 5:11

    bb0: {
        _0 = Bar(move _1, move _2);      // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:1: 5:11
        return;                          // scope 0 at ui/struct-enums/tuple-struct-constructor-pointer.rs:5:1: 5:11
    }
}
