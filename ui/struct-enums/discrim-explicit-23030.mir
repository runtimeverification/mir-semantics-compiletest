// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f_i8() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:8:11: 8:11
    let _1: (f_i8::A, f_i8::A, f_i8::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:18:9: 18:11
    let mut _2: f_i8::A;                 // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:18:15: 18:20
    let mut _3: f_i8::A;                 // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:18:22: 18:28
    let mut _4: f_i8::A;                 // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:18:30: 18:37
    let mut _6: i8;                      // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:19:13: 19:38
    let mut _7: (&i8, &i8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &i8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &i8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: i8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: i8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &i8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &i8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &i8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &i8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:18:9: 18:11
        let _5: i8;                      // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:19:9: 19:10
        scope 2 {
            debug z => _5;               // in scope 2 at ui/struct-enums/discrim-explicit-23030.rs:19:9: 19:10
            let _10: &i8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &i8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _24: &i8;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = const f_i8::A::Ok;          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:18:15: 18:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:18:15: 18:20
                                         // + literal: Const { ty: f_i8::A, val: Value(Scalar(0x7e)) }
        _3 = const f_i8::A::Ok2;         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:18:22: 18:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:18:22: 18:28
                                         // + literal: Const { ty: f_i8::A, val: Value(Scalar(0x7f)) }
        _4 = const f_i8::A::OhNo;        // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:18:30: 18:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:18:30: 18:37
                                         // + literal: Const { ty: f_i8::A, val: Value(Scalar(0x80)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:18:14: 18:38
        _6 = const 0_i8;                 // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:19:13: 19:44
        _5 = move _6 as i8 (IntToInt);   // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:19:13: 19:44
        _8 = &_5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i8, val: Unevaluated(f_i8, [], Some(promoted[0])) }
        _9 = _24;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &i8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &i8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 0_i8;                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<i8, i8>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i8, &'b i8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i8, i8>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:21:2: 21:2
    }
}

promoted[0] in f_i8: &i8 = {
    let mut _0: &i8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i8;                      // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:20:19: 20:20

    bb0: {
        _1 = const 0_i8;                 // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:20:19: 20:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

f_i8::A::Ok::{constant#0}: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:11:14: 11:25
    let mut _1: (i8, bool);              // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:11:14: 11:25

    bb0: {
        _1 = CheckedSub(const _, const 1_i8); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:11:14: 11:25
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_i8) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:11:14: 11:25
    }

    bb1: {
        _0 = move (_1.0: i8);            // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:11:14: 11:25
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:11:14: 11:25
    }
}

f_i8::A::OhNo::{constant#0}: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:13:16: 13:23

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:13:16: 13:23
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:13:16: 13:23
    }
}

f_i8::A::NotTheEnd::{constant#0}: i8 = {
    let mut _0: i8;                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:14:21: 14:23

    bb0: {
        _0 = const -1_i8;                // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:14:21: 14:23
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:14:21: 14:23
    }
}

fn f_u8() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:23:11: 23:11
    let _1: (f_u8::A, f_u8::A, f_u8::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:31:9: 31:11
    let mut _2: f_u8::A;                 // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:31:15: 31:20
    let mut _3: f_u8::A;                 // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:31:22: 31:28
    let mut _4: f_u8::A;                 // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:31:30: 31:37
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:31:9: 31:11
    }

    bb0: {
        _2 = const f_u8::A::Ok;          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:31:15: 31:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:31:15: 31:20
                                         // + literal: Const { ty: f_u8::A, val: Value(Scalar(0xfe)) }
        _3 = const f_u8::A::Ok2;         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:31:22: 31:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:31:22: 31:28
                                         // + literal: Const { ty: f_u8::A, val: Value(Scalar(0xff)) }
        _4 = const f_u8::A::OhNo;        // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:31:30: 31:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:31:30: 31:37
                                         // + literal: Const { ty: f_u8::A, val: Value(Scalar(0x00)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:31:14: 31:38
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:32:2: 32:2
    }
}

f_u8::A::Ok::{constant#0}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:26:14: 26:25
    let mut _1: (u8, bool);              // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:26:14: 26:25

    bb0: {
        _1 = CheckedSub(const _, const 1_u8); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:26:14: 26:25
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u8) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:26:14: 26:25
    }

    bb1: {
        _0 = move (_1.0: u8);            // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:26:14: 26:25
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:26:14: 26:25
    }
}

f_u8::A::OhNo::{constant#0}: u8 = {
    let mut _0: u8;                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:28:16: 28:23

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:28:16: 28:23
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:28:16: 28:23
    }
}

fn f_i16() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:34:12: 34:12
    let _1: (f_i16::A, f_i16::A, f_i16::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:44:9: 44:11
    let mut _2: f_i16::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:44:15: 44:20
    let mut _3: f_i16::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:44:22: 44:28
    let mut _4: f_i16::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:44:30: 44:37
    let mut _6: i16;                     // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:45:13: 45:38
    let mut _7: (&i16, &i16);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &i16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &i16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: i16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: i16;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &i16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &i16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &i16;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &i16;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:44:9: 44:11
        let _5: i16;                     // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:45:9: 45:10
        scope 2 {
            debug z => _5;               // in scope 2 at ui/struct-enums/discrim-explicit-23030.rs:45:9: 45:10
            let _10: &i16;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &i16;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _24: &i16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = const f_i16::A::Ok;         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:44:15: 44:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:44:15: 44:20
                                         // + literal: Const { ty: f_i16::A, val: Value(Scalar(0x7ffe)) }
        _3 = const f_i16::A::Ok2;        // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:44:22: 44:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:44:22: 44:28
                                         // + literal: Const { ty: f_i16::A, val: Value(Scalar(0x7fff)) }
        _4 = const f_i16::A::OhNo;       // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:44:30: 44:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:44:30: 44:37
                                         // + literal: Const { ty: f_i16::A, val: Value(Scalar(0x8000)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:44:14: 44:38
        _6 = const 0_i16;                // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:45:13: 45:45
        _5 = move _6 as i16 (IntToInt);  // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:45:13: 45:45
        _8 = &_5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i16, val: Unevaluated(f_i16, [], Some(promoted[0])) }
        _9 = _24;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &i16);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &i16);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 0_i16;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<i16, i16>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i16, &'b i16, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i16, i16>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:47:2: 47:2
    }
}

promoted[0] in f_i16: &i16 = {
    let mut _0: &i16;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i16;                     // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:46:19: 46:20

    bb0: {
        _1 = const 0_i16;                // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:46:19: 46:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

f_i16::A::Ok::{constant#0}: i16 = {
    let mut _0: i16;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:37:14: 37:26
    let mut _1: (i16, bool);             // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:37:14: 37:26

    bb0: {
        _1 = CheckedSub(const _, const 1_i16); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:37:14: 37:26
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_i16) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:37:14: 37:26
    }

    bb1: {
        _0 = move (_1.0: i16);           // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:37:14: 37:26
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:37:14: 37:26
    }
}

f_i16::A::OhNo::{constant#0}: i16 = {
    let mut _0: i16;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:39:16: 39:24

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:39:16: 39:24
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:39:16: 39:24
    }
}

f_i16::A::NotTheEnd::{constant#0}: i16 = {
    let mut _0: i16;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:40:21: 40:23

    bb0: {
        _0 = const -1_i16;               // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:40:21: 40:23
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:40:21: 40:23
    }
}

fn f_u16() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:49:12: 49:12
    let _1: (f_u16::A, f_u16::A, f_u16::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:57:9: 57:11
    let mut _2: f_u16::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:57:15: 57:20
    let mut _3: f_u16::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:57:22: 57:28
    let mut _4: f_u16::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:57:30: 57:37
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:57:9: 57:11
    }

    bb0: {
        _2 = const f_u16::A::Ok;         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:57:15: 57:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:57:15: 57:20
                                         // + literal: Const { ty: f_u16::A, val: Value(Scalar(0xfffe)) }
        _3 = const f_u16::A::Ok2;        // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:57:22: 57:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:57:22: 57:28
                                         // + literal: Const { ty: f_u16::A, val: Value(Scalar(0xffff)) }
        _4 = const f_u16::A::OhNo;       // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:57:30: 57:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:57:30: 57:37
                                         // + literal: Const { ty: f_u16::A, val: Value(Scalar(0x0000)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:57:14: 57:38
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:58:2: 58:2
    }
}

f_u16::A::Ok::{constant#0}: u16 = {
    let mut _0: u16;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:52:14: 52:26
    let mut _1: (u16, bool);             // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:52:14: 52:26

    bb0: {
        _1 = CheckedSub(const _, const 1_u16); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:52:14: 52:26
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u16) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:52:14: 52:26
    }

    bb1: {
        _0 = move (_1.0: u16);           // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:52:14: 52:26
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:52:14: 52:26
    }
}

f_u16::A::OhNo::{constant#0}: u16 = {
    let mut _0: u16;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:54:16: 54:24

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:54:16: 54:24
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:54:16: 54:24
    }
}

fn f_i32() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:60:12: 60:12
    let _1: (f_i32::A, f_i32::A, f_i32::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:70:9: 70:11
    let mut _2: f_i32::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:70:15: 70:20
    let mut _3: f_i32::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:70:22: 70:28
    let mut _4: f_i32::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:70:30: 70:37
    let mut _6: i32;                     // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:71:13: 71:38
    let mut _7: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:70:9: 70:11
        let _5: i32;                     // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:71:9: 71:10
        scope 2 {
            debug z => _5;               // in scope 2 at ui/struct-enums/discrim-explicit-23030.rs:71:9: 71:10
            let _10: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &i32;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _24: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = const f_i32::A::Ok;         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:70:15: 70:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:70:15: 70:20
                                         // + literal: Const { ty: f_i32::A, val: Value(Scalar(0x7ffffffe)) }
        _3 = const f_i32::A::Ok2;        // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:70:22: 70:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:70:22: 70:28
                                         // + literal: Const { ty: f_i32::A, val: Value(Scalar(0x7fffffff)) }
        _4 = const f_i32::A::OhNo;       // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:70:30: 70:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:70:30: 70:37
                                         // + literal: Const { ty: f_i32::A, val: Value(Scalar(0x80000000)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:70:14: 70:38
        _6 = const 0_i32;                // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:71:13: 71:45
        _5 = move _6 as i32 (IntToInt);  // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:71:13: 71:45
        _8 = &_5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(f_i32, [], Some(promoted[0])) }
        _9 = _24;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &i32);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 0_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<i32, i32>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:73:2: 73:2
    }
}

promoted[0] in f_i32: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:72:19: 72:20

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:72:19: 72:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

f_i32::A::Ok::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:63:14: 63:26
    let mut _1: (i32, bool);             // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:63:14: 63:26

    bb0: {
        _1 = CheckedSub(const _, const 1_i32); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:63:14: 63:26
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_i32) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:63:14: 63:26
    }

    bb1: {
        _0 = move (_1.0: i32);           // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:63:14: 63:26
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:63:14: 63:26
    }
}

f_i32::A::OhNo::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:65:16: 65:24

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:65:16: 65:24
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:65:16: 65:24
    }
}

f_i32::A::NotTheEnd::{constant#0}: i32 = {
    let mut _0: i32;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:66:21: 66:23

    bb0: {
        _0 = const -1_i32;               // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:66:21: 66:23
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:66:21: 66:23
    }
}

fn f_u32() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:75:12: 75:12
    let _1: (f_u32::A, f_u32::A, f_u32::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:83:9: 83:11
    let mut _2: f_u32::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:83:15: 83:20
    let mut _3: f_u32::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:83:22: 83:28
    let mut _4: f_u32::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:83:30: 83:37
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:83:9: 83:11
    }

    bb0: {
        _2 = const f_u32::A::Ok;         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:83:15: 83:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:83:15: 83:20
                                         // + literal: Const { ty: f_u32::A, val: Value(Scalar(0xfffffffe)) }
        _3 = const f_u32::A::Ok2;        // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:83:22: 83:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:83:22: 83:28
                                         // + literal: Const { ty: f_u32::A, val: Value(Scalar(0xffffffff)) }
        _4 = const f_u32::A::OhNo;       // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:83:30: 83:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:83:30: 83:37
                                         // + literal: Const { ty: f_u32::A, val: Value(Scalar(0x00000000)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:83:14: 83:38
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:84:2: 84:2
    }
}

f_u32::A::Ok::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:78:14: 78:26
    let mut _1: (u32, bool);             // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:78:14: 78:26

    bb0: {
        _1 = CheckedSub(const _, const 1_u32); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:78:14: 78:26
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u32) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:78:14: 78:26
    }

    bb1: {
        _0 = move (_1.0: u32);           // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:78:14: 78:26
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:78:14: 78:26
    }
}

f_u32::A::OhNo::{constant#0}: u32 = {
    let mut _0: u32;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:80:16: 80:24

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:80:16: 80:24
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:80:16: 80:24
    }
}

fn f_i64() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:86:12: 86:12
    let _1: (f_i64::A, f_i64::A, f_i64::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:96:9: 96:11
    let mut _2: f_i64::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:96:15: 96:20
    let mut _3: f_i64::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:96:22: 96:28
    let mut _4: f_i64::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:96:30: 96:37
    let mut _6: i64;                     // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:97:13: 97:38
    let mut _7: (&i64, &i64);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &i64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &i64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: i64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: i64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &i64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &i64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &i64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &i64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:96:9: 96:11
        let _5: i64;                     // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:97:9: 97:10
        scope 2 {
            debug z => _5;               // in scope 2 at ui/struct-enums/discrim-explicit-23030.rs:97:9: 97:10
            let _10: &i64;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &i64;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _24: &i64;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = const f_i64::A::Ok;         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:96:15: 96:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:96:15: 96:20
                                         // + literal: Const { ty: f_i64::A, val: Value(Scalar(0x7ffffffffffffffe)) }
        _3 = const f_i64::A::Ok2;        // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:96:22: 96:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:96:22: 96:28
                                         // + literal: Const { ty: f_i64::A, val: Value(Scalar(0x7fffffffffffffff)) }
        _4 = const f_i64::A::OhNo;       // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:96:30: 96:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:96:30: 96:37
                                         // + literal: Const { ty: f_i64::A, val: Value(Scalar(0x8000000000000000)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:96:14: 96:38
        _6 = const 0_i64;                // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:97:13: 97:45
        _5 = move _6 as i64 (IntToInt);  // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:97:13: 97:45
        _8 = &_5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i64, val: Unevaluated(f_i64, [], Some(promoted[0])) }
        _9 = _24;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &i64);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &i64);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 0_i64;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<i64, i64>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i64, &'b i64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i64, i64>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:99:2: 99:2
    }
}

promoted[0] in f_i64: &i64 = {
    let mut _0: &i64;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i64;                     // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:98:19: 98:20

    bb0: {
        _1 = const 0_i64;                // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:98:19: 98:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

f_i64::A::Ok::{constant#0}: i64 = {
    let mut _0: i64;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:89:14: 89:26
    let mut _1: (i64, bool);             // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:89:14: 89:26

    bb0: {
        _1 = CheckedSub(const _, const 1_i64); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:89:14: 89:26
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_i64) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:89:14: 89:26
    }

    bb1: {
        _0 = move (_1.0: i64);           // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:89:14: 89:26
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:89:14: 89:26
    }
}

f_i64::A::OhNo::{constant#0}: i64 = {
    let mut _0: i64;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:91:16: 91:24

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:91:16: 91:24
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:91:16: 91:24
    }
}

f_i64::A::NotTheEnd::{constant#0}: i64 = {
    let mut _0: i64;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:92:21: 92:23

    bb0: {
        _0 = const -1_i64;               // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:92:21: 92:23
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:92:21: 92:23
    }
}

fn f_u64() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:101:12: 101:12
    let _1: (f_u64::A, f_u64::A, f_u64::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:109:9: 109:11
    let mut _2: f_u64::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:109:15: 109:20
    let mut _3: f_u64::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:109:22: 109:28
    let mut _4: f_u64::A;                // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:109:30: 109:37
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:109:9: 109:11
    }

    bb0: {
        _2 = const f_u64::A::Ok;         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:109:15: 109:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:109:15: 109:20
                                         // + literal: Const { ty: f_u64::A, val: Value(Scalar(0xfffffffffffffffe)) }
        _3 = const f_u64::A::Ok2;        // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:109:22: 109:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:109:22: 109:28
                                         // + literal: Const { ty: f_u64::A, val: Value(Scalar(0xffffffffffffffff)) }
        _4 = const f_u64::A::OhNo;       // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:109:30: 109:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:109:30: 109:37
                                         // + literal: Const { ty: f_u64::A, val: Value(Scalar(0x0000000000000000)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:109:14: 109:38
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:110:2: 110:2
    }
}

f_u64::A::Ok::{constant#0}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:104:14: 104:26
    let mut _1: (u64, bool);             // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:104:14: 104:26

    bb0: {
        _1 = CheckedSub(const _, const 1_u64); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:104:14: 104:26
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_u64) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:104:14: 104:26
    }

    bb1: {
        _0 = move (_1.0: u64);           // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:104:14: 104:26
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:104:14: 104:26
    }
}

f_u64::A::OhNo::{constant#0}: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:106:16: 106:24

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:106:16: 106:24
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:106:16: 106:24
    }
}

fn f_isize() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:112:14: 112:14
    let _1: (f_isize::A, f_isize::A, f_isize::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:122:9: 122:11
    let mut _2: f_isize::A;              // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:122:15: 122:20
    let mut _3: f_isize::A;              // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:122:22: 122:28
    let mut _4: f_isize::A;              // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:122:30: 122:37
    let mut _6: isize;                   // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:123:13: 123:38
    let mut _7: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:122:9: 122:11
        let _5: isize;                   // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:123:9: 123:10
        scope 2 {
            debug z => _5;               // in scope 2 at ui/struct-enums/discrim-explicit-23030.rs:123:9: 123:10
            let _10: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _24: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _2 = const f_isize::A::Ok;       // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:122:15: 122:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:122:15: 122:20
                                         // + literal: Const { ty: f_isize::A, val: Value(Scalar(0x7ffffffffffffffe)) }
        _3 = const f_isize::A::Ok2;      // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:122:22: 122:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:122:22: 122:28
                                         // + literal: Const { ty: f_isize::A, val: Value(Scalar(0x7fffffffffffffff)) }
        _4 = const f_isize::A::OhNo;     // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:122:30: 122:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:122:30: 122:37
                                         // + literal: Const { ty: f_isize::A, val: Value(Scalar(0x8000000000000000)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:122:14: 122:38
        _6 = const 0_isize;              // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:123:13: 123:47
        _5 = move _6 as isize (IntToInt); // scope 1 at ui/struct-enums/discrim-explicit-23030.rs:123:13: 123:47
        _8 = &_5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(f_isize, [], Some(promoted[0])) }
        _9 = _24;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 0_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<isize, isize>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:125:2: 125:2
    }
}

promoted[0] in f_isize: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:124:19: 124:20

    bb0: {
        _1 = const 0_isize;              // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:124:19: 124:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

f_isize::A::Ok::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:115:14: 115:28
    let mut _1: (isize, bool);           // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:115:14: 115:28

    bb0: {
        _1 = CheckedSub(const _, const 1_isize); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:115:14: 115:28
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_isize) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:115:14: 115:28
    }

    bb1: {
        _0 = move (_1.0: isize);         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:115:14: 115:28
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:115:14: 115:28
    }
}

f_isize::A::OhNo::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:117:16: 117:26

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:117:16: 117:26
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:117:16: 117:26
    }
}

f_isize::A::NotTheEnd::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:118:21: 118:23

    bb0: {
        _0 = const -1_isize;             // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:118:21: 118:23
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:118:21: 118:23
    }
}

fn f_usize() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:127:14: 127:14
    let _1: (f_usize::A, f_usize::A, f_usize::A); // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:135:9: 135:11
    let mut _2: f_usize::A;              // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:135:15: 135:20
    let mut _3: f_usize::A;              // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:135:22: 135:28
    let mut _4: f_usize::A;              // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:135:30: 135:37
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/struct-enums/discrim-explicit-23030.rs:135:9: 135:11
    }

    bb0: {
        _2 = const f_usize::A::Ok;       // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:135:15: 135:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:135:15: 135:20
                                         // + literal: Const { ty: f_usize::A, val: Value(Scalar(0xfffffffffffffffe)) }
        _3 = const f_usize::A::Ok2;      // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:135:22: 135:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:135:22: 135:28
                                         // + literal: Const { ty: f_usize::A, val: Value(Scalar(0xffffffffffffffff)) }
        _4 = const f_usize::A::OhNo;     // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:135:30: 135:37
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:135:30: 135:37
                                         // + literal: Const { ty: f_usize::A, val: Value(Scalar(0x0000000000000000)) }
        _1 = (move _2, move _3, move _4); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:135:14: 135:38
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:136:2: 136:2
    }
}

f_usize::A::Ok::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:130:14: 130:28
    let mut _1: (usize, bool);           // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:130:14: 130:28

    bb0: {
        _1 = CheckedSub(const _, const 1_usize); // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:130:14: 130:28
        assert(!move (_1.1: bool), "attempt to compute `{} - {}`, which would overflow", const _, const 1_usize) -> bb1; // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:130:14: 130:28
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:130:14: 130:28
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:130:14: 130:28
    }
}

f_usize::A::OhNo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:132:16: 132:26

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:132:16: 132:26
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:132:16: 132:26
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:138:11: 138:11
    let _1: ();                          // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:139:5: 139:11
    let _2: ();                          // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:139:13: 139:19
    let _3: ();                          // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:140:5: 140:12
    let _4: ();                          // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:140:14: 140:21
    let _5: ();                          // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:141:5: 141:12
    let _6: ();                          // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:141:14: 141:21
    let _7: ();                          // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:142:5: 142:12
    let _8: ();                          // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:142:14: 142:21
    let _9: ();                          // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:144:5: 144:14
    let _10: ();                         // in scope 0 at ui/struct-enums/discrim-explicit-23030.rs:144:16: 144:25

    bb0: {
        _1 = f_i8() -> bb1;              // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:139:5: 139:11
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:139:5: 139:9
                                         // + literal: Const { ty: fn() {f_i8}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = f_u8() -> bb2;              // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:139:13: 139:19
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:139:13: 139:17
                                         // + literal: Const { ty: fn() {f_u8}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = f_i16() -> bb3;             // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:140:5: 140:12
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:140:5: 140:10
                                         // + literal: Const { ty: fn() {f_i16}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = f_u16() -> bb4;             // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:140:14: 140:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:140:14: 140:19
                                         // + literal: Const { ty: fn() {f_u16}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = f_i32() -> bb5;             // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:141:5: 141:12
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:141:5: 141:10
                                         // + literal: Const { ty: fn() {f_i32}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = f_u32() -> bb6;             // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:141:14: 141:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:141:14: 141:19
                                         // + literal: Const { ty: fn() {f_u32}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = f_i64() -> bb7;             // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:142:5: 142:12
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:142:5: 142:10
                                         // + literal: Const { ty: fn() {f_i64}, val: Value(<ZST>) }
    }

    bb7: {
        _8 = f_u64() -> bb8;             // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:142:14: 142:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:142:14: 142:19
                                         // + literal: Const { ty: fn() {f_u64}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = f_isize() -> bb9;           // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:144:5: 144:14
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:144:5: 144:12
                                         // + literal: Const { ty: fn() {f_isize}, val: Value(<ZST>) }
    }

    bb9: {
        _10 = f_usize() -> bb10;         // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:144:16: 144:25
                                         // mir::Constant
                                         // + span: ui/struct-enums/discrim-explicit-23030.rs:144:16: 144:23
                                         // + literal: Const { ty: fn() {f_usize}, val: Value(<ZST>) }
    }

    bb10: {
        return;                          // scope 0 at ui/struct-enums/discrim-explicit-23030.rs:145:2: 145:2
    }
}
