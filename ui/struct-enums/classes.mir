// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/classes.rs:12:1: 12:9>::speak(_1: &mut cat) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/classes.rs:13:18: 13:27
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/classes.rs:13:29: 13:29
    let _2: ();                          // in scope 0 at ui/struct-enums/classes.rs:13:31: 13:42
    let mut _3: &mut cat;                // in scope 0 at ui/struct-enums/classes.rs:13:31: 13:42

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/struct-enums/classes.rs:13:31: 13:42
        _2 = cat::meow(move _3) -> bb1;  // scope 0 at ui/struct-enums/classes.rs:13:31: 13:42
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:13:36: 13:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat) {cat::meow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/classes.rs:13:45: 13:45
    }
}

fn <impl at ui/struct-enums/classes.rs:12:1: 12:9>::eat(_1: &mut cat) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/classes.rs:15:16: 15:25
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/classes.rs:15:30: 15:34
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/classes.rs:16:12: 16:31
    let mut _3: isize;                   // in scope 0 at ui/struct-enums/classes.rs:16:12: 16:27
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
    let mut _7: &[&str; 1];              // in scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
    let _8: &[&str; 1];                  // in scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: (isize, bool);          // in scope 0 at ui/struct-enums/classes.rs:18:13: 18:33
    let _13: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str];                // in scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
    let mut _16: &[&str; 1];             // in scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
    let _17: &[&str; 1];                 // in scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _19: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _20: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: &[&str; 1];             // in scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
    let mut _23: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: &[&str; 1];             // in scope 0 at ui/struct-enums/classes.rs:17:22: 17:34

    bb0: {
        _3 = ((*_1).1: isize);           // scope 0 at ui/struct-enums/classes.rs:16:12: 16:27
        _2 = Gt(move _3, const 0_isize); // scope 0 at ui/struct-enums/classes.rs:16:12: 16:31
        switchInt(move _2) -> [0: bb5, otherwise: bb1]; // scope 0 at ui/struct-enums/classes.rs:16:12: 16:31
    }

    bb1: {
        _24 = const _;                   // scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:17:22: 17:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(cat::eat, [], Some(promoted[3])) }
        _8 = _24;                        // scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
        _7 = _8;                         // scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
        _23 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(cat::eat, [], Some(promoted[2])) }
        _11 = _23;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _print(move _5) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = CheckedSub(((*_1).1: isize), const 2_isize); // scope 0 at ui/struct-enums/classes.rs:18:13: 18:33
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).1: isize), const 2_isize) -> bb4; // scope 0 at ui/struct-enums/classes.rs:18:13: 18:33
    }

    bb4: {
        ((*_1).1: isize) = move (_12.0: isize); // scope 0 at ui/struct-enums/classes.rs:18:13: 18:33
        _0 = const true;                 // scope 0 at ui/struct-enums/classes.rs:19:20: 19:24
        goto -> bb8;                     // scope 0 at ui/struct-enums/classes.rs:19:13: 19:24
    }

    bb5: {
        _22 = const _;                   // scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:21:22: 21:35
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(cat::eat, [], Some(promoted[1])) }
        _17 = _22;                       // scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
        _16 = _17;                       // scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
        _15 = move _16 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(cat::eat, [], Some(promoted[0])) }
        _20 = _21;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = _20;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = move _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _print(move _14) -> bb7;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = const false;                // scope 0 at ui/struct-enums/classes.rs:22:20: 22:25
        goto -> bb8;                     // scope 0 at ui/struct-enums/classes.rs:22:13: 22:25
    }

    bb8: {
        return;                          // scope 0 at ui/struct-enums/classes.rs:24:6: 24:6
    }
}

promoted[0] in <impl at ui/struct-enums/classes.rs:12:1: 12:9>::eat: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/struct-enums/classes.rs:12:1: 12:9>::eat: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/classes.rs:21:22: 21:35

    bb0: {
        _1 = [const "Not hungry!\n"];    // scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:21:22: 21:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
        return;                          // scope 0 at ui/struct-enums/classes.rs:21:22: 21:35
    }
}

promoted[2] in <impl at ui/struct-enums/classes.rs:12:1: 12:9>::eat: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[3] in <impl at ui/struct-enums/classes.rs:12:1: 12:9>::eat: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/classes.rs:17:22: 17:34

    bb0: {
        _1 = [const "OM NOM NOM\n"];     // scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:17:22: 17:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
        return;                          // scope 0 at ui/struct-enums/classes.rs:17:22: 17:34
    }
}

fn <impl at ui/struct-enums/classes.rs:27:1: 27:9>::meow(_1: &mut cat) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/classes.rs:28:13: 28:22
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/classes.rs:28:24: 28:24
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
    let mut _5: &[&str; 1];              // in scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
    let _6: &[&str; 1];                  // in scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: (usize, bool);          // in scope 0 at ui/struct-enums/classes.rs:30:9: 30:30
    let mut _11: usize;                  // in scope 0 at ui/struct-enums/classes.rs:31:12: 31:32
    let mut _12: usize;                  // in scope 0 at ui/struct-enums/classes.rs:31:12: 31:22
    let mut _13: (isize, bool);          // in scope 0 at ui/struct-enums/classes.rs:32:13: 32:33
    let mut _14: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str; 1];             // in scope 0 at ui/struct-enums/classes.rs:29:18: 29:24

    bb0: {
        _15 = const _;                   // scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:29:18: 29:24
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(cat::meow, [], Some(promoted[1])) }
        _6 = _15;                        // scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
        _5 = _6;                         // scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
        _14 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(cat::meow, [], Some(promoted[0])) }
        _9 = _14;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = CheckedAdd(((*_1).0: usize), const 1_usize); // scope 0 at ui/struct-enums/classes.rs:30:9: 30:30
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> bb3; // scope 0 at ui/struct-enums/classes.rs:30:9: 30:30
    }

    bb3: {
        ((*_1).0: usize) = move (_10.0: usize); // scope 0 at ui/struct-enums/classes.rs:30:9: 30:30
        _12 = ((*_1).0: usize);          // scope 0 at ui/struct-enums/classes.rs:31:12: 31:22
        _11 = Rem(move _12, const 5_usize); // scope 0 at ui/struct-enums/classes.rs:31:12: 31:32
        switchInt(move _11) -> [0: bb4, otherwise: bb6]; // scope 0 at ui/struct-enums/classes.rs:31:12: 31:43
    }

    bb4: {
        _13 = CheckedAdd(((*_1).1: isize), const 1_isize); // scope 0 at ui/struct-enums/classes.rs:32:13: 32:33
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: isize), const 1_isize) -> bb5; // scope 0 at ui/struct-enums/classes.rs:32:13: 32:33
    }

    bb5: {
        ((*_1).1: isize) = move (_13.0: isize); // scope 0 at ui/struct-enums/classes.rs:32:13: 32:33
        goto -> bb6;                     // scope 0 at ui/struct-enums/classes.rs:31:9: 33:10
    }

    bb6: {
        return;                          // scope 0 at ui/struct-enums/classes.rs:34:6: 34:6
    }
}

promoted[0] in <impl at ui/struct-enums/classes.rs:27:1: 27:9>::meow: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/struct-enums/classes.rs:27:1: 27:9>::meow: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/classes.rs:29:18: 29:24

    bb0: {
        _1 = [const "Meow\n"];           // scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:29:18: 29:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
        return;                          // scope 0 at ui/struct-enums/classes.rs:29:18: 29:24
    }
}

fn cat(_1: usize, _2: isize, _3: String) -> cat {
    debug in_x => _1;                    // in scope 0 at ui/struct-enums/classes.rs:37:8: 37:12
    debug in_y => _2;                    // in scope 0 at ui/struct-enums/classes.rs:37:22: 37:26
    debug in_name => _3;                 // in scope 0 at ui/struct-enums/classes.rs:37:36: 37:43
    let mut _0: cat;                     // return place in scope 0 at ui/struct-enums/classes.rs:37:56: 37:59
    let mut _4: usize;                   // in scope 0 at ui/struct-enums/classes.rs:39:16: 39:20
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/classes.rs:40:21: 40:25
    let mut _6: std::string::String;     // in scope 0 at ui/struct-enums/classes.rs:41:15: 41:22

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/classes.rs:39:16: 39:20
        _5 = _2;                         // scope 0 at ui/struct-enums/classes.rs:40:21: 40:25
        _6 = move _3;                    // scope 0 at ui/struct-enums/classes.rs:41:15: 41:22
        _0 = cat { meows: move _4, how_hungry: move _5, name: move _6 }; // scope 0 at ui/struct-enums/classes.rs:38:5: 42:6
        return;                          // scope 0 at ui/struct-enums/classes.rs:43:2: 43:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/classes.rs:45:15: 45:15
    let mut _1: cat;                     // in scope 0 at ui/struct-enums/classes.rs:46:7: 46:15
    let mut _2: std::string::String;     // in scope 0 at ui/struct-enums/classes.rs:46:34: 46:52
    let mut _3: &str;                    // in scope 0 at ui/struct-enums/classes.rs:46:34: 46:52
    let _4: &str;                        // in scope 0 at ui/struct-enums/classes.rs:46:34: 46:40
    let _5: bool;                        // in scope 0 at ui/struct-enums/classes.rs:47:3: 47:13
    let mut _6: &mut cat;                // in scope 0 at ui/struct-enums/classes.rs:47:3: 47:13
    let mut _7: bool;                    // in scope 0 at ui/struct-enums/classes.rs:48:3: 48:25
    let mut _8: bool;                    // in scope 0 at ui/struct-enums/classes.rs:48:11: 48:24
    let mut _9: bool;                    // in scope 0 at ui/struct-enums/classes.rs:48:13: 48:23
    let mut _10: &mut cat;               // in scope 0 at ui/struct-enums/classes.rs:48:13: 48:23
    let mut _11: !;                      // in scope 0 at ui/struct-enums/classes.rs:48:3: 48:25
    let mut _12: std::ops::Range<usize>; // in scope 0 at ui/struct-enums/classes.rs:49:12: 49:29
    let mut _13: std::ops::Range<usize>; // in scope 0 at ui/struct-enums/classes.rs:49:12: 49:29
    let mut _15: std::option::Option<usize>; // in scope 0 at ui/struct-enums/classes.rs:49:12: 49:29
    let mut _16: &mut std::ops::Range<usize>; // in scope 0 at ui/struct-enums/classes.rs:49:12: 49:29
    let mut _17: &mut std::ops::Range<usize>; // in scope 0 at ui/struct-enums/classes.rs:49:12: 49:29
    let mut _18: isize;                  // in scope 0 at ui/struct-enums/classes.rs:49:3: 49:47
    let _19: ();                         // in scope 0 at ui/struct-enums/classes.rs:49:32: 49:44
    let mut _20: &mut cat;               // in scope 0 at ui/struct-enums/classes.rs:49:32: 49:44
    let mut _21: bool;                   // in scope 0 at ui/struct-enums/classes.rs:50:3: 50:24
    let mut _22: bool;                   // in scope 0 at ui/struct-enums/classes.rs:50:11: 50:23
    let mut _23: &mut cat;               // in scope 0 at ui/struct-enums/classes.rs:50:11: 50:23
    let mut _24: !;                      // in scope 0 at ui/struct-enums/classes.rs:50:3: 50:24
    scope 1 {
        debug nyan => _1;                // in scope 1 at ui/struct-enums/classes.rs:46:7: 46:15
        let mut _14: std::ops::Range<usize>; // in scope 1 at ui/struct-enums/classes.rs:49:12: 49:29
        scope 2 {
            debug iter => _14;           // in scope 2 at ui/struct-enums/classes.rs:49:12: 49:29
        }
    }

    bb0: {
        _4 = const "nyan";               // scope 0 at ui/struct-enums/classes.rs:46:34: 46:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:46:34: 46:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/struct-enums/classes.rs:46:34: 46:52
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/struct-enums/classes.rs:46:34: 46:52
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:46:41: 46:50
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = cat(const 0_usize, const 2_isize, move _2) -> bb2; // scope 0 at ui/struct-enums/classes.rs:46:18: 46:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:46:18: 46:21
                                         // + literal: Const { ty: fn(usize, isize, String) -> cat {cat}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &mut _1;                    // scope 1 at ui/struct-enums/classes.rs:47:3: 47:13
        _5 = cat::eat(move _6) -> [return: bb3, unwind: bb17]; // scope 1 at ui/struct-enums/classes.rs:47:3: 47:13
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:47:8: 47:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat) -> bool {cat::eat}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &mut _1;                   // scope 1 at ui/struct-enums/classes.rs:48:13: 48:23
        _9 = cat::eat(move _10) -> [return: bb4, unwind: bb17]; // scope 1 at ui/struct-enums/classes.rs:48:13: 48:23
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:48:18: 48:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat) -> bool {cat::eat}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = Not(move _9);               // scope 1 at ui/struct-enums/classes.rs:48:11: 48:24
        _7 = Not(move _8);               // scope 1 at ui/struct-enums/classes.rs:48:3: 48:25
        switchInt(move _7) -> [0: bb6, otherwise: bb5]; // scope 1 at ui/struct-enums/classes.rs:48:3: 48:25
    }

    bb5: {
        _11 = core::panicking::panic(const "assertion failed: (!nyan.eat())") -> bb17; // scope 1 at ui/struct-enums/classes.rs:48:3: 48:25
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:48:3: 48:25
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _13 = std::ops::Range::<usize> { start: const 1_usize, end: const 10_usize }; // scope 1 at ui/struct-enums/classes.rs:49:12: 49:29
        _12 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _13) -> [return: bb7, unwind: bb17]; // scope 1 at ui/struct-enums/classes.rs:49:12: 49:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:49:12: 49:29
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = move _12;                  // scope 1 at ui/struct-enums/classes.rs:49:12: 49:29
        goto -> bb8;                     // scope 2 at ui/struct-enums/classes.rs:49:3: 49:47
    }

    bb8: {
        _17 = &mut _14;                  // scope 2 at ui/struct-enums/classes.rs:49:12: 49:29
        _16 = &mut (*_17);               // scope 2 at ui/struct-enums/classes.rs:49:12: 49:29
        _15 = <std::ops::Range<usize> as Iterator>::next(move _16) -> [return: bb9, unwind: bb17]; // scope 2 at ui/struct-enums/classes.rs:49:12: 49:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:49:12: 49:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb9: {
        _18 = discriminant(_15);         // scope 2 at ui/struct-enums/classes.rs:49:12: 49:29
        switchInt(move _18) -> [0: bb12, 1: bb10, otherwise: bb11]; // scope 2 at ui/struct-enums/classes.rs:49:12: 49:29
    }

    bb10: {
        _20 = &mut _1;                   // scope 2 at ui/struct-enums/classes.rs:49:32: 49:44
        _19 = cat::speak(move _20) -> [return: bb19, unwind: bb17]; // scope 2 at ui/struct-enums/classes.rs:49:32: 49:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:49:37: 49:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat) {cat::speak}, val: Value(<ZST>) }
    }

    bb11: {
        unreachable;                     // scope 2 at ui/struct-enums/classes.rs:49:12: 49:29
    }

    bb12: {
        _23 = &mut _1;                   // scope 1 at ui/struct-enums/classes.rs:50:11: 50:23
        _22 = cat::eat(move _23) -> [return: bb13, unwind: bb17]; // scope 1 at ui/struct-enums/classes.rs:50:11: 50:23
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:50:17: 50:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat) -> bool {cat::eat}, val: Value(<ZST>) }
    }

    bb13: {
        _21 = Not(move _22);             // scope 1 at ui/struct-enums/classes.rs:50:3: 50:24
        switchInt(move _21) -> [0: bb15, otherwise: bb14]; // scope 1 at ui/struct-enums/classes.rs:50:3: 50:24
    }

    bb14: {
        _24 = core::panicking::panic(const "assertion failed: (nyan.eat())") -> bb17; // scope 1 at ui/struct-enums/classes.rs:50:3: 50:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/classes.rs:50:3: 50:24
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb15: {
        drop(_1) -> bb16;                // scope 0 at ui/struct-enums/classes.rs:51:1: 51:2
    }

    bb16: {
        return;                          // scope 0 at ui/struct-enums/classes.rs:51:2: 51:2
    }

    bb17 (cleanup): {
        drop(_1) -> bb18;                // scope 0 at ui/struct-enums/classes.rs:51:1: 51:2
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/classes.rs:45:1: 51:2
    }

    bb19: {
        goto -> bb8;                     // scope 2 at ui/struct-enums/classes.rs:49:32: 49:44
    }
}
