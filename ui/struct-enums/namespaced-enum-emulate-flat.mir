// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/namespaced-enum-emulate-flat.rs:14:1: 14:9>::foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:15:18: 15:18

    bb0: {
        return;                          // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:15:20: 15:20
    }
}

fn _f(_1: Foo) -> () {
    debug f => _1;                       // in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:18:7: 18:8
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:18:15: 18:15
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:20:9: 20:10

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:19:11: 19:12
        switchInt(move _2) -> [0: bb2, 1: bb2, 2: bb2, otherwise: bb1]; // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:19:5: 19:12
    }

    bb1: {
        unreachable;                     // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:19:11: 19:12
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:22:2: 22:2
    }
}

fn nest::<impl at ui/struct-enums/namespaced-enum-emulate-flat.rs:33:5: 33:13>::foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:34:22: 34:22

    bb0: {
        return;                          // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:34:24: 34:24
    }
}

fn _f2(_1: Bar) -> () {
    debug f => _1;                       // in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:38:8: 38:9
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:38:16: 38:16
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:40:9: 40:10

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:39:11: 39:12
        switchInt(move _2) -> [0: bb2, 1: bb2, 2: bb2, otherwise: bb1]; // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:39:5: 39:12
    }

    bb1: {
        unreachable;                     // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:39:11: 39:12
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:42:2: 42:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:44:11: 44:11

    bb0: {
        return;                          // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:44:13: 44:13
    }
}

fn Foo::B(_1: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:10:5: 10:6

    bb0: {
        _0 = Foo::B(move _1);            // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:10:5: 10:6
        return;                          // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:10:5: 10:6
    }
}

// MIR FOR CTFE
fn Foo::B(_1: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:10:5: 10:6

    bb0: {
        _0 = Foo::B(move _1);            // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:10:5: 10:6
        return;                          // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:10:5: 10:6
    }
}

fn Bar::E(_1: isize) -> Bar {
    let mut _0: nest::Bar;               // return place in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:29:9: 29:10

    bb0: {
        _0 = Bar::E(move _1);            // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:29:9: 29:10
        return;                          // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:29:9: 29:10
    }
}

// MIR FOR CTFE
fn Bar::E(_1: isize) -> Bar {
    let mut _0: nest::Bar;               // return place in scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:29:9: 29:10

    bb0: {
        _0 = Bar::E(move _1);            // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:29:9: 29:10
        return;                          // scope 0 at ui/struct-enums/namespaced-enum-emulate-flat.rs:29:9: 29:10
    }
}
