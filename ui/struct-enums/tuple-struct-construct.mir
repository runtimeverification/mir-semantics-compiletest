// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
    debug f => _2;                       // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
    let _5: &str;                        // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:12: 4:17
    let mut _7: &isize;                  // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:12: 4:17
    let _8: &isize;                      // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:12: 4:17
    let mut _9: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:19: 4:24
    let mut _10: &&isize;                // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:19: 4:24
    let _11: &&isize;                    // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:19: 4:24
    let _12: &isize;                     // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:19: 4:24

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
        _5 = const "Foo";                // scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
        _8 = &((*_1).0: isize);          // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:12: 4:17
        _7 = _8;                         // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:12: 4:17
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:12: 4:17
        _12 = &((*_1).1: isize);         // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:19: 4:24
        _11 = &_12;                      // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:19: 4:24
        _10 = _11;                       // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:19: 4:24
        _9 = move _10 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:19: 4:24
        _0 = Formatter::<'_>::debug_tuple_field2_finish(move _3, move _4, move _6, move _9) -> bb1; // scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-construct.rs:3:10: 3:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c), &'d (dyn Debug + 'd)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/tuple-struct-construct.rs:3:15: 3:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tuple-struct-construct.rs:6:15: 6:15
    let _1: Foo;                         // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:7:9: 7:10
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
    let mut _5: &[&str; 2];              // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
    let _6: &[&str; 2];                  // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:22: 8:23
    let mut _12: &Foo;                   // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:22: 8:23
    let _13: &Foo;                       // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:22: 8:23
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/struct-enums/tuple-struct-construct.rs:7:9: 7:10
        let mut _14: &[&str; 2];         // in scope 1 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
    }

    bb0: {
        _1 = Foo(const 1_isize, const 2_isize); // scope 0 at ui/struct-enums/tuple-struct-construct.rs:7:13: 7:22
        _14 = const _;                   // scope 1 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _14;                        // scope 1 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
        _5 = _6;                         // scope 1 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 1 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
        _13 = &_1;                       // scope 1 at ui/struct-enums/tuple-struct-construct.rs:8:22: 8:23
        _12 = _13;                       // scope 1 at ui/struct-enums/tuple-struct-construct.rs:8:22: 8:23
        _11 = core::fmt::ArgumentV1::<'_>::new_debug::<Foo>(move _12) -> bb1; // scope 1 at ui/struct-enums/tuple-struct-construct.rs:8:22: 8:23
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-construct.rs:8:22: 8:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Foo) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _print(move _3) -> bb3;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/tuple-struct-construct.rs:9:2: 9:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
    let mut _1: [&str; 2];               // in scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
        return;                          // scope 0 at ui/struct-enums/tuple-struct-construct.rs:8:14: 8:20
    }
}

fn Foo(_1: isize, _2: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:1: 4:11

    bb0: {
        _0 = Foo(move _1, move _2);      // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:1: 4:11
        return;                          // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:1: 4:11
    }
}

// MIR FOR CTFE
fn Foo(_1: isize, _2: isize) -> Foo {
    let mut _0: Foo;                     // return place in scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:1: 4:11

    bb0: {
        _0 = Foo(move _1, move _2);      // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:1: 4:11
        return;                          // scope 0 at ui/struct-enums/tuple-struct-construct.rs:4:1: 4:11
    }
}
