// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn cmp(_1: Option<isize>, _2: Option<isize>) -> bool {
    debug x => _1;                       // in scope 0 at ui/struct-enums/compare-generic-enums.rs:7:8: 7:9
    debug y => _2;                       // in scope 0 at ui/struct-enums/compare-generic-enums.rs:7:27: 7:28
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/compare-generic-enums.rs:7:48: 7:52
    let mut _3: &std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:8:5: 8:6
    let mut _4: &std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:8:10: 8:11

    bb0: {
        _3 = &_1;                        // scope 0 at ui/struct-enums/compare-generic-enums.rs:8:5: 8:6
        _4 = &_2;                        // scope 0 at ui/struct-enums/compare-generic-enums.rs:8:10: 8:11
        _0 = <Option<isize> as PartialEq>::eq(move _3, move _4) -> bb1; // scope 0 at ui/struct-enums/compare-generic-enums.rs:8:5: 8:11
                                         // mir::Constant
                                         // + span: ui/struct-enums/compare-generic-enums.rs:8:5: 8:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<isize>, &'b Option<isize>) -> bool {<Option<isize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/compare-generic-enums.rs:9:2: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/compare-generic-enums.rs:11:15: 11:15
    let mut _1: bool;                    // in scope 0 at ui/struct-enums/compare-generic-enums.rs:12:5: 12:33
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/compare-generic-enums.rs:12:13: 12:32
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/compare-generic-enums.rs:12:14: 12:32
    let mut _4: std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:12:18: 12:25
    let mut _5: std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:12:27: 12:31
    let mut _6: !;                       // in scope 0 at ui/struct-enums/compare-generic-enums.rs:12:5: 12:33
    let mut _7: bool;                    // in scope 0 at ui/struct-enums/compare-generic-enums.rs:13:5: 13:36
    let mut _8: bool;                    // in scope 0 at ui/struct-enums/compare-generic-enums.rs:13:13: 13:35
    let mut _9: bool;                    // in scope 0 at ui/struct-enums/compare-generic-enums.rs:13:14: 13:35
    let mut _10: std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:13:18: 13:25
    let mut _11: std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:13:27: 13:34
    let mut _12: !;                      // in scope 0 at ui/struct-enums/compare-generic-enums.rs:13:5: 13:36
    let mut _13: bool;                   // in scope 0 at ui/struct-enums/compare-generic-enums.rs:14:5: 14:35
    let mut _14: bool;                   // in scope 0 at ui/struct-enums/compare-generic-enums.rs:14:13: 14:34
    let mut _15: std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:14:17: 14:24
    let mut _16: std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:14:26: 14:33
    let mut _17: !;                      // in scope 0 at ui/struct-enums/compare-generic-enums.rs:14:5: 14:35
    let mut _18: bool;                   // in scope 0 at ui/struct-enums/compare-generic-enums.rs:15:5: 15:29
    let mut _19: bool;                   // in scope 0 at ui/struct-enums/compare-generic-enums.rs:15:13: 15:28
    let mut _20: std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:15:17: 15:21
    let mut _21: std::option::Option<isize>; // in scope 0 at ui/struct-enums/compare-generic-enums.rs:15:23: 15:27
    let mut _22: !;                      // in scope 0 at ui/struct-enums/compare-generic-enums.rs:15:5: 15:29

    bb0: {
        _4 = Option::<isize>::Some(const 3_isize); // scope 0 at ui/struct-enums/compare-generic-enums.rs:12:18: 12:25
        _5 = Option::<isize>::None;      // scope 0 at ui/struct-enums/compare-generic-enums.rs:12:27: 12:31
        _3 = cmp(move _4, move _5) -> bb1; // scope 0 at ui/struct-enums/compare-generic-enums.rs:12:14: 12:32
                                         // mir::Constant
                                         // + span: ui/struct-enums/compare-generic-enums.rs:12:14: 12:17
                                         // + literal: Const { ty: fn(Option<isize>, Option<isize>) -> bool {cmp}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Not(move _3);               // scope 0 at ui/struct-enums/compare-generic-enums.rs:12:13: 12:32
        _1 = Not(move _2);               // scope 0 at ui/struct-enums/compare-generic-enums.rs:12:5: 12:33
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/struct-enums/compare-generic-enums.rs:12:5: 12:33
    }

    bb2: {
        _6 = core::panicking::panic(const "assertion failed: !cmp(Some(3), None)"); // scope 0 at ui/struct-enums/compare-generic-enums.rs:12:5: 12:33
                                         // mir::Constant
                                         // + span: ui/struct-enums/compare-generic-enums.rs:12:5: 12:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _10 = Option::<isize>::Some(const 3_isize); // scope 0 at ui/struct-enums/compare-generic-enums.rs:13:18: 13:25
        _11 = Option::<isize>::Some(const 4_isize); // scope 0 at ui/struct-enums/compare-generic-enums.rs:13:27: 13:34
        _9 = cmp(move _10, move _11) -> bb4; // scope 0 at ui/struct-enums/compare-generic-enums.rs:13:14: 13:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/compare-generic-enums.rs:13:14: 13:17
                                         // + literal: Const { ty: fn(Option<isize>, Option<isize>) -> bool {cmp}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = Not(move _9);               // scope 0 at ui/struct-enums/compare-generic-enums.rs:13:13: 13:35
        _7 = Not(move _8);               // scope 0 at ui/struct-enums/compare-generic-enums.rs:13:5: 13:36
        switchInt(move _7) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/struct-enums/compare-generic-enums.rs:13:5: 13:36
    }

    bb5: {
        _12 = core::panicking::panic(const "assertion failed: !cmp(Some(3), Some(4))"); // scope 0 at ui/struct-enums/compare-generic-enums.rs:13:5: 13:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/compare-generic-enums.rs:13:5: 13:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _15 = Option::<isize>::Some(const 3_isize); // scope 0 at ui/struct-enums/compare-generic-enums.rs:14:17: 14:24
        _16 = Option::<isize>::Some(const 3_isize); // scope 0 at ui/struct-enums/compare-generic-enums.rs:14:26: 14:33
        _14 = cmp(move _15, move _16) -> bb7; // scope 0 at ui/struct-enums/compare-generic-enums.rs:14:13: 14:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/compare-generic-enums.rs:14:13: 14:16
                                         // + literal: Const { ty: fn(Option<isize>, Option<isize>) -> bool {cmp}, val: Value(<ZST>) }
    }

    bb7: {
        _13 = Not(move _14);             // scope 0 at ui/struct-enums/compare-generic-enums.rs:14:5: 14:35
        switchInt(move _13) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/struct-enums/compare-generic-enums.rs:14:5: 14:35
    }

    bb8: {
        _17 = core::panicking::panic(const "assertion failed: cmp(Some(3), Some(3))"); // scope 0 at ui/struct-enums/compare-generic-enums.rs:14:5: 14:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/compare-generic-enums.rs:14:5: 14:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _20 = Option::<isize>::None;     // scope 0 at ui/struct-enums/compare-generic-enums.rs:15:17: 15:21
        _21 = Option::<isize>::None;     // scope 0 at ui/struct-enums/compare-generic-enums.rs:15:23: 15:27
        _19 = cmp(move _20, move _21) -> bb10; // scope 0 at ui/struct-enums/compare-generic-enums.rs:15:13: 15:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/compare-generic-enums.rs:15:13: 15:16
                                         // + literal: Const { ty: fn(Option<isize>, Option<isize>) -> bool {cmp}, val: Value(<ZST>) }
    }

    bb10: {
        _18 = Not(move _19);             // scope 0 at ui/struct-enums/compare-generic-enums.rs:15:5: 15:29
        switchInt(move _18) -> [0: bb12, otherwise: bb11]; // scope 0 at ui/struct-enums/compare-generic-enums.rs:15:5: 15:29
    }

    bb11: {
        _22 = core::panicking::panic(const "assertion failed: cmp(None, None)"); // scope 0 at ui/struct-enums/compare-generic-enums.rs:15:5: 15:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/compare-generic-enums.rs:15:5: 15:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        return;                          // scope 0 at ui/struct-enums/compare-generic-enums.rs:16:2: 16:2
    }
}
