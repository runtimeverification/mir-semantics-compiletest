// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag-in-block.rs:9:10: 9:10

    bb0: {
        return;                          // scope 0 at ui/struct-enums/tag-in-block.rs:13:2: 13:2
    }
}

fn zed(_1: bar) -> () {
    debug _z => _1;                      // in scope 0 at ui/struct-enums/tag-in-block.rs:10:12: 10:14
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag-in-block.rs:10:21: 10:21

    bb0: {
        return;                          // scope 0 at ui/struct-enums/tag-in-block.rs:10:24: 10:24
    }
}

fn baz() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag-in-block.rs:12:14: 12:14
    let _1: ();                          // in scope 0 at ui/struct-enums/tag-in-block.rs:12:16: 12:29
    let mut _2: foo::bar;                // in scope 0 at ui/struct-enums/tag-in-block.rs:12:20: 12:28

    bb0: {
        _1 = zed(move _2) -> bb1;        // scope 0 at ui/struct-enums/tag-in-block.rs:12:16: 12:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag-in-block.rs:12:16: 12:19
                                         // + literal: Const { ty: fn(bar) {zed}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/tag-in-block.rs:12:32: 12:32
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag-in-block.rs:15:15: 15:15

    bb0: {
        return;                          // scope 0 at ui/struct-enums/tag-in-block.rs:15:18: 15:18
    }
}
