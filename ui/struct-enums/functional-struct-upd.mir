// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15>::fmt(_1: &Foo, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
    debug f => _2;                       // in scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
    let _5: &str;                        // in scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
    let mut _6: &str;                    // in scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
    let _7: &str;                        // in scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
    let mut _9: &isize;                  // in scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
    let _10: &isize;                     // in scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
    let mut _11: &str;                   // in scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
    let _12: &str;                       // in scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
    let mut _13: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
    let mut _14: &&isize;                // in scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
    let _15: &&isize;                    // in scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
    let _16: &isize;                     // in scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
        _5 = const "Foo";                // scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
        _7 = const "x";                  // scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
                                         // mir::Constant
                                         // + span: ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
        _10 = &((*_1).0: isize);         // scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
        _9 = _10;                        // scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/functional-struct-upd.rs:7:5: 7:13
        _12 = const "y";                 // scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
                                         // mir::Constant
                                         // + span: ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
        _16 = &((*_1).1: isize);         // scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
        _15 = &_16;                      // scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
        _14 = _15;                       // scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
        _13 = move _14 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/struct-enums/functional-struct-upd.rs:8:5: 8:13
        _0 = Formatter::<'_>::debug_struct_field2_finish(move _3, move _4, move _6, move _8, move _11, move _13) -> bb1; // scope 0 at ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/functional-struct-upd.rs:5:10: 5:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field2_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/functional-struct-upd.rs:5:15: 5:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/functional-struct-upd.rs:11:15: 11:15
    let _1: Foo;                         // in scope 0 at ui/struct-enums/functional-struct-upd.rs:12:9: 12:10
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
    let mut _6: &[&str; 2];              // in scope 0 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
    let _7: &[&str; 2];                  // in scope 0 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/functional-struct-upd.rs:14:22: 14:23
    let mut _13: &Foo;                   // in scope 0 at ui/struct-enums/functional-struct-upd.rs:14:22: 14:23
    let _14: &Foo;                       // in scope 0 at ui/struct-enums/functional-struct-upd.rs:14:22: 14:23
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/struct-enums/functional-struct-upd.rs:12:9: 12:10
        let _2: Foo;                     // in scope 1 at ui/struct-enums/functional-struct-upd.rs:13:9: 13:10
        scope 2 {
            debug c => _2;               // in scope 2 at ui/struct-enums/functional-struct-upd.rs:13:9: 13:10
            let mut _15: &[&str; 2];     // in scope 2 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
        }
    }

    bb0: {
        _1 = Foo { x: const 1_isize, y: const 2_isize }; // scope 0 at ui/struct-enums/functional-struct-upd.rs:12:13: 12:31
        _2 = Foo { x: const 4_isize, y: (_1.1: isize) }; // scope 1 at ui/struct-enums/functional-struct-upd.rs:13:13: 13:30
        _15 = const _;                   // scope 2 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _15;                        // scope 2 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
        _6 = _7;                         // scope 2 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 2 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
        _14 = &_2;                       // scope 2 at ui/struct-enums/functional-struct-upd.rs:14:22: 14:23
        _13 = _14;                       // scope 2 at ui/struct-enums/functional-struct-upd.rs:14:22: 14:23
        _12 = core::fmt::ArgumentV1::<'_>::new_debug::<Foo>(move _13) -> bb1; // scope 2 at ui/struct-enums/functional-struct-upd.rs:14:22: 14:23
                                         // mir::Constant
                                         // + span: ui/struct-enums/functional-struct-upd.rs:14:22: 14:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b Foo) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<Foo>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _print(move _4) -> bb3;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/functional-struct-upd.rs:15:2: 15:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
    let mut _1: [&str; 2];               // in scope 0 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
        return;                          // scope 0 at ui/struct-enums/functional-struct-upd.rs:14:14: 14:20
    }
}
