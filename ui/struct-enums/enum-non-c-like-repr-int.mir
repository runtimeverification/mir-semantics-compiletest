// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:11:16: 11:21>::clone(_1: &MyEnum) -> MyEnum {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:16: 11:21
    let mut _0: MyEnum;                  // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:16: 11:21
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                    }
                }
            }
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:16: 11:21
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:21: 11:21
    }
}

fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:11:23: 11:25>::assert_receiver_is_total_eq(_1: &MyEnum) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:23: 11:25
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:23: 11:25
    scope 1 {
        scope 2 {
            scope 3 {
                scope 4 {
                    scope 5 {
                    }
                }
            }
        }
    }

    bb0: {
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:25: 11:25
    }
}

fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36>::eq(_1: &MyEnum, _2: &MyEnum) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    debug other => _2;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let _3: u8;                          // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _4: &MyEnum;                 // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _6: &MyEnum;                 // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _7: bool;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _8: u8;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _9: u8;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _10: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _11: (&MyEnum, &MyEnum);     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _12: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _13: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _14: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _15: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _16: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _17: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _18: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _21: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
    let mut _22: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
    let mut _29: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    let mut _30: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
    let mut _31: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
    let mut _32: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
    let mut _33: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    let mut _34: i16;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    let mut _35: i16;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    let mut _36: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    let mut _37: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    let mut _38: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    let mut _41: &std::option::Option<u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
    let mut _42: &std::option::Option<u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
    let mut _45: &std::time::Duration;   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
    let mut _46: &std::time::Duration;   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
    let mut _47: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _48: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _49: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _50: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _51: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _52: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _53: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _54: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _55: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _56: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _57: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _58: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _59: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _60: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _61: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _62: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    let mut _63: &MyEnum;                // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        let _5: u8;                      // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
            let _19: &u32;               // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
            let _20: &u32;               // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
            let _23: &u8;                // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
            let _24: &i16;               // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
            let _25: &u8;                // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
            let _26: &u8;                // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
            let _27: &i16;               // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
            let _28: &u8;                // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
            let _39: &std::option::Option<u32>; // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
            let _40: &std::option::Option<u32>; // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
            let _43: &std::time::Duration; // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
            let _44: &std::time::Duration; // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
            scope 3 {
                debug __self_0 => _19;   // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
                debug __arg1_0 => _20;   // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
            }
            scope 4 {
                debug __self_0 => _23;   // in scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
                debug __self_1 => _24;   // in scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
                debug __self_2 => _25;   // in scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
                debug __arg1_0 => _26;   // in scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
                debug __arg1_1 => _27;   // in scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
                debug __arg1_2 => _28;   // in scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
            }
            scope 5 {
                debug __self_0 => _39;   // in scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
                debug __arg1_0 => _40;   // in scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
            }
            scope 6 {
                debug __self_0 => _43;   // in scope 6 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
                debug __arg1_0 => _44;   // in scope 6 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _3 = discriminant((*_4));        // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _6 = _2;                         // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _5 = discriminant((*_6));        // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _8 = _3;                         // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _9 = _5;                         // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _7 = Eq(move _8, move _9);       // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        goto -> bb3;                     // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _13 = _2;                        // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _11 = (move _12, move _13);      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _47 = deref_copy (_11.0: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _18 = discriminant((*_47));      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        switchInt(move _18) -> [0: bb4, 1: bb6, 3: bb7, 4: bb8, otherwise: bb5]; // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:36: 11:36
    }

    bb4: {
        _48 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _14 = discriminant((*_48));      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        switchInt(move _14) -> [0: bb9, otherwise: bb5]; // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    }

    bb5: {
        _10 = const true;                // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        goto -> bb18;                    // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    }

    bb6: {
        _49 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _15 = discriminant((*_49));      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        switchInt(move _15) -> [1: bb10, otherwise: bb5]; // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    }

    bb7: {
        _50 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _16 = discriminant((*_50));      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        switchInt(move _16) -> [3: bb16, otherwise: bb5]; // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    }

    bb8: {
        _51 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        _17 = discriminant((*_51));      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        switchInt(move _17) -> [4: bb17, otherwise: bb5]; // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    }

    bb9: {
        _52 = deref_copy (_11.0: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _19 = &(((*_52) as A).0: u32);   // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _53 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _20 = &(((*_53) as A).0: u32);   // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _21 = (*_19);                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _22 = (*_20);                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _10 = Eq(move _21, move _22);    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        goto -> bb18;                    // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:35: 11:36
    }

    bb10: {
        _54 = deref_copy (_11.0: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _23 = &(((*_54) as B).0: u8);    // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _55 = deref_copy (_11.0: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _24 = &(((*_55) as B).1: i16);   // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _56 = deref_copy (_11.0: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _25 = &(((*_56) as B).2: u8);    // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _57 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _26 = &(((*_57) as B).0: u8);    // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _58 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _27 = &(((*_58) as B).1: i16);   // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _59 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _28 = &(((*_59) as B).2: u8);    // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _31 = (*_23);                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _32 = (*_26);                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _30 = Eq(move _31, move _32);    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        switchInt(move _30) -> [0: bb13, otherwise: bb14]; // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    }

    bb11: {
        _10 = const false;               // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        goto -> bb18;                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    }

    bb12: {
        _37 = (*_25);                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _38 = (*_28);                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _36 = Eq(move _37, move _38);    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _10 = move _36;                  // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        goto -> bb18;                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    }

    bb13: {
        _29 = const false;               // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        goto -> bb15;                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    }

    bb14: {
        _34 = (*_24);                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _35 = (*_27);                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _33 = Eq(move _34, move _35);    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _29 = move _33;                  // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        goto -> bb15;                    // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    }

    bb15: {
        switchInt(move _29) -> [0: bb11, otherwise: bb12]; // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    }

    bb16: {
        _60 = deref_copy (_11.0: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _39 = &(((*_60) as D).0: std::option::Option<u32>); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _61 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _40 = &(((*_61) as D).0: std::option::Option<u32>); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _41 = _39;                       // scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _42 = _40;                       // scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _10 = <Option<u32> as PartialEq>::eq(move _41, move _42) -> bb18; // scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u32>, &'b Option<u32>) -> bool {<Option<u32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb17: {
        _62 = deref_copy (_11.0: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _43 = &(((*_62) as E).0: std::time::Duration); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _63 = deref_copy (_11.1: &MyEnum); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _44 = &(((*_63) as E).0: std::time::Duration); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _45 = _43;                       // scope 6 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _46 = _44;                       // scope 6 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _10 = <Duration as PartialEq>::eq(move _45, move _46) -> bb18; // scope 6 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Duration, &'b Duration) -> bool {<Duration as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _0 = move _10;                   // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
        goto -> bb3;                     // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:27: 11:36
    }
}

fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43>::fmt(_1: &MyEnum, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    debug f => _2;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _3: u8;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let _4: &u32;                        // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
    let mut _5: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _6: &str;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let _7: &str;                        // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _8: &dyn std::fmt::Debug;    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
    let mut _9: &&u32;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
    let _10: &&u32;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
    let _11: &u8;                        // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
    let _12: &i16;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    let _13: &u8;                        // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    let mut _14: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _15: &str;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let _16: &str;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _17: &str;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
    let _18: &str;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
    let mut _19: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
    let mut _20: &u8;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
    let mut _21: &str;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    let _22: &str;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    let mut _23: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    let mut _24: &i16;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
    let mut _25: &str;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    let _26: &str;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    let mut _27: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    let mut _28: &&u8;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    let _29: &&u8;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    let mut _30: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _31: &str;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let _32: &str;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let _33: &std::option::Option<u32>;  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
    let mut _34: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _35: &str;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let _36: &str;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _37: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
    let mut _38: &&std::option::Option<u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
    let _39: &&std::option::Option<u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
    let _40: &std::time::Duration;       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
    let mut _41: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _42: &str;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let _43: &str;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    let mut _44: &dyn std::fmt::Debug;   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
    let mut _45: &&std::time::Duration;  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
    let _46: &&std::time::Duration;      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
    scope 1 {
        debug __self_0 => _4;            // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
    }
    scope 2 {
        debug __self_0 => _11;           // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        debug __self_1 => _12;           // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        debug __self_2 => _13;           // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
    }
    scope 3 {
        debug __self_0 => _33;           // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
    }
    scope 4 {
        debug __self_0 => _40;           // in scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb5, 3: bb6, 4: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    }

    bb1: {
        _40 = &(((*_1) as E).0: std::time::Duration); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _41 = &mut (*_2);                // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _43 = const "E";                 // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _42 = _43;                       // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _46 = &_40;                      // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _45 = _46;                       // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _44 = move _45 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:7: 18:15
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _41, move _42, move _44) -> bb7; // scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
    }

    bb3: {
        _4 = &(((*_1) as A).0: u32);     // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _5 = &mut (*_2);                 // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _7 = const "A";                  // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _10 = &_4;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _9 = _10;                        // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _8 = move _9 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:7: 13:10
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _5, move _6, move _8) -> bb7; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &(((*_1) as B).0: u8);     // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _12 = &(((*_1) as B).1: i16);    // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _13 = &(((*_1) as B).2: u8);     // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _14 = &mut (*_2);                // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _16 = const "B";                 // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = _16;                       // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _18 = const "x";                 // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _17 = _18;                       // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _20 = _11;                       // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _19 = move _20 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:9: 14:14
        _22 = const "y";                 // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _21 = _22;                       // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _24 = _12;                       // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _23 = move _24 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:16: 14:22
        _26 = const "z";                 // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _25 = _26;                       // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _29 = &_13;                      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _28 = _29;                       // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _27 = move _28 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:14:24: 14:29
        _0 = Formatter::<'_>::debug_struct_field3_finish(move _14, move _15, move _17, move _19, move _21, move _23, move _25, move _27) -> bb7; // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b, 'a, 'c, 'd, 'e, 'f, 'g, 'h> fn(&'b mut Formatter<'_>, &'a str, &'c str, &'d (dyn Debug + 'd), &'e str, &'f (dyn Debug + 'f), &'g str, &'h (dyn Debug + 'h)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_struct_field3_finish}, val: Value(<ZST>) }
    }

    bb5: {
        _30 = &mut (*_2);                // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _32 = const "C";                 // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _31 = _32;                       // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _0 = Formatter::<'_>::write_str(move _30, move _31) -> bb7; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        _33 = &(((*_1) as D).0: std::option::Option<u32>); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _34 = &mut (*_2);                // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _36 = const "D";                 // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _35 = _36;                       // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
        _39 = &_33;                      // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _38 = _39;                       // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _37 = move _38 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:7: 17:18
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _34, move _35, move _37) -> bb7; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:11:38: 11:43
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:11:43: 11:43
    }
}

fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:31:28: 31:33>::clone(_1: &MyEnumTag) -> MyEnumTag {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:31:28: 31:33
    let mut _0: MyEnumTag;               // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:31:28: 31:33

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:31:28: 31:33
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:31:33: 31:33
    }
}

fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:32:27: 32:32>::clone(_1: &MyEnumVariantA) -> MyEnumVariantA {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:27: 32:32
    let mut _0: MyEnumVariantA;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:27: 32:32
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:27: 32:32
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:32: 32:32
    }
}

fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:33:27: 33:32>::clone(_1: &MyEnumVariantB) -> MyEnumVariantB {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:33:27: 33:32
    let mut _0: MyEnumVariantB;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:33:27: 33:32
    scope 1 {
        scope 2 {
            scope 3 {
            }
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:33:27: 33:32
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:33:32: 33:32
    }
}

fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:34:27: 34:32>::clone(_1: &MyEnumVariantC) -> MyEnumVariantC {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:27: 34:32
    let mut _0: MyEnumVariantC;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:27: 34:32
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:27: 34:32
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:32: 34:32
    }
}

fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:35:27: 35:32>::clone(_1: &MyEnumVariantD) -> MyEnumVariantD {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:27: 35:32
    let mut _0: MyEnumVariantD;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:27: 35:32
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:27: 35:32
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:32: 35:32
    }
}

fn <impl at ui/struct-enums/enum-non-c-like-repr-int.rs:36:27: 36:32>::clone(_1: &MyEnumVariantE) -> MyEnumVariantE {
    debug self => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:27: 36:32
    let mut _0: MyEnumVariantE;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:27: 36:32
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:27: 36:32
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:32: 36:32
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:38:11: 38:11
    let _1: std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:39:9: 39:15
    let mut _2: std::boxed::Box<[std::result::Result<MyEnum, ()>]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[std::result::Result<MyEnum, ()>; 8]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[std::result::Result<MyEnum, ()>; 8]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:40:9: 40:26
    let mut _9: MyEnum;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:40:12: 40:25
    let mut _10: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:41:9: 41:49
    let mut _11: MyEnum;                 // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:41:12: 41:48
    let mut _12: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:42:9: 42:22
    let mut _13: MyEnum;                 // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:42:12: 42:21
    let mut _14: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:43:9: 43:16
    let mut _15: ();                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:43:13: 43:15
    let mut _16: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:44:9: 44:33
    let mut _17: MyEnum;                 // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:44:12: 44:32
    let mut _18: std::option::Option<u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:44:22: 44:31
    let mut _19: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:45:9: 45:28
    let mut _20: MyEnum;                 // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:45:12: 45:27
    let mut _21: std::option::Option<u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:45:22: 45:26
    let mut _22: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:46:9: 46:48
    let mut _23: MyEnum;                 // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:46:12: 46:47
    let mut _24: std::time::Duration;    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:46:22: 46:46
    let mut _25: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:47:9: 47:16
    let mut _26: ();                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:47:13: 47:15
    let mut _28: std::boxed::Box<[u8]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _29: std::boxed::Box<[u8; 34]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _30: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _31: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _32: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _33: std::boxed::Box<[u8; 34]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _36: &[u8];                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:63:20: 63:29
    let mut _37: &std::vec::Vec<u8>;     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:63:20: 63:25
    let mut _38: std::ops::RangeFull;    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:63:26: 63:28
    let mut _40: ();                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:38:1: 81:2
    let mut _41: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:72:15: 72:28
    let mut _42: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:72:15: 72:24
    let mut _43: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:72:15: 72:24
    let mut _44: std::result::Result<(), ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:19: 73:53
    let mut _45: &mut MyEnum;            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:33: 73:42
    let mut _46: &mut MyEnum;            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:33: 73:42
    let mut _47: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:44: 73:52
    let mut _48: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:44: 73:52
    let mut _49: isize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:74:17: 74:23
    let mut _50: &mut std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:74:27: 74:48
    let mut _51: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:74:39: 74:47
    let mut _52: MyEnum;                 // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:74:42: 74:46
    let mut _53: &mut std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:75:28: 75:48
    let mut _54: std::result::Result<MyEnum, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:75:40: 75:47
    let mut _55: ();                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:75:44: 75:46
    let mut _56: (&std::vec::Vec<std::result::Result<MyEnum, ()>>, &std::vec::Vec<std::result::Result<MyEnum, ()>>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _57: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _58: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _73: ();                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
    let mut _74: *const [std::result::Result<MyEnum, ()>; 8]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _75: *const [u8; 34];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug result => _1;              // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:39:9: 39:15
        let _27: std::vec::Vec<u8>;      // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:51:9: 51:14
        scope 3 {
            debug input => _27;          // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:51:9: 51:14
            let mut _34: std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:62:9: 62:19
            scope 5 {
                debug output => _34;     // in scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:62:9: 62:19
                let mut _35: &[u8];      // in scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:63:9: 63:16
                scope 6 {
                    debug buf => _35;    // in scope 6 at ui/struct-enums/enum-non-c-like-repr-int.rs:63:9: 63:16
                    let _59: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _60: &std::vec::Vec<std::result::Result<MyEnum, ()>>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 7 {
                        let mut _39: MyEnum; // in scope 7 at ui/struct-enums/enum-non-c-like-repr-int.rs:71:13: 71:21
                        scope 8 {
                            debug dest => _39; // in scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:71:13: 71:21
                        }
                    }
                    scope 9 {
                        debug left_val => _59; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _60; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _65: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 10 {
                            debug kind => _65; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
        scope 4 {
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 192_usize;            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [std::result::Result<MyEnum, ()>; 8]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = MyEnum::A(const 17_u32);    // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:40:12: 40:25
        _8 = Result::<MyEnum, ()>::Ok(move _9); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:40:9: 40:26
        _11 = MyEnum::B { x: const 206_u8, y: const 1145_i16, z: const 78_u8 }; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:41:12: 41:48
        _10 = Result::<MyEnum, ()>::Ok(move _11); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:41:9: 41:49
        _13 = MyEnum::C;                 // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:42:12: 42:21
        _12 = Result::<MyEnum, ()>::Ok(move _13); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:42:9: 42:22
        _14 = Result::<MyEnum, ()>::Err(move _15); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:43:9: 43:16
        _18 = Option::<u32>::Some(const 407_u32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:44:22: 44:31
        _17 = MyEnum::D(move _18);       // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:44:12: 44:32
        _16 = Result::<MyEnum, ()>::Ok(move _17); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:44:9: 44:33
        _21 = Option::<u32>::None;       // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:45:22: 45:26
        _20 = MyEnum::D(move _21);       // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:45:12: 45:27
        _19 = Result::<MyEnum, ()>::Ok(move _20); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:45:9: 45:28
        _24 = Duration::from_secs(const 100_u64) -> [return: bb2, unwind: bb26]; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:46:22: 46:46
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:46:22: 46:41
                                         // + literal: Const { ty: fn(u64) -> Duration {Duration::from_secs}, val: Value(<ZST>) }
    }

    bb2: {
        _23 = MyEnum::E(move _24);       // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:46:12: 46:47
        _22 = Result::<MyEnum, ()>::Ok(move _23); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:46:9: 46:48
        _25 = Result::<MyEnum, ()>::Err(move _26); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:47:9: 47:16
        _74 = (((_7.0: std::ptr::Unique<[std::result::Result<MyEnum, ()>; 8]>).0: std::ptr::NonNull<[std::result::Result<MyEnum, ()>; 8]>).0: *const [std::result::Result<MyEnum, ()>; 8]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_74) = [move _8, move _10, move _12, move _14, move _16, move _19, move _22, move _25]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[std::result::Result<MyEnum, ()>]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [Result<MyEnum, ()>]>::into_vec::<std::alloc::Global>(move _2) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<[Result<MyEnum, ()>]>) -> Vec<Result<MyEnum, ()>> {slice::<impl [Result<MyEnum, ()>]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb3: {
        _30 = const 34_usize;            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _31 = const 1_usize;             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _32 = alloc::alloc::exchange_malloc(move _30, move _31) -> [return: bb4, unwind: bb24]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb4: {
        _33 = ShallowInitBox(move _32, [u8; 34]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _75 = (((_33.0: std::ptr::Unique<[u8; 34]>).0: std::ptr::NonNull<[u8; 34]>).0: *const [u8; 34]); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_75) = [const 0_u8, const 17_u8, const 0_u8, const 0_u8, const 0_u8, const 1_u8, const 206_u8, const 121_u8, const 4_u8, const 78_u8, const 2_u8, const 8_u8, const 3_u8, const 0_u8, const 151_u8, const 1_u8, const 0_u8, const 0_u8, const 3_u8, const 1_u8, const 4_u8, const 100_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8, const 0_u8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _29 = move _33;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _28 = move _29 as std::boxed::Box<[u8]> (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _27 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _28) -> [return: bb5, unwind: bb24]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Box<[u8]>) -> Vec<u8> {slice::<impl [u8]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb5: {
        _34 = Vec::<Result<MyEnum, ()>>::new() -> [return: bb6, unwind: bb23]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn() -> Vec<Result<MyEnum, ()>> {Vec::<Result<MyEnum, ()>>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _37 = &_27;                      // scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:63:20: 63:25
        _36 = <Vec<u8> as Index<RangeFull>>::index(move _37, move _38) -> [return: bb7, unwind: bb22]; // scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:63:20: 63:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:63:20: 63:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u8>, RangeFull) -> &'a <Vec<u8> as Index<RangeFull>>::Output {<Vec<u8> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb7: {
        _35 = _36;                       // scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:63:19: 63:29
        _39 = zeroed::<MyEnum>() -> [return: bb27, unwind: bb22]; // scope 7 at ui/struct-enums/enum-non-c-like-repr-int.rs:71:32: 71:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:71:32: 71:43
                                         // + literal: Const { ty: unsafe fn() -> MyEnum {zeroed::<MyEnum>}, val: Value(<ZST>) }
    }

    bb8: {
        _43 = _35;                       // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:72:15: 72:24
        _42 = core::slice::<impl [u8]>::len(move _43) -> [return: bb9, unwind: bb22]; // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:72:15: 72:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:72:19: 72:22
                                         // + literal: Const { ty: for<'a> fn(&'a [u8]) -> usize {core::slice::<impl [u8]>::len}, val: Value(<ZST>) }
    }

    bb9: {
        _41 = Gt(move _42, const 0_usize); // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:72:15: 72:28
        switchInt(move _41) -> [0: bb15, otherwise: bb10]; // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:72:15: 72:28
    }

    bb10: {
        _46 = &mut _39;                  // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:33: 73:42
        _45 = &mut (*_46);               // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:33: 73:42
        _48 = &mut _35;                  // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:44: 73:52
        _47 = &mut (*_48);               // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:44: 73:52
        _44 = parse_my_enum(move _45, move _47) -> [return: bb11, unwind: bb22]; // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:19: 73:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:73:19: 73:32
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(&'a mut MyEnum, &'b mut &'c [u8]) -> Result<(), ()> {parse_my_enum}, val: Value(<ZST>) }
    }

    bb11: {
        _49 = discriminant(_44);         // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:19: 73:53
        switchInt(move _49) -> [0: bb14, 1: bb12, otherwise: bb13]; // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:13: 73:53
    }

    bb12: {
        _53 = &mut _34;                  // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:75:28: 75:48
        _54 = Result::<MyEnum, ()>::Err(move _55); // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:75:40: 75:47
        _40 = Vec::<Result<MyEnum, ()>>::push(move _53, move _54) -> [return: bb28, unwind: bb22]; // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:75:28: 75:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:75:35: 75:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Result<MyEnum, ()>>, Result<MyEnum, ()>) {Vec::<Result<MyEnum, ()>>::push}, val: Value(<ZST>) }
    }

    bb13: {
        unreachable;                     // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:73:19: 73:53
    }

    bb14: {
        _50 = &mut _34;                  // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:74:27: 74:48
        _52 = _39;                       // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:74:42: 74:46
        _51 = Result::<MyEnum, ()>::Ok(move _52); // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:74:39: 74:47
        _40 = Vec::<Result<MyEnum, ()>>::push(move _50, move _51) -> [return: bb29, unwind: bb22]; // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:74:27: 74:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:74:34: 74:38
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Result<MyEnum, ()>>, Result<MyEnum, ()>) {Vec::<Result<MyEnum, ()>>::push}, val: Value(<ZST>) }
    }

    bb15: {
        _57 = &_34;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _58 = &_1;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _56 = (move _57, move _58);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_56.0: &std::vec::Vec<std::result::Result<MyEnum, ()>>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_56.1: &std::vec::Vec<std::result::Result<MyEnum, ()>>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = _59;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = _60;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = <Vec<Result<MyEnum, ()>> as PartialEq>::eq(move _63, move _64) -> [return: bb16, unwind: bb22]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<Result<MyEnum, ()>>, &'b Vec<Result<MyEnum, ()>>) -> bool {<Vec<Result<MyEnum, ()>> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb16: {
        _61 = Not(move _62);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb18, otherwise: bb17]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb17: {
        _65 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<Vec<Result<MyEnum, ()>>, Vec<Result<MyEnum, ()>>>(move _67, move _68, move _70, move _72) -> bb22; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<Result<MyEnum, ()>>, &'b Vec<Result<MyEnum, ()>>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<Result<MyEnum, ()>>, Vec<Result<MyEnum, ()>>>}, val: Value(<ZST>) }
    }

    bb18: {
        drop(_34) -> [return: bb19, unwind: bb23]; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:81:1: 81:2
    }

    bb19: {
        drop(_27) -> [return: bb20, unwind: bb24]; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:81:1: 81:2
    }

    bb20: {
        drop(_1) -> bb21;                // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:81:1: 81:2
    }

    bb21: {
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:81:2: 81:2
    }

    bb22 (cleanup): {
        drop(_34) -> bb23;               // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:81:1: 81:2
    }

    bb23 (cleanup): {
        drop(_27) -> bb24;               // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:81:1: 81:2
    }

    bb24 (cleanup): {
        drop(_1) -> bb25;                // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:81:1: 81:2
    }

    bb25 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:38:1: 81:2
    }

    bb26 (cleanup): {
        _73 = alloc::alloc::box_free::<[Result<MyEnum, ()>; 8], std::alloc::Global>(move (_7.0: std::ptr::Unique<[std::result::Result<MyEnum, ()>; 8]>), move (_7.1: std::alloc::Global)) -> bb25; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:46: 52:47
                                         // + literal: Const { ty: unsafe fn(Unique<[Result<MyEnum, ()>; 8]>, std::alloc::Global) {alloc::alloc::box_free::<[Result<MyEnum, ()>; 8], std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb27: {
        goto -> bb8;                     // scope 7 at ui/struct-enums/enum-non-c-like-repr-int.rs:71:32: 71:45
    }

    bb28: {
        goto -> bb8;                     // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:75:28: 75:48
    }

    bb29: {
        goto -> bb8;                     // scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:74:27: 74:48
    }
}

fn parse_my_enum(_1: &mut MyEnum, _2: &mut &[u8]) -> Result<(), ()> {
    debug dest => _1;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:83:22: 83:26
    debug buf => _2;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:83:44: 83:47
    let mut _0: std::result::Result<(), ()>; // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:83:64: 83:78
    let mut _4: &mut MyEnum;             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:86:55: 86:59
    let mut _6: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u8>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
    let mut _7: std::result::Result<u8, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:31
    let mut _8: &mut &[u8];              // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:27: 87:30
    let mut _9: isize;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:31: 87:32
    let mut _11: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:31: 87:32
    let mut _13: MyEnumTag;              // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:89:20: 96:10
    let mut _14: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:99:13: 99:25
    let mut _15: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
    let mut _16: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
    let mut _17: std::result::Result<u32, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:44
    let mut _18: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:40: 100:43
    let mut _19: isize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:44: 100:45
    let mut _21: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:44: 100:45
    let mut _23: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
    let mut _24: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u8>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
    let mut _25: std::result::Result<u8, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:40
    let mut _26: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:36: 103:39
    let mut _27: isize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:40: 103:41
    let mut _29: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:40: 103:41
    let mut _31: u16;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
    let mut _32: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u16>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
    let mut _33: std::result::Result<u16, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:44
    let mut _34: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:40: 104:43
    let mut _35: isize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:44: 104:45
    let mut _37: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:44: 104:45
    let mut _39: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
    let mut _40: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u8>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
    let mut _41: std::result::Result<u8, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:40
    let mut _42: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:36: 105:39
    let mut _43: isize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:40: 105:41
    let mut _45: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:40: 105:41
    let mut _48: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
    let mut _49: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u8>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
    let mut _50: std::result::Result<u8, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:43
    let mut _51: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:39: 111:42
    let mut _52: isize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:43: 111:44
    let mut _54: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:43: 111:44
    let mut _56: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:112:20: 112:27
    let mut _57: std::option::Option<u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:32: 113:55
    let mut _58: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
    let mut _59: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
    let mut _60: std::result::Result<u32, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:53
    let mut _61: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:49: 113:52
    let mut _62: isize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:53: 113:54
    let mut _64: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:53: 113:54
    let mut _66: std::option::Option<u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:115:32: 115:36
    let mut _68: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u64>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
    let mut _69: std::result::Result<u64, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:44
    let mut _70: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:40: 119:43
    let mut _71: isize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:44: 119:45
    let mut _73: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:44: 119:45
    let mut _76: std::ops::ControlFlow<std::result::Result<std::convert::Infallible, ()>, u32>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
    let mut _77: std::result::Result<u32, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:45
    let mut _78: &mut &[u8];             // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:41: 120:44
    let mut _79: isize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:45: 120:46
    let mut _81: std::result::Result<std::convert::Infallible, ()>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:45: 120:46
    let mut _83: std::time::Duration;    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:121:28: 121:54
    let mut _84: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:121:42: 121:46
    let mut _85: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:121:48: 121:53
    scope 1 {
        let _3: &mut MyEnumRepr;         // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:86:13: 86:17
        scope 2 {
            debug dest => _3;            // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:86:13: 86:17
            let _5: u8;                  // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:13: 87:16
            let _10: std::result::Result<std::convert::Infallible, ()>; // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:31: 87:32
            let _12: u8;                 // in scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
            scope 3 {
                debug tag => _5;         // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:13: 87:16
                let _20: std::result::Result<std::convert::Infallible, ()>; // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:44: 100:45
                let _22: u32;            // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
                let _28: std::result::Result<std::convert::Infallible, ()>; // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:40: 103:41
                let _30: u8;             // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
                let _36: std::result::Result<std::convert::Infallible, ()>; // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:44: 104:45
                let _38: u16;            // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
                let _44: std::result::Result<std::convert::Infallible, ()>; // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:40: 105:41
                let _46: u8;             // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
                let _47: bool;           // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:21: 111:28
                let _53: std::result::Result<std::convert::Infallible, ()>; // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:43: 111:44
                let _55: u8;             // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
                let _67: u64;            // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:21: 119:25
                let _72: std::result::Result<std::convert::Infallible, ()>; // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:44: 119:45
                let _74: u64;            // in scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
                scope 8 {
                    debug residual => _20; // in scope 8 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:44: 100:45
                    scope 9 {
                    }
                }
                scope 10 {
                    debug val => _22;    // in scope 10 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
                    scope 11 {
                    }
                }
                scope 12 {
                    debug residual => _28; // in scope 12 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:40: 103:41
                    scope 13 {
                    }
                }
                scope 14 {
                    debug val => _30;    // in scope 14 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
                    scope 15 {
                    }
                }
                scope 16 {
                    debug residual => _36; // in scope 16 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:44: 104:45
                    scope 17 {
                    }
                }
                scope 18 {
                    debug val => _38;    // in scope 18 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
                    scope 19 {
                    }
                }
                scope 20 {
                    debug residual => _44; // in scope 20 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:40: 105:41
                    scope 21 {
                    }
                }
                scope 22 {
                    debug val => _46;    // in scope 22 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
                    scope 23 {
                    }
                }
                scope 24 {
                    debug is_some => _47; // in scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:21: 111:28
                    let _63: std::result::Result<std::convert::Infallible, ()>; // in scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:53: 113:54
                    let _65: u32;        // in scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
                    scope 29 {
                        debug residual => _63; // in scope 29 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:53: 113:54
                        scope 30 {
                        }
                    }
                    scope 31 {
                        debug val => _65; // in scope 31 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
                        scope 32 {
                        }
                    }
                }
                scope 25 {
                    debug residual => _53; // in scope 25 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:43: 111:44
                    scope 26 {
                    }
                }
                scope 27 {
                    debug val => _55;    // in scope 27 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
                    scope 28 {
                    }
                }
                scope 33 {
                    debug secs => _67;   // in scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:21: 119:25
                    let _75: u32;        // in scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:21: 120:26
                    let _80: std::result::Result<std::convert::Infallible, ()>; // in scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:45: 120:46
                    let _82: u32;        // in scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
                    scope 38 {
                        debug nanos => _75; // in scope 38 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:21: 120:26
                    }
                    scope 39 {
                        debug residual => _80; // in scope 39 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:45: 120:46
                        scope 40 {
                        }
                    }
                    scope 41 {
                        debug val => _82; // in scope 41 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
                        scope 42 {
                        }
                    }
                }
                scope 34 {
                    debug residual => _72; // in scope 34 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:44: 119:45
                    scope 35 {
                    }
                }
                scope 36 {
                    debug val => _74;    // in scope 36 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
                    scope 37 {
                    }
                }
            }
            scope 4 {
                debug residual => _10;   // in scope 4 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:31: 87:32
                scope 5 {
                }
            }
            scope 6 {
                debug val => _12;        // in scope 6 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
                scope 7 {
                }
            }
        }
    }

    bb0: {
        _4 = move _1;                    // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:86:55: 86:59
        _3 = transmute::<&mut MyEnum, &mut MyEnumRepr>(move _4) -> bb1; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:86:40: 86:60
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:86:40: 86:54
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(&mut MyEnum) -> &mut MyEnumRepr {transmute::<&mut MyEnum, &mut MyEnumRepr>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &mut (*_2);                 // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:27: 87:30
        _7 = read_u8(move _8) -> bb2;    // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &'b [u8]) -> Result<u8, ()> {read_u8}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = <Result<u8, ()> as Try>::branch(move _7) -> bb3; // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
                                         // + literal: Const { ty: fn(Result<u8, ()>) -> ControlFlow<<Result<u8, ()> as Try>::Residual, <Result<u8, ()> as Try>::Output> {<Result<u8, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = discriminant(_6);           // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
        switchInt(move _9) -> [0: bb4, 1: bb6, otherwise: bb5]; // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
    }

    bb4: {
        _12 = ((_6 as Continue).0: u8);  // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
        _5 = _12;                        // scope 7 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
        switchInt(_5) -> [0: bb8, 1: bb9, 2: bb10, 3: bb11, 4: bb12, otherwise: bb7]; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:89:20: 89:29
    }

    bb5: {
        unreachable;                     // scope 2 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
    }

    bb6: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _11) -> bb63; // scope 5 at ui/struct-enums/enum-non-c-like-repr-int.rs:87:19: 87:32
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:87:31: 87:32
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = const Result::<(), ()>::Err(()); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:95:25: 95:32
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:95:25: 95:32
                                         // + literal: Const { ty: Result<(), ()>, val: Value(Scalar(0x01)) }
        goto -> bb63;                    // scope 3 at no-location
    }

    bb8: {
        _13 = const MyEnumTag::A;        // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:90:18: 90:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:90:18: 90:30
                                         // + literal: Const { ty: MyEnumTag, val: Value(Scalar(0x00)) }
        goto -> bb13;                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:90:18: 90:30
    }

    bb9: {
        _13 = const MyEnumTag::B;        // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:91:18: 91:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:91:18: 91:30
                                         // + literal: Const { ty: MyEnumTag, val: Value(Scalar(0x01)) }
        goto -> bb13;                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:91:18: 91:30
    }

    bb10: {
        _13 = const MyEnumTag::C;        // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:92:18: 92:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:92:18: 92:30
                                         // + literal: Const { ty: MyEnumTag, val: Value(Scalar(0x02)) }
        goto -> bb13;                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:92:18: 92:30
    }

    bb11: {
        _13 = const MyEnumTag::D;        // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:93:18: 93:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:93:18: 93:30
                                         // + literal: Const { ty: MyEnumTag, val: Value(Scalar(0x03)) }
        goto -> bb13;                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:93:18: 93:30
    }

    bb12: {
        _13 = const MyEnumTag::E;        // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:94:18: 94:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:94:18: 94:30
                                         // + literal: Const { ty: MyEnumTag, val: Value(Scalar(0x04)) }
        goto -> bb13;                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:94:18: 94:30
    }

    bb13: {
        (((*_3).0: MyEnumVariantA).0: MyEnumTag) = move _13; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:89:9: 96:10
        _14 = discriminant((((*_3).1: MyEnumVariantB).0: MyEnumTag)); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:98:15: 98:25
        switchInt(move _14) -> [0: bb16, 1: bb22, 2: bb62, 3: bb38, 4: bb14, otherwise: bb15]; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:98:9: 98:25
    }

    bb14: {
        _70 = &mut (*_2);                // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:40: 119:43
        _69 = read_u64_le(move _70) -> bb51; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &'b [u8]) -> Result<u64, ()> {read_u64_le}, val: Value(<ZST>) }
    }

    bb15: {
        unreachable;                     // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:98:15: 98:25
    }

    bb16: {
        _18 = &mut (*_2);                // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:40: 100:43
        _17 = read_u32_le(move _18) -> bb17; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &'b [u8]) -> Result<u32, ()> {read_u32_le}, val: Value(<ZST>) }
    }

    bb17: {
        _16 = <Result<u32, ()> as Try>::branch(move _17) -> bb18; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
                                         // + literal: Const { ty: fn(Result<u32, ()>) -> ControlFlow<<Result<u32, ()> as Try>::Residual, <Result<u32, ()> as Try>::Output> {<Result<u32, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb18: {
        _19 = discriminant(_16);         // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
        switchInt(move _19) -> [0: bb19, 1: bb21, otherwise: bb20]; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
    }

    bb19: {
        _22 = ((_16 as Continue).0: u32); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
        _15 = _22;                       // scope 11 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
        (((*_3).0: MyEnumVariantA).1: u32) = move _15; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:17: 100:45
        goto -> bb62;                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:99:29: 101:14
    }

    bb20: {
        unreachable;                     // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
    }

    bb21: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _21) -> bb63; // scope 9 at ui/struct-enums/enum-non-c-like-repr-int.rs:100:28: 100:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:100:44: 100:45
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb22: {
        _26 = &mut (*_2);                // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:36: 103:39
        _25 = read_u8(move _26) -> bb23; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &'b [u8]) -> Result<u8, ()> {read_u8}, val: Value(<ZST>) }
    }

    bb23: {
        _24 = <Result<u8, ()> as Try>::branch(move _25) -> bb24; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
                                         // + literal: Const { ty: fn(Result<u8, ()>) -> ControlFlow<<Result<u8, ()> as Try>::Residual, <Result<u8, ()> as Try>::Output> {<Result<u8, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb24: {
        _27 = discriminant(_24);         // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
        switchInt(move _27) -> [0: bb25, 1: bb27, otherwise: bb26]; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
    }

    bb25: {
        _30 = ((_24 as Continue).0: u8); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
        _23 = _30;                       // scope 15 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
        (((*_3).1: MyEnumVariantB).1: u8) = move _23; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:17: 103:41
        _34 = &mut (*_2);                // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:40: 104:43
        _33 = read_u16_le(move _34) -> bb28; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &'b [u8]) -> Result<u16, ()> {read_u16_le}, val: Value(<ZST>) }
    }

    bb26: {
        unreachable;                     // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
    }

    bb27: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _29) -> bb63; // scope 13 at ui/struct-enums/enum-non-c-like-repr-int.rs:103:28: 103:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:103:40: 103:41
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb28: {
        _32 = <Result<u16, ()> as Try>::branch(move _33) -> bb29; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
                                         // + literal: Const { ty: fn(Result<u16, ()>) -> ControlFlow<<Result<u16, ()> as Try>::Residual, <Result<u16, ()> as Try>::Output> {<Result<u16, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb29: {
        _35 = discriminant(_32);         // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
        switchInt(move _35) -> [0: bb30, 1: bb32, otherwise: bb31]; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
    }

    bb30: {
        _38 = ((_32 as Continue).0: u16); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
        _31 = _38;                       // scope 19 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
        (((*_3).1: MyEnumVariantB).2: i16) = move _31 as i16 (IntToInt); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:17: 104:52
        _42 = &mut (*_2);                // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:36: 105:39
        _41 = read_u8(move _42) -> bb33; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:35
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &'b [u8]) -> Result<u8, ()> {read_u8}, val: Value(<ZST>) }
    }

    bb31: {
        unreachable;                     // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
    }

    bb32: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _37) -> bb63; // scope 17 at ui/struct-enums/enum-non-c-like-repr-int.rs:104:28: 104:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:104:44: 104:45
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb33: {
        _40 = <Result<u8, ()> as Try>::branch(move _41) -> bb34; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
                                         // + literal: Const { ty: fn(Result<u8, ()>) -> ControlFlow<<Result<u8, ()> as Try>::Residual, <Result<u8, ()> as Try>::Output> {<Result<u8, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb34: {
        _43 = discriminant(_40);         // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
        switchInt(move _43) -> [0: bb35, 1: bb37, otherwise: bb36]; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
    }

    bb35: {
        _46 = ((_40 as Continue).0: u8); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
        _39 = _46;                       // scope 23 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
        (((*_3).1: MyEnumVariantB).3: u8) = move _39; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:17: 105:41
        goto -> bb62;                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:102:29: 106:14
    }

    bb36: {
        unreachable;                     // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
    }

    bb37: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _45) -> bb63; // scope 21 at ui/struct-enums/enum-non-c-like-repr-int.rs:105:28: 105:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:105:40: 105:41
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb38: {
        _51 = &mut (*_2);                // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:39: 111:42
        _50 = read_u8(move _51) -> bb39; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:43
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &'b [u8]) -> Result<u8, ()> {read_u8}, val: Value(<ZST>) }
    }

    bb39: {
        _49 = <Result<u8, ()> as Try>::branch(move _50) -> bb40; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
                                         // + literal: Const { ty: fn(Result<u8, ()>) -> ControlFlow<<Result<u8, ()> as Try>::Residual, <Result<u8, ()> as Try>::Output> {<Result<u8, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb40: {
        _52 = discriminant(_49);         // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
        switchInt(move _52) -> [0: bb41, 1: bb43, otherwise: bb42]; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
    }

    bb41: {
        _55 = ((_49 as Continue).0: u8); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
        _48 = _55;                       // scope 28 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
        _47 = Eq(move _48, const 0_u8);  // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:49
        _56 = _47;                       // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:112:20: 112:27
        switchInt(move _56) -> [0: bb45, otherwise: bb44]; // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:112:20: 112:27
    }

    bb42: {
        unreachable;                     // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
    }

    bb43: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _54) -> bb63; // scope 26 at ui/struct-enums/enum-non-c-like-repr-int.rs:111:31: 111:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:111:43: 111:44
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb44: {
        _61 = &mut (*_2);                // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:49: 113:52
        _60 = read_u32_le(move _61) -> bb46; // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:48
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &'b [u8]) -> Result<u32, ()> {read_u32_le}, val: Value(<ZST>) }
    }

    bb45: {
        _66 = Option::<u32>::None;       // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:115:32: 115:36
        (((*_3).3: MyEnumVariantD).1: std::option::Option<u32>) = move _66; // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:115:21: 115:36
        goto -> bb62;                    // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:112:17: 116:18
    }

    bb46: {
        _59 = <Result<u32, ()> as Try>::branch(move _60) -> bb47; // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
                                         // + literal: Const { ty: fn(Result<u32, ()>) -> ControlFlow<<Result<u32, ()> as Try>::Residual, <Result<u32, ()> as Try>::Output> {<Result<u32, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb47: {
        _62 = discriminant(_59);         // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
        switchInt(move _62) -> [0: bb48, 1: bb50, otherwise: bb49]; // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
    }

    bb48: {
        _65 = ((_59 as Continue).0: u32); // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
        _58 = _65;                       // scope 32 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
        _57 = Option::<u32>::Some(move _58); // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:32: 113:55
        (((*_3).3: MyEnumVariantD).1: std::option::Option<u32>) = move _57; // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:21: 113:55
        goto -> bb62;                    // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:112:17: 116:18
    }

    bb49: {
        unreachable;                     // scope 24 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
    }

    bb50: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _64) -> bb63; // scope 30 at ui/struct-enums/enum-non-c-like-repr-int.rs:113:37: 113:54
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:113:53: 113:54
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb51: {
        _68 = <Result<u64, ()> as Try>::branch(move _69) -> bb52; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
                                         // + literal: Const { ty: fn(Result<u64, ()>) -> ControlFlow<<Result<u64, ()> as Try>::Residual, <Result<u64, ()> as Try>::Output> {<Result<u64, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb52: {
        _71 = discriminant(_68);         // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
        switchInt(move _71) -> [0: bb53, 1: bb55, otherwise: bb54]; // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
    }

    bb53: {
        _74 = ((_68 as Continue).0: u64); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
        _67 = _74;                       // scope 37 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
        _78 = &mut (*_2);                // scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:41: 120:44
        _77 = read_u32_le(move _78) -> bb56; // scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:40
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &'b [u8]) -> Result<u32, ()> {read_u32_le}, val: Value(<ZST>) }
    }

    bb54: {
        unreachable;                     // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
    }

    bb55: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _73) -> bb63; // scope 35 at ui/struct-enums/enum-non-c-like-repr-int.rs:119:28: 119:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:119:44: 119:45
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb56: {
        _76 = <Result<u32, ()> as Try>::branch(move _77) -> bb57; // scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
                                         // + literal: Const { ty: fn(Result<u32, ()>) -> ControlFlow<<Result<u32, ()> as Try>::Residual, <Result<u32, ()> as Try>::Output> {<Result<u32, ()> as Try>::branch}, val: Value(<ZST>) }
    }

    bb57: {
        _79 = discriminant(_76);         // scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
        switchInt(move _79) -> [0: bb58, 1: bb60, otherwise: bb59]; // scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
    }

    bb58: {
        _82 = ((_76 as Continue).0: u32); // scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
        _75 = _82;                       // scope 42 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
        _84 = _67;                       // scope 38 at ui/struct-enums/enum-non-c-like-repr-int.rs:121:42: 121:46
        _85 = _75;                       // scope 38 at ui/struct-enums/enum-non-c-like-repr-int.rs:121:48: 121:53
        _83 = Duration::new(move _84, move _85) -> bb61; // scope 38 at ui/struct-enums/enum-non-c-like-repr-int.rs:121:28: 121:54
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:121:28: 121:41
                                         // + literal: Const { ty: fn(u64, u32) -> Duration {Duration::new}, val: Value(<ZST>) }
    }

    bb59: {
        unreachable;                     // scope 33 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
    }

    bb60: {
        _0 = <Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual(move _81) -> bb63; // scope 40 at ui/struct-enums/enum-non-c-like-repr-int.rs:120:29: 120:46
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:120:45: 120:46
                                         // + literal: Const { ty: fn(Result<Infallible, ()>) -> Result<(), ()> {<Result<(), ()> as FromResidual<Result<Infallible, ()>>>::from_residual}, val: Value(<ZST>) }
    }

    bb61: {
        (((*_3).4: MyEnumVariantE).1: std::time::Duration) = move _83; // scope 38 at ui/struct-enums/enum-non-c-like-repr-int.rs:121:17: 121:54
        goto -> bb62;                    // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:122:13: 122:14
    }

    bb62: {
        _0 = const Result::<(), ()>::Ok(()); // scope 3 at ui/struct-enums/enum-non-c-like-repr-int.rs:124:9: 124:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:124:9: 124:15
                                         // + literal: Const { ty: Result<(), ()>, val: Value(Scalar(0x00)) }
        goto -> bb63;                    // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:126:2: 126:2
    }

    bb63: {
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:126:2: 126:2
    }
}

fn read_u64_le(_1: &mut &[u8]) -> Result<u64, ()> {
    debug buf => _1;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _0: std::result::Result<u64, ()>; // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:36: 132:51
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:8: 133:21
    let mut _3: usize;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:8: 133:17
    let mut _4: &[u8];                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:8: 133:17
    let mut _5: ();                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:35: 133:37
    let _6: u64;                         // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:9: 134:12
    let mut _7: u64;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 140:36
    let mut _8: u64;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 139:36
    let mut _9: u64;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 138:36
    let mut _10: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 137:36
    let mut _11: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 136:36
    let mut _12: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 135:35
    let mut _13: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 134:35
    let mut _14: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 134:30
    let mut _15: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:16: 134:22
    let _16: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:20: 134:21
    let mut _17: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:16: 134:22
    let mut _18: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:16: 134:22
    let mut _19: (u64, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 134:35
    let mut _20: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:15: 135:35
    let mut _21: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:15: 135:30
    let mut _22: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:16: 135:22
    let _23: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:20: 135:21
    let mut _24: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:16: 135:22
    let mut _25: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:16: 135:22
    let mut _26: (u64, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:15: 135:35
    let mut _27: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:15: 136:36
    let mut _28: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:15: 136:30
    let mut _29: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:16: 136:22
    let _30: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:20: 136:21
    let mut _31: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:16: 136:22
    let mut _32: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:16: 136:22
    let mut _33: (u64, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:15: 136:36
    let mut _34: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:15: 137:36
    let mut _35: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:15: 137:30
    let mut _36: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:16: 137:22
    let _37: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:20: 137:21
    let mut _38: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:16: 137:22
    let mut _39: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:16: 137:22
    let mut _40: (u64, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:15: 137:36
    let mut _41: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:15: 138:36
    let mut _42: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:15: 138:30
    let mut _43: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:16: 138:22
    let _44: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:20: 138:21
    let mut _45: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:16: 138:22
    let mut _46: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:16: 138:22
    let mut _47: (u64, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:15: 138:36
    let mut _48: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:15: 139:36
    let mut _49: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:15: 139:30
    let mut _50: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:16: 139:22
    let _51: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:20: 139:21
    let mut _52: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:16: 139:22
    let mut _53: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:16: 139:22
    let mut _54: (u64, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:15: 139:36
    let mut _55: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:15: 140:36
    let mut _56: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:15: 140:30
    let mut _57: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:16: 140:22
    let _58: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:20: 140:21
    let mut _59: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:16: 140:22
    let mut _60: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:16: 140:22
    let mut _61: (u64, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:15: 140:36
    let mut _62: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:15: 141:36
    let mut _63: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:15: 141:30
    let mut _64: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:16: 141:22
    let _65: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:20: 141:21
    let mut _66: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:16: 141:22
    let mut _67: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:16: 141:22
    let mut _68: (u64, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:15: 141:36
    let mut _69: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:12: 142:21
    let _70: &[u8];                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:12: 142:21
    let _71: &[u8];                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:13: 142:21
    let mut _72: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:13: 142:16
    let mut _73: std::ops::RangeFrom<usize>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:17: 142:20
    let mut _74: u64;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:143:8: 143:11
    let mut _75: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _76: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _77: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _78: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _79: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _80: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _81: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _82: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _83: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _84: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _85: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _86: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _87: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _88: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _89: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _90: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _91: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    let mut _92: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:132:16: 132:19
    scope 1 {
        debug val => _6;                 // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:9: 134:12
    }

    bb0: {
        _75 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:8: 133:17
        _4 = _75;                        // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:8: 133:17
        _3 = Len((*_4));                 // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:8: 133:17
        _2 = Lt(move _3, const 8_usize); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:8: 133:21
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:8: 133:21
    }

    bb1: {
        _0 = Result::<u64, ()>::Err(move _5); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:133:31: 133:38
        goto -> bb20;                    // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:144:2: 144:2
    }

    bb2: {
        _16 = const 0_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:20: 134:21
        _76 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:16: 134:22
        _17 = Len((*_76));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:16: 134:22
        _18 = Lt(_16, _17);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:16: 134:22
        assert(move _18, "index out of bounds: the length is {} but the index is {}", move _17, _16) -> bb3; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:16: 134:22
    }

    bb3: {
        _77 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:16: 134:22
        _15 = (*_77)[_16];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:16: 134:22
        _14 = move _15 as u64 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 134:30
        _19 = CheckedShl(_14, const 0_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 134:35
        assert(!move (_19.1: bool), "attempt to shift left by `{}`, which would overflow", const 0_i32) -> bb4; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 134:35
    }

    bb4: {
        _13 = move (_19.0: u64);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 134:35
        _23 = const 1_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:20: 135:21
        _78 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:16: 135:22
        _24 = Len((*_78));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:16: 135:22
        _25 = Lt(_23, _24);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:16: 135:22
        assert(move _25, "index out of bounds: the length is {} but the index is {}", move _24, _23) -> bb5; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:16: 135:22
    }

    bb5: {
        _79 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:16: 135:22
        _22 = (*_79)[_23];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:16: 135:22
        _21 = move _22 as u64 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:15: 135:30
        _26 = CheckedShl(_21, const 8_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:15: 135:35
        assert(!move (_26.1: bool), "attempt to shift left by `{}`, which would overflow", const 8_i32) -> bb6; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:15: 135:35
    }

    bb6: {
        _20 = move (_26.0: u64);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:135:15: 135:35
        _12 = BitOr(move _13, move _20); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 135:35
        _30 = const 2_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:20: 136:21
        _80 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:16: 136:22
        _31 = Len((*_80));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:16: 136:22
        _32 = Lt(_30, _31);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:16: 136:22
        assert(move _32, "index out of bounds: the length is {} but the index is {}", move _31, _30) -> bb7; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:16: 136:22
    }

    bb7: {
        _81 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:16: 136:22
        _29 = (*_81)[_30];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:16: 136:22
        _28 = move _29 as u64 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:15: 136:30
        _33 = CheckedShl(_28, const 16_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:15: 136:36
        assert(!move (_33.1: bool), "attempt to shift left by `{}`, which would overflow", const 16_i32) -> bb8; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:15: 136:36
    }

    bb8: {
        _27 = move (_33.0: u64);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:136:15: 136:36
        _11 = BitOr(move _12, move _27); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 136:36
        _37 = const 3_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:20: 137:21
        _82 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:16: 137:22
        _38 = Len((*_82));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:16: 137:22
        _39 = Lt(_37, _38);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:16: 137:22
        assert(move _39, "index out of bounds: the length is {} but the index is {}", move _38, _37) -> bb9; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:16: 137:22
    }

    bb9: {
        _83 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:16: 137:22
        _36 = (*_83)[_37];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:16: 137:22
        _35 = move _36 as u64 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:15: 137:30
        _40 = CheckedShl(_35, const 24_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:15: 137:36
        assert(!move (_40.1: bool), "attempt to shift left by `{}`, which would overflow", const 24_i32) -> bb10; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:15: 137:36
    }

    bb10: {
        _34 = move (_40.0: u64);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:137:15: 137:36
        _10 = BitOr(move _11, move _34); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 137:36
        _44 = const 4_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:20: 138:21
        _84 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:16: 138:22
        _45 = Len((*_84));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:16: 138:22
        _46 = Lt(_44, _45);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:16: 138:22
        assert(move _46, "index out of bounds: the length is {} but the index is {}", move _45, _44) -> bb11; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:16: 138:22
    }

    bb11: {
        _85 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:16: 138:22
        _43 = (*_85)[_44];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:16: 138:22
        _42 = move _43 as u64 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:15: 138:30
        _47 = CheckedShl(_42, const 32_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:15: 138:36
        assert(!move (_47.1: bool), "attempt to shift left by `{}`, which would overflow", const 32_i32) -> bb12; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:15: 138:36
    }

    bb12: {
        _41 = move (_47.0: u64);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:138:15: 138:36
        _9 = BitOr(move _10, move _41);  // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 138:36
        _51 = const 5_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:20: 139:21
        _86 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:16: 139:22
        _52 = Len((*_86));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:16: 139:22
        _53 = Lt(_51, _52);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:16: 139:22
        assert(move _53, "index out of bounds: the length is {} but the index is {}", move _52, _51) -> bb13; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:16: 139:22
    }

    bb13: {
        _87 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:16: 139:22
        _50 = (*_87)[_51];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:16: 139:22
        _49 = move _50 as u64 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:15: 139:30
        _54 = CheckedShl(_49, const 40_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:15: 139:36
        assert(!move (_54.1: bool), "attempt to shift left by `{}`, which would overflow", const 40_i32) -> bb14; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:15: 139:36
    }

    bb14: {
        _48 = move (_54.0: u64);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:139:15: 139:36
        _8 = BitOr(move _9, move _48);   // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 139:36
        _58 = const 6_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:20: 140:21
        _88 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:16: 140:22
        _59 = Len((*_88));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:16: 140:22
        _60 = Lt(_58, _59);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:16: 140:22
        assert(move _60, "index out of bounds: the length is {} but the index is {}", move _59, _58) -> bb15; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:16: 140:22
    }

    bb15: {
        _89 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:16: 140:22
        _57 = (*_89)[_58];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:16: 140:22
        _56 = move _57 as u64 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:15: 140:30
        _61 = CheckedShl(_56, const 48_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:15: 140:36
        assert(!move (_61.1: bool), "attempt to shift left by `{}`, which would overflow", const 48_i32) -> bb16; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:15: 140:36
    }

    bb16: {
        _55 = move (_61.0: u64);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:140:15: 140:36
        _7 = BitOr(move _8, move _55);   // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 140:36
        _65 = const 7_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:20: 141:21
        _90 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:16: 141:22
        _66 = Len((*_90));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:16: 141:22
        _67 = Lt(_65, _66);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:16: 141:22
        assert(move _67, "index out of bounds: the length is {} but the index is {}", move _66, _65) -> bb17; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:16: 141:22
    }

    bb17: {
        _91 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:16: 141:22
        _64 = (*_91)[_65];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:16: 141:22
        _63 = move _64 as u64 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:15: 141:30
        _68 = CheckedShl(_63, const 56_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:15: 141:36
        assert(!move (_68.1: bool), "attempt to shift left by `{}`, which would overflow", const 56_i32) -> bb18; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:15: 141:36
    }

    bb18: {
        _62 = move (_68.0: u64);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:141:15: 141:36
        _6 = BitOr(move _7, move _62);   // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:134:15: 141:36
        _92 = deref_copy (*_1);          // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:13: 142:16
        _72 = _92;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:13: 142:16
        _73 = const RangeFrom::<usize> {{ start: 8_usize }}; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:17: 142:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:142:17: 142:20
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000008)) }
        _71 = <[u8] as Index<RangeFrom<usize>>>::index(move _72, move _73) -> bb19; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:13: 142:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:142:13: 142:21
                                         // + literal: Const { ty: for<'a> fn(&'a [u8], RangeFrom<usize>) -> &'a <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb19: {
        _70 = _71;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:12: 142:21
        _69 = _70;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:12: 142:21
        (*_1) = move _69;                // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:142:5: 142:21
        _74 = _6;                        // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:143:8: 143:11
        _0 = Result::<u64, ()>::Ok(move _74); // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:143:5: 143:12
        goto -> bb20;                    // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:144:2: 144:2
    }

    bb20: {
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:144:2: 144:2
    }
}

fn read_u32_le(_1: &mut &[u8]) -> Result<u32, ()> {
    debug buf => _1;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _0: std::result::Result<u32, ()>; // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:36: 146:51
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:8: 147:21
    let mut _3: usize;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:8: 147:17
    let mut _4: &[u8];                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:8: 147:17
    let mut _5: ();                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:35: 147:37
    let _6: u32;                         // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:9: 148:12
    let mut _7: u32;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 150:36
    let mut _8: u32;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 149:35
    let mut _9: u32;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 148:35
    let mut _10: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 148:30
    let mut _11: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:16: 148:22
    let _12: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:20: 148:21
    let mut _13: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:16: 148:22
    let mut _14: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:16: 148:22
    let mut _15: (u32, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 148:35
    let mut _16: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:15: 149:35
    let mut _17: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:15: 149:30
    let mut _18: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:16: 149:22
    let _19: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:20: 149:21
    let mut _20: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:16: 149:22
    let mut _21: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:16: 149:22
    let mut _22: (u32, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:15: 149:35
    let mut _23: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:15: 150:36
    let mut _24: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:15: 150:30
    let mut _25: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:16: 150:22
    let _26: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:20: 150:21
    let mut _27: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:16: 150:22
    let mut _28: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:16: 150:22
    let mut _29: (u32, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:15: 150:36
    let mut _30: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:15: 151:36
    let mut _31: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:15: 151:30
    let mut _32: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:16: 151:22
    let _33: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:20: 151:21
    let mut _34: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:16: 151:22
    let mut _35: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:16: 151:22
    let mut _36: (u32, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:15: 151:36
    let mut _37: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:12: 152:21
    let _38: &[u8];                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:12: 152:21
    let _39: &[u8];                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:13: 152:21
    let mut _40: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:13: 152:16
    let mut _41: std::ops::RangeFrom<usize>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:17: 152:20
    let mut _42: u32;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:153:8: 153:11
    let mut _43: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _44: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _45: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _46: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _47: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _48: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _49: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _50: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _51: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    let mut _52: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:146:16: 146:19
    scope 1 {
        debug val => _6;                 // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:9: 148:12
    }

    bb0: {
        _43 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:8: 147:17
        _4 = _43;                        // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:8: 147:17
        _3 = Len((*_4));                 // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:8: 147:17
        _2 = Lt(move _3, const 4_usize); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:8: 147:21
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:8: 147:21
    }

    bb1: {
        _0 = Result::<u32, ()>::Err(move _5); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:147:31: 147:38
        goto -> bb12;                    // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:154:2: 154:2
    }

    bb2: {
        _12 = const 0_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:20: 148:21
        _44 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:16: 148:22
        _13 = Len((*_44));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:16: 148:22
        _14 = Lt(_12, _13);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:16: 148:22
        assert(move _14, "index out of bounds: the length is {} but the index is {}", move _13, _12) -> bb3; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:16: 148:22
    }

    bb3: {
        _45 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:16: 148:22
        _11 = (*_45)[_12];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:16: 148:22
        _10 = move _11 as u32 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 148:30
        _15 = CheckedShl(_10, const 0_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 148:35
        assert(!move (_15.1: bool), "attempt to shift left by `{}`, which would overflow", const 0_i32) -> bb4; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 148:35
    }

    bb4: {
        _9 = move (_15.0: u32);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 148:35
        _19 = const 1_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:20: 149:21
        _46 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:16: 149:22
        _20 = Len((*_46));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:16: 149:22
        _21 = Lt(_19, _20);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:16: 149:22
        assert(move _21, "index out of bounds: the length is {} but the index is {}", move _20, _19) -> bb5; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:16: 149:22
    }

    bb5: {
        _47 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:16: 149:22
        _18 = (*_47)[_19];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:16: 149:22
        _17 = move _18 as u32 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:15: 149:30
        _22 = CheckedShl(_17, const 8_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:15: 149:35
        assert(!move (_22.1: bool), "attempt to shift left by `{}`, which would overflow", const 8_i32) -> bb6; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:15: 149:35
    }

    bb6: {
        _16 = move (_22.0: u32);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:149:15: 149:35
        _8 = BitOr(move _9, move _16);   // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 149:35
        _26 = const 2_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:20: 150:21
        _48 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:16: 150:22
        _27 = Len((*_48));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:16: 150:22
        _28 = Lt(_26, _27);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:16: 150:22
        assert(move _28, "index out of bounds: the length is {} but the index is {}", move _27, _26) -> bb7; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:16: 150:22
    }

    bb7: {
        _49 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:16: 150:22
        _25 = (*_49)[_26];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:16: 150:22
        _24 = move _25 as u32 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:15: 150:30
        _29 = CheckedShl(_24, const 16_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:15: 150:36
        assert(!move (_29.1: bool), "attempt to shift left by `{}`, which would overflow", const 16_i32) -> bb8; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:15: 150:36
    }

    bb8: {
        _23 = move (_29.0: u32);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:150:15: 150:36
        _7 = BitOr(move _8, move _23);   // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 150:36
        _33 = const 3_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:20: 151:21
        _50 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:16: 151:22
        _34 = Len((*_50));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:16: 151:22
        _35 = Lt(_33, _34);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:16: 151:22
        assert(move _35, "index out of bounds: the length is {} but the index is {}", move _34, _33) -> bb9; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:16: 151:22
    }

    bb9: {
        _51 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:16: 151:22
        _32 = (*_51)[_33];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:16: 151:22
        _31 = move _32 as u32 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:15: 151:30
        _36 = CheckedShl(_31, const 24_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:15: 151:36
        assert(!move (_36.1: bool), "attempt to shift left by `{}`, which would overflow", const 24_i32) -> bb10; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:15: 151:36
    }

    bb10: {
        _30 = move (_36.0: u32);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:151:15: 151:36
        _6 = BitOr(move _7, move _30);   // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:148:15: 151:36
        _52 = deref_copy (*_1);          // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:13: 152:16
        _40 = _52;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:13: 152:16
        _41 = const RangeFrom::<usize> {{ start: 4_usize }}; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:17: 152:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:152:17: 152:20
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000004)) }
        _39 = <[u8] as Index<RangeFrom<usize>>>::index(move _40, move _41) -> bb11; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:13: 152:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:152:13: 152:21
                                         // + literal: Const { ty: for<'a> fn(&'a [u8], RangeFrom<usize>) -> &'a <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb11: {
        _38 = _39;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:12: 152:21
        _37 = _38;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:12: 152:21
        (*_1) = move _37;                // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:152:5: 152:21
        _42 = _6;                        // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:153:8: 153:11
        _0 = Result::<u32, ()>::Ok(move _42); // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:153:5: 153:12
        goto -> bb12;                    // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:154:2: 154:2
    }

    bb12: {
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:154:2: 154:2
    }
}

fn read_u16_le(_1: &mut &[u8]) -> Result<u16, ()> {
    debug buf => _1;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:156:16: 156:19
    let mut _0: std::result::Result<u16, ()>; // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:156:36: 156:51
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:8: 157:21
    let mut _3: usize;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:8: 157:17
    let mut _4: &[u8];                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:8: 157:17
    let mut _5: ();                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:35: 157:37
    let _6: u16;                         // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:9: 158:12
    let mut _7: u16;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:15: 158:35
    let mut _8: u16;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:15: 158:30
    let mut _9: u8;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:16: 158:22
    let _10: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:20: 158:21
    let mut _11: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:16: 158:22
    let mut _12: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:16: 158:22
    let mut _13: (u16, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:15: 158:35
    let mut _14: u16;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:15: 159:35
    let mut _15: u16;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:15: 159:30
    let mut _16: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:16: 159:22
    let _17: usize;                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:20: 159:21
    let mut _18: usize;                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:16: 159:22
    let mut _19: bool;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:16: 159:22
    let mut _20: (u16, bool);            // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:15: 159:35
    let mut _21: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:12: 160:21
    let _22: &[u8];                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:12: 160:21
    let _23: &[u8];                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:13: 160:21
    let mut _24: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:13: 160:16
    let mut _25: std::ops::RangeFrom<usize>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:17: 160:20
    let mut _26: u16;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:161:8: 161:11
    let mut _27: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:156:16: 156:19
    let mut _28: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:156:16: 156:19
    let mut _29: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:156:16: 156:19
    let mut _30: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:156:16: 156:19
    let mut _31: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:156:16: 156:19
    let mut _32: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:156:16: 156:19
    scope 1 {
        debug val => _6;                 // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:9: 158:12
    }

    bb0: {
        _27 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:8: 157:17
        _4 = _27;                        // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:8: 157:17
        _3 = Len((*_4));                 // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:8: 157:17
        _2 = Lt(move _3, const 2_usize); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:8: 157:21
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:8: 157:21
    }

    bb1: {
        _0 = Result::<u16, ()>::Err(move _5); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:157:31: 157:38
        goto -> bb8;                     // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:162:2: 162:2
    }

    bb2: {
        _10 = const 0_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:20: 158:21
        _28 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:16: 158:22
        _11 = Len((*_28));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:16: 158:22
        _12 = Lt(_10, _11);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:16: 158:22
        assert(move _12, "index out of bounds: the length is {} but the index is {}", move _11, _10) -> bb3; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:16: 158:22
    }

    bb3: {
        _29 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:16: 158:22
        _9 = (*_29)[_10];                // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:16: 158:22
        _8 = move _9 as u16 (IntToInt);  // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:15: 158:30
        _13 = CheckedShl(_8, const 0_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:15: 158:35
        assert(!move (_13.1: bool), "attempt to shift left by `{}`, which would overflow", const 0_i32) -> bb4; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:15: 158:35
    }

    bb4: {
        _7 = move (_13.0: u16);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:15: 158:35
        _17 = const 1_usize;             // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:20: 159:21
        _30 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:16: 159:22
        _18 = Len((*_30));               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:16: 159:22
        _19 = Lt(_17, _18);              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:16: 159:22
        assert(move _19, "index out of bounds: the length is {} but the index is {}", move _18, _17) -> bb5; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:16: 159:22
    }

    bb5: {
        _31 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:16: 159:22
        _16 = (*_31)[_17];               // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:16: 159:22
        _15 = move _16 as u16 (IntToInt); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:15: 159:30
        _20 = CheckedShl(_15, const 8_i32); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:15: 159:35
        assert(!move (_20.1: bool), "attempt to shift left by `{}`, which would overflow", const 8_i32) -> bb6; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:15: 159:35
    }

    bb6: {
        _14 = move (_20.0: u16);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:159:15: 159:35
        _6 = BitOr(move _7, move _14);   // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:158:15: 159:35
        _32 = deref_copy (*_1);          // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:13: 160:16
        _24 = _32;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:13: 160:16
        _25 = const RangeFrom::<usize> {{ start: 2_usize }}; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:17: 160:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:160:17: 160:20
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000002)) }
        _23 = <[u8] as Index<RangeFrom<usize>>>::index(move _24, move _25) -> bb7; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:13: 160:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:160:13: 160:21
                                         // + literal: Const { ty: for<'a> fn(&'a [u8], RangeFrom<usize>) -> &'a <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = _23;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:12: 160:21
        _21 = _22;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:12: 160:21
        (*_1) = move _21;                // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:160:5: 160:21
        _26 = _6;                        // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:161:8: 161:11
        _0 = Result::<u16, ()>::Ok(move _26); // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:161:5: 161:12
        goto -> bb8;                     // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:162:2: 162:2
    }

    bb8: {
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:162:2: 162:2
    }
}

fn read_u8(_1: &mut &[u8]) -> Result<u8, ()> {
    debug buf => _1;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:164:12: 164:15
    let mut _0: std::result::Result<u8, ()>; // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:164:32: 164:46
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:8: 165:21
    let mut _3: usize;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:8: 165:17
    let mut _4: &[u8];                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:8: 165:17
    let mut _5: ();                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:35: 165:37
    let _6: u8;                          // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:9: 166:12
    let _7: usize;                       // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:19: 166:20
    let mut _8: usize;                   // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:15: 166:21
    let mut _9: bool;                    // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:15: 166:21
    let mut _10: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:12: 167:21
    let _11: &[u8];                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:12: 167:21
    let _12: &[u8];                      // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:13: 167:21
    let mut _13: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:13: 167:16
    let mut _14: std::ops::RangeFrom<usize>; // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:17: 167:20
    let mut _15: u8;                     // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:168:8: 168:11
    let mut _16: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:164:12: 164:15
    let mut _17: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:164:12: 164:15
    let mut _18: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:164:12: 164:15
    let mut _19: &[u8];                  // in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:164:12: 164:15
    scope 1 {
        debug val => _6;                 // in scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:9: 166:12
    }

    bb0: {
        _16 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:8: 165:17
        _4 = _16;                        // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:8: 165:17
        _3 = Len((*_4));                 // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:8: 165:17
        _2 = Lt(move _3, const 1_usize); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:8: 165:21
        switchInt(move _2) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:8: 165:21
    }

    bb1: {
        _0 = Result::<u8, ()>::Err(move _5); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:165:31: 165:38
        goto -> bb5;                     // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:169:2: 169:2
    }

    bb2: {
        _7 = const 0_usize;              // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:19: 166:20
        _17 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:15: 166:21
        _8 = Len((*_17));                // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:15: 166:21
        _9 = Lt(_7, _8);                 // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:15: 166:21
        assert(move _9, "index out of bounds: the length is {} but the index is {}", move _8, _7) -> bb3; // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:15: 166:21
    }

    bb3: {
        _18 = deref_copy (*_1);          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:15: 166:21
        _6 = (*_18)[_7];                 // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:166:15: 166:21
        _19 = deref_copy (*_1);          // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:13: 167:16
        _13 = _19;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:13: 167:16
        _14 = const RangeFrom::<usize> {{ start: 1_usize }}; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:17: 167:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:167:17: 167:20
                                         // + literal: Const { ty: RangeFrom<usize>, val: Value(Scalar(0x0000000000000001)) }
        _12 = <[u8] as Index<RangeFrom<usize>>>::index(move _13, move _14) -> bb4; // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:13: 167:21
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-non-c-like-repr-int.rs:167:13: 167:21
                                         // + literal: Const { ty: for<'a> fn(&'a [u8], RangeFrom<usize>) -> &'a <[u8] as Index<RangeFrom<usize>>>::Output {<[u8] as Index<RangeFrom<usize>>>::index}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = _12;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:12: 167:21
        _10 = _11;                       // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:12: 167:21
        (*_1) = move _10;                // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:167:5: 167:21
        _15 = _6;                        // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:168:8: 168:11
        _0 = Result::<u8, ()>::Ok(move _15); // scope 1 at ui/struct-enums/enum-non-c-like-repr-int.rs:168:5: 168:12
        goto -> bb5;                     // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:169:2: 169:2
    }

    bb5: {
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:169:2: 169:2
    }
}

fn MyEnum::A(_1: u32) -> MyEnum {
    let mut _0: MyEnum;                  // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:5: 13:6

    bb0: {
        _0 = MyEnum::A(move _1);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:5: 13:6
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:5: 13:6
    }
}

// MIR FOR CTFE
fn MyEnum::A(_1: u32) -> MyEnum {
    let mut _0: MyEnum;                  // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:5: 13:6

    bb0: {
        _0 = MyEnum::A(move _1);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:5: 13:6
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:13:5: 13:6
    }
}

fn MyEnum::D(_1: Option<u32>) -> MyEnum {
    let mut _0: MyEnum;                  // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:5: 17:6

    bb0: {
        _0 = MyEnum::D(move _1);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:5: 17:6
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:5: 17:6
    }
}

// MIR FOR CTFE
fn MyEnum::D(_1: Option<u32>) -> MyEnum {
    let mut _0: MyEnum;                  // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:5: 17:6

    bb0: {
        _0 = MyEnum::D(move _1);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:5: 17:6
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:17:5: 17:6
    }
}

fn MyEnum::E(_1: Duration) -> MyEnum {
    let mut _0: MyEnum;                  // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:5: 18:6

    bb0: {
        _0 = MyEnum::E(move _1);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:5: 18:6
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:5: 18:6
    }
}

// MIR FOR CTFE
fn MyEnum::E(_1: Duration) -> MyEnum {
    let mut _0: MyEnum;                  // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:5: 18:6

    bb0: {
        _0 = MyEnum::E(move _1);         // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:5: 18:6
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:18:5: 18:6
    }
}

fn MyEnumVariantA(_1: MyEnumTag, _2: u32) -> MyEnumVariantA {
    let mut _0: MyEnumVariantA;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:35: 32:56

    bb0: {
        _0 = MyEnumVariantA(move _1, move _2); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:35: 32:56
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:35: 32:56
    }
}

// MIR FOR CTFE
fn MyEnumVariantA(_1: MyEnumTag, _2: u32) -> MyEnumVariantA {
    let mut _0: MyEnumVariantA;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:35: 32:56

    bb0: {
        _0 = MyEnumVariantA(move _1, move _2); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:35: 32:56
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:32:35: 32:56
    }
}

fn MyEnumVariantC(_1: MyEnumTag) -> MyEnumVariantC {
    let mut _0: MyEnumVariantC;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:35: 34:56

    bb0: {
        _0 = MyEnumVariantC(move _1);    // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:35: 34:56
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:35: 34:56
    }
}

// MIR FOR CTFE
fn MyEnumVariantC(_1: MyEnumTag) -> MyEnumVariantC {
    let mut _0: MyEnumVariantC;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:35: 34:56

    bb0: {
        _0 = MyEnumVariantC(move _1);    // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:35: 34:56
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:34:35: 34:56
    }
}

fn MyEnumVariantD(_1: MyEnumTag, _2: Option<u32>) -> MyEnumVariantD {
    let mut _0: MyEnumVariantD;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:35: 35:56

    bb0: {
        _0 = MyEnumVariantD(move _1, move _2); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:35: 35:56
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:35: 35:56
    }
}

// MIR FOR CTFE
fn MyEnumVariantD(_1: MyEnumTag, _2: Option<u32>) -> MyEnumVariantD {
    let mut _0: MyEnumVariantD;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:35: 35:56

    bb0: {
        _0 = MyEnumVariantD(move _1, move _2); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:35: 35:56
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:35:35: 35:56
    }
}

fn MyEnumVariantE(_1: MyEnumTag, _2: Duration) -> MyEnumVariantE {
    let mut _0: MyEnumVariantE;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:35: 36:56

    bb0: {
        _0 = MyEnumVariantE(move _1, move _2); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:35: 36:56
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:35: 36:56
    }
}

// MIR FOR CTFE
fn MyEnumVariantE(_1: MyEnumTag, _2: Duration) -> MyEnumVariantE {
    let mut _0: MyEnumVariantE;          // return place in scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:35: 36:56

    bb0: {
        _0 = MyEnumVariantE(move _1, move _2); // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:35: 36:56
        return;                          // scope 0 at ui/struct-enums/enum-non-c-like-repr-int.rs:36:35: 36:56
    }
}
