// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn default_instance() -> &Request {
    let mut _0: &Request;                // return place in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:39:5: 39:14
    let _1: &Request;                    // in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:39:6: 39:14

    bb0: {
        _1 = const {alloc1: &Request};   // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:39:6: 39:14
                                         // mir::Constant
                                         // + span: ui/struct-enums/codegen-tag-static-padding.rs:39:6: 39:14
                                         // + literal: Const { ty: &Request, val: Value(Scalar(alloc1)) }
        _0 = _1;                         // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:39:5: 39:14
        return;                          // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:40:2: 40:2
    }
}

alloc1 (static: default_instance::instance, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 __ __ __ __ __ __ __ __ │ ........░░░░░░░░
    0x10 │ 11 __ __ __ __ __ __ __                         │ .░░░░░░░
}

static default_instance::instance: Request = {
    let mut _0: Request;                 // return place in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:28:22: 28:29
    let mut _1: TestOption<u64>;         // in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:31:14: 31:34

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:31:14: 31:34
        _1 = TestOption::<u64>::TestNone; // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:31:14: 31:34
        _0 = Request { foo: move _1, bar: const 17_u8 }; // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:28:32: 38:6
        StorageDead(_1);                 // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:38:5: 38:6
        return;                          // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:28:5: 38:7
    }
}

fn non_default_instance() -> &Request {
    let mut _0: &Request;                // return place in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:47:5: 47:14
    let _1: &Request;                    // in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:47:6: 47:14

    bb0: {
        _1 = const {alloc2: &Request};   // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:47:6: 47:14
                                         // mir::Constant
                                         // + span: ui/struct-enums/codegen-tag-static-padding.rs:47:6: 47:14
                                         // + literal: Const { ty: &Request, val: Value(Scalar(alloc2)) }
        _0 = _1;                         // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:47:5: 47:14
        return;                          // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:48:2: 48:2
    }
}

alloc2 (static: non_default_instance::instance, size: 24, align: 8) {
    0x00 │ 01 00 00 00 00 00 00 00 80 70 60 50 40 30 20 10 │ .........p`P@0 .
    0x10 │ 13 __ __ __ __ __ __ __                         │ .░░░░░░░
}

static non_default_instance::instance: Request = {
    let mut _0: Request;                 // return place in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:43:22: 43:29
    let mut _1: TestOption<u64>;         // in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:44:14: 44:54

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:44:14: 44:54
        _1 = TestOption::<u64>::TestSome(const 1161981756646125696_u64); // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:44:14: 44:54
        _0 = Request { foo: move _1, bar: const 19_u8 }; // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:43:32: 46:6
        StorageDead(_1);                 // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:46:5: 46:6
        return;                          // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:43:5: 46:7
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:50:15: 50:15
    let mut _1: &Request;                // in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:51:11: 51:29
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:52:25: 52:45
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _4: &Request;                // in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:55:11: 55:33
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:56:25: 56:65
    let mut _6: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = default_instance() -> bb1;  // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:51:11: 51:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/codegen-tag-static-padding.rs:51:11: 51:27
                                         // + literal: Const { ty: fn() -> &'static Request {default_instance}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = discriminant(((*_1).0: TestOption<u64>)); // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:51:11: 51:29
        switchInt(move _2) -> [0: bb2, otherwise: bb3]; // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:51:5: 51:29
    }

    bb2: {
        switchInt(((*_1).1: u8)) -> [17: bb4, otherwise: bb3]; // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:51:5: 51:29
    }

    bb3: {
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _4 = non_default_instance() -> bb5; // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:55:11: 55:33
                                         // mir::Constant
                                         // + span: ui/struct-enums/codegen-tag-static-padding.rs:55:11: 55:31
                                         // + literal: Const { ty: fn() -> &'static Request {non_default_instance}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = discriminant(((*_4).0: TestOption<u64>)); // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:55:11: 55:33
        switchInt(move _5) -> [1: bb7, otherwise: bb6]; // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:55:5: 55:33
    }

    bb6: {
        _6 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(((*_4).1: u8)) -> [19: bb8, otherwise: bb6]; // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:55:5: 55:33
    }

    bb8: {
        switchInt(((((*_4).0: TestOption<u64>) as TestSome).0: u64)) -> [1161981756646125696: bb9, otherwise: bb6]; // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:55:5: 55:33
    }

    bb9: {
        return;                          // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:59:2: 59:2
    }
}

fn TestOption::TestSome(_1: T) -> TestOption<T> {
    let mut _0: TestOption<T>;           // return place in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:19:5: 19:13

    bb0: {
        _0 = TestOption::<T>::TestSome(move _1); // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:19:5: 19:13
        return;                          // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:19:5: 19:13
    }
}

// MIR FOR CTFE
fn TestOption::TestSome(_1: T) -> TestOption<T> {
    let mut _0: TestOption<T>;           // return place in scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:19:5: 19:13

    bb0: {
        _0 = TestOption::<T>::TestSome(move _1); // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:19:5: 19:13
        return;                          // scope 0 at ui/struct-enums/codegen-tag-static-padding.rs:19:5: 19:13
    }
}
