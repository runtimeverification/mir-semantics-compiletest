// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Flopsy::Bunny::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/enum-vec-initializer.rs:5:13: 5:14

    bb0: {
        _0 = const 2_isize;              // scope 0 at ui/struct-enums/enum-vec-initializer.rs:5:13: 5:14
        return;                          // scope 0 at ui/struct-enums/enum-vec-initializer.rs:5:13: 5:14
    }
}

const BAR: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:11: 8:16
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:19: 8:41
    let mut _2: (isize, bool);           // in scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:19: 8:41

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:19: 8:41
        _2 = CheckedAdd(const _, const 0_isize); // scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:19: 8:41
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> bb1; // scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:19: 8:41
    }

    bb1: {
        _1 = move (_2.0: isize);         // scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:19: 8:41
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:19: 8:41
        StorageDead(_1);                 // scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:40: 8:41
        return;                          // scope 0 at ui/struct-enums/enum-vec-initializer.rs:8:1: 8:42
    }
}

const BAR2: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/enum-vec-initializer.rs:9:12: 9:17

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/enum-vec-initializer.rs:9:20: 9:23
        return;                          // scope 0 at ui/struct-enums/enum-vec-initializer.rs:9:1: 9:24
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/enum-vec-initializer.rs:11:15: 11:15
    let _1: [i32; 2];                    // in scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:9: 12:11
    scope 1 {
        debug _v => _1;                  // in scope 1 at ui/struct-enums/enum-vec-initializer.rs:12:9: 12:11
        let _2: [i32; 2];                // in scope 1 at ui/struct-enums/enum-vec-initializer.rs:13:9: 13:11
        scope 2 {
            debug _v => _2;              // in scope 2 at ui/struct-enums/enum-vec-initializer.rs:13:9: 13:11
            let _3: [i32; 2];            // in scope 2 at ui/struct-enums/enum-vec-initializer.rs:14:9: 14:11
            scope 3 {
                debug _v => _3;          // in scope 3 at ui/struct-enums/enum-vec-initializer.rs:14:9: 14:11
                let _4: [i32; 2];        // in scope 3 at ui/struct-enums/enum-vec-initializer.rs:16:9: 16:11
                scope 4 {
                    debug _v => _4;      // in scope 4 at ui/struct-enums/enum-vec-initializer.rs:16:9: 16:11
                }
            }
        }
    }

    bb0: {
        _1 = [const 0_i32; 2];           // scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:14: 12:42
        _2 = [const 0_i32; 2];           // scope 1 at ui/struct-enums/enum-vec-initializer.rs:13:14: 13:23
        _3 = [const 0_i32; 2];           // scope 2 at ui/struct-enums/enum-vec-initializer.rs:14:14: 14:24
        _4 = [const 0_i32; 2];           // scope 3 at ui/struct-enums/enum-vec-initializer.rs:16:14: 16:24
        return;                          // scope 0 at ui/struct-enums/enum-vec-initializer.rs:17:2: 17:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:19: 12:41
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:19: 12:41
    let mut _2: (isize, bool);           // in scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:19: 12:41

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:19: 12:41
        _2 = CheckedAdd(const _, const 0_isize); // scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:19: 12:41
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", const _, const 0_isize) -> bb1; // scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:19: 12:41
    }

    bb1: {
        _1 = move (_2.0: isize);         // scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:19: 12:41
        _0 = move _1 as usize (IntToInt); // scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:19: 12:41
        StorageDead(_1);                 // scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:40: 12:41
        return;                          // scope 0 at ui/struct-enums/enum-vec-initializer.rs:12:19: 12:41
    }
}

main::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/enum-vec-initializer.rs:13:19: 13:22

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/enum-vec-initializer.rs:13:19: 13:22
        return;                          // scope 0 at ui/struct-enums/enum-vec-initializer.rs:13:19: 13:22
    }
}

main::{constant#2}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/enum-vec-initializer.rs:14:19: 14:23

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/enum-vec-initializer.rs:14:19: 14:23
        return;                          // scope 0 at ui/struct-enums/enum-vec-initializer.rs:14:19: 14:23
    }
}

const BAR3: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/enum-vec-initializer.rs:15:16: 15:21

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/enum-vec-initializer.rs:15:24: 15:28
        return;                          // scope 0 at ui/struct-enums/enum-vec-initializer.rs:15:5: 15:29
    }
}

main::{constant#3}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/enum-vec-initializer.rs:16:19: 16:23

    bb0: {
        _0 = const _;                    // scope 0 at ui/struct-enums/enum-vec-initializer.rs:16:19: 16:23
        return;                          // scope 0 at ui/struct-enums/enum-vec-initializer.rs:16:19: 16:23
    }
}
