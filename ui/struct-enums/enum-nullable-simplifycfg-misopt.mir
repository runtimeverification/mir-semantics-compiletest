// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:10:15: 10:15
    let mut _1: List<i32>;               // in scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:11: 11:46
    let mut _2: std::boxed::Box<List<i32>>; // in scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:26: 11:45
    let mut _3: List<i32>;               // in scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:35: 11:44
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:12:9: 12:26
    let mut _5: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _3 = List::<i32>::Nil;           // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:35: 11:44
        _2 = Box::<List<i32>>::new(move _3) -> bb1; // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:26: 11:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:26: 11:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(List<i32>) -> Box<List<i32>> {Box::<List<i32>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = List::<i32>::Cons(const 10_i32, move _2); // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:11: 11:46
        _4 = discriminant(_1);           // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:11: 11:46
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb8]; // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:5: 11:46
    }

    bb2: {
        switchInt(((_1 as Cons).0: i32)) -> [10: bb4, otherwise: bb3]; // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:11:5: 11:46
    }

    bb3: {
        _5 = begin_panic::<&str>(const "explicit panic") -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:16:1: 16:2
    }

    bb5: {
        return;                          // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:16:2: 16:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:16:1: 16:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:10:1: 16:2
    }

    bb8: {
        unreachable;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    }
}

fn List::Cons(_1: X, _2: Box<List<X>>) -> List<X> {
    let mut _0: List<X>;                 // return place in scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:9:21: 9:25

    bb0: {
        _0 = List::<X>::Cons(move _1, move _2); // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:9:21: 9:25
        return;                          // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:9:21: 9:25
    }
}

// MIR FOR CTFE
fn List::Cons(_1: X, _2: Box<List<X>>) -> List<X> {
    let mut _0: List<X>;                 // return place in scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:9:21: 9:25

    bb0: {
        _0 = List::<X>::Cons(move _1, move _2); // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:9:21: 9:25
        return;                          // scope 0 at ui/struct-enums/enum-nullable-simplifycfg-misopt.rs:9:21: 9:25
    }
}
