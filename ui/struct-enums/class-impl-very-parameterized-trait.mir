// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:16: 7:21>::clone(_1: &cat_type) -> cat_type {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:16: 7:21
    let mut _0: cat_type;                // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:16: 7:21

    bb0: {
        _0 = (*_1);                      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:16: 7:21
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:21: 7:21
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28>::fmt(_1: &cat_type, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    debug f => _2;                       // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    let _6: &str;                        // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    let _7: &str;                        // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    let _8: &str;                        // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
        _5 = discriminant((*_1));        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
        switchInt(move _5) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    }

    bb1: {
        _8 = const "tortoiseshell";      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _8;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
        goto -> bb5;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:27: 7:28
    }

    bb2: {
        unreachable;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
    }

    bb3: {
        _6 = const "tuxedo";             // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _6;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
        goto -> bb5;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:27: 7:28
    }

    bb4: {
        _7 = const "tabby";              // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _7;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
        goto -> bb5;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:27: 7:28
    }

    bb5: {
        _0 = Formatter::<'_>::write_str(move _3, move _4) -> bb6; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:7:23: 7:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Formatter<'_>, &'b str) -> Result<(), std::fmt::Error> {Formatter::<'_>::write_str}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:7:28: 7:28
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:10:1: 10:33>::eq(_1: &cat_type, _2: &cat_type) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:11:11: 11:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:11:18: 11:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:11:39: 11:43
    let mut _3: usize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:27
    let _4: cat_type;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:10: 12:17
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:10: 12:17
    let mut _6: bool;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:27
    let mut _7: bool;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:27
    let mut _8: usize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:31: 12:50
    let _9: cat_type;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:32: 12:40
    let mut _10: isize;                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:32: 12:40
    let mut _11: bool;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:31: 12:50
    let mut _12: bool;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:31: 12:50

    bb0: {
        _4 = (*_1);                      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:10: 12:17
        _5 = discriminant(_4);           // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:27
        _6 = Ge(const 2_isize, _5);      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:27
        assume(_6);                      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:27
        _7 = Le(const 0_isize, _5);      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:27
        assume(_7);                      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:27
        _3 = move _5 as usize (IntToInt); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:27
        _9 = (*_2);                      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:32: 12:40
        _10 = discriminant(_9);          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:31: 12:50
        _11 = Ge(const 2_isize, _10);    // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:31: 12:50
        assume(_11);                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:31: 12:50
        _12 = Le(const 0_isize, _10);    // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:31: 12:50
        assume(_12);                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:31: 12:50
        _8 = move _10 as usize (IntToInt); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:31: 12:50
        _0 = Eq(move _3, move _8);       // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:12:9: 12:50
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:13:6: 13:6
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:10:1: 10:33>::ne(_1: &cat_type, _2: &cat_type) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:11: 14:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:18: 14:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:39: 14:43
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:47: 14:64
    let mut _4: &cat_type;               // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:47: 14:64
    let mut _5: &cat_type;               // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:58: 14:63

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:47: 14:64
        _5 = _2;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:58: 14:63
        _3 = <cat_type as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:47: 14:64
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:14:55: 14:57
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a cat_type, &'b cat_type) -> bool {<cat_type as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:46: 14:64
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:14:66: 14:66
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::speak(_1: &mut cat<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:30:18: 30:27
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:30:29: 30:29
    let _2: ();                          // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:30:31: 30:42
    let mut _3: &mut cat<T>;             // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:30:31: 30:42

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:30:31: 30:42
        _2 = cat::<T>::meow(move _3) -> bb1; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:30:31: 30:42
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:30:36: 30:40
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat<T>) {cat::<T>::meow}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:30:45: 30:45
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::eat(_1: &mut cat<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:32:16: 32:25
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:32:30: 32:34
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:33:12: 33:31
    let mut _3: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:33:12: 33:27
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
    let mut _7: &[&str; 1];              // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
    let _8: &[&str; 1];                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: (isize, bool);          // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:35:13: 35:33
    let _13: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str];                // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
    let mut _16: &[&str; 1];             // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
    let _17: &[&str; 1];                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _19: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _20: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _21: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: &[&str; 1];             // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
    let mut _23: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: &[&str; 1];             // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34

    bb0: {
        _3 = ((*_1).1: isize);           // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:33:12: 33:27
        _2 = Gt(move _3, const 0_isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:33:12: 33:31
        switchInt(move _2) -> [0: bb5, otherwise: bb1]; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:33:12: 33:31
    }

    bb1: {
        _24 = const _;                   // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(cat::<T>::eat, [T], Some(promoted[3])) }
        _8 = _24;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
        _7 = _8;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
        _23 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(cat::<T>::eat, [T], Some(promoted[2])) }
        _11 = _23;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = _print(move _5) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = CheckedSub(((*_1).1: isize), const 2_isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:35:13: 35:33
        assert(!move (_12.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).1: isize), const 2_isize) -> bb4; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:35:13: 35:33
    }

    bb4: {
        ((*_1).1: isize) = move (_12.0: isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:35:13: 35:33
        _0 = const true;                 // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:36:20: 36:24
        goto -> bb8;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:36:13: 36:24
    }

    bb5: {
        _22 = const _;                   // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(cat::<T>::eat, [T], Some(promoted[1])) }
        _17 = _22;                       // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
        _16 = _17;                       // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
        _15 = move _16 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
        _21 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(cat::<T>::eat, [T], Some(promoted[0])) }
        _20 = _21;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = _20;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = move _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = _print(move _14) -> bb7;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        _0 = const false;                // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:39:20: 39:25
        goto -> bb8;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:39:13: 39:25
    }

    bb8: {
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:41:6: 41:6
    }
}

promoted[0] in <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::eat: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::eat: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35

    bb0: {
        _1 = [const "Not hungry!\n"];    // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:38:22: 38:35
    }
}

promoted[2] in <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::eat: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[3] in <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::eat: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34

    bb0: {
        _1 = [const "OM NOM NOM\n"];     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:34:22: 34:34
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::len(_1: &cat<T>) -> usize {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:42:12: 42:17
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:42:22: 42:27
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:42:30: 42:40

    bb0: {
        _2 = ((*_1).0: isize);           // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:42:30: 42:40
        _0 = move _2 as usize (IntToInt); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:42:30: 42:49
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:42:51: 42:51
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::is_empty(_1: &cat<T>) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:43:17: 43:22
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:43:27: 43:31
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:43:34: 43:44

    bb0: {
        _2 = ((*_1).0: isize);           // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:43:34: 43:44
        _0 = Eq(move _2, const 0_isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:43:34: 43:49
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:43:51: 43:51
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::clear(_1: &mut cat<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:44:14: 44:23
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:44:25: 44:25

    bb0: {
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:44:27: 44:27
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::contains_key(_1: &cat<T>, _2: &isize) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:45:21: 45:26
    debug k => _2;                       // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:45:28: 45:29
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:45:42: 45:46
    let mut _3: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:45:49: 45:51
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:45:55: 45:65

    bb0: {
        _3 = (*_2);                      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:45:49: 45:51
        _4 = ((*_1).0: isize);           // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:45:55: 45:65
        _0 = Le(move _3, move _4);       // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:45:49: 45:65
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:45:67: 45:67
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::find(_1: &cat<T>, _2: &isize) -> Option<&T> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:47:13: 47:18
    debug k => _2;                       // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:47:20: 47:21
    let mut _0: std::option::Option<&T>; // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:47:34: 47:44
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:48:12: 48:28
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:48:12: 48:14
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:48:18: 48:28
    let mut _6: &T;                      // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:49:18: 49:28
    let _7: &T;                          // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:49:18: 49:28

    bb0: {
        _4 = (*_2);                      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:48:12: 48:14
        _5 = ((*_1).0: isize);           // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:48:18: 48:28
        _3 = Le(move _4, move _5);       // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:48:12: 48:28
        switchInt(move _3) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:48:12: 48:28
    }

    bb1: {
        _7 = &((*_1).2: T);              // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:49:18: 49:28
        _6 = _7;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:49:18: 49:28
        _0 = Option::<&T>::Some(move _6); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:49:13: 49:29
        goto -> bb3;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:48:9: 52:10
    }

    bb2: {
        _0 = Option::<&T>::None;         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:51:13: 51:17
        goto -> bb3;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:48:9: 52:10
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:53:6: 53:6
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::insert(_1: &mut cat<T>, _2: isize, _3: T) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:54:15: 54:24
    debug k => _2;                       // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:54:26: 54:27
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:54:45: 54:49
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:55:23: 55:24
    let mut _5: (isize, bool);           // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:55:9: 55:24

    bb0: {
        _4 = _2;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:55:23: 55:24
        _5 = CheckedAdd(((*_1).0: isize), _4); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:55:9: 55:24
        assert(!move (_5.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: isize), move _4) -> [success: bb1, unwind: bb3]; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:55:9: 55:24
    }

    bb1: {
        ((*_1).0: isize) = move (_5.0: isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:55:9: 55:24
        _0 = const true;                 // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:56:9: 56:13
        drop(_3) -> bb2;                 // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:57:5: 57:6
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:57:6: 57:6
    }

    bb3 (cleanup): {
        drop(_3) -> bb4;                 // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:57:5: 57:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:54:5: 57:6
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::find_mut(_1: &mut cat<T>, _2: &isize) -> Option<&mut T> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:59:17: 59:26
    debug _k => _2;                      // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:59:28: 59:30
    let mut _0: std::option::Option<&mut T>; // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:59:43: 59:57
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::remove(_1: &mut cat<T>, _2: &isize) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:61:15: 61:24
    debug k => _2;                       // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:61:26: 61:27
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:61:40: 61:44
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:12: 62:34
    let mut _4: &std::option::Option<&T>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:12: 62:34
    let _5: std::option::Option<&T>;     // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:12: 62:24
    let mut _6: &cat<T>;                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:12: 62:24
    let mut _7: &isize;                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:22: 62:23
    let mut _8: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:63:27: 63:29
    let mut _9: (isize, bool);           // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:63:13: 63:29

    bb0: {
        _6 = &(*_1);                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:12: 62:24
        _7 = _2;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:22: 62:23
        _5 = cat::<T>::find(move _6, move _7) -> bb1; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:12: 62:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:62:17: 62:21
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a cat<T>, &'b isize) -> Option<&'a T> {cat::<T>::find}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:12: 62:34
        _3 = Option::<&T>::is_some(move _4) -> bb2; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:12: 62:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:62:25: 62:32
                                         // + literal: Const { ty: for<'a> fn(&'a Option<&T>) -> bool {Option::<&T>::is_some}, val: Value(<ZST>) }
    }

    bb2: {
        switchInt(move _3) -> [0: bb5, otherwise: bb3]; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:12: 62:34
    }

    bb3: {
        _8 = (*_2);                      // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:63:27: 63:29
        _9 = CheckedSub(((*_1).0: isize), _8); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:63:13: 63:29
        assert(!move (_9.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).0: isize), move _8) -> bb4; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:63:13: 63:29
    }

    bb4: {
        ((*_1).0: isize) = move (_9.0: isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:63:13: 63:29
        _0 = const true;                 // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:63:31: 63:35
        goto -> bb6;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:9: 66:10
    }

    bb5: {
        _0 = const false;                // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:65:13: 65:18
        goto -> bb6;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:62:9: 66:10
    }

    bb6: {
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:67:6: 67:6
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::pop(_1: &mut cat<T>, _2: &isize) -> Option<T> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:69:12: 69:21
    debug _k => _2;                      // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:69:23: 69:25
    let mut _0: std::option::Option<T>;  // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:69:38: 69:47
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:29:1: 29:15>::swap(_1: &mut cat<T>, _2: isize, _3: T) -> Option<T> {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:71:13: 71:22
    debug _k => _2;                      // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:71:24: 71:26
    debug _v => _3;                      // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:71:35: 71:37
    let mut _0: std::option::Option<T>;  // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:71:45: 71:54
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _4 = begin_panic::<&str>(const "explicit panic") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_3) -> bb2;                 // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:71:66: 71:67
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:71:5: 71:67
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:74:1: 74:15>::get(_1: &cat<T>, _2: &isize) -> &T {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:75:16: 75:21
    debug k => _2;                       // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:75:23: 75:24
    let mut _0: &T;                      // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:77:16: 77:17
    let mut _3: std::option::Option<&T>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:76:15: 76:27
    let mut _4: &cat<T>;                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:76:15: 76:27
    let mut _5: &isize;                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:76:25: 76:26
    let mut _6: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:77:11: 77:18
    let mut _7: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug v => _0;                   // in scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:77:16: 77:17
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:76:15: 76:27
        _5 = _2;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:76:25: 76:26
        _3 = cat::<T>::find(move _4, move _5) -> bb1; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:76:15: 76:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:76:20: 76:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a cat<T>, &'b isize) -> Option<&'a T> {cat::<T>::find}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = discriminant(_3);           // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:76:15: 76:27
        switchInt(move _6) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:76:9: 76:27
    }

    bb2: {
        _7 = begin_panic::<&str>(const "epic fail"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:78:31: 78:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        unreachable;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:76:15: 76:27
    }

    bb4: {
        _0 = ((_3 as Some).0: &T);       // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:77:16: 77:17
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:80:6: 80:6
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:74:1: 74:15>::new(_1: isize, _2: isize, _3: T) -> cat<T> {
    debug in_x => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:82:16: 82:20
    debug in_y => _2;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:82:29: 82:33
    debug in_name => _3;                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:82:42: 82:49
    let mut _0: cat<T>;                  // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:82:57: 82:63
    let mut _4: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:83:20: 83:24
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:83:38: 83:42
    let mut _6: T;                       // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:83:50: 83:57

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:83:20: 83:24
        _5 = _2;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:83:38: 83:42
        _6 = move _3;                    // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:83:50: 83:57
        _0 = cat::<T> { meows: move _4, how_hungry: move _5, name: move _6 }; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:83:9: 83:59
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:84:6: 84:6
    }
}

fn <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:87:1: 87:15>::meow(_1: &mut cat<T>) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:88:13: 88:22
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:88:24: 88:24
    let mut _2: (isize, bool);           // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:89:9: 89:24
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
    let mut _6: &[&str; 2];              // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
    let _7: &[&str; 2];                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:29: 90:39
    let mut _13: &isize;                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:29: 90:39
    let _14: &isize;                     // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:29: 90:39
    let mut _15: isize;                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:91:12: 91:26
    let mut _16: isize;                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:91:12: 91:22
    let mut _17: (isize, bool);          // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:92:13: 92:33
    let mut _18: &[&str; 2];             // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27

    bb0: {
        _2 = CheckedAdd(((*_1).0: isize), const 1_isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:89:9: 89:24
        assert(!move (_2.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: isize), const 1_isize) -> bb1; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:89:9: 89:24
    }

    bb1: {
        ((*_1).0: isize) = move (_2.0: isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:89:9: 89:24
        _18 = const _;                   // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(cat::<T>::meow, [T], Some(promoted[0])) }
        _7 = _18;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
        _6 = _7;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
        _14 = &((*_1).0: isize);         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:29: 90:39
        _13 = _14;                       // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:29: 90:39
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _13) -> bb2; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:29: 90:39
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:90:29: 90:39
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = [move _12];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = _print(move _4) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _16 = ((*_1).0: isize);          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:91:12: 91:22
        _15 = Rem(move _16, const 5_isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:91:12: 91:26
        switchInt(move _15) -> [0: bb5, otherwise: bb7]; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:91:12: 91:31
    }

    bb5: {
        _17 = CheckedAdd(((*_1).1: isize), const 1_isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:92:13: 92:33
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: isize), const 1_isize) -> bb6; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:92:13: 92:33
    }

    bb6: {
        ((*_1).1: isize) = move (_17.0: isize); // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:92:13: 92:33
        goto -> bb7;                     // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:91:9: 93:10
    }

    bb7: {
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:94:6: 94:6
    }
}

promoted[0] in <impl at ui/struct-enums/class-impl-very-parameterized-trait.rs:87:1: 87:15>::meow: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
    let mut _1: [&str; 2];               // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27

    bb0: {
        _1 = [const "Meow ", const "\n"]; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:90:18: 90:27
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:97:15: 97:15
    let mut _1: cat<std::string::String>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:98:9: 98:17
    let mut _2: std::string::String;     // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:98:48: 98:66
    let mut _3: &str;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:98:48: 98:66
    let _4: &str;                        // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:98:48: 98:54
    let mut _5: std::ops::Range<usize>;  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
    let mut _6: std::ops::Range<usize>;  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
    let mut _8: std::option::Option<usize>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
    let mut _9: &mut std::ops::Range<usize>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
    let mut _10: &mut std::ops::Range<usize>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
    let mut _11: isize;                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:5: 99:42
    let _12: ();                         // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:27: 99:39
    let mut _13: &mut cat<std::string::String>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:27: 99:39
    let mut _14: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _16: &std::string::String;       // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:17: 100:39
    let mut _17: std::option::Option<&std::string::String>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:17: 100:30
    let mut _18: &cat<std::string::String>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:17: 100:30
    let mut _19: &isize;                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
    let _20: &isize;                     // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _22: std::string::String;        // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:41: 100:59
    let mut _23: &str;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:41: 100:59
    let _24: &str;                       // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:41: 100:47
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _28: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _29: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _30: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _32: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _33: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _34: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _35: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _36: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _37: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _39: (&std::option::Option<&std::string::String>, &std::option::Option<&std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _40: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _41: std::option::Option<&std::string::String>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:16: 101:30
    let mut _42: &cat<std::string::String>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:16: 101:30
    let mut _43: &isize;                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
    let _44: &isize;                     // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
    let mut _45: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _48: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _49: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _50: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _51: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _53: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _54: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _55: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _56: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _57: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _58: &std::option::Option<&std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _61: cat_type;               // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:102:53: 102:69
    let mut _62: std::ops::Range<usize>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
    let mut _63: std::ops::Range<usize>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
    let mut _65: std::option::Option<usize>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
    let mut _66: &mut std::ops::Range<usize>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
    let mut _67: &mut std::ops::Range<usize>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
    let mut _68: isize;                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:5: 103:44
    let _69: ();                         // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:27: 103:41
    let mut _70: &mut cat<cat_type>;     // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:27: 103:41
    let mut _71: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _72: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _73: usize;                      // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:104:16: 104:28
    let mut _74: &cat<cat_type>;         // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:104:16: 104:28
    let mut _75: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _78: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _79: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _80: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _81: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _83: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _84: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _85: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _86: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _87: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _88: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _89: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _90: bool;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:5: 105:39
    let mut _91: bool;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:13: 105:38
    let mut _92: &cat<cat_type>;         // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:13: 105:38
    let mut _93: &isize;                 // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
    let _94: &isize;                     // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
    let mut _95: !;                      // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:5: 105:39
    let mut _96: (&&cat_type, &&cat_type); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _97: &&cat_type;             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _98: &cat_type;                  // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:16: 106:30
    let mut _99: &cat<cat_type>;         // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:16: 106:30
    let mut _100: &isize;                // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
    let _101: &isize;                    // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
    let mut _102: &&cat_type;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _105: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _106: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _107: &&cat_type;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _108: &&cat_type;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _110: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _111: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _112: &&cat_type;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _113: &&cat_type;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _114: &&cat_type;            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _115: &&cat_type;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _116: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug nyan => _1;                // in scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:98:9: 98:17
        let mut _7: std::ops::Range<usize>; // in scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
        let _25: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _26: &std::string::String;   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _46: &std::option::Option<&std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _47: &std::option::Option<&std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _60: cat<cat_type>;      // in scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:102:9: 102:19
        let mut _121: &std::option::Option<&std::string::String>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        let mut _122: &isize;            // in scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
        let mut _123: &isize;            // in scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
        scope 2 {
            debug iter => _7;            // in scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
        }
        scope 3 {
            debug left_val => _25;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _26;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _31: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _31;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug left_val => _46;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _47;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _52: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _52;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 7 {
            debug spotty => _60;         // in scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:102:9: 102:19
            let mut _64: std::ops::Range<usize>; // in scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
            let _76: &usize;             // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _77: &usize;             // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _103: &&cat_type;        // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _104: &&cat_type;        // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _117: &&cat_type;    // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _118: &isize;        // in scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
            let mut _119: &isize;        // in scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
            let mut _120: &usize;        // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 8 {
                debug iter => _64;       // in scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
            }
            scope 9 {
                debug left_val => _76;   // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _77;  // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _82: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 10 {
                    debug kind => _82;   // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 11 {
                debug left_val => _103;  // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _104; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _109: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 12 {
                    debug kind => _109;  // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = const "nyan";               // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:98:48: 98:54
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:98:48: 98:54
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:98:48: 98:66
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:98:48: 98:66
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:98:55: 98:64
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = cat::<String>::new(const 0_isize, const 2_isize, move _2) -> bb2; // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:98:33: 98:67
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:98:33: 98:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize, isize, String) -> cat<String> {cat::<String>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = std::ops::Range::<usize> { start: const 1_usize, end: const 5_usize }; // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
        _5 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _6) -> [return: bb3, unwind: bb39]; // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = move _5;                    // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
        goto -> bb4;                     // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:5: 99:42
    }

    bb4: {
        _10 = &mut _7;                   // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
        _9 = &mut (*_10);                // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
        _8 = <std::ops::Range<usize> as Iterator>::next(move _9) -> [return: bb5, unwind: bb39]; // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _11 = discriminant(_8);          // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
        switchInt(move _11) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
    }

    bb6: {
        _13 = &mut _1;                   // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:27: 99:39
        _12 = cat::<String>::speak(move _13) -> [return: bb41, unwind: bb39]; // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:27: 99:39
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:99:32: 99:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat<String>) {cat::<String>::speak}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:14: 99:24
    }

    bb8: {
        _18 = &_1;                       // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:17: 100:30
        _123 = const _;                  // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[6])) }
        _20 = _123;                      // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
        _19 = _20;                       // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
        _17 = cat::<String>::find(move _18, move _19) -> [return: bb9, unwind: bb39]; // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:17: 100:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:100:22: 100:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a cat<String>, &'b isize) -> Option<&'a String> {cat::<String>::find}, val: Value(<ZST>) }
    }

    bb9: {
        _16 = Option::<&String>::unwrap(move _17) -> [return: bb10, unwind: bb39]; // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:17: 100:39
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:100:31: 100:37
                                         // + literal: Const { ty: fn(Option<&String>) -> &String {Option::<&String>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        _15 = _16;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const "nyan";              // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:41: 100:47
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:100:41: 100:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _23 = _24;                       // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:41: 100:59
        _22 = <str as ToString>::to_string(move _23) -> [return: bb11, unwind: bb39]; // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:41: 100:59
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:100:48: 100:57
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = &_22;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _21);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _25 = (_14.0: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _26 = (_14.1: &std::string::String); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _29 = _25;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _30 = _26;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _28 = <String as PartialEq>::eq(move _29, move _30) -> [return: bb12, unwind: bb38]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb12: {
        _27 = Not(move _28);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _27) -> [0: bb14, otherwise: bb13]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb13: {
        _31 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _37 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = _37;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _32 = core::panicking::assert_failed::<String, String>(move _33, move _34, move _36, move _38) -> bb38; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb14: {
        drop(_22) -> [return: bb15, unwind: bb39]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb15: {
        _42 = &_1;                       // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:16: 101:30
        _122 = const _;                  // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[5])) }
        _44 = _122;                      // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
        _43 = _44;                       // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
        _41 = cat::<String>::find(move _42, move _43) -> [return: bb16, unwind: bb39]; // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:16: 101:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:101:21: 101:25
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a cat<String>, &'b isize) -> Option<&'a String> {cat::<String>::find}, val: Value(<ZST>) }
    }

    bb16: {
        _40 = &_41;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _121 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<&String>, val: Unevaluated(main, [], Some(promoted[4])) }
        _45 = _121;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _39 = (move _40, move _45);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _46 = (_39.0: &std::option::Option<&std::string::String>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _47 = (_39.1: &std::option::Option<&std::string::String>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _50 = _46;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _51 = _47;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _49 = <Option<&String> as PartialEq>::eq(move _50, move _51) -> [return: bb17, unwind: bb39]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&String>, &'b Option<&String>) -> bool {<Option<&String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb17: {
        _48 = Not(move _49);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _48) -> [0: bb19, otherwise: bb18]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _52 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _54 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _56 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _55 = _56;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _58 = _47;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _57 = _58;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _59 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _53 = core::panicking::assert_failed::<Option<&String>, Option<&String>>(move _54, move _55, move _57, move _59) -> bb39; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&String>, &'b Option<&String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&String>, Option<&String>>}, val: Value(<ZST>) }
    }

    bb19: {
        _61 = const cat_type::tuxedo;    // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:102:53: 102:69
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:102:53: 102:69
                                         // + literal: Const { ty: cat_type, val: Value(Scalar(0x00)) }
        _60 = cat::<cat_type>::new(const 2_isize, const 57_isize, move _61) -> [return: bb20, unwind: bb39]; // scope 1 at ui/struct-enums/class-impl-very-parameterized-trait.rs:102:37: 102:70
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:102:37: 102:45
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(isize, isize, cat_type) -> cat<cat_type> {cat::<cat_type>::new}, val: Value(<ZST>) }
    }

    bb20: {
        _63 = std::ops::Range::<usize> { start: const 0_usize, end: const 6_usize }; // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
        _62 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _63) -> [return: bb21, unwind: bb39]; // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb21: {
        _64 = move _62;                  // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
        goto -> bb22;                    // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:5: 103:44
    }

    bb22: {
        _67 = &mut _64;                  // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
        _66 = &mut (*_67);               // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
        _65 = <std::ops::Range<usize> as Iterator>::next(move _66) -> [return: bb23, unwind: bb39]; // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb23: {
        _68 = discriminant(_65);         // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
        switchInt(move _68) -> [0: bb26, 1: bb24, otherwise: bb25]; // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
    }

    bb24: {
        _70 = &mut _60;                  // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:27: 103:41
        _69 = cat::<cat_type>::speak(move _70) -> [return: bb42, unwind: bb39]; // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:27: 103:41
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:103:34: 103:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat<cat_type>) {cat::<cat_type>::speak}, val: Value(<ZST>) }
    }

    bb25: {
        unreachable;                     // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:14: 103:24
    }

    bb26: {
        _74 = &_60;                      // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:104:16: 104:28
        _73 = cat::<cat_type>::len(move _74) -> [return: bb27, unwind: bb39]; // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:104:16: 104:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:104:23: 104:26
                                         // + literal: Const { ty: for<'a> fn(&'a cat<cat_type>) -> usize {cat::<cat_type>::len}, val: Value(<ZST>) }
    }

    bb27: {
        _72 = &_73;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _120 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[3])) }
        _75 = _120;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _71 = (move _72, move _75);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _76 = (_71.0: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _77 = (_71.1: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _80 = (*_76);                    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _81 = const 8_usize;             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _79 = Eq(move _80, move _81);    // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _78 = Not(move _79);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _78) -> [0: bb29, otherwise: bb28]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb28: {
        _82 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _84 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _86 = _76;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _85 = _86;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _88 = _77;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _87 = _88;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _89 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _83 = core::panicking::assert_failed::<usize, usize>(move _84, move _85, move _87, move _89) -> bb39; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb29: {
        _92 = &_60;                      // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:13: 105:38
        _119 = const _;                  // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[2])) }
        _94 = _119;                      // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
        _93 = _94;                       // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
        _91 = cat::<cat_type>::contains_key(move _92, move _93) -> [return: bb30, unwind: bb39]; // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:13: 105:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:105:21: 105:33
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a cat<cat_type>, &'b isize) -> bool {cat::<cat_type>::contains_key}, val: Value(<ZST>) }
    }

    bb30: {
        _90 = Not(move _91);             // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:5: 105:39
        switchInt(move _90) -> [0: bb32, otherwise: bb31]; // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:5: 105:39
    }

    bb31: {
        _95 = core::panicking::panic(const "assertion failed: (spotty.contains_key(&2))") -> bb39; // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:5: 105:39
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:105:5: 105:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb32: {
        _99 = &_60;                      // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:16: 106:30
        _118 = const _;                  // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _101 = _118;                     // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
        _100 = _101;                     // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
        _98 = cat::<cat_type>::get(move _99, move _100) -> [return: bb33, unwind: bb39]; // scope 7 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:16: 106:30
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-impl-very-parameterized-trait.rs:106:23: 106:26
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a cat<cat_type>, &'b isize) -> &'a cat_type {cat::<cat_type>::get}, val: Value(<ZST>) }
    }

    bb33: {
        _97 = &_98;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _117 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&cat_type, val: Unevaluated(main, [], Some(promoted[0])) }
        _102 = _117;                     // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _96 = (move _97, move _102);     // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _103 = (_96.0: &&cat_type);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _104 = (_96.1: &&cat_type);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _107 = _103;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _108 = _104;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _106 = <&cat_type as PartialEq>::eq(move _107, move _108) -> [return: bb34, unwind: bb39]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &cat_type, &'b &cat_type) -> bool {<&cat_type as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb34: {
        _105 = Not(move _106);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _105) -> [0: bb36, otherwise: bb35]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb35: {
        _109 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _111 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _113 = _103;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _112 = _113;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _115 = _104;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _114 = _115;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _116 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _110 = core::panicking::assert_failed::<&cat_type, &cat_type>(move _111, move _112, move _114, move _116) -> bb39; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &cat_type, &'b &cat_type, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&cat_type, &cat_type>}, val: Value(<ZST>) }
    }

    bb36: {
        drop(_1) -> bb37;                // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:107:1: 107:2
    }

    bb37: {
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:107:2: 107:2
    }

    bb38 (cleanup): {
        drop(_22) -> bb39;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb39 (cleanup): {
        drop(_1) -> bb40;                // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:107:1: 107:2
    }

    bb40 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:97:1: 107:2
    }

    bb41: {
        goto -> bb4;                     // scope 2 at ui/struct-enums/class-impl-very-parameterized-trait.rs:99:27: 99:39
    }

    bb42: {
        goto -> bb22;                    // scope 8 at ui/struct-enums/class-impl-very-parameterized-trait.rs:103:27: 103:41
    }
}

promoted[0] in main: &&cat_type = {
    let mut _0: &&cat_type;              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &cat_type;               // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:32: 106:49
    let mut _2: cat_type;                // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:33: 106:49

    bb0: {
        _2 = cat_type::tuxedo;           // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:33: 106:49
        _1 = &_2;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:32: 106:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:28: 106:29

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:28: 106:29
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:106:27: 106:29
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:35: 105:36

    bb0: {
        _1 = const 2_isize;              // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:35: 105:36
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:105:34: 105:36
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:104:30: 104:31

    bb0: {
        _1 = const 8_usize;              // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:104:30: 104:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &Option<&String> = {
    let mut _0: &std::option::Option<&std::string::String>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<&std::string::String>; // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:32: 101:36

    bb0: {
        _1 = Option::<&String>::None;    // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:32: 101:36
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:27: 101:29

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:27: 101:29
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:101:26: 101:29
    }
}

promoted[6] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:28: 100:29

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:28: 100:29
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
        return;                          // scope 0 at ui/struct-enums/class-impl-very-parameterized-trait.rs:100:27: 100:29
    }
}
