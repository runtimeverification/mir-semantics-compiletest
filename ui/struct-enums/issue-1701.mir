// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn noise(_1: animal) -> Option<String> {
    debug a => _1;                       // in scope 0 at ui/struct-enums/issue-1701.rs:12:10: 12:11
    let mut _0: std::option::Option<std::string::String>; // return place in scope 0 at ui/struct-enums/issue-1701.rs:12:24: 12:38
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/issue-1701.rs:14:7: 14:22
    let mut _3: std::string::String;     // in scope 0 at ui/struct-enums/issue-1701.rs:14:36: 14:54
    let mut _4: &str;                    // in scope 0 at ui/struct-enums/issue-1701.rs:14:36: 14:54
    let _5: &str;                        // in scope 0 at ui/struct-enums/issue-1701.rs:14:36: 14:42
    let mut _6: std::string::String;     // in scope 0 at ui/struct-enums/issue-1701.rs:15:36: 15:54
    let mut _7: &str;                    // in scope 0 at ui/struct-enums/issue-1701.rs:15:36: 15:54
    let _8: &str;                        // in scope 0 at ui/struct-enums/issue-1701.rs:15:36: 15:42
    let mut _9: std::string::String;     // in scope 0 at ui/struct-enums/issue-1701.rs:17:32: 17:50
    let mut _10: &str;                   // in scope 0 at ui/struct-enums/issue-1701.rs:17:32: 17:50
    let _11: &str;                       // in scope 0 at ui/struct-enums/issue-1701.rs:17:32: 17:38

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/struct-enums/issue-1701.rs:13:11: 13:12
        switchInt(move _2) -> [0: bb3, 1: bb5, 2: bb7, 3: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/issue-1701.rs:13:5: 13:12
    }

    bb1: {
        _11 = const "roar";              // scope 0 at ui/struct-enums/issue-1701.rs:17:32: 17:38
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:17:32: 17:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/struct-enums/issue-1701.rs:17:32: 17:50
        _9 = <str as ToString>::to_string(move _10) -> [return: bb8, unwind: bb11]; // scope 0 at ui/struct-enums/issue-1701.rs:17:32: 17:50
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:17:39: 17:48
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        unreachable;                     // scope 0 at ui/struct-enums/issue-1701.rs:13:11: 13:12
    }

    bb3: {
        _5 = const "meow";               // scope 0 at ui/struct-enums/issue-1701.rs:14:36: 14:42
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:14:36: 14:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/struct-enums/issue-1701.rs:14:36: 14:54
        _3 = <str as ToString>::to_string(move _4) -> [return: bb4, unwind: bb11]; // scope 0 at ui/struct-enums/issue-1701.rs:14:36: 14:54
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:14:43: 14:52
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _0 = Option::<String>::Some(move _3); // scope 0 at ui/struct-enums/issue-1701.rs:14:31: 14:55
        goto -> bb9;                     // scope 0 at ui/struct-enums/issue-1701.rs:14:56: 14:57
    }

    bb5: {
        _8 = const "woof";               // scope 0 at ui/struct-enums/issue-1701.rs:15:36: 15:42
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:15:36: 15:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at ui/struct-enums/issue-1701.rs:15:36: 15:54
        _6 = <str as ToString>::to_string(move _7) -> [return: bb6, unwind: bb11]; // scope 0 at ui/struct-enums/issue-1701.rs:15:36: 15:54
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:15:43: 15:52
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb6: {
        _0 = Option::<String>::Some(move _6); // scope 0 at ui/struct-enums/issue-1701.rs:15:31: 15:55
        goto -> bb9;                     // scope 0 at ui/struct-enums/issue-1701.rs:15:56: 15:57
    }

    bb7: {
        _0 = Option::<String>::None;     // scope 0 at ui/struct-enums/issue-1701.rs:16:31: 16:35
        goto -> bb9;                     // scope 0 at ui/struct-enums/issue-1701.rs:16:31: 16:35
    }

    bb8: {
        _0 = Option::<String>::Some(move _9); // scope 0 at ui/struct-enums/issue-1701.rs:17:27: 17:51
        goto -> bb9;                     // scope 0 at ui/struct-enums/issue-1701.rs:17:52: 17:53
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/struct-enums/issue-1701.rs:19:1: 19:2
    }

    bb10: {
        return;                          // scope 0 at ui/struct-enums/issue-1701.rs:19:2: 19:2
    }

    bb11 (cleanup): {
        drop(_1) -> bb12;                // scope 0 at ui/struct-enums/issue-1701.rs:19:1: 19:2
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/issue-1701.rs:12:1: 19:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/issue-1701.rs:21:15: 21:15
    let mut _1: (&std::option::Option<std::string::String>, &std::option::Option<std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::option::Option<std::string::String>; // in scope 0 at ui/struct-enums/issue-1701.rs:22:16: 22:50
    let mut _4: animal;                  // in scope 0 at ui/struct-enums/issue-1701.rs:22:22: 22:49
    let mut _5: pattern;                 // in scope 0 at ui/struct-enums/issue-1701.rs:22:34: 22:48
    let mut _6: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: std::option::Option<std::string::String>; // in scope 0 at ui/struct-enums/issue-1701.rs:22:52: 22:76
    let mut _8: std::string::String;     // in scope 0 at ui/struct-enums/issue-1701.rs:22:57: 22:75
    let mut _9: &str;                    // in scope 0 at ui/struct-enums/issue-1701.rs:22:57: 22:75
    let _10: &str;                       // in scope 0 at ui/struct-enums/issue-1701.rs:22:57: 22:63
    let _11: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _12: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: (&std::option::Option<std::string::String>, &std::option::Option<std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _27: std::option::Option<std::string::String>; // in scope 0 at ui/struct-enums/issue-1701.rs:23:16: 23:46
    let mut _28: animal;                 // in scope 0 at ui/struct-enums/issue-1701.rs:23:22: 23:45
    let mut _29: breed;                  // in scope 0 at ui/struct-enums/issue-1701.rs:23:34: 23:44
    let mut _30: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _31: std::option::Option<std::string::String>; // in scope 0 at ui/struct-enums/issue-1701.rs:23:48: 23:72
    let mut _32: std::string::String;    // in scope 0 at ui/struct-enums/issue-1701.rs:23:53: 23:71
    let mut _33: &str;                   // in scope 0 at ui/struct-enums/issue-1701.rs:23:53: 23:71
    let _34: &str;                       // in scope 0 at ui/struct-enums/issue-1701.rs:23:53: 23:59
    let _35: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _36: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: (&std::option::Option<std::string::String>, &std::option::Option<std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _50: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _51: std::option::Option<std::string::String>; // in scope 0 at ui/struct-enums/issue-1701.rs:24:16: 24:79
    let mut _52: animal;                 // in scope 0 at ui/struct-enums/issue-1701.rs:24:22: 24:78
    let mut _53: std::string::String;    // in scope 0 at ui/struct-enums/issue-1701.rs:24:37: 24:58
    let mut _54: &str;                   // in scope 0 at ui/struct-enums/issue-1701.rs:24:37: 24:58
    let _55: &str;                       // in scope 0 at ui/struct-enums/issue-1701.rs:24:37: 24:46
    let mut _56: ear_kind;               // in scope 0 at ui/struct-enums/issue-1701.rs:24:60: 24:77
    let mut _57: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _58: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _59: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _60: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _62: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _63: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _65: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _66: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _67: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _68: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _69: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _70: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _72: (&std::option::Option<std::string::String>, &std::option::Option<std::string::String>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _73: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _74: std::option::Option<std::string::String>; // in scope 0 at ui/struct-enums/issue-1701.rs:25:16: 25:36
    let mut _75: animal;                 // in scope 0 at ui/struct-enums/issue-1701.rs:25:22: 25:35
    let mut _76: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _77: std::option::Option<std::string::String>; // in scope 0 at ui/struct-enums/issue-1701.rs:25:38: 25:62
    let mut _78: std::string::String;    // in scope 0 at ui/struct-enums/issue-1701.rs:25:43: 25:61
    let mut _79: &str;                   // in scope 0 at ui/struct-enums/issue-1701.rs:25:43: 25:61
    let _80: &str;                       // in scope 0 at ui/struct-enums/issue-1701.rs:25:43: 25:49
    let _81: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _82: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _83: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _84: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _85: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _86: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _88: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _89: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _90: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _91: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _92: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _93: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _95: &std::option::Option<std::string::String>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _11;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _12;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _17: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _17;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _35;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _36;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _41: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _41;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _58;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _59;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _64: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _64;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _81;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _82;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _87: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _87;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = const pattern::tabby;       // scope 0 at ui/struct-enums/issue-1701.rs:22:34: 22:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:22:34: 22:48
                                         // + literal: Const { ty: pattern, val: Value(Scalar(0x00)) }
        _4 = animal::cat(move _5);       // scope 0 at ui/struct-enums/issue-1701.rs:22:22: 22:49
        _3 = noise(move _4) -> bb1;      // scope 0 at ui/struct-enums/issue-1701.rs:22:16: 22:50
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:22:16: 22:21
                                         // + literal: Const { ty: fn(animal) -> Option<String> {noise}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _10 = const "meow";              // scope 0 at ui/struct-enums/issue-1701.rs:22:57: 22:63
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:22:57: 22:63
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _9 = _10;                        // scope 0 at ui/struct-enums/issue-1701.rs:22:57: 22:75
        _8 = <str as ToString>::to_string(move _9) -> [return: bb2, unwind: bb34]; // scope 0 at ui/struct-enums/issue-1701.rs:22:57: 22:75
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:22:64: 22:73
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Option::<String>::Some(move _8); // scope 0 at ui/struct-enums/issue-1701.rs:22:52: 22:76
        _6 = &_7;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_1.0: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_1.1: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = <Option<String> as PartialEq>::eq(move _15, move _16) -> [return: bb3, unwind: bb33]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<String>, &'b Option<String>) -> bool {<Option<String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _13 = Not(move _14);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _17 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<Option<String>, Option<String>>(move _19, move _20, move _22, move _24) -> bb33; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<String>, &'b Option<String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<String>, Option<String>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb34]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        _29 = const breed::pug;          // scope 0 at ui/struct-enums/issue-1701.rs:23:34: 23:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:23:34: 23:44
                                         // + literal: Const { ty: breed, val: Value(Scalar(0x02)) }
        _28 = animal::dog(move _29);     // scope 0 at ui/struct-enums/issue-1701.rs:23:22: 23:45
        _27 = noise(move _28) -> bb8;    // scope 0 at ui/struct-enums/issue-1701.rs:23:16: 23:46
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:23:16: 23:21
                                         // + literal: Const { ty: fn(animal) -> Option<String> {noise}, val: Value(<ZST>) }
    }

    bb8: {
        _26 = &_27;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _34 = const "woof";              // scope 0 at ui/struct-enums/issue-1701.rs:23:53: 23:59
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:23:53: 23:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _33 = _34;                       // scope 0 at ui/struct-enums/issue-1701.rs:23:53: 23:71
        _32 = <str as ToString>::to_string(move _33) -> [return: bb9, unwind: bb32]; // scope 0 at ui/struct-enums/issue-1701.rs:23:53: 23:71
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:23:60: 23:69
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb9: {
        _31 = Option::<String>::Some(move _32); // scope 0 at ui/struct-enums/issue-1701.rs:23:48: 23:72
        _30 = &_31;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _30);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_25.0: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_25.1: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = _35;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = _36;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = <Option<String> as PartialEq>::eq(move _39, move _40) -> [return: bb10, unwind: bb31]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<String>, &'b Option<String>) -> bool {<Option<String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _37 = Not(move _38);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb12, otherwise: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _41 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<Option<String>, Option<String>>(move _43, move _44, move _46, move _48) -> bb31; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<String>, &'b Option<String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<String>, Option<String>>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_31) -> [return: bb13, unwind: bb32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13: {
        drop(_27) -> bb14;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb14: {
        _55 = const "Hilbert";           // scope 0 at ui/struct-enums/issue-1701.rs:24:37: 24:46
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:24:37: 24:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _54 = _55;                       // scope 0 at ui/struct-enums/issue-1701.rs:24:37: 24:58
        _53 = <str as ToString>::to_string(move _54) -> bb15; // scope 0 at ui/struct-enums/issue-1701.rs:24:37: 24:58
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:24:47: 24:56
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb15: {
        _56 = const ear_kind::upright;   // scope 0 at ui/struct-enums/issue-1701.rs:24:60: 24:77
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:24:60: 24:77
                                         // + literal: Const { ty: ear_kind, val: Value(Scalar(0x01)) }
        _52 = animal::rabbit(move _53, move _56); // scope 0 at ui/struct-enums/issue-1701.rs:24:22: 24:78
        _51 = noise(move _52) -> bb16;   // scope 0 at ui/struct-enums/issue-1701.rs:24:16: 24:79
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:24:16: 24:21
                                         // + literal: Const { ty: fn(animal) -> Option<String> {noise}, val: Value(<ZST>) }
    }

    bb16: {
        _50 = &_51;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _95 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<String>, val: Unevaluated(main, [], Some(promoted[0])) }
        _57 = _95;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _49 = (move _50, move _57);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _58 = (_49.0: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _59 = (_49.1: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _62 = _58;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _63 = _59;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _61 = <Option<String> as PartialEq>::eq(move _62, move _63) -> [return: bb17, unwind: bb30]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<String>, &'b Option<String>) -> bool {<Option<String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb17: {
        _60 = Not(move _61);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _60) -> [0: bb19, otherwise: bb18]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _64 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _68 = _58;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _67 = _68;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _59;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = _70;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _71 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _65 = core::panicking::assert_failed::<Option<String>, Option<String>>(move _66, move _67, move _69, move _71) -> bb30; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<String>, &'b Option<String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<String>, Option<String>>}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_51) -> bb20;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb20: {
        _75 = animal::tiger;             // scope 0 at ui/struct-enums/issue-1701.rs:25:22: 25:35
        _74 = noise(move _75) -> bb21;   // scope 0 at ui/struct-enums/issue-1701.rs:25:16: 25:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:25:16: 25:21
                                         // + literal: Const { ty: fn(animal) -> Option<String> {noise}, val: Value(<ZST>) }
    }

    bb21: {
        _73 = &_74;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _80 = const "roar";              // scope 0 at ui/struct-enums/issue-1701.rs:25:43: 25:49
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:25:43: 25:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _79 = _80;                       // scope 0 at ui/struct-enums/issue-1701.rs:25:43: 25:61
        _78 = <str as ToString>::to_string(move _79) -> [return: bb22, unwind: bb29]; // scope 0 at ui/struct-enums/issue-1701.rs:25:43: 25:61
                                         // mir::Constant
                                         // + span: ui/struct-enums/issue-1701.rs:25:50: 25:59
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb22: {
        _77 = Option::<String>::Some(move _78); // scope 0 at ui/struct-enums/issue-1701.rs:25:38: 25:62
        _76 = &_77;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _72 = (move _73, move _76);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _81 = (_72.0: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _82 = (_72.1: &std::option::Option<std::string::String>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _85 = _81;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _86 = _82;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _84 = <Option<String> as PartialEq>::eq(move _85, move _86) -> [return: bb23, unwind: bb28]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<String>, &'b Option<String>) -> bool {<Option<String> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb23: {
        _83 = Not(move _84);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _83) -> [0: bb25, otherwise: bb24]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb24: {
        _87 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _89 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _91 = _81;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _90 = _91;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _93 = _82;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _92 = _93;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _94 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _88 = core::panicking::assert_failed::<Option<String>, Option<String>>(move _89, move _90, move _92, move _94) -> bb28; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<String>, &'b Option<String>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<String>, Option<String>>}, val: Value(<ZST>) }
    }

    bb25: {
        drop(_77) -> [return: bb26, unwind: bb29]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb26: {
        drop(_74) -> bb27;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27: {
        return;                          // scope 0 at ui/struct-enums/issue-1701.rs:26:2: 26:2
    }

    bb28 (cleanup): {
        drop(_77) -> bb29;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb29 (cleanup): {
        drop(_74) -> bb35;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30 (cleanup): {
        drop(_51) -> bb35;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb31 (cleanup): {
        drop(_31) -> bb32;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb32 (cleanup): {
        drop(_27) -> bb35;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb33 (cleanup): {
        drop(_7) -> bb34;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb34 (cleanup): {
        drop(_3) -> bb35;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/issue-1701.rs:21:1: 26:2
    }
}

promoted[0] in main: &Option<String> = {
    let mut _0: &std::option::Option<std::string::String>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<std::string::String>; // in scope 0 at ui/struct-enums/issue-1701.rs:24:81: 24:85

    bb0: {
        _1 = Option::<String>::None;     // scope 0 at ui/struct-enums/issue-1701.rs:24:81: 24:85
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn animal::cat(_1: pattern) -> animal {
    let mut _0: animal;                  // return place in scope 0 at ui/struct-enums/issue-1701.rs:10:15: 10:18

    bb0: {
        _0 = animal::cat(move _1);       // scope 0 at ui/struct-enums/issue-1701.rs:10:15: 10:18
        return;                          // scope 0 at ui/struct-enums/issue-1701.rs:10:15: 10:18
    }
}

// MIR FOR CTFE
fn animal::cat(_1: pattern) -> animal {
    let mut _0: animal;                  // return place in scope 0 at ui/struct-enums/issue-1701.rs:10:15: 10:18

    bb0: {
        _0 = animal::cat(move _1);       // scope 0 at ui/struct-enums/issue-1701.rs:10:15: 10:18
        return;                          // scope 0 at ui/struct-enums/issue-1701.rs:10:15: 10:18
    }
}

fn animal::dog(_1: breed) -> animal {
    let mut _0: animal;                  // return place in scope 0 at ui/struct-enums/issue-1701.rs:10:29: 10:32

    bb0: {
        _0 = animal::dog(move _1);       // scope 0 at ui/struct-enums/issue-1701.rs:10:29: 10:32
        return;                          // scope 0 at ui/struct-enums/issue-1701.rs:10:29: 10:32
    }
}

// MIR FOR CTFE
fn animal::dog(_1: breed) -> animal {
    let mut _0: animal;                  // return place in scope 0 at ui/struct-enums/issue-1701.rs:10:29: 10:32

    bb0: {
        _0 = animal::dog(move _1);       // scope 0 at ui/struct-enums/issue-1701.rs:10:29: 10:32
        return;                          // scope 0 at ui/struct-enums/issue-1701.rs:10:29: 10:32
    }
}

fn animal::rabbit(_1: String, _2: ear_kind) -> animal {
    let mut _0: animal;                  // return place in scope 0 at ui/struct-enums/issue-1701.rs:10:41: 10:47

    bb0: {
        _0 = animal::rabbit(move _1, move _2); // scope 0 at ui/struct-enums/issue-1701.rs:10:41: 10:47
        return;                          // scope 0 at ui/struct-enums/issue-1701.rs:10:41: 10:47
    }
}

// MIR FOR CTFE
fn animal::rabbit(_1: String, _2: ear_kind) -> animal {
    let mut _0: animal;                  // return place in scope 0 at ui/struct-enums/issue-1701.rs:10:41: 10:47

    bb0: {
        _0 = animal::rabbit(move _1, move _2); // scope 0 at ui/struct-enums/issue-1701.rs:10:41: 10:47
        return;                          // scope 0 at ui/struct-enums/issue-1701.rs:10:41: 10:47
    }
}
