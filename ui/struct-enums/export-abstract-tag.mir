// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> t {
    let mut _0: foo::t;                  // return place in scope 0 at ui/struct-enums/export-abstract-tag.rs:12:19: 12:20

    bb0: {
        return;                          // scope 0 at ui/struct-enums/export-abstract-tag.rs:12:38: 12:38
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/export-abstract-tag.rs:15:15: 15:15
    let _1: foo::t;                      // in scope 0 at ui/struct-enums/export-abstract-tag.rs:15:21: 15:23
    scope 1 {
        debug _v => _1;                  // in scope 1 at ui/struct-enums/export-abstract-tag.rs:15:21: 15:23
    }

    bb0: {
        _1 = f() -> bb1;                 // scope 0 at ui/struct-enums/export-abstract-tag.rs:15:34: 15:42
                                         // mir::Constant
                                         // + span: ui/struct-enums/export-abstract-tag.rs:15:34: 15:40
                                         // + literal: Const { ty: fn() -> t {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/export-abstract-tag.rs:15:45: 15:45
    }
}
