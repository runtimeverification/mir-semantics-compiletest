// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/module-qualified-struct-destructure.rs:11:15: 11:15
    let _1: m::S;                        // in scope 0 at ui/struct-enums/module-qualified-struct-destructure.rs:12:9: 12:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/struct-enums/module-qualified-struct-destructure.rs:12:9: 12:10
        let _2: isize;                   // in scope 1 at ui/struct-enums/module-qualified-struct-destructure.rs:13:19: 13:21
        let _3: isize;                   // in scope 1 at ui/struct-enums/module-qualified-struct-destructure.rs:13:26: 13:28
        scope 2 {
            debug _a => _2;              // in scope 2 at ui/struct-enums/module-qualified-struct-destructure.rs:13:19: 13:21
            debug _b => _3;              // in scope 2 at ui/struct-enums/module-qualified-struct-destructure.rs:13:26: 13:28
        }
    }

    bb0: {
        _1 = S { x: const 1_isize, y: const 2_isize }; // scope 0 at ui/struct-enums/module-qualified-struct-destructure.rs:12:13: 12:32
        _2 = const 1_isize;              // scope 1 at ui/struct-enums/module-qualified-struct-destructure.rs:13:19: 13:21
        _3 = const 2_isize;              // scope 1 at ui/struct-enums/module-qualified-struct-destructure.rs:13:26: 13:28
        return;                          // scope 0 at ui/struct-enums/module-qualified-struct-destructure.rs:14:2: 14:2
    }
}
