// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn producer(_1: &Sender<Vec<u8>>) -> () {
    debug tx => _1;                      // in scope 0 at ui/struct-enums/ivec-tag.rs:8:13: 8:15
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/ivec-tag.rs:8:35: 8:35
    let _2: ();                          // in scope 0 at ui/struct-enums/ivec-tag.rs:9:5: 11:24
    let mut _3: std::result::Result<(), std::sync::mpsc::SendError<std::vec::Vec<u8>>>; // in scope 0 at ui/struct-enums/ivec-tag.rs:9:5: 11:15
    let mut _4: &std::sync::mpsc::Sender<std::vec::Vec<u8>>; // in scope 0 at ui/struct-enums/ivec-tag.rs:9:5: 11:15
    let mut _5: std::vec::Vec<u8>;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
    let mut _6: std::boxed::Box<[u8]>;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[u8; 13]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _10: *mut u8;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _11: std::boxed::Box<[u8; 13]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _12: *const [u8; 13];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/ivec-tag.rs:9:5: 11:15
        _8 = const 13_usize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const 1_usize;              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _10 = alloc::alloc::exchange_malloc(move _8, move _9) -> bb1; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = ShallowInitBox(move _10, [u8; 13]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _12 = (((_11.0: std::ptr::Unique<[u8; 13]>).0: std::ptr::NonNull<[u8; 13]>).0: *const [u8; 13]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_12) = [const 1_u8, const 2_u8, const 3_u8, const 4_u8, const 5_u8, const 6_u8, const 7_u8, const 8_u8, const 9_u8, const 10_u8, const 11_u8, const 12_u8, const 13_u8]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _7 = move _11;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = move _7 as std::boxed::Box<[u8]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = slice::<impl [u8]>::into_vec::<std::alloc::Global>(move _6) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[u8]>) -> Vec<u8> {slice::<impl [u8]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Sender::<Vec<u8>>::send(move _4, move _5) -> bb3; // scope 0 at ui/struct-enums/ivec-tag.rs:9:5: 11:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/ivec-tag.rs:9:8: 9:12
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<Vec<u8>>, Vec<u8>) -> Result<(), SendError<Vec<u8>>> {Sender::<Vec<u8>>::send}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = Result::<(), SendError<Vec<u8>>>::unwrap(move _3) -> bb4; // scope 0 at ui/struct-enums/ivec-tag.rs:9:5: 11:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/ivec-tag.rs:11:16: 11:22
                                         // + literal: Const { ty: fn(Result<(), SendError<Vec<u8>>>) {Result::<(), SendError<Vec<u8>>>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/struct-enums/ivec-tag.rs:12:2: 12:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/ivec-tag.rs:14:15: 14:15
    let _1: std::sync::mpsc::Sender<std::vec::Vec<u8>>; // in scope 0 at ui/struct-enums/ivec-tag.rs:15:10: 15:12
    let _2: std::sync::mpsc::Receiver<std::vec::Vec<u8>>; // in scope 0 at ui/struct-enums/ivec-tag.rs:15:14: 15:16
    let mut _3: (std::sync::mpsc::Sender<std::vec::Vec<u8>>, std::sync::mpsc::Receiver<std::vec::Vec<u8>>); // in scope 0 at ui/struct-enums/ivec-tag.rs:15:20: 15:40
    let mut _5: [closure@ui/struct-enums/ivec-tag.rs:16:30: 16:36]; // in scope 0 at ui/struct-enums/ivec-tag.rs:16:30: 18:6
    let mut _7: std::result::Result<std::vec::Vec<u8>, std::sync::mpsc::RecvError>; // in scope 0 at ui/struct-enums/ivec-tag.rs:20:26: 20:35
    let mut _8: &std::sync::mpsc::Receiver<std::vec::Vec<u8>>; // in scope 0 at ui/struct-enums/ivec-tag.rs:20:26: 20:35
    let _9: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/struct-enums/ivec-tag.rs:21:5: 21:16
    let mut _10: std::thread::JoinHandle<()>; // in scope 0 at ui/struct-enums/ivec-tag.rs:21:5: 21:9
    let mut _11: bool;                   // in scope 0 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    let mut _12: bool;                   // in scope 0 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    scope 1 {
        debug tx => _1;                  // in scope 1 at ui/struct-enums/ivec-tag.rs:15:10: 15:12
        debug rx => _2;                  // in scope 1 at ui/struct-enums/ivec-tag.rs:15:14: 15:16
        let _4: std::thread::JoinHandle<()>; // in scope 1 at ui/struct-enums/ivec-tag.rs:16:9: 16:13
        scope 2 {
            debug prod => _4;            // in scope 2 at ui/struct-enums/ivec-tag.rs:16:9: 16:13
            let _6: std::vec::Vec<u8>;   // in scope 2 at ui/struct-enums/ivec-tag.rs:20:9: 20:14
            scope 3 {
                debug _data => _6;       // in scope 3 at ui/struct-enums/ivec-tag.rs:20:9: 20:14
            }
        }
    }

    bb0: {
        _11 = const false;               // scope 0 at ui/struct-enums/ivec-tag.rs:15:20: 15:40
        _12 = const false;               // scope 0 at ui/struct-enums/ivec-tag.rs:15:20: 15:40
        _3 = channel::<Vec<u8>>() -> bb1; // scope 0 at ui/struct-enums/ivec-tag.rs:15:20: 15:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/ivec-tag.rs:15:20: 15:38
                                         // + literal: Const { ty: fn() -> (Sender<Vec<u8>>, std::sync::mpsc::Receiver<Vec<u8>>) {channel::<Vec<u8>>}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = const true;                // scope 0 at ui/struct-enums/ivec-tag.rs:15:10: 15:12
        _1 = move (_3.0: std::sync::mpsc::Sender<std::vec::Vec<u8>>); // scope 0 at ui/struct-enums/ivec-tag.rs:15:10: 15:12
        _2 = move (_3.1: std::sync::mpsc::Receiver<std::vec::Vec<u8>>); // scope 0 at ui/struct-enums/ivec-tag.rs:15:14: 15:16
        _12 = const false;               // scope 1 at ui/struct-enums/ivec-tag.rs:16:30: 18:6
        _5 = [closure@ui/struct-enums/ivec-tag.rs:16:30: 16:36] { tx: move _1 }; // scope 1 at ui/struct-enums/ivec-tag.rs:16:30: 18:6
                                         // closure
                                         // + def_id: DefId(0:9 ~ ivec_tag[da33]::main::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (std::sync::mpsc::Sender<std::vec::Vec<u8>>,),
                                         // ]
        _4 = spawn::<[closure@ui/struct-enums/ivec-tag.rs:16:30: 16:36], ()>(move _5) -> [return: bb2, unwind: bb10]; // scope 1 at ui/struct-enums/ivec-tag.rs:16:16: 18:7
                                         // mir::Constant
                                         // + span: ui/struct-enums/ivec-tag.rs:16:16: 16:29
                                         // + literal: Const { ty: fn([closure@ui/struct-enums/ivec-tag.rs:16:30: 16:36]) -> JoinHandle<()> {spawn::<[closure@ui/struct-enums/ivec-tag.rs:16:30: 16:36], ()>}, val: Value(<ZST>) }
    }

    bb2: {
        _11 = const true;                // scope 1 at ui/struct-enums/ivec-tag.rs:18:6: 18:7
        _8 = &_2;                        // scope 2 at ui/struct-enums/ivec-tag.rs:20:26: 20:35
        _7 = std::sync::mpsc::Receiver::<Vec<u8>>::recv(move _8) -> [return: bb3, unwind: bb13]; // scope 2 at ui/struct-enums/ivec-tag.rs:20:26: 20:35
                                         // mir::Constant
                                         // + span: ui/struct-enums/ivec-tag.rs:20:29: 20:33
                                         // + literal: Const { ty: for<'a> fn(&'a std::sync::mpsc::Receiver<Vec<u8>>) -> Result<Vec<u8>, RecvError> {std::sync::mpsc::Receiver::<Vec<u8>>::recv}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = Result::<Vec<u8>, RecvError>::unwrap(move _7) -> [return: bb4, unwind: bb13]; // scope 2 at ui/struct-enums/ivec-tag.rs:20:26: 20:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/ivec-tag.rs:20:36: 20:42
                                         // + literal: Const { ty: fn(Result<Vec<u8>, RecvError>) -> Vec<u8> {Result::<Vec<u8>, RecvError>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = const false;               // scope 3 at ui/struct-enums/ivec-tag.rs:21:5: 21:9
        _10 = move _4;                   // scope 3 at ui/struct-enums/ivec-tag.rs:21:5: 21:9
        _9 = JoinHandle::<()>::join(move _10) -> [return: bb5, unwind: bb9]; // scope 3 at ui/struct-enums/ivec-tag.rs:21:5: 21:16
                                         // mir::Constant
                                         // + span: ui/struct-enums/ivec-tag.rs:21:10: 21:14
                                         // + literal: Const { ty: fn(JoinHandle<()>) -> Result<(), Box<(dyn Any + Send + 'static)>> {JoinHandle::<()>::join}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_9) -> [return: bb6, unwind: bb9]; // scope 3 at ui/struct-enums/ivec-tag.rs:21:16: 21:17
    }

    bb6: {
        drop(_6) -> [return: bb7, unwind: bb13]; // scope 2 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    }

    bb7: {
        _11 = const false;               // scope 1 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
        drop(_2) -> [return: bb8, unwind: bb15]; // scope 0 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    }

    bb8: {
        _12 = const false;               // scope 0 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
        return;                          // scope 0 at ui/struct-enums/ivec-tag.rs:22:2: 22:2
    }

    bb9 (cleanup): {
        drop(_6) -> bb13;                // scope 2 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    }

    bb10 (cleanup): {
        drop(_2) -> bb15;                // scope 0 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/ivec-tag.rs:14:1: 22:2
    }

    bb12 (cleanup): {
        drop(_4) -> bb10;                // scope 1 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    }

    bb13 (cleanup): {
        switchInt(_11) -> [0: bb10, otherwise: bb12]; // scope 1 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    }

    bb14 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    }

    bb15 (cleanup): {
        switchInt(_12) -> [0: bb11, otherwise: bb14]; // scope 0 at ui/struct-enums/ivec-tag.rs:22:1: 22:2
    }
}

fn main::{closure#0}(_1: [closure@ui/struct-enums/ivec-tag.rs:16:30: 16:36]) -> () {
    debug tx => (_1.0: std::sync::mpsc::Sender<std::vec::Vec<u8>>); // in scope 0 at ui/struct-enums/ivec-tag.rs:15:10: 15:12
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/ivec-tag.rs:16:37: 16:37
    let mut _2: &std::sync::mpsc::Sender<std::vec::Vec<u8>>; // in scope 0 at ui/struct-enums/ivec-tag.rs:17:18: 17:21
    let _3: &std::sync::mpsc::Sender<std::vec::Vec<u8>>; // in scope 0 at ui/struct-enums/ivec-tag.rs:17:18: 17:21

    bb0: {
        _3 = &(_1.0: std::sync::mpsc::Sender<std::vec::Vec<u8>>); // scope 0 at ui/struct-enums/ivec-tag.rs:17:18: 17:21
        _2 = _3;                         // scope 0 at ui/struct-enums/ivec-tag.rs:17:18: 17:21
        _0 = producer(move _2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/struct-enums/ivec-tag.rs:17:9: 17:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/ivec-tag.rs:17:9: 17:17
                                         // + literal: Const { ty: for<'a> fn(&'a Sender<Vec<u8>>) {producer}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/struct-enums/ivec-tag.rs:18:5: 18:6
    }

    bb2: {
        return;                          // scope 0 at ui/struct-enums/ivec-tag.rs:18:6: 18:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/struct-enums/ivec-tag.rs:18:5: 18:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/ivec-tag.rs:16:30: 18:6
    }
}
