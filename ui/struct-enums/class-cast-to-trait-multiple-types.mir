// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:15:1: 15:9>::bark(_1: &mut dog) -> isize {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:16:13: 16:22
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:16:27: 16:32
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
    let mut _5: &[&str; 3];              // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
    let _6: &[&str; 3];                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:30: 17:40
    let mut _12: &usize;                 // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:30: 17:40
    let _13: &usize;                     // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:30: 17:40
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:42: 17:53
    let mut _15: &isize;                 // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:42: 17:53
    let _16: &isize;                     // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:42: 17:53
    let mut _17: (usize, bool);          // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:18:7: 18:28
    let mut _18: usize;                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:19:10: 19:30
    let mut _19: usize;                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:19:10: 19:20
    let mut _20: (isize, bool);          // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:20:11: 20:27
    let mut _21: usize;                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:22:10: 22:31
    let mut _22: usize;                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:22:10: 22:20
    let mut _23: (isize, bool);          // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:23:11: 23:27
    let _24: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _25: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _26: &[&str];                // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
    let mut _27: &[&str; 3];             // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
    let _28: &[&str; 3];                 // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
    let mut _29: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _30: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _31: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _32: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _33: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:30: 25:40
    let mut _34: &usize;                 // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:30: 25:40
    let _35: &usize;                     // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:30: 25:40
    let mut _36: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:42: 25:53
    let mut _37: &isize;                 // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:42: 25:53
    let _38: &isize;                     // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:42: 25:53
    let mut _39: &[&str; 3];             // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
    let mut _40: &[&str; 3];             // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28

    bb0: {
        _40 = const _;                   // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(dog::bark, [], Some(promoted[1])) }
        _6 = _40;                        // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
        _5 = _6;                         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
        _13 = &((*_1).0: usize);         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:30: 17:40
        _12 = _13;                       // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:30: 17:40
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _12) -> bb1; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:30: 17:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:30: 17:40
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _16 = &((*_1).1: isize);         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:42: 17:53
        _15 = _16;                       // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:42: 17:53
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _15) -> bb2; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:42: 17:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:42: 17:53
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = [move _11, move _14];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb3; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _print(move _3) -> bb4;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        _17 = CheckedAdd(((*_1).0: usize), const 1_usize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:18:7: 18:28
        assert(!move (_17.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> bb5; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:18:7: 18:28
    }

    bb5: {
        ((*_1).0: usize) = move (_17.0: usize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:18:7: 18:28
        _19 = ((*_1).0: usize);          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:19:10: 19:20
        _18 = Rem(move _19, const 3_usize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:19:10: 19:30
        switchInt(move _18) -> [0: bb6, otherwise: bb8]; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:19:10: 19:41
    }

    bb6: {
        _20 = CheckedAdd(((*_1).1: isize), const 1_isize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:20:11: 20:27
        assert(!move (_20.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: isize), const 1_isize) -> bb7; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:20:11: 20:27
    }

    bb7: {
        ((*_1).1: isize) = move (_20.0: isize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:20:11: 20:27
        goto -> bb8;                     // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:19:7: 21:8
    }

    bb8: {
        _22 = ((*_1).0: usize);          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:22:10: 22:20
        _21 = Rem(move _22, const 10_usize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:22:10: 22:31
        switchInt(move _21) -> [0: bb9, otherwise: bb11]; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:22:10: 22:42
    }

    bb9: {
        _23 = CheckedSub(((*_1).1: isize), const 2_isize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:23:11: 23:27
        assert(!move (_23.1: bool), "attempt to compute `{} - {}`, which would overflow", ((*_1).1: isize), const 2_isize) -> bb10; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:23:11: 23:27
    }

    bb10: {
        ((*_1).1: isize) = move (_23.0: isize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:23:11: 23:27
        goto -> bb11;                    // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:22:7: 24:8
    }

    bb11: {
        _39 = const _;                   // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(dog::bark, [], Some(promoted[0])) }
        _28 = _39;                       // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
        _27 = _28;                       // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
        _26 = move _27 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
        _35 = &((*_1).0: usize);         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:30: 25:40
        _34 = _35;                       // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:30: 25:40
        _33 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _34) -> bb12; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:30: 25:40
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:30: 25:40
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb12: {
        _38 = &((*_1).1: isize);         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:42: 25:53
        _37 = _38;                       // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:42: 25:53
        _36 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _37) -> bb13; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:42: 25:53
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:42: 25:53
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb13: {
        _32 = [move _33, move _36];      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _31 = &_32;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _30 = _31;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _29 = move _30 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _25 = Arguments::<'_>::new_v1(move _26, move _29) -> bb14; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb14: {
        _24 = _print(move _25) -> bb15;  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb15: {
        _0 = ((*_1).1: isize);           // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:26:7: 26:18
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:27:6: 27:6
    }
}

promoted[0] in <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:15:1: 15:9>::bark: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
    let mut _1: [&str; 3];               // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28

    bb0: {
        _1 = [const "Grrr ", const " ", const "\n"]; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:25:16: 25:28
    }
}

promoted[1] in <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:15:1: 15:9>::bark: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
    let mut _1: [&str; 3];               // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28

    bb0: {
        _1 = [const "Woof ", const " ", const "\n"]; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:17:16: 17:28
    }
}

fn <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:30:1: 30:19>::speak(_1: &mut dog) -> isize {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:31:14: 31:23
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:31:28: 31:33
    let mut _2: &mut dog;                // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:32:9: 32:20

    bb0: {
        _2 = &mut (*_1);                 // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:32:9: 32:20
        _0 = dog::bark(move _2) -> bb1;  // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:32:9: 32:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:32:14: 32:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut dog) -> isize {dog::bark}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:33:6: 33:6
    }
}

fn dog() -> dog {
    let mut _0: dog;                     // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:36:13: 36:16

    bb0: {
        _0 = dog { barks: const 0_usize, volume: const 0_isize }; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:37:5: 40:6
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:41:2: 41:2
    }
}

fn <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:43:10: 43:15>::clone(_1: &cat) -> cat {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:43:10: 43:15
    let mut _0: cat;                     // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:43:10: 43:15
    let mut _2: usize;                   // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:45:3: 45:15
    let mut _3: &usize;                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:45:3: 45:15
    let _4: &usize;                      // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:45:3: 45:15
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:47:3: 47:20
    let mut _6: &isize;                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:47:3: 47:20
    let _7: &isize;                      // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:47:3: 47:20
    let mut _8: std::string::String;     // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:48:3: 48:15
    let mut _9: &std::string::String;    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:48:3: 48:15
    let _10: &std::string::String;       // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:48:3: 48:15

    bb0: {
        _4 = &((*_1).0: usize);          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:45:3: 45:15
        _3 = _4;                         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:45:3: 45:15
        _2 = (*_3);                      // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:45:3: 45:15
        _7 = &((*_1).1: isize);          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:47:3: 47:20
        _6 = _7;                         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:47:3: 47:20
        _5 = (*_6);                      // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:47:3: 47:20
        _10 = &((*_1).2: std::string::String); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:48:3: 48:15
        _9 = _10;                        // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:48:3: 48:15
        _8 = <String as Clone>::clone(move _9) -> bb1; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:48:3: 48:15
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:48:3: 48:15
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> String {<String as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = cat { meows: move _2, how_hungry: move _5, name: move _8 }; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:43:10: 43:15
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:43:15: 43:15
    }
}

fn <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:51:1: 51:19>::speak(_1: &mut cat) -> isize {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:52:14: 52:23
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:52:28: 52:33
    let mut _2: usize;                   // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:53:9: 53:20
    let mut _3: &mut cat;                // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:53:9: 53:20

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:53:9: 53:20
        _2 = cat::meow(move _3) -> bb1;  // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:53:9: 53:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:53:14: 53:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut cat) -> usize {cat::meow}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = move _2 as isize (IntToInt); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:53:9: 53:29
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:54:6: 54:6
    }
}

fn <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:57:1: 57:9>::meow_count(_1: &cat) -> usize {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:58:23: 58:28
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:58:33: 58:38

    bb0: {
        _0 = ((*_1).0: usize);           // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:59:9: 59:19
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:60:6: 60:6
    }
}

fn <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:63:1: 63:9>::meow(_1: &mut cat) -> usize {
    debug self => _1;                    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:64:13: 64:22
    let mut _0: usize;                   // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:64:27: 64:32
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
    let mut _5: &[&str; 1];              // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
    let _6: &[&str; 1];                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: (usize, bool);          // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:66:9: 66:30
    let mut _11: usize;                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:67:12: 67:32
    let mut _12: usize;                  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:67:12: 67:22
    let mut _13: (isize, bool);          // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:68:13: 68:33
    let mut _14: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str; 1];             // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24

    bb0: {
        _15 = const _;                   // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(cat::meow, [], Some(promoted[1])) }
        _6 = _15;                        // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
        _5 = _6;                         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
        _14 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(cat::meow, [], Some(promoted[0])) }
        _9 = _14;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _print(move _3) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = CheckedAdd(((*_1).0: usize), const 1_usize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:66:9: 66:30
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).0: usize), const 1_usize) -> bb3; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:66:9: 66:30
    }

    bb3: {
        ((*_1).0: usize) = move (_10.0: usize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:66:9: 66:30
        _12 = ((*_1).0: usize);          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:67:12: 67:22
        _11 = Rem(move _12, const 5_usize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:67:12: 67:32
        switchInt(move _11) -> [0: bb4, otherwise: bb6]; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:67:12: 67:43
    }

    bb4: {
        _13 = CheckedAdd(((*_1).1: isize), const 1_isize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:68:13: 68:33
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: isize), const 1_isize) -> bb5; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:68:13: 68:33
    }

    bb5: {
        ((*_1).1: isize) = move (_13.0: isize); // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:68:13: 68:33
        goto -> bb6;                     // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:67:9: 69:10
    }

    bb6: {
        _0 = ((*_1).0: usize);           // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:70:9: 70:19
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:71:6: 71:6
    }
}

promoted[0] in <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:63:1: 63:9>::meow: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in <impl at ui/struct-enums/class-cast-to-trait-multiple-types.rs:63:1: 63:9>::meow: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
    let mut _1: [&str; 1];               // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24

    bb0: {
        _1 = [const "Meow\n"];           // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:65:18: 65:24
    }
}

fn cat(_1: usize, _2: isize, _3: String) -> cat {
    debug in_x => _1;                    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:74:8: 74:12
    debug in_y => _2;                    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:74:21: 74:25
    debug in_name => _3;                 // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:74:34: 74:41
    let mut _0: cat;                     // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:74:54: 74:57
    let mut _4: usize;                   // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:76:16: 76:20
    let mut _5: isize;                   // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:77:21: 77:25
    let mut _6: std::string::String;     // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:78:15: 78:22

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:76:16: 76:20
        _5 = _2;                         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:77:21: 77:25
        _6 = move _3;                    // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:78:15: 78:22
        _0 = cat { meows: move _4, how_hungry: move _5, name: move _6 }; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:75:5: 79:6
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:80:2: 80:2
    }
}

fn annoy_neighbors(_1: &mut dyn noisy) -> () {
    debug critter => _1;                 // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:83:20: 83:27
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:83:45: 83:45
    let mut _2: std::ops::Range<usize>;  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
    let mut _4: std::ops::Range<usize>;  // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
    let mut _5: std::option::Option<usize>; // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
    let mut _7: &mut std::ops::Range<usize>; // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
    let mut _8: isize;                   // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:5: 84:47
    let _10: isize;                      // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:29: 84:44
    let mut _11: &mut dyn noisy;         // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:29: 84:44
    scope 1 {
        debug iter => _4;                // in scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
        let _9: usize;                   // in scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:9: 84:11
        scope 2 {
            debug _i => _9;              // in scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:9: 84:11
        }
    }

    bb0: {
        _3 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize }; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
        _2 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _3) -> bb1; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = move _2;                    // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
        goto -> bb2;                     // scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:5: 84:47
    }

    bb2: {
        _7 = &mut _4;                    // scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
        _6 = &mut (*_7);                 // scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
        _5 = <std::ops::Range<usize> as Iterator>::next(move _6) -> bb3; // scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = discriminant(_5);           // scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
        switchInt(move _8) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
    }

    bb4: {
        _9 = ((_5 as Some).0: usize);    // scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:9: 84:11
        _11 = &mut (*_1);                // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:29: 84:44
        _10 = <dyn noisy as noisy>::speak(move _11) -> bb2; // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:29: 84:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:37: 84:42
                                         // + literal: Const { ty: for<'a> fn(&'a mut dyn noisy) -> isize {<dyn noisy as noisy>::speak}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:84:15: 84:26
    }

    bb6: {
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:85:2: 85:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:87:15: 87:15
    let mut _1: cat;                     // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:7: 88:15
    let mut _2: std::string::String;     // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:39: 88:57
    let mut _3: &str;                    // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:39: 88:57
    let _4: &str;                        // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:39: 88:45
    let _6: ();                          // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:90:3: 90:29
    let mut _7: &mut dyn noisy;          // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:90:19: 90:28
    let mut _8: &mut cat;                // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:90:19: 90:28
    let mut _9: &mut cat;                // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:90:19: 90:28
    let _10: ();                         // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:91:3: 91:34
    let mut _11: &mut dyn noisy;         // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:91:19: 91:33
    let mut _12: &mut dog;               // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:91:19: 91:33
    let mut _13: &mut dog;               // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:91:19: 91:33
    let mut _14: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _16: usize;                      // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:92:14: 92:31
    let mut _17: &cat;                   // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:92:14: 92:31
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _23: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _24: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _26: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _27: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _28: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _29: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _30: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _31: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _32: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _33: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _34: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _35: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _40: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _41: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _43: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _44: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _45: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _46: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _47: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _48: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug nyan => _1;                // in scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:7: 88:15
        let mut _5: dog;                 // in scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:89:7: 89:20
        scope 2 {
            debug whitefang => _5;       // in scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:89:7: 89:20
            let _19: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _20: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _36: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _37: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _50: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            let mut _51: &usize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _19;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _20;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _25: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _25;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug left_val => _36;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _37;  // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _42: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 6 {
                    debug kind => _42;   // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = const "nyan";               // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:39: 88:45
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:39: 88:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:39: 88:57
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:39: 88:57
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:46: 88:55
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = cat(const 0_usize, const 2_isize, move _2) -> bb2; // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:23: 88:58
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:88:23: 88:26
                                         // + literal: Const { ty: fn(usize, isize, String) -> cat {cat}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = dog() -> [return: bb3, unwind: bb12]; // scope 1 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:89:28: 89:33
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:89:28: 89:31
                                         // + literal: Const { ty: fn() -> dog {dog}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &mut _1;                    // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:90:19: 90:28
        _8 = &mut (*_9);                 // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:90:19: 90:28
        _7 = move _8 as &mut dyn noisy (Pointer(Unsize)); // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:90:19: 90:28
        _6 = annoy_neighbors(move _7) -> [return: bb4, unwind: bb12]; // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:90:3: 90:29
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:90:3: 90:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut (dyn noisy + 'a)) {annoy_neighbors}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = &mut _5;                   // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:91:19: 91:33
        _12 = &mut (*_13);               // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:91:19: 91:33
        _11 = move _12 as &mut dyn noisy (Pointer(Unsize)); // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:91:19: 91:33
        _10 = annoy_neighbors(move _11) -> [return: bb5, unwind: bb12]; // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:91:3: 91:34
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:91:3: 91:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut (dyn noisy + 'a)) {annoy_neighbors}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = &_1;                       // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:92:14: 92:31
        _16 = cat::meow_count(move _17) -> [return: bb6, unwind: bb12]; // scope 2 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:92:14: 92:31
                                         // mir::Constant
                                         // + span: ui/struct-enums/class-cast-to-trait-multiple-types.rs:92:19: 92:29
                                         // + literal: Const { ty: for<'a> fn(&'a cat) -> usize {cat::meow_count}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = &_16;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _51 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _18 = _51;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _18);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _19 = (_14.0: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _20 = (_14.1: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _23 = (*_19);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _24 = const 10_usize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _22 = Eq(move _23, move _24);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _21 = Not(move _22);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _21) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _25 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _27 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _29 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _30 = _31;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _32 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _26 = core::panicking::assert_failed::<usize, usize>(move _27, move _28, move _30, move _32) -> bb12; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _34 = &(_5.1: isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _50 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _35 = _50;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _33 = (move _34, move _35);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _36 = (_33.0: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _37 = (_33.1: &isize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _40 = (*_36);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _41 = const 1_isize;             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _39 = Eq(move _40, move _41);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _38 = Not(move _39);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _38) -> [0: bb10, otherwise: bb9]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb9: {
        _42 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _44 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _46 = _36;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _46;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _48 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _47 = _48;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _43 = core::panicking::assert_failed::<isize, isize>(move _44, move _45, move _47, move _49) -> bb12; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb10: {
        drop(_1) -> bb11;                // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:94:1: 94:2
    }

    bb11: {
        return;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:94:2: 94:2
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:94:1: 94:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:87:1: 94:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:93:32: 93:33

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:93:32: 93:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:92:33: 92:41

    bb0: {
        _1 = const 10_usize;             // scope 0 at ui/struct-enums/class-cast-to-trait-multiple-types.rs:92:33: 92:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
