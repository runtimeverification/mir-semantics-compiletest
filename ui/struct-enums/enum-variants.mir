// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/enum-variants.rs:13:15: 13:15
    let mut _1: Animal;                  // in scope 0 at ui/struct-enums/enum-variants.rs:14:9: 14:14
    let mut _2: std::string::String;     // in scope 0 at ui/struct-enums/enum-variants.rs:14:37: 14:56
    let mut _3: &str;                    // in scope 0 at ui/struct-enums/enum-variants.rs:14:37: 14:56
    let _4: &str;                        // in scope 0 at ui/struct-enums/enum-variants.rs:14:37: 14:44
    let mut _5: Animal;                  // in scope 0 at ui/struct-enums/enum-variants.rs:15:9: 15:63
    let mut _6: std::string::String;     // in scope 0 at ui/struct-enums/enum-variants.rs:15:28: 15:48
    let mut _7: &str;                    // in scope 0 at ui/struct-enums/enum-variants.rs:15:28: 15:48
    let _8: &str;                        // in scope 0 at ui/struct-enums/enum-variants.rs:15:28: 15:36
    let mut _10: std::string::String;    // in scope 0 at ui/struct-enums/enum-variants.rs:17:47: 17:70
    let mut _11: &str;                   // in scope 0 at ui/struct-enums/enum-variants.rs:17:47: 17:70
    let _12: &str;                       // in scope 0 at ui/struct-enums/enum-variants.rs:17:47: 17:58
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/struct-enums/enum-variants.rs:14:9: 14:14
        let _9: Animal;                  // in scope 1 at ui/struct-enums/enum-variants.rs:17:9: 17:11
        scope 2 {
            debug _c => _9;              // in scope 2 at ui/struct-enums/enum-variants.rs:17:9: 17:11
        }
    }

    bb0: {
        _4 = const "Cocoa";              // scope 0 at ui/struct-enums/enum-variants.rs:14:37: 14:44
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-variants.rs:14:37: 14:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = _4;                         // scope 0 at ui/struct-enums/enum-variants.rs:14:37: 14:56
        _2 = <str as ToString>::to_string(move _3) -> bb1; // scope 0 at ui/struct-enums/enum-variants.rs:14:37: 14:56
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-variants.rs:14:45: 14:54
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Animal::Dog(move _2, const 37.200000000000003f64); // scope 0 at ui/struct-enums/enum-variants.rs:14:25: 14:63
        _8 = const "Spotty";             // scope 1 at ui/struct-enums/enum-variants.rs:15:28: 15:36
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-variants.rs:15:28: 15:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 1 at ui/struct-enums/enum-variants.rs:15:28: 15:48
        _6 = <str as ToString>::to_string(move _7) -> [return: bb2, unwind: bb6]; // scope 1 at ui/struct-enums/enum-variants.rs:15:28: 15:48
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-variants.rs:15:37: 15:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Animal::Cat { name: move _6, weight: const 2.7000000000000002f64 }; // scope 1 at ui/struct-enums/enum-variants.rs:15:9: 15:63
        drop(_1) -> [return: bb9, unwind: bb8]; // scope 1 at ui/struct-enums/enum-variants.rs:15:5: 15:6
    }

    bb3: {
        _9 = Animal::Cat { name: move _10, weight: const 3.1000000000000001f64 }; // scope 1 at ui/struct-enums/enum-variants.rs:17:14: 17:72
        drop(_9) -> [return: bb4, unwind: bb6]; // scope 1 at ui/struct-enums/enum-variants.rs:18:1: 18:2
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/struct-enums/enum-variants.rs:18:1: 18:2
    }

    bb5: {
        return;                          // scope 0 at ui/struct-enums/enum-variants.rs:18:2: 18:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/struct-enums/enum-variants.rs:18:1: 18:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/struct-enums/enum-variants.rs:13:1: 18:2
    }

    bb8 (cleanup): {
        _1 = move _5;                    // scope 1 at ui/struct-enums/enum-variants.rs:15:5: 15:6
        goto -> bb6;                     // scope 1 at ui/struct-enums/enum-variants.rs:15:5: 15:6
    }

    bb9: {
        _1 = move _5;                    // scope 1 at ui/struct-enums/enum-variants.rs:15:5: 15:6
        _12 = const "Spreckles";         // scope 1 at ui/struct-enums/enum-variants.rs:17:47: 17:58
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-variants.rs:17:47: 17:58
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _11 = _12;                       // scope 1 at ui/struct-enums/enum-variants.rs:17:47: 17:70
        _10 = <str as ToString>::to_string(move _11) -> [return: bb3, unwind: bb6]; // scope 1 at ui/struct-enums/enum-variants.rs:17:47: 17:70
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-variants.rs:17:59: 17:68
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }
}

fn Animal::Dog(_1: String, _2: f64) -> Animal {
    let mut _0: Animal;                  // return place in scope 0 at ui/struct-enums/enum-variants.rs:9:5: 9:8

    bb0: {
        _0 = Animal::Dog(move _1, move _2); // scope 0 at ui/struct-enums/enum-variants.rs:9:5: 9:8
        return;                          // scope 0 at ui/struct-enums/enum-variants.rs:9:5: 9:8
    }
}

// MIR FOR CTFE
fn Animal::Dog(_1: String, _2: f64) -> Animal {
    let mut _0: Animal;                  // return place in scope 0 at ui/struct-enums/enum-variants.rs:9:5: 9:8

    bb0: {
        _0 = Animal::Dog(move _1, move _2); // scope 0 at ui/struct-enums/enum-variants.rs:9:5: 9:8
        return;                          // scope 0 at ui/struct-enums/enum-variants.rs:9:5: 9:8
    }
}
