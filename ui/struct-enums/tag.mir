// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/struct-enums/tag.rs:8:1: 8:26>::eq(_1: &colour, _2: &colour) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tag.rs:9:11: 9:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/tag.rs:9:18: 9:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/tag.rs:9:37: 9:41
    let mut _3: isize;                   // in scope 0 at ui/struct-enums/tag.rs:11:13: 11:32
    let _4: isize;                       // in scope 0 at ui/struct-enums/tag.rs:11:25: 11:27
    let _5: isize;                       // in scope 0 at ui/struct-enums/tag.rs:11:29: 11:31
    let mut _6: isize;                   // in scope 0 at ui/struct-enums/tag.rs:13:21: 13:40
    let mut _9: bool;                    // in scope 0 at ui/struct-enums/tag.rs:13:44: 13:52
    let mut _10: isize;                  // in scope 0 at ui/struct-enums/tag.rs:13:44: 13:46
    let mut _11: isize;                  // in scope 0 at ui/struct-enums/tag.rs:13:50: 13:52
    let mut _12: bool;                   // in scope 0 at ui/struct-enums/tag.rs:13:56: 13:64
    let mut _13: isize;                  // in scope 0 at ui/struct-enums/tag.rs:13:56: 13:58
    let mut _14: isize;                  // in scope 0 at ui/struct-enums/tag.rs:13:62: 13:64
    let mut _15: isize;                  // in scope 0 at ui/struct-enums/tag.rs:19:21: 19:36
    scope 1 {
        debug a0 => _4;                  // in scope 1 at ui/struct-enums/tag.rs:11:25: 11:27
        debug b0 => _5;                  // in scope 1 at ui/struct-enums/tag.rs:11:29: 11:31
        let _7: isize;                   // in scope 1 at ui/struct-enums/tag.rs:13:33: 13:35
        let _8: isize;                   // in scope 1 at ui/struct-enums/tag.rs:13:37: 13:39
        scope 2 {
            debug a1 => _7;              // in scope 2 at ui/struct-enums/tag.rs:13:33: 13:35
            debug b1 => _8;              // in scope 2 at ui/struct-enums/tag.rs:13:37: 13:39
        }
    }

    bb0: {
        _3 = discriminant((*_1));        // scope 0 at ui/struct-enums/tag.rs:10:15: 10:20
        switchInt(move _3) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/tag.rs:10:9: 10:20
    }

    bb1: {
        _15 = discriminant((*_2));       // scope 0 at ui/struct-enums/tag.rs:18:23: 18:31
        switchInt(move _15) -> [0: bb11, 1: bb9, otherwise: bb10]; // scope 0 at ui/struct-enums/tag.rs:18:17: 18:31
    }

    bb2: {
        unreachable;                     // scope 0 at ui/struct-enums/tag.rs:10:15: 10:20
    }

    bb3: {
        _4 = (((*_1) as red).0: isize);  // scope 0 at ui/struct-enums/tag.rs:11:25: 11:27
        _5 = (((*_1) as red).1: isize);  // scope 0 at ui/struct-enums/tag.rs:11:29: 11:31
        _6 = discriminant((*_2));        // scope 1 at ui/struct-enums/tag.rs:12:23: 12:31
        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 1 at ui/struct-enums/tag.rs:12:17: 12:31
    }

    bb4: {
        _0 = const false;                // scope 1 at ui/struct-enums/tag.rs:14:38: 14:43
        goto -> bb12;                    // scope 1 at ui/struct-enums/tag.rs:14:38: 14:43
    }

    bb5: {
        unreachable;                     // scope 1 at ui/struct-enums/tag.rs:12:23: 12:31
    }

    bb6: {
        _7 = (((*_2) as red).0: isize);  // scope 1 at ui/struct-enums/tag.rs:13:33: 13:35
        _8 = (((*_2) as red).1: isize);  // scope 1 at ui/struct-enums/tag.rs:13:37: 13:39
        _10 = _4;                        // scope 2 at ui/struct-enums/tag.rs:13:44: 13:46
        _11 = _7;                        // scope 2 at ui/struct-enums/tag.rs:13:50: 13:52
        _9 = Eq(move _10, move _11);     // scope 2 at ui/struct-enums/tag.rs:13:44: 13:52
        switchInt(move _9) -> [0: bb7, otherwise: bb8]; // scope 2 at ui/struct-enums/tag.rs:13:44: 13:64
    }

    bb7: {
        _0 = const false;                // scope 2 at ui/struct-enums/tag.rs:13:44: 13:64
        goto -> bb12;                    // scope 2 at ui/struct-enums/tag.rs:13:44: 13:64
    }

    bb8: {
        _13 = _5;                        // scope 2 at ui/struct-enums/tag.rs:13:56: 13:58
        _14 = _8;                        // scope 2 at ui/struct-enums/tag.rs:13:62: 13:64
        _12 = Eq(move _13, move _14);    // scope 2 at ui/struct-enums/tag.rs:13:56: 13:64
        _0 = move _12;                   // scope 2 at ui/struct-enums/tag.rs:13:44: 13:64
        goto -> bb12;                    // scope 2 at ui/struct-enums/tag.rs:13:44: 13:64
    }

    bb9: {
        _0 = const true;                 // scope 0 at ui/struct-enums/tag.rs:20:38: 20:42
        goto -> bb12;                    // scope 0 at ui/struct-enums/tag.rs:20:38: 20:42
    }

    bb10: {
        unreachable;                     // scope 0 at ui/struct-enums/tag.rs:18:23: 18:31
    }

    bb11: {
        _0 = const false;                // scope 0 at ui/struct-enums/tag.rs:19:40: 19:45
        goto -> bb12;                    // scope 0 at ui/struct-enums/tag.rs:19:40: 19:45
    }

    bb12: {
        return;                          // scope 0 at ui/struct-enums/tag.rs:24:6: 24:6
    }
}

fn <impl at ui/struct-enums/tag.rs:8:1: 8:26>::ne(_1: &colour, _2: &colour) -> bool {
    debug self => _1;                    // in scope 0 at ui/struct-enums/tag.rs:25:11: 25:16
    debug other => _2;                   // in scope 0 at ui/struct-enums/tag.rs:25:18: 25:23
    let mut _0: bool;                    // return place in scope 0 at ui/struct-enums/tag.rs:25:37: 25:41
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/tag.rs:25:45: 25:62
    let mut _4: &colour;                 // in scope 0 at ui/struct-enums/tag.rs:25:45: 25:62
    let mut _5: &colour;                 // in scope 0 at ui/struct-enums/tag.rs:25:56: 25:61

    bb0: {
        _4 = _1;                         // scope 0 at ui/struct-enums/tag.rs:25:45: 25:62
        _5 = _2;                         // scope 0 at ui/struct-enums/tag.rs:25:56: 25:61
        _3 = <colour as PartialEq>::eq(move _4, move _5) -> bb1; // scope 0 at ui/struct-enums/tag.rs:25:45: 25:62
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag.rs:25:53: 25:55
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a colour, &'b colour) -> bool {<colour as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Not(move _3);               // scope 0 at ui/struct-enums/tag.rs:25:44: 25:62
        return;                          // scope 0 at ui/struct-enums/tag.rs:25:64: 25:64
    }
}

fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag.rs:28:8: 28:8
    let _1: colour;                      // in scope 0 at ui/struct-enums/tag.rs:28:14: 28:15
    let mut _3: bool;                    // in scope 0 at ui/struct-enums/tag.rs:28:60: 28:77
    let mut _4: bool;                    // in scope 0 at ui/struct-enums/tag.rs:28:68: 28:76
    let mut _5: &colour;                 // in scope 0 at ui/struct-enums/tag.rs:28:69: 28:70
    let mut _6: &colour;                 // in scope 0 at ui/struct-enums/tag.rs:28:74: 28:75
    let mut _7: !;                       // in scope 0 at ui/struct-enums/tag.rs:28:60: 28:77
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/struct-enums/tag.rs:28:14: 28:15
        let _2: colour;                  // in scope 1 at ui/struct-enums/tag.rs:28:41: 28:42
        scope 2 {
            debug y => _2;               // in scope 2 at ui/struct-enums/tag.rs:28:41: 28:42
        }
    }

    bb0: {
        _1 = colour::red(const 1_isize, const 2_isize); // scope 0 at ui/struct-enums/tag.rs:28:18: 28:35
        _2 = colour::green;              // scope 1 at ui/struct-enums/tag.rs:28:45: 28:58
        _5 = &_1;                        // scope 2 at ui/struct-enums/tag.rs:28:69: 28:70
        _6 = &_2;                        // scope 2 at ui/struct-enums/tag.rs:28:74: 28:75
        _4 = <colour as PartialEq>::ne(move _5, move _6) -> bb1; // scope 2 at ui/struct-enums/tag.rs:28:68: 28:76
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag.rs:28:68: 28:76
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a colour, &'b colour) -> bool {<colour as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = Not(move _4);               // scope 2 at ui/struct-enums/tag.rs:28:60: 28:77
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/struct-enums/tag.rs:28:60: 28:77
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: (x != y)"); // scope 2 at ui/struct-enums/tag.rs:28:60: 28:77
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag.rs:28:60: 28:77
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/tag.rs:28:80: 28:80
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag.rs:30:15: 30:15
    let _1: ();                          // in scope 0 at ui/struct-enums/tag.rs:30:17: 30:20

    bb0: {
        _1 = f() -> bb1;                 // scope 0 at ui/struct-enums/tag.rs:30:17: 30:20
                                         // mir::Constant
                                         // + span: ui/struct-enums/tag.rs:30:17: 30:18
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/tag.rs:30:23: 30:23
    }
}

fn colour::red(_1: isize, _2: isize) -> colour {
    let mut _0: colour;                  // return place in scope 0 at ui/struct-enums/tag.rs:6:15: 6:18

    bb0: {
        _0 = colour::red(move _1, move _2); // scope 0 at ui/struct-enums/tag.rs:6:15: 6:18
        return;                          // scope 0 at ui/struct-enums/tag.rs:6:15: 6:18
    }
}

// MIR FOR CTFE
fn colour::red(_1: isize, _2: isize) -> colour {
    let mut _0: colour;                  // return place in scope 0 at ui/struct-enums/tag.rs:6:15: 6:18

    bb0: {
        _0 = colour::red(move _1, move _2); // scope 0 at ui/struct-enums/tag.rs:6:15: 6:18
        return;                          // scope 0 at ui/struct-enums/tag.rs:6:15: 6:18
    }
}
