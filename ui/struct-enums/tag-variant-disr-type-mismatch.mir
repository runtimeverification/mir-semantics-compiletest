// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
color::red::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-type-mismatch.rs:8:11: 8:12

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/struct-enums/tag-variant-disr-type-mismatch.rs:8:11: 8:12
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-type-mismatch.rs:8:11: 8:12
    }
}

color::blue::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/tag-variant-disr-type-mismatch.rs:9:12: 9:13

    bb0: {
        _0 = const 2_isize;              // scope 0 at ui/struct-enums/tag-variant-disr-type-mismatch.rs:9:12: 9:13
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-type-mismatch.rs:9:12: 9:13
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/tag-variant-disr-type-mismatch.rs:12:15: 12:15

    bb0: {
        return;                          // scope 0 at ui/struct-enums/tag-variant-disr-type-mismatch.rs:12:17: 12:17
    }
}
