// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn m(_1: t3) -> isize {
    debug input => _1;                   // in scope 0 at ui/struct-enums/record-pat.rs:9:6: 9:11
    let mut _0: isize;                   // return place in scope 0 at ui/struct-enums/record-pat.rs:9:20: 9:25
    let mut _2: isize;                   // in scope 0 at ui/struct-enums/record-pat.rs:11:20: 11:28
    let _3: isize;                       // in scope 0 at ui/struct-enums/record-pat.rs:11:26: 11:27
    let _4: usize;                       // in scope 0 at ui/struct-enums/record-pat.rs:12:26: 12:27
    let _5: isize;                       // in scope 0 at ui/struct-enums/record-pat.rs:12:33: 12:34
    let _6: usize;                       // in scope 0 at ui/struct-enums/record-pat.rs:12:37: 12:38
    let mut _7: isize;                   // in scope 0 at ui/struct-enums/record-pat.rs:12:52: 12:70
    let mut _8: usize;                   // in scope 0 at ui/struct-enums/record-pat.rs:12:53: 12:60
    let mut _9: usize;                   // in scope 0 at ui/struct-enums/record-pat.rs:12:54: 12:55
    let mut _10: usize;                  // in scope 0 at ui/struct-enums/record-pat.rs:12:58: 12:59
    let mut _11: (usize, bool);          // in scope 0 at ui/struct-enums/record-pat.rs:12:53: 12:60
    let mut _12: isize;                  // in scope 0 at ui/struct-enums/record-pat.rs:12:73: 12:74
    let mut _13: (isize, bool);          // in scope 0 at ui/struct-enums/record-pat.rs:12:52: 12:74
    scope 1 {
        debug m => _3;                   // in scope 1 at ui/struct-enums/record-pat.rs:11:26: 11:27
    }
    scope 2 {
        debug m => _4;                   // in scope 2 at ui/struct-enums/record-pat.rs:12:26: 12:27
        debug y => _5;                   // in scope 2 at ui/struct-enums/record-pat.rs:12:33: 12:34
        debug z => _6;                   // in scope 2 at ui/struct-enums/record-pat.rs:12:37: 12:38
    }

    bb0: {
        _2 = discriminant((((_1 as c).0: T2).0: t1)); // scope 0 at ui/struct-enums/record-pat.rs:10:11: 10:16
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 0 at ui/struct-enums/record-pat.rs:10:5: 10:16
    }

    bb1: {
        _5 = (((_1 as c).0: T2).1: isize); // scope 0 at ui/struct-enums/record-pat.rs:12:33: 12:34
        _6 = ((_1 as c).1: usize);       // scope 0 at ui/struct-enums/record-pat.rs:12:37: 12:38
        _4 = (((((_1 as c).0: T2).0: t1) as b).0: usize); // scope 0 at ui/struct-enums/record-pat.rs:12:26: 12:27
        _9 = _4;                         // scope 2 at ui/struct-enums/record-pat.rs:12:54: 12:55
        _10 = _6;                        // scope 2 at ui/struct-enums/record-pat.rs:12:58: 12:59
        _11 = CheckedAdd(_9, _10);       // scope 2 at ui/struct-enums/record-pat.rs:12:53: 12:60
        assert(!move (_11.1: bool), "attempt to compute `{} + {}`, which would overflow", move _9, move _10) -> bb4; // scope 2 at ui/struct-enums/record-pat.rs:12:53: 12:60
    }

    bb2: {
        unreachable;                     // scope 0 at ui/struct-enums/record-pat.rs:10:11: 10:16
    }

    bb3: {
        _3 = (((((_1 as c).0: T2).0: t1) as a).0: isize); // scope 0 at ui/struct-enums/record-pat.rs:11:26: 11:27
        _0 = _3;                         // scope 1 at ui/struct-enums/record-pat.rs:11:50: 11:51
        goto -> bb6;                     // scope 0 at no-location
    }

    bb4: {
        _8 = move (_11.0: usize);        // scope 2 at ui/struct-enums/record-pat.rs:12:53: 12:60
        _7 = move _8 as isize (IntToInt); // scope 2 at ui/struct-enums/record-pat.rs:12:52: 12:70
        _12 = _5;                        // scope 2 at ui/struct-enums/record-pat.rs:12:73: 12:74
        _13 = CheckedAdd(_7, _12);       // scope 2 at ui/struct-enums/record-pat.rs:12:52: 12:74
        assert(!move (_13.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, move _12) -> bb5; // scope 2 at ui/struct-enums/record-pat.rs:12:52: 12:74
    }

    bb5: {
        _0 = move (_13.0: isize);        // scope 2 at ui/struct-enums/record-pat.rs:12:52: 12:74
        goto -> bb6;                     // scope 0 at no-location
    }

    bb6: {
        return;                          // scope 0 at ui/struct-enums/record-pat.rs:14:2: 14:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/record-pat.rs:16:15: 16:15
    let mut _1: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: isize;                       // in scope 0 at ui/struct-enums/record-pat.rs:17:16: 17:52
    let mut _4: t3;                      // in scope 0 at ui/struct-enums/record-pat.rs:17:18: 17:51
    let mut _5: T2;                      // in scope 0 at ui/struct-enums/record-pat.rs:17:24: 17:47
    let mut _6: t1;                      // in scope 0 at ui/struct-enums/record-pat.rs:17:31: 17:40
    let mut _7: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _8: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _9: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _12: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _13: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _15: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _16: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _17: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _18: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _19: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _20: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _22: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _23: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _24: isize;                      // in scope 0 at ui/struct-enums/record-pat.rs:18:16: 18:52
    let mut _25: t3;                     // in scope 0 at ui/struct-enums/record-pat.rs:18:18: 18:51
    let mut _26: T2;                     // in scope 0 at ui/struct-enums/record-pat.rs:18:24: 18:47
    let mut _27: t1;                     // in scope 0 at ui/struct-enums/record-pat.rs:18:31: 18:40
    let mut _28: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _29: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _30: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _31: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _32: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _33: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _34: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _36: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _37: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _38: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _39: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _40: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _41: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _43: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _44: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _8;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _9;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _14: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _14;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _29;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _30;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _35: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _35;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _6 = t1::a(const 10_isize);      // scope 0 at ui/struct-enums/record-pat.rs:17:31: 17:40
        _5 = T2 { x: move _6, y: const 5_isize }; // scope 0 at ui/struct-enums/record-pat.rs:17:24: 17:47
        _4 = t3::c(move _5, const 4_usize); // scope 0 at ui/struct-enums/record-pat.rs:17:18: 17:51
        _3 = m(move _4) -> bb1;          // scope 0 at ui/struct-enums/record-pat.rs:17:16: 17:52
                                         // mir::Constant
                                         // + span: ui/struct-enums/record-pat.rs:17:16: 17:17
                                         // + literal: Const { ty: fn(t3) -> isize {m}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _44 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _7 = _44;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _7);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _8 = (_1.0: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _9 = (_1.1: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _12 = (*_8);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _13 = const 10_isize;            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _11 = Eq(move _12, move _13);    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _10 = Not(move _11);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _10) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _14 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = _8;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _15 = core::panicking::assert_failed::<isize, isize>(move _16, move _17, move _19, move _21); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _27 = t1::b(const 10_usize);     // scope 0 at ui/struct-enums/record-pat.rs:18:31: 18:40
        _26 = T2 { x: move _27, y: const 5_isize }; // scope 0 at ui/struct-enums/record-pat.rs:18:24: 18:47
        _25 = t3::c(move _26, const 4_usize); // scope 0 at ui/struct-enums/record-pat.rs:18:18: 18:51
        _24 = m(move _25) -> bb4;        // scope 0 at ui/struct-enums/record-pat.rs:18:16: 18:52
                                         // mir::Constant
                                         // + span: ui/struct-enums/record-pat.rs:18:16: 18:17
                                         // + literal: Const { ty: fn(t3) -> isize {m}, val: Value(<ZST>) }
    }

    bb4: {
        _23 = &_24;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _43 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _28 = _43;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _22 = (move _23, move _28);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _29 = (_22.0: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _30 = (_22.1: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _33 = (*_29);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _34 = const 19_isize;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _32 = Eq(move _33, move _34);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _31 = Not(move _32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _31) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _35 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _39 = _29;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _38 = _39;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _41 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = _41;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _42 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _36 = core::panicking::assert_failed::<isize, isize>(move _37, move _38, move _40, move _42); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/struct-enums/record-pat.rs:19:2: 19:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/record-pat.rs:18:54: 18:56

    bb0: {
        _1 = const 19_isize;             // scope 0 at ui/struct-enums/record-pat.rs:18:54: 18:56
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/struct-enums/record-pat.rs:17:54: 17:56

    bb0: {
        _1 = const 10_isize;             // scope 0 at ui/struct-enums/record-pat.rs:17:54: 17:56
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn t1::a(_1: isize) -> t1 {
    let mut _0: t1;                      // return place in scope 0 at ui/struct-enums/record-pat.rs:5:11: 5:12

    bb0: {
        _0 = t1::a(move _1);             // scope 0 at ui/struct-enums/record-pat.rs:5:11: 5:12
        return;                          // scope 0 at ui/struct-enums/record-pat.rs:5:11: 5:12
    }
}

// MIR FOR CTFE
fn t1::a(_1: isize) -> t1 {
    let mut _0: t1;                      // return place in scope 0 at ui/struct-enums/record-pat.rs:5:11: 5:12

    bb0: {
        _0 = t1::a(move _1);             // scope 0 at ui/struct-enums/record-pat.rs:5:11: 5:12
        return;                          // scope 0 at ui/struct-enums/record-pat.rs:5:11: 5:12
    }
}

fn t1::b(_1: usize) -> t1 {
    let mut _0: t1;                      // return place in scope 0 at ui/struct-enums/record-pat.rs:5:21: 5:22

    bb0: {
        _0 = t1::b(move _1);             // scope 0 at ui/struct-enums/record-pat.rs:5:21: 5:22
        return;                          // scope 0 at ui/struct-enums/record-pat.rs:5:21: 5:22
    }
}

// MIR FOR CTFE
fn t1::b(_1: usize) -> t1 {
    let mut _0: t1;                      // return place in scope 0 at ui/struct-enums/record-pat.rs:5:21: 5:22

    bb0: {
        _0 = t1::b(move _1);             // scope 0 at ui/struct-enums/record-pat.rs:5:21: 5:22
        return;                          // scope 0 at ui/struct-enums/record-pat.rs:5:21: 5:22
    }
}

fn t3::c(_1: T2, _2: usize) -> t3 {
    let mut _0: t3;                      // return place in scope 0 at ui/struct-enums/record-pat.rs:7:11: 7:12

    bb0: {
        _0 = t3::c(move _1, move _2);    // scope 0 at ui/struct-enums/record-pat.rs:7:11: 7:12
        return;                          // scope 0 at ui/struct-enums/record-pat.rs:7:11: 7:12
    }
}

// MIR FOR CTFE
fn t3::c(_1: T2, _2: usize) -> t3 {
    let mut _0: t3;                      // return place in scope 0 at ui/struct-enums/record-pat.rs:7:11: 7:12

    bb0: {
        _0 = t3::c(move _1, move _2);    // scope 0 at ui/struct-enums/record-pat.rs:7:11: 7:12
        return;                          // scope 0 at ui/struct-enums/record-pat.rs:7:11: 7:12
    }
}
