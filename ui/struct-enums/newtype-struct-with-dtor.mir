// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: u32) -> () {
    debug a => _1;                       // in scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:8:8: 8:9
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:8:16: 8:16

    bb0: {
        return;                          // scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:8:18: 8:18
    }
}

fn <impl at ui/struct-enums/newtype-struct-with-dtor.rs:10:1: 10:17>::drop(_1: &mut Fd) -> () {
    debug self => _1;                    // in scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:11:13: 11:22
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:11:24: 11:24
    let _3: ();                          // in scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:14:13: 14:19
    let mut _4: u32;                     // in scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:14:17: 14:18
    scope 1 {
        let _2: u32;                     // in scope 1 at ui/struct-enums/newtype-struct-with-dtor.rs:13:20: 13:21
        scope 2 {
            debug s => _2;               // in scope 2 at ui/struct-enums/newtype-struct-with-dtor.rs:13:20: 13:21
        }
    }

    bb0: {
        _2 = ((*_1).0: u32);             // scope 1 at ui/struct-enums/newtype-struct-with-dtor.rs:13:20: 13:21
        _4 = _2;                         // scope 2 at ui/struct-enums/newtype-struct-with-dtor.rs:14:17: 14:18
        _3 = foo(move _4) -> bb1;        // scope 2 at ui/struct-enums/newtype-struct-with-dtor.rs:14:13: 14:19
                                         // mir::Constant
                                         // + span: ui/struct-enums/newtype-struct-with-dtor.rs:14:13: 14:16
                                         // + literal: Const { ty: fn(u32) {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:16:6: 16:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:19:15: 19:15

    bb0: {
        return;                          // scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:20:2: 20:2
    }
}

fn Fd(_1: u32) -> Fd {
    let mut _0: Fd;                      // return place in scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:6:1: 6:14

    bb0: {
        _0 = Fd(move _1);                // scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:6:1: 6:14
        return;                          // scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:6:1: 6:14
    }
}

// MIR FOR CTFE
fn Fd(_1: u32) -> Fd {
    let mut _0: Fd;                      // return place in scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:6:1: 6:14

    bb0: {
        _0 = Fd(move _1);                // scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:6:1: 6:14
        return;                          // scope 0 at ui/struct-enums/newtype-struct-with-dtor.rs:6:1: 6:14
    }
}
