// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static C: Result<(), Box<isize>> = {
    let mut _0: std::result::Result<(), std::boxed::Box<isize>>; // return place in scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:6:11: 6:33
    let mut _1: ();                      // in scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:6:39: 6:41

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:6:39: 6:41
        _1 = ();                         // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:6:39: 6:41
        _0 = Result::<(), Box<isize>>::Ok(move _1); // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:6:36: 6:42
        StorageDead(_1);                 // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:6:41: 6:42
        return;                          // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:6:1: 6:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:11:15: 11:15
    let mut _1: bool;                    // in scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:5: 12:23
    let mut _2: bool;                    // in scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:13: 12:22
    let mut _3: &std::result::Result<(), std::boxed::Box<isize>>; // in scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:13: 12:22
    let _4: &std::result::Result<(), std::boxed::Box<isize>>; // in scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:13: 12:14
    let mut _5: !;                       // in scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:5: 12:23

    bb0: {
        _4 = const {alloc1: &Result<(), Box<isize>>}; // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:13: 12:14
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:13: 12:14
                                         // + literal: Const { ty: &Result<(), Box<isize>>, val: Value(Scalar(alloc1)) }
        _3 = _4;                         // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:13: 12:22
        _2 = Result::<(), Box<isize>>::is_ok(move _3) -> bb1; // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:13: 12:22
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:15: 12:20
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<isize>>) -> bool {Result::<(), Box<isize>>::is_ok}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:5: 12:23
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:5: 12:23
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: C.is_ok()"); // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:5: 12:23
                                         // mir::Constant
                                         // + span: ui/struct-enums/enum-nullable-const-null-with-fields.rs:12:5: 12:23
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/struct-enums/enum-nullable-const-null-with-fields.rs:13:2: 13:2
    }
}

alloc1 (static: C, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         â”‚ ........
}
