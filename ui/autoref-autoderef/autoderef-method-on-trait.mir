// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/autoref-autoderef/autoderef-method-on-trait.rs:8:1: 8:22>::double(_1: Box<usize>) -> usize {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:15: 9:19
    let mut _0: usize;                   // return place in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:36: 9:41
    let mut _2: usize;                   // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:44: 9:49
    let mut _3: (usize, bool);           // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:44: 9:53
    let mut _4: *const usize;            // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:15: 9:19

    bb0: {
        _4 = (((_1.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:44: 9:49
        _2 = (*_4);                      // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:44: 9:49
        _3 = CheckedMul(_2, const 2_usize); // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:44: 9:53
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 2_usize) -> [success: bb1, unwind: bb3]; // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:44: 9:53
    }

    bb1: {
        _0 = move (_3.0: usize);         // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:44: 9:53
        drop(_1) -> bb2;                 // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:54: 9:55
    }

    bb2: {
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:55: 9:55
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:54: 9:55
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:9:5: 9:55
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:12:15: 12:15
    let _1: std::boxed::Box<std::boxed::Box<dyn double>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:9: 13:10
    let mut _2: std::boxed::Box<dyn double>; // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:30: 13:65
    let mut _3: std::boxed::Box<dyn double>; // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:30: 13:65
    let mut _4: std::boxed::Box<usize>;  // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:30: 13:46
    let mut _5: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _6: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _7: usize;                       // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:14:16: 14:26
    let mut _8: std::boxed::Box<dyn double>; // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:14:16: 14:26
    let mut _9: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: ();                     // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:15:1: 15:2
    let mut _26: ();                     // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:15:1: 15:2
    let mut _27: *const std::boxed::Box<dyn double>; // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:9: 13:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:9: 13:10
        let _10: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _11: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _24: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _10;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _11;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _16: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _4 = Box::<usize>::new(const 3_usize) -> bb1; // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:30: 13:46
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-on-trait.rs:13:30: 13:38
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<dyn double> (Pointer(Unsize)); // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:30: 13:46
        _2 = move _3;                    // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:30: 13:65
        _1 = Box::<Box<dyn double>>::new(move _2) -> bb2; // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:13:21: 13:66
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-on-trait.rs:13:21: 13:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<dyn double>) -> Box<Box<dyn double>> {Box::<Box<dyn double>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _27 = (((_1.0: std::ptr::Unique<std::boxed::Box<dyn double>>).0: std::ptr::NonNull<std::boxed::Box<dyn double>>).0: *const std::boxed::Box<dyn double>); // scope 1 at ui/autoref-autoderef/autoderef-method-on-trait.rs:14:16: 14:26
        _8 = move (*_27);                // scope 1 at ui/autoref-autoderef/autoderef-method-on-trait.rs:14:16: 14:26
        _7 = <dyn double as double>::double(move _8) -> [return: bb3, unwind: bb8]; // scope 1 at ui/autoref-autoderef/autoderef-method-on-trait.rs:14:16: 14:26
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-on-trait.rs:14:18: 14:24
                                         // + literal: Const { ty: fn(Box<dyn double>) -> usize {<dyn double as double>::double}, val: Value(<ZST>) }
    }

    bb3: {
        _6 = &_7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _24 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _24;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _5 = (move _6, move _9);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_5.0: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_5.1: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 6_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _16 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<usize, usize>(move _18, move _19, move _21, move _23) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb5: {
        _25 = alloc::alloc::box_free::<Box<dyn double>, std::alloc::Global>(move (_1.0: std::ptr::Unique<std::boxed::Box<dyn double>>), move (_1.1: std::alloc::Global)) -> bb6; // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:15:1: 15:2
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-on-trait.rs:15:1: 15:2
                                         // + literal: Const { ty: unsafe fn(Unique<Box<dyn double>>, std::alloc::Global) {alloc::alloc::box_free::<Box<dyn double>, std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:15:2: 15:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:12:1: 15:2
    }

    bb8 (cleanup): {
        _26 = alloc::alloc::box_free::<Box<dyn double>, std::alloc::Global>(move (_1.0: std::ptr::Unique<std::boxed::Box<dyn double>>), move (_1.1: std::alloc::Global)) -> bb7; // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:15:1: 15:2
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-on-trait.rs:15:1: 15:2
                                         // + literal: Const { ty: unsafe fn(Unique<Box<dyn double>>, std::alloc::Global) {alloc::alloc::box_free::<Box<dyn double>, std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:14:28: 14:29

    bb0: {
        _1 = const 6_usize;              // scope 0 at ui/autoref-autoderef/autoderef-method-on-trait.rs:14:28: 14:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
