// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Test::0::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

<impl at ui/autoref-autoderef/deref-into-array.rs:5:1: 5:36>::Target::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn <impl at ui/autoref-autoderef/deref-into-array.rs:5:1: 5:36>::deref(_1: &Test<T>) -> &[T; 1] {
    debug self => _1;
    let mut _0: &[T; 1];

    bb0: {
        _0 = &((*_1).0: [T; 1]);
        return;
    }
}

<impl at ui/autoref-autoderef/deref-into-array.rs:5:1: 5:36>::deref::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Test<()>;
    let mut _3: &[()];
    let mut _4: &[(); 1];
    let _5: &[(); 1];
    let mut _6: &Test<()>;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &usize;
    scope 1 {
        debug out => const Test::<()>([()]);
        let _2: usize;
        scope 2 {
            debug blah => _2;
            let mut _15: &[&str; 2];
        }
    }

    bb0: {
        _6 = &_1;
        _5 = <Test<()> as Deref>::deref(move _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = _5;
        _3 = move _4 as &[()] (Pointer(Unsize));
        _2 = Len((*_3));
        _15 = const _;
        _9 = _15 as &[&str] (Pointer(Unsize));
        _14 = &_2;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_14) -> [return: bb2, unwind continue];
    }

    bb2: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = _print(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 1_usize;
        return;
    }
}

fn Test(_1: [T; 1]) -> Test<T> {
    let mut _0: Test<T>;

    bb0: {
        _0 = Test::<T>(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Test(_1: [T; 1]) -> Test<T> {
    let mut _0: Test<T>;

    bb0: {
        _0 = Test::<T>(move _1);
        return;
    }
}
