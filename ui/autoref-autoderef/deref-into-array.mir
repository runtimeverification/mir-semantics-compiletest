// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Test::0::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/autoref-autoderef/deref-into-array.rs:3:20: 3:21

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/autoref-autoderef/deref-into-array.rs:3:20: 3:21
        return;                          // scope 0 at ui/autoref-autoderef/deref-into-array.rs:3:20: 3:21
    }
}

<impl at ui/autoref-autoderef/deref-into-array.rs:5:1: 5:36>::Target::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/autoref-autoderef/deref-into-array.rs:6:23: 6:24

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/autoref-autoderef/deref-into-array.rs:6:23: 6:24
        return;                          // scope 0 at ui/autoref-autoderef/deref-into-array.rs:6:23: 6:24
    }
}

fn <impl at ui/autoref-autoderef/deref-into-array.rs:5:1: 5:36>::deref(_1: &Test<T>) -> &[T; 1] {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:8:14: 8:19
    let mut _0: &[T; 1];                 // return place in scope 0 at ui/autoref-autoderef/deref-into-array.rs:9:9: 9:16

    bb0: {
        _0 = &((*_1).0: [T; 1]);         // scope 0 at ui/autoref-autoderef/deref-into-array.rs:9:9: 9:16
        return;                          // scope 0 at ui/autoref-autoderef/deref-into-array.rs:10:6: 10:6
    }
}

<impl at ui/autoref-autoderef/deref-into-array.rs:5:1: 5:36>::deref::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/autoref-autoderef/deref-into-array.rs:8:29: 8:30

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/autoref-autoderef/deref-into-array.rs:8:29: 8:30
        return;                          // scope 0 at ui/autoref-autoderef/deref-into-array.rs:8:29: 8:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/autoref-autoderef/deref-into-array.rs:13:11: 13:11
    let _1: Test<()>;                    // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:14:9: 14:12
    let mut _3: &[()];                   // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
    let mut _4: &[(); 1];                // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
    let _5: &[(); 1];                    // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
    let mut _6: &Test<()>;               // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
    let _7: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _8: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[&str];                 // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
    let mut _10: &[&str; 2];             // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
    let _11: &[&str; 2];                 // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
    let mut _12: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _14: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _15: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:20: 16:24
    let mut _17: &usize;                 // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:20: 16:24
    let _18: &usize;                     // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:20: 16:24
    scope 1 {
        debug out => _1;                 // in scope 1 at ui/autoref-autoderef/deref-into-array.rs:14:9: 14:12
        let _2: usize;                   // in scope 1 at ui/autoref-autoderef/deref-into-array.rs:15:9: 15:13
        scope 2 {
            debug blah => _2;            // in scope 2 at ui/autoref-autoderef/deref-into-array.rs:15:9: 15:13
            let mut _19: &[&str; 2];     // in scope 2 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
        }
    }

    bb0: {
        _6 = &_1;                        // scope 1 at ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
        _5 = <Test<()> as Deref>::deref(move _6) -> bb1; // scope 1 at ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
                                         // + literal: Const { ty: for<'a> fn(&'a Test<()>) -> &'a <Test<()> as Deref>::Target {<Test<()> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _5;                         // scope 1 at ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
        _3 = move _4 as &[()] (Pointer(Unsize)); // scope 1 at ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
        _2 = Len((*_3));                 // scope 1 at ui/autoref-autoderef/deref-into-array.rs:15:16: 15:25
        _19 = const _;                   // scope 2 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _19;                       // scope 2 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
        _10 = _11;                       // scope 2 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
        _9 = move _10 as &[&str] (Pointer(Unsize)); // scope 2 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
        _18 = &_2;                       // scope 2 at ui/autoref-autoderef/deref-into-array.rs:16:20: 16:24
        _17 = _18;                       // scope 2 at ui/autoref-autoderef/deref-into-array.rs:16:20: 16:24
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<usize>(move _17) -> bb2; // scope 2 at ui/autoref-autoderef/deref-into-array.rs:16:20: 16:24
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/deref-into-array.rs:16:20: 16:24
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b usize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<usize>}, val: Value(<ZST>) }
    }

    bb2: {
        _15 = [move _16];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = &_15;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _13 = _14;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = move _13 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = Arguments::<'_>::new_v1(move _9, move _12) -> bb3; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = _print(move _8) -> bb4;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/autoref-autoderef/deref-into-array.rs:17:2: 17:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
    let mut _1: [&str; 2];               // in scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
        return;                          // scope 0 at ui/autoref-autoderef/deref-into-array.rs:16:14: 16:18
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/autoref-autoderef/deref-into-array.rs:14:25: 14:26

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/autoref-autoderef/deref-into-array.rs:14:25: 14:26
        return;                          // scope 0 at ui/autoref-autoderef/deref-into-array.rs:14:25: 14:26
    }
}

fn Test(_1: [T; 1]) -> Test<T> {
    let mut _0: Test<T>;                 // return place in scope 0 at ui/autoref-autoderef/deref-into-array.rs:3:1: 3:15

    bb0: {
        _0 = Test::<T>(move _1);         // scope 0 at ui/autoref-autoderef/deref-into-array.rs:3:1: 3:15
        return;                          // scope 0 at ui/autoref-autoderef/deref-into-array.rs:3:1: 3:15
    }
}

// MIR FOR CTFE
fn Test(_1: [T; 1]) -> Test<T> {
    let mut _0: Test<T>;                 // return place in scope 0 at ui/autoref-autoderef/deref-into-array.rs:3:1: 3:15

    bb0: {
        _0 = Test::<T>(move _1);         // scope 0 at ui/autoref-autoderef/deref-into-array.rs:3:1: 3:15
        return;                          // scope 0 at ui/autoref-autoderef/deref-into-array.rs:3:1: 3:15
    }
}
