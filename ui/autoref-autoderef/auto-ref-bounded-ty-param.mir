// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/autoref-autoderef/auto-ref-bounded-ty-param.rs:14:1: 14:22>::f(_1: &T) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();

    bb0: {
        _2 = <T as Baz>::g(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/autoref-autoderef/auto-ref-bounded-ty-param.rs:20:1: 20:17>::g(_1: &Bar) -> () {
    debug self => _1;
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &isize;
    let mut _10: &[&str; 2];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = &((*_1).0: isize);
        _8 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _print(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in <impl at ui/autoref-autoderef/auto-ref-bounded-ty-param.rs:20:1: 20:17>::g: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Bar;
    let _2: ();
    let mut _3: &Bar;
    scope 1 {
        debug y => _1;
    }

    bb0: {
        _1 = Bar { x: const 42_isize };
        _3 = &_1;
        _2 = <Bar as Foo>::f(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
