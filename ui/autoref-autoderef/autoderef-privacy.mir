// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/autoref-autoderef/autoderef-privacy.rs:6:10: 6:17>::default() -> Bar2 {
    let mut _0: Bar2;                    // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:6:10: 6:17
    let mut _1: i32;                     // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:7:19: 7:25

    bb0: {
        _1 = <i32 as Default>::default() -> bb1; // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:7:19: 7:25
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:7:19: 7:25
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Bar2 { i: move _1 };        // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:6:10: 6:17
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:6:17: 6:17
    }
}

fn <impl at ui/autoref-autoderef/autoderef-privacy.rs:8:10: 8:17>::default() -> Baz2 {
    let mut _0: Baz2;                    // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:8:10: 8:17
    let mut _1: i32;                     // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:9:17: 9:20

    bb0: {
        _1 = <i32 as Default>::default() -> bb1; // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:9:17: 9:20
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:9:17: 9:20
                                         // + literal: Const { ty: fn() -> i32 {<i32 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Baz2(move _1);              // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:8:10: 8:17
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:8:17: 8:17
    }
}

fn <impl at ui/autoref-autoderef/autoderef-privacy.rs:11:1: 11:10>::f(_1: &Bar2) -> bool {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:12:10: 12:15
    let mut _0: bool;                    // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:12:20: 12:24

    bb0: {
        _0 = const true;                 // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:12:27: 12:31
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:12:33: 12:33
    }
}

fn foo::<impl at ui/autoref-autoderef/autoderef-privacy.rs:16:14: 16:21>::default() -> Bar {
    let mut _0: foo::Bar;                // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:16:14: 16:21
    let mut _1: Bar2;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:17:22: 17:31

    bb0: {
        _1 = <Bar2 as Default>::default() -> bb1; // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:17:22: 17:31
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:17:22: 17:31
                                         // + literal: Const { ty: fn() -> Bar2 {<Bar2 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Bar { i: move _1 };         // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:16:14: 16:21
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:16:21: 16:21
    }
}

fn foo::<impl at ui/autoref-autoderef/autoderef-privacy.rs:18:14: 18:21>::default() -> Baz {
    let mut _0: foo::Baz;                // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:18:14: 18:21
    let mut _1: Baz2;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:19:20: 19:26

    bb0: {
        _1 = <Baz2 as Default>::default() -> bb1; // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:19:20: 19:26
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:19:20: 19:26
                                         // + literal: Const { ty: fn() -> Baz2 {<Baz2 as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Baz(move _1);               // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:18:14: 18:21
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:18:21: 18:21
    }
}

fn foo::<impl at ui/autoref-autoderef/autoderef-privacy.rs:21:5: 21:13>::f(_1: &Bar) -> bool {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:22:14: 22:19
    let mut _0: bool;                    // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:22:24: 22:28

    bb0: {
        _0 = const false;                // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:22:31: 22:36
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:22:38: 22:38
    }
}

fn foo::<impl at ui/autoref-autoderef/autoderef-privacy.rs:25:5: 25:35>::deref(_1: &Bar) -> &Bar2 {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:27:18: 27:23
    let mut _0: &Bar2;                   // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:27:38: 27:45

    bb0: {
        _0 = &((*_1).0: Bar2);           // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:27:38: 27:45
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:27:47: 27:47
    }
}

fn foo::<impl at ui/autoref-autoderef/autoderef-privacy.rs:30:5: 30:35>::deref(_1: &Baz) -> &Baz2 {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:32:18: 32:23
    let mut _0: &Baz2;                   // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:32:38: 32:45

    bb0: {
        _0 = &((*_1).0: Baz2);           // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:32:38: 32:45
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:32:47: 32:47
    }
}

fn f(_1: &Bar, _2: &Baz) -> () {
    debug bar => _1;                     // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:35:14: 35:17
    debug baz => _2;                     // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:35:25: 35:28
    let mut _0: ();                      // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:35:36: 35:36
    let mut _3: bool;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:39:9: 39:26
    let mut _4: bool;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:39:17: 39:25
    let mut _5: bool;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:39:18: 39:25
    let mut _6: &foo::Bar;               // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:39:18: 39:25
    let mut _7: !;                       // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:39:9: 39:26
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _6 = _1;                         // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:39:18: 39:25
        _5 = Bar::f(move _6) -> bb1;     // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:39:18: 39:25
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:39:22: 39:23
                                         // + literal: Const { ty: for<'a> fn(&'a Bar) -> bool {Bar::f}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Not(move _5);               // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:39:17: 39:25
        _3 = Not(move _4);               // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:39:9: 39:26
        switchInt(move _3) -> [0: bb3, otherwise: bb2]; // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:39:9: 39:26
    }

    bb2: {
        _7 = core::panicking::panic(const "assertion failed: !bar.f()"); // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:39:9: 39:26
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:39:9: 39:26
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:40:6: 40:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:43:11: 43:11
    let _1: foo::Bar;                    // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:44:9: 44:12
    let _3: ();                          // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:46:5: 46:23
    let mut _4: &foo::Bar;               // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:46:12: 46:16
    let _5: &foo::Bar;                   // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:46:12: 46:16
    let mut _6: &foo::Baz;               // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:46:18: 46:22
    let _7: &foo::Baz;                   // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:46:18: 46:22
    let mut _8: &Bar2;                   // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:48:18: 48:23
    let mut _9: &foo::Bar;               // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:48:18: 48:21
    let mut _10: &Baz2;                  // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:49:18: 49:23
    let mut _11: &foo::Baz;              // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:49:18: 49:21
    let mut _12: bool;                   // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:50:5: 50:21
    let mut _13: bool;                   // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:50:13: 50:20
    let mut _14: &Bar2;                  // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:50:13: 50:20
    let _15: &Bar2;                      // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:50:13: 50:20
    let mut _16: &foo::Bar;              // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:50:13: 50:20
    let mut _17: !;                      // in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:50:5: 50:21
    scope 1 {
        debug bar => _1;                 // in scope 1 at ui/autoref-autoderef/autoderef-privacy.rs:44:9: 44:12
        let _2: foo::Baz;                // in scope 1 at ui/autoref-autoderef/autoderef-privacy.rs:45:9: 45:12
        scope 2 {
            debug baz => _2;             // in scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:45:9: 45:12
            scope 3 {
                scope 4 {
                }
            }
        }
    }

    bb0: {
        _1 = <Bar as Default>::default() -> bb1; // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:44:15: 44:34
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:44:15: 44:32
                                         // + literal: Const { ty: fn() -> Bar {<Bar as Default>::default}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <Baz as Default>::default() -> bb2; // scope 1 at ui/autoref-autoderef/autoderef-privacy.rs:45:15: 45:34
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:45:15: 45:32
                                         // + literal: Const { ty: fn() -> Baz {<Baz as Default>::default}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = &_1;                        // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:46:12: 46:16
        _4 = _5;                         // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:46:12: 46:16
        _7 = &_2;                        // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:46:18: 46:22
        _6 = _7;                         // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:46:18: 46:22
        _3 = f(move _4, move _6) -> bb3; // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:46:5: 46:23
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:46:5: 46:11
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Bar, &'b Baz) {f}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &_1;                        // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:48:18: 48:21
        _8 = <Bar as Deref>::deref(move _9) -> bb4; // scope 2 at ui/autoref-autoderef/autoderef-privacy.rs:48:18: 48:23
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:48:18: 48:23
                                         // + literal: Const { ty: for<'a> fn(&'a Bar) -> &'a <Bar as Deref>::Target {<Bar as Deref>::deref}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = &_2;                       // scope 3 at ui/autoref-autoderef/autoderef-privacy.rs:49:18: 49:21
        _10 = <Baz as Deref>::deref(move _11) -> bb5; // scope 3 at ui/autoref-autoderef/autoderef-privacy.rs:49:18: 49:23
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:49:18: 49:23
                                         // + literal: Const { ty: for<'a> fn(&'a Baz) -> &'a <Baz as Deref>::Target {<Baz as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = &_1;                       // scope 4 at ui/autoref-autoderef/autoderef-privacy.rs:50:13: 50:20
        _15 = <Bar as Deref>::deref(move _16) -> bb6; // scope 4 at ui/autoref-autoderef/autoderef-privacy.rs:50:13: 50:20
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:50:13: 50:20
                                         // + literal: Const { ty: for<'a> fn(&'a Bar) -> &'a <Bar as Deref>::Target {<Bar as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = _15;                       // scope 4 at ui/autoref-autoderef/autoderef-privacy.rs:50:13: 50:20
        _13 = Bar2::f(move _14) -> bb7;  // scope 4 at ui/autoref-autoderef/autoderef-privacy.rs:50:13: 50:20
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:50:17: 50:18
                                         // + literal: Const { ty: for<'a> fn(&'a Bar2) -> bool {Bar2::f}, val: Value(<ZST>) }
    }

    bb7: {
        _12 = Not(move _13);             // scope 4 at ui/autoref-autoderef/autoderef-privacy.rs:50:5: 50:21
        switchInt(move _12) -> [0: bb9, otherwise: bb8]; // scope 4 at ui/autoref-autoderef/autoderef-privacy.rs:50:5: 50:21
    }

    bb8: {
        _17 = core::panicking::panic(const "assertion failed: bar.f()"); // scope 4 at ui/autoref-autoderef/autoderef-privacy.rs:50:5: 50:21
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-privacy.rs:50:5: 50:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:51:2: 51:2
    }
}

fn Baz2(_1: i32) -> Baz2 {
    let mut _0: Baz2;                    // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:9:1: 9:16

    bb0: {
        _0 = Baz2(move _1);              // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:9:1: 9:16
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:9:1: 9:16
    }
}

// MIR FOR CTFE
fn Baz2(_1: i32) -> Baz2 {
    let mut _0: Baz2;                    // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:9:1: 9:16

    bb0: {
        _0 = Baz2(move _1);              // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:9:1: 9:16
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:9:1: 9:16
    }
}

fn Baz(_1: Baz2) -> Baz {
    let mut _0: foo::Baz;                // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:19:5: 19:19

    bb0: {
        _0 = Baz(move _1);               // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:19:5: 19:19
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:19:5: 19:19
    }
}

// MIR FOR CTFE
fn Baz(_1: Baz2) -> Baz {
    let mut _0: foo::Baz;                // return place in scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:19:5: 19:19

    bb0: {
        _0 = Baz(move _1);               // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:19:5: 19:19
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-privacy.rs:19:5: 19:19
    }
}
