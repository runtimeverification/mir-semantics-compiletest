// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/autoref-autoderef/auto-ref-sliceable.rs:8:1: 8:31>::push_val(_1: &mut Vec<T>, _2: T) -> () {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:9:17: 9:26
    debug t => _2;                       // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:9:28: 9:29
    let mut _0: ();                      // return place in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:9:34: 9:34
    let _3: ();                          // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:10:9: 10:21
    let mut _4: &mut std::vec::Vec<T>;   // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:10:9: 10:21
    let mut _5: T;                       // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:10:19: 10:20

    bb0: {
        _4 = &mut (*_1);                 // scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:10:9: 10:21
        _5 = move _2;                    // scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:10:19: 10:20
        _3 = Vec::<T>::push(move _4, move _5) -> bb1; // scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:10:9: 10:21
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/auto-ref-sliceable.rs:10:14: 10:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<T>, T) {Vec::<T>::push}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:11:6: 11:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:14:15: 14:15
    let mut _1: std::vec::Vec<i32>;      // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:15:9: 15:14
    let mut _2: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[i32; 1]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let _8: ();                          // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:16:5: 16:18
    let mut _9: &mut std::vec::Vec<i32>; // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:16:5: 16:18
    let _10: ();                         // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:17:5: 17:18
    let mut _11: &mut std::vec::Vec<i32>; // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:17:5: 17:18
    let mut _12: (&std::vec::Vec<i32>, &[i32; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _13: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _14: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _19: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _20: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _22: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _23: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _24: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _25: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _26: &[i32; 3];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _27: &[i32; 3];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _28: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: *const [i32; 1];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/autoref-autoderef/auto-ref-sliceable.rs:15:9: 15:14
        let _15: &std::vec::Vec<i32>;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _16: &[i32; 3];              // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _29: &[i32; 3];          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _15;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _16;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _21: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _21;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _30 = (((_7.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_30) = [const 1_i32];          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &mut _1;                    // scope 1 at ui/autoref-autoderef/auto-ref-sliceable.rs:16:5: 16:18
        _8 = <Vec<i32> as Pushable<i32>>::push_val(move _9, const 2_i32) -> [return: bb3, unwind: bb9]; // scope 1 at ui/autoref-autoderef/auto-ref-sliceable.rs:16:5: 16:18
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/auto-ref-sliceable.rs:16:7: 16:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {<Vec<i32> as Pushable<i32>>::push_val}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &mut _1;                   // scope 1 at ui/autoref-autoderef/auto-ref-sliceable.rs:17:5: 17:18
        _10 = <Vec<i32> as Pushable<i32>>::push_val(move _11, const 3_i32) -> [return: bb4, unwind: bb9]; // scope 1 at ui/autoref-autoderef/auto-ref-sliceable.rs:17:5: 17:18
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/auto-ref-sliceable.rs:17:7: 17:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {<Vec<i32> as Pushable<i32>>::push_val}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _29 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _14 = _29;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _12 = (move _13, move _14);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _15 = (_12.0: &std::vec::Vec<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _16 = (_12.1: &[i32; 3]);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _19 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _20 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _18 = <Vec<i32> as PartialEq<[i32; 3]>>::eq(move _19, move _20) -> [return: bb5, unwind: bb9]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 3]) -> bool {<Vec<i32> as PartialEq<[i32; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = Not(move _18);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _17) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _21 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _25 = _15;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = _27;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _28 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _22 = core::panicking::assert_failed::<Vec<i32>, [i32; 3]>(move _23, move _24, move _26, move _28) -> bb9; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 3]>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_1) -> bb8;                 // scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:19:1: 19:2
    }

    bb8: {
        return;                          // scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:19:2: 19:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:19:1: 19:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:14:1: 19:2
    }
}

promoted[0] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [i32; 3];                // in scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:18:19: 18:28

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/autoref-autoderef/auto-ref-sliceable.rs:18:19: 18:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
