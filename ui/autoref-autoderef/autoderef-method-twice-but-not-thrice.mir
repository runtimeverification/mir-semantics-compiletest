// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:8:1: 8:27>::double(_1: Box<Box<usize>>) -> usize {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:15: 9:19
    let mut _0: usize;                   // return place in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:41: 9:46
    let mut _2: usize;                   // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:49: 9:55
    let mut _3: (usize, bool);           // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:49: 9:59
    let mut _4: std::boxed::Box<usize>;  // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:15: 9:19
    let mut _5: *const std::boxed::Box<usize>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:15: 9:19
    let mut _6: *const usize;            // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:15: 9:19

    bb0: {
        _5 = (((_1.0: std::ptr::Unique<std::boxed::Box<usize>>).0: std::ptr::NonNull<std::boxed::Box<usize>>).0: *const std::boxed::Box<usize>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:49: 9:55
        _4 = deref_copy (*_5);           // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:49: 9:55
        _6 = (((_4.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:49: 9:55
        _2 = (*_6);                      // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:49: 9:55
        _3 = CheckedMul(_2, const 2_usize); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:49: 9:59
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 2_usize) -> [success: bb1, unwind: bb3]; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:49: 9:59
    }

    bb1: {
        _0 = move (_3.0: usize);         // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:49: 9:59
        drop(_1) -> bb2;                 // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:60: 9:61
    }

    bb2: {
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:61: 9:61
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:60: 9:61
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:9:5: 9:61
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:12:15: 12:15
    let _1: std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _2: std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:50: 13:91
    let mut _3: std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:59: 13:90
    let mut _4: std::boxed::Box<std::boxed::Box<usize>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:68: 13:89
    let mut _5: std::boxed::Box<usize>;  // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:77: 13:88
    let mut _6: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _7: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _8: usize;                       // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:16: 14:26
    let mut _9: std::boxed::Box<std::boxed::Box<usize>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:16: 14:26
    let mut _10: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _27: std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _28: ();                     // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
    let mut _29: ();                     // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
    let mut _30: ();                     // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
    let mut _31: ();                     // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
    let mut _32: ();                     // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
    let mut _33: ();                     // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
    let mut _34: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _35: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _36: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _37: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _38: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _39: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _40: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _41: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _42: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _43: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _44: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _45: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _46: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _47: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    let mut _48: *const std::boxed::Box<std::boxed::Box<usize>>; // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:9: 13:10
        let _11: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _12: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _25: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _11;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _12;      // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _17: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _17;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _5 = Box::<usize>::new(const 3_usize) -> bb1; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:77: 13:88
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:77: 13:85
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Box::<Box<usize>>::new(move _5) -> bb2; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:68: 13:89
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:68: 13:76
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(Box<usize>) -> Box<Box<usize>> {Box::<Box<usize>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Box::<Box<Box<usize>>>::new(move _4) -> bb3; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:59: 13:90
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:59: 13:67
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(Box<Box<usize>>) -> Box<Box<Box<usize>>> {Box::<Box<Box<usize>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = Box::<Box<Box<Box<usize>>>>::new(move _3) -> bb4; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:50: 13:91
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:50: 13:58
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Box<Box<Box<usize>>>) -> Box<Box<Box<Box<usize>>>> {Box::<Box<Box<Box<usize>>>>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _1 = Box::<Box<Box<Box<Box<usize>>>>>::new(move _2) -> bb5; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:41: 13:92
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:13:41: 13:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Box<Box<Box<Box<usize>>>>) -> Box<Box<Box<Box<Box<usize>>>>> {Box::<Box<Box<Box<Box<usize>>>>>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _46 = (((_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>); // scope 1 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:16: 14:26
        _26 = deref_copy (*_46);         // scope 1 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:16: 14:26
        _47 = (((_26.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>); // scope 1 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:16: 14:26
        _27 = deref_copy (*_47);         // scope 1 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:16: 14:26
        _48 = (((_27.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<usize>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<usize>>>).0: *const std::boxed::Box<std::boxed::Box<usize>>); // scope 1 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:16: 14:26
        _9 = move (*_48);                // scope 1 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:16: 14:26
        _8 = <Box<usize> as double>::double(move _9) -> [return: bb6, unwind: bb15]; // scope 1 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:16: 14:26
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:18: 14:24
                                         // + literal: Const { ty: fn(Box<Box<usize>>) -> usize {<Box<usize> as double>::double}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = &_8;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _25 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _25;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _6 = (move _7, move _10);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_6.0: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_6.1: &usize);            // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = (*_11);                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = const 6_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = Eq(move _15, move _16);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _13 = Not(move _14);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb8, otherwise: bb7]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<usize, usize>(move _19, move _20, move _22, move _24) -> bb15; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb8: {
        _36 = deref_copy (((_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _37 = deref_copy ((((*_36).0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _38 = deref_copy (((_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _39 = deref_copy ((((*_38).0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _30 = alloc::alloc::box_free::<Box<Box<usize>>, std::alloc::Global>(move ((*_37).0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<usize>>>), move ((*_39).1: std::alloc::Global)) -> bb12; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // + literal: Const { ty: unsafe fn(Unique<Box<Box<usize>>>, std::alloc::Global) {alloc::alloc::box_free::<Box<Box<usize>>, std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:2: 15:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:12:1: 15:2
    }

    bb11: {
        _28 = alloc::alloc::box_free::<Box<Box<Box<Box<usize>>>>, std::alloc::Global>(move (_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>), move (_1.1: std::alloc::Global)) -> bb9; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // + literal: Const { ty: unsafe fn(Unique<Box<Box<Box<Box<usize>>>>>, std::alloc::Global) {alloc::alloc::box_free::<Box<Box<Box<Box<usize>>>>, std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb12: {
        _34 = deref_copy (((_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _35 = deref_copy (((_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _29 = alloc::alloc::box_free::<Box<Box<Box<usize>>>, std::alloc::Global>(move ((*_34).0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>), move ((*_35).1: std::alloc::Global)) -> bb11; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // + literal: Const { ty: unsafe fn(Unique<Box<Box<Box<usize>>>>, std::alloc::Global) {alloc::alloc::box_free::<Box<Box<Box<usize>>>, std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb13 (cleanup): {
        _31 = alloc::alloc::box_free::<Box<Box<Box<Box<usize>>>>, std::alloc::Global>(move (_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>), move (_1.1: std::alloc::Global)) -> bb10; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // + literal: Const { ty: unsafe fn(Unique<Box<Box<Box<Box<usize>>>>>, std::alloc::Global) {alloc::alloc::box_free::<Box<Box<Box<Box<usize>>>>, std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb14 (cleanup): {
        _40 = deref_copy (((_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _41 = deref_copy (((_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _32 = alloc::alloc::box_free::<Box<Box<Box<usize>>>, std::alloc::Global>(move ((*_40).0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>), move ((*_41).1: std::alloc::Global)) -> bb13; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // + literal: Const { ty: unsafe fn(Unique<Box<Box<Box<usize>>>>, std::alloc::Global) {alloc::alloc::box_free::<Box<Box<Box<usize>>>, std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb15 (cleanup): {
        _42 = deref_copy (((_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _43 = deref_copy ((((*_42).0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _44 = deref_copy (((_1.0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _45 = deref_copy ((((*_44).0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: std::ptr::NonNull<std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>>).0: *const std::boxed::Box<std::boxed::Box<std::boxed::Box<usize>>>); // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
        _33 = alloc::alloc::box_free::<Box<Box<usize>>, std::alloc::Global>(move ((*_43).0: std::ptr::Unique<std::boxed::Box<std::boxed::Box<usize>>>), move ((*_45).1: std::alloc::Global)) -> bb14; // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:15:1: 15:2
                                         // + literal: Const { ty: unsafe fn(Unique<Box<Box<usize>>>, std::alloc::Global) {alloc::alloc::box_free::<Box<Box<usize>>, std::alloc::Global>}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:28: 14:29

    bb0: {
        _1 = const 6_usize;              // scope 0 at ui/autoref-autoderef/autoderef-method-twice-but-not-thrice.rs:14:28: 14:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
