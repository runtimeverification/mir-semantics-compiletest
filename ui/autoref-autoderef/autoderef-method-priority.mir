// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/autoref-autoderef/autoderef-method-priority.rs:8:1: 8:22>::double(_1: usize) -> usize {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:9:15: 9:19
    let mut _0: usize;                   // return place in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:9:24: 9:29

    bb0: {
        _0 = _1;                         // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:9:32: 9:36
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:9:38: 9:38
    }
}

fn <impl at ui/autoref-autoderef/autoderef-method-priority.rs:12:1: 12:27>::double(_1: Box<usize>) -> usize {
    debug self => _1;                    // in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:15: 13:19
    let mut _0: usize;                   // return place in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:24: 13:29
    let mut _2: usize;                   // in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:32: 13:37
    let mut _3: (usize, bool);           // in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:32: 13:41
    let mut _4: *const usize;            // in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:15: 13:19

    bb0: {
        _4 = (((_1.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:32: 13:37
        _2 = (*_4);                      // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:32: 13:37
        _3 = CheckedMul(_2, const 2_usize); // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:32: 13:41
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, const 2_usize) -> [success: bb1, unwind: bb3]; // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:32: 13:41
    }

    bb1: {
        _0 = move (_3.0: usize);         // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:32: 13:41
        drop(_1) -> bb2;                 // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:42: 13:43
    }

    bb2: {
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:43: 13:43
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:42: 13:43
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:13:5: 13:43
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:16:15: 16:15
    let _1: std::boxed::Box<usize>;      // in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:17:9: 17:10
    let mut _2: (&usize, &usize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _3: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _4: usize;                       // in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:18:16: 18:26
    let mut _5: std::boxed::Box<usize>;  // in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:18:16: 18:17
    let mut _6: &usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/autoref-autoderef/autoderef-method-priority.rs:17:9: 17:10
        let _7: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _8: &usize;                  // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _21: &usize;             // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug left_val => _7;        // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _8;       // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _13: core::panicking::AssertKind; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 3 {
                debug kind => _13;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = Box::<usize>::new(const 3_usize) -> bb1; // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:17:21: 17:32
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-priority.rs:17:21: 17:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = move _1;                    // scope 1 at ui/autoref-autoderef/autoderef-method-priority.rs:18:16: 18:17
        _4 = <Box<usize> as double>::double(move _5) -> bb2; // scope 1 at ui/autoref-autoderef/autoderef-method-priority.rs:18:16: 18:26
                                         // mir::Constant
                                         // + span: ui/autoref-autoderef/autoderef-method-priority.rs:18:18: 18:24
                                         // + literal: Const { ty: fn(Box<usize>) -> usize {<Box<usize> as double>::double}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = &_4;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _21 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _2 = (move _3, move _6);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_2.0: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_2.1: &usize);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 6_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb4, otherwise: bb3]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<usize, usize>(move _15, move _16, move _18, move _20); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:19:2: 19:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:18:28: 18:29

    bb0: {
        _1 = const 6_usize;              // scope 0 at ui/autoref-autoderef/autoderef-method-priority.rs:18:28: 18:29
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
