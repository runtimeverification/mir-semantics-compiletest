// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/exec-env.rs:8:15: 8:15
    let mut _1: (&std::result::Result<std::string::String, std::env::VarError>, &std::result::Result<std::string::String, std::env::VarError>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at ui/exec-env.rs:9:16: 9:41
    let mut _4: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at ui/exec-env.rs:9:43: 9:63
    let mut _6: std::string::String;     // in scope 0 at ui/exec-env.rs:9:46: 9:62
    let mut _7: &str;                    // in scope 0 at ui/exec-env.rs:9:46: 9:62
    let _8: &str;                        // in scope 0 at ui/exec-env.rs:9:46: 9:50
    let _9: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _10: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _11: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _13: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _14: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _16: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _17: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _18: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _19: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _20: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _21: &std::result::Result<std::string::String, std::env::VarError>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _9;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _10;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _15: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _15;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = var::<&str>(const "TEST_EXEC_ENV") -> bb1; // scope 0 at ui/exec-env.rs:9:16: 9:41
                                         // mir::Constant
                                         // + span: ui/exec-env.rs:9:16: 9:24
                                         // + literal: Const { ty: fn(&str) -> Result<String, VarError> {var::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/exec-env.rs:9:25: 9:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _8 = const "22";                 // scope 0 at ui/exec-env.rs:9:46: 9:50
                                         // mir::Constant
                                         // + span: ui/exec-env.rs:9:46: 9:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _7 = _8;                         // scope 0 at ui/exec-env.rs:9:46: 9:62
        _6 = <str as ToString>::to_string(move _7) -> [return: bb2, unwind: bb9]; // scope 0 at ui/exec-env.rs:9:46: 9:62
                                         // mir::Constant
                                         // + span: ui/exec-env.rs:9:51: 9:60
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Result::<String, VarError>::Ok(move _6); // scope 0 at ui/exec-env.rs:9:43: 9:63
        _4 = &_5;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _9 = (_1.0: &std::result::Result<std::string::String, std::env::VarError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _10 = (_1.1: &std::result::Result<std::string::String, std::env::VarError>); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _13 = _9;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _14 = _10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _12 = <Result<String, VarError> as PartialEq>::eq(move _13, move _14) -> [return: bb3, unwind: bb8]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Result<String, VarError>, &'b Result<String, VarError>) -> bool {<Result<String, VarError> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = Not(move _12);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _11) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _15 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = _9;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _19;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _16 = core::panicking::assert_failed::<Result<String, VarError>, Result<String, VarError>>(move _17, move _18, move _20, move _22) -> bb8; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Result<String, VarError>, &'b Result<String, VarError>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Result<String, VarError>, Result<String, VarError>>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_5) -> [return: bb6, unwind: bb9]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        return;                          // scope 0 at ui/exec-env.rs:10:2: 10:2
    }

    bb8 (cleanup): {
        drop(_5) -> bb9;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9 (cleanup): {
        drop(_3) -> bb10;                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/exec-env.rs:8:1: 10:2
    }
}
