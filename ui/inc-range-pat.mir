// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/inc-range-pat.rs:6:11: 6:11
    let mut _1: bool;                    // in scope 0 at ui/inc-range-pat.rs:7:5: 7:56
    let mut _2: bool;                    // in scope 0 at ui/inc-range-pat.rs:7:13: 7:55
    let mut _3: !;                       // in scope 0 at ui/inc-range-pat.rs:7:5: 7:56
    let mut _4: bool;                    // in scope 0 at ui/inc-range-pat.rs:8:5: 8:56
    let mut _5: bool;                    // in scope 0 at ui/inc-range-pat.rs:8:13: 8:55
    let mut _6: !;                       // in scope 0 at ui/inc-range-pat.rs:8:5: 8:56
    let mut _7: bool;                    // in scope 0 at ui/inc-range-pat.rs:10:5: 10:59
    let mut _8: bool;                    // in scope 0 at ui/inc-range-pat.rs:10:13: 10:58
    let mut _9: !;                       // in scope 0 at ui/inc-range-pat.rs:10:5: 10:59
    let mut _10: bool;                   // in scope 0 at ui/inc-range-pat.rs:11:5: 11:59
    let mut _11: bool;                   // in scope 0 at ui/inc-range-pat.rs:11:13: 11:58
    let mut _12: !;                      // in scope 0 at ui/inc-range-pat.rs:11:5: 11:59

    bb0: {
        _2 = const true;                 // scope 0 at ui/inc-range-pat.rs:7:37: 7:41
        _1 = Not(move _2);               // scope 0 at ui/inc-range-pat.rs:7:5: 7:56
        switchInt(move _1) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/inc-range-pat.rs:7:5: 7:56
    }

    bb1: {
        _3 = core::panicking::panic(const "assertion failed: match 42 { 0...100 => true, _ => false, }"); // scope 0 at ui/inc-range-pat.rs:7:5: 7:56
                                         // mir::Constant
                                         // + span: ui/inc-range-pat.rs:7:5: 7:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        _5 = const true;                 // scope 0 at ui/inc-range-pat.rs:8:37: 8:41
        _4 = Not(move _5);               // scope 0 at ui/inc-range-pat.rs:8:5: 8:56
        switchInt(move _4) -> [0: bb4, otherwise: bb3]; // scope 0 at ui/inc-range-pat.rs:8:5: 8:56
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: match 42 { 0..=100 => true, _ => false, }"); // scope 0 at ui/inc-range-pat.rs:8:5: 8:56
                                         // mir::Constant
                                         // + span: ui/inc-range-pat.rs:8:5: 8:56
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        _8 = const true;                 // scope 0 at ui/inc-range-pat.rs:10:40: 10:44
        _7 = Not(move _8);               // scope 0 at ui/inc-range-pat.rs:10:5: 10:59
        switchInt(move _7) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/inc-range-pat.rs:10:5: 10:59
    }

    bb5: {
        _9 = core::panicking::panic(const "assertion failed: match \\'x\\' { \\'a\\'...\\'z\\' => true, _ => false, }"); // scope 0 at ui/inc-range-pat.rs:10:5: 10:59
                                         // mir::Constant
                                         // + span: ui/inc-range-pat.rs:10:5: 10:59
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _11 = const true;                // scope 0 at ui/inc-range-pat.rs:11:40: 11:44
        _10 = Not(move _11);             // scope 0 at ui/inc-range-pat.rs:11:5: 11:59
        switchInt(move _10) -> [0: bb8, otherwise: bb7]; // scope 0 at ui/inc-range-pat.rs:11:5: 11:59
    }

    bb7: {
        _12 = core::panicking::panic(const "assertion failed: match \\'x\\' { \\'a\\'..=\\'z\\' => true, _ => false, }"); // scope 0 at ui/inc-range-pat.rs:11:5: 11:59
                                         // mir::Constant
                                         // + span: ui/inc-range-pat.rs:11:5: 11:59
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb8: {
        return;                          // scope 0 at ui/inc-range-pat.rs:12:2: 12:2
    }
}
