// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &usize) -> bool {
    debug s => _1;                       // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:3:12: 3:13
    let mut _0: bool;                    // return place in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:3:29: 3:33

    bb0: {
        switchInt((*_1)) -> [3: bb2, otherwise: bb1]; // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:4:5: 4:12
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:6:14: 6:19
        goto -> bb3;                     // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:6:14: 6:19
    }

    bb2: {
        _0 = const true;                 // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:5:15: 5:19
        goto -> bb3;                     // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:5:15: 5:19
    }

    bb3: {
        return;                          // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:8:2: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:10:15: 10:15
    let mut _1: bool;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:5: 11:21
    let mut _2: bool;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:13: 11:20
    let mut _3: &usize;                  // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19
    let _4: &usize;                      // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19
    let mut _5: !;                       // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:5: 11:21
    let mut _6: bool;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:5: 12:22
    let mut _7: bool;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:13: 12:21
    let mut _8: bool;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:14: 12:21
    let mut _9: &usize;                  // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
    let _10: &usize;                     // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
    let mut _11: !;                      // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:5: 12:22
    let mut _12: &usize;                 // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
    let mut _13: &usize;                 // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19

    bb0: {
        _13 = const _;                   // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _13;                        // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19
        _3 = _4;                         // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19
        _2 = foo(move _3) -> bb1;        // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:13: 11:20
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-3.rs:11:13: 11:16
                                         // + literal: Const { ty: for<'r> fn(&'r usize) -> bool {foo}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Not(move _2);               // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:5: 11:21
        switchInt(move _1) -> [0: bb3, otherwise: bb2]; // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:5: 11:21
    }

    bb2: {
        _5 = core::panicking::panic(const "assertion failed: foo(&3)"); // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:5: 11:21
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-3.rs:11:5: 11:21
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _12 = const _;                   // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _10 = _12;                       // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
        _9 = _10;                        // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
        _8 = foo(move _9) -> bb4;        // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:14: 12:21
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-3.rs:12:14: 12:17
                                         // + literal: Const { ty: for<'r> fn(&'r usize) -> bool {foo}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = Not(move _8);               // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:13: 12:21
        _6 = Not(move _7);               // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:5: 12:22
        switchInt(move _6) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:5: 12:22
    }

    bb5: {
        _11 = core::panicking::panic(const "assertion failed: !foo(&4)"); // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:5: 12:22
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-3.rs:12:5: 12:22
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:13:2: 13:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
    let mut _1: usize;                   // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:19: 12:20

    bb0: {
        _1 = const 4_usize;              // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:19: 12:20
        _0 = &_1;                        // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
        return;                          // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:12:18: 12:20
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19
    let mut _1: usize;                   // in scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:18: 11:19

    bb0: {
        _1 = const 3_usize;              // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:18: 11:19
        _0 = &_1;                        // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19
        return;                          // scope 0 at ui/binding/borrowed-ptr-pattern-3.rs:11:17: 11:19
    }
}
