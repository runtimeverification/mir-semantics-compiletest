// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &usize) -> bool {
    debug s => _1;
    let mut _0: bool;
    let mut _2: usize;

    bb0: {
        StorageLive(_2);
        _2 = (*_1);
        _0 = Eq(_2, const 3_usize);
        StorageDead(_2);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: bool;
    let mut _7: !;
    let mut _8: &usize;
    let mut _9: &usize;

    bb0: {
        _9 = const _;
        _2 = foo(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _1 = Not(move _2);
        switchInt(move _1) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _3 = core::panicking::panic(const "assertion failed: foo(&3)") -> unwind continue;
    }

    bb3: {
        _8 = const _;
        _6 = foo(_8) -> [return: bb4, unwind continue];
    }

    bb4: {
        _5 = Not(move _6);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _7 = core::panicking::panic(const "assertion failed: !foo(&4)") -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}
