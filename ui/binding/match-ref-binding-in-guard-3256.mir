// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:5:15: 5:15
    let _1: std::option::Option<std::sync::Mutex<bool>>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:6:9: 6:10
    let mut _2: std::sync::Mutex<bool>;  // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:6:18: 6:34
    let mut _5: bool;                    // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:8:24: 8:42
    let mut _6: &bool;                   // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:8:24: 8:42
    let mut _7: &std::sync::MutexGuard<'_, bool>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:8:25: 8:42
    let _8: std::sync::MutexGuard<'_, bool>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:8:25: 8:42
    let mut _9: std::result::Result<std::sync::MutexGuard<'_, bool>, std::sync::PoisonError<std::sync::MutexGuard<'_, bool>>>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:8:25: 8:33
    let mut _10: &std::sync::Mutex<bool>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:8:25: 8:33
    let mut _11: bool;                   // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:9:13: 9:40
    let mut _12: bool;                   // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:9:21: 9:39
    let mut _13: &bool;                  // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:9:21: 9:39
    let mut _14: &std::sync::MutexGuard<'_, bool>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:9:22: 9:39
    let _15: std::sync::MutexGuard<'_, bool>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:9:22: 9:39
    let mut _16: std::result::Result<std::sync::MutexGuard<'_, bool>, std::sync::PoisonError<std::sync::MutexGuard<'_, bool>>>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:9:22: 9:30
    let mut _17: &std::sync::Mutex<bool>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:9:22: 9:30
    let mut _18: !;                      // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:9:13: 9:40
    let mut _19: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _20: &std::sync::Mutex<bool>; // in scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:8:14: 8:19
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:6:9: 6:10
        let _3: &std::sync::Mutex<bool>; // in scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:14: 8:19
        let _4: &&std::sync::Mutex<bool>; // in scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:14: 8:19
        scope 2 {
            debug z => _3;               // in scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:8:14: 8:19
            debug z => _4;               // in scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:8:14: 8:19
        }
    }

    bb0: {
        _2 = Mutex::<bool>::new(const true) -> bb1; // scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:6:18: 6:34
                                         // mir::Constant
                                         // + span: ui/binding/match-ref-binding-in-guard-3256.rs:6:18: 6:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(bool) -> Mutex<bool> {Mutex::<bool>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = Option::<Mutex<bool>>::Some(move _2); // scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:6:13: 6:35
        _3 = &((_1 as Some).0: std::sync::Mutex<bool>); // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:14: 8:19
        _4 = &_3;                        // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:14: 8:19
        _20 = deref_copy (*_4);          // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:25: 8:33
        _10 = _20;                       // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:25: 8:33
        _9 = Mutex::<bool>::lock(move _10) -> bb3; // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:25: 8:33
                                         // mir::Constant
                                         // + span: ui/binding/match-ref-binding-in-guard-3256.rs:8:27: 8:31
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<bool>) -> Result<MutexGuard<'a, bool>, PoisonError<MutexGuard<'a, bool>>> {Mutex::<bool>::lock}, val: Value(<ZST>) }
    }

    bb2: {
        _19 = begin_panic::<&str>(const "explicit panic"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        _8 = Result::<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>::unwrap(move _9) -> bb4; // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:25: 8:42
                                         // mir::Constant
                                         // + span: ui/binding/match-ref-binding-in-guard-3256.rs:8:34: 8:40
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>) -> MutexGuard<'_, bool> {Result::<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = &_8;                        // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:25: 8:42
        _6 = <MutexGuard<'_, bool> as Deref>::deref(move _7) -> [return: bb5, unwind: bb16]; // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:24: 8:42
                                         // mir::Constant
                                         // + span: ui/binding/match-ref-binding-in-guard-3256.rs:8:24: 8:42
                                         // + literal: Const { ty: for<'a> fn(&'a MutexGuard<'_, bool>) -> &'a <MutexGuard<'_, bool> as Deref>::Target {<MutexGuard<'_, bool> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = (*_6);                      // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:24: 8:42
        switchInt(move _5) -> [0: bb8, otherwise: bb6]; // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:24: 8:42
    }

    bb6: {
        drop(_8) -> bb7;                 // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:41: 8:42
    }

    bb7: {
        _17 = _3;                        // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:22: 9:30
        _16 = Mutex::<bool>::lock(move _17) -> bb9; // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:22: 9:30
                                         // mir::Constant
                                         // + span: ui/binding/match-ref-binding-in-guard-3256.rs:9:24: 9:28
                                         // + literal: Const { ty: for<'a> fn(&'a Mutex<bool>) -> Result<MutexGuard<'a, bool>, PoisonError<MutexGuard<'a, bool>>> {Mutex::<bool>::lock}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_8) -> bb2;                 // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:41: 8:42
    }

    bb9: {
        _15 = Result::<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>::unwrap(move _16) -> bb10; // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:22: 9:39
                                         // mir::Constant
                                         // + span: ui/binding/match-ref-binding-in-guard-3256.rs:9:31: 9:37
                                         // + literal: Const { ty: fn(Result<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>) -> MutexGuard<'_, bool> {Result::<MutexGuard<'_, bool>, PoisonError<MutexGuard<'_, bool>>>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        _14 = &_15;                      // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:22: 9:39
        _13 = <MutexGuard<'_, bool> as Deref>::deref(move _14) -> [return: bb11, unwind: bb15]; // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:21: 9:39
                                         // mir::Constant
                                         // + span: ui/binding/match-ref-binding-in-guard-3256.rs:9:21: 9:39
                                         // + literal: Const { ty: for<'a> fn(&'a MutexGuard<'_, bool>) -> &'a <MutexGuard<'_, bool> as Deref>::Target {<MutexGuard<'_, bool> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb11: {
        _12 = (*_13);                    // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:21: 9:39
        _11 = Not(move _12);             // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:13: 9:40
        drop(_15) -> bb12;               // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:39: 9:40
    }

    bb12: {
        switchInt(move _11) -> [0: bb14, otherwise: bb13]; // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:13: 9:40
    }

    bb13: {
        _18 = core::panicking::panic(const "assertion failed: *z.lock().unwrap()"); // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:13: 9:40
                                         // mir::Constant
                                         // + span: ui/binding/match-ref-binding-in-guard-3256.rs:9:13: 9:40
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        return;                          // scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:13:2: 13:2
    }

    bb15 (cleanup): {
        drop(_15) -> bb17;               // scope 2 at ui/binding/match-ref-binding-in-guard-3256.rs:9:39: 9:40
    }

    bb16 (cleanup): {
        drop(_8) -> bb17;                // scope 1 at ui/binding/match-ref-binding-in-guard-3256.rs:8:41: 8:42
    }

    bb17 (cleanup): {
        resume;                          // scope 0 at ui/binding/match-ref-binding-in-guard-3256.rs:5:1: 13:2
    }
}
