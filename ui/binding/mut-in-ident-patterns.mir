// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn Foo::foo(_1: &Self, _2: isize) -> isize {
    debug self => _1;
    debug x => _2;
    let mut _0: isize;
    let _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    scope 1 {
        debug val => _3;
    }

    bb0: {
        _3 = _2;
        _4 = _2;
        _2 = Mul(const 37_isize, move _4);
        _5 = _2;
        _0 = Add(_3, move _5);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let mut _2: i32;
    let mut _3: (i32, i32);
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: i32;
    let mut _22: i32;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _26: i32;
    let mut _27: i32;
    let mut _28: (&i32, &i32);
    let mut _29: &i32;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: i32;
    let mut _35: i32;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&isize, &isize);
    let mut _40: &isize;
    let _41: isize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: isize;
    let mut _47: isize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (i32, main::Bar);
    let mut _54: main::Bar;
    let mut _56: (&i32, &i32);
    let mut _57: &i32;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: i32;
    let mut _63: i32;
    let _65: !;
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _67: (&i32, &i32);
    let mut _68: &i32;
    let mut _71: bool;
    let mut _72: bool;
    let mut _73: i32;
    let mut _74: i32;
    let _76: !;
    let mut _77: std::option::Option<std::fmt::Arguments<'_>>;
    let _78: ();
    let _79: &main::Bar;
    let mut _80: main::Bar;
    let _81: ();
    let _82: &main::Bar;
    let mut _84: main::A;
    let mut _85: (&isize, &isize);
    let mut _86: &isize;
    let mut _89: bool;
    let mut _90: bool;
    let mut _91: isize;
    let mut _92: isize;
    let _94: !;
    let mut _95: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _96: (&isize, &isize);
    let mut _97: &isize;
    let mut _100: bool;
    let mut _101: bool;
    let mut _102: isize;
    let mut _103: isize;
    let _105: !;
    let mut _106: std::option::Option<std::fmt::Arguments<'_>>;
    let _107: isize;
    let mut _108: (main::A,);
    let mut _109: main::A;
    scope 1 {
        debug a => _1;
        debug b => _2;
        let _6: &i32;
        let _7: &i32;
        let _17: &i32;
        let _18: &i32;
        let _30: &i32;
        let _31: &i32;
        let _42: &isize;
        let _43: &isize;
        let _51: i32;
        let mut _52: main::Bar;
        let mut _115: &isize;
        let mut _116: &X;
        let mut _117: &i32;
        let mut _118: &i32;
        let mut _119: &i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _17;
            debug right_val => _18;
            let _23: core::panicking::AssertKind;
            scope 5 {
                debug kind => _23;
            }
        }
        scope 6 {
            debug left_val => _30;
            debug right_val => _31;
            let _36: core::panicking::AssertKind;
            scope 7 {
                debug kind => _36;
            }
        }
        scope 8 {
            debug left_val => _42;
            debug right_val => _43;
            let _48: core::panicking::AssertKind;
            scope 9 {
                debug kind => _48;
            }
        }
        scope 10 {
            debug x => _51;
            debug y => _52;
            let mut _55: i32;
            let mut _83: isize;
            scope 11 {
                debug z => _55;
                let _58: &i32;
                let _59: &i32;
                let _69: &i32;
                let _70: &i32;
                let mut _113: &i32;
                let mut _114: &i32;
                scope 12 {
                    debug left_val => _58;
                    debug right_val => _59;
                    let _64: core::panicking::AssertKind;
                    scope 13 {
                        debug kind => _64;
                    }
                }
                scope 14 {
                    debug left_val => _69;
                    debug right_val => _70;
                    let _75: core::panicking::AssertKind;
                    scope 15 {
                        debug kind => _75;
                    }
                }
            }
            scope 16 {
                debug x => _83;
                let _87: &isize;
                let _88: &isize;
                let _98: &isize;
                let _99: &isize;
                let mut _110: &[closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25];
                let mut _111: &isize;
                let mut _112: &isize;
                scope 17 {
                    debug left_val => _87;
                    debug right_val => _88;
                    let _93: core::panicking::AssertKind;
                    scope 18 {
                        debug kind => _93;
                    }
                }
                scope 19 {
                    debug left_val => _98;
                    debug right_val => _99;
                    let _104: core::panicking::AssertKind;
                    scope 20 {
                        debug kind => _104;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = (const 23_i32, const 4_i32);
        _1 = (_3.0: i32);
        _2 = (_3.1: i32);
        _5 = &_1;
        _119 = const _;
        _4 = (move _5, _119);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _16 = &_2;
        _118 = const _;
        _15 = (move _16, _118);
        _17 = (_15.0: &i32);
        _18 = (_15.1: &i32);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<i32, i32>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb4: {
        _26 = _1;
        _27 = _2;
        _2 = Add(move _26, move _27);
        _29 = &_2;
        _117 = const _;
        _28 = (move _29, _117);
        _30 = (_28.0: &i32);
        _31 = (_28.1: &i32);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<i32, i32>(move _36, _30, _31, move _38) -> unwind continue;
    }

    bb6: {
        _116 = const _;
        _41 = <X as Foo>::foo(_116, const 2_isize) -> [return: bb7, unwind continue];
    }

    bb7: {
        _40 = &_41;
        _115 = const _;
        _39 = (move _40, _115);
        _42 = (_39.0: &isize);
        _43 = (_39.1: &isize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<isize, isize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb9: {
        _54 = Bar::Foo(const 21_isize);
        _53 = (const 32_i32, move _54);
        _51 = (_53.0: i32);
        _52 = move (_53.1: main::Bar);
        switchInt(_51) -> [32: bb10, otherwise: bb14];
    }

    bb10: {
        _55 = _51;
        _57 = &_55;
        _114 = const _;
        _56 = (move _57, _114);
        _58 = (_56.0: &i32);
        _59 = (_56.1: &i32);
        _62 = (*_58);
        _63 = (*_59);
        _61 = Eq(move _62, move _63);
        _60 = Not(move _61);
        switchInt(move _60) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _64 = core::panicking::AssertKind::Eq;
        _66 = Option::<Arguments<'_>>::None;
        _65 = core::panicking::assert_failed::<i32, i32>(move _64, _58, _59, move _66) -> unwind continue;
    }

    bb12: {
        _55 = const 34_i32;
        _68 = &_55;
        _113 = const _;
        _67 = (move _68, _113);
        _69 = (_67.0: &i32);
        _70 = (_67.1: &i32);
        _73 = (*_69);
        _74 = (*_70);
        _72 = Eq(move _73, move _74);
        _71 = Not(move _72);
        switchInt(move _71) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _75 = core::panicking::AssertKind::Eq;
        _77 = Option::<Arguments<'_>>::None;
        _76 = core::panicking::assert_failed::<i32, i32>(move _75, _69, _70, move _77) -> unwind continue;
    }

    bb14: {
        _79 = &_52;
        _78 = check_bar(_79) -> [return: bb15, unwind continue];
    }

    bb15: {
        _80 = Bar::Baz(const 10f32, const 3_u8);
        _52 = move _80;
        _82 = &_52;
        _81 = check_bar(_82) -> [return: bb16, unwind continue];
    }

    bb16: {
        _84 = A { x: const 10_isize };
        _83 = (_84.0: isize);
        _86 = &_83;
        _112 = const _;
        _85 = (move _86, _112);
        _87 = (_85.0: &isize);
        _88 = (_85.1: &isize);
        _91 = (*_87);
        _92 = (*_88);
        _90 = Eq(move _91, move _92);
        _89 = Not(move _90);
        switchInt(move _89) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _93 = core::panicking::AssertKind::Eq;
        _95 = Option::<Arguments<'_>>::None;
        _94 = core::panicking::assert_failed::<isize, isize>(move _93, _87, _88, move _95) -> unwind continue;
    }

    bb18: {
        _83 = const 30_isize;
        _97 = &_83;
        _111 = const _;
        _96 = (move _97, _111);
        _98 = (_96.0: &isize);
        _99 = (_96.1: &isize);
        _102 = (*_98);
        _103 = (*_99);
        _101 = Eq(move _102, move _103);
        _100 = Not(move _101);
        switchInt(move _100) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _104 = core::panicking::AssertKind::Eq;
        _106 = Option::<Arguments<'_>>::None;
        _105 = core::panicking::assert_failed::<isize, isize>(move _104, _98, _99, move _106) -> unwind continue;
    }

    bb20: {
        _110 = const _;
        _109 = A { x: const 34_isize };
        _108 = (move _109,);
        _107 = <[closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25] as Fn<(A,)>>::call(_110, move _108) -> [return: bb21, unwind continue];
    }

    bb21: {
        return;
    }
}

promoted[0] in main: &[closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25] = {
    let mut _0: &[closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25];
    let mut _1: [closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25];

    bb0: {
        _1 = [closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 30_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 34_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 32_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 76_isize;
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &X = {
    let mut _0: &X;
    let mut _1: X;

    bb0: {
        _1 = X;
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 27_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 23_i32;
        _0 = &_1;
        return;
    }
}

fn check_bar(_1: &Bar) -> () {
    debug y => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: isize;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _15: f32;
    let _16: u8;
    let mut _17: (&f32, &f32);
    let mut _18: &f32;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: f32;
    let mut _24: f32;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&u8, &u8);
    let mut _29: &u8;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: u8;
    let mut _35: u8;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _3;
        let _6: &isize;
        let _7: &isize;
        let mut _41: &isize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }
    scope 4 {
        debug a => _15;
        debug b => _16;
        let _19: &f32;
        let _20: &f32;
        let _30: &u8;
        let _31: &u8;
        let mut _39: &u8;
        let mut _40: &f32;
        scope 5 {
            debug left_val => _19;
            debug right_val => _20;
            let _25: core::panicking::AssertKind;
            scope 6 {
                debug kind => _25;
            }
        }
        scope 7 {
            debug left_val => _30;
            debug right_val => _31;
            let _36: core::panicking::AssertKind;
            scope 8 {
                debug kind => _36;
            }
        }
    }

    bb0: {
        _2 = discriminant((*_1));
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _15 = (((*_1) as Baz).0: f32);
        _16 = (((*_1) as Baz).1: u8);
        _18 = &_15;
        _40 = const _;
        _17 = (move _18, _40);
        _19 = (_17.0: &f32);
        _20 = (_17.1: &f32);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb6, otherwise: bb5];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _3 = (((*_1) as Foo).0: isize);
        _5 = &_3;
        _41 = const _;
        _4 = (move _5, _41);
        _6 = (_4.0: &isize);
        _7 = (_4.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb5: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<f32, f32>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb6: {
        _29 = &_16;
        _39 = const _;
        _28 = (move _29, _39);
        _30 = (_28.0: &u8);
        _31 = (_28.1: &u8);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<u8, u8>(move _36, _30, _31, move _38) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in check_bar: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in check_bar: &f32 = {
    let mut _0: &f32;
    let mut _1: f32;

    bb0: {
        _1 = const 10f32;
        _0 = &_1;
        return;
    }
}

promoted[2] in check_bar: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 21_isize;
        _0 = &_1;
        return;
    }
}

fn foo1(_1: (f64, isize), _2: isize) -> isize {
    debug z => _2;
    let mut _0: isize;
    let _3: f64;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let mut _7: isize;
    let mut _8: isize;
    scope 1 {
        debug x => _3;
        debug y => _4;
    }

    bb0: {
        _3 = (_1.0: f64);
        _4 = (_1.1: isize);
        _4 = Mul(const 2_isize, const 6_isize);
        _5 = _4;
        _6 = _3 as isize (FloatToInt);
        _2 = Add(move _5, move _6);
        _7 = _4;
        _8 = _2;
        _0 = Sub(move _7, move _8);
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/binding/mut-in-ident-patterns.rs:74:6: 74:25], _2: A) -> isize {
    let mut _0: isize;
    let mut _3: isize;
    let mut _4: isize;
    scope 1 {
        debug t => _3;
    }

    bb0: {
        _3 = (_2.0: isize);
        _4 = _3;
        _3 = Add(move _4, const 1_isize);
        _0 = _3;
        return;
    }
}

fn Bar::Foo(_1: isize) -> Bar {
    let mut _0: main::Bar;

    bb0: {
        _0 = Bar::Foo(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Bar::Foo(_1: isize) -> Bar {
    let mut _0: main::Bar;

    bb0: {
        _0 = Bar::Foo(move _1);
        return;
    }
}

fn Bar::Baz(_1: f32, _2: u8) -> Bar {
    let mut _0: main::Bar;

    bb0: {
        _0 = Bar::Baz(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Bar::Baz(_1: f32, _2: u8) -> Bar {
    let mut _0: main::Bar;

    bb0: {
        _0 = Bar::Baz(move _1, move _2);
        return;
    }
}
