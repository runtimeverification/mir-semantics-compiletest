// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: main::Foo;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _29: (&isize, &isize);
    let mut _30: &isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: (&isize, &isize);
    let mut _41: &isize;
    let mut _44: bool;
    let mut _45: bool;
    let mut _46: isize;
    let mut _47: isize;
    let _49: !;
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug f => _1;
        let _2: &mut isize;
        let _3: &isize;
        let _4: &isize;
        let mut _27: isize;
        let _28: &mut isize;
        let _31: &isize;
        let _32: &isize;
        let _42: &isize;
        let _43: &isize;
        let mut _51: &isize;
        let mut _52: &isize;
        scope 2 {
            debug x => _2;
        }
        scope 3 {
            debug x => _3;
            debug y => _4;
            let _7: &isize;
            let _8: &isize;
            let _18: &isize;
            let _19: &isize;
            let mut _53: &isize;
            let mut _54: &isize;
            scope 4 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 5 {
                    debug kind => _13;
                }
            }
            scope 6 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 7 {
                    debug kind => _24;
                }
            }
        }
        scope 8 {
            debug x => _27;
            debug y => _28;
        }
        scope 9 {
            debug left_val => _31;
            debug right_val => _32;
            let _37: core::panicking::AssertKind;
            scope 10 {
                debug kind => _37;
            }
        }
        scope 11 {
            debug left_val => _42;
            debug right_val => _43;
            let _48: core::panicking::AssertKind;
            scope 12 {
                debug kind => _48;
            }
        }
    }

    bb0: {
        _1 = Foo { x: const 10_isize, y: const 0_isize };
        _2 = &mut (_1.0: isize);
        (*_2) = const 11_isize;
        _3 = &(_1.0: isize);
        _4 = &(_1.1: isize);
        _6 = &(_1.0: isize);
        _54 = const _;
        _5 = (move _6, _54);
        _7 = (_5.0: &isize);
        _8 = (_5.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _17 = &(_1.1: isize);
        _53 = const _;
        _16 = (move _17, _53);
        _18 = (_16.0: &isize);
        _19 = (_16.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb4: {
        _27 = (_1.0: isize);
        _28 = &mut (_1.1: isize);
        _27 = const 12_isize;
        (*_28) = const 1_isize;
        _30 = &(_1.0: isize);
        _52 = const _;
        _29 = (move _30, _52);
        _31 = (_29.0: &isize);
        _32 = (_29.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb6: {
        _41 = &(_1.1: isize);
        _51 = const _;
        _40 = (move _41, _51);
        _42 = (_40.0: &isize);
        _43 = (_40.1: &isize);
        _46 = (*_42);
        _47 = (*_43);
        _45 = Eq(move _46, move _47);
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _48 = core::panicking::AssertKind::Eq;
        _50 = Option::<Arguments<'_>>::None;
        _49 = core::panicking::assert_failed::<isize, isize>(move _48, _42, _43, move _50) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 11_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 11_isize;
        _0 = &_1;
        return;
    }
}
