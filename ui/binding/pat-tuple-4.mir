// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn tuple() -> () {
    let mut _0: ();
    let _1: (i32, i32, i32);
    let mut _2: !;
    let mut _3: !;
    let mut _4: !;
    let mut _5: !;
    let mut _6: !;
    let mut _10: (&i32, &i32);
    let mut _11: &i32;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: i32;
    let mut _17: i32;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i32, &i32);
    let mut _22: &i32;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: i32;
    let mut _28: i32;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&i32, &i32);
    let mut _33: &i32;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: i32;
    let mut _39: i32;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _7: i32;
        let _8: i32;
        let _9: i32;
        scope 2 {
            debug a => _7;
            debug b => _8;
            debug c => _9;
            let _12: &i32;
            let _13: &i32;
            let _23: &i32;
            let _24: &i32;
            let _34: &i32;
            let _35: &i32;
            let mut _43: &i32;
            let mut _44: &i32;
            let mut _45: &i32;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
            scope 5 {
                debug left_val => _23;
                debug right_val => _24;
                let _29: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _29;
                }
            }
            scope 7 {
                debug left_val => _34;
                debug right_val => _35;
                let _40: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _40;
                }
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32);
        switchInt((_1.0: i32)) -> [1: bb1, 0: bb4, otherwise: bb3];
    }

    bb1: {
        switchInt((_1.1: i32)) -> [2: bb2, otherwise: bb3];
    }

    bb2: {
        switchInt((_1.2: i32)) -> [4: bb7, 3: bb11, otherwise: bb3];
    }

    bb3: {
        _6 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb4: {
        switchInt((_1.1: i32)) -> [2: bb5, otherwise: bb6];
    }

    bb5: {
        switchInt((_1.2: i32)) -> [3: bb8, otherwise: bb6];
    }

    bb6: {
        switchInt((_1.2: i32)) -> [3: bb9, otherwise: bb10];
    }

    bb7: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb8: {
        _3 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb9: {
        _4 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb10: {
        _5 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb11: {
        _7 = (_1.0: i32);
        _8 = (_1.1: i32);
        _9 = (_1.2: i32);
        _45 = const _;
        _11 = &_7;
        _10 = (_45, move _11);
        _12 = (_10.0: &i32);
        _13 = (_10.1: &i32);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<i32, i32>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb13: {
        _44 = const _;
        _22 = &_8;
        _21 = (_44, move _22);
        _23 = (_21.0: &i32);
        _24 = (_21.1: &i32);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<i32, i32>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb15: {
        _43 = const _;
        _33 = &_9;
        _32 = (_43, move _33);
        _34 = (_32.0: &i32);
        _35 = (_32.1: &i32);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<i32, i32>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb17: {
        return;
    }
}

promoted[0] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn tuple_struct() -> () {
    let mut _0: ();
    let _1: tuple_struct::S;
    let mut _2: !;
    let mut _3: !;
    let mut _4: !;
    let mut _5: !;
    let mut _6: !;
    let mut _10: (&u8, &u8);
    let mut _11: &u8;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: u8;
    let mut _17: u8;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&u8, &u8);
    let mut _22: &u8;
    let mut _25: bool;
    let mut _26: bool;
    let mut _27: u8;
    let mut _28: u8;
    let _30: !;
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _32: (&u8, &u8);
    let mut _33: &u8;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: u8;
    let mut _39: u8;
    let _41: !;
    let mut _42: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _7: u8;
        let _8: u8;
        let _9: u8;
        scope 2 {
            debug a => _7;
            debug b => _8;
            debug c => _9;
            let _12: &u8;
            let _13: &u8;
            let _23: &u8;
            let _24: &u8;
            let _34: &u8;
            let _35: &u8;
            let mut _43: &u8;
            let mut _44: &u8;
            let mut _45: &u8;
            scope 3 {
                debug left_val => _12;
                debug right_val => _13;
                let _18: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _18;
                }
            }
            scope 5 {
                debug left_val => _23;
                debug right_val => _24;
                let _29: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _29;
                }
            }
            scope 7 {
                debug left_val => _34;
                debug right_val => _35;
                let _40: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _40;
                }
            }
        }
    }

    bb0: {
        _1 = S(const 1_u8, const 2_u8, const 3_u8);
        switchInt((_1.0: u8)) -> [1: bb1, 0: bb4, otherwise: bb3];
    }

    bb1: {
        switchInt((_1.1: u8)) -> [2: bb2, otherwise: bb3];
    }

    bb2: {
        switchInt((_1.2: u8)) -> [4: bb7, 3: bb11, otherwise: bb3];
    }

    bb3: {
        _6 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb4: {
        switchInt((_1.1: u8)) -> [2: bb5, otherwise: bb6];
    }

    bb5: {
        switchInt((_1.2: u8)) -> [3: bb8, otherwise: bb6];
    }

    bb6: {
        switchInt((_1.2: u8)) -> [3: bb9, otherwise: bb10];
    }

    bb7: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb8: {
        _3 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb9: {
        _4 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb10: {
        _5 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb11: {
        _7 = (_1.0: u8);
        _8 = (_1.1: u8);
        _9 = (_1.2: u8);
        _45 = const _;
        _11 = &_7;
        _10 = (_45, move _11);
        _12 = (_10.0: &u8);
        _13 = (_10.1: &u8);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<u8, u8>(move _18, _12, _13, move _20) -> unwind continue;
    }

    bb13: {
        _44 = const _;
        _22 = &_8;
        _21 = (_44, move _22);
        _23 = (_21.0: &u8);
        _24 = (_21.1: &u8);
        _27 = (*_23);
        _28 = (*_24);
        _26 = Eq(move _27, move _28);
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb15, otherwise: bb14];
    }

    bb14: {
        _29 = core::panicking::AssertKind::Eq;
        _31 = Option::<Arguments<'_>>::None;
        _30 = core::panicking::assert_failed::<u8, u8>(move _29, _23, _24, move _31) -> unwind continue;
    }

    bb15: {
        _43 = const _;
        _33 = &_9;
        _32 = (_43, move _33);
        _34 = (_32.0: &u8);
        _35 = (_32.1: &u8);
        _38 = (*_34);
        _39 = (*_35);
        _37 = Eq(move _38, move _39);
        _36 = Not(move _37);
        switchInt(move _36) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _40 = core::panicking::AssertKind::Eq;
        _42 = Option::<Arguments<'_>>::None;
        _41 = core::panicking::assert_failed::<u8, u8>(move _40, _34, _35, move _42) -> unwind continue;
    }

    bb17: {
        return;
    }
}

promoted[0] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = tuple() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = tuple_struct() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn S(_1: u8, _2: u8, _3: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: u8, _2: u8, _3: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3);
        return;
    }
}
