// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binding/match-arm-statics.rs:6:10: 6:19>::eq(_1: &NewBool, _2: &NewBool) -> bool {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:6:10: 6:19
    debug other => _2;                   // in scope 0 at ui/binding/match-arm-statics.rs:6:10: 6:19
    let mut _0: bool;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:6:10: 6:19
    let mut _3: bool;                    // in scope 0 at ui/binding/match-arm-statics.rs:7:16: 7:20
    let mut _4: bool;                    // in scope 0 at ui/binding/match-arm-statics.rs:7:16: 7:20

    bb0: {
        _3 = ((*_1).0: bool);            // scope 0 at ui/binding/match-arm-statics.rs:7:16: 7:20
        _4 = ((*_2).0: bool);            // scope 0 at ui/binding/match-arm-statics.rs:7:16: 7:20
        _0 = Eq(move _3, move _4);       // scope 0 at ui/binding/match-arm-statics.rs:7:16: 7:20
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:6:19: 6:19
    }
}

fn <impl at ui/binding/match-arm-statics.rs:6:21: 6:23>::assert_receiver_is_total_eq(_1: &NewBool) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:6:21: 6:23
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:6:21: 6:23
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:6:23: 6:23
    }
}

fn <impl at ui/binding/match-arm-statics.rs:9:10: 9:19>::eq(_1: &Direction, _2: &Direction) -> bool {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
    debug other => _2;                   // in scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
    let mut _0: bool;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
    let _3: isize;                       // in scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
    let mut _4: &Direction;              // in scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
    let mut _6: &Direction;              // in scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
    let mut _7: isize;                   // in scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
    let mut _8: isize;                   // in scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/binding/match-arm-statics.rs:9:10: 9:19
        let _5: isize;                   // in scope 1 at ui/binding/match-arm-statics.rs:9:10: 9:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/binding/match-arm-statics.rs:9:10: 9:19
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
        _3 = discriminant((*_4));        // scope 0 at ui/binding/match-arm-statics.rs:9:10: 9:19
        _6 = _2;                         // scope 1 at ui/binding/match-arm-statics.rs:9:10: 9:19
        _5 = discriminant((*_6));        // scope 1 at ui/binding/match-arm-statics.rs:9:10: 9:19
        _7 = _3;                         // scope 2 at ui/binding/match-arm-statics.rs:9:10: 9:19
        _8 = _5;                         // scope 2 at ui/binding/match-arm-statics.rs:9:10: 9:19
        _0 = Eq(move _7, move _8);       // scope 2 at ui/binding/match-arm-statics.rs:9:10: 9:19
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:9:19: 9:19
    }
}

fn <impl at ui/binding/match-arm-statics.rs:9:21: 9:23>::assert_receiver_is_total_eq(_1: &Direction) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:9:21: 9:23
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:9:21: 9:23

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:9:23: 9:23
    }
}

fn <impl at ui/binding/match-arm-statics.rs:17:10: 17:19>::eq(_1: &Foo, _2: &Foo) -> bool {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:17:10: 17:19
    debug other => _2;                   // in scope 0 at ui/binding/match-arm-statics.rs:17:10: 17:19
    let mut _0: bool;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:17:10: 17:19
    let mut _3: bool;                    // in scope 0 at ui/binding/match-arm-statics.rs:19:5: 19:27
    let mut _4: &std::option::Option<Direction>; // in scope 0 at ui/binding/match-arm-statics.rs:19:5: 19:27
    let mut _5: &std::option::Option<Direction>; // in scope 0 at ui/binding/match-arm-statics.rs:19:5: 19:27
    let mut _6: bool;                    // in scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
    let mut _7: &NewBool;                // in scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
    let mut _8: &NewBool;                // in scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17

    bb0: {
        _4 = &((*_1).0: std::option::Option<Direction>); // scope 0 at ui/binding/match-arm-statics.rs:19:5: 19:27
        _5 = &((*_2).0: std::option::Option<Direction>); // scope 0 at ui/binding/match-arm-statics.rs:19:5: 19:27
        _3 = <Option<Direction> as PartialEq>::eq(move _4, move _5) -> bb4; // scope 0 at ui/binding/match-arm-statics.rs:19:5: 19:27
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:19:5: 19:27
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<Direction>, &'b Option<Direction>) -> bool {<Option<Direction> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
        goto -> bb3;                     // scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
    }

    bb2: {
        _7 = &((*_1).1: NewBool);        // scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
        _8 = &((*_2).1: NewBool);        // scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
        _6 = <NewBool as PartialEq>::eq(move _7, move _8) -> bb5; // scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:20:5: 20:17
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a NewBool, &'b NewBool) -> bool {<NewBool as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:17:19: 17:19
    }

    bb4: {
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
    }

    bb5: {
        _0 = move _6;                    // scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
        goto -> bb3;                     // scope 0 at ui/binding/match-arm-statics.rs:20:5: 20:17
    }
}

fn <impl at ui/binding/match-arm-statics.rs:17:21: 17:23>::assert_receiver_is_total_eq(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:17:21: 17:23
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:17:21: 17:23
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:17:23: 17:23
    }
}

fn <impl at ui/binding/match-arm-statics.rs:23:10: 23:19>::eq(_1: &EnumWithStructVariants, _2: &EnumWithStructVariants) -> bool {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    debug other => _2;                   // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _0: bool;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let _3: isize;                       // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _4: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _6: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _7: bool;                    // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _8: isize;                   // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _9: isize;                   // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _10: bool;                   // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _11: (&EnumWithStructVariants, &EnumWithStructVariants); // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _12: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _13: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _14: isize;                  // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _15: isize;                  // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _16: isize;                  // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _19: bool;                   // in scope 0 at ui/binding/match-arm-statics.rs:25:14: 25:18
    let mut _20: bool;                   // in scope 0 at ui/binding/match-arm-statics.rs:25:14: 25:18
    let mut _23: &Direction;             // in scope 0 at ui/binding/match-arm-statics.rs:27:9: 27:23
    let mut _24: &Direction;             // in scope 0 at ui/binding/match-arm-statics.rs:27:9: 27:23
    let mut _25: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _26: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _27: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _28: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _29: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _30: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    let mut _31: &EnumWithStructVariants; // in scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/binding/match-arm-statics.rs:23:10: 23:19
        let _5: isize;                   // in scope 1 at ui/binding/match-arm-statics.rs:23:10: 23:19
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
            let _17: &bool;              // in scope 2 at ui/binding/match-arm-statics.rs:25:14: 25:18
            let _18: &bool;              // in scope 2 at ui/binding/match-arm-statics.rs:25:14: 25:18
            let _21: &Direction;         // in scope 2 at ui/binding/match-arm-statics.rs:27:9: 27:23
            let _22: &Direction;         // in scope 2 at ui/binding/match-arm-statics.rs:27:9: 27:23
            scope 3 {
                debug __self_0 => _17;   // in scope 3 at ui/binding/match-arm-statics.rs:25:14: 25:18
                debug __arg1_0 => _18;   // in scope 3 at ui/binding/match-arm-statics.rs:25:14: 25:18
            }
            scope 4 {
                debug __self_0 => _21;   // in scope 4 at ui/binding/match-arm-statics.rs:27:9: 27:23
                debug __arg1_0 => _22;   // in scope 4 at ui/binding/match-arm-statics.rs:27:9: 27:23
            }
            scope 5 {
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _3 = discriminant((*_4));        // scope 0 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _6 = _2;                         // scope 1 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _5 = discriminant((*_6));        // scope 1 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _8 = _3;                         // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _9 = _5;                         // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _7 = Eq(move _8, move _9);       // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        switchInt(move _7) -> [0: bb1, otherwise: bb2]; // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
    }

    bb1: {
        _0 = const false;                // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        goto -> bb3;                     // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
    }

    bb2: {
        _12 = _1;                        // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _13 = _2;                        // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _11 = (move _12, move _13);      // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _25 = deref_copy (_11.0: &EnumWithStructVariants); // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _16 = discriminant((*_25));      // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        switchInt(move _16) -> [0: bb4, 1: bb6, otherwise: bb10]; // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
    }

    bb3: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:23:19: 23:19
    }

    bb4: {
        _26 = deref_copy (_11.1: &EnumWithStructVariants); // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _14 = discriminant((*_26));      // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        switchInt(move _14) -> [0: bb7, otherwise: bb5]; // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
    }

    bb5: {
        unreachable;                     // scope 5 at ui/binding/match-arm-statics.rs:23:10: 23:19
    }

    bb6: {
        _27 = deref_copy (_11.1: &EnumWithStructVariants); // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        _15 = discriminant((*_27));      // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        switchInt(move _15) -> [1: bb8, otherwise: bb5]; // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
    }

    bb7: {
        _28 = deref_copy (_11.0: &EnumWithStructVariants); // scope 2 at ui/binding/match-arm-statics.rs:25:14: 25:18
        _17 = &(((*_28) as Variant1).0: bool); // scope 2 at ui/binding/match-arm-statics.rs:25:14: 25:18
        _29 = deref_copy (_11.1: &EnumWithStructVariants); // scope 2 at ui/binding/match-arm-statics.rs:25:14: 25:18
        _18 = &(((*_29) as Variant1).0: bool); // scope 2 at ui/binding/match-arm-statics.rs:25:14: 25:18
        _19 = (*_17);                    // scope 3 at ui/binding/match-arm-statics.rs:25:14: 25:18
        _20 = (*_18);                    // scope 3 at ui/binding/match-arm-statics.rs:25:14: 25:18
        _10 = Eq(move _19, move _20);    // scope 3 at ui/binding/match-arm-statics.rs:25:14: 25:18
        goto -> bb9;                     // scope 2 at ui/binding/match-arm-statics.rs:23:18: 23:19
    }

    bb8: {
        _30 = deref_copy (_11.0: &EnumWithStructVariants); // scope 2 at ui/binding/match-arm-statics.rs:27:9: 27:23
        _21 = &(((*_30) as Variant2).0: Direction); // scope 2 at ui/binding/match-arm-statics.rs:27:9: 27:23
        _31 = deref_copy (_11.1: &EnumWithStructVariants); // scope 2 at ui/binding/match-arm-statics.rs:27:9: 27:23
        _22 = &(((*_31) as Variant2).0: Direction); // scope 2 at ui/binding/match-arm-statics.rs:27:9: 27:23
        _23 = _21;                       // scope 4 at ui/binding/match-arm-statics.rs:27:9: 27:23
        _24 = _22;                       // scope 4 at ui/binding/match-arm-statics.rs:27:9: 27:23
        _10 = <Direction as PartialEq>::eq(move _23, move _24) -> bb9; // scope 4 at ui/binding/match-arm-statics.rs:27:9: 27:23
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:27:9: 27:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Direction, &'b Direction) -> bool {<Direction as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = move _10;                   // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
        goto -> bb3;                     // scope 2 at ui/binding/match-arm-statics.rs:23:10: 23:19
    }

    bb10: {
        unreachable;                     // scope 5 at ui/binding/match-arm-statics.rs:23:10: 23:19
    }
}

fn <impl at ui/binding/match-arm-statics.rs:23:21: 23:23>::assert_receiver_is_total_eq(_1: &EnumWithStructVariants) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:23:21: 23:23
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:23:21: 23:23
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:23:23: 23:23
    }
}

const TRUE_TRUE: (bool, bool) = {
    let mut _0: (bool, bool);            // return place in scope 0 at ui/binding/match-arm-statics.rs:31:18: 31:30

    bb0: {
        _0 = (const true, const true);   // scope 0 at ui/binding/match-arm-statics.rs:31:33: 31:45
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:31:1: 31:46
    }
}

const NONE: Option<Direction> = {
    let mut _0: std::option::Option<Direction>; // return place in scope 0 at ui/binding/match-arm-statics.rs:32:13: 32:30

    bb0: {
        _0 = Option::<Direction>::None;  // scope 0 at ui/binding/match-arm-statics.rs:32:33: 32:37
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:32:1: 32:38
    }
}

const EAST: Direction = {
    let mut _0: Direction;               // return place in scope 0 at ui/binding/match-arm-statics.rs:33:13: 33:22

    bb0: {
        _0 = Direction::East;            // scope 0 at ui/binding/match-arm-statics.rs:33:25: 33:40
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:33:1: 33:41
    }
}

const NEW_FALSE: NewBool = {
    let mut _0: NewBool;                 // return place in scope 0 at ui/binding/match-arm-statics.rs:34:18: 34:25

    bb0: {
        _0 = NewBool(const false);       // scope 0 at ui/binding/match-arm-statics.rs:34:28: 34:42
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:34:1: 34:43
    }
}

const STATIC_FOO: Foo = {
    let mut _0: Foo;                     // return place in scope 0 at ui/binding/match-arm-statics.rs:35:19: 35:22
    let mut _1: std::option::Option<Direction>; // in scope 0 at ui/binding/match-arm-statics.rs:35:36: 35:58
    let mut _2: Direction;               // in scope 0 at ui/binding/match-arm-statics.rs:35:41: 35:57

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/binding/match-arm-statics.rs:35:36: 35:58
        StorageLive(_2);                 // scope 0 at ui/binding/match-arm-statics.rs:35:41: 35:57
        _2 = Direction::South;           // scope 0 at ui/binding/match-arm-statics.rs:35:41: 35:57
        _1 = Option::<Direction>::Some(move _2); // scope 0 at ui/binding/match-arm-statics.rs:35:36: 35:58
        StorageDead(_2);                 // scope 0 at ui/binding/match-arm-statics.rs:35:57: 35:58
        _0 = Foo { bar: move _1, baz: const _ }; // scope 0 at ui/binding/match-arm-statics.rs:35:25: 35:76
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:35:65: 35:74
                                         // + literal: Const { ty: NewBool, val: Unevaluated(NEW_FALSE, [], None) }
        StorageDead(_1);                 // scope 0 at ui/binding/match-arm-statics.rs:35:75: 35:76
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:35:1: 35:77
    }
}

const VARIANT2_NORTH: EnumWithStructVariants = {
    let mut _0: EnumWithStructVariants;  // return place in scope 0 at ui/binding/match-arm-statics.rs:36:23: 36:45
    let mut _1: Direction;               // in scope 0 at ui/binding/match-arm-statics.rs:37:10: 37:26

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/binding/match-arm-statics.rs:37:10: 37:26
        _1 = Direction::North;           // scope 0 at ui/binding/match-arm-statics.rs:37:10: 37:26
        _0 = EnumWithStructVariants::Variant2 { dir: move _1 }; // scope 0 at ui/binding/match-arm-statics.rs:36:48: 37:28
        StorageDead(_1);                 // scope 0 at ui/binding/match-arm-statics.rs:37:27: 37:28
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:36:1: 37:29
    }
}

fn glfw::<impl at ui/binding/match-arm-statics.rs:40:20: 40:25>::clone(_1: &InputState) -> InputState {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:40:20: 40:25
    let mut _0: glfw::InputState;        // return place in scope 0 at ui/binding/match-arm-statics.rs:40:20: 40:25
    scope 1 {
    }

    bb0: {
        _0 = (*_1);                      // scope 1 at ui/binding/match-arm-statics.rs:40:20: 40:25
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:40:25: 40:25
    }
}

fn glfw::<impl at ui/binding/match-arm-statics.rs:40:27: 40:36>::eq(_1: &InputState, _2: &InputState) -> bool {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:40:27: 40:36
    debug other => _2;                   // in scope 0 at ui/binding/match-arm-statics.rs:40:27: 40:36
    let mut _0: bool;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:40:27: 40:36
    let mut _3: usize;                   // in scope 0 at ui/binding/match-arm-statics.rs:41:27: 41:32
    let mut _4: usize;                   // in scope 0 at ui/binding/match-arm-statics.rs:41:27: 41:32

    bb0: {
        _3 = ((*_1).0: usize);           // scope 0 at ui/binding/match-arm-statics.rs:41:27: 41:32
        _4 = ((*_2).0: usize);           // scope 0 at ui/binding/match-arm-statics.rs:41:27: 41:32
        _0 = Eq(move _3, move _4);       // scope 0 at ui/binding/match-arm-statics.rs:41:27: 41:32
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:40:36: 40:36
    }
}

fn glfw::<impl at ui/binding/match-arm-statics.rs:40:38: 40:40>::assert_receiver_is_total_eq(_1: &InputState) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:40:38: 40:40
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:40:38: 40:40
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:40:40: 40:40
    }
}

const RELEASE: InputState = {
    let mut _0: glfw::InputState;        // return place in scope 0 at ui/binding/match-arm-statics.rs:43:26: 43:36

    bb0: {
        _0 = InputState(const 0_usize);  // scope 0 at ui/binding/match-arm-statics.rs:43:39: 43:52
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:43:5: 43:53
    }
}

const PRESS: InputState = {
    let mut _0: glfw::InputState;        // return place in scope 0 at ui/binding/match-arm-statics.rs:44:26: 44:36

    bb0: {
        _0 = InputState(const 1_usize);  // scope 0 at ui/binding/match-arm-statics.rs:44:39: 44:52
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:44:5: 44:53
    }
}

const REPEAT: InputState = {
    let mut _0: glfw::InputState;        // return place in scope 0 at ui/binding/match-arm-statics.rs:45:26: 45:36

    bb0: {
        _0 = InputState(const 2_usize);  // scope 0 at ui/binding/match-arm-statics.rs:45:39: 45:52
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:45:5: 45:53
    }
}

fn issue_6533() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:48:17: 48:17
    let mut _1: (&&str, &&str);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &str;                        // in scope 0 at ui/binding/match-arm-statics.rs:59:16: 59:44
    let mut _4: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &&str;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &&str;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: &str;                       // in scope 0 at ui/binding/match-arm-statics.rs:60:16: 60:42
    let mut _22: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _23: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _38: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _39: &str;                       // in scope 0 at ui/binding/match-arm-statics.rs:61:16: 61:43
    let mut _40: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _41: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _42: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _45: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _46: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _48: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _49: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _50: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _51: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _52: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _53: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _55: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _56: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _57: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _41;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _42;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _47: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _47;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = action_to_str(const _) -> bb1; // scope 0 at ui/binding/match-arm-statics.rs:59:16: 59:44
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:59:16: 59:29
                                         // + literal: Const { ty: fn(InputState) -> &'static str {action_to_str}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:59:30: 59:43
                                         // + literal: Const { ty: InputState, val: Unevaluated(RELEASE, [], None) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _57 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(issue_6533, [], Some(promoted[2])) }
        _4 = _57;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &&str);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &&str);              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = _5;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = <&str as PartialEq>::eq(move _9, move _10) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<&str, &str>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = action_to_str(const _) -> bb5; // scope 0 at ui/binding/match-arm-statics.rs:60:16: 60:42
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:60:16: 60:29
                                         // + literal: Const { ty: fn(InputState) -> &'static str {action_to_str}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:60:30: 60:41
                                         // + literal: Const { ty: InputState, val: Unevaluated(PRESS, [], None) }
    }

    bb5: {
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _56 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(issue_6533, [], Some(promoted[1])) }
        _22 = _56;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _22);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = _23;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = _24;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = <&str as PartialEq>::eq(move _27, move _28) -> bb6; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<&str, &str>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb8: {
        _39 = action_to_str(const _) -> bb9; // scope 0 at ui/binding/match-arm-statics.rs:61:16: 61:43
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:61:16: 61:29
                                         // + literal: Const { ty: fn(InputState) -> &'static str {action_to_str}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:61:30: 61:42
                                         // + literal: Const { ty: InputState, val: Unevaluated(REPEAT, [], None) }
    }

    bb9: {
        _38 = &_39;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _55 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(issue_6533, [], Some(promoted[0])) }
        _40 = _55;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _37 = (move _38, move _40);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _41 = (_37.0: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _42 = (_37.1: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _45 = _41;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _46 = _42;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _44 = <&str as PartialEq>::eq(move _45, move _46) -> bb10; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _43 = Not(move _44);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _43) -> [0: bb12, otherwise: bb11]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _47 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _48 = core::panicking::assert_failed::<&str, &str>(move _49, move _50, move _52, move _54); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb12: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:62:2: 62:2
    }
}

promoted[0] in issue_6533: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-arm-statics.rs:61:45: 61:55

    bb0: {
        _1 = const "Repeated";           // scope 0 at ui/binding/match-arm-statics.rs:61:45: 61:55
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:61:45: 61:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in issue_6533: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-arm-statics.rs:60:44: 60:53

    bb0: {
        _1 = const "Pressed";            // scope 0 at ui/binding/match-arm-statics.rs:60:44: 60:53
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:60:44: 60:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in issue_6533: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-arm-statics.rs:59:46: 59:56

    bb0: {
        _1 = const "Released";           // scope 0 at ui/binding/match-arm-statics.rs:59:46: 59:56
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:59:46: 59:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn action_to_str(_1: InputState) -> &str {
    debug state => _1;                   // in scope 0 at ui/binding/match-arm-statics.rs:49:22: 49:27
    let mut _0: &str;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:49:50: 49:62

    bb0: {
        switchInt((_1.0: usize)) -> [0: bb2, 1: bb3, 2: bb4, otherwise: bb1]; // scope 0 at ui/binding/match-arm-statics.rs:51:9: 51:20
    }

    bb1: {
        _0 = const "Unknown";            // scope 0 at ui/binding/match-arm-statics.rs:55:26: 55:35
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:55:26: 55:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb5;                     // scope 0 at ui/binding/match-arm-statics.rs:55:26: 55:35
    }

    bb2: {
        _0 = const "Released";           // scope 0 at ui/binding/match-arm-statics.rs:52:26: 52:36
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:52:26: 52:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb5;                     // scope 0 at ui/binding/match-arm-statics.rs:52:26: 52:36
    }

    bb3: {
        _0 = const "Pressed";            // scope 0 at ui/binding/match-arm-statics.rs:53:26: 53:35
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:53:26: 53:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb5;                     // scope 0 at ui/binding/match-arm-statics.rs:53:26: 53:35
    }

    bb4: {
        _0 = const "Repeated";           // scope 0 at ui/binding/match-arm-statics.rs:54:26: 54:36
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:54:26: 54:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb5;                     // scope 0 at ui/binding/match-arm-statics.rs:54:26: 54:36
    }

    bb5: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:57:6: 57:6
    }
}

fn issue_13626() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:64:18: 64:18

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:70:2: 70:2
    }
}

const VAL: [u8; 1] = {
    let mut _0: [u8; 1];                 // return place in scope 0 at ui/binding/match-arm-statics.rs:65:16: 65:23

    bb0: {
        _0 = [const 0_u8];               // scope 0 at ui/binding/match-arm-statics.rs:65:26: 65:29
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:65:5: 65:30
    }
}

VAL::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/binding/match-arm-statics.rs:65:21: 65:22

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/binding/match-arm-statics.rs:65:21: 65:22
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:65:21: 65:22
    }
}

fn issue_14576() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:72:18: 72:18
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: i32;                         // in scope 0 at ui/binding/match-arm-statics.rs:87:16: 87:46
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: i32;                        // in scope 0 at ui/binding/match-arm-statics.rs:94:16: 94:46
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = const 1_i32;                // scope 0 at ui/binding/match-arm-statics.rs:87:34: 87:35
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _38 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(issue_14576, [], Some(promoted[1])) }
        _4 = _38;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 1_i32;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<i32, i32>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _21 = const 1_i32;               // scope 0 at ui/binding/match-arm-statics.rs:94:34: 94:35
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _37 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(issue_14576, [], Some(promoted[0])) }
        _22 = _37;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _22);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = (*_23);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = const 1_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = Eq(move _27, move _28);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<i32, i32>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:95:2: 95:2
    }
}

promoted[0] in issue_14576: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/binding/match-arm-statics.rs:94:48: 94:49

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/binding/match-arm-statics.rs:94:48: 94:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in issue_14576: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/binding/match-arm-statics.rs:87:48: 87:49

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/binding/match-arm-statics.rs:87:48: 87:49
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

const ON: (i32, i32) = {
    let mut _0: (i32, i32);              // return place in scope 0 at ui/binding/match-arm-statics.rs:74:15: 74:18

    bb0: {
        _0 = (const 1_i32, const 1_i32); // scope 0 at ui/binding/match-arm-statics.rs:74:21: 74:27
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:74:5: 74:28
    }
}

const OFF: (i32, i32) = {
    let mut _0: (i32, i32);              // return place in scope 0 at ui/binding/match-arm-statics.rs:75:16: 75:19

    bb0: {
        _0 = (const 0_i32, const 0_i32); // scope 0 at ui/binding/match-arm-statics.rs:75:22: 75:28
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:75:5: 75:29
    }
}

C::D::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/binding/match-arm-statics.rs:84:18: 84:19

    bb0: {
        _0 = const 3_isize;              // scope 0 at ui/binding/match-arm-statics.rs:84:18: 84:19
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:84:18: 84:19
    }
}

C::E::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/binding/match-arm-statics.rs:84:25: 84:26

    bb0: {
        _0 = const 4_isize;              // scope 0 at ui/binding/match-arm-statics.rs:84:25: 84:26
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:84:25: 84:26
    }
}

fn issue_14576::<impl at ui/binding/match-arm-statics.rs:83:14: 83:23>::eq(_1: &C, _2: &C) -> bool {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
    debug other => _2;                   // in scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
    let mut _0: bool;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
    let _3: isize;                       // in scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
    let mut _4: &issue_14576::C;         // in scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
    let mut _6: &issue_14576::C;         // in scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
    let mut _7: isize;                   // in scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
    let mut _8: isize;                   // in scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/binding/match-arm-statics.rs:83:14: 83:23
        let _5: isize;                   // in scope 1 at ui/binding/match-arm-statics.rs:83:14: 83:23
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/binding/match-arm-statics.rs:83:14: 83:23
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
        _3 = discriminant((*_4));        // scope 0 at ui/binding/match-arm-statics.rs:83:14: 83:23
        _6 = _2;                         // scope 1 at ui/binding/match-arm-statics.rs:83:14: 83:23
        _5 = discriminant((*_6));        // scope 1 at ui/binding/match-arm-statics.rs:83:14: 83:23
        _7 = _3;                         // scope 2 at ui/binding/match-arm-statics.rs:83:14: 83:23
        _8 = _5;                         // scope 2 at ui/binding/match-arm-statics.rs:83:14: 83:23
        _0 = Eq(move _7, move _8);       // scope 2 at ui/binding/match-arm-statics.rs:83:14: 83:23
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:83:23: 83:23
    }
}

fn issue_14576::<impl at ui/binding/match-arm-statics.rs:83:25: 83:27>::assert_receiver_is_total_eq(_1: &C) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:83:25: 83:27
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:83:25: 83:27

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:83:27: 83:27
    }
}

const F: C = {
    let mut _0: issue_14576::C;          // return place in scope 0 at ui/binding/match-arm-statics.rs:85:15: 85:16

    bb0: {
        _0 = C::D;                       // scope 0 at ui/binding/match-arm-statics.rs:85:19: 85:23
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:85:5: 85:24
    }
}

G::H::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/binding/match-arm-statics.rs:91:18: 91:19

    bb0: {
        _0 = const 3_isize;              // scope 0 at ui/binding/match-arm-statics.rs:91:18: 91:19
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:91:18: 91:19
    }
}

G::I::{constant#0}: isize = {
    let mut _0: isize;                   // return place in scope 0 at ui/binding/match-arm-statics.rs:91:25: 91:26

    bb0: {
        _0 = const 5_isize;              // scope 0 at ui/binding/match-arm-statics.rs:91:25: 91:26
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:91:25: 91:26
    }
}

fn issue_14576::<impl at ui/binding/match-arm-statics.rs:90:14: 90:23>::eq(_1: &G, _2: &G) -> bool {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
    debug other => _2;                   // in scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
    let mut _0: bool;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
    let _3: isize;                       // in scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
    let mut _4: &issue_14576::G;         // in scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
    let mut _6: &issue_14576::G;         // in scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
    let mut _7: isize;                   // in scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
    let mut _8: isize;                   // in scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
    scope 1 {
        debug __self_tag => _3;          // in scope 1 at ui/binding/match-arm-statics.rs:90:14: 90:23
        let _5: isize;                   // in scope 1 at ui/binding/match-arm-statics.rs:90:14: 90:23
        scope 2 {
            debug __arg1_tag => _5;      // in scope 2 at ui/binding/match-arm-statics.rs:90:14: 90:23
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
        _3 = discriminant((*_4));        // scope 0 at ui/binding/match-arm-statics.rs:90:14: 90:23
        _6 = _2;                         // scope 1 at ui/binding/match-arm-statics.rs:90:14: 90:23
        _5 = discriminant((*_6));        // scope 1 at ui/binding/match-arm-statics.rs:90:14: 90:23
        _7 = _3;                         // scope 2 at ui/binding/match-arm-statics.rs:90:14: 90:23
        _8 = _5;                         // scope 2 at ui/binding/match-arm-statics.rs:90:14: 90:23
        _0 = Eq(move _7, move _8);       // scope 2 at ui/binding/match-arm-statics.rs:90:14: 90:23
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:90:23: 90:23
    }
}

fn issue_14576::<impl at ui/binding/match-arm-statics.rs:90:25: 90:27>::assert_receiver_is_total_eq(_1: &G) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:90:25: 90:27
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:90:25: 90:27

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:90:27: 90:27
    }
}

const K: G = {
    let mut _0: issue_14576::G;          // return place in scope 0 at ui/binding/match-arm-statics.rs:92:15: 92:16

    bb0: {
        _0 = G::I;                       // scope 0 at ui/binding/match-arm-statics.rs:92:19: 92:23
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:92:5: 92:24
    }
}

fn issue_13731() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:97:18: 97:18

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:105:2: 105:2
    }
}

fn issue_13731::<impl at ui/binding/match-arm-statics.rs:98:14: 98:23>::eq(_1: &A, _2: &A) -> bool {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
    debug other => _2;                   // in scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
    let mut _0: bool;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
    let mut _3: (&issue_13731::A, &issue_13731::A); // in scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
    let mut _4: &issue_13731::A;         // in scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
    let mut _5: &issue_13731::A;         // in scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
    let _6: &();                         // in scope 0 at ui/binding/match-arm-statics.rs:99:17: 99:19
    let _7: &();                         // in scope 0 at ui/binding/match-arm-statics.rs:99:17: 99:19
    let mut _8: &();                     // in scope 0 at ui/binding/match-arm-statics.rs:99:17: 99:19
    let mut _9: &();                     // in scope 0 at ui/binding/match-arm-statics.rs:99:17: 99:19
    let mut _10: &issue_13731::A;        // in scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
    let mut _11: &issue_13731::A;        // in scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
    scope 1 {
        debug __self_0 => _6;            // in scope 1 at ui/binding/match-arm-statics.rs:99:17: 99:19
        debug __arg1_0 => _7;            // in scope 1 at ui/binding/match-arm-statics.rs:99:17: 99:19
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
        _5 = _2;                         // scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
        _3 = (move _4, move _5);         // scope 0 at ui/binding/match-arm-statics.rs:98:14: 98:23
        _10 = deref_copy (_3.0: &issue_13731::A); // scope 0 at ui/binding/match-arm-statics.rs:99:17: 99:19
        _6 = &(((*_10) as AA).0: ());    // scope 0 at ui/binding/match-arm-statics.rs:99:17: 99:19
        _11 = deref_copy (_3.1: &issue_13731::A); // scope 0 at ui/binding/match-arm-statics.rs:99:17: 99:19
        _7 = &(((*_11) as AA).0: ());    // scope 0 at ui/binding/match-arm-statics.rs:99:17: 99:19
        _8 = _6;                         // scope 1 at ui/binding/match-arm-statics.rs:99:17: 99:19
        _9 = _7;                         // scope 1 at ui/binding/match-arm-statics.rs:99:17: 99:19
        _0 = <() as PartialEq>::eq(move _8, move _9) -> bb1; // scope 1 at ui/binding/match-arm-statics.rs:99:17: 99:19
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:99:17: 99:19
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (), &'b ()) -> bool {<() as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:98:23: 98:23
    }
}

fn issue_13731::<impl at ui/binding/match-arm-statics.rs:98:25: 98:27>::assert_receiver_is_total_eq(_1: &A) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:98:25: 98:27
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:98:25: 98:27
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:98:27: 98:27
    }
}

const B: A = {
    let mut _0: issue_13731::A;          // return place in scope 0 at ui/binding/match-arm-statics.rs:100:14: 100:15
    let mut _1: ();                      // in scope 0 at ui/binding/match-arm-statics.rs:100:24: 100:26

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/binding/match-arm-statics.rs:100:24: 100:26
        _1 = ();                         // scope 0 at ui/binding/match-arm-statics.rs:100:24: 100:26
        _0 = A::AA(move _1);             // scope 0 at ui/binding/match-arm-statics.rs:100:18: 100:27
        StorageDead(_1);                 // scope 0 at ui/binding/match-arm-statics.rs:100:26: 100:27
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:100:5: 100:28
    }
}

fn issue_15393() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:107:18: 107:18

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:121:2: 121:2
    }
}

fn issue_15393::<impl at ui/binding/match-arm-statics.rs:109:14: 109:23>::eq(_1: &Flags, _2: &Flags) -> bool {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:109:14: 109:23
    debug other => _2;                   // in scope 0 at ui/binding/match-arm-statics.rs:109:14: 109:23
    let mut _0: bool;                    // return place in scope 0 at ui/binding/match-arm-statics.rs:109:14: 109:23
    let mut _3: usize;                   // in scope 0 at ui/binding/match-arm-statics.rs:111:9: 111:20
    let mut _4: usize;                   // in scope 0 at ui/binding/match-arm-statics.rs:111:9: 111:20

    bb0: {
        _3 = ((*_1).0: usize);           // scope 0 at ui/binding/match-arm-statics.rs:111:9: 111:20
        _4 = ((*_2).0: usize);           // scope 0 at ui/binding/match-arm-statics.rs:111:9: 111:20
        _0 = Eq(move _3, move _4);       // scope 0 at ui/binding/match-arm-statics.rs:111:9: 111:20
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:109:23: 109:23
    }
}

fn issue_15393::<impl at ui/binding/match-arm-statics.rs:109:25: 109:27>::assert_receiver_is_total_eq(_1: &Flags) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/match-arm-statics.rs:109:25: 109:27
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:109:25: 109:27
    scope 1 {
    }

    bb0: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:109:27: 109:27
    }
}

const FOO: Flags = {
    let mut _0: issue_15393::Flags;      // return place in scope 0 at ui/binding/match-arm-statics.rs:114:16: 114:21

    bb0: {
        _0 = Flags { bits: const 1_usize }; // scope 0 at ui/binding/match-arm-statics.rs:114:24: 114:44
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:114:5: 114:45
    }
}

const BAR: Flags = {
    let mut _0: issue_15393::Flags;      // return place in scope 0 at ui/binding/match-arm-statics.rs:115:16: 115:21

    bb0: {
        _0 = Flags { bits: const 2_usize }; // scope 0 at ui/binding/match-arm-statics.rs:115:24: 115:44
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:115:5: 115:45
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-arm-statics.rs:123:11: 123:11
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: i32;                         // in scope 0 at ui/binding/match-arm-statics.rs:124:16: 129:6
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: i32;                        // in scope 0 at ui/binding/match-arm-statics.rs:131:16: 138:6
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _38: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _39: i32;                        // in scope 0 at ui/binding/match-arm-statics.rs:140:16: 149:6
    let mut _40: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _41: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _42: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _45: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _46: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _48: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _49: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _50: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _51: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _52: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _53: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _55: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _56: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _57: i32;                        // in scope 0 at ui/binding/match-arm-statics.rs:151:16: 158:6
    let mut _58: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _59: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _60: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _73: ();                         // in scope 0 at ui/binding/match-arm-statics.rs:160:5: 160:17
    let _74: ();                         // in scope 0 at ui/binding/match-arm-statics.rs:161:5: 161:18
    let _75: ();                         // in scope 0 at ui/binding/match-arm-statics.rs:162:5: 162:18
    let _76: ();                         // in scope 0 at ui/binding/match-arm-statics.rs:163:5: 163:18
    let _77: ();                         // in scope 0 at ui/binding/match-arm-statics.rs:164:5: 164:18
    let mut _78: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _79: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _80: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _81: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _41;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _42;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _47: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _47;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _59;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _60;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _65: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _65;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = const 4_i32;                // scope 0 at ui/binding/match-arm-statics.rs:128:26: 128:27
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _81 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[3])) }
        _4 = _81;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 4_i32;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<i32, i32>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _21 = const 2_i32;               // scope 0 at ui/binding/match-arm-statics.rs:133:41: 133:42
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _80 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[2])) }
        _22 = _80;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _22);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = (*_23);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = const 2_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = Eq(move _27, move _28);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<i32, i32>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        _39 = const 5_i32;               // scope 0 at ui/binding/match-arm-statics.rs:145:67: 145:68
        _38 = &_39;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _79 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _40 = _79;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _37 = (move _38, move _40);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _41 = (_37.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _42 = (_37.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _45 = (*_41);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _46 = const 5_i32;               // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _44 = Eq(move _45, move _46);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _43 = Not(move _44);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _43) -> [0: bb6, otherwise: bb5]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _47 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _51;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _42;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = _53;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _48 = core::panicking::assert_failed::<i32, i32>(move _49, move _50, move _52, move _54); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb6: {
        _57 = const 4_i32;               // scope 0 at ui/binding/match-arm-statics.rs:155:27: 155:28
        _56 = &_57;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _78 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _58 = _78;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _55 = (move _56, move _58);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_55.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_55.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = (*_59);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = const 4_i32;               // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = Eq(move _63, move _64);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _61 = Not(move _62);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb8, otherwise: bb7]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _65 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<i32, i32>(move _67, move _68, move _70, move _72); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb8: {
        _73 = issue_6533() -> bb9;       // scope 0 at ui/binding/match-arm-statics.rs:160:5: 160:17
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:160:5: 160:15
                                         // + literal: Const { ty: fn() {issue_6533}, val: Value(<ZST>) }
    }

    bb9: {
        _74 = issue_13626() -> bb10;     // scope 0 at ui/binding/match-arm-statics.rs:161:5: 161:18
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:161:5: 161:16
                                         // + literal: Const { ty: fn() {issue_13626}, val: Value(<ZST>) }
    }

    bb10: {
        _75 = issue_13731() -> bb11;     // scope 0 at ui/binding/match-arm-statics.rs:162:5: 162:18
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:162:5: 162:16
                                         // + literal: Const { ty: fn() {issue_13731}, val: Value(<ZST>) }
    }

    bb11: {
        _76 = issue_14576() -> bb12;     // scope 0 at ui/binding/match-arm-statics.rs:163:5: 163:18
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:163:5: 163:16
                                         // + literal: Const { ty: fn() {issue_14576}, val: Value(<ZST>) }
    }

    bb12: {
        _77 = issue_15393() -> bb13;     // scope 0 at ui/binding/match-arm-statics.rs:164:5: 164:18
                                         // mir::Constant
                                         // + span: ui/binding/match-arm-statics.rs:164:5: 164:16
                                         // + literal: Const { ty: fn() {issue_15393}, val: Value(<ZST>) }
    }

    bb13: {
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:165:2: 165:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/binding/match-arm-statics.rs:158:8: 158:9

    bb0: {
        _1 = const 4_i32;                // scope 0 at ui/binding/match-arm-statics.rs:158:8: 158:9
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/binding/match-arm-statics.rs:149:8: 149:9

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/binding/match-arm-statics.rs:149:8: 149:9
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/binding/match-arm-statics.rs:138:8: 138:9

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/binding/match-arm-statics.rs:138:8: 138:9
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/binding/match-arm-statics.rs:129:8: 129:9

    bb0: {
        _1 = const 4_i32;                // scope 0 at ui/binding/match-arm-statics.rs:129:8: 129:9
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn NewBool(_1: bool) -> NewBool {
    let mut _0: NewBool;                 // return place in scope 0 at ui/binding/match-arm-statics.rs:7:1: 7:15

    bb0: {
        _0 = NewBool(move _1);           // scope 0 at ui/binding/match-arm-statics.rs:7:1: 7:15
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:7:1: 7:15
    }
}

// MIR FOR CTFE
fn NewBool(_1: bool) -> NewBool {
    let mut _0: NewBool;                 // return place in scope 0 at ui/binding/match-arm-statics.rs:7:1: 7:15

    bb0: {
        _0 = NewBool(move _1);           // scope 0 at ui/binding/match-arm-statics.rs:7:1: 7:15
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:7:1: 7:15
    }
}

fn EnumWithStructVariants::Variant1(_1: bool) -> EnumWithStructVariants {
    let mut _0: EnumWithStructVariants;  // return place in scope 0 at ui/binding/match-arm-statics.rs:25:5: 25:13

    bb0: {
        _0 = EnumWithStructVariants::Variant1(move _1); // scope 0 at ui/binding/match-arm-statics.rs:25:5: 25:13
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:25:5: 25:13
    }
}

// MIR FOR CTFE
fn EnumWithStructVariants::Variant1(_1: bool) -> EnumWithStructVariants {
    let mut _0: EnumWithStructVariants;  // return place in scope 0 at ui/binding/match-arm-statics.rs:25:5: 25:13

    bb0: {
        _0 = EnumWithStructVariants::Variant1(move _1); // scope 0 at ui/binding/match-arm-statics.rs:25:5: 25:13
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:25:5: 25:13
    }
}

fn InputState(_1: usize) -> InputState {
    let mut _0: glfw::InputState;        // return place in scope 0 at ui/binding/match-arm-statics.rs:41:5: 41:26

    bb0: {
        _0 = InputState(move _1);        // scope 0 at ui/binding/match-arm-statics.rs:41:5: 41:26
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:41:5: 41:26
    }
}

// MIR FOR CTFE
fn InputState(_1: usize) -> InputState {
    let mut _0: glfw::InputState;        // return place in scope 0 at ui/binding/match-arm-statics.rs:41:5: 41:26

    bb0: {
        _0 = InputState(move _1);        // scope 0 at ui/binding/match-arm-statics.rs:41:5: 41:26
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:41:5: 41:26
    }
}

fn A::AA(_1: ()) -> A {
    let mut _0: issue_13731::A;          // return place in scope 0 at ui/binding/match-arm-statics.rs:99:14: 99:16

    bb0: {
        _0 = A::AA(move _1);             // scope 0 at ui/binding/match-arm-statics.rs:99:14: 99:16
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:99:14: 99:16
    }
}

// MIR FOR CTFE
fn A::AA(_1: ()) -> A {
    let mut _0: issue_13731::A;          // return place in scope 0 at ui/binding/match-arm-statics.rs:99:14: 99:16

    bb0: {
        _0 = A::AA(move _1);             // scope 0 at ui/binding/match-arm-statics.rs:99:14: 99:16
        return;                          // scope 0 at ui/binding/match-arm-statics.rs:99:14: 99:16
    }
}
