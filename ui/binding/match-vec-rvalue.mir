// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 3]>;
    let _7: std::vec::Vec<i32>;
    let mut _8: (&usize, &usize);
    let mut _9: &usize;
    let _10: usize;
    let mut _11: &std::vec::Vec<i32>;
    let mut _14: bool;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&i32, &i32);
    let mut _22: &i32;
    let _23: &i32;
    let mut _24: &std::vec::Vec<i32>;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: i32;
    let mut _30: i32;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&i32, &i32);
    let mut _35: &i32;
    let _36: &i32;
    let mut _37: &std::vec::Vec<i32>;
    let mut _40: bool;
    let mut _41: bool;
    let mut _42: i32;
    let mut _43: i32;
    let _45: !;
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _47: (&i32, &i32);
    let mut _48: &i32;
    let _49: &i32;
    let mut _50: &std::vec::Vec<i32>;
    let mut _53: bool;
    let mut _54: bool;
    let mut _55: i32;
    let mut _56: i32;
    let _58: !;
    let mut _59: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: *const [i32; 3];
    let mut _65: *const ();
    let mut _66: usize;
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: usize;
    let mut _70: bool;
    scope 1 {
    }
    scope 2 {
        debug x => _7;
        let _12: &usize;
        let _13: &usize;
        let _25: &i32;
        let _26: &i32;
        let _38: &i32;
        let _39: &i32;
        let _51: &i32;
        let _52: &i32;
        let mut _60: &i32;
        let mut _61: &i32;
        let mut _62: &i32;
        let mut _63: &usize;
        scope 3 {
            debug left_val => _12;
            debug right_val => _13;
            let _18: core::panicking::AssertKind;
            scope 4 {
                debug kind => _18;
            }
        }
        scope 5 {
            debug left_val => _25;
            debug right_val => _26;
            let _31: core::panicking::AssertKind;
            scope 6 {
                debug kind => _31;
            }
        }
        scope 7 {
            debug left_val => _38;
            debug right_val => _39;
            let _44: core::panicking::AssertKind;
            scope 8 {
                debug kind => _44;
            }
        }
        scope 9 {
            debug left_val => _51;
            debug right_val => _52;
            let _57: core::panicking::AssertKind;
            scope 10 {
                debug kind => _57;
            }
        }
    }

    bb0: {
        _3 = SizeOf([i32; 3]);
        _4 = AlignOf([i32; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 3]);
        _64 = (((_6.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _65 = _64 as *const () (PtrToPtr);
        _66 = _65 as usize (Transmute);
        _67 = AlignOf(i32);
        _68 = Sub(_67, const 1_usize);
        _69 = BitAnd(_66, _68);
        _70 = Eq(_69, const 0_usize);
        assert(_70, "misaligned pointer dereference: address must be a multiple of {} but is {}", _67, _66) -> [success: bb18, unwind unreachable];
    }

    bb2: {
        _7 = move _1;
        _11 = &_7;
        _10 = Vec::<i32>::len(move _11) -> [return: bb3, unwind: bb16];
    }

    bb3: {
        _9 = &_10;
        _63 = const _;
        _8 = (move _9, _63);
        _12 = (_8.0: &usize);
        _13 = (_8.1: &usize);
        _16 = (*_12);
        _17 = (*_13);
        _15 = Eq(move _16, move _17);
        _14 = Not(move _15);
        switchInt(move _14) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<usize, usize>(move _18, _12, _13, move _20) -> bb16;
    }

    bb5: {
        _24 = &_7;
        _23 = <Vec<i32> as Index<usize>>::index(move _24, const 0_usize) -> [return: bb6, unwind: bb16];
    }

    bb6: {
        _22 = _23;
        _62 = const _;
        _21 = (move _22, _62);
        _25 = (_21.0: &i32);
        _26 = (_21.1: &i32);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<i32, i32>(move _31, _25, _26, move _33) -> bb16;
    }

    bb8: {
        _37 = &_7;
        _36 = <Vec<i32> as Index<usize>>::index(move _37, const 1_usize) -> [return: bb9, unwind: bb16];
    }

    bb9: {
        _35 = _36;
        _61 = const _;
        _34 = (move _35, _61);
        _38 = (_34.0: &i32);
        _39 = (_34.1: &i32);
        _42 = (*_38);
        _43 = (*_39);
        _41 = Eq(move _42, move _43);
        _40 = Not(move _41);
        switchInt(move _40) -> [0: bb11, otherwise: bb10];
    }

    bb10: {
        _44 = core::panicking::AssertKind::Eq;
        _46 = Option::<Arguments<'_>>::None;
        _45 = core::panicking::assert_failed::<i32, i32>(move _44, _38, _39, move _46) -> bb16;
    }

    bb11: {
        _50 = &_7;
        _49 = <Vec<i32> as Index<usize>>::index(move _50, const 2_usize) -> [return: bb12, unwind: bb16];
    }

    bb12: {
        _48 = _49;
        _60 = const _;
        _47 = (move _48, _60);
        _51 = (_47.0: &i32);
        _52 = (_47.1: &i32);
        _55 = (*_51);
        _56 = (*_52);
        _54 = Eq(move _55, move _56);
        _53 = Not(move _54);
        switchInt(move _53) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _57 = core::panicking::AssertKind::Eq;
        _59 = Option::<Arguments<'_>>::None;
        _58 = core::panicking::assert_failed::<i32, i32>(move _57, _51, _52, move _59) -> bb16;
    }

    bb14: {
        drop(_7) -> [return: bb15, unwind continue];
    }

    bb15: {
        return;
    }

    bb16 (cleanup): {
        drop(_7) -> [return: bb17, unwind terminate];
    }

    bb17 (cleanup): {
        resume;
    }

    bb18: {
        (*_64) = [const 1_i32, const 2_i32, const 3_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 3_usize;
        _0 = &_1;
        return;
    }
}
