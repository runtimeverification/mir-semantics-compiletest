// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:11:16: 11:21>::clone(_1: &Context<'_>) -> Context<'_> {
    debug self => _1;                    // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:11:16: 11:21
    let mut _0: Context<'_>;             // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:11:16: 11:21
    scope 1 {
        scope 2 {
        }
    }

    bb0: {
        _0 = (*_1);                      // scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:11:16: 11:21
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:11:21: 11:21
    }
}

fn <impl at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:17:1: 17:21>::record_drop(_1: Context<'_>, _2: i32) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:18:20: 18:24
    debug index => _2;                   // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:18:26: 18:31
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:18:38: 18:38
    let _3: ();                          // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:44
    let mut _4: &mut std::vec::Vec<i32>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:44
    let mut _5: &mut std::vec::Vec<i32>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:44
    let mut _6: &mut std::cell::RefMut<'_, std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:44
    let mut _7: std::cell::RefMut<'_, std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:32
    let mut _8: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:32
    let mut _9: i32;                     // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:38: 19:43
    let mut _10: bool;                   // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:20:12: 20:34
    let mut _11: i32;                    // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:20:12: 20:17
    let mut _12: i32;                    // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:20:21: 20:34
    let mut _13: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _14: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:18:20: 18:24

    bb0: {
        _14 = deref_copy (_1.1: &std::cell::RefCell<std::vec::Vec<i32>>); // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:32
        _8 = _14;                        // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:32
        _7 = RefCell::<Vec<i32>>::borrow_mut(move _8) -> bb1; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:32
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:20: 19:30
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) -> RefMut<'a, Vec<i32>> {RefCell::<Vec<i32>>::borrow_mut}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = &mut _7;                    // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:44
        _5 = <RefMut<'_, Vec<i32>> as DerefMut>::deref_mut(move _6) -> [return: bb2, unwind: bb7]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:44
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut RefMut<'_, Vec<i32>>) -> &'a mut <RefMut<'_, Vec<i32>> as Deref>::Target {<RefMut<'_, Vec<i32>> as DerefMut>::deref_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut (*_5);                 // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:44
        _9 = _2;                         // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:38: 19:43
        _3 = Vec::<i32>::push(move _4, move _9) -> [return: bb3, unwind: bb7]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:9: 19:44
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:33: 19:37
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_7) -> bb4;                 // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:44: 19:45
    }

    bb4: {
        _11 = _2;                        // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:20:12: 20:17
        _12 = (_1.0: i32);               // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:20:21: 20:34
        _10 = Eq(move _11, move _12);    // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:20:12: 20:34
        switchInt(move _10) -> [0: bb6, otherwise: bb5]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:20:12: 20:34
    }

    bb5: {
        _13 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:23:6: 23:6
    }

    bb7 (cleanup): {
        drop(_7) -> bb8;                 // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:19:44: 19:45
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:18:5: 23:6
    }
}

fn <impl at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:26:1: 26:30>::drop(_1: &mut LogDrop<'_>) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:27:13: 27:22
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:27:24: 27:24
    let _2: ();                          // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:28:9: 28:35
    let mut _3: Context<'_>;             // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:28:9: 28:15
    let mut _4: i32;                     // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:28:28: 28:34

    bb0: {
        _3 = ((*_1).1: Context<'_>);     // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:28:9: 28:15
        _4 = ((*_1).0: i32);             // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:28:28: 28:34
        _2 = Context::<'_>::record_drop(move _3, move _4) -> bb1; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:28:9: 28:35
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:28:16: 28:27
                                         // + literal: Const { ty: fn(Context<'_>, i32) {Context::<'_>::record_drop}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:29:6: 29:6
    }
}

fn bindings_in_params(_1: (LogDrop<'_>, LogDrop<'_>), _2: (LogDrop<'_>, LogDrop<'_>)) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:81: 32:81
    let _3: LogDrop<'_>;                 // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:24: 32:26
    let _4: LogDrop<'_>;                 // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:56: 32:58
    scope 1 {
        debug _x => _3;                  // in scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:24: 32:26
        debug _y => _4;                  // in scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:56: 32:58
    }

    bb0: {
        _3 = move (_1.0: LogDrop<'_>);   // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:24: 32:26
        _4 = move (_2.1: LogDrop<'_>);   // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:56: 32:58
        drop(_4) -> [return: bb1, unwind: bb7]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:82: 32:83
    }

    bb1: {
        drop((_2.0: LogDrop<'_>)) -> [return: bb5, unwind: bb3]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:82: 32:83
    }

    bb2: {
        drop((_1.1: LogDrop<'_>)) -> bb6; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:82: 32:83
    }

    bb3 (cleanup): {
        drop(_3) -> bb8;                 // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:82: 32:83
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:1: 32:83
    }

    bb5: {
        drop(_3) -> [return: bb2, unwind: bb8]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:82: 32:83
    }

    bb6: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:83: 32:83
    }

    bb7 (cleanup): {
        drop((_2.0: LogDrop<'_>)) -> bb3; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:82: 32:83
    }

    bb8 (cleanup): {
        drop((_1.1: LogDrop<'_>)) -> bb4; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:32:82: 32:83
    }
}

fn bindings_with_let(_1: (LogDrop<'_>, LogDrop<'_>), _2: (LogDrop<'_>, LogDrop<'_>)) -> () {
    debug a => _1;                       // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:33:22: 33:23
    debug b => _2;                       // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:33:45: 33:46
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:33:68: 33:68
    let _3: (LogDrop<'_>, LogDrop<'_>);  // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:37:9: 37:15
    scope 1 {
        debug _temp1 => _3;              // in scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:37:9: 37:15
        let _4: LogDrop<'_>;             // in scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:38:10: 38:12
        scope 2 {
            debug _x => _4;              // in scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:38:10: 38:12
            let _5: (LogDrop<'_>, LogDrop<'_>); // in scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:40:9: 40:15
            scope 3 {
                debug _temp2 => _5;      // in scope 3 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:40:9: 40:15
                let _6: LogDrop<'_>;     // in scope 3 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:41:13: 41:15
                scope 4 {
                    debug _y => _6;      // in scope 4 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:41:13: 41:15
                }
            }
        }
    }

    bb0: {
        _3 = move _1;                    // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:37:18: 37:19
        _4 = move (_3.0: LogDrop<'_>);   // scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:38:10: 38:12
        _5 = move _2;                    // scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:40:18: 40:19
        _6 = move (_5.1: LogDrop<'_>);   // scope 3 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:41:13: 41:15
        drop(_6) -> [return: bb1, unwind: bb7]; // scope 3 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:42:1: 42:2
    }

    bb1: {
        drop((_5.0: LogDrop<'_>)) -> [return: bb5, unwind: bb3]; // scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:42:1: 42:2
    }

    bb2: {
        drop((_3.1: LogDrop<'_>)) -> bb6; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:42:1: 42:2
    }

    bb3 (cleanup): {
        drop(_4) -> bb8;                 // scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:42:1: 42:2
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:33:1: 42:2
    }

    bb5: {
        drop(_4) -> [return: bb2, unwind: bb8]; // scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:42:1: 42:2
    }

    bb6: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:42:2: 42:2
    }

    bb7 (cleanup): {
        drop((_5.0: LogDrop<'_>)) -> bb3; // scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:42:1: 42:2
    }

    bb8 (cleanup): {
        drop((_3.1: LogDrop<'_>)) -> bb4; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:42:1: 42:2
    }
}

fn test_drop_order(_1: i32, _2: for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>))) -> () {
    debug panic_on => _1;                // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:44:20: 44:28
    debug fun => _2;                     // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:44:35: 44:38
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:44:84: 44:84
    let _3: Context<'_>;                 // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:45:9: 45:16
    let mut _4: i32;                     // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:46:9: 46:17
    let mut _5: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:16: 47:41
    let _6: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:16: 47:41
    let _7: std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:17: 47:41
    let mut _8: std::vec::Vec<i32>;      // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:30: 47:40
    let mut _10: Context<'_>;            // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:49:26: 49:33
    let mut _12: Context<'_>;            // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:50:26: 50:33
    let mut _14: Context<'_>;            // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:51:28: 51:35
    let mut _16: Context<'_>;            // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:52:27: 52:34
    let mut _18: std::panic::AssertUnwindSafe<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 54:61]>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:35: 56:7
    let mut _19: [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 54:61]; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 56:6
    let mut _20: &for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)); // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 56:6
    let mut _21: i32;                    // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:57:8: 57:16
    let mut _22: bool;                   // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:58:9: 58:57
    let mut _23: bool;                   // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:58:17: 58:28
    let mut _24: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:58:17: 58:28
    let mut _25: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _26: bool;                   // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:60:9: 60:54
    let mut _27: bool;                   // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:60:17: 60:29
    let mut _28: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:60:17: 60:29
    let mut _29: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    let mut _30: (&std::vec::Vec<i32>, &[i32; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:15: 51:32
    let mut _31: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:16: 51:22
    let _32: &std::vec::Vec<i32>;        // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:16: 62:39
    let mut _33: &std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:17: 62:39
    let _34: std::cell::Ref<'_, std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:17: 62:39
    let mut _35: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:17: 62:39
    let mut _36: &[i32; 4];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:24: 51:31
    let mut _39: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:20: 53:46
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:21: 53:46
    let mut _41: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:22: 53:31
    let mut _42: &[i32; 4];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:35: 53:45
    let _44: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:21: 58:146
    let mut _45: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:54: 58:58
    let mut _46: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:60: 58:70
    let _47: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:60: 58:70
    let mut _48: &[i32; 4];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:72: 58:83
    let _49: &[i32; 4];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:72: 58:83
    let mut _50: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:85: 58:145
    let mut _51: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _52: &[&str];                // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
    let mut _53: &[&str; 1];             // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
    let _54: &[&str; 1];                 // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
    let mut _55: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _56: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
    let _57: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _61: &std::cell::RefCell<std::vec::Vec<i32>>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:45:9: 45:16
    scope 1 {
        debug context => _3;             // in scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:45:9: 45:16
        let _9: LogDrop<'_>;             // in scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:49:9: 49:12
        scope 2 {
            debug one => _9;             // in scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:49:9: 49:12
            let _11: LogDrop<'_>;        // in scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:50:9: 50:12
            scope 3 {
                debug two => _11;        // in scope 3 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:50:9: 50:12
                let _13: LogDrop<'_>;    // in scope 3 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:51:9: 51:14
                scope 4 {
                    debug three => _13;  // in scope 4 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:51:9: 51:14
                    let _15: LogDrop<'_>; // in scope 4 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:52:9: 52:13
                    scope 5 {
                        debug four => _15; // in scope 5 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:52:9: 52:13
                        let _17: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 5 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:9: 54:12
                        scope 6 {
                            debug res => _17; // in scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:9: 54:12
                            let _37: &std::vec::Vec<i32>; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:52:14: 52:22
                            let _38: &[i32; 4]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:52:24: 52:33
                            let mut _60: &[i32; 4]; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:24: 51:31
                            scope 7 {
                                debug left_val => _37; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:52:14: 52:22
                                debug right_val => _38; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:52:24: 52:33
                                let _43: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:54:25: 54:29
                                scope 8 {
                                    debug kind => _43; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:54:25: 54:29
                                    let mut _58: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
                                    let mut _59: &[&str; 1]; // in scope 8 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:46:9: 46:17
        _8 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:30: 47:40
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:30: 47:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = RefCell::<Vec<i32>>::new(move _8) -> bb2; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:17: 47:41
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:17: 47:29
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Vec<i32>) -> RefCell<Vec<i32>> {RefCell::<Vec<i32>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:16: 47:41
        _5 = _6;                         // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:47:16: 47:41
        _3 = Context::<'_> { panic_on: move _4, drops: move _5 }; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:45:19: 48:6
        _10 = _3;                        // scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:49:26: 49:33
        _9 = LogDrop::<'_>(const 1_i32, move _10); // scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:49:15: 49:34
        _12 = _3;                        // scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:50:26: 50:33
        _11 = LogDrop::<'_>(const 2_i32, move _12); // scope 2 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:50:15: 50:34
        _14 = _3;                        // scope 3 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:51:28: 51:35
        _13 = LogDrop::<'_>(const 3_i32, move _14); // scope 3 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:51:17: 51:36
        _16 = _3;                        // scope 4 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:52:27: 52:34
        _15 = LogDrop::<'_>(const 4_i32, move _16); // scope 4 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:52:16: 52:35
        _20 = &_2;                       // scope 5 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 56:6
        _19 = [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 54:61] { fun: move _20, three: move _13, four: move _15, two: move _11, one: move _9 }; // scope 5 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 56:6
                                         // closure
                                         // + def_id: DefId(0:20 ~ fn_arg_incomplete_pattern_drop_order[a6cd]::test_drop_order::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)), LogDrop<'_>, LogDrop<'_>, LogDrop<'_>, LogDrop<'_>),
                                         // ]
        _18 = AssertUnwindSafe::<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 54:61]>(move _19); // scope 5 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:35: 56:7
        _17 = catch_unwind::<AssertUnwindSafe<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 54:61]>, ()>(move _18) -> [return: bb3, unwind: bb22]; // scope 5 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:15: 56:8
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:15: 54:34
                                         // + literal: Const { ty: fn(AssertUnwindSafe<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 54:61]>) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<AssertUnwindSafe<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 54:61]>, ()>}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = _1;                        // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:57:8: 57:16
        switchInt(move _21) -> [0: bb4, otherwise: bb7]; // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:57:8: 57:21
    }

    bb4: {
        _24 = &_17;                      // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:58:17: 58:28
        _23 = Result::<(), Box<dyn Any + Send>>::is_ok(move _24) -> [return: bb5, unwind: bb21]; // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:58:17: 58:28
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:58:21: 58:26
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_ok}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = Not(move _23);             // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:58:9: 58:57
        switchInt(move _22) -> [0: bb10, otherwise: bb6]; // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:58:9: 58:57
    }

    bb6: {
        _25 = begin_panic::<&str>(const "should not have panicked") -> bb21; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:58:30: 58:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        _28 = &_17;                      // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:60:17: 60:29
        _27 = Result::<(), Box<dyn Any + Send>>::is_err(move _28) -> [return: bb8, unwind: bb21]; // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:60:17: 60:29
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:60:21: 60:27
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb8: {
        _26 = Not(move _27);             // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:60:9: 60:54
        switchInt(move _26) -> [0: bb10, otherwise: bb9]; // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:60:9: 60:54
    }

    bb9: {
        _29 = begin_panic::<&str>(const "should have panicked") -> bb21; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:60:31: 60:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        _61 = deref_copy (_3.1: &std::cell::RefCell<std::vec::Vec<i32>>); // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:17: 62:39
        _35 = _61;                       // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:17: 62:39
        _34 = RefCell::<Vec<i32>>::borrow(move _35) -> [return: bb11, unwind: bb21]; // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:17: 62:39
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:31: 62:37
                                         // + literal: Const { ty: for<'a> fn(&'a RefCell<Vec<i32>>) -> Ref<'a, Vec<i32>> {RefCell::<Vec<i32>>::borrow}, val: Value(<ZST>) }
    }

    bb11: {
        _33 = &_34;                      // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:17: 62:39
        _32 = <Ref<'_, Vec<i32>> as Deref>::deref(move _33) -> [return: bb12, unwind: bb20]; // scope 6 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:16: 62:39
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:16: 62:39
                                         // + literal: Const { ty: for<'a> fn(&'a Ref<'_, Vec<i32>>) -> &'a <Ref<'_, Vec<i32>> as Deref>::Target {<Ref<'_, Vec<i32>> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb12: {
        _31 = _32;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:16: 51:22
        _60 = const _;                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:24: 51:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:24: 51:31
                                         // + literal: Const { ty: &[i32; 4], val: Unevaluated(test_drop_order, [], Some(promoted[2])) }
        _36 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:24: 51:31
        _30 = (move _31, move _36);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:15: 51:32
        _37 = (_30.0: &std::vec::Vec<i32>); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:52:14: 52:22
        _38 = (_30.1: &[i32; 4]);        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:52:24: 52:33
        _41 = _37;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:22: 53:31
        _42 = _38;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:35: 53:45
        _40 = <Vec<i32> as PartialEq<[i32; 4]>>::eq(move _41, move _42) -> [return: bb13, unwind: bb20]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:21: 53:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:21: 53:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b [i32; 4]) -> bool {<Vec<i32> as PartialEq<[i32; 4]>>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _39 = Not(move _40);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:20: 53:46
        switchInt(move _39) -> [0: bb16, otherwise: bb14]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:53:20: 53:46
    }

    bb14: {
        _43 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:54:32: 54:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:54:32: 54:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:54: 58:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:54: 58:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _47 = _37;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:60: 58:70
        _46 = _47;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:60: 58:70
        _49 = _38;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:72: 58:83
        _48 = _49;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:72: 58:83
        _59 = const _;                   // scope 8 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(test_drop_order, [], Some(promoted[1])) }
        _54 = _59;                       // scope 8 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
        _53 = _54;                       // scope 8 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
        _52 = move _53 as &[&str] (Pointer(Unsize)); // scope 8 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
        _58 = const _;                   // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(test_drop_order, [], Some(promoted[0])) }
        _57 = _58;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
        _56 = _57;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
        _55 = move _56 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
        _51 = Arguments::<'_>::new_v1(move _52, move _55) -> [return: bb15, unwind: bb20]; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb15: {
        _50 = Option::<Arguments<'_>>::Some(move _51); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:85: 58:145
        _44 = core::panicking::assert_failed::<Vec<i32>, [i32; 4]>(move _45, move _46, move _48, move _50) -> bb20; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:21: 58:146
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:21: 58:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b [i32; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, [i32; 4]>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_34) -> [return: bb17, unwind: bb21]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:61:9: 61:10
    }

    bb17: {
        drop(_17) -> [return: bb18, unwind: bb22]; // scope 5 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:63:1: 63:2
    }

    bb18: {
        drop(_7) -> bb19;                // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:63:1: 63:2
    }

    bb19: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:63:2: 63:2
    }

    bb20 (cleanup): {
        drop(_34) -> bb21;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:61:9: 61:10
    }

    bb21 (cleanup): {
        drop(_17) -> bb22;               // scope 5 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:63:1: 63:2
    }

    bb22 (cleanup): {
        drop(_7) -> bb23;                // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:63:1: 63:2
    }

    bb23 (cleanup): {
        resume;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:44:1: 63:2
    }
}

promoted[0] in test_drop_order: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:58:114: 58:144
    }
}

promoted[1] in test_drop_order: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
    let mut _1: [&str; 1];               // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77

    bb0: {
        _1 = [const "incorrect drop order"]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:55: 62:77
    }
}

promoted[2] in test_drop_order: &[i32; 4] = {
    let mut _0: &[i32; 4];               // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:24: 51:31
    let mut _1: [i32; 4];                // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:41: 62:53

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:62:41: 62:53
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:24: 51:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:51:24: 51:31
    }
}

fn test_drop_order::{closure#0}(_1: [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 54:61]) -> () {
    debug fun => (*(_1.0: &for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)))); // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:44:35: 44:38
    debug three => (_1.1: LogDrop<'_>);  // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:51:9: 51:14
    debug four => (_1.2: LogDrop<'_>);   // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:52:9: 52:13
    debug two => (_1.3: LogDrop<'_>);    // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:50:9: 50:12
    debug one => (_1.4: LogDrop<'_>);    // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:49:9: 49:12
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:62: 54:62
    let _2: ();                          // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:9: 55:39
    let mut _3: for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)); // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:9: 55:12
    let mut _4: (LogDrop<'_>, LogDrop<'_>); // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:13: 55:26
    let mut _5: LogDrop<'_>;             // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:14: 55:19
    let mut _6: LogDrop<'_>;             // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:21: 55:25
    let mut _7: (LogDrop<'_>, LogDrop<'_>); // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:28: 55:38
    let mut _8: LogDrop<'_>;             // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:29: 55:32
    let mut _9: LogDrop<'_>;             // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:34: 55:37
    let mut _10: &for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)); // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:54:59: 56:6

    bb0: {
        _10 = deref_copy (_1.0: &for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>))); // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:9: 55:12
        _3 = (*_10);                     // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:9: 55:12
        _5 = move (_1.1: LogDrop<'_>);   // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:14: 55:19
        _6 = move (_1.2: LogDrop<'_>);   // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:21: 55:25
        _4 = (move _5, move _6);         // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:13: 55:26
        _8 = move (_1.3: LogDrop<'_>);   // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:29: 55:32
        _9 = move (_1.4: LogDrop<'_>);   // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:34: 55:37
        _7 = (move _8, move _9);         // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:28: 55:38
        _2 = move _3(move _4, move _7) -> bb1; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:55:9: 55:39
    }

    bb1: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:56:6: 56:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:65:11: 65:11
    let _1: ();                          // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:5: 66:65
    let mut _2: std::ops::RangeInclusive<i32>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:5: 66:12
    let mut _3: [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:22: 66:25]; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:22: 66:64
    let _4: ();                          // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:5: 67:64
    let mut _5: std::ops::RangeInclusive<i32>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:5: 67:12
    let mut _6: [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:22: 67:25]; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:22: 67:63
    let _7: ();                          // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:5: 68:68
    let mut _8: std::ops::RangeInclusive<i32>; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:5: 68:12
    let mut _9: [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:22: 68:25]; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:22: 68:67

    bb0: {
        _2 = RangeInclusive::<i32>::new(const 0_i32, const 4_i32) -> bb1; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:5: 66:12
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:6: 66:11
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <RangeInclusive<i32> as Iterator>::for_each::<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:22: 66:25]>(move _2, move _3) -> bb2; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:5: 66:65
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:13: 66:21
                                         // + literal: Const { ty: fn(RangeInclusive<i32>, [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:22: 66:25]) {<RangeInclusive<i32> as Iterator>::for_each::<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:22: 66:25]>}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = RangeInclusive::<i32>::new(const 0_i32, const 4_i32) -> bb3; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:5: 67:12
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:6: 67:11
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = <RangeInclusive<i32> as Iterator>::for_each::<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:22: 67:25]>(move _5, move _6) -> bb4; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:5: 67:64
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:13: 67:21
                                         // + literal: Const { ty: fn(RangeInclusive<i32>, [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:22: 67:25]) {<RangeInclusive<i32> as Iterator>::for_each::<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:22: 67:25]>}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = RangeInclusive::<i32>::new(const 0_i32, const 4_i32) -> bb5; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:5: 68:12
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:6: 68:11
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _7 = <RangeInclusive<i32> as Iterator>::for_each::<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:22: 68:25]>(move _8, move _9) -> bb6; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:5: 68:68
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:13: 68:21
                                         // + literal: Const { ty: fn(RangeInclusive<i32>, [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:22: 68:25]) {<RangeInclusive<i32> as Iterator>::for_each::<[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:22: 68:25]>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:69:2: 69:2
    }
}

fn main::{closure#0}(_1: &mut [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:22: 66:25], _2: i32) -> () {
    debug i => _2;                       // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:23: 66:24
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:26: 66:26
    let mut _3: i32;                     // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:42: 66:43
    let mut _4: for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)); // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:45: 66:63

    bb0: {
        _3 = _2;                         // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:42: 66:43
        _4 = bindings_in_params as for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)) (Pointer(ReifyFnPointer)); // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:45: 66:63
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:45: 66:63
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)) {bindings_in_params}, val: Value(<ZST>) }
        _0 = test_drop_order(move _3, move _4) -> bb1; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:26: 66:64
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:26: 66:41
                                         // + literal: Const { ty: fn(i32, for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>))) {test_drop_order}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:66:64: 66:64
    }
}

fn main::{closure#1}(_1: &mut [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:22: 67:25], _2: i32) -> () {
    debug i => _2;                       // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:23: 67:24
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:26: 67:26
    let mut _3: i32;                     // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:42: 67:43
    let mut _4: for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)); // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:45: 67:62

    bb0: {
        _3 = _2;                         // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:42: 67:43
        _4 = bindings_with_let as for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)) (Pointer(ReifyFnPointer)); // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:45: 67:62
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:45: 67:62
                                         // + literal: Const { ty: for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)) {bindings_with_let}, val: Value(<ZST>) }
        _0 = test_drop_order(move _3, move _4) -> bb1; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:26: 67:63
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:26: 67:41
                                         // + literal: Const { ty: fn(i32, for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>))) {test_drop_order}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:67:63: 67:63
    }
}

fn main::{closure#2}(_1: &mut [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:22: 68:25], _2: i32) -> () {
    debug i => _2;                       // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:23: 68:24
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:26: 68:26
    let mut _3: i32;                     // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:42: 68:43
    let mut _4: for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)); // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:45: 68:66
    let mut _5: [closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:45: 68:63]; // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:45: 68:66

    bb0: {
        _3 = _2;                         // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:42: 68:43
        _4 = move _5 as for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>)) (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:45: 68:66
        _0 = test_drop_order(move _3, move _4) -> bb1; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:26: 68:67
                                         // mir::Constant
                                         // + span: ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:26: 68:41
                                         // + literal: Const { ty: fn(i32, for<'a, 'b, 'c, 'd> fn((LogDrop<'a>, LogDrop<'b>), (LogDrop<'c>, LogDrop<'d>))) {test_drop_order}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:67: 68:67
    }
}

fn main::{closure#2}::{closure#0}(_1: &[closure@ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:45: 68:63], _2: (LogDrop<'_>, LogDrop<'_>), _3: (LogDrop<'_>, LogDrop<'_>)) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:64: 68:64
    let _4: LogDrop<'_>;                 // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:47: 68:49
    let _5: LogDrop<'_>;                 // in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:59: 68:61
    scope 1 {
        debug _x => _4;                  // in scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:47: 68:49
        debug _y => _5;                  // in scope 1 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:59: 68:61
    }

    bb0: {
        _4 = move (_2.0: LogDrop<'_>);   // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:47: 68:49
        _5 = move (_3.1: LogDrop<'_>);   // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:59: 68:61
        drop(_5) -> [return: bb1, unwind: bb7]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:65: 68:66
    }

    bb1: {
        drop((_3.0: LogDrop<'_>)) -> [return: bb5, unwind: bb3]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:65: 68:66
    }

    bb2: {
        drop((_2.1: LogDrop<'_>)) -> bb6; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:65: 68:66
    }

    bb3 (cleanup): {
        drop(_4) -> bb8;                 // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:65: 68:66
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:45: 68:66
    }

    bb5: {
        drop(_4) -> [return: bb2, unwind: bb8]; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:65: 68:66
    }

    bb6: {
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:66: 68:66
    }

    bb7 (cleanup): {
        drop((_3.0: LogDrop<'_>)) -> bb3; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:65: 68:66
    }

    bb8 (cleanup): {
        drop((_2.1: LogDrop<'_>)) -> bb4; // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:68:65: 68:66
    }
}

fn LogDrop(_1: i32, _2: Context<'_>) -> LogDrop<'_> {
    let mut _0: LogDrop<'_>;             // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:9:1: 9:19

    bb0: {
        _0 = LogDrop::<'_>(move _1, move _2); // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:9:1: 9:19
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:9:1: 9:19
    }
}

// MIR FOR CTFE
fn LogDrop(_1: i32, _2: Context<'_>) -> LogDrop<'_> {
    let mut _0: LogDrop<'_>;             // return place in scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:9:1: 9:19

    bb0: {
        _0 = LogDrop::<'_>(move _1, move _2); // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:9:1: 9:19
        return;                          // scope 0 at ui/binding/fn-arg-incomplete-pattern-drop-order.rs:9:1: 9:19
    }
}
