// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_generic(_1: T, _2: F) -> () {
    debug expected => _1;                // in scope 0 at ui/binding/expr-match-generic-unique2.rs:3:30: 3:38
    debug eq => _2;                      // in scope 0 at ui/binding/expr-match-generic-unique2.rs:3:43: 3:45
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic-unique2.rs:3:50: 3:50
    let _3: T;                           // in scope 0 at ui/binding/expr-match-generic-unique2.rs:4:9: 4:15
    let mut _4: &T;                      // in scope 0 at ui/binding/expr-match-generic-unique2.rs:5:17: 5:33
    let mut _5: bool;                    // in scope 0 at ui/binding/expr-match-generic-unique2.rs:8:5: 8:34
    let mut _6: bool;                    // in scope 0 at ui/binding/expr-match-generic-unique2.rs:8:13: 8:33
    let mut _7: F;                       // in scope 0 at ui/binding/expr-match-generic-unique2.rs:8:13: 8:15
    let mut _8: (T, T);                  // in scope 0 at ui/binding/expr-match-generic-unique2.rs:8:13: 8:33
    let mut _9: T;                       // in scope 0 at ui/binding/expr-match-generic-unique2.rs:8:16: 8:24
    let mut _10: T;                      // in scope 0 at ui/binding/expr-match-generic-unique2.rs:8:26: 8:32
    let mut _11: !;                      // in scope 0 at ui/binding/expr-match-generic-unique2.rs:8:5: 8:34
    let mut _12: bool;                   // in scope 0 at ui/binding/expr-match-generic-unique2.rs:9:1: 9:2
    let mut _13: bool;                   // in scope 0 at ui/binding/expr-match-generic-unique2.rs:9:1: 9:2
    scope 1 {
        debug actual => _3;              // in scope 1 at ui/binding/expr-match-generic-unique2.rs:4:9: 4:15
    }

    bb0: {
        _13 = const false;               // scope 0 at ui/binding/expr-match-generic-unique2.rs:4:9: 4:15
        _12 = const false;               // scope 0 at ui/binding/expr-match-generic-unique2.rs:4:9: 4:15
        _13 = const true;                // scope 0 at ui/binding/expr-match-generic-unique2.rs:4:9: 4:15
        _12 = const true;                // scope 0 at ui/binding/expr-match-generic-unique2.rs:4:9: 4:15
        _4 = &_1;                        // scope 0 at ui/binding/expr-match-generic-unique2.rs:5:17: 5:33
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb8]; // scope 0 at ui/binding/expr-match-generic-unique2.rs:5:17: 5:33
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique2.rs:5:26: 5:31
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = const false;               // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:13: 8:15
        _7 = move _2;                    // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:13: 8:15
        _13 = const false;               // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:16: 8:24
        _9 = move _1;                    // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:16: 8:24
        _10 = move _3;                   // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:26: 8:32
        _8 = (move _9, move _10);        // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:13: 8:33
        _6 = <F as FnOnce<(T, T)>>::call_once(move _7, move _8) -> [return: bb2, unwind: bb8]; // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:13: 8:33
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique2.rs:8:13: 8:15
                                         // + literal: Const { ty: extern "rust-call" fn(F, (T, T)) -> <F as FnOnce<(T, T)>>::Output {<F as FnOnce<(T, T)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Not(move _6);               // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:5: 8:34
        switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:5: 8:34
    }

    bb3: {
        _11 = core::panicking::panic(const "assertion failed: eq(expected, actual)") -> bb8; // scope 1 at ui/binding/expr-match-generic-unique2.rs:8:5: 8:34
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique2.rs:8:5: 8:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        return;                          // scope 0 at ui/binding/expr-match-generic-unique2.rs:9:2: 9:2
    }

    bb5 (cleanup): {
        switchInt(_13) -> [0: bb6, otherwise: bb9]; // scope 0 at ui/binding/expr-match-generic-unique2.rs:9:1: 9:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/binding/expr-match-generic-unique2.rs:3:1: 9:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/binding/expr-match-generic-unique2.rs:9:1: 9:2
    }

    bb8 (cleanup): {
        switchInt(_12) -> [0: bb5, otherwise: bb7]; // scope 0 at ui/binding/expr-match-generic-unique2.rs:9:1: 9:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/binding/expr-match-generic-unique2.rs:9:1: 9:2
    }
}

fn test_vec() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic-unique2.rs:11:15: 11:15
    let _1: ();                          // in scope 0 at ui/binding/expr-match-generic-unique2.rs:13:5: 13:60
    let mut _2: std::boxed::Box<isize>;  // in scope 0 at ui/binding/expr-match-generic-unique2.rs:13:35: 13:46

    bb0: {
        _2 = Box::<isize>::new(const 1_isize) -> bb1; // scope 0 at ui/binding/expr-match-generic-unique2.rs:13:35: 13:46
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique2.rs:13:35: 13:43
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = test_generic::<Box<isize>, fn(Box<isize>, Box<isize>) -> bool {compare_box}>(move _2, compare_box) -> bb2; // scope 0 at ui/binding/expr-match-generic-unique2.rs:13:5: 13:60
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique2.rs:13:5: 13:34
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<isize>, fn(Box<isize>, Box<isize>) -> bool {compare_box}) {test_generic::<Box<isize>, fn(Box<isize>, Box<isize>) -> bool {compare_box}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique2.rs:13:48: 13:59
                                         // + literal: Const { ty: fn(Box<isize>, Box<isize>) -> bool {compare_box}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/binding/expr-match-generic-unique2.rs:14:2: 14:2
    }
}

fn compare_box(_1: Box<isize>, _2: Box<isize>) -> bool {
    debug v1 => _1;                      // in scope 0 at ui/binding/expr-match-generic-unique2.rs:12:20: 12:22
    debug v2 => _2;                      // in scope 0 at ui/binding/expr-match-generic-unique2.rs:12:36: 12:38
    let mut _0: bool;                    // return place in scope 0 at ui/binding/expr-match-generic-unique2.rs:12:55: 12:59
    let mut _3: &std::boxed::Box<isize>; // in scope 0 at ui/binding/expr-match-generic-unique2.rs:12:69: 12:71
    let mut _4: &std::boxed::Box<isize>; // in scope 0 at ui/binding/expr-match-generic-unique2.rs:12:75: 12:77

    bb0: {
        _3 = &_1;                        // scope 0 at ui/binding/expr-match-generic-unique2.rs:12:69: 12:71
        _4 = &_2;                        // scope 0 at ui/binding/expr-match-generic-unique2.rs:12:75: 12:77
        _0 = <Box<isize> as PartialEq>::eq(move _3, move _4) -> [return: bb1, unwind: bb4]; // scope 0 at ui/binding/expr-match-generic-unique2.rs:12:69: 12:77
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique2.rs:12:69: 12:77
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Box<isize>, &'b Box<isize>) -> bool {<Box<isize> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_2) -> [return: bb2, unwind: bb5]; // scope 0 at ui/binding/expr-match-generic-unique2.rs:12:79: 12:80
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/binding/expr-match-generic-unique2.rs:12:79: 12:80
    }

    bb3: {
        return;                          // scope 0 at ui/binding/expr-match-generic-unique2.rs:12:80: 12:80
    }

    bb4 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/binding/expr-match-generic-unique2.rs:12:79: 12:80
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/binding/expr-match-generic-unique2.rs:12:79: 12:80
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/binding/expr-match-generic-unique2.rs:12:5: 12:80
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic-unique2.rs:16:15: 16:15
    let _1: ();                          // in scope 0 at ui/binding/expr-match-generic-unique2.rs:16:17: 16:27

    bb0: {
        _1 = test_vec() -> bb1;          // scope 0 at ui/binding/expr-match-generic-unique2.rs:16:17: 16:27
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique2.rs:16:17: 16:25
                                         // + literal: Const { ty: fn() {test_vec}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/expr-match-generic-unique2.rs:16:30: 16:30
    }
}
