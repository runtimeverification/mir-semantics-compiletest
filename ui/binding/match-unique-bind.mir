// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<i32>;
    let _2: i32;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let mut _6: &[core::fmt::rt::Argument<'_>];
    let _7: &[core::fmt::rt::Argument<'_>; 1];
    let _8: [core::fmt::rt::Argument<'_>; 1];
    let mut _9: core::fmt::rt::Argument<'_>;
    let _10: &i32;
    let mut _11: (&i32, &i32);
    let mut _12: &i32;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: i32;
    let mut _18: i32;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _24: *const i32;
    let mut _25: *const ();
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: usize;
    let mut _30: bool;
    scope 1 {
        debug x => _2;
        let _13: &i32;
        let _14: &i32;
        let mut _22: &i32;
        let mut _23: &[&str; 2];
        scope 2 {
            debug left_val => _13;
            debug right_val => _14;
            let _19: core::panicking::AssertKind;
            scope 3 {
                debug kind => _19;
            }
        }
    }

    bb0: {
        _1 = Box::<i32>::new(const 100_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _24 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _25 = _24 as *const () (PtrToPtr);
        _26 = _25 as usize (Transmute);
        _27 = AlignOf(i32);
        _28 = Sub(_27, const 1_usize);
        _29 = BitAnd(_26, _28);
        _30 = Eq(_29, const 0_usize);
        assert(_30, "misaligned pointer dereference: address must be a multiple of {} but is {}", _27, _26) -> [success: bb10, unwind unreachable];
    }

    bb2: {
        _8 = [move _9];
        _7 = &_8;
        _6 = _7 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_v1(move _5, move _6) -> [return: bb3, unwind: bb8];
    }

    bb3: {
        _3 = _print(move _4) -> [return: bb4, unwind: bb8];
    }

    bb4: {
        _12 = &_2;
        _22 = const _;
        _11 = (move _12, _22);
        _13 = (_11.0: &i32);
        _14 = (_11.1: &i32);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<i32, i32>(move _19, _13, _14, move _21) -> bb8;
    }

    bb6: {
        drop(_1) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb9, unwind terminate];
    }

    bb9 (cleanup): {
        resume;
    }

    bb10: {
        _2 = (*_24);
        _23 = const _;
        _5 = _23 as &[&str] (Pointer(Unsize));
        _10 = &_2;
        _9 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_10) -> [return: bb2, unwind: bb8];
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 100_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
