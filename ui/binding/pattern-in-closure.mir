// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/pattern-in-closure.rs:9:15: 9:15
    let _1: [closure@ui/binding/pattern-in-closure.rs:10:13: 10:37]; // in scope 0 at ui/binding/pattern-in-closure.rs:10:9: 10:10
    let _3: ();                          // in scope 0 at ui/binding/pattern-in-closure.rs:12:5: 12:14
    let mut _4: &[closure@ui/binding/pattern-in-closure.rs:10:13: 10:37]; // in scope 0 at ui/binding/pattern-in-closure.rs:12:5: 12:6
    let mut _5: ((isize, isize),);       // in scope 0 at ui/binding/pattern-in-closure.rs:12:5: 12:14
    let mut _6: (isize, isize);          // in scope 0 at ui/binding/pattern-in-closure.rs:12:7: 12:13
    let _7: ();                          // in scope 0 at ui/binding/pattern-in-closure.rs:13:5: 13:26
    let mut _8: &[closure@ui/binding/pattern-in-closure.rs:11:13: 11:39]; // in scope 0 at ui/binding/pattern-in-closure.rs:13:5: 13:6
    let mut _9: (Foo,);                  // in scope 0 at ui/binding/pattern-in-closure.rs:13:5: 13:26
    let mut _10: Foo;                    // in scope 0 at ui/binding/pattern-in-closure.rs:13:7: 13:25
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/binding/pattern-in-closure.rs:10:9: 10:10
        let _2: [closure@ui/binding/pattern-in-closure.rs:11:13: 11:39]; // in scope 1 at ui/binding/pattern-in-closure.rs:11:9: 11:10
        scope 2 {
            debug g => _2;               // in scope 2 at ui/binding/pattern-in-closure.rs:11:9: 11:10
        }
    }

    bb0: {
        _4 = &_1;                        // scope 2 at ui/binding/pattern-in-closure.rs:12:5: 12:6
        _6 = const (2_isize, 3_isize);   // scope 2 at ui/binding/pattern-in-closure.rs:12:7: 12:13
        _5 = (move _6,);                 // scope 2 at ui/binding/pattern-in-closure.rs:12:5: 12:14
        _3 = <[closure@ui/binding/pattern-in-closure.rs:10:13: 10:37] as Fn<((isize, isize),)>>::call(move _4, move _5) -> bb1; // scope 2 at ui/binding/pattern-in-closure.rs:12:5: 12:14
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:12:5: 12:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/binding/pattern-in-closure.rs:10:13: 10:37], ((isize, isize),)) -> <[closure@ui/binding/pattern-in-closure.rs:10:13: 10:37] as FnOnce<((isize, isize),)>>::Output {<[closure@ui/binding/pattern-in-closure.rs:10:13: 10:37] as Fn<((isize, isize),)>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_2;                        // scope 2 at ui/binding/pattern-in-closure.rs:13:5: 13:6
        _10 = Foo { x: const 1_isize, y: const 2_isize }; // scope 2 at ui/binding/pattern-in-closure.rs:13:7: 13:25
        _9 = (move _10,);                // scope 2 at ui/binding/pattern-in-closure.rs:13:5: 13:26
        _7 = <[closure@ui/binding/pattern-in-closure.rs:11:13: 11:39] as Fn<(Foo,)>>::call(move _8, move _9) -> bb2; // scope 2 at ui/binding/pattern-in-closure.rs:13:5: 13:26
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:13:5: 13:6
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/binding/pattern-in-closure.rs:11:13: 11:39], (Foo,)) -> <[closure@ui/binding/pattern-in-closure.rs:11:13: 11:39] as FnOnce<(Foo,)>>::Output {<[closure@ui/binding/pattern-in-closure.rs:11:13: 11:39] as Fn<(Foo,)>>::call}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/binding/pattern-in-closure.rs:14:2: 14:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/binding/pattern-in-closure.rs:10:13: 10:37], _2: (isize, isize)) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/pattern-in-closure.rs:10:38: 10:38
    let _3: isize;                       // in scope 0 at ui/binding/pattern-in-closure.rs:10:15: 10:16
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/binding/pattern-in-closure.rs:10:47: 10:51
    let mut _7: &[&str; 2];              // in scope 0 at ui/binding/pattern-in-closure.rs:10:47: 10:51
    let _8: &[&str; 2];                  // in scope 0 at ui/binding/pattern-in-closure.rs:10:47: 10:51
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/pattern-in-closure.rs:10:53: 10:58
    let mut _14: &isize;                 // in scope 0 at ui/binding/pattern-in-closure.rs:10:53: 10:58
    let _15: &isize;                     // in scope 0 at ui/binding/pattern-in-closure.rs:10:53: 10:58
    let _16: isize;                      // in scope 0 at ui/binding/pattern-in-closure.rs:10:53: 10:58
    let mut _17: isize;                  // in scope 0 at ui/binding/pattern-in-closure.rs:10:53: 10:54
    let mut _18: (isize, bool);          // in scope 0 at ui/binding/pattern-in-closure.rs:10:53: 10:58
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/binding/pattern-in-closure.rs:10:15: 10:16
        let mut _19: &[&str; 2];         // in scope 1 at ui/binding/pattern-in-closure.rs:10:47: 10:51
    }

    bb0: {
        _3 = (_2.0: isize);              // scope 0 at ui/binding/pattern-in-closure.rs:10:15: 10:16
        _19 = const _;                   // scope 1 at ui/binding/pattern-in-closure.rs:10:47: 10:51
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:10:47: 10:51
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _8 = _19;                        // scope 1 at ui/binding/pattern-in-closure.rs:10:47: 10:51
        _7 = _8;                         // scope 1 at ui/binding/pattern-in-closure.rs:10:47: 10:51
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/binding/pattern-in-closure.rs:10:47: 10:51
        _17 = _3;                        // scope 1 at ui/binding/pattern-in-closure.rs:10:53: 10:54
        _18 = CheckedAdd(_17, const 1_isize); // scope 1 at ui/binding/pattern-in-closure.rs:10:53: 10:58
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", move _17, const 1_isize) -> bb1; // scope 1 at ui/binding/pattern-in-closure.rs:10:53: 10:58
    }

    bb1: {
        _16 = move (_18.0: isize);       // scope 1 at ui/binding/pattern-in-closure.rs:10:53: 10:58
        _15 = &_16;                      // scope 1 at ui/binding/pattern-in-closure.rs:10:53: 10:58
        _14 = _15;                       // scope 1 at ui/binding/pattern-in-closure.rs:10:53: 10:58
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _14) -> bb2; // scope 1 at ui/binding/pattern-in-closure.rs:10:53: 10:58
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:10:53: 10:58
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _print(move _5) -> bb4;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/binding/pattern-in-closure.rs:10:59: 10:59
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/pattern-in-closure.rs:10:47: 10:51
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/pattern-in-closure.rs:10:47: 10:51

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binding/pattern-in-closure.rs:10:47: 10:51
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:10:47: 10:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:10:47: 10:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/pattern-in-closure.rs:10:47: 10:51
        return;                          // scope 0 at ui/binding/pattern-in-closure.rs:10:47: 10:51
    }
}

fn main::{closure#1}(_1: &[closure@ui/binding/pattern-in-closure.rs:11:13: 11:39], _2: Foo) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/pattern-in-closure.rs:11:40: 11:40
    let _3: isize;                       // in scope 0 at ui/binding/pattern-in-closure.rs:11:23: 11:24
    let _4: isize;                       // in scope 0 at ui/binding/pattern-in-closure.rs:11:29: 11:31
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/binding/pattern-in-closure.rs:11:49: 11:53
    let mut _8: &[&str; 2];              // in scope 0 at ui/binding/pattern-in-closure.rs:11:49: 11:53
    let _9: &[&str; 2];                  // in scope 0 at ui/binding/pattern-in-closure.rs:11:49: 11:53
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _13: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _14: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/pattern-in-closure.rs:11:55: 11:60
    let mut _15: &isize;                 // in scope 0 at ui/binding/pattern-in-closure.rs:11:55: 11:60
    let _16: &isize;                     // in scope 0 at ui/binding/pattern-in-closure.rs:11:55: 11:60
    let _17: isize;                      // in scope 0 at ui/binding/pattern-in-closure.rs:11:55: 11:60
    let mut _18: isize;                  // in scope 0 at ui/binding/pattern-in-closure.rs:11:55: 11:56
    let mut _19: (isize, bool);          // in scope 0 at ui/binding/pattern-in-closure.rs:11:55: 11:60
    scope 1 {
        debug x => _3;                   // in scope 1 at ui/binding/pattern-in-closure.rs:11:23: 11:24
        debug _y => _4;                  // in scope 1 at ui/binding/pattern-in-closure.rs:11:29: 11:31
        let mut _20: &[&str; 2];         // in scope 1 at ui/binding/pattern-in-closure.rs:11:49: 11:53
    }

    bb0: {
        _3 = (_2.0: isize);              // scope 0 at ui/binding/pattern-in-closure.rs:11:23: 11:24
        _4 = (_2.1: isize);              // scope 0 at ui/binding/pattern-in-closure.rs:11:29: 11:31
        _20 = const _;                   // scope 1 at ui/binding/pattern-in-closure.rs:11:49: 11:53
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:11:49: 11:53
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#1}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _9 = _20;                        // scope 1 at ui/binding/pattern-in-closure.rs:11:49: 11:53
        _8 = _9;                         // scope 1 at ui/binding/pattern-in-closure.rs:11:49: 11:53
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 1 at ui/binding/pattern-in-closure.rs:11:49: 11:53
        _18 = _3;                        // scope 1 at ui/binding/pattern-in-closure.rs:11:55: 11:56
        _19 = CheckedAdd(_18, const 1_isize); // scope 1 at ui/binding/pattern-in-closure.rs:11:55: 11:60
        assert(!move (_19.1: bool), "attempt to compute `{} + {}`, which would overflow", move _18, const 1_isize) -> bb1; // scope 1 at ui/binding/pattern-in-closure.rs:11:55: 11:60
    }

    bb1: {
        _17 = move (_19.0: isize);       // scope 1 at ui/binding/pattern-in-closure.rs:11:55: 11:60
        _16 = &_17;                      // scope 1 at ui/binding/pattern-in-closure.rs:11:55: 11:60
        _15 = _16;                       // scope 1 at ui/binding/pattern-in-closure.rs:11:55: 11:60
        _14 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _15) -> bb2; // scope 1 at ui/binding/pattern-in-closure.rs:11:55: 11:60
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:11:55: 11:60
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = [move _14];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _12 = &_13;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb3; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = _print(move _6) -> bb4;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/binding/pattern-in-closure.rs:11:61: 11:61
    }
}

promoted[0] in main::{closure#1}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/pattern-in-closure.rs:11:49: 11:53
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/pattern-in-closure.rs:11:49: 11:53

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binding/pattern-in-closure.rs:11:49: 11:53
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:11:49: 11:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/pattern-in-closure.rs:11:49: 11:53
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/pattern-in-closure.rs:11:49: 11:53
        return;                          // scope 0 at ui/binding/pattern-in-closure.rs:11:49: 11:53
    }
}
