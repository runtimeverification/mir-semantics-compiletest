// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn select(_1: &Option<isize>, _2: &Option<isize>) -> &Option<isize> {
    debug x => _1;
    debug y => _2;
    let mut _0: &std::option::Option<isize>;
    let mut _3: (&std::option::Option<isize>, &std::option::Option<isize>);
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: &std::option::Option<isize>;
    let mut _7: &std::option::Option<isize>;

    bb0: {
        _3 = (_1, _2);
        _6 = deref_copy (_3.0: &std::option::Option<isize>);
        _5 = discriminant((*_6));
        switchInt(move _5) -> [0: bb1, 1: bb5, otherwise: bb3];
    }

    bb1: {
        _7 = deref_copy (_3.1: &std::option::Option<isize>);
        _4 = discriminant((*_7));
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _0 = _2;
        goto -> bb6;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = _1;
        goto -> bb6;
    }

    bb5: {
        _0 = _1;
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<isize>;
    let mut _3: (&isize, &isize);
    let mut _4: &isize;
    let _5: isize;
    let mut _6: std::option::Option<isize>;
    let mut _7: &std::option::Option<isize>;
    let _8: &std::option::Option<isize>;
    let _9: &std::option::Option<isize>;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: isize;
    let mut _15: isize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: std::option::Option<isize>;
        scope 2 {
            debug y => _2;
            let _10: &isize;
            let _11: &isize;
            let mut _19: &isize;
            scope 3 {
                debug left_val => _10;
                debug right_val => _11;
                let _16: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _16;
                }
            }
        }
    }

    bb0: {
        _1 = Option::<isize>::None;
        _2 = Option::<isize>::Some(const 3_isize);
        _8 = &_1;
        _9 = &_2;
        _7 = select(_8, _9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = (*_7);
        _5 = Option::<isize>::unwrap(move _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = &_5;
        _19 = const _;
        _3 = (move _4, _19);
        _10 = (_3.0: &isize);
        _11 = (_3.1: &isize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<isize, isize>(move _16, _10, _11, move _18) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 3_isize;
        _0 = &_1;
        return;
    }
}
