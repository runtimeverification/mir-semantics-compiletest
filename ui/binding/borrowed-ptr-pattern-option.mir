// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn select(_1: &Option<isize>, _2: &Option<isize>) -> &Option<isize> {
    debug x => _1;                       // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:3:15: 3:16
    debug y => _2;                       // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:3:37: 3:38
    let mut _0: &std::option::Option<isize>; // return place in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:3:62: 3:79
    let mut _3: (&std::option::Option<isize>, &std::option::Option<isize>); // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:11: 4:17
    let mut _4: &std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:12: 4:13
    let mut _5: &std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:15: 4:16
    let mut _6: isize;                   // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:5:18: 5:22
    let mut _7: isize;                   // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:5:11: 5:15
    let mut _8: &std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:11: 4:17
    let mut _9: &std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:11: 4:17

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:12: 4:13
        _5 = _2;                         // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:15: 4:16
        _3 = (move _4, move _5);         // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:11: 4:17
        _8 = deref_copy (_3.0: &std::option::Option<isize>); // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:11: 4:17
        _7 = discriminant((*_8));        // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:11: 4:17
        switchInt(move _7) -> [0: bb1, 1: bb5, otherwise: bb3]; // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:5: 4:17
    }

    bb1: {
        _9 = deref_copy (_3.1: &std::option::Option<isize>); // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:11: 4:17
        _6 = discriminant((*_9));        // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:11: 4:17
        switchInt(move _6) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:5: 4:17
    }

    bb2: {
        _0 = _2;                         // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:7:30: 7:31
        goto -> bb6;                     // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:7:30: 7:31
    }

    bb3: {
        unreachable;                     // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:4:11: 4:17
    }

    bb4: {
        _0 = _1;                         // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:5:27: 5:28
        goto -> bb6;                     // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:5:27: 5:28
    }

    bb5: {
        _0 = _1;                         // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:6:26: 6:27
        goto -> bb6;                     // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:6:26: 6:27
    }

    bb6: {
        return;                          // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:9:2: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:11:15: 11:15
    let _1: std::option::Option<isize>;  // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:12:9: 12:10
    let mut _3: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _5: isize;                       // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:14:16: 14:39
    let mut _6: std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:14:16: 14:39
    let mut _7: &std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:14:16: 14:30
    let mut _8: &std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:14:23: 14:25
    let _9: &std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:14:23: 14:25
    let mut _10: &std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:14:27: 14:29
    let _11: &std::option::Option<isize>; // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:14:27: 14:29
    let mut _12: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _17: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _18: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _20: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _21: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _22: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _23: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _24: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _25: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/binding/borrowed-ptr-pattern-option.rs:12:9: 12:10
        let _2: std::option::Option<isize>; // in scope 1 at ui/binding/borrowed-ptr-pattern-option.rs:13:9: 13:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/binding/borrowed-ptr-pattern-option.rs:13:9: 13:10
            let _13: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _14: &isize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _27: &isize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _13;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _14;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _19: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _19;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = Option::<isize>::None;      // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:12:13: 12:17
        _2 = Option::<isize>::Some(const 3_isize); // scope 1 at ui/binding/borrowed-ptr-pattern-option.rs:13:13: 13:20
        _9 = &_1;                        // scope 2 at ui/binding/borrowed-ptr-pattern-option.rs:14:23: 14:25
        _8 = _9;                         // scope 2 at ui/binding/borrowed-ptr-pattern-option.rs:14:23: 14:25
        _11 = &_2;                       // scope 2 at ui/binding/borrowed-ptr-pattern-option.rs:14:27: 14:29
        _10 = _11;                       // scope 2 at ui/binding/borrowed-ptr-pattern-option.rs:14:27: 14:29
        _7 = select(move _8, move _10) -> bb1; // scope 2 at ui/binding/borrowed-ptr-pattern-option.rs:14:16: 14:30
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-option.rs:14:16: 14:22
                                         // + literal: Const { ty: for<'r> fn(&'r Option<isize>, &'r Option<isize>) -> &'r Option<isize> {select}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = (*_7);                      // scope 2 at ui/binding/borrowed-ptr-pattern-option.rs:14:16: 14:39
        _5 = Option::<isize>::unwrap(move _6) -> bb2; // scope 2 at ui/binding/borrowed-ptr-pattern-option.rs:14:16: 14:39
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-option.rs:14:31: 14:37
                                         // + literal: Const { ty: fn(Option<isize>) -> isize {Option::<isize>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &_5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _27 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _27;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _12);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _13 = (_3.0: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _14 = (_3.1: &isize);            // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _17 = (*_13);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _18 = const 3_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _16 = Eq(move _17, move _18);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _15 = Not(move _16);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _15) -> [0: bb4, otherwise: bb3]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _19 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _23 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _14;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _26 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _20 = core::panicking::assert_failed::<isize, isize>(move _21, move _22, move _24, move _26); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:15:2: 15:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:14:41: 14:42

    bb0: {
        _1 = const 3_isize;              // scope 0 at ui/binding/borrowed-ptr-pattern-option.rs:14:41: 14:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
