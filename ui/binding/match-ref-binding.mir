// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn destructure(_1: Option<isize>) -> isize {
    debug x => _1;
    let mut _0: isize;
    let mut _2: isize;
    let _3: &isize;
    scope 1 {
        debug v => _3;
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = &((_1 as Some).0: isize);
        _0 = (*_3);
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _0 = const 0_isize;
        goto -> bb4;
    }

    bb4: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: std::option::Option<isize>;
    let _5: &isize;
    let _6: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: &isize;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }

    bb0: {
        _4 = Option::<isize>::Some(const 22_isize);
        _3 = destructure(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _14 = const _;
        _1 = (move _2, _14);
        _5 = (_1.0: &isize);
        _6 = (_1.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 22_isize;
        _0 = &_1;
        return;
    }
}
