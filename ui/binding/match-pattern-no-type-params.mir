// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: maybe<isize>) -> () {
    debug x => _1;
    let mut _0: ();
    let mut _2: isize;
    let _3: ();
    let mut _4: std::fmt::Arguments<'_>;
    let mut _5: &[&str];
    let _6: isize;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _11: &[&str; 1];
    scope 1 {
        debug _a => _6;
        let mut _10: &[&str; 1];
    }

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = ((_1 as just).0: isize);
        _10 = const _;
        _9 = _10 as &[&str] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_const(move _9) -> [return: bb5, unwind continue];
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _11 = const _;
        _5 = _11 as &[&str] (Pointer(Unsize));
        _4 = Arguments::<'_>::new_const(move _5) -> [return: bb4, unwind continue];
    }

    bb4: {
        _3 = _print(move _4) -> [return: bb6, unwind continue];
    }

    bb5: {
        _7 = _print(move _8) -> [return: bb6, unwind continue];
    }

    bb6: {
        return;
    }
}

promoted[0] in foo: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "B\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in foo: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "A\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();

    bb0: {
        return;
    }
}

fn maybe::just(_1: T) -> maybe<T> {
    let mut _0: maybe<T>;

    bb0: {
        _0 = maybe::<T>::just(move _1);
        return;
    }
}

// MIR FOR CTFE
fn maybe::just(_1: T) -> maybe<T> {
    let mut _0: maybe<T>;

    bb0: {
        _0 = maybe::<T>::just(move _1);
        return;
    }
}
