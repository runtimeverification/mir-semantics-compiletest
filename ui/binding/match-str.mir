// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-str.rs:7:15: 7:15
    let mut _1: &str;                    // in scope 0 at ui/binding/match-str.rs:8:11: 8:17
    let mut _2: bool;                    // in scope 0 at ui/binding/match-str.rs:8:20: 8:30
    let mut _3: bool;                    // in scope 0 at ui/binding/match-str.rs:8:44: 8:50
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _5: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _6: main::t;                 // in scope 0 at ui/binding/match-str.rs:13:11: 13:38
    let mut _7: std::string::String;     // in scope 0 at ui/binding/match-str.rs:13:19: 13:37
    let mut _8: &str;                    // in scope 0 at ui/binding/match-str.rs:13:19: 13:37
    let _9: &str;                        // in scope 0 at ui/binding/match-str.rs:13:19: 13:25
    let mut _10: isize;                  // in scope 0 at ui/binding/match-str.rs:14:7: 14:14
    let mut _11: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let _12: &std::string::String;       // in scope 0 at ui/binding/match-str.rs:15:15: 15:20
    let _13: &&std::string::String;      // in scope 0 at ui/binding/match-str.rs:15:15: 15:20
    let mut _14: bool;                   // in scope 0 at ui/binding/match-str.rs:15:25: 15:39
    let mut _15: &&str;                  // in scope 0 at ui/binding/match-str.rs:15:25: 15:31
    let mut _16: &&str;                  // in scope 0 at ui/binding/match-str.rs:15:35: 15:39
    let _17: &str;                       // in scope 0 at ui/binding/match-str.rs:15:35: 15:39
    let _18: &str;                       // in scope 0 at ui/binding/match-str.rs:15:36: 15:39
    let mut _19: &std::string::String;   // in scope 0 at ui/binding/match-str.rs:15:37: 15:39
    let mut _20: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let _21: &std::string::String;       // in scope 0 at ui/binding/match-str.rs:16:15: 16:20
    let _22: &&std::string::String;      // in scope 0 at ui/binding/match-str.rs:16:15: 16:20
    let mut _23: bool;                   // in scope 0 at ui/binding/match-str.rs:16:25: 16:39
    let mut _24: &&str;                  // in scope 0 at ui/binding/match-str.rs:16:25: 16:31
    let mut _25: &&str;                  // in scope 0 at ui/binding/match-str.rs:16:35: 16:39
    let _26: &str;                       // in scope 0 at ui/binding/match-str.rs:16:35: 16:39
    let _27: &str;                       // in scope 0 at ui/binding/match-str.rs:16:36: 16:39
    let mut _28: &std::string::String;   // in scope 0 at ui/binding/match-str.rs:16:37: 16:39
    let mut _29: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let _30: i32;                        // in scope 0 at ui/binding/match-str.rs:20:9: 20:10
    let mut _31: &str;                   // in scope 0 at ui/binding/match-str.rs:20:19: 20:22
    let mut _32: bool;                   // in scope 0 at ui/binding/match-str.rs:20:25: 20:28
    let mut _33: bool;                   // in scope 0 at ui/binding/match-str.rs:20:35: 20:38
    let mut _34: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _35: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _36: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _37: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _40: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _41: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _42: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _43: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _45: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _46: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _47: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _48: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _49: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _50: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _51: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _52: &str;                   // in scope 0 at ui/binding/match-str.rs:23:11: 23:14
    let mut _53: bool;                   // in scope 0 at ui/binding/match-str.rs:23:17: 23:20
    let mut _54: bool;                   // in scope 0 at ui/binding/match-str.rs:23:28: 23:31
    let mut _55: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let mut _57: &&str;                  // in scope 0 at ui/binding/match-str.rs:16:25: 16:31
    let mut _58: &&str;                  // in scope 0 at ui/binding/match-str.rs:15:25: 15:31
    let mut _59: &std::string::String;   // in scope 0 at ui/binding/match-str.rs:15:15: 15:20
    let mut _60: &std::string::String;   // in scope 0 at ui/binding/match-str.rs:16:15: 16:20
    scope 1 {
        debug s => _12;                  // in scope 1 at ui/binding/match-str.rs:15:15: 15:20
        debug s => _13;                  // in scope 1 at ui/binding/match-str.rs:15:15: 15:20
    }
    scope 2 {
        debug s => _21;                  // in scope 2 at ui/binding/match-str.rs:16:15: 16:20
        debug s => _22;                  // in scope 2 at ui/binding/match-str.rs:16:15: 16:20
    }
    scope 3 {
        debug x => _30;                  // in scope 3 at ui/binding/match-str.rs:20:9: 20:10
        let _38: &i32;                   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _39: &i32;                   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _56: &i32;               // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 4 {
            debug left_val => _38;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _39;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _44: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _44;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = const "test";               // scope 0 at ui/binding/match-str.rs:8:11: 8:17
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:8:11: 8:17
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _2 = <str as PartialEq>::eq(_1, const "not-test") -> bb1; // scope 0 at ui/binding/match-str.rs:8:20: 8:30
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:8:20: 8:30
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:8:20: 8:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb5]; // scope 0 at ui/binding/match-str.rs:8:20: 8:30
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "test") -> bb3; // scope 0 at ui/binding/match-str.rs:8:44: 8:50
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:8:44: 8:50
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:8:44: 8:50
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb4, otherwise: bb6]; // scope 0 at ui/binding/match-str.rs:8:44: 8:50
    }

    bb4: {
        _5 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _4 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _9 = const "test";               // scope 0 at ui/binding/match-str.rs:13:19: 13:25
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:13:19: 13:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/binding/match-str.rs:13:19: 13:37
        _7 = <str as ToString>::to_string(move _8) -> bb7; // scope 0 at ui/binding/match-str.rs:13:19: 13:37
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:13:26: 13:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb7: {
        _6 = t::tag1(move _7);           // scope 0 at ui/binding/match-str.rs:13:11: 13:38
        _10 = discriminant(_6);          // scope 0 at ui/binding/match-str.rs:13:11: 13:38
        switchInt(move _10) -> [0: bb9, 1: bb8, otherwise: bb35]; // scope 0 at ui/binding/match-str.rs:13:5: 13:38
    }

    bb8: {
        _11 = begin_panic::<&str>(const "explicit panic") -> bb33; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        _12 = &((_6 as tag1).0: std::string::String); // scope 0 at ui/binding/match-str.rs:15:15: 15:20
        _13 = &_12;                      // scope 0 at ui/binding/match-str.rs:15:15: 15:20
        _58 = const _;                   // scope 0 at ui/binding/match-str.rs:15:25: 15:31
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:15:25: 15:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[2])) }
        _15 = _58;                       // scope 0 at ui/binding/match-str.rs:15:25: 15:31
        _59 = deref_copy (*_13);         // scope 0 at ui/binding/match-str.rs:15:37: 15:39
        _19 = _59;                       // scope 0 at ui/binding/match-str.rs:15:37: 15:39
        _18 = <String as Deref>::deref(move _19) -> [return: bb10, unwind: bb33]; // scope 0 at ui/binding/match-str.rs:15:36: 15:39
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:15:36: 15:39
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        _17 = _18;                       // scope 0 at ui/binding/match-str.rs:15:35: 15:39
        _16 = &_17;                      // scope 0 at ui/binding/match-str.rs:15:35: 15:39
        _14 = <&str as PartialEq>::ne(move _15, move _16) -> [return: bb11, unwind: bb33]; // scope 0 at ui/binding/match-str.rs:15:25: 15:39
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:15:25: 15:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::ne}, val: Value(<ZST>) }
    }

    bb11: {
        switchInt(move _14) -> [0: bb13, otherwise: bb12]; // scope 0 at ui/binding/match-str.rs:15:25: 15:39
    }

    bb12: {
        _20 = begin_panic::<&str>(const "explicit panic") -> bb33; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _21 = &((_6 as tag1).0: std::string::String); // scope 0 at ui/binding/match-str.rs:16:15: 16:20
        _22 = &_21;                      // scope 0 at ui/binding/match-str.rs:16:15: 16:20
        _57 = const _;                   // scope 0 at ui/binding/match-str.rs:16:25: 16:31
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:16:25: 16:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[1])) }
        _24 = _57;                       // scope 0 at ui/binding/match-str.rs:16:25: 16:31
        _60 = deref_copy (*_22);         // scope 0 at ui/binding/match-str.rs:16:37: 16:39
        _28 = _60;                       // scope 0 at ui/binding/match-str.rs:16:37: 16:39
        _27 = <String as Deref>::deref(move _28) -> [return: bb14, unwind: bb33]; // scope 0 at ui/binding/match-str.rs:16:36: 16:39
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:16:36: 16:39
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb14: {
        _26 = _27;                       // scope 0 at ui/binding/match-str.rs:16:35: 16:39
        _25 = &_26;                      // scope 0 at ui/binding/match-str.rs:16:35: 16:39
        _23 = <&str as PartialEq>::eq(move _24, move _25) -> [return: bb15, unwind: bb33]; // scope 0 at ui/binding/match-str.rs:16:25: 16:39
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:16:25: 16:39
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb15: {
        switchInt(move _23) -> [0: bb17, otherwise: bb16]; // scope 0 at ui/binding/match-str.rs:16:25: 16:39
    }

    bb16: {
        drop(_6) -> bb18;                // scope 0 at ui/binding/match-str.rs:18:5: 18:6
    }

    bb17: {
        _29 = begin_panic::<&str>(const "explicit panic") -> bb33; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        _31 = const "a";                 // scope 0 at ui/binding/match-str.rs:20:19: 20:22
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:20:19: 20:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _32 = <str as PartialEq>::eq(_31, const "a") -> bb19; // scope 0 at ui/binding/match-str.rs:20:25: 20:28
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:20:25: 20:28
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:20:25: 20:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb19: {
        switchInt(move _32) -> [0: bb20, otherwise: bb23]; // scope 0 at ui/binding/match-str.rs:20:25: 20:28
    }

    bb20: {
        _33 = <str as PartialEq>::eq(_31, const "b") -> bb21; // scope 0 at ui/binding/match-str.rs:20:35: 20:38
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:20:35: 20:38
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:20:35: 20:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        switchInt(move _33) -> [0: bb22, otherwise: bb24]; // scope 0 at ui/binding/match-str.rs:20:35: 20:38
    }

    bb22: {
        _34 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb23: {
        _30 = const 1_i32;               // scope 0 at ui/binding/match-str.rs:20:32: 20:33
        goto -> bb25;                    // scope 0 at ui/binding/match-str.rs:20:32: 20:33
    }

    bb24: {
        _30 = const 2_i32;               // scope 0 at ui/binding/match-str.rs:20:42: 20:43
        goto -> bb25;                    // scope 0 at ui/binding/match-str.rs:20:42: 20:43
    }

    bb25: {
        _36 = &_30;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _56 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _37 = _56;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _35 = (move _36, move _37);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _38 = (_35.0: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _39 = (_35.1: &i32);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _42 = (*_38);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _43 = const 1_i32;               // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _41 = Eq(move _42, move _43);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _40 = Not(move _41);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _40) -> [0: bb27, otherwise: bb26]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb26: {
        _44 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _46 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = _38;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _48;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _39;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _49 = _50;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _45 = core::panicking::assert_failed::<i32, i32>(move _46, move _47, move _49, move _51); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb27: {
        _52 = const "a";                 // scope 3 at ui/binding/match-str.rs:23:11: 23:14
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:23:11: 23:14
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _53 = <str as PartialEq>::eq(_52, const "a") -> bb28; // scope 3 at ui/binding/match-str.rs:23:17: 23:20
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:23:17: 23:20
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:23:17: 23:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb28: {
        switchInt(move _53) -> [0: bb29, otherwise: bb32]; // scope 3 at ui/binding/match-str.rs:23:17: 23:20
    }

    bb29: {
        _54 = <str as PartialEq>::eq(_52, const "b") -> bb30; // scope 3 at ui/binding/match-str.rs:23:28: 23:31
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:23:28: 23:31
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:23:28: 23:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb30: {
        switchInt(move _54) -> [0: bb31, otherwise: bb32]; // scope 3 at ui/binding/match-str.rs:23:28: 23:31
    }

    bb31: {
        _55 = begin_panic::<&str>(const "explicit panic"); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb32: {
        return;                          // scope 0 at ui/binding/match-str.rs:25:2: 25:2
    }

    bb33 (cleanup): {
        drop(_6) -> bb34;                // scope 0 at ui/binding/match-str.rs:18:5: 18:6
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at ui/binding/match-str.rs:7:1: 25:2
    }

    bb35: {
        unreachable;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/binding/match-str.rs:21:19: 21:20

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/binding/match-str.rs:21:19: 21:20
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/binding/match-str.rs:16:25: 16:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-str.rs:16:25: 16:31

    bb0: {
        _1 = const "test";               // scope 0 at ui/binding/match-str.rs:16:25: 16:31
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:16:25: 16:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/match-str.rs:16:25: 16:31
        return;                          // scope 0 at ui/binding/match-str.rs:16:25: 16:31
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/binding/match-str.rs:15:25: 15:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-str.rs:15:25: 15:31

    bb0: {
        _1 = const "test";               // scope 0 at ui/binding/match-str.rs:15:25: 15:31
                                         // mir::Constant
                                         // + span: ui/binding/match-str.rs:15:25: 15:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/match-str.rs:15:25: 15:31
        return;                          // scope 0 at ui/binding/match-str.rs:15:25: 15:31
    }
}

fn t::tag1(_1: String) -> t {
    let mut _0: main::t;                 // return place in scope 0 at ui/binding/match-str.rs:10:14: 10:18

    bb0: {
        _0 = t::tag1(move _1);           // scope 0 at ui/binding/match-str.rs:10:14: 10:18
        return;                          // scope 0 at ui/binding/match-str.rs:10:14: 10:18
    }
}

// MIR FOR CTFE
fn t::tag1(_1: String) -> t {
    let mut _0: main::t;                 // return place in scope 0 at ui/binding/match-str.rs:10:14: 10:18

    bb0: {
        _0 = t::tag1(move _1);           // scope 0 at ui/binding/match-str.rs:10:14: 10:18
        return;                          // scope 0 at ui/binding/match-str.rs:10:14: 10:18
    }
}
