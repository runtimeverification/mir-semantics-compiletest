// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/let-assignability.rs:3:8: 3:8
    let _1: std::boxed::Box<isize>;      // in scope 0 at ui/binding/let-assignability.rs:4:9: 4:10
    let _3: &isize;                      // in scope 0 at ui/binding/let-assignability.rs:5:21: 5:24
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _6: &[&str];                 // in scope 0 at ui/binding/let-assignability.rs:6:14: 6:18
    let mut _7: &[&str; 2];              // in scope 0 at ui/binding/let-assignability.rs:6:14: 6:18
    let _8: &[&str; 2];                  // in scope 0 at ui/binding/let-assignability.rs:6:14: 6:18
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/let-assignability.rs:6:20: 6:21
    let mut _14: &&isize;                // in scope 0 at ui/binding/let-assignability.rs:6:20: 6:21
    let _15: &&isize;                    // in scope 0 at ui/binding/let-assignability.rs:6:20: 6:21
    let mut _17: *const isize;           // in scope 0 at ui/binding/let-assignability.rs:4:9: 4:10
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/binding/let-assignability.rs:4:9: 4:10
        let _2: &isize;                  // in scope 1 at ui/binding/let-assignability.rs:5:9: 5:10
        scope 2 {
            debug b => _2;               // in scope 2 at ui/binding/let-assignability.rs:5:9: 5:10
            let mut _16: &[&str; 2];     // in scope 2 at ui/binding/let-assignability.rs:6:14: 6:18
        }
    }

    bb0: {
        _1 = Box::<isize>::new(const 1_isize) -> bb1; // scope 0 at ui/binding/let-assignability.rs:4:21: 4:32
                                         // mir::Constant
                                         // + span: ui/binding/let-assignability.rs:4:21: 4:29
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _17 = (((_1.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 1 at ui/binding/let-assignability.rs:5:21: 5:24
        _3 = &(*_17);                    // scope 1 at ui/binding/let-assignability.rs:5:21: 5:24
        _2 = _3;                         // scope 1 at ui/binding/let-assignability.rs:5:21: 5:24
        _16 = const _;                   // scope 2 at ui/binding/let-assignability.rs:6:14: 6:18
                                         // mir::Constant
                                         // + span: ui/binding/let-assignability.rs:6:14: 6:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(f, [], Some(promoted[0])) }
        _8 = _16;                        // scope 2 at ui/binding/let-assignability.rs:6:14: 6:18
        _7 = _8;                         // scope 2 at ui/binding/let-assignability.rs:6:14: 6:18
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 2 at ui/binding/let-assignability.rs:6:14: 6:18
        _15 = &_2;                       // scope 2 at ui/binding/let-assignability.rs:6:20: 6:21
        _14 = _15;                       // scope 2 at ui/binding/let-assignability.rs:6:20: 6:21
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<&isize>(move _14) -> [return: bb2, unwind: bb6]; // scope 2 at ui/binding/let-assignability.rs:6:20: 6:21
                                         // mir::Constant
                                         // + span: ui/binding/let-assignability.rs:6:20: 6:21
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: for<'b> fn(&'b &isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&isize>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = &_12;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb3, unwind: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _print(move _5) -> [return: bb4, unwind: bb6]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/binding/let-assignability.rs:7:1: 7:2
    }

    bb5: {
        return;                          // scope 0 at ui/binding/let-assignability.rs:7:2: 7:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/binding/let-assignability.rs:7:1: 7:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/binding/let-assignability.rs:3:1: 7:2
    }
}

promoted[0] in f: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/let-assignability.rs:6:14: 6:18
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/let-assignability.rs:6:14: 6:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binding/let-assignability.rs:6:14: 6:18
                                         // mir::Constant
                                         // + span: ui/binding/let-assignability.rs:6:14: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/let-assignability.rs:6:14: 6:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/let-assignability.rs:6:14: 6:18
        return;                          // scope 0 at ui/binding/let-assignability.rs:6:14: 6:18
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/let-assignability.rs:9:15: 9:15
    let _1: ();                          // in scope 0 at ui/binding/let-assignability.rs:10:5: 10:8

    bb0: {
        _1 = f() -> bb1;                 // scope 0 at ui/binding/let-assignability.rs:10:5: 10:8
                                         // mir::Constant
                                         // + span: ui/binding/let-assignability.rs:10:5: 10:6
                                         // + literal: Const { ty: fn() {f}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/let-assignability.rs:11:2: 11:2
    }
}
