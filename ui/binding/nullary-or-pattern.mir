// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn or_alt(_1: blah) -> isize {
    debug q => _1;
    let mut _0: isize;
    let mut _2: isize;

    bb0: {
        _2 = discriminant(_1);
        switchInt(move _2) -> [0: bb2, 1: bb2, otherwise: bb1];
    }

    bb1: {
        unreachable;
    }

    bb2: {
        _0 = const 42_isize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&isize, &isize);
    let mut _2: &isize;
    let _3: isize;
    let mut _4: blah;
    let _5: &isize;
    let _6: &isize;
    let mut _7: bool;
    let mut _8: bool;
    let mut _9: isize;
    let mut _10: isize;
    let _12: !;
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _14: (&isize, &isize);
    let mut _15: &isize;
    let _16: isize;
    let mut _17: blah;
    let _18: &isize;
    let _19: &isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: &isize;
    let mut _28: &isize;
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _11: core::panicking::AssertKind;
        scope 2 {
            debug kind => _11;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _24: core::panicking::AssertKind;
        scope 4 {
            debug kind => _24;
        }
    }

    bb0: {
        _4 = blah::a;
        _3 = or_alt(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _28 = const _;
        _1 = (move _2, _28);
        _5 = (_1.0: &isize);
        _6 = (_1.1: &isize);
        _9 = (*_5);
        _10 = (*_6);
        _8 = Eq(move _9, move _10);
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _11 = core::panicking::AssertKind::Eq;
        _13 = Option::<Arguments<'_>>::None;
        _12 = core::panicking::assert_failed::<isize, isize>(move _11, _5, _6, move _13) -> unwind continue;
    }

    bb3: {
        _17 = blah::b;
        _16 = or_alt(move _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _15 = &_16;
        _27 = const _;
        _14 = (move _15, _27);
        _18 = (_14.0: &isize);
        _19 = (_14.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 42_isize;
        _0 = &_1;
        return;
    }
}
