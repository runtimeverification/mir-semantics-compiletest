// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: i32;
    let _2: char;
    let mut _3: (&i32, &char);
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&char, &char);
    let mut _16: &char;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: char;
    let mut _22: char;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: &char;
    let mut _29: &i32;
    let mut _30: &i32;
    let mut _31: &char;
    scope 1 {
        debug x => _1;
        debug y => _2;
        let _6: &i32;
        let _7: &i32;
        let _17: &char;
        let _18: &char;
        let mut _26: &char;
        let mut _27: &i32;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
        scope 4 {
            debug left_val => _17;
            debug right_val => _18;
            let _23: core::panicking::AssertKind;
            scope 5 {
                debug kind => _23;
            }
        }
    }

    bb0: {
        _29 = const _;
        _28 = const _;
        _3 = (_29, _28);
        _30 = deref_copy (_3.0: &i32);
        _1 = (*_30);
        _31 = deref_copy (_3.1: &char);
        _2 = (*_31);
        _5 = &_1;
        _27 = const _;
        _4 = (move _5, _27);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _16 = &_2;
        _26 = const _;
        _15 = (move _16, _26);
        _17 = (_15.0: &char);
        _18 = (_15.1: &char);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<char, char>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &char = {
    let mut _0: &char;
    let mut _1: char;

    bb0: {
        _1 = const 'a';
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}
