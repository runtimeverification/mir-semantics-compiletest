// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_simple() -> () {
    let mut _0: ();
    let _1: bool;
    let mut _2: bool;
    let mut _3: !;
    let mut _4: (&bool, &bool);
    let mut _5: &bool;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug r => const true;
        let _6: &bool;
        let _7: &bool;
        let mut _15: &bool;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }

    bb0: {
        _2 = const true;
        switchInt(_2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _3 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb2: {
        _1 = const true;
        _5 = &_1;
        _15 = const _;
        _4 = (move _5, _15);
        _6 = (_4.0: &bool);
        _7 = (_4.1: &bool);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<bool, bool>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in test_simple: &bool = {
    let mut _0: &bool;
    let mut _1: bool;

    bb0: {
        _1 = const true;
        _0 = &_1;
        return;
    }
}

fn test_box() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: bool;
    let mut _3: std::boxed::Box<[i32]>;
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: *mut u8;
    let mut _7: std::boxed::Box<[i32; 1]>;
    let mut _8: !;
    let mut _9: (&i32, &i32);
    let mut _10: &i32;
    let _11: &i32;
    let mut _12: &std::vec::Vec<i32>;
    let mut _15: bool;
    let mut _16: bool;
    let mut _17: i32;
    let mut _18: i32;
    let _20: !;
    let mut _21: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: *const [i32; 1];
    let mut _24: *const ();
    let mut _25: usize;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: usize;
    let mut _29: bool;
    scope 1 {
        debug r => _1;
        let _13: &i32;
        let _14: &i32;
        let mut _22: &i32;
        scope 3 {
            debug left_val => _13;
            debug right_val => _14;
            let _19: core::panicking::AssertKind;
            scope 4 {
                debug kind => _19;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _2 = const true;
        switchInt(_2) -> [0: bb1, otherwise: bb2];
    }

    bb1: {
        _8 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }

    bb2: {
        _4 = SizeOf([i32; 1]);
        _5 = AlignOf([i32; 1]);
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _7 = ShallowInitBox(move _6, [i32; 1]);
        _23 = (((_7.0: std::ptr::Unique<[i32; 1]>).0: std::ptr::NonNull<[i32; 1]>).0: *const [i32; 1]);
        _24 = _23 as *const () (PtrToPtr);
        _25 = _24 as usize (Transmute);
        _26 = AlignOf(i32);
        _27 = Sub(_26, const 1_usize);
        _28 = BitAnd(_25, _27);
        _29 = Eq(_28, const 0_usize);
        assert(_29, "misaligned pointer dereference: address must be a multiple of {} but is {}", _26, _25) -> [success: bb11, unwind unreachable];
    }

    bb4: {
        _12 = &_1;
        _11 = <Vec<i32> as Index<usize>>::index(move _12, const 0_usize) -> [return: bb5, unwind: bb9];
    }

    bb5: {
        _10 = _11;
        _22 = const _;
        _9 = (move _10, _22);
        _13 = (_9.0: &i32);
        _14 = (_9.1: &i32);
        _17 = (*_13);
        _18 = (*_14);
        _16 = Eq(move _17, move _18);
        _15 = Not(move _16);
        switchInt(move _15) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _19 = core::panicking::AssertKind::Eq;
        _21 = Option::<Arguments<'_>>::None;
        _20 = core::panicking::assert_failed::<i32, i32>(move _19, _13, _14, move _21) -> bb9;
    }

    bb7: {
        drop(_1) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9 (cleanup): {
        drop(_1) -> [return: bb10, unwind terminate];
    }

    bb10 (cleanup): {
        resume;
    }

    bb11: {
        (*_23) = [const 10_i32];
        _3 = move _7 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _3) -> [return: bb4, unwind continue];
    }
}

promoted[0] in test_box: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 10_i32;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = test_simple() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = test_box() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
