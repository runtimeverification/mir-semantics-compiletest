// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<i32>;
    let mut _2: (&&std::option::Option<i32>, &&std::option::Option<i32>);
    let mut _3: &&std::option::Option<i32>;
    let _4: &std::option::Option<i32>;
    let mut _5: isize;
    let mut _10: bool;
    let mut _11: bool;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&&std::option::Option<i32>, &&std::option::Option<i32>);
    let mut _16: &&std::option::Option<i32>;
    let _17: &std::option::Option<i32>;
    let mut _18: isize;
    let mut _23: bool;
    let mut _24: bool;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&&str, &&str);
    let mut _29: &&str;
    let _30: &str;
    let mut _31: &str;
    let mut _34: bool;
    let mut _35: bool;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _40: &str;
    let mut _41: (&&str, &&str);
    let mut _42: &&str;
    let mut _45: bool;
    let mut _46: bool;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&&std::option::Option<bool>, &&std::option::Option<bool>);
    let mut _53: &&std::option::Option<bool>;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug value => _1;
        let _6: &std::option::Option<i32>;
        let _7: &std::option::Option<i32>;
        let _8: &&std::option::Option<i32>;
        let _9: &&std::option::Option<i32>;
        let _19: &std::option::Option<i32>;
        let _20: &std::option::Option<i32>;
        let _21: &&std::option::Option<i32>;
        let _22: &&std::option::Option<i32>;
        let _32: &&str;
        let _33: &&str;
        let _39: &str;
        let mut _63: &&str;
        let mut _64: &&std::option::Option<i32>;
        let mut _65: &&std::option::Option<i32>;
        scope 2 {
            debug a => _6;
        }
        scope 3 {
            debug b => _7;
        }
        scope 4 {
            debug left_val => _8;
            debug right_val => _9;
            let _12: core::panicking::AssertKind;
            scope 5 {
                debug kind => _12;
            }
        }
        scope 6 {
            debug c => _19;
        }
        scope 7 {
            debug b => _20;
        }
        scope 8 {
            debug left_val => _21;
            debug right_val => _22;
            let _25: core::panicking::AssertKind;
            scope 9 {
                debug kind => _25;
            }
        }
        scope 10 {
            debug b => const "foobarbaz";
        }
        scope 11 {
            debug left_val => _32;
            debug right_val => _33;
            let _36: core::panicking::AssertKind;
            scope 12 {
                debug kind => _36;
            }
        }
        scope 13 {
            debug a => _39;
            let _43: &&str;
            let _44: &&str;
            let _50: std::option::Option<bool>;
            let mut _62: &&str;
            scope 14 {
                debug left_val => _43;
                debug right_val => _44;
                let _47: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _47;
                }
            }
            scope 16 {
                debug value => _50;
                let _51: &std::option::Option<bool>;
                scope 17 {
                    debug a => _51;
                    let _54: &&std::option::Option<bool>;
                    let _55: &&std::option::Option<bool>;
                    let mut _61: &&std::option::Option<bool>;
                    scope 18 {
                        debug left_val => _54;
                        debug right_val => _55;
                        let _58: core::panicking::AssertKind;
                        scope 19 {
                            debug kind => _58;
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Option::<i32>::Some(const 1_i32);
        _5 = discriminant(_1);
        switchInt(move _5) -> [0: bb1, 1: bb3, otherwise: bb2];
    }

    bb1: {
        _7 = &_1;
        _4 = _7;
        goto -> bb4;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _6 = &_1;
        _4 = _6;
        goto -> bb4;
    }

    bb4: {
        _3 = &_4;
        _65 = const _;
        _2 = (move _3, _65);
        _8 = (_2.0: &&std::option::Option<i32>);
        _9 = (_2.1: &&std::option::Option<i32>);
        _11 = <&Option<i32> as PartialEq>::eq(_8, _9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb7, otherwise: bb6];
    }

    bb6: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<&Option<i32>, &Option<i32>>(move _12, _8, _9, move _14) -> unwind continue;
    }

    bb7: {
        _18 = discriminant(_1);
        switchInt(move _18) -> [0: bb8, 1: bb9, otherwise: bb2];
    }

    bb8: {
        _20 = &_1;
        _17 = _20;
        goto -> bb10;
    }

    bb9: {
        _19 = &_1;
        _17 = _19;
        goto -> bb10;
    }

    bb10: {
        _16 = &_17;
        _64 = const _;
        _15 = (move _16, _64);
        _21 = (_15.0: &&std::option::Option<i32>);
        _22 = (_15.1: &&std::option::Option<i32>);
        _24 = <&Option<i32> as PartialEq>::eq(_21, _22) -> [return: bb11, unwind continue];
    }

    bb11: {
        _23 = Not(move _24);
        switchInt(move _23) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<&Option<i32>, &Option<i32>>(move _25, _21, _22, move _27) -> unwind continue;
    }

    bb13: {
        _31 = const "foobarbaz";
        _30 = _31;
        _29 = &_30;
        _63 = const _;
        _28 = (move _29, _63);
        _32 = (_28.0: &&str);
        _33 = (_28.1: &&str);
        _35 = <&str as PartialEq>::eq(_32, _33) -> [return: bb14, unwind continue];
    }

    bb14: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<&str, &str>(move _36, _32, _33, move _38) -> unwind continue;
    }

    bb16: {
        _40 = const "foobarbaz";
        _39 = _40;
        _42 = &_39;
        _62 = const _;
        _41 = (move _42, _62);
        _43 = (_41.0: &&str);
        _44 = (_41.1: &&str);
        _46 = <&str as PartialEq>::eq(_43, _44) -> [return: bb17, unwind continue];
    }

    bb17: {
        _45 = Not(move _46);
        switchInt(move _45) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<&str, &str>(move _47, _43, _44, move _49) -> unwind continue;
    }

    bb19: {
        _50 = Option::<bool>::Some(const true);
        _51 = &_50;
        _53 = &_51;
        _61 = const _;
        _52 = (move _53, _61);
        _54 = (_52.0: &&std::option::Option<bool>);
        _55 = (_52.1: &&std::option::Option<bool>);
        _57 = <&Option<bool> as PartialEq>::eq(_54, _55) -> [return: bb20, unwind continue];
    }

    bb20: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<&Option<bool>, &Option<bool>>(move _58, _54, _55, move _60) -> unwind continue;
    }

    bb22: {
        return;
    }
}

promoted[0] in main: &&Option<bool> = {
    let mut _0: &&std::option::Option<bool>;
    let mut _1: &std::option::Option<bool>;
    let mut _2: std::option::Option<bool>;

    bb0: {
        _2 = Option::<bool>::Some(const true);
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foobarbaz";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "foobarbaz";
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&Option<i32> = {
    let mut _0: &&std::option::Option<i32>;
    let mut _1: &std::option::Option<i32>;
    let mut _2: std::option::Option<i32>;

    bb0: {
        _2 = Option::<i32>::Some(const 1_i32);
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &&Option<i32> = {
    let mut _0: &&std::option::Option<i32>;
    let mut _1: &std::option::Option<i32>;
    let mut _2: std::option::Option<i32>;

    bb0: {
        _2 = Option::<i32>::Some(const 1_i32);
        _1 = &_2;
        _0 = &_1;
        return;
    }
}
