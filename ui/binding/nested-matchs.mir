// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn baz() -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/binding/nested-matchs.rs:3:13: 3:14
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/nested-matchs.rs:5:10: 5:10
    let _1: isize;                       // in scope 0 at ui/binding/nested-matchs.rs:7:21: 7:23
    let _3: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _4: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _5: &[&str];                 // in scope 0 at ui/binding/nested-matchs.rs:10:18: 10:22
    let mut _6: &[&str; 2];              // in scope 0 at ui/binding/nested-matchs.rs:10:18: 10:22
    let _7: &[&str; 2];                  // in scope 0 at ui/binding/nested-matchs.rs:10:18: 10:22
    let mut _8: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _11: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _12: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/nested-matchs.rs:10:24: 10:27
    let mut _13: &i32;                   // in scope 0 at ui/binding/nested-matchs.rs:10:24: 10:27
    let _14: &i32;                       // in scope 0 at ui/binding/nested-matchs.rs:10:24: 10:27
    scope 1 {
        debug _x => _1;                  // in scope 1 at ui/binding/nested-matchs.rs:7:21: 7:23
        let mut _2: i32;                 // in scope 1 at ui/binding/nested-matchs.rs:8:13: 8:20
        scope 2 {
            debug bar => _2;             // in scope 2 at ui/binding/nested-matchs.rs:8:13: 8:20
            let mut _15: &[&str; 2];     // in scope 2 at ui/binding/nested-matchs.rs:10:18: 10:22
        }
    }

    bb0: {
        _1 = const 5_isize;              // scope 0 at ui/binding/nested-matchs.rs:7:21: 7:23
        _2 = const 5_i32;                // scope 2 at ui/binding/nested-matchs.rs:9:50: 9:57
        _15 = const _;                   // scope 2 at ui/binding/nested-matchs.rs:10:18: 10:22
                                         // mir::Constant
                                         // + span: ui/binding/nested-matchs.rs:10:18: 10:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(foo, [], Some(promoted[2])) }
        _7 = _15;                        // scope 2 at ui/binding/nested-matchs.rs:10:18: 10:22
        _6 = _7;                         // scope 2 at ui/binding/nested-matchs.rs:10:18: 10:22
        _5 = move _6 as &[&str] (Pointer(Unsize)); // scope 2 at ui/binding/nested-matchs.rs:10:18: 10:22
        _14 = &_2;                       // scope 2 at ui/binding/nested-matchs.rs:10:24: 10:27
        _13 = _14;                       // scope 2 at ui/binding/nested-matchs.rs:10:24: 10:27
        _12 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _13) -> bb1; // scope 2 at ui/binding/nested-matchs.rs:10:24: 10:27
                                         // mir::Constant
                                         // + span: ui/binding/nested-matchs.rs:10:24: 10:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = [move _12];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = _10;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = move _9 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _4 = Arguments::<'_>::new_v1(move _5, move _8) -> bb2; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = _print(move _4) -> bb3;     // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/binding/nested-matchs.rs:14:2: 14:2
    }
}

promoted[0] in foo: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in foo: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/binding/nested-matchs.rs:12:35: 12:42
    let mut _1: [&str; 1];               // in scope 0 at ui/binding/nested-matchs.rs:12:35: 12:42

    bb0: {
        _1 = [const "hello\n"];          // scope 0 at ui/binding/nested-matchs.rs:12:35: 12:42
                                         // mir::Constant
                                         // + span: ui/binding/nested-matchs.rs:12:35: 12:42
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/nested-matchs.rs:12:35: 12:42
        return;                          // scope 0 at ui/binding/nested-matchs.rs:12:35: 12:42
    }
}

promoted[2] in foo: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/nested-matchs.rs:10:18: 10:22
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/nested-matchs.rs:10:18: 10:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binding/nested-matchs.rs:10:18: 10:22
                                         // mir::Constant
                                         // + span: ui/binding/nested-matchs.rs:10:18: 10:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/nested-matchs.rs:10:18: 10:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/nested-matchs.rs:10:18: 10:22
        return;                          // scope 0 at ui/binding/nested-matchs.rs:10:18: 10:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/nested-matchs.rs:16:15: 16:15
    let _1: ();                          // in scope 0 at ui/binding/nested-matchs.rs:16:17: 16:22

    bb0: {
        _1 = foo() -> bb1;               // scope 0 at ui/binding/nested-matchs.rs:16:17: 16:22
                                         // mir::Constant
                                         // + span: ui/binding/nested-matchs.rs:16:17: 16:20
                                         // + literal: Const { ty: fn() {foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/nested-matchs.rs:16:25: 16:25
    }
}
