// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn f1(_1: &str) -> String {
    debug ref_string => _1;              // in scope 0 at ui/binding/match-borrowed_str.rs:3:7: 3:17
    let mut _0: std::string::String;     // return place in scope 0 at ui/binding/match-borrowed_str.rs:3:28: 3:34
    let mut _2: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:5:9: 5:12
    let mut _3: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:6:9: 6:12
    let mut _4: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:5:16: 5:37
    let _5: &str;                        // in scope 0 at ui/binding/match-borrowed_str.rs:5:16: 5:25
    let mut _6: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:6:16: 6:37
    let _7: &str;                        // in scope 0 at ui/binding/match-borrowed_str.rs:6:16: 6:25
    let mut _8: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:7:14: 7:37
    let _9: &str;                        // in scope 0 at ui/binding/match-borrowed_str.rs:7:14: 7:25

    bb0: {
        _2 = <str as PartialEq>::eq(_1, const "a") -> bb1; // scope 0 at ui/binding/match-borrowed_str.rs:5:9: 5:12
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:5:9: 5:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:5:9: 5:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb5]; // scope 0 at ui/binding/match-borrowed_str.rs:5:9: 5:12
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "b") -> bb3; // scope 0 at ui/binding/match-borrowed_str.rs:6:9: 6:12
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:6:9: 6:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:6:9: 6:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb4, otherwise: bb6]; // scope 0 at ui/binding/match-borrowed_str.rs:6:9: 6:12
    }

    bb4: {
        _9 = const "not found";          // scope 0 at ui/binding/match-borrowed_str.rs:7:14: 7:25
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:7:14: 7:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/binding/match-borrowed_str.rs:7:14: 7:37
        _0 = <str as ToString>::to_string(move _8) -> bb7; // scope 0 at ui/binding/match-borrowed_str.rs:7:14: 7:37
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:7:26: 7:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = const "found a";            // scope 0 at ui/binding/match-borrowed_str.rs:5:16: 5:25
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:5:16: 5:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/binding/match-borrowed_str.rs:5:16: 5:37
        _0 = <str as ToString>::to_string(move _4) -> bb7; // scope 0 at ui/binding/match-borrowed_str.rs:5:16: 5:37
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:5:26: 5:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = const "found b";            // scope 0 at ui/binding/match-borrowed_str.rs:6:16: 6:25
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:6:16: 6:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/binding/match-borrowed_str.rs:6:16: 6:37
        _0 = <str as ToString>::to_string(move _6) -> bb7; // scope 0 at ui/binding/match-borrowed_str.rs:6:16: 6:37
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:6:26: 6:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/binding/match-borrowed_str.rs:9:2: 9:2
    }
}

fn f2(_1: &str) -> String {
    debug ref_string => _1;              // in scope 0 at ui/binding/match-borrowed_str.rs:11:7: 11:17
    let mut _0: std::string::String;     // return place in scope 0 at ui/binding/match-borrowed_str.rs:11:28: 11:34
    let mut _2: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:13:9: 13:12
    let mut _3: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:14:9: 14:12
    let mut _4: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:13:16: 13:37
    let _5: &str;                        // in scope 0 at ui/binding/match-borrowed_str.rs:13:16: 13:25
    let mut _6: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:14:16: 14:37
    let _7: &str;                        // in scope 0 at ui/binding/match-borrowed_str.rs:14:16: 14:25
    let _8: &str;                        // in scope 0 at ui/binding/match-borrowed_str.rs:15:9: 15:10
    let mut _10: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _11: &[&str];                // in scope 0 at ui/binding/match-borrowed_str.rs:15:22: 15:38
    let mut _12: &[&str; 2];             // in scope 0 at ui/binding/match-borrowed_str.rs:15:22: 15:38
    let _13: &[&str; 2];                 // in scope 0 at ui/binding/match-borrowed_str.rs:15:22: 15:38
    let mut _14: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _15: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _16: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _17: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _18: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/match-borrowed_str.rs:15:40: 15:41
    let mut _19: &&str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:15:40: 15:41
    let _20: &&str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:15:40: 15:41
    scope 1 {
        debug s => _8;                   // in scope 1 at ui/binding/match-borrowed_str.rs:15:9: 15:10
        let _9: std::string::String;     // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let mut _21: &[&str; 2];         // in scope 1 at ui/binding/match-borrowed_str.rs:15:22: 15:38
        scope 2 {
            debug res => _9;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
    }

    bb0: {
        _2 = <str as PartialEq>::eq(_1, const "a") -> bb1; // scope 0 at ui/binding/match-borrowed_str.rs:13:9: 13:12
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:13:9: 13:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:13:9: 13:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _2) -> [0: bb2, otherwise: bb5]; // scope 0 at ui/binding/match-borrowed_str.rs:13:9: 13:12
    }

    bb2: {
        _3 = <str as PartialEq>::eq(_1, const "b") -> bb3; // scope 0 at ui/binding/match-borrowed_str.rs:14:9: 14:12
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:14:9: 14:12
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:14:9: 14:12
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _3) -> [0: bb4, otherwise: bb6]; // scope 0 at ui/binding/match-borrowed_str.rs:14:9: 14:12
    }

    bb4: {
        _8 = _1;                         // scope 0 at ui/binding/match-borrowed_str.rs:15:9: 15:10
        _21 = const _;                   // scope 1 at ui/binding/match-borrowed_str.rs:15:22: 15:38
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:15:22: 15:38
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(f2, [], Some(promoted[0])) }
        _13 = _21;                       // scope 1 at ui/binding/match-borrowed_str.rs:15:22: 15:38
        _12 = _13;                       // scope 1 at ui/binding/match-borrowed_str.rs:15:22: 15:38
        _11 = move _12 as &[&str] (Pointer(Unsize)); // scope 1 at ui/binding/match-borrowed_str.rs:15:22: 15:38
        _20 = &_8;                       // scope 1 at ui/binding/match-borrowed_str.rs:15:40: 15:41
        _19 = _20;                       // scope 1 at ui/binding/match-borrowed_str.rs:15:40: 15:41
        _18 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _19) -> bb7; // scope 1 at ui/binding/match-borrowed_str.rs:15:40: 15:41
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:15:40: 15:41
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb5: {
        _5 = const "found a";            // scope 0 at ui/binding/match-borrowed_str.rs:13:16: 13:25
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:13:16: 13:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/binding/match-borrowed_str.rs:13:16: 13:37
        _0 = <str as ToString>::to_string(move _4) -> bb10; // scope 0 at ui/binding/match-borrowed_str.rs:13:16: 13:37
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:13:26: 13:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb6: {
        _7 = const "found b";            // scope 0 at ui/binding/match-borrowed_str.rs:14:16: 14:25
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:14:16: 14:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/binding/match-borrowed_str.rs:14:16: 14:37
        _0 = <str as ToString>::to_string(move _6) -> bb10; // scope 0 at ui/binding/match-borrowed_str.rs:14:16: 14:37
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:14:26: 14:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb7: {
        _17 = [move _18];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _16 = &_17;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _15 = _16;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _14 = move _15 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _10 = Arguments::<'_>::new_v1(move _11, move _14) -> bb8; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _9 = format(move _10) -> bb9;    // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb9: {
        _0 = move _9;                    // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        goto -> bb10;                    // scope 0 at ui/binding/match-borrowed_str.rs:15:41: 15:42
    }

    bb10: {
        return;                          // scope 0 at ui/binding/match-borrowed_str.rs:17:2: 17:2
    }
}

promoted[0] in f2: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/match-borrowed_str.rs:15:22: 15:38
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/match-borrowed_str.rs:15:22: 15:38

    bb0: {
        _1 = [const "not found (", const ")"]; // scope 0 at ui/binding/match-borrowed_str.rs:15:22: 15:38
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:15:22: 15:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:15:22: 15:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/match-borrowed_str.rs:15:22: 15:38
        return;                          // scope 0 at ui/binding/match-borrowed_str.rs:15:22: 15:38
    }
}

fn g1(_1: &str, _2: &str) -> String {
    debug ref_1 => _1;                   // in scope 0 at ui/binding/match-borrowed_str.rs:19:7: 19:12
    debug ref_2 => _2;                   // in scope 0 at ui/binding/match-borrowed_str.rs:19:20: 19:25
    let mut _0: std::string::String;     // return place in scope 0 at ui/binding/match-borrowed_str.rs:19:36: 19:42
    let mut _3: (&str, &str);            // in scope 0 at ui/binding/match-borrowed_str.rs:20:11: 20:25
    let mut _4: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:20:12: 20:17
    let mut _5: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:20:19: 20:24
    let mut _6: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:21:10: 21:13
    let mut _7: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:21:15: 21:18
    let mut _8: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:22:10: 22:13
    let mut _9: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:22:15: 22:18
    let mut _10: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:21:23: 21:46
    let _11: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:21:23: 21:34
    let mut _12: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:22:23: 22:46
    let _13: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:22:23: 22:34
    let mut _14: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:23:14: 23:37
    let _15: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:23:14: 23:25

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-borrowed_str.rs:20:12: 20:17
        _5 = _2;                         // scope 0 at ui/binding/match-borrowed_str.rs:20:19: 20:24
        _3 = (move _4, move _5);         // scope 0 at ui/binding/match-borrowed_str.rs:20:11: 20:25
        _6 = <str as PartialEq>::eq((_3.0: &str), const "a") -> bb1; // scope 0 at ui/binding/match-borrowed_str.rs:21:10: 21:13
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:21:10: 21:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:21:10: 21:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _6) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/binding/match-borrowed_str.rs:21:10: 21:13
    }

    bb2: {
        _7 = <str as PartialEq>::eq((_3.1: &str), const "b") -> bb3; // scope 0 at ui/binding/match-borrowed_str.rs:21:15: 21:18
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:21:15: 21:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:21:15: 21:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _7) -> [0: bb4, otherwise: bb9]; // scope 0 at ui/binding/match-borrowed_str.rs:21:15: 21:18
    }

    bb4: {
        _8 = <str as PartialEq>::eq((_3.0: &str), const "b") -> bb5; // scope 0 at ui/binding/match-borrowed_str.rs:22:10: 22:13
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:22:10: 22:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:22:10: 22:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _8) -> [0: bb8, otherwise: bb6]; // scope 0 at ui/binding/match-borrowed_str.rs:22:10: 22:13
    }

    bb6: {
        _9 = <str as PartialEq>::eq((_3.1: &str), const "c") -> bb7; // scope 0 at ui/binding/match-borrowed_str.rs:22:15: 22:18
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:22:15: 22:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:22:15: 22:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _9) -> [0: bb8, otherwise: bb10]; // scope 0 at ui/binding/match-borrowed_str.rs:22:15: 22:18
    }

    bb8: {
        _15 = const "not found";         // scope 0 at ui/binding/match-borrowed_str.rs:23:14: 23:25
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:23:14: 23:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _14 = _15;                       // scope 0 at ui/binding/match-borrowed_str.rs:23:14: 23:37
        _0 = <str as ToString>::to_string(move _14) -> bb11; // scope 0 at ui/binding/match-borrowed_str.rs:23:14: 23:37
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:23:26: 23:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb9: {
        _11 = const "found a,b";         // scope 0 at ui/binding/match-borrowed_str.rs:21:23: 21:34
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:21:23: 21:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/binding/match-borrowed_str.rs:21:23: 21:46
        _0 = <str as ToString>::to_string(move _10) -> bb11; // scope 0 at ui/binding/match-borrowed_str.rs:21:23: 21:46
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:21:35: 21:44
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb10: {
        _13 = const "found b,c";         // scope 0 at ui/binding/match-borrowed_str.rs:22:23: 22:34
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:22:23: 22:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/binding/match-borrowed_str.rs:22:23: 22:46
        _0 = <str as ToString>::to_string(move _12) -> bb11; // scope 0 at ui/binding/match-borrowed_str.rs:22:23: 22:46
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:22:35: 22:44
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/binding/match-borrowed_str.rs:25:2: 25:2
    }
}

fn g2(_1: &str, _2: &str) -> String {
    debug ref_1 => _1;                   // in scope 0 at ui/binding/match-borrowed_str.rs:27:7: 27:12
    debug ref_2 => _2;                   // in scope 0 at ui/binding/match-borrowed_str.rs:27:20: 27:25
    let mut _0: std::string::String;     // return place in scope 0 at ui/binding/match-borrowed_str.rs:27:36: 27:42
    let mut _3: (&str, &str);            // in scope 0 at ui/binding/match-borrowed_str.rs:28:11: 28:25
    let mut _4: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:28:12: 28:17
    let mut _5: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:28:19: 28:24
    let mut _6: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:29:10: 29:13
    let mut _7: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:29:15: 29:18
    let mut _8: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:30:10: 30:13
    let mut _9: bool;                    // in scope 0 at ui/binding/match-borrowed_str.rs:30:15: 30:18
    let mut _10: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:29:23: 29:46
    let _11: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:29:23: 29:34
    let mut _12: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:30:23: 30:46
    let _13: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:30:23: 30:34
    let _14: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:31:10: 31:12
    let _15: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:31:14: 31:16
    let mut _17: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _18: &[&str];                // in scope 0 at ui/binding/match-borrowed_str.rs:31:29: 31:49
    let mut _19: &[&str; 3];             // in scope 0 at ui/binding/match-borrowed_str.rs:31:29: 31:49
    let _20: &[&str; 3];                 // in scope 0 at ui/binding/match-borrowed_str.rs:31:29: 31:49
    let mut _21: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _22: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _23: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _24: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _25: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/match-borrowed_str.rs:31:51: 31:53
    let mut _26: &&str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:31:51: 31:53
    let _27: &&str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:31:51: 31:53
    let mut _28: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/match-borrowed_str.rs:31:55: 31:57
    let mut _29: &&str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:31:55: 31:57
    let _30: &&str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:31:55: 31:57
    scope 1 {
        debug s1 => _14;                 // in scope 1 at ui/binding/match-borrowed_str.rs:31:10: 31:12
        debug s2 => _15;                 // in scope 1 at ui/binding/match-borrowed_str.rs:31:14: 31:16
        let _16: std::string::String;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        let mut _31: &[&str; 3];         // in scope 1 at ui/binding/match-borrowed_str.rs:31:29: 31:49
        scope 2 {
            debug res => _16;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
        }
    }

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-borrowed_str.rs:28:12: 28:17
        _5 = _2;                         // scope 0 at ui/binding/match-borrowed_str.rs:28:19: 28:24
        _3 = (move _4, move _5);         // scope 0 at ui/binding/match-borrowed_str.rs:28:11: 28:25
        _6 = <str as PartialEq>::eq((_3.0: &str), const "a") -> bb1; // scope 0 at ui/binding/match-borrowed_str.rs:29:10: 29:13
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:29:10: 29:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:29:10: 29:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1: {
        switchInt(move _6) -> [0: bb4, otherwise: bb2]; // scope 0 at ui/binding/match-borrowed_str.rs:29:10: 29:13
    }

    bb2: {
        _7 = <str as PartialEq>::eq((_3.1: &str), const "b") -> bb3; // scope 0 at ui/binding/match-borrowed_str.rs:29:15: 29:18
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:29:15: 29:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:29:15: 29:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        switchInt(move _7) -> [0: bb4, otherwise: bb9]; // scope 0 at ui/binding/match-borrowed_str.rs:29:15: 29:18
    }

    bb4: {
        _8 = <str as PartialEq>::eq((_3.0: &str), const "b") -> bb5; // scope 0 at ui/binding/match-borrowed_str.rs:30:10: 30:13
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:30:10: 30:13
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:30:10: 30:13
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt(move _8) -> [0: bb8, otherwise: bb6]; // scope 0 at ui/binding/match-borrowed_str.rs:30:10: 30:13
    }

    bb6: {
        _9 = <str as PartialEq>::eq((_3.1: &str), const "c") -> bb7; // scope 0 at ui/binding/match-borrowed_str.rs:30:15: 30:18
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:30:15: 30:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:30:15: 30:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        switchInt(move _9) -> [0: bb8, otherwise: bb10]; // scope 0 at ui/binding/match-borrowed_str.rs:30:15: 30:18
    }

    bb8: {
        _14 = (_3.0: &str);              // scope 0 at ui/binding/match-borrowed_str.rs:31:10: 31:12
        _15 = (_3.1: &str);              // scope 0 at ui/binding/match-borrowed_str.rs:31:14: 31:16
        _31 = const _;                   // scope 1 at ui/binding/match-borrowed_str.rs:31:29: 31:49
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:31:29: 31:49
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(g2, [], Some(promoted[0])) }
        _20 = _31;                       // scope 1 at ui/binding/match-borrowed_str.rs:31:29: 31:49
        _19 = _20;                       // scope 1 at ui/binding/match-borrowed_str.rs:31:29: 31:49
        _18 = move _19 as &[&str] (Pointer(Unsize)); // scope 1 at ui/binding/match-borrowed_str.rs:31:29: 31:49
        _27 = &_14;                      // scope 1 at ui/binding/match-borrowed_str.rs:31:51: 31:53
        _26 = _27;                       // scope 1 at ui/binding/match-borrowed_str.rs:31:51: 31:53
        _25 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _26) -> bb11; // scope 1 at ui/binding/match-borrowed_str.rs:31:51: 31:53
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:31:51: 31:53
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb9: {
        _11 = const "found a,b";         // scope 0 at ui/binding/match-borrowed_str.rs:29:23: 29:34
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:29:23: 29:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/binding/match-borrowed_str.rs:29:23: 29:46
        _0 = <str as ToString>::to_string(move _10) -> bb15; // scope 0 at ui/binding/match-borrowed_str.rs:29:23: 29:46
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:29:35: 29:44
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb10: {
        _13 = const "found b,c";         // scope 0 at ui/binding/match-borrowed_str.rs:30:23: 30:34
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:30:23: 30:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 0 at ui/binding/match-borrowed_str.rs:30:23: 30:46
        _0 = <str as ToString>::to_string(move _12) -> bb15; // scope 0 at ui/binding/match-borrowed_str.rs:30:23: 30:46
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:30:35: 30:44
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        _30 = &_15;                      // scope 1 at ui/binding/match-borrowed_str.rs:31:55: 31:57
        _29 = _30;                       // scope 1 at ui/binding/match-borrowed_str.rs:31:55: 31:57
        _28 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _29) -> bb12; // scope 1 at ui/binding/match-borrowed_str.rs:31:55: 31:57
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:31:55: 31:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb12: {
        _24 = [move _25, move _28];      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _23 = &_24;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _22 = _23;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _21 = move _22 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _17 = Arguments::<'_>::new_v1(move _18, move _21) -> bb13; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb13: {
        _16 = format(move _17) -> bb14;  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb14: {
        _0 = move _16;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        goto -> bb15;                    // scope 0 at ui/binding/match-borrowed_str.rs:31:57: 31:58
    }

    bb15: {
        return;                          // scope 0 at ui/binding/match-borrowed_str.rs:33:2: 33:2
    }
}

promoted[0] in g2: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/binding/match-borrowed_str.rs:31:29: 31:49
    let mut _1: [&str; 3];               // in scope 0 at ui/binding/match-borrowed_str.rs:31:29: 31:49

    bb0: {
        _1 = [const "not found (", const ", ", const ")"]; // scope 0 at ui/binding/match-borrowed_str.rs:31:29: 31:49
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:31:29: 31:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:31:29: 31:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:31:29: 31:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/match-borrowed_str.rs:31:29: 31:49
        return;                          // scope 0 at ui/binding/match-borrowed_str.rs:31:29: 31:49
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-borrowed_str.rs:35:15: 35:15
    let mut _1: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: std::string::String;         // in scope 0 at ui/binding/match-borrowed_str.rs:36:16: 36:23
    let mut _4: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:36:19: 36:22
    let _5: &str;                        // in scope 0 at ui/binding/match-borrowed_str.rs:36:19: 36:22
    let mut _6: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _7: std::string::String;         // in scope 0 at ui/binding/match-borrowed_str.rs:36:25: 36:46
    let mut _8: &str;                    // in scope 0 at ui/binding/match-borrowed_str.rs:36:25: 36:46
    let _9: &str;                        // in scope 0 at ui/binding/match-borrowed_str.rs:36:25: 36:34
    let _10: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _11: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _25: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _26: std::string::String;        // in scope 0 at ui/binding/match-borrowed_str.rs:37:16: 37:23
    let mut _27: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:37:19: 37:22
    let _28: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:37:19: 37:22
    let mut _29: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _30: std::string::String;        // in scope 0 at ui/binding/match-borrowed_str.rs:37:25: 37:48
    let mut _31: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:37:25: 37:48
    let _32: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:37:25: 37:36
    let _33: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _34: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _35: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _36: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _37: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _38: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _40: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _41: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _42: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _43: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _44: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _45: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _46: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _47: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _48: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _49: std::string::String;        // in scope 0 at ui/binding/match-borrowed_str.rs:38:16: 38:23
    let mut _50: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:38:19: 38:22
    let _51: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:38:19: 38:22
    let mut _52: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _53: std::string::String;        // in scope 0 at ui/binding/match-borrowed_str.rs:38:25: 38:48
    let mut _54: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:38:25: 38:48
    let _55: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:38:25: 38:36
    let _56: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _57: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _58: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _59: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _60: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _61: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _63: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _64: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _65: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _66: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _67: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _68: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _69: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _70: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _71: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _72: std::string::String;        // in scope 0 at ui/binding/match-borrowed_str.rs:39:16: 39:23
    let mut _73: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:39:19: 39:22
    let _74: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:39:19: 39:22
    let mut _75: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _76: std::string::String;        // in scope 0 at ui/binding/match-borrowed_str.rs:39:25: 39:46
    let mut _77: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:39:25: 39:46
    let _78: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:39:25: 39:34
    let _79: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _80: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _81: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _82: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _83: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _84: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _86: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _87: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _88: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _89: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _90: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _91: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _92: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _93: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _94: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _95: std::string::String;        // in scope 0 at ui/binding/match-borrowed_str.rs:40:16: 40:23
    let mut _96: &str;                   // in scope 0 at ui/binding/match-borrowed_str.rs:40:19: 40:22
    let _97: &str;                       // in scope 0 at ui/binding/match-borrowed_str.rs:40:19: 40:22
    let mut _98: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _99: std::string::String;        // in scope 0 at ui/binding/match-borrowed_str.rs:40:25: 40:52
    let mut _100: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:40:25: 40:52
    let _101: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:40:25: 40:40
    let _102: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _103: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _104: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _105: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _106: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _107: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _109: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _110: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _111: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _112: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _113: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _114: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _115: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _116: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _117: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _118: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:41:16: 41:23
    let mut _119: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:41:19: 41:22
    let _120: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:41:19: 41:22
    let mut _121: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _122: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:41:25: 41:52
    let mut _123: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:41:25: 41:52
    let _124: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:41:25: 41:40
    let _125: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _126: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _127: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _128: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _129: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _130: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _132: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _133: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _134: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _135: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _136: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _137: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _138: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _139: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _140: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _141: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:42:16: 42:28
    let mut _142: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:42:19: 42:22
    let _143: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:42:19: 42:22
    let mut _144: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:42:24: 42:27
    let _145: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:42:24: 42:27
    let mut _146: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _147: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:42:30: 42:53
    let mut _148: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:42:30: 42:53
    let _149: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:42:30: 42:41
    let _150: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _151: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _152: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _153: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _154: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _155: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _157: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _158: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _159: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _160: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _161: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _162: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _163: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _164: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _165: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _166: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:43:16: 43:28
    let mut _167: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:43:19: 43:22
    let _168: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:43:19: 43:22
    let mut _169: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:43:24: 43:27
    let _170: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:43:24: 43:27
    let mut _171: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _172: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:43:30: 43:53
    let mut _173: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:43:30: 43:53
    let _174: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:43:30: 43:41
    let _175: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _176: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _177: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _178: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _179: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _180: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _182: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _183: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _184: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _185: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _186: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _187: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _188: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _189: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _190: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _191: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:44:16: 44:28
    let mut _192: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:44:19: 44:22
    let _193: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:44:19: 44:22
    let mut _194: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:44:24: 44:27
    let _195: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:44:24: 44:27
    let mut _196: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _197: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:44:30: 44:53
    let mut _198: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:44:30: 44:53
    let _199: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:44:30: 44:41
    let _200: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _201: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _202: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _203: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _204: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _205: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _207: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _208: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _209: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _210: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _211: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _212: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _213: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _214: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _215: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _216: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:45:16: 45:28
    let mut _217: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:45:19: 45:22
    let _218: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:45:19: 45:22
    let mut _219: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:45:24: 45:27
    let _220: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:45:24: 45:27
    let mut _221: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _222: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:45:30: 45:53
    let mut _223: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:45:30: 45:53
    let _224: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:45:30: 45:41
    let _225: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _226: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _227: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _228: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _229: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _230: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _232: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _233: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _234: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _235: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _236: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _237: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _238: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _239: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _240: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _241: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:46:16: 46:28
    let mut _242: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:46:19: 46:22
    let _243: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:46:19: 46:22
    let mut _244: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:46:24: 46:27
    let _245: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:46:24: 46:27
    let mut _246: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _247: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:46:30: 46:60
    let mut _248: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:46:30: 46:60
    let _249: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:46:30: 46:48
    let _250: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _251: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _252: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _253: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _254: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _255: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _257: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _258: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _259: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _260: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _261: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _262: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _263: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _264: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _265: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _266: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:47:16: 47:28
    let mut _267: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:47:19: 47:22
    let _268: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:47:19: 47:22
    let mut _269: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:47:24: 47:27
    let _270: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:47:24: 47:27
    let mut _271: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _272: std::string::String;       // in scope 0 at ui/binding/match-borrowed_str.rs:47:30: 47:60
    let mut _273: &str;                  // in scope 0 at ui/binding/match-borrowed_str.rs:47:30: 47:60
    let _274: &str;                      // in scope 0 at ui/binding/match-borrowed_str.rs:47:30: 47:48
    let _275: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _276: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _277: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _278: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _279: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _280: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _282: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _283: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _284: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _285: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _286: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _287: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _288: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _10;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _11;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _16: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _16;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _33;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _34;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _39: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _39;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _56;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _57;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _62: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _62;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _79;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _80;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _85: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _85;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _102;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _103;         // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _108: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _108;          // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _125;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _126;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _131: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _131;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _150;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _151;         // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _156: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _156;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _175;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _176;         // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _181: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _181;          // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _200;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _201;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _206: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _206;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _225;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _226;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _231: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _231;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 21 {
        debug left_val => _250;          // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _251;         // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _256: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 22 {
            debug kind => _256;          // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 23 {
        debug left_val => _275;          // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _276;         // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _281: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 24 {
            debug kind => _281;          // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _5 = const "b";                  // scope 0 at ui/binding/match-borrowed_str.rs:36:19: 36:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:36:19: 36:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/binding/match-borrowed_str.rs:36:19: 36:22
        _3 = f1(move _4) -> bb1;         // scope 0 at ui/binding/match-borrowed_str.rs:36:16: 36:23
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:36:16: 36:18
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {f1}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _9 = const "found b";            // scope 0 at ui/binding/match-borrowed_str.rs:36:25: 36:34
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:36:25: 36:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/binding/match-borrowed_str.rs:36:25: 36:46
        _7 = <str as ToString>::to_string(move _8) -> [return: bb2, unwind: bb108]; // scope 0 at ui/binding/match-borrowed_str.rs:36:25: 36:46
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:36:35: 36:44
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_7;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _6);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_1.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_1.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = _10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = <String as PartialEq>::eq(move _14, move _15) -> [return: bb3, unwind: bb107]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = Not(move _13);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb5, otherwise: bb4]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _16 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<String, String>(move _18, move _19, move _21, move _23) -> bb107; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb5: {
        drop(_7) -> [return: bb6, unwind: bb108]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb6: {
        drop(_3) -> bb7;                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb7: {
        _28 = const "c";                 // scope 0 at ui/binding/match-borrowed_str.rs:37:19: 37:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:37:19: 37:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _27 = _28;                       // scope 0 at ui/binding/match-borrowed_str.rs:37:19: 37:22
        _26 = f1(move _27) -> bb8;       // scope 0 at ui/binding/match-borrowed_str.rs:37:16: 37:23
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:37:16: 37:18
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {f1}, val: Value(<ZST>) }
    }

    bb8: {
        _25 = &_26;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _32 = const "not found";         // scope 0 at ui/binding/match-borrowed_str.rs:37:25: 37:36
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:37:25: 37:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _31 = _32;                       // scope 0 at ui/binding/match-borrowed_str.rs:37:25: 37:48
        _30 = <str as ToString>::to_string(move _31) -> [return: bb9, unwind: bb106]; // scope 0 at ui/binding/match-borrowed_str.rs:37:25: 37:48
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:37:37: 37:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb9: {
        _29 = &_30;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _24 = (move _25, move _29);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _33 = (_24.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _34 = (_24.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _37 = _33;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _38 = _34;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _36 = <String as PartialEq>::eq(move _37, move _38) -> [return: bb10, unwind: bb105]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _35 = Not(move _36);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _35) -> [0: bb12, otherwise: bb11]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _39 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _41 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _43;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _45 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _44 = _45;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _40 = core::panicking::assert_failed::<String, String>(move _41, move _42, move _44, move _46) -> bb105; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb12: {
        drop(_30) -> [return: bb13, unwind: bb106]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb13: {
        drop(_26) -> bb14;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb14: {
        _51 = const "d";                 // scope 0 at ui/binding/match-borrowed_str.rs:38:19: 38:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:38:19: 38:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _50 = _51;                       // scope 0 at ui/binding/match-borrowed_str.rs:38:19: 38:22
        _49 = f1(move _50) -> bb15;      // scope 0 at ui/binding/match-borrowed_str.rs:38:16: 38:23
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:38:16: 38:18
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {f1}, val: Value(<ZST>) }
    }

    bb15: {
        _48 = &_49;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _55 = const "not found";         // scope 0 at ui/binding/match-borrowed_str.rs:38:25: 38:36
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:38:25: 38:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _54 = _55;                       // scope 0 at ui/binding/match-borrowed_str.rs:38:25: 38:48
        _53 = <str as ToString>::to_string(move _54) -> [return: bb16, unwind: bb104]; // scope 0 at ui/binding/match-borrowed_str.rs:38:25: 38:48
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:38:37: 38:46
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb16: {
        _52 = &_53;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _47 = (move _48, move _52);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _56 = (_47.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _57 = (_47.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _60 = _56;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _61 = _57;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _59 = <String as PartialEq>::eq(move _60, move _61) -> [return: bb17, unwind: bb103]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb17: {
        _58 = Not(move _59);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _58) -> [0: bb19, otherwise: bb18]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb18: {
        _62 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _64 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = _56;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _66;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _57;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _67 = _68;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _63 = core::panicking::assert_failed::<String, String>(move _64, move _65, move _67, move _69) -> bb103; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb19: {
        drop(_53) -> [return: bb20, unwind: bb104]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb20: {
        drop(_49) -> bb21;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb21: {
        _74 = const "b";                 // scope 0 at ui/binding/match-borrowed_str.rs:39:19: 39:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:39:19: 39:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _73 = _74;                       // scope 0 at ui/binding/match-borrowed_str.rs:39:19: 39:22
        _72 = f2(move _73) -> bb22;      // scope 0 at ui/binding/match-borrowed_str.rs:39:16: 39:23
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:39:16: 39:18
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {f2}, val: Value(<ZST>) }
    }

    bb22: {
        _71 = &_72;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _78 = const "found b";           // scope 0 at ui/binding/match-borrowed_str.rs:39:25: 39:34
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:39:25: 39:34
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _77 = _78;                       // scope 0 at ui/binding/match-borrowed_str.rs:39:25: 39:46
        _76 = <str as ToString>::to_string(move _77) -> [return: bb23, unwind: bb102]; // scope 0 at ui/binding/match-borrowed_str.rs:39:25: 39:46
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:39:35: 39:44
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb23: {
        _75 = &_76;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _70 = (move _71, move _75);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _79 = (_70.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _80 = (_70.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _83 = _79;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _84 = _80;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _82 = <String as PartialEq>::eq(move _83, move _84) -> [return: bb24, unwind: bb101]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        _81 = Not(move _82);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _81) -> [0: bb26, otherwise: bb25]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _85 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _87 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _89 = _79;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _88 = _89;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _91 = _80;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _90 = _91;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _92 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _86 = core::panicking::assert_failed::<String, String>(move _87, move _88, move _90, move _92) -> bb101; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb26: {
        drop(_76) -> [return: bb27, unwind: bb102]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb27: {
        drop(_72) -> bb28;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb28: {
        _97 = const "c";                 // scope 0 at ui/binding/match-borrowed_str.rs:40:19: 40:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:40:19: 40:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _96 = _97;                       // scope 0 at ui/binding/match-borrowed_str.rs:40:19: 40:22
        _95 = f2(move _96) -> bb29;      // scope 0 at ui/binding/match-borrowed_str.rs:40:16: 40:23
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:40:16: 40:18
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {f2}, val: Value(<ZST>) }
    }

    bb29: {
        _94 = &_95;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _101 = const "not found (c)";    // scope 0 at ui/binding/match-borrowed_str.rs:40:25: 40:40
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:40:25: 40:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _100 = _101;                     // scope 0 at ui/binding/match-borrowed_str.rs:40:25: 40:52
        _99 = <str as ToString>::to_string(move _100) -> [return: bb30, unwind: bb100]; // scope 0 at ui/binding/match-borrowed_str.rs:40:25: 40:52
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:40:41: 40:50
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb30: {
        _98 = &_99;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _93 = (move _94, move _98);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _102 = (_93.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _103 = (_93.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _106 = _102;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _107 = _103;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _105 = <String as PartialEq>::eq(move _106, move _107) -> [return: bb31, unwind: bb99]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb31: {
        _104 = Not(move _105);           // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _104) -> [0: bb33, otherwise: bb32]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb32: {
        _108 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _110 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _112 = _102;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _111 = _112;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _114 = _103;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _113 = _114;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _115 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _109 = core::panicking::assert_failed::<String, String>(move _110, move _111, move _113, move _115) -> bb99; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb33: {
        drop(_99) -> [return: bb34, unwind: bb100]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb34: {
        drop(_95) -> bb35;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb35: {
        _120 = const "d";                // scope 0 at ui/binding/match-borrowed_str.rs:41:19: 41:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:41:19: 41:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _119 = _120;                     // scope 0 at ui/binding/match-borrowed_str.rs:41:19: 41:22
        _118 = f2(move _119) -> bb36;    // scope 0 at ui/binding/match-borrowed_str.rs:41:16: 41:23
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:41:16: 41:18
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {f2}, val: Value(<ZST>) }
    }

    bb36: {
        _117 = &_118;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _124 = const "not found (d)";    // scope 0 at ui/binding/match-borrowed_str.rs:41:25: 41:40
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:41:25: 41:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _123 = _124;                     // scope 0 at ui/binding/match-borrowed_str.rs:41:25: 41:52
        _122 = <str as ToString>::to_string(move _123) -> [return: bb37, unwind: bb98]; // scope 0 at ui/binding/match-borrowed_str.rs:41:25: 41:52
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:41:41: 41:50
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb37: {
        _121 = &_122;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _116 = (move _117, move _121);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _125 = (_116.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _126 = (_116.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _129 = _125;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _130 = _126;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _128 = <String as PartialEq>::eq(move _129, move _130) -> [return: bb38, unwind: bb97]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb38: {
        _127 = Not(move _128);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _127) -> [0: bb40, otherwise: bb39]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb39: {
        _131 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _133 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _135 = _125;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _134 = _135;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _137 = _126;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _136 = _137;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _138 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _132 = core::panicking::assert_failed::<String, String>(move _133, move _134, move _136, move _138) -> bb97; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb40: {
        drop(_122) -> [return: bb41, unwind: bb98]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb41: {
        drop(_118) -> bb42;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb42: {
        _143 = const "b";                // scope 0 at ui/binding/match-borrowed_str.rs:42:19: 42:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:42:19: 42:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _142 = _143;                     // scope 0 at ui/binding/match-borrowed_str.rs:42:19: 42:22
        _145 = const "c";                // scope 0 at ui/binding/match-borrowed_str.rs:42:24: 42:27
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:42:24: 42:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _144 = _145;                     // scope 0 at ui/binding/match-borrowed_str.rs:42:24: 42:27
        _141 = g1(move _142, move _144) -> bb43; // scope 0 at ui/binding/match-borrowed_str.rs:42:16: 42:28
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:42:16: 42:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> String {g1}, val: Value(<ZST>) }
    }

    bb43: {
        _140 = &_141;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _149 = const "found b,c";        // scope 0 at ui/binding/match-borrowed_str.rs:42:30: 42:41
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:42:30: 42:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _148 = _149;                     // scope 0 at ui/binding/match-borrowed_str.rs:42:30: 42:53
        _147 = <str as ToString>::to_string(move _148) -> [return: bb44, unwind: bb96]; // scope 0 at ui/binding/match-borrowed_str.rs:42:30: 42:53
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:42:42: 42:51
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb44: {
        _146 = &_147;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _139 = (move _140, move _146);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _150 = (_139.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _151 = (_139.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _154 = _150;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _155 = _151;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _153 = <String as PartialEq>::eq(move _154, move _155) -> [return: bb45, unwind: bb95]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb45: {
        _152 = Not(move _153);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _152) -> [0: bb47, otherwise: bb46]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb46: {
        _156 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _158 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _160 = _150;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _159 = _160;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _162 = _151;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _161 = _162;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _163 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _157 = core::panicking::assert_failed::<String, String>(move _158, move _159, move _161, move _163) -> bb95; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb47: {
        drop(_147) -> [return: bb48, unwind: bb96]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb48: {
        drop(_141) -> bb49;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb49: {
        _168 = const "c";                // scope 0 at ui/binding/match-borrowed_str.rs:43:19: 43:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:43:19: 43:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _167 = _168;                     // scope 0 at ui/binding/match-borrowed_str.rs:43:19: 43:22
        _170 = const "d";                // scope 0 at ui/binding/match-borrowed_str.rs:43:24: 43:27
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:43:24: 43:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _169 = _170;                     // scope 0 at ui/binding/match-borrowed_str.rs:43:24: 43:27
        _166 = g1(move _167, move _169) -> bb50; // scope 0 at ui/binding/match-borrowed_str.rs:43:16: 43:28
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:43:16: 43:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> String {g1}, val: Value(<ZST>) }
    }

    bb50: {
        _165 = &_166;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _174 = const "not found";        // scope 0 at ui/binding/match-borrowed_str.rs:43:30: 43:41
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:43:30: 43:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _173 = _174;                     // scope 0 at ui/binding/match-borrowed_str.rs:43:30: 43:53
        _172 = <str as ToString>::to_string(move _173) -> [return: bb51, unwind: bb94]; // scope 0 at ui/binding/match-borrowed_str.rs:43:30: 43:53
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:43:42: 43:51
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb51: {
        _171 = &_172;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _164 = (move _165, move _171);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _175 = (_164.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _176 = (_164.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _179 = _175;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _180 = _176;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _178 = <String as PartialEq>::eq(move _179, move _180) -> [return: bb52, unwind: bb93]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb52: {
        _177 = Not(move _178);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _177) -> [0: bb54, otherwise: bb53]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb53: {
        _181 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _183 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _185 = _175;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _184 = _185;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _187 = _176;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _186 = _187;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _188 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _182 = core::panicking::assert_failed::<String, String>(move _183, move _184, move _186, move _188) -> bb93; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb54: {
        drop(_172) -> [return: bb55, unwind: bb94]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb55: {
        drop(_166) -> bb56;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb56: {
        _193 = const "d";                // scope 0 at ui/binding/match-borrowed_str.rs:44:19: 44:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:44:19: 44:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _192 = _193;                     // scope 0 at ui/binding/match-borrowed_str.rs:44:19: 44:22
        _195 = const "e";                // scope 0 at ui/binding/match-borrowed_str.rs:44:24: 44:27
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:44:24: 44:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _194 = _195;                     // scope 0 at ui/binding/match-borrowed_str.rs:44:24: 44:27
        _191 = g1(move _192, move _194) -> bb57; // scope 0 at ui/binding/match-borrowed_str.rs:44:16: 44:28
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:44:16: 44:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> String {g1}, val: Value(<ZST>) }
    }

    bb57: {
        _190 = &_191;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _199 = const "not found";        // scope 0 at ui/binding/match-borrowed_str.rs:44:30: 44:41
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:44:30: 44:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _198 = _199;                     // scope 0 at ui/binding/match-borrowed_str.rs:44:30: 44:53
        _197 = <str as ToString>::to_string(move _198) -> [return: bb58, unwind: bb92]; // scope 0 at ui/binding/match-borrowed_str.rs:44:30: 44:53
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:44:42: 44:51
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb58: {
        _196 = &_197;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _189 = (move _190, move _196);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _200 = (_189.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _201 = (_189.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _204 = _200;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _205 = _201;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _203 = <String as PartialEq>::eq(move _204, move _205) -> [return: bb59, unwind: bb91]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb59: {
        _202 = Not(move _203);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _202) -> [0: bb61, otherwise: bb60]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb60: {
        _206 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _208 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _210 = _200;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _209 = _210;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _212 = _201;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _211 = _212;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _213 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _207 = core::panicking::assert_failed::<String, String>(move _208, move _209, move _211, move _213) -> bb91; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb61: {
        drop(_197) -> [return: bb62, unwind: bb92]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb62: {
        drop(_191) -> bb63;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb63: {
        _218 = const "b";                // scope 0 at ui/binding/match-borrowed_str.rs:45:19: 45:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:45:19: 45:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _217 = _218;                     // scope 0 at ui/binding/match-borrowed_str.rs:45:19: 45:22
        _220 = const "c";                // scope 0 at ui/binding/match-borrowed_str.rs:45:24: 45:27
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:45:24: 45:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _219 = _220;                     // scope 0 at ui/binding/match-borrowed_str.rs:45:24: 45:27
        _216 = g2(move _217, move _219) -> bb64; // scope 0 at ui/binding/match-borrowed_str.rs:45:16: 45:28
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:45:16: 45:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> String {g2}, val: Value(<ZST>) }
    }

    bb64: {
        _215 = &_216;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _224 = const "found b,c";        // scope 0 at ui/binding/match-borrowed_str.rs:45:30: 45:41
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:45:30: 45:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _223 = _224;                     // scope 0 at ui/binding/match-borrowed_str.rs:45:30: 45:53
        _222 = <str as ToString>::to_string(move _223) -> [return: bb65, unwind: bb90]; // scope 0 at ui/binding/match-borrowed_str.rs:45:30: 45:53
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:45:42: 45:51
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb65: {
        _221 = &_222;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _214 = (move _215, move _221);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _225 = (_214.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _226 = (_214.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _229 = _225;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _230 = _226;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _228 = <String as PartialEq>::eq(move _229, move _230) -> [return: bb66, unwind: bb89]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb66: {
        _227 = Not(move _228);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _227) -> [0: bb68, otherwise: bb67]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb67: {
        _231 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _233 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _235 = _225;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _234 = _235;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _237 = _226;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _236 = _237;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _238 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _232 = core::panicking::assert_failed::<String, String>(move _233, move _234, move _236, move _238) -> bb89; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb68: {
        drop(_222) -> [return: bb69, unwind: bb90]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb69: {
        drop(_216) -> bb70;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb70: {
        _243 = const "c";                // scope 0 at ui/binding/match-borrowed_str.rs:46:19: 46:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:46:19: 46:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _242 = _243;                     // scope 0 at ui/binding/match-borrowed_str.rs:46:19: 46:22
        _245 = const "d";                // scope 0 at ui/binding/match-borrowed_str.rs:46:24: 46:27
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:46:24: 46:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _244 = _245;                     // scope 0 at ui/binding/match-borrowed_str.rs:46:24: 46:27
        _241 = g2(move _242, move _244) -> bb71; // scope 0 at ui/binding/match-borrowed_str.rs:46:16: 46:28
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:46:16: 46:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> String {g2}, val: Value(<ZST>) }
    }

    bb71: {
        _240 = &_241;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _249 = const "not found (c, d)"; // scope 0 at ui/binding/match-borrowed_str.rs:46:30: 46:48
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:46:30: 46:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _248 = _249;                     // scope 0 at ui/binding/match-borrowed_str.rs:46:30: 46:60
        _247 = <str as ToString>::to_string(move _248) -> [return: bb72, unwind: bb88]; // scope 0 at ui/binding/match-borrowed_str.rs:46:30: 46:60
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:46:49: 46:58
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb72: {
        _246 = &_247;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _239 = (move _240, move _246);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _250 = (_239.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _251 = (_239.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _254 = _250;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _255 = _251;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _253 = <String as PartialEq>::eq(move _254, move _255) -> [return: bb73, unwind: bb87]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb73: {
        _252 = Not(move _253);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _252) -> [0: bb75, otherwise: bb74]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb74: {
        _256 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _258 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _260 = _250;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _259 = _260;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _262 = _251;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _261 = _262;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _263 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _257 = core::panicking::assert_failed::<String, String>(move _258, move _259, move _261, move _263) -> bb87; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb75: {
        drop(_247) -> [return: bb76, unwind: bb88]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb76: {
        drop(_241) -> bb77;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb77: {
        _268 = const "d";                // scope 0 at ui/binding/match-borrowed_str.rs:47:19: 47:22
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:47:19: 47:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _267 = _268;                     // scope 0 at ui/binding/match-borrowed_str.rs:47:19: 47:22
        _270 = const "e";                // scope 0 at ui/binding/match-borrowed_str.rs:47:24: 47:27
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:47:24: 47:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _269 = _270;                     // scope 0 at ui/binding/match-borrowed_str.rs:47:24: 47:27
        _266 = g2(move _267, move _269) -> bb78; // scope 0 at ui/binding/match-borrowed_str.rs:47:16: 47:28
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:47:16: 47:18
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> String {g2}, val: Value(<ZST>) }
    }

    bb78: {
        _265 = &_266;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _274 = const "not found (d, e)"; // scope 0 at ui/binding/match-borrowed_str.rs:47:30: 47:48
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:47:30: 47:48
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _273 = _274;                     // scope 0 at ui/binding/match-borrowed_str.rs:47:30: 47:60
        _272 = <str as ToString>::to_string(move _273) -> [return: bb79, unwind: bb86]; // scope 0 at ui/binding/match-borrowed_str.rs:47:30: 47:60
                                         // mir::Constant
                                         // + span: ui/binding/match-borrowed_str.rs:47:49: 47:58
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb79: {
        _271 = &_272;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _264 = (move _265, move _271);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _275 = (_264.0: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _276 = (_264.1: &std::string::String); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _279 = _275;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _280 = _276;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _278 = <String as PartialEq>::eq(move _279, move _280) -> [return: bb80, unwind: bb85]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb80: {
        _277 = Not(move _278);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _277) -> [0: bb82, otherwise: bb81]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb81: {
        _281 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _283 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _285 = _275;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _284 = _285;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _287 = _276;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _286 = _287;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _288 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _282 = core::panicking::assert_failed::<String, String>(move _283, move _284, move _286, move _288) -> bb85; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb82: {
        drop(_272) -> [return: bb83, unwind: bb86]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb83: {
        drop(_266) -> bb84;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb84: {
        return;                          // scope 0 at ui/binding/match-borrowed_str.rs:48:2: 48:2
    }

    bb85 (cleanup): {
        drop(_272) -> bb86;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb86 (cleanup): {
        drop(_266) -> bb109;             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb87 (cleanup): {
        drop(_247) -> bb88;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb88 (cleanup): {
        drop(_241) -> bb109;             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb89 (cleanup): {
        drop(_222) -> bb90;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb90 (cleanup): {
        drop(_216) -> bb109;             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb91 (cleanup): {
        drop(_197) -> bb92;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb92 (cleanup): {
        drop(_191) -> bb109;             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb93 (cleanup): {
        drop(_172) -> bb94;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb94 (cleanup): {
        drop(_166) -> bb109;             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb95 (cleanup): {
        drop(_147) -> bb96;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb96 (cleanup): {
        drop(_141) -> bb109;             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb97 (cleanup): {
        drop(_122) -> bb98;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb98 (cleanup): {
        drop(_118) -> bb109;             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb99 (cleanup): {
        drop(_99) -> bb100;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb100 (cleanup): {
        drop(_95) -> bb109;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb101 (cleanup): {
        drop(_76) -> bb102;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb102 (cleanup): {
        drop(_72) -> bb109;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb103 (cleanup): {
        drop(_53) -> bb104;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb104 (cleanup): {
        drop(_49) -> bb109;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb105 (cleanup): {
        drop(_30) -> bb106;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb106 (cleanup): {
        drop(_26) -> bb109;              // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb107 (cleanup): {
        drop(_7) -> bb108;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb108 (cleanup): {
        drop(_3) -> bb109;               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb109 (cleanup): {
        resume;                          // scope 0 at ui/binding/match-borrowed_str.rs:35:1: 48:2
    }
}
