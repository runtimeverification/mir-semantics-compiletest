// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: &String) -> bool {
    debug s => _1;                       // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:3:8: 3:9
    let mut _0: bool;                    // return place in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:3:23: 3:27
    let mut _2: &str;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:4:11: 4:15
    let _3: &str;                        // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:4:12: 4:15
    let mut _4: &std::string::String;    // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:4:13: 4:15
    let mut _5: bool;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:5:9: 5:16

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:4:13: 4:15
        _3 = <String as Deref>::deref(move _4) -> bb1; // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:4:12: 4:15
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:4:12: 4:15
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:4:11: 4:15
        _5 = <str as PartialEq>::eq(_2, const "kitty") -> bb2; // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:5:9: 5:16
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:5:9: 5:16
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {<str as PartialEq>::eq}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:5:9: 5:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb2: {
        switchInt(move _5) -> [0: bb3, otherwise: bb4]; // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:5:9: 5:16
    }

    bb3: {
        _0 = const false;                // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:6:14: 6:19
        goto -> bb5;                     // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:6:14: 6:19
    }

    bb4: {
        _0 = const true;                 // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:5:20: 5:24
        goto -> bb5;                     // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:5:20: 5:24
    }

    bb5: {
        return;                          // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:8:2: 8:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:10:15: 10:15
    let mut _1: bool;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:5: 11:39
    let mut _2: bool;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:13: 11:38
    let mut _3: &std::string::String;    // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:17: 11:37
    let _4: &std::string::String;        // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:17: 11:37
    let _5: std::string::String;         // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:18: 11:37
    let mut _6: &str;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:18: 11:37
    let _7: &str;                        // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:18: 11:25
    let mut _8: !;                       // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:5: 11:39
    let mut _9: bool;                    // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:5: 12:39
    let mut _10: bool;                   // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:13: 12:38
    let mut _11: bool;                   // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:14: 12:38
    let mut _12: &std::string::String;   // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:18: 12:37
    let _13: &std::string::String;       // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:18: 12:37
    let _14: std::string::String;        // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:19: 12:37
    let mut _15: &str;                   // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:19: 12:37
    let _16: &str;                       // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:19: 12:25
    let mut _17: !;                      // in scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:5: 12:39

    bb0: {
        _7 = const "kitty";              // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:18: 11:25
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:11:18: 11:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:18: 11:37
        _5 = <str as ToString>::to_string(move _6) -> bb1; // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:18: 11:37
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:11:26: 11:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = &_5;                        // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:17: 11:37
        _3 = _4;                         // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:17: 11:37
        _2 = foo(move _3) -> [return: bb2, unwind: bb12]; // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:13: 11:38
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:11:13: 11:16
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> bool {foo}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = Not(move _2);               // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:5: 11:39
        drop(_5) -> bb3;                 // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:38: 11:39
    }

    bb3: {
        switchInt(move _1) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:5: 11:39
    }

    bb4: {
        _8 = core::panicking::panic(const "assertion failed: foo(&\\\"kitty\\\".to_string())"); // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:5: 11:39
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:11:5: 11:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        _16 = const "gata";              // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:19: 12:25
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:12:19: 12:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _15 = _16;                       // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:19: 12:37
        _14 = <str as ToString>::to_string(move _15) -> bb6; // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:19: 12:37
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:12:26: 12:35
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb6: {
        _13 = &_14;                      // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:18: 12:37
        _12 = _13;                       // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:18: 12:37
        _11 = foo(move _12) -> [return: bb7, unwind: bb11]; // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:14: 12:38
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:12:14: 12:17
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> bool {foo}, val: Value(<ZST>) }
    }

    bb7: {
        _10 = Not(move _11);             // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:13: 12:38
        _9 = Not(move _10);              // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:5: 12:39
        drop(_14) -> bb8;                // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:38: 12:39
    }

    bb8: {
        switchInt(move _9) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:5: 12:39
    }

    bb9: {
        _17 = core::panicking::panic(const "assertion failed: !foo(&\\\"gata\\\".to_string())"); // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:5: 12:39
                                         // mir::Constant
                                         // + span: ui/binding/borrowed-ptr-pattern-2.rs:12:5: 12:39
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        return;                          // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:13:2: 13:2
    }

    bb11 (cleanup): {
        drop(_14) -> bb13;               // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:12:38: 12:39
    }

    bb12 (cleanup): {
        drop(_5) -> bb13;                // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:11:38: 11:39
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/binding/borrowed-ptr-pattern-2.rs:10:1: 13:2
    }
}
