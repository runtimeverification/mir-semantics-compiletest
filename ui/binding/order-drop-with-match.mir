// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut ORDER: [usize; 3] = {
    let mut _0: [usize; 3];              // return place in scope 0 at ui/binding/order-drop-with-match.rs:9:19: 9:29

    bb0: {
        _0 = [const 0_usize, const 0_usize, const 0_usize]; // scope 0 at ui/binding/order-drop-with-match.rs:9:32: 9:41
        return;                          // scope 0 at ui/binding/order-drop-with-match.rs:9:1: 9:42
    }
}

ORDER::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/binding/order-drop-with-match.rs:9:27: 9:28

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/binding/order-drop-with-match.rs:9:27: 9:28
        return;                          // scope 0 at ui/binding/order-drop-with-match.rs:9:27: 9:28
    }
}

static mut INDEX: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/binding/order-drop-with-match.rs:10:19: 10:24

    bb0: {
        _0 = const 0_usize;              // scope 0 at ui/binding/order-drop-with-match.rs:10:27: 10:28
        return;                          // scope 0 at ui/binding/order-drop-with-match.rs:10:1: 10:29
    }
}

fn <impl at ui/binding/order-drop-with-match.rs:13:1: 13:16>::drop(_1: &mut A) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/order-drop-with-match.rs:14:13: 14:22
    let mut _0: ();                      // return place in scope 0 at ui/binding/order-drop-with-match.rs:14:24: 14:24
    let mut _2: *mut [usize; 3];         // in scope 0 at ui/binding/order-drop-with-match.rs:16:13: 16:18
    let _3: usize;                       // in scope 0 at ui/binding/order-drop-with-match.rs:16:19: 16:24
    let mut _4: *mut usize;              // in scope 0 at ui/binding/order-drop-with-match.rs:16:19: 16:24
    let mut _5: usize;                   // in scope 0 at ui/binding/order-drop-with-match.rs:16:13: 16:25
    let mut _6: bool;                    // in scope 0 at ui/binding/order-drop-with-match.rs:16:13: 16:25
    let mut _7: usize;                   // in scope 0 at ui/binding/order-drop-with-match.rs:17:21: 17:26
    let mut _8: *mut usize;              // in scope 0 at ui/binding/order-drop-with-match.rs:17:21: 17:26
    let mut _9: (usize, bool);           // in scope 0 at ui/binding/order-drop-with-match.rs:17:21: 17:30
    let mut _10: *mut usize;             // in scope 0 at ui/binding/order-drop-with-match.rs:17:13: 17:18
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut [usize; 3]}; // scope 1 at ui/binding/order-drop-with-match.rs:16:13: 16:18
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:16:13: 16:18
                                         // + literal: Const { ty: *mut [usize; 3], val: Value(Scalar(alloc1)) }
        _4 = const {alloc2: *mut usize}; // scope 1 at ui/binding/order-drop-with-match.rs:16:19: 16:24
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:16:19: 16:24
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _3 = (*_4);                      // scope 1 at ui/binding/order-drop-with-match.rs:16:19: 16:24
        _5 = const 3_usize;              // scope 1 at ui/binding/order-drop-with-match.rs:16:13: 16:25
        _6 = Lt(_3, _5);                 // scope 1 at ui/binding/order-drop-with-match.rs:16:13: 16:25
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _3) -> bb1; // scope 1 at ui/binding/order-drop-with-match.rs:16:13: 16:25
    }

    bb1: {
        (*_2)[_3] = const 1_usize;       // scope 1 at ui/binding/order-drop-with-match.rs:16:13: 16:29
        _8 = const {alloc2: *mut usize}; // scope 1 at ui/binding/order-drop-with-match.rs:17:21: 17:26
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:17:21: 17:26
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _7 = (*_8);                      // scope 1 at ui/binding/order-drop-with-match.rs:17:21: 17:26
        _9 = CheckedAdd(_7, const 1_usize); // scope 1 at ui/binding/order-drop-with-match.rs:17:21: 17:30
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> bb2; // scope 1 at ui/binding/order-drop-with-match.rs:17:21: 17:30
    }

    bb2: {
        _10 = const {alloc2: *mut usize}; // scope 1 at ui/binding/order-drop-with-match.rs:17:13: 17:18
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:17:13: 17:18
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        (*_10) = move (_9.0: usize);     // scope 1 at ui/binding/order-drop-with-match.rs:17:13: 17:30
        return;                          // scope 0 at ui/binding/order-drop-with-match.rs:19:6: 19:6
    }
}

alloc2 (static: INDEX, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/binding/order-drop-with-match.rs:23:1: 23:16>::drop(_1: &mut B) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/order-drop-with-match.rs:24:13: 24:22
    let mut _0: ();                      // return place in scope 0 at ui/binding/order-drop-with-match.rs:24:24: 24:24
    let mut _2: *mut [usize; 3];         // in scope 0 at ui/binding/order-drop-with-match.rs:26:13: 26:18
    let _3: usize;                       // in scope 0 at ui/binding/order-drop-with-match.rs:26:19: 26:24
    let mut _4: *mut usize;              // in scope 0 at ui/binding/order-drop-with-match.rs:26:19: 26:24
    let mut _5: usize;                   // in scope 0 at ui/binding/order-drop-with-match.rs:26:13: 26:25
    let mut _6: bool;                    // in scope 0 at ui/binding/order-drop-with-match.rs:26:13: 26:25
    let mut _7: usize;                   // in scope 0 at ui/binding/order-drop-with-match.rs:27:21: 27:26
    let mut _8: *mut usize;              // in scope 0 at ui/binding/order-drop-with-match.rs:27:21: 27:26
    let mut _9: (usize, bool);           // in scope 0 at ui/binding/order-drop-with-match.rs:27:21: 27:30
    let mut _10: *mut usize;             // in scope 0 at ui/binding/order-drop-with-match.rs:27:13: 27:18
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut [usize; 3]}; // scope 1 at ui/binding/order-drop-with-match.rs:26:13: 26:18
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:26:13: 26:18
                                         // + literal: Const { ty: *mut [usize; 3], val: Value(Scalar(alloc1)) }
        _4 = const {alloc2: *mut usize}; // scope 1 at ui/binding/order-drop-with-match.rs:26:19: 26:24
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:26:19: 26:24
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _3 = (*_4);                      // scope 1 at ui/binding/order-drop-with-match.rs:26:19: 26:24
        _5 = const 3_usize;              // scope 1 at ui/binding/order-drop-with-match.rs:26:13: 26:25
        _6 = Lt(_3, _5);                 // scope 1 at ui/binding/order-drop-with-match.rs:26:13: 26:25
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _3) -> bb1; // scope 1 at ui/binding/order-drop-with-match.rs:26:13: 26:25
    }

    bb1: {
        (*_2)[_3] = const 2_usize;       // scope 1 at ui/binding/order-drop-with-match.rs:26:13: 26:29
        _8 = const {alloc2: *mut usize}; // scope 1 at ui/binding/order-drop-with-match.rs:27:21: 27:26
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:27:21: 27:26
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _7 = (*_8);                      // scope 1 at ui/binding/order-drop-with-match.rs:27:21: 27:26
        _9 = CheckedAdd(_7, const 1_usize); // scope 1 at ui/binding/order-drop-with-match.rs:27:21: 27:30
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> bb2; // scope 1 at ui/binding/order-drop-with-match.rs:27:21: 27:30
    }

    bb2: {
        _10 = const {alloc2: *mut usize}; // scope 1 at ui/binding/order-drop-with-match.rs:27:13: 27:18
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:27:13: 27:18
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        (*_10) = move (_9.0: usize);     // scope 1 at ui/binding/order-drop-with-match.rs:27:13: 27:30
        return;                          // scope 0 at ui/binding/order-drop-with-match.rs:29:6: 29:6
    }
}

alloc2 (static: INDEX, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/binding/order-drop-with-match.rs:33:1: 33:16>::drop(_1: &mut C) -> () {
    debug self => _1;                    // in scope 0 at ui/binding/order-drop-with-match.rs:34:13: 34:22
    let mut _0: ();                      // return place in scope 0 at ui/binding/order-drop-with-match.rs:34:24: 34:24
    let mut _2: *mut [usize; 3];         // in scope 0 at ui/binding/order-drop-with-match.rs:36:13: 36:18
    let _3: usize;                       // in scope 0 at ui/binding/order-drop-with-match.rs:36:19: 36:24
    let mut _4: *mut usize;              // in scope 0 at ui/binding/order-drop-with-match.rs:36:19: 36:24
    let mut _5: usize;                   // in scope 0 at ui/binding/order-drop-with-match.rs:36:13: 36:25
    let mut _6: bool;                    // in scope 0 at ui/binding/order-drop-with-match.rs:36:13: 36:25
    let mut _7: usize;                   // in scope 0 at ui/binding/order-drop-with-match.rs:37:21: 37:26
    let mut _8: *mut usize;              // in scope 0 at ui/binding/order-drop-with-match.rs:37:21: 37:26
    let mut _9: (usize, bool);           // in scope 0 at ui/binding/order-drop-with-match.rs:37:21: 37:30
    let mut _10: *mut usize;             // in scope 0 at ui/binding/order-drop-with-match.rs:37:13: 37:18
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut [usize; 3]}; // scope 1 at ui/binding/order-drop-with-match.rs:36:13: 36:18
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:36:13: 36:18
                                         // + literal: Const { ty: *mut [usize; 3], val: Value(Scalar(alloc1)) }
        _4 = const {alloc2: *mut usize}; // scope 1 at ui/binding/order-drop-with-match.rs:36:19: 36:24
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:36:19: 36:24
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _3 = (*_4);                      // scope 1 at ui/binding/order-drop-with-match.rs:36:19: 36:24
        _5 = const 3_usize;              // scope 1 at ui/binding/order-drop-with-match.rs:36:13: 36:25
        _6 = Lt(_3, _5);                 // scope 1 at ui/binding/order-drop-with-match.rs:36:13: 36:25
        assert(move _6, "index out of bounds: the length is {} but the index is {}", move _5, _3) -> bb1; // scope 1 at ui/binding/order-drop-with-match.rs:36:13: 36:25
    }

    bb1: {
        (*_2)[_3] = const 3_usize;       // scope 1 at ui/binding/order-drop-with-match.rs:36:13: 36:29
        _8 = const {alloc2: *mut usize}; // scope 1 at ui/binding/order-drop-with-match.rs:37:21: 37:26
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:37:21: 37:26
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        _7 = (*_8);                      // scope 1 at ui/binding/order-drop-with-match.rs:37:21: 37:26
        _9 = CheckedAdd(_7, const 1_usize); // scope 1 at ui/binding/order-drop-with-match.rs:37:21: 37:30
        assert(!move (_9.1: bool), "attempt to compute `{} + {}`, which would overflow", move _7, const 1_usize) -> bb2; // scope 1 at ui/binding/order-drop-with-match.rs:37:21: 37:30
    }

    bb2: {
        _10 = const {alloc2: *mut usize}; // scope 1 at ui/binding/order-drop-with-match.rs:37:13: 37:18
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:37:13: 37:18
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc2)) }
        (*_10) = move (_9.0: usize);     // scope 1 at ui/binding/order-drop-with-match.rs:37:13: 37:30
        return;                          // scope 0 at ui/binding/order-drop-with-match.rs:39:6: 39:6
    }
}

alloc2 (static: INDEX, size: 8, align: 8) {
    00 00 00 00 00 00 00 00                         │ ........
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/order-drop-with-match.rs:42:11: 42:11
    let _1: A;                           // in scope 0 at ui/binding/order-drop-with-match.rs:44:13: 44:20
    let mut _6: &[usize; 3];             // in scope 0 at ui/binding/order-drop-with-match.rs:54:30: 54:40
    let _7: &[usize; 3];                 // in scope 0 at ui/binding/order-drop-with-match.rs:54:30: 54:40
    let mut _8: (&&[usize], &[usize; 3]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &&[usize];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &[usize; 3];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: *mut [usize; 3];            // in scope 0 at ui/binding/order-drop-with-match.rs:55:30: 55:35
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: &&[usize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: &[usize; 3];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &&[usize];              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &&[usize];                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &[usize; 3];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &[usize; 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug matched => _1;             // in scope 1 at ui/binding/order-drop-with-match.rs:44:13: 44:20
        let _2: C;                       // in scope 1 at ui/binding/order-drop-with-match.rs:45:13: 45:19
        scope 2 {
            debug _outer => _2;          // in scope 2 at ui/binding/order-drop-with-match.rs:45:13: 45:19
            let _3: A;                   // in scope 2 at ui/binding/order-drop-with-match.rs:48:17: 48:19
            let _4: B;                   // in scope 2 at ui/binding/order-drop-with-match.rs:50:17: 50:23
            scope 3 {
                debug _s => _3;          // in scope 3 at ui/binding/order-drop-with-match.rs:48:17: 48:19
            }
            scope 4 {
                debug _inner => _4;      // in scope 4 at ui/binding/order-drop-with-match.rs:50:17: 50:23
            }
        }
    }
    scope 5 {
        let _5: &[usize];                // in scope 5 at ui/binding/order-drop-with-match.rs:54:13: 54:21
        let mut _26: &[usize; 3];        // in scope 5 at ui/binding/order-drop-with-match.rs:54:30: 54:40
        scope 6 {
            debug expected => _5;        // in scope 6 at ui/binding/order-drop-with-match.rs:54:13: 54:21
            let _12: &&[usize];          // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _13: &[usize; 3];        // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            scope 7 {
                debug left_val => _12;   // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _13;  // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _18: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 8 {
                    debug kind => _18;   // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        drop(_3) -> [return: bb1, unwind: bb7]; // scope 2 at ui/binding/order-drop-with-match.rs:48:24: 48:25
    }

    bb1: {
        drop(_4) -> [return: bb2, unwind: bb7]; // scope 2 at ui/binding/order-drop-with-match.rs:51:9: 51:10
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 1 at ui/binding/order-drop-with-match.rs:52:5: 52:6
    }

    bb3: {
        _26 = const _;                   // scope 5 at ui/binding/order-drop-with-match.rs:54:30: 54:40
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:54:30: 54:40
                                         // + literal: Const { ty: &[usize; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _7 = _26;                        // scope 5 at ui/binding/order-drop-with-match.rs:54:30: 54:40
        _6 = _7;                         // scope 5 at ui/binding/order-drop-with-match.rs:54:30: 54:40
        _5 = move _6 as &[usize] (Pointer(Unsize)); // scope 5 at ui/binding/order-drop-with-match.rs:54:30: 54:40
        _9 = &_5;                        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _11 = const {alloc1: *mut [usize; 3]}; // scope 6 at ui/binding/order-drop-with-match.rs:55:30: 55:35
                                         // mir::Constant
                                         // + span: ui/binding/order-drop-with-match.rs:55:30: 55:35
                                         // + literal: Const { ty: *mut [usize; 3], val: Value(Scalar(alloc1)) }
        _10 = &(*_11);                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_8.0: &&[usize]);         // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_8.1: &[usize; 3]);       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = _12;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = _13;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = <&[usize] as PartialEq<[usize; 3]>>::eq(move _16, move _17) -> bb4; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[usize], &'b [usize; 3]) -> bool {<&[usize] as PartialEq<[usize; 3]>>::eq}, val: Value(<ZST>) }
    }

    bb4: {
        _14 = Not(move _15);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _18 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<&[usize], [usize; 3]>(move _20, move _21, move _23, move _25); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[usize], &'b [usize; 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[usize], [usize; 3]>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/binding/order-drop-with-match.rs:57:2: 57:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb8;                 // scope 1 at ui/binding/order-drop-with-match.rs:52:5: 52:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/binding/order-drop-with-match.rs:42:1: 57:2
    }
}

alloc1 (static: ORDER, size: 24, align: 8) {
    0x00 │ 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 │ ................
    0x10 │ 00 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &[usize; 3] = {
    let mut _0: &[usize; 3];             // return place in scope 0 at ui/binding/order-drop-with-match.rs:54:30: 54:40
    let mut _1: [usize; 3];              // in scope 0 at ui/binding/order-drop-with-match.rs:54:31: 54:40

    bb0: {
        _1 = [const 1_usize, const 2_usize, const 3_usize]; // scope 0 at ui/binding/order-drop-with-match.rs:54:31: 54:40
        _0 = &_1;                        // scope 0 at ui/binding/order-drop-with-match.rs:54:30: 54:40
        return;                          // scope 0 at ui/binding/order-drop-with-match.rs:54:30: 54:40
    }
}
