// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn tuple() -> () {
    let mut _0: ();
    let _1: (i32, i32, i32, i32, i32);
    let mut _5: (&i32, &i32);
    let mut _6: &i32;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: i32;
    let mut _12: i32;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&i32, &i32);
    let mut _17: &i32;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: i32;
    let mut _23: i32;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&i32, &i32);
    let mut _28: &i32;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: i32;
    let mut _34: i32;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: (&i32, &i32);
    let mut _43: &i32;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: i32;
    let mut _49: i32;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&i32, &i32);
    let mut _54: &i32;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: i32;
    let mut _60: i32;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: (&i32, &i32);
    let mut _65: &i32;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: i32;
    let mut _71: i32;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&i32, &i32);
    let mut _76: &i32;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: i32;
    let mut _82: i32;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        let _3: i32;
        let _4: i32;
        let _38: i32;
        let _39: i32;
        let _40: i32;
        let _41: i32;
        scope 2 {
            debug a => _2;
            debug b => _3;
            debug c => _4;
            let _7: &i32;
            let _8: &i32;
            let _18: &i32;
            let _19: &i32;
            let _29: &i32;
            let _30: &i32;
            let mut _90: &i32;
            let mut _91: &i32;
            let mut _92: &i32;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _24;
                }
            }
            scope 7 {
                debug left_val => _29;
                debug right_val => _30;
                let _35: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _35;
                }
            }
        }
        scope 9 {
            debug a => _38;
            debug b => _39;
            debug c => _40;
            debug d => _41;
            let _44: &i32;
            let _45: &i32;
            let _55: &i32;
            let _56: &i32;
            let _66: &i32;
            let _67: &i32;
            let _77: &i32;
            let _78: &i32;
            let mut _86: &i32;
            let mut _87: &i32;
            let mut _88: &i32;
            let mut _89: &i32;
            scope 10 {
                debug left_val => _44;
                debug right_val => _45;
                let _50: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _50;
                }
            }
            scope 12 {
                debug left_val => _55;
                debug right_val => _56;
                let _61: core::panicking::AssertKind;
                scope 13 {
                    debug kind => _61;
                }
            }
            scope 14 {
                debug left_val => _66;
                debug right_val => _67;
                let _72: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _72;
                }
            }
            scope 16 {
                debug left_val => _77;
                debug right_val => _78;
                let _83: core::panicking::AssertKind;
                scope 17 {
                    debug kind => _83;
                }
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32);
        _2 = (_1.0: i32);
        _3 = (_1.3: i32);
        _4 = (_1.4: i32);
        _6 = &_2;
        _92 = const _;
        _5 = (move _6, _92);
        _7 = (_5.0: &i32);
        _8 = (_5.1: &i32);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<i32, i32>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _17 = &_3;
        _91 = const _;
        _16 = (move _17, _91);
        _18 = (_16.0: &i32);
        _19 = (_16.1: &i32);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<i32, i32>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb4: {
        _28 = &_4;
        _90 = const _;
        _27 = (move _28, _90);
        _29 = (_27.0: &i32);
        _30 = (_27.1: &i32);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<i32, i32>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb6: {
        _38 = (_1.0: i32);
        _39 = (_1.1: i32);
        _40 = (_1.2: i32);
        _41 = (_1.4: i32);
        _43 = &_38;
        _89 = const _;
        _42 = (move _43, _89);
        _44 = (_42.0: &i32);
        _45 = (_42.1: &i32);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<i32, i32>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb8: {
        _54 = &_39;
        _88 = const _;
        _53 = (move _54, _88);
        _55 = (_53.0: &i32);
        _56 = (_53.1: &i32);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<i32, i32>(move _61, _55, _56, move _63) -> unwind continue;
    }

    bb10: {
        _65 = &_40;
        _87 = const _;
        _64 = (move _65, _87);
        _66 = (_64.0: &i32);
        _67 = (_64.1: &i32);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<i32, i32>(move _72, _66, _67, move _74) -> unwind continue;
    }

    bb12: {
        _76 = &_41;
        _86 = const _;
        _75 = (move _76, _86);
        _77 = (_75.0: &i32);
        _78 = (_75.1: &i32);
        _81 = (*_77);
        _82 = (*_78);
        _80 = Eq(move _81, move _82);
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<i32, i32>(move _83, _77, _78, move _85) -> unwind continue;
    }

    bb14: {
        return;
    }
}

promoted[0] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 5_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 4_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn tuple_struct() -> () {
    let mut _0: ();
    let _1: tuple_struct::S;
    let mut _5: (&u8, &u8);
    let mut _6: &u8;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: u8;
    let mut _12: u8;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&u8, &u8);
    let mut _17: &u8;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: u8;
    let mut _23: u8;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: (&u8, &u8);
    let mut _28: &u8;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: u8;
    let mut _34: u8;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _42: (&u8, &u8);
    let mut _43: &u8;
    let mut _46: bool;
    let mut _47: bool;
    let mut _48: u8;
    let mut _49: u8;
    let _51: !;
    let mut _52: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _53: (&u8, &u8);
    let mut _54: &u8;
    let mut _57: bool;
    let mut _58: bool;
    let mut _59: u8;
    let mut _60: u8;
    let _62: !;
    let mut _63: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _64: (&u8, &u8);
    let mut _65: &u8;
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: u8;
    let mut _71: u8;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&u8, &u8);
    let mut _76: &u8;
    let mut _79: bool;
    let mut _80: bool;
    let mut _81: u8;
    let mut _82: u8;
    let _84: !;
    let mut _85: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: u8;
        let _3: u8;
        let _4: u8;
        let _38: u8;
        let _39: u8;
        let _40: u8;
        let _41: u8;
        scope 2 {
            debug a => _2;
            debug b => _3;
            debug c => _4;
            let _7: &u8;
            let _8: &u8;
            let _18: &u8;
            let _19: &u8;
            let _29: &u8;
            let _30: &u8;
            let mut _90: &u8;
            let mut _91: &u8;
            let mut _92: &u8;
            scope 3 {
                debug left_val => _7;
                debug right_val => _8;
                let _13: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _13;
                }
            }
            scope 5 {
                debug left_val => _18;
                debug right_val => _19;
                let _24: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _24;
                }
            }
            scope 7 {
                debug left_val => _29;
                debug right_val => _30;
                let _35: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _35;
                }
            }
        }
        scope 9 {
            debug a => _38;
            debug b => _39;
            debug c => _40;
            debug d => _41;
            let _44: &u8;
            let _45: &u8;
            let _55: &u8;
            let _56: &u8;
            let _66: &u8;
            let _67: &u8;
            let _77: &u8;
            let _78: &u8;
            let mut _86: &u8;
            let mut _87: &u8;
            let mut _88: &u8;
            let mut _89: &u8;
            scope 10 {
                debug left_val => _44;
                debug right_val => _45;
                let _50: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _50;
                }
            }
            scope 12 {
                debug left_val => _55;
                debug right_val => _56;
                let _61: core::panicking::AssertKind;
                scope 13 {
                    debug kind => _61;
                }
            }
            scope 14 {
                debug left_val => _66;
                debug right_val => _67;
                let _72: core::panicking::AssertKind;
                scope 15 {
                    debug kind => _72;
                }
            }
            scope 16 {
                debug left_val => _77;
                debug right_val => _78;
                let _83: core::panicking::AssertKind;
                scope 17 {
                    debug kind => _83;
                }
            }
        }
    }

    bb0: {
        _1 = S(const 1_u8, const 2_u8, const 3_u8, const 4_u8, const 5_u8);
        _2 = (_1.0: u8);
        _3 = (_1.3: u8);
        _4 = (_1.4: u8);
        _6 = &_2;
        _92 = const _;
        _5 = (move _6, _92);
        _7 = (_5.0: &u8);
        _8 = (_5.1: &u8);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<u8, u8>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _17 = &_3;
        _91 = const _;
        _16 = (move _17, _91);
        _18 = (_16.0: &u8);
        _19 = (_16.1: &u8);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<u8, u8>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb4: {
        _28 = &_4;
        _90 = const _;
        _27 = (move _28, _90);
        _29 = (_27.0: &u8);
        _30 = (_27.1: &u8);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<u8, u8>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb6: {
        _38 = (_1.0: u8);
        _39 = (_1.1: u8);
        _40 = (_1.2: u8);
        _41 = (_1.4: u8);
        _43 = &_38;
        _89 = const _;
        _42 = (move _43, _89);
        _44 = (_42.0: &u8);
        _45 = (_42.1: &u8);
        _48 = (*_44);
        _49 = (*_45);
        _47 = Eq(move _48, move _49);
        _46 = Not(move _47);
        switchInt(move _46) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _50 = core::panicking::AssertKind::Eq;
        _52 = Option::<Arguments<'_>>::None;
        _51 = core::panicking::assert_failed::<u8, u8>(move _50, _44, _45, move _52) -> unwind continue;
    }

    bb8: {
        _54 = &_39;
        _88 = const _;
        _53 = (move _54, _88);
        _55 = (_53.0: &u8);
        _56 = (_53.1: &u8);
        _59 = (*_55);
        _60 = (*_56);
        _58 = Eq(move _59, move _60);
        _57 = Not(move _58);
        switchInt(move _57) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _61 = core::panicking::AssertKind::Eq;
        _63 = Option::<Arguments<'_>>::None;
        _62 = core::panicking::assert_failed::<u8, u8>(move _61, _55, _56, move _63) -> unwind continue;
    }

    bb10: {
        _65 = &_40;
        _87 = const _;
        _64 = (move _65, _87);
        _66 = (_64.0: &u8);
        _67 = (_64.1: &u8);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<u8, u8>(move _72, _66, _67, move _74) -> unwind continue;
    }

    bb12: {
        _76 = &_41;
        _86 = const _;
        _75 = (move _76, _86);
        _77 = (_75.0: &u8);
        _78 = (_75.1: &u8);
        _81 = (*_77);
        _82 = (*_78);
        _80 = Eq(move _81, move _82);
        _79 = Not(move _80);
        switchInt(move _79) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _83 = core::panicking::AssertKind::Eq;
        _85 = Option::<Arguments<'_>>::None;
        _84 = core::panicking::assert_failed::<u8, u8>(move _83, _77, _78, move _85) -> unwind continue;
    }

    bb14: {
        return;
    }
}

promoted[0] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 5_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[3] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 5_u8;
        _0 = &_1;
        return;
    }
}

promoted[5] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 4_u8;
        _0 = &_1;
        return;
    }
}

promoted[6] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = tuple() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = tuple_struct() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn S(_1: u8, _2: u8, _3: u8, _4: u8, _5: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3, move _4, move _5);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: u8, _2: u8, _3: u8, _4: u8, _5: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3, move _4, move _5);
        return;
    }
}
