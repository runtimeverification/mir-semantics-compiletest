// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn bar(_1: foo) -> () {
    debug x => _1;                       // in scope 0 at ui/binding/match-path.rs:12:8: 12:9
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-path.rs:12:20: 12:20
    let mut _2: isize;                   // in scope 0 at ui/binding/match-path.rs:12:32: 12:45

    bb0: {
        _2 = discriminant(_1);           // scope 0 at ui/binding/match-path.rs:12:28: 12:29
        switchInt(move _2) -> [0: bb2, 1: bb2, otherwise: bb1]; // scope 0 at ui/binding/match-path.rs:12:22: 12:29
    }

    bb1: {
        unreachable;                     // scope 0 at ui/binding/match-path.rs:12:28: 12:29
    }

    bb2: {
        return;                          // scope 0 at ui/binding/match-path.rs:12:77: 12:77
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-path.rs:14:15: 14:15

    bb0: {
        return;                          // scope 0 at ui/binding/match-path.rs:14:18: 14:18
    }
}
