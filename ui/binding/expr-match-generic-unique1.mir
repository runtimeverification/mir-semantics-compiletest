// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_generic(_1: Box<T>, _2: F) -> () {
    debug expected => _1;                // in scope 0 at ui/binding/expr-match-generic-unique1.rs:3:30: 3:38
    debug eq => _2;                      // in scope 0 at ui/binding/expr-match-generic-unique1.rs:3:48: 3:50
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic-unique1.rs:3:55: 3:55
    let _3: std::boxed::Box<T>;          // in scope 0 at ui/binding/expr-match-generic-unique1.rs:4:9: 4:15
    let mut _4: &std::boxed::Box<T>;     // in scope 0 at ui/binding/expr-match-generic-unique1.rs:5:19: 5:35
    let mut _5: bool;                    // in scope 0 at ui/binding/expr-match-generic-unique1.rs:8:5: 8:34
    let mut _6: bool;                    // in scope 0 at ui/binding/expr-match-generic-unique1.rs:8:13: 8:33
    let mut _7: F;                       // in scope 0 at ui/binding/expr-match-generic-unique1.rs:8:13: 8:15
    let mut _8: (std::boxed::Box<T>, std::boxed::Box<T>); // in scope 0 at ui/binding/expr-match-generic-unique1.rs:8:13: 8:33
    let mut _9: std::boxed::Box<T>;      // in scope 0 at ui/binding/expr-match-generic-unique1.rs:8:16: 8:24
    let mut _10: std::boxed::Box<T>;     // in scope 0 at ui/binding/expr-match-generic-unique1.rs:8:26: 8:32
    let mut _11: !;                      // in scope 0 at ui/binding/expr-match-generic-unique1.rs:8:5: 8:34
    let mut _12: bool;                   // in scope 0 at ui/binding/expr-match-generic-unique1.rs:9:1: 9:2
    let mut _13: bool;                   // in scope 0 at ui/binding/expr-match-generic-unique1.rs:9:1: 9:2
    scope 1 {
        debug actual => _3;              // in scope 1 at ui/binding/expr-match-generic-unique1.rs:4:9: 4:15
    }

    bb0: {
        _13 = const false;               // scope 0 at ui/binding/expr-match-generic-unique1.rs:4:9: 4:15
        _12 = const false;               // scope 0 at ui/binding/expr-match-generic-unique1.rs:4:9: 4:15
        _13 = const true;                // scope 0 at ui/binding/expr-match-generic-unique1.rs:4:9: 4:15
        _12 = const true;                // scope 0 at ui/binding/expr-match-generic-unique1.rs:4:9: 4:15
        _4 = &_1;                        // scope 0 at ui/binding/expr-match-generic-unique1.rs:5:19: 5:35
        _3 = <Box<T> as Clone>::clone(move _4) -> [return: bb1, unwind: bb8]; // scope 0 at ui/binding/expr-match-generic-unique1.rs:5:19: 5:35
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique1.rs:5:28: 5:33
                                         // + literal: Const { ty: for<'a> fn(&'a Box<T>) -> Box<T> {<Box<T> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _12 = const false;               // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:13: 8:15
        _7 = move _2;                    // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:13: 8:15
        _13 = const false;               // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:16: 8:24
        _9 = move _1;                    // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:16: 8:24
        _10 = move _3;                   // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:26: 8:32
        _8 = (move _9, move _10);        // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:13: 8:33
        _6 = <F as FnOnce<(Box<T>, Box<T>)>>::call_once(move _7, move _8) -> [return: bb2, unwind: bb8]; // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:13: 8:33
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique1.rs:8:13: 8:15
                                         // + literal: Const { ty: extern "rust-call" fn(F, (Box<T>, Box<T>)) -> <F as FnOnce<(Box<T>, Box<T>)>>::Output {<F as FnOnce<(Box<T>, Box<T>)>>::call_once}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = Not(move _6);               // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:5: 8:34
        switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:5: 8:34
    }

    bb3: {
        _11 = core::panicking::panic(const "assertion failed: eq(expected, actual)") -> bb8; // scope 1 at ui/binding/expr-match-generic-unique1.rs:8:5: 8:34
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique1.rs:8:5: 8:34
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        return;                          // scope 0 at ui/binding/expr-match-generic-unique1.rs:9:2: 9:2
    }

    bb5 (cleanup): {
        switchInt(_13) -> [0: bb6, otherwise: bb9]; // scope 0 at ui/binding/expr-match-generic-unique1.rs:9:1: 9:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/binding/expr-match-generic-unique1.rs:3:1: 9:2
    }

    bb7 (cleanup): {
        drop(_2) -> bb5;                 // scope 0 at ui/binding/expr-match-generic-unique1.rs:9:1: 9:2
    }

    bb8 (cleanup): {
        switchInt(_12) -> [0: bb5, otherwise: bb7]; // scope 0 at ui/binding/expr-match-generic-unique1.rs:9:1: 9:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/binding/expr-match-generic-unique1.rs:9:1: 9:2
    }
}

fn test_box() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic-unique1.rs:11:15: 11:15
    let _1: ();                          // in scope 0 at ui/binding/expr-match-generic-unique1.rs:15:5: 15:57
    let mut _2: std::boxed::Box<bool>;   // in scope 0 at ui/binding/expr-match-generic-unique1.rs:15:29: 15:43

    bb0: {
        _2 = Box::<bool>::new(const true) -> bb1; // scope 0 at ui/binding/expr-match-generic-unique1.rs:15:29: 15:43
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique1.rs:15:29: 15:37
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(bool) -> Box<bool> {Box::<bool>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = test_generic::<bool, fn(Box<bool>, Box<bool>) -> bool {compare_box}>(move _2, compare_box) -> bb2; // scope 0 at ui/binding/expr-match-generic-unique1.rs:15:5: 15:57
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique1.rs:15:5: 15:28
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<bool>, fn(Box<bool>, Box<bool>) -> bool {compare_box}) {test_generic::<bool, fn(Box<bool>, Box<bool>) -> bool {compare_box}>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique1.rs:15:45: 15:56
                                         // + literal: Const { ty: fn(Box<bool>, Box<bool>) -> bool {compare_box}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/binding/expr-match-generic-unique1.rs:16:2: 16:2
    }
}

fn compare_box(_1: Box<bool>, _2: Box<bool>) -> bool {
    debug b1 => _1;                      // in scope 0 at ui/binding/expr-match-generic-unique1.rs:12:20: 12:22
    debug b2 => _2;                      // in scope 0 at ui/binding/expr-match-generic-unique1.rs:12:35: 12:37
    let mut _0: bool;                    // return place in scope 0 at ui/binding/expr-match-generic-unique1.rs:12:53: 12:57
    let mut _3: bool;                    // in scope 0 at ui/binding/expr-match-generic-unique1.rs:13:16: 13:19
    let mut _4: bool;                    // in scope 0 at ui/binding/expr-match-generic-unique1.rs:13:23: 13:26
    let mut _5: *const bool;             // in scope 0 at ui/binding/expr-match-generic-unique1.rs:12:20: 12:22
    let mut _6: *const bool;             // in scope 0 at ui/binding/expr-match-generic-unique1.rs:12:35: 12:37

    bb0: {
        _5 = (((_1.0: std::ptr::Unique<bool>).0: std::ptr::NonNull<bool>).0: *const bool); // scope 0 at ui/binding/expr-match-generic-unique1.rs:13:16: 13:19
        _3 = (*_5);                      // scope 0 at ui/binding/expr-match-generic-unique1.rs:13:16: 13:19
        _6 = (((_2.0: std::ptr::Unique<bool>).0: std::ptr::NonNull<bool>).0: *const bool); // scope 0 at ui/binding/expr-match-generic-unique1.rs:13:23: 13:26
        _4 = (*_6);                      // scope 0 at ui/binding/expr-match-generic-unique1.rs:13:23: 13:26
        _0 = Eq(move _3, move _4);       // scope 0 at ui/binding/expr-match-generic-unique1.rs:13:16: 13:26
        drop(_2) -> [return: bb1, unwind: bb3]; // scope 0 at ui/binding/expr-match-generic-unique1.rs:14:5: 14:6
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/binding/expr-match-generic-unique1.rs:14:5: 14:6
    }

    bb2: {
        return;                          // scope 0 at ui/binding/expr-match-generic-unique1.rs:14:6: 14:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/binding/expr-match-generic-unique1.rs:14:5: 14:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/binding/expr-match-generic-unique1.rs:12:5: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic-unique1.rs:18:15: 18:15
    let _1: ();                          // in scope 0 at ui/binding/expr-match-generic-unique1.rs:18:17: 18:27

    bb0: {
        _1 = test_box() -> bb1;          // scope 0 at ui/binding/expr-match-generic-unique1.rs:18:17: 18:27
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic-unique1.rs:18:17: 18:25
                                         // + literal: Const { ty: fn() {test_box}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/expr-match-generic-unique1.rs:18:30: 18:30
    }
}
