// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn nested(_1: t) -> () {
    debug o => _1;                       // in scope 0 at ui/binding/nested-pattern.rs:9:11: 9:12
    let mut _0: ();                      // return place in scope 0 at ui/binding/nested-pattern.rs:9:17: 9:17
    let mut _2: isize;                   // in scope 0 at ui/binding/nested-pattern.rs:11:20: 11:36
    let mut _3: isize;                   // in scope 0 at ui/binding/nested-pattern.rs:11:9: 11:37
    let _4: isize;                       // in scope 0 at ui/binding/nested-pattern.rs:11:16: 11:18
    let _5: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _6: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[&str];                 // in scope 0 at ui/binding/nested-pattern.rs:11:52: 11:75
    let mut _8: &[&str; 1];              // in scope 0 at ui/binding/nested-pattern.rs:11:52: 11:75
    let _9: &[&str; 1];                  // in scope 0 at ui/binding/nested-pattern.rs:11:52: 11:75
    let mut _10: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _12: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _13: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    let _14: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _15: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _16: &[&str];                // in scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
    let mut _17: &[&str; 1];             // in scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
    let _18: &[&str; 1];                 // in scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
    let mut _19: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _20: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _24: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _25: &[&str; 1];             // in scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
    scope 1 {
        debug _i => _4;                  // in scope 1 at ui/binding/nested-pattern.rs:11:16: 11:18
        let mut _22: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        let mut _23: &[&str; 1];         // in scope 1 at ui/binding/nested-pattern.rs:11:52: 11:75
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at ui/binding/nested-pattern.rs:10:11: 10:12
        switchInt(move _3) -> [1: bb2, otherwise: bb1]; // scope 0 at ui/binding/nested-pattern.rs:10:5: 10:12
    }

    bb1: {
        _25 = const _;                   // scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
                                         // mir::Constant
                                         // + span: ui/binding/nested-pattern.rs:12:25: 12:36
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(nested, [], Some(promoted[3])) }
        _18 = _25;                       // scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
        _17 = _18;                       // scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
        _16 = move _17 as &[&str] (Pointer(Unsize)); // scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
        _24 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(nested, [], Some(promoted[2])) }
        _21 = _24;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = _21;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = move _20 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _15 = Arguments::<'_>::new_v1(move _16, move _19) -> bb6; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = discriminant(((_1 as bar).1: std::option::Option<isize>)); // scope 0 at ui/binding/nested-pattern.rs:10:11: 10:12
        switchInt(move _2) -> [1: bb3, otherwise: bb1]; // scope 0 at ui/binding/nested-pattern.rs:10:5: 10:12
    }

    bb3: {
        _4 = ((_1 as bar).0: isize);     // scope 0 at ui/binding/nested-pattern.rs:11:16: 11:18
        _23 = const _;                   // scope 1 at ui/binding/nested-pattern.rs:11:52: 11:75
                                         // mir::Constant
                                         // + span: ui/binding/nested-pattern.rs:11:52: 11:75
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(nested, [], Some(promoted[1])) }
        _9 = _23;                        // scope 1 at ui/binding/nested-pattern.rs:11:52: 11:75
        _8 = _9;                         // scope 1 at ui/binding/nested-pattern.rs:11:52: 11:75
        _7 = move _8 as &[&str] (Pointer(Unsize)); // scope 1 at ui/binding/nested-pattern.rs:11:52: 11:75
        _22 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(nested, [], Some(promoted[0])) }
        _12 = _22;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _11 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _10 = move _11 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = Arguments::<'_>::new_v1(move _7, move _10) -> bb4; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _5 = _print(move _6) -> bb5;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = begin_panic::<&str>(const "explicit panic"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb6: {
        _14 = _print(move _15) -> bb7;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/binding/nested-pattern.rs:14:2: 14:2
    }
}

promoted[0] in nested: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in nested: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/binding/nested-pattern.rs:11:52: 11:75
    let mut _1: [&str; 1];               // in scope 0 at ui/binding/nested-pattern.rs:11:52: 11:75

    bb0: {
        _1 = [const "wrong pattern matched\n"]; // scope 0 at ui/binding/nested-pattern.rs:11:52: 11:75
                                         // mir::Constant
                                         // + span: ui/binding/nested-pattern.rs:11:52: 11:75
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/nested-pattern.rs:11:52: 11:75
        return;                          // scope 0 at ui/binding/nested-pattern.rs:11:52: 11:75
    }
}

promoted[2] in nested: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[3] in nested: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
    let mut _1: [&str; 1];               // in scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36

    bb0: {
        _1 = [const "succeeded\n"];      // scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
                                         // mir::Constant
                                         // + span: ui/binding/nested-pattern.rs:12:25: 12:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
        return;                          // scope 0 at ui/binding/nested-pattern.rs:12:25: 12:36
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/nested-pattern.rs:16:15: 16:15
    let _1: ();                          // in scope 0 at ui/binding/nested-pattern.rs:16:17: 16:49
    let mut _2: t;                       // in scope 0 at ui/binding/nested-pattern.rs:16:24: 16:48
    let mut _3: std::option::Option<isize>; // in scope 0 at ui/binding/nested-pattern.rs:16:34: 16:47

    bb0: {
        _3 = Option::<isize>::None;      // scope 0 at ui/binding/nested-pattern.rs:16:34: 16:47
        _2 = t::bar(const 1_isize, move _3); // scope 0 at ui/binding/nested-pattern.rs:16:24: 16:48
        _1 = nested(move _2) -> bb1;     // scope 0 at ui/binding/nested-pattern.rs:16:17: 16:49
                                         // mir::Constant
                                         // + span: ui/binding/nested-pattern.rs:16:17: 16:23
                                         // + literal: Const { ty: fn(t) {nested}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/nested-pattern.rs:16:52: 16:52
    }
}

fn t::foo(_1: isize, _2: usize) -> t {
    let mut _0: t;                       // return place in scope 0 at ui/binding/nested-pattern.rs:7:10: 7:13

    bb0: {
        _0 = t::foo(move _1, move _2);   // scope 0 at ui/binding/nested-pattern.rs:7:10: 7:13
        return;                          // scope 0 at ui/binding/nested-pattern.rs:7:10: 7:13
    }
}

// MIR FOR CTFE
fn t::foo(_1: isize, _2: usize) -> t {
    let mut _0: t;                       // return place in scope 0 at ui/binding/nested-pattern.rs:7:10: 7:13

    bb0: {
        _0 = t::foo(move _1, move _2);   // scope 0 at ui/binding/nested-pattern.rs:7:10: 7:13
        return;                          // scope 0 at ui/binding/nested-pattern.rs:7:10: 7:13
    }
}

fn t::bar(_1: isize, _2: Option<isize>) -> t {
    let mut _0: t;                       // return place in scope 0 at ui/binding/nested-pattern.rs:7:29: 7:32

    bb0: {
        _0 = t::bar(move _1, move _2);   // scope 0 at ui/binding/nested-pattern.rs:7:29: 7:32
        return;                          // scope 0 at ui/binding/nested-pattern.rs:7:29: 7:32
    }
}

// MIR FOR CTFE
fn t::bar(_1: isize, _2: Option<isize>) -> t {
    let mut _0: t;                       // return place in scope 0 at ui/binding/nested-pattern.rs:7:29: 7:32

    bb0: {
        _0 = t::bar(move _1, move _2);   // scope 0 at ui/binding/nested-pattern.rs:7:29: 7:32
        return;                          // scope 0 at ui/binding/nested-pattern.rs:7:29: 7:32
    }
}
