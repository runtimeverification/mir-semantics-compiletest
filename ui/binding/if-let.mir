// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<i32>;
    let mut _2: isize;
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let _15: !;
    let mut _17: isize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: !;
    let mut _22: std::option::Option<&str>;
    let mut _23: isize;
    let mut _24: bool;
    let mut _25: std::result::Result<(), &str>;
    let mut _26: isize;
    let mut _27: (&usize, &usize);
    let mut _28: &usize;
    let mut _31: bool;
    let mut _32: bool;
    let mut _33: usize;
    let mut _34: usize;
    let _36: !;
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _38: bool;
    let _39: !;
    let mut _40: i32;
    let _41: !;
    let mut _43: std::string::String;
    let _44: &str;
    let mut _45: isize;
    let _46: !;
    let mut _47: isize;
    let _49: !;
    let mut _50: isize;
    let mut _52: (&std::string::String, &&str);
    let mut _53: &std::string::String;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let _61: !;
    let mut _62: bool;
    let _63: !;
    let mut _64: main::Foo;
    let mut _65: isize;
    let mut _67: isize;
    let mut _69: (&usize, &usize);
    let mut _70: &usize;
    let mut _73: bool;
    let mut _74: bool;
    let mut _75: usize;
    let mut _76: usize;
    let _78: !;
    let mut _79: std::option::Option<std::fmt::Arguments<'_>>;
    let _80: !;
    let mut _85: bool;
    let mut _86: bool;
    let mut _87: isize;
    scope 1 {
        debug x => _1;
        let mut _16: bool;
        scope 2 {
            debug y => _3;
            let _3: i32;
            let _6: &i32;
            let _7: &i32;
            let mut _84: &i32;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
        }
        scope 5 {
            debug worked => _16;
            let _21: usize;
            scope 6 {
            }
            scope 7 {
                debug clause => _21;
                let _29: &usize;
                let _30: &usize;
                let _42: main::Foo;
                let mut _83: &usize;
                scope 8 {
                }
                scope 9 {
                }
                scope 10 {
                    debug left_val => _29;
                    debug right_val => _30;
                    let _35: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _35;
                    }
                }
                scope 12 {
                }
                scope 13 {
                    debug foo => _42;
                    scope 14 {
                    }
                    scope 15 {
                        debug _x => _48;
                        let _48: usize;
                    }
                    scope 16 {
                        debug s => _51;
                        let _51: std::string::String;
                        let _54: &std::string::String;
                        let _55: &&str;
                        let mut _82: &&str;
                        scope 17 {
                            debug left_val => _54;
                            debug right_val => _55;
                            let _58: core::panicking::AssertKind;
                            scope 18 {
                                debug kind => _58;
                            }
                        }
                    }
                    scope 19 {
                        debug a => _66;
                        let _66: main::Foo;
                        scope 20 {
                            debug b => _68;
                            let _68: usize;
                            let _71: &usize;
                            let _72: &usize;
                            let mut _81: &usize;
                            scope 21 {
                                debug left_val => _71;
                                debug right_val => _72;
                                let _77: core::panicking::AssertKind;
                                scope 22 {
                                    debug kind => _77;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _85 = const false;
        _86 = const false;
        _1 = Option::<i32>::Some(const 3_i32);
        _2 = discriminant(_1);
        switchInt(move _2) -> [1: bb1, otherwise: bb4];
    }

    bb1: {
        _3 = ((_1 as Some).0: i32);
        _5 = &_3;
        _84 = const _;
        _4 = (move _5, _84);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        _16 = const false;
        _17 = discriminant(_1);
        switchInt(move _17) -> [1: bb5, otherwise: bb6];
    }

    bb4: {
        _15 = begin_panic::<&str>(const "`if let` panicked") -> unwind continue;
    }

    bb5: {
        _16 = const true;
        goto -> bb6;
    }

    bb6: {
        _19 = _16;
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = core::panicking::panic(const "assertion failed: worked") -> unwind continue;
    }

    bb8: {
        _22 = Option::<&str>::Some(const "test");
        _23 = discriminant(_22);
        switchInt(move _23) -> [0: bb9, otherwise: bb10];
    }

    bb9: {
        _21 = const 1_usize;
        goto -> bb15;
    }

    bb10: {
        _24 = Gt(const 4_usize, const 5_usize);
        switchInt(move _24) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _21 = const 2_usize;
        goto -> bb15;
    }

    bb12: {
        _25 = Result::<(), &str>::Err(const "test");
        _26 = discriminant(_25);
        switchInt(move _26) -> [0: bb13, otherwise: bb14];
    }

    bb13: {
        _21 = const 3_usize;
        goto -> bb15;
    }

    bb14: {
        _21 = const 4_usize;
        goto -> bb15;
    }

    bb15: {
        _28 = &_21;
        _83 = const _;
        _27 = (move _28, _83);
        _29 = (_27.0: &usize);
        _30 = (_27.1: &usize);
        _33 = (*_29);
        _34 = (*_30);
        _32 = Eq(move _33, move _34);
        _31 = Not(move _32);
        switchInt(move _31) -> [0: bb17, otherwise: bb16];
    }

    bb16: {
        _35 = core::panicking::AssertKind::Eq;
        _37 = Option::<Arguments<'_>>::None;
        _36 = core::panicking::assert_failed::<usize, usize>(move _35, _29, _30, move _37) -> unwind continue;
    }

    bb17: {
        _38 = Gt(const 3_i32, const 4_i32);
        switchInt(move _38) -> [0: bb19, otherwise: bb18];
    }

    bb18: {
        _39 = begin_panic::<&str>(const "bad math") -> unwind continue;
    }

    bb19: {
        _40 = const 2_i32;
        switchInt(_40) -> [1: bb20, otherwise: bb21];
    }

    bb20: {
        _41 = begin_panic::<&str>(const "bad pattern match") -> unwind continue;
    }

    bb21: {
        _44 = const "three";
        _43 = <str as ToString>::to_string(_44) -> [return: bb22, unwind continue];
    }

    bb22: {
        _86 = const true;
        _42 = Foo::Three(move _43, const 42_isize);
        _45 = discriminant(_42);
        switchInt(move _45) -> [0: bb23, otherwise: bb24];
    }

    bb23: {
        _46 = begin_panic::<&str>(const "bad pattern match") -> bb48;
    }

    bb24: {
        _47 = discriminant(_42);
        switchInt(move _47) -> [1: bb25, otherwise: bb26];
    }

    bb25: {
        _48 = ((_42 as Two).0: usize);
        _49 = begin_panic::<&str>(const "bad pattern match") -> bb48;
    }

    bb26: {
        _50 = discriminant(_42);
        switchInt(move _50) -> [2: bb27, otherwise: bb31];
    }

    bb27: {
        _86 = const false;
        _51 = move ((_42 as Three).0: std::string::String);
        _53 = &_51;
        _82 = const _;
        _52 = (move _53, _82);
        _54 = (_52.0: &std::string::String);
        _55 = (_52.1: &&str);
        _57 = <String as PartialEq<&str>>::eq(_54, _55) -> [return: bb28, unwind: bb42];
    }

    bb28: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<String, &str>(move _58, _54, _55, move _60) -> bb42;
    }

    bb30: {
        drop(_51) -> [return: bb32, unwind: bb48];
    }

    bb31: {
        _61 = begin_panic::<&str>(const "bad else") -> bb48;
    }

    bb32: {
        _62 = const false;
        switchInt(move _62) -> [0: bb34, otherwise: bb33];
    }

    bb33: {
        _63 = begin_panic::<&str>(const "wat") -> bb48;
    }

    bb34: {
        _85 = const true;
        _64 = Foo::Two(const 42_usize);
        _65 = discriminant(_64);
        switchInt(move _65) -> [1: bb35, otherwise: bb45];
    }

    bb35: {
        _85 = const false;
        _66 = move _64;
        _67 = discriminant(_66);
        switchInt(move _67) -> [1: bb36, otherwise: bb39];
    }

    bb36: {
        _68 = ((_66 as Two).0: usize);
        _70 = &_68;
        _81 = const _;
        _69 = (move _70, _81);
        _71 = (_69.0: &usize);
        _72 = (_69.1: &usize);
        _75 = (*_71);
        _76 = (*_72);
        _74 = Eq(move _75, move _76);
        _73 = Not(move _74);
        switchInt(move _73) -> [0: bb38, otherwise: bb37];
    }

    bb37: {
        _77 = core::panicking::AssertKind::Eq;
        _79 = Option::<Arguments<'_>>::None;
        _78 = core::panicking::assert_failed::<usize, usize>(move _77, _71, _72, move _79) -> bb41;
    }

    bb38: {
        drop(_66) -> [return: bb45, unwind: bb48];
    }

    bb39: {
        _80 = begin_panic::<&str>(const "panic in nested `if let`") -> bb41;
    }

    bb40: {
        _85 = const false;
        _86 = const false;
        return;
    }

    bb41 (cleanup): {
        drop(_66) -> [return: bb48, unwind terminate];
    }

    bb42 (cleanup): {
        drop(_51) -> [return: bb48, unwind terminate];
    }

    bb43 (cleanup): {
        resume;
    }

    bb44: {
        drop(_64) -> [return: bb40, unwind: bb48];
    }

    bb45: {
        switchInt(_85) -> [0: bb40, otherwise: bb44];
    }

    bb46 (cleanup): {
        switchInt(_86) -> [0: bb43, otherwise: bb47];
    }

    bb47 (cleanup): {
        drop(((_42 as Three).0: std::string::String)) -> [return: bb43, unwind terminate];
    }

    bb48 (cleanup): {
        _87 = discriminant(_42);
        switchInt(move _87) -> [2: bb46, otherwise: bb43];
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 42_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "three";
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 4_usize;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

fn Foo::Two(_1: usize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Two(move _1);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Two(_1: usize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Two(move _1);
        return;
    }
}

fn Foo::Three(_1: String, _2: isize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Three(move _1, move _2);
        return;
    }
}

// MIR FOR CTFE
fn Foo::Three(_1: String, _2: isize) -> Foo {
    let mut _0: main::Foo;

    bb0: {
        _0 = Foo::Three(move _1, move _2);
        return;
    }
}
