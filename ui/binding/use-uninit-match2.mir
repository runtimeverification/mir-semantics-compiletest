// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: myoption<T>) -> isize {
    debug o => _1;                       // in scope 0 at ui/binding/use-uninit-match2.rs:7:11: 7:12
    let mut _0: isize;                   // return place in scope 0 at ui/binding/use-uninit-match2.rs:8:9: 8:14
    let mut _2: isize;                   // in scope 0 at ui/binding/use-uninit-match2.rs:10:9: 10:28
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
    scope 1 {
        debug x => _0;                   // in scope 1 at ui/binding/use-uninit-match2.rs:8:9: 8:14
        let _4: T;                       // in scope 1 at ui/binding/use-uninit-match2.rs:11:29: 11:31
        scope 2 {
            debug _t => _4;              // in scope 2 at ui/binding/use-uninit-match2.rs:11:29: 11:31
        }
    }

    bb0: {
        _2 = discriminant(_1);           // scope 1 at ui/binding/use-uninit-match2.rs:9:11: 9:12
        switchInt(move _2) -> [0: bb3, 1: bb1, otherwise: bb2]; // scope 1 at ui/binding/use-uninit-match2.rs:9:5: 9:12
    }

    bb1: {
        _4 = move ((_1 as some).0: T);   // scope 1 at ui/binding/use-uninit-match2.rs:11:29: 11:31
        _0 = const 5_isize;              // scope 2 at ui/binding/use-uninit-match2.rs:11:38: 11:43
        drop(_4) -> bb4;                 // scope 1 at ui/binding/use-uninit-match2.rs:11:45: 11:46
    }

    bb2: {
        unreachable;                     // scope 1 at ui/binding/use-uninit-match2.rs:9:11: 9:12
    }

    bb3: {
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        return;                          // scope 0 at ui/binding/use-uninit-match2.rs:14:2: 14:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/use-uninit-match2.rs:18:15: 18:15
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
    let mut _4: &[&str; 2];              // in scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
    let _5: &[&str; 2];                  // in scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
    let mut _11: &i32;                   // in scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
    let _12: &i32;                       // in scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
    let mut _13: &i32;                   // in scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
    let mut _14: &[&str; 2];             // in scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30

    bb0: {
        _14 = const _;                   // scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
                                         // mir::Constant
                                         // + span: ui/binding/use-uninit-match2.rs:18:26: 18:30
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _5 = _14;                        // scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
        _4 = _5;                         // scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
        _13 = const _;                   // scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
                                         // mir::Constant
                                         // + span: ui/binding/use-uninit-match2.rs:18:32: 18:33
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _12 = _13;                       // scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
        _11 = _12;                       // scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<i32>(move _11) -> bb1; // scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
                                         // mir::Constant
                                         // + span: ui/binding/use-uninit-match2.rs:18:32: 18:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b i32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = _print(move _2) -> bb3;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/binding/use-uninit-match2.rs:18:37: 18:37
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
    let mut _1: i32;                     // in scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
        _0 = &_1;                        // scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
        return;                          // scope 0 at ui/binding/use-uninit-match2.rs:18:32: 18:33
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
                                         // mir::Constant
                                         // + span: ui/binding/use-uninit-match2.rs:18:26: 18:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/use-uninit-match2.rs:18:26: 18:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
        return;                          // scope 0 at ui/binding/use-uninit-match2.rs:18:26: 18:30
    }
}

fn myoption::some(_1: T) -> myoption<T> {
    let mut _0: myoption<T>;             // return place in scope 0 at ui/binding/use-uninit-match2.rs:16:26: 16:30

    bb0: {
        _0 = myoption::<T>::some(move _1); // scope 0 at ui/binding/use-uninit-match2.rs:16:26: 16:30
        return;                          // scope 0 at ui/binding/use-uninit-match2.rs:16:26: 16:30
    }
}

// MIR FOR CTFE
fn myoption::some(_1: T) -> myoption<T> {
    let mut _0: myoption<T>;             // return place in scope 0 at ui/binding/use-uninit-match2.rs:16:26: 16:30

    bb0: {
        _0 = myoption::<T>::some(move _1); // scope 0 at ui/binding/use-uninit-match2.rs:16:26: 16:30
        return;                          // scope 0 at ui/binding/use-uninit-match2.rs:16:26: 16:30
    }
}
