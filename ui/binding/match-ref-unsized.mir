// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &str;
    let mut _2: &str;
    let mut _3: (&&str, &&str);
    let mut _4: &&str;
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: &str;
    let mut _14: (&&str, &&str);
    let mut _15: &&str;
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let _5: &&str;
        let _6: &&str;
        let _13: &str;
        let mut _24: &&str;
        scope 2 {
            debug left_val => _5;
            debug right_val => _6;
            let _9: core::panicking::AssertKind;
            scope 3 {
                debug kind => _9;
            }
        }
        scope 4 {
            debug b => _13;
            let _16: &&str;
            let _17: &&str;
            let mut _23: &&str;
            scope 5 {
                debug left_val => _16;
                debug right_val => _17;
                let _20: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _20;
                }
            }
        }
    }

    bb0: {
        _2 = const "abcdef";
        _1 = _2;
        _4 = &_1;
        _24 = const _;
        _3 = (move _4, _24);
        _5 = (_3.0: &&str);
        _6 = (_3.1: &&str);
        _8 = <&str as PartialEq>::eq(_5, _6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<&str, &str>(move _9, _5, _6, move _11) -> unwind continue;
    }

    bb3: {
        _12 = const "12345";
        _13 = _12;
        _15 = &_13;
        _23 = const _;
        _14 = (move _15, _23);
        _16 = (_14.0: &&str);
        _17 = (_14.1: &&str);
        _19 = <&str as PartialEq>::eq(_16, _17) -> [return: bb4, unwind continue];
    }

    bb4: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<&str, &str>(move _20, _16, _17, move _22) -> unwind continue;
    }

    bb6: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "12345";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "abcdef";
        _0 = &_1;
        return;
    }
}
