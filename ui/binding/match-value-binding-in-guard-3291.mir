// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Option<Box<isize>>, _2: bool) -> isize {
    debug x => _1;                       // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:4:8: 4:9
    debug b => _2;                       // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:4:31: 4:32
    let mut _0: isize;                   // return place in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:4:43: 4:48
    let mut _3: isize;                   // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:6:7: 6:11
    let _4: &std::boxed::Box<isize>;     // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:12: 7:17
    let _5: &&std::boxed::Box<isize>;    // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:12: 7:17
    let mut _6: bool;                    // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:22: 7:23
    let mut _7: std::boxed::Box<isize>;  // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:30: 7:39
    let mut _8: &std::boxed::Box<isize>; // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:30: 7:39
    let mut _9: *const isize;            // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:30: 7:39
    scope 1 {
        debug x => _4;                   // in scope 1 at ui/binding/match-value-binding-in-guard-3291.rs:7:12: 7:17
        debug x => _5;                   // in scope 1 at ui/binding/match-value-binding-in-guard-3291.rs:7:12: 7:17
    }

    bb0: {
        _3 = discriminant(_1);           // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:5:11: 5:12
        switchInt(move _3) -> [0: bb2, 1: bb3, otherwise: bb1]; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:5:5: 5:12
    }

    bb1: {
        unreachable;                     // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:5:11: 5:12
    }

    bb2: {
        _0 = const 1_isize;              // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:6:17: 6:18
        goto -> bb7;                     // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:6:17: 6:18
    }

    bb3: {
        _4 = &((_1 as Some).0: std::boxed::Box<isize>); // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:12: 7:17
        _5 = &_4;                        // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:12: 7:17
        _6 = _2;                         // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:22: 7:23
        switchInt(move _6) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:7:22: 7:23
    }

    bb4: {
        _8 = _4;                         // scope 1 at ui/binding/match-value-binding-in-guard-3291.rs:7:30: 7:39
        _7 = <Box<isize> as Clone>::clone(move _8) -> [return: bb6, unwind: bb9]; // scope 1 at ui/binding/match-value-binding-in-guard-3291.rs:7:30: 7:39
                                         // mir::Constant
                                         // + span: ui/binding/match-value-binding-in-guard-3291.rs:7:32: 7:37
                                         // + literal: Const { ty: for<'a> fn(&'a Box<isize>) -> Box<isize> {<Box<isize> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb5: {
        _0 = const 0_isize;              // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:8:20: 8:21
        goto -> bb7;                     // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:8:20: 8:21
    }

    bb6: {
        _9 = (((_7.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize); // scope 1 at ui/binding/match-value-binding-in-guard-3291.rs:7:29: 7:39
        _0 = (*_9);                      // scope 1 at ui/binding/match-value-binding-in-guard-3291.rs:7:29: 7:39
        drop(_7) -> [return: bb7, unwind: bb9]; // scope 1 at ui/binding/match-value-binding-in-guard-3291.rs:7:40: 7:41
    }

    bb7: {
        drop(_1) -> bb8;                 // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:10:1: 10:2
    }

    bb8: {
        return;                          // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:10:2: 10:2
    }

    bb9 (cleanup): {
        drop(_1) -> bb10;                // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:10:1: 10:2
    }

    bb10 (cleanup): {
        resume;                          // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:4:1: 10:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:12:15: 12:15
    let _1: isize;                       // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:13:5: 13:34
    let mut _2: std::option::Option<std::boxed::Box<isize>>; // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:13:9: 13:27
    let mut _3: std::boxed::Box<isize>;  // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:13:14: 13:26
    let _4: isize;                       // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:14:5: 14:35
    let mut _5: std::option::Option<std::boxed::Box<isize>>; // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:14:9: 14:27
    let mut _6: std::boxed::Box<isize>;  // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:14:14: 14:26
    let _7: isize;                       // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:15:5: 15:20
    let mut _8: std::option::Option<std::boxed::Box<isize>>; // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:15:9: 15:13
    let _9: isize;                       // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:16:5: 16:21
    let mut _10: std::option::Option<std::boxed::Box<isize>>; // in scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:16:9: 16:13

    bb0: {
        _3 = Box::<isize>::new(const 22_isize) -> bb1; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:13:14: 13:26
                                         // mir::Constant
                                         // + span: ui/binding/match-value-binding-in-guard-3291.rs:13:14: 13:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Option::<Box<isize>>::Some(move _3); // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:13:9: 13:27
        _1 = foo(move _2, const true) -> bb2; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:13:5: 13:34
                                         // mir::Constant
                                         // + span: ui/binding/match-value-binding-in-guard-3291.rs:13:5: 13:8
                                         // + literal: Const { ty: fn(Option<Box<isize>>, bool) -> isize {foo}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = Box::<isize>::new(const 22_isize) -> bb3; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:14:14: 14:26
                                         // mir::Constant
                                         // + span: ui/binding/match-value-binding-in-guard-3291.rs:14:14: 14:22
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(isize) -> Box<isize> {Box::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = Option::<Box<isize>>::Some(move _6); // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:14:9: 14:27
        _4 = foo(move _5, const false) -> bb4; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:14:5: 14:35
                                         // mir::Constant
                                         // + span: ui/binding/match-value-binding-in-guard-3291.rs:14:5: 14:8
                                         // + literal: Const { ty: fn(Option<Box<isize>>, bool) -> isize {foo}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = const Option::<Box<isize>>::None; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:15:9: 15:13
                                         // mir::Constant
                                         // + span: ui/binding/match-value-binding-in-guard-3291.rs:15:9: 15:13
                                         // + literal: Const { ty: Option<Box<isize>>, val: Value(Scalar(0x0000000000000000)) }
        _7 = foo(move _8, const true) -> bb5; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:15:5: 15:20
                                         // mir::Constant
                                         // + span: ui/binding/match-value-binding-in-guard-3291.rs:15:5: 15:8
                                         // + literal: Const { ty: fn(Option<Box<isize>>, bool) -> isize {foo}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = const Option::<Box<isize>>::None; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:16:9: 16:13
                                         // mir::Constant
                                         // + span: ui/binding/match-value-binding-in-guard-3291.rs:16:9: 16:13
                                         // + literal: Const { ty: Option<Box<isize>>, val: Value(Scalar(0x0000000000000000)) }
        _9 = foo(move _10, const false) -> bb6; // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:16:5: 16:21
                                         // mir::Constant
                                         // + span: ui/binding/match-value-binding-in-guard-3291.rs:16:5: 16:8
                                         // + literal: Const { ty: fn(Option<Box<isize>>, bool) -> isize {foo}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/binding/match-value-binding-in-guard-3291.rs:17:2: 17:2
    }
}
