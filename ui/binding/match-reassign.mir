// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn check_eq(_1: i32, _2: i32) -> () {
    debug x => _1;
    debug y => _2;
    let mut _0: ();
    let mut _3: (&i32, &i32);
    let mut _4: &i32;
    let mut _5: &i32;
    let _6: &i32;
    let _7: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _12: core::panicking::AssertKind;
        scope 2 {
            debug kind => _12;
        }
    }

    bb0: {
        _4 = &_1;
        _5 = &_2;
        _3 = (move _4, move _5);
        _6 = (_3.0: &i32);
        _7 = (_3.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<i32>;
    let mut _3: std::boxed::Box<i32>;
    let _4: ();
    let mut _5: i32;
    let mut _6: bool;
    let mut _7: *const i32;
    scope 1 {
        debug x => _1;
        let _2: std::boxed::Box<i32>;
        scope 2 {
            debug y => _2;
            scope 3 {
                debug _tmp => const 1_i32;
                let mut _8: *const ();
                let mut _9: usize;
                let mut _10: usize;
                let mut _11: usize;
                let mut _12: usize;
                let mut _13: bool;
            }
        }
    }

    bb0: {
        _6 = const false;
        _6 = const true;
        _1 = Box::<i32>::new(const 1_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = const false;
        _2 = move _1;
        _3 = Box::<i32>::new(const 2_i32) -> [return: bb2, unwind: bb6];
    }

    bb2: {
        _6 = const true;
        _1 = move _3;
        _7 = (((_2.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        _8 = _7 as *const () (PtrToPtr);
        _9 = _8 as usize (Transmute);
        _10 = AlignOf(i32);
        _11 = Sub(_10, const 1_usize);
        _12 = BitAnd(_9, _11);
        _13 = Eq(_12, const 0_usize);
        assert(_13, "misaligned pointer dereference: address must be a multiple of {} but is {}", _10, _9) -> [success: bb10, unwind unreachable];
    }

    bb3: {
        drop(_2) -> [return: bb4, unwind: bb9];
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        _6 = const false;
        return;
    }

    bb6 (cleanup): {
        drop(_2) -> [return: bb9, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }

    bb8 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb9 (cleanup): {
        switchInt(_6) -> [0: bb7, otherwise: bb8];
    }

    bb10: {
        _5 = (*_7);
        _4 = check_eq(move _5, const 1_i32) -> [return: bb3, unwind: bb6];
    }
}
