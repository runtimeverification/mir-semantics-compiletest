// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn check_eq(_1: i32, _2: i32) -> () {
    debug x => _1;                       // in scope 0 at ui/binding/match-reassign.rs:7:13: 7:14
    debug y => _2;                       // in scope 0 at ui/binding/match-reassign.rs:7:21: 7:22
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-reassign.rs:7:29: 7:29
    let mut _3: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _5: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _4 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _5 = &_2;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _3 = (move _4, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_3.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_3.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = (*_6);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = (*_7);                     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = Eq(move _10, move _11);     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb2, otherwise: bb1]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<i32, i32>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/binding/match-reassign.rs:9:2: 9:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-reassign.rs:12:11: 12:11
    let mut _1: std::boxed::Box<i32>;    // in scope 0 at ui/binding/match-reassign.rs:13:9: 13:14
    let mut _3: std::boxed::Box<i32>;    // in scope 0 at ui/binding/match-reassign.rs:16:17: 16:28
    let _5: ();                          // in scope 0 at ui/binding/match-reassign.rs:18:13: 18:28
    let mut _6: i32;                     // in scope 0 at ui/binding/match-reassign.rs:18:22: 18:24
    let mut _7: bool;                    // in scope 0 at ui/binding/match-reassign.rs:21:1: 21:2
    let mut _8: *const i32;              // in scope 0 at ui/binding/match-reassign.rs:15:9: 15:10
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/binding/match-reassign.rs:13:9: 13:14
        let _2: std::boxed::Box<i32>;    // in scope 1 at ui/binding/match-reassign.rs:15:9: 15:10
        scope 2 {
            debug y => _2;               // in scope 2 at ui/binding/match-reassign.rs:15:9: 15:10
            let _4: i32;                 // in scope 2 at ui/binding/match-reassign.rs:17:17: 17:21
            scope 3 {
                debug _tmp => _4;        // in scope 3 at ui/binding/match-reassign.rs:17:17: 17:21
            }
        }
    }

    bb0: {
        _7 = const false;                // scope 0 at ui/binding/match-reassign.rs:13:9: 13:14
        _7 = const true;                 // scope 0 at ui/binding/match-reassign.rs:13:17: 13:28
        _1 = Box::<i32>::new(const 1_i32) -> bb1; // scope 0 at ui/binding/match-reassign.rs:13:17: 13:28
                                         // mir::Constant
                                         // + span: ui/binding/match-reassign.rs:13:17: 13:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = const false;                // scope 1 at ui/binding/match-reassign.rs:15:9: 15:10
        _2 = move _1;                    // scope 1 at ui/binding/match-reassign.rs:15:9: 15:10
        _3 = Box::<i32>::new(const 2_i32) -> [return: bb7, unwind: bb5]; // scope 2 at ui/binding/match-reassign.rs:16:17: 16:28
                                         // mir::Constant
                                         // + span: ui/binding/match-reassign.rs:16:17: 16:25
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> [return: bb3, unwind: bb9]; // scope 1 at ui/binding/match-reassign.rs:19:9: 19:10
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/binding/match-reassign.rs:21:1: 21:2
    }

    bb4: {
        _7 = const false;                // scope 0 at ui/binding/match-reassign.rs:21:1: 21:2
        return;                          // scope 0 at ui/binding/match-reassign.rs:21:2: 21:2
    }

    bb5 (cleanup): {
        drop(_2) -> bb9;                 // scope 1 at ui/binding/match-reassign.rs:19:9: 19:10
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/binding/match-reassign.rs:12:1: 21:2
    }

    bb7: {
        _7 = const true;                 // scope 2 at ui/binding/match-reassign.rs:16:13: 16:14
        _1 = move _3;                    // scope 2 at ui/binding/match-reassign.rs:16:13: 16:14
        _4 = const 1_i32;                // scope 2 at ui/binding/match-reassign.rs:17:24: 17:25
        _8 = (((_2.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 3 at ui/binding/match-reassign.rs:18:22: 18:24
        _6 = (*_8);                      // scope 3 at ui/binding/match-reassign.rs:18:22: 18:24
        _5 = check_eq(move _6, const 1_i32) -> [return: bb2, unwind: bb5]; // scope 3 at ui/binding/match-reassign.rs:18:13: 18:28
                                         // mir::Constant
                                         // + span: ui/binding/match-reassign.rs:18:13: 18:21
                                         // + literal: Const { ty: fn(i32, i32) {check_eq}, val: Value(<ZST>) }
    }

    bb8 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/binding/match-reassign.rs:21:1: 21:2
    }

    bb9 (cleanup): {
        switchInt(_7) -> [0: bb6, otherwise: bb8]; // scope 0 at ui/binding/match-reassign.rs:21:1: 21:2
    }
}
