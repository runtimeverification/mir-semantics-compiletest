// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: std::fmt::Arguments<'_>;
    let mut _3: &[&str];
    let mut _4: &[core::fmt::rt::Argument<'_>];
    let _5: &[core::fmt::rt::Argument<'_>; 1];
    let _6: [core::fmt::rt::Argument<'_>; 1];
    let mut _7: core::fmt::rt::Argument<'_>;
    let _8: &i32;
    let _9: i32;
    let mut _10: color;
    let mut _11: isize;
    let mut _12: &[&str; 2];

    bb0: {
        _12 = const _;
        _3 = _12 as &[&str] (Pointer(Unsize));
        _10 = color::red;
        _11 = discriminant(_10);
        switchInt(move _11) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _9 = const 3_i32;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _9 = const 1_i32;
        goto -> bb5;
    }

    bb4: {
        _9 = const 2_i32;
        goto -> bb5;
    }

    bb5: {
        _8 = &_9;
        _7 = core::fmt::rt::Argument::<'_>::new_display::<i32>(_8) -> [return: bb6, unwind continue];
    }

    bb6: {
        _6 = [move _7];
        _5 = &_6;
        _4 = _5 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _2 = Arguments::<'_>::new_v1(move _3, move _4) -> [return: bb7, unwind continue];
    }

    bb7: {
        _1 = _print(move _2) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
