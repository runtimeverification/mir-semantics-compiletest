// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-with-ret-arm.rs:2:15: 2:15
    let _1: u32;                         // in scope 0 at ui/binding/match-with-ret-arm.rs:6:9: 6:10
    let mut _2: std::option::Option<usize>; // in scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:47
    let mut _3: std::result::Result<usize, std::num::ParseIntError>; // in scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:42
    let mut _4: &str;                    // in scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:42
    let _5: &str;                        // in scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:25
    let mut _6: isize;                   // in scope 0 at ui/binding/match-with-ret-arm.rs:7:9: 7:13
    let _7: usize;                       // in scope 0 at ui/binding/match-with-ret-arm.rs:8:14: 8:17
    let mut _8: usize;                   // in scope 0 at ui/binding/match-with-ret-arm.rs:8:22: 8:25
    let mut _9: (&u32, &u32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: u32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &u32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _26: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _27: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _28: &[&str];                // in scope 0 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
    let mut _29: &[&str; 2];             // in scope 0 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
    let _30: &[&str; 2];                 // in scope 0 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
    let mut _31: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _32: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _33: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _34: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _35: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/match-with-ret-arm.rs:11:20: 11:21
    let mut _36: &u32;                   // in scope 0 at ui/binding/match-with-ret-arm.rs:11:20: 11:21
    let _37: &u32;                       // in scope 0 at ui/binding/match-with-ret-arm.rs:11:20: 11:21
    scope 1 {
        debug f => _1;                   // in scope 1 at ui/binding/match-with-ret-arm.rs:6:9: 6:10
        let _12: &u32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _13: &u32;                   // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _38: &[&str; 2];         // in scope 1 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
        let mut _39: &u32;               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 3 {
            debug left_val => _12;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _13;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _18: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _18;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
        debug num => _7;                 // in scope 2 at ui/binding/match-with-ret-arm.rs:8:14: 8:17
    }

    bb0: {
        _5 = const "1234";               // scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:25
                                         // mir::Constant
                                         // + span: ui/binding/match-with-ret-arm.rs:6:19: 6:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:42
        _3 = core::str::<impl str>::parse::<usize>(move _4) -> bb1; // scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:42
                                         // mir::Constant
                                         // + span: ui/binding/match-with-ret-arm.rs:6:26: 6:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> Result<usize, <usize as FromStr>::Err> {core::str::<impl str>::parse::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = Result::<usize, ParseIntError>::ok(move _3) -> bb2; // scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:47
                                         // mir::Constant
                                         // + span: ui/binding/match-with-ret-arm.rs:6:43: 6:45
                                         // + literal: Const { ty: fn(Result<usize, ParseIntError>) -> Option<usize> {Result::<usize, ParseIntError>::ok}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = discriminant(_2);           // scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:47
        switchInt(move _6) -> [0: bb9, 1: bb3, otherwise: bb4]; // scope 0 at ui/binding/match-with-ret-arm.rs:6:13: 6:47
    }

    bb3: {
        _7 = ((_2 as Some).0: usize);    // scope 0 at ui/binding/match-with-ret-arm.rs:8:14: 8:17
        _8 = _7;                         // scope 2 at ui/binding/match-with-ret-arm.rs:8:22: 8:25
        _1 = move _8 as u32 (IntToInt);  // scope 2 at ui/binding/match-with-ret-arm.rs:8:22: 8:32
        _10 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _39 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(main, [], Some(promoted[1])) }
        _11 = _39;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_9.0: &u32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_9.1: &u32);              // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = const 1234_u32;            // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        unreachable;                     // scope 0 at ui/binding/match-with-ret-arm.rs:6:19: 6:47
    }

    bb5: {
        _18 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<u32, u32>(move _20, move _21, move _23, move _25); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u32, &'b u32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u32, u32>}, val: Value(<ZST>) }
    }

    bb6: {
        _38 = const _;                   // scope 1 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
                                         // mir::Constant
                                         // + span: ui/binding/match-with-ret-arm.rs:11:14: 11:18
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _30 = _38;                       // scope 1 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
        _29 = _30;                       // scope 1 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
        _28 = move _29 as &[&str] (Pointer(Unsize)); // scope 1 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
        _37 = &_1;                       // scope 1 at ui/binding/match-with-ret-arm.rs:11:20: 11:21
        _36 = _37;                       // scope 1 at ui/binding/match-with-ret-arm.rs:11:20: 11:21
        _35 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(move _36) -> bb7; // scope 1 at ui/binding/match-with-ret-arm.rs:11:20: 11:21
                                         // mir::Constant
                                         // + span: ui/binding/match-with-ret-arm.rs:11:20: 11:21
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb7: {
        _34 = [move _35];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _33 = &_34;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _32 = _33;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _31 = move _32 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _27 = Arguments::<'_>::new_v1(move _28, move _31) -> bb8; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _26 = _print(move _27) -> bb9;   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/binding/match-with-ret-arm.rs:12:2: 12:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/match-with-ret-arm.rs:11:14: 11:18

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
                                         // mir::Constant
                                         // + span: ui/binding/match-with-ret-arm.rs:11:14: 11:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/match-with-ret-arm.rs:11:14: 11:18
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
        return;                          // scope 0 at ui/binding/match-with-ret-arm.rs:11:14: 11:18
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/binding/match-with-ret-arm.rs:10:19: 10:23

    bb0: {
        _1 = const 1234_u32;             // scope 0 at ui/binding/match-with-ret-arm.rs:10:19: 10:23
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
