// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<Pair>;
    let mut _2: Pair;
    let mut _3: std::boxed::Box<isize>;
    let mut _4: std::boxed::Box<isize>;
    let mut _8: (&isize, &isize);
    let mut _9: &isize;
    let mut _12: bool;
    let mut _13: bool;
    let mut _14: isize;
    let mut _15: isize;
    let _17: !;
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: std::boxed::Box<isize>;
    let mut _20: (&isize, &isize);
    let mut _21: &isize;
    let mut _24: bool;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let _29: !;
    let mut _30: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _33: std::boxed::Box<isize>;
    let mut _34: std::boxed::Box<isize>;
    let mut _35: *const Pair;
    let mut _36: *const isize;
    let mut _37: *const isize;
    scope 1 {
        debug x => _1;
        let _5: &mut Pair;
        let mut _50: *const ();
        let mut _51: usize;
        let mut _52: usize;
        let mut _53: usize;
        let mut _54: usize;
        let mut _55: bool;
        scope 2 {
            debug x_internal => _5;
            let _6: &mut std::boxed::Box<isize>;
            let _7: &mut std::boxed::Box<isize>;
            scope 3 {
                debug a => _6;
                debug _b => _7;
                let _10: &isize;
                let _11: &isize;
                let _22: &isize;
                let _23: &isize;
                let mut _31: &isize;
                let mut _32: &isize;
                let mut _38: *const ();
                let mut _39: usize;
                let mut _40: usize;
                let mut _41: usize;
                let mut _42: usize;
                let mut _43: bool;
                let mut _44: *const ();
                let mut _45: usize;
                let mut _46: usize;
                let mut _47: usize;
                let mut _48: usize;
                let mut _49: bool;
                scope 4 {
                    debug left_val => _10;
                    debug right_val => _11;
                    let _16: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _16;
                    }
                }
                scope 6 {
                    debug left_val => _22;
                    debug right_val => _23;
                    let _28: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _28;
                    }
                }
            }
        }
    }

    bb0: {
        _3 = Box::<isize>::new(const 10_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Box::<isize>::new(const 20_isize) -> [return: bb2, unwind: bb13];
    }

    bb2: {
        _2 = Pair { a: move _3, b: move _4 };
        _1 = Box::<Pair>::new(move _2) -> [return: bb3, unwind continue];
    }

    bb3: {
        _35 = (((_1.0: std::ptr::Unique<Pair>).0: std::ptr::NonNull<Pair>).0: *const Pair);
        _50 = _35 as *const () (PtrToPtr);
        _51 = _50 as usize (Transmute);
        _52 = AlignOf(Pair);
        _53 = Sub(_52, const 1_usize);
        _54 = BitAnd(_51, _53);
        _55 = Eq(_54, const 0_usize);
        assert(_55, "misaligned pointer dereference: address must be a multiple of {} but is {}", _52, _51) -> [success: bb17, unwind unreachable];
    }

    bb4: {
        _16 = core::panicking::AssertKind::Eq;
        _18 = Option::<Arguments<'_>>::None;
        _17 = core::panicking::assert_failed::<isize, isize>(move _16, _10, _11, move _18) -> bb12;
    }

    bb5: {
        _19 = Box::<isize>::new(const 30_isize) -> [return: bb6, unwind: bb12];
    }

    bb6: {
        drop((*_6)) -> [return: bb7, unwind: bb8];
    }

    bb7: {
        (*_6) = move _19;
        _34 = deref_copy (*_6);
        _37 = (((_34.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _38 = _37 as *const () (PtrToPtr);
        _39 = _38 as usize (Transmute);
        _40 = AlignOf(isize);
        _41 = Sub(_40, const 1_usize);
        _42 = BitAnd(_39, _41);
        _43 = Eq(_42, const 0_usize);
        assert(_43, "misaligned pointer dereference: address must be a multiple of {} but is {}", _40, _39) -> [success: bb15, unwind unreachable];
    }

    bb8 (cleanup): {
        (*_6) = move _19;
        goto -> bb12;
    }

    bb9: {
        _28 = core::panicking::AssertKind::Eq;
        _30 = Option::<Arguments<'_>>::None;
        _29 = core::panicking::assert_failed::<isize, isize>(move _28, _22, _23, move _30) -> bb12;
    }

    bb10: {
        drop(_1) -> [return: bb11, unwind continue];
    }

    bb11: {
        return;
    }

    bb12 (cleanup): {
        drop(_1) -> [return: bb14, unwind terminate];
    }

    bb13 (cleanup): {
        drop(_3) -> [return: bb14, unwind terminate];
    }

    bb14 (cleanup): {
        resume;
    }

    bb15: {
        _21 = &(*_37);
        _31 = const _;
        _20 = (move _21, _31);
        _22 = (_20.0: &isize);
        _23 = (_20.1: &isize);
        _26 = (*_22);
        _27 = (*_23);
        _25 = Eq(move _26, move _27);
        _24 = Not(move _25);
        switchInt(move _24) -> [0: bb10, otherwise: bb9];
    }

    bb16: {
        _9 = &(*_36);
        _32 = const _;
        _8 = (move _9, _32);
        _10 = (_8.0: &isize);
        _11 = (_8.1: &isize);
        _14 = (*_10);
        _15 = (*_11);
        _13 = Eq(move _14, move _15);
        _12 = Not(move _13);
        switchInt(move _12) -> [0: bb5, otherwise: bb4];
    }

    bb17: {
        _5 = &mut (*_35);
        _6 = &mut ((*_5).0: std::boxed::Box<isize>);
        _7 = &mut ((*_5).1: std::boxed::Box<isize>);
        _33 = deref_copy (*_6);
        _36 = (((_33.0: std::ptr::Unique<isize>).0: std::ptr::NonNull<isize>).0: *const isize);
        _44 = _36 as *const () (PtrToPtr);
        _45 = _44 as usize (Transmute);
        _46 = AlignOf(isize);
        _47 = Sub(_46, const 1_usize);
        _48 = BitAnd(_45, _47);
        _49 = Eq(_48, const 0_usize);
        assert(_49, "misaligned pointer dereference: address must be a multiple of {} but is {}", _46, _45) -> [success: bb16, unwind unreachable];
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 30_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 10_isize;
        _0 = &_1;
        return;
    }
}
