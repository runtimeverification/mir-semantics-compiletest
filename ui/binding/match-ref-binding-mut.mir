// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn destructure(_1: &mut Rec) -> () {
    debug x => _1;
    let mut _0: ();
    let _2: &mut isize;
    scope 1 {
        debug f => _2;
    }

    bb0: {
        _2 = &mut ((*_1).0: isize);
        (*_2) = Add((*_2), const 1_isize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: Rec;
    let _2: ();
    let mut _3: &mut Rec;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: isize;
    let mut _11: isize;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug v => _1;
        let _6: &isize;
        let _7: &isize;
        let mut _15: &isize;
        scope 2 {
            debug left_val => _6;
            debug right_val => _7;
            let _12: core::panicking::AssertKind;
            scope 3 {
                debug kind => _12;
            }
        }
    }

    bb0: {
        _1 = Rec { f: const 22_isize };
        _3 = &mut _1;
        _2 = destructure(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &(_1.0: isize);
        _15 = const _;
        _4 = (move _5, _15);
        _6 = (_4.0: &isize);
        _7 = (_4.1: &isize);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<isize, isize>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 23_isize;
        _0 = &_1;
        return;
    }
}
