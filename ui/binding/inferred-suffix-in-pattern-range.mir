// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:3:15: 3:15
    let _1: i32;                         // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:4:9: 4:10
    let mut _3: bool;                    // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:6:7: 6:14
    let mut _4: &str;                    // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:6:23: 6:45
    let _5: &str;                        // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:6:23: 6:33
    let mut _6: &str;                    // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:7:23: 7:41
    let _7: &str;                        // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:7:23: 7:29
    let mut _8: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &std::string::String;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: std::string::String;        // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:9:27: 9:45
    let mut _12: &str;                   // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:9:27: 9:45
    let _13: &str;                       // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:9:27: 9:33
    let mut _16: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _17: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _18: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _19: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _21: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _22: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _23: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _24: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _25: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _26: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: bool;                   // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:13:7: 13:14
    let mut _31: &str;                   // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:13:23: 13:45
    let _32: &str;                       // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:13:23: 13:33
    let mut _33: &str;                   // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:14:23: 14:41
    let _34: &str;                       // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:14:23: 14:29
    let mut _35: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _36: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _37: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _38: std::string::String;        // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:16:27: 16:45
    let mut _39: &str;                   // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:16:27: 16:45
    let _40: &str;                       // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:16:27: 16:33
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _44: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _45: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _46: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _48: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _49: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _50: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _51: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _52: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _53: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _57: bool;                   // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:20:7: 20:14
    let mut _58: &str;                   // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:20:23: 20:45
    let _59: &str;                       // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:20:23: 20:33
    let mut _60: &str;                   // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:21:23: 21:41
    let _61: &str;                       // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:21:23: 21:29
    let mut _62: (&std::string::String, &std::string::String); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _63: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _64: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _65: std::string::String;        // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:23:27: 23:49
    let mut _66: &str;                   // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:23:27: 23:49
    let _67: &str;                       // in scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:23:27: 23:37
    let mut _70: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _71: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _72: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _73: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _75: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _76: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _77: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _78: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _79: &std::string::String;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _80: &std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _81: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:4:9: 4:10
        let _2: std::string::String;     // in scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:5:9: 5:18
        scope 2 {
            debug x_message => _2;       // in scope 2 at ui/binding/inferred-suffix-in-pattern-range.rs:5:9: 5:18
            let _14: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _15: &std::string::String; // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _28: i32;                // in scope 2 at ui/binding/inferred-suffix-in-pattern-range.rs:11:9: 11:10
            scope 3 {
                debug left_val => _14;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _15;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _20: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _20;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
            scope 5 {
                debug y => _28;          // in scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:11:9: 11:10
                let _29: std::string::String; // in scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:12:9: 12:18
                scope 6 {
                    debug y_message => _29; // in scope 6 at ui/binding/inferred-suffix-in-pattern-range.rs:12:9: 12:18
                    let _41: &std::string::String; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _42: &std::string::String; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _55: u64;        // in scope 6 at ui/binding/inferred-suffix-in-pattern-range.rs:18:9: 18:10
                    scope 7 {
                        debug left_val => _41; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _42; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _47: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 8 {
                            debug kind => _47; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 9 {
                        debug z => _55;  // in scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:18:9: 18:10
                        let _56: std::string::String; // in scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:19:9: 19:18
                        scope 10 {
                            debug z_message => _56; // in scope 10 at ui/binding/inferred-suffix-in-pattern-range.rs:19:9: 19:18
                            let _68: &std::string::String; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                            let _69: &std::string::String; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                            scope 11 {
                                debug left_val => _68; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                debug right_val => _69; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                let _74: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                scope 12 {
                                    debug kind => _74; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:4:13: 4:14
        _3 = Le(_1, const 1_i32);        // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:6:7: 6:14
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:6:7: 6:14
    }

    bb1: {
        _7 = const "lots";               // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:7:23: 7:29
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:7:23: 7:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _6 = _7;                         // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:7:23: 7:41
        _2 = <str as ToString>::to_string(move _6) -> bb3; // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:7:23: 7:41
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:7:30: 7:39
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb2: {
        _5 = const "not many";           // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:6:23: 6:33
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:6:23: 6:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:6:23: 6:45
        _2 = <str as ToString>::to_string(move _4) -> bb3; // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:6:23: 6:45
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:6:34: 6:43
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb3: {
        _9 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _13 = const "lots";              // scope 2 at ui/binding/inferred-suffix-in-pattern-range.rs:9:27: 9:33
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:9:27: 9:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _12 = _13;                       // scope 2 at ui/binding/inferred-suffix-in-pattern-range.rs:9:27: 9:45
        _11 = <str as ToString>::to_string(move _12) -> [return: bb4, unwind: bb33]; // scope 2 at ui/binding/inferred-suffix-in-pattern-range.rs:9:27: 9:45
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:9:34: 9:43
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = &_11;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _14 = (_8.0: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _15 = (_8.1: &std::string::String); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _18 = _14;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _19 = _15;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _17 = <String as PartialEq>::eq(move _18, move _19) -> [return: bb5, unwind: bb32]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = Not(move _17);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _16) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _20 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = _14;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _26 = _15;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _21 = core::panicking::assert_failed::<String, String>(move _22, move _23, move _25, move _27) -> bb32; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb7: {
        drop(_11) -> [return: bb8, unwind: bb33]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb8: {
        _28 = const 2_i32;               // scope 2 at ui/binding/inferred-suffix-in-pattern-range.rs:11:13: 11:14
        _30 = Le(_28, const 1_i32);      // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:13:7: 13:14
        switchInt(move _30) -> [0: bb9, otherwise: bb10]; // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:13:7: 13:14
    }

    bb9: {
        _34 = const "lots";              // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:14:23: 14:29
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:14:23: 14:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _33 = _34;                       // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:14:23: 14:41
        _29 = <str as ToString>::to_string(move _33) -> [return: bb35, unwind: bb33]; // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:14:23: 14:41
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:14:30: 14:39
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb10: {
        _32 = const "not many";          // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:13:23: 13:33
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:13:23: 13:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _31 = _32;                       // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:13:23: 13:45
        _29 = <str as ToString>::to_string(move _31) -> [return: bb36, unwind: bb33]; // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:13:23: 13:45
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:13:34: 13:43
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb11: {
        _36 = &_29;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _40 = const "lots";              // scope 6 at ui/binding/inferred-suffix-in-pattern-range.rs:16:27: 16:33
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:16:27: 16:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _39 = _40;                       // scope 6 at ui/binding/inferred-suffix-in-pattern-range.rs:16:27: 16:45
        _38 = <str as ToString>::to_string(move _39) -> [return: bb12, unwind: bb31]; // scope 6 at ui/binding/inferred-suffix-in-pattern-range.rs:16:27: 16:45
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:16:34: 16:43
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb12: {
        _37 = &_38;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _35 = (move _36, move _37);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _41 = (_35.0: &std::string::String); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _42 = (_35.1: &std::string::String); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _45 = _41;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _46 = _42;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _44 = <String as PartialEq>::eq(move _45, move _46) -> [return: bb13, unwind: bb30]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb13: {
        _43 = Not(move _44);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _43) -> [0: bb15, otherwise: bb14]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb14: {
        _47 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _49 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _51 = _41;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _50 = _51;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _53 = _42;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _52 = _53;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _54 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _48 = core::panicking::assert_failed::<String, String>(move _49, move _50, move _52, move _54) -> bb30; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb15: {
        drop(_38) -> [return: bb16, unwind: bb31]; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb16: {
        _55 = const 1_u64;               // scope 6 at ui/binding/inferred-suffix-in-pattern-range.rs:18:13: 18:17
        _57 = Le(_55, const 1_u64);      // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:20:7: 20:14
        switchInt(move _57) -> [0: bb17, otherwise: bb18]; // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:20:7: 20:14
    }

    bb17: {
        _61 = const "lots";              // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:21:23: 21:29
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:21:23: 21:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _60 = _61;                       // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:21:23: 21:41
        _56 = <str as ToString>::to_string(move _60) -> [return: bb37, unwind: bb31]; // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:21:23: 21:41
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:21:30: 21:39
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb18: {
        _59 = const "not many";          // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:20:23: 20:33
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:20:23: 20:33
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _58 = _59;                       // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:20:23: 20:45
        _56 = <str as ToString>::to_string(move _58) -> [return: bb38, unwind: bb31]; // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:20:23: 20:45
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:20:34: 20:43
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb19: {
        _63 = &_56;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _67 = const "not many";          // scope 10 at ui/binding/inferred-suffix-in-pattern-range.rs:23:27: 23:37
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:23:27: 23:37
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _66 = _67;                       // scope 10 at ui/binding/inferred-suffix-in-pattern-range.rs:23:27: 23:49
        _65 = <str as ToString>::to_string(move _66) -> [return: bb20, unwind: bb29]; // scope 10 at ui/binding/inferred-suffix-in-pattern-range.rs:23:27: 23:49
                                         // mir::Constant
                                         // + span: ui/binding/inferred-suffix-in-pattern-range.rs:23:38: 23:47
                                         // + literal: Const { ty: for<'a> fn(&'a str) -> String {<str as ToString>::to_string}, val: Value(<ZST>) }
    }

    bb20: {
        _64 = &_65;                      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _62 = (move _63, move _64);      // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _68 = (_62.0: &std::string::String); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _69 = (_62.1: &std::string::String); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _72 = _68;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _73 = _69;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _71 = <String as PartialEq>::eq(move _72, move _73) -> [return: bb21, unwind: bb28]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b String) -> bool {<String as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb21: {
        _70 = Not(move _71);             // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _70) -> [0: bb23, otherwise: bb22]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _74 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _76 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _78 = _68;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _77 = _78;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _80 = _69;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _79 = _80;                       // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _81 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _75 = core::panicking::assert_failed::<String, String>(move _76, move _77, move _79, move _81) -> bb28; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b String, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, String>}, val: Value(<ZST>) }
    }

    bb23: {
        drop(_65) -> [return: bb24, unwind: bb29]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb24: {
        drop(_56) -> [return: bb25, unwind: bb31]; // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:24:1: 24:2
    }

    bb25: {
        drop(_29) -> [return: bb26, unwind: bb33]; // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:24:1: 24:2
    }

    bb26: {
        drop(_2) -> bb27;                // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:24:1: 24:2
    }

    bb27: {
        return;                          // scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:24:2: 24:2
    }

    bb28 (cleanup): {
        drop(_65) -> bb29;               // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb29 (cleanup): {
        drop(_56) -> bb31;               // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:24:1: 24:2
    }

    bb30 (cleanup): {
        drop(_38) -> bb31;               // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb31 (cleanup): {
        drop(_29) -> bb33;               // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:24:1: 24:2
    }

    bb32 (cleanup): {
        drop(_11) -> bb33;               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb33 (cleanup): {
        drop(_2) -> bb34;                // scope 1 at ui/binding/inferred-suffix-in-pattern-range.rs:24:1: 24:2
    }

    bb34 (cleanup): {
        resume;                          // scope 0 at ui/binding/inferred-suffix-in-pattern-range.rs:3:1: 24:2
    }

    bb35: {
        goto -> bb11;                    // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:14:23: 14:41
    }

    bb36: {
        goto -> bb11;                    // scope 5 at ui/binding/inferred-suffix-in-pattern-range.rs:13:23: 13:45
    }

    bb37: {
        goto -> bb19;                    // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:21:23: 21:41
    }

    bb38: {
        goto -> bb19;                    // scope 9 at ui/binding/inferred-suffix-in-pattern-range.rs:20:23: 20:45
    }
}
