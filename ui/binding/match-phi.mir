// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: F) -> () {
    debug it => _1;                      // in scope 0 at ui/binding/match-phi.rs:10:11: 10:13
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-phi.rs:10:18: 10:18
    let _2: ();                          // in scope 0 at ui/binding/match-phi.rs:10:43: 10:49
    let mut _3: F;                       // in scope 0 at ui/binding/match-phi.rs:10:43: 10:45
    let mut _4: (isize,);                // in scope 0 at ui/binding/match-phi.rs:10:43: 10:49

    bb0: {
        _3 = move _1;                    // scope 0 at ui/binding/match-phi.rs:10:43: 10:45
        _4 = const (10_isize,);          // scope 0 at ui/binding/match-phi.rs:10:43: 10:49
        _2 = <F as FnOnce<(isize,)>>::call_once(move _3, move _4) -> bb1; // scope 0 at ui/binding/match-phi.rs:10:43: 10:49
                                         // mir::Constant
                                         // + span: ui/binding/match-phi.rs:10:43: 10:45
                                         // + literal: Const { ty: extern "rust-call" fn(F, (isize,)) -> <F as FnOnce<(isize,)>>::Output {<F as FnOnce<(isize,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/match-phi.rs:10:52: 10:52
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-phi.rs:12:15: 12:15
    let mut _1: bool;                    // in scope 0 at ui/binding/match-phi.rs:13:9: 13:14
    let mut _2: [closure@ui/binding/match-phi.rs:15:35: 15:39]; // in scope 0 at ui/binding/match-phi.rs:15:35: 15:43
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/binding/match-phi.rs:13:9: 13:14
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/binding/match-phi.rs:13:17: 13:21
        _1 = const true;                 // scope 1 at ui/binding/match-phi.rs:15:21: 15:29
        _0 = foo::<[closure@ui/binding/match-phi.rs:15:35: 15:39]>(move _2) -> bb1; // scope 1 at ui/binding/match-phi.rs:15:31: 15:45
                                         // mir::Constant
                                         // + span: ui/binding/match-phi.rs:15:31: 15:34
                                         // + literal: Const { ty: fn([closure@ui/binding/match-phi.rs:15:35: 15:39]) {foo::<[closure@ui/binding/match-phi.rs:15:35: 15:39]>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/match-phi.rs:19:2: 19:2
    }
}

fn main::{closure#0}(_1: [closure@ui/binding/match-phi.rs:15:35: 15:39], _2: isize) -> () {
    debug _i => _2;                      // in scope 0 at ui/binding/match-phi.rs:15:36: 15:38
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-phi.rs:15:40: 15:40

    bb0: {
        return;                          // scope 0 at ui/binding/match-phi.rs:15:43: 15:43
    }
}
