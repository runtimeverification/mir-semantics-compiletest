// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-byte-array-patterns.rs:3:11: 3:11
    let _1: &[u8; 4];                    // in scope 0 at ui/binding/match-byte-array-patterns.rs:4:9: 4:12
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _5: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _7: (&u8, &u8);              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _8: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _9: &u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _12: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _14: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _15: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _17: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _18: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _19: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _20: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _21: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _22: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _23: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _24: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _26: &[u8; 4];               // in scope 0 at ui/binding/match-byte-array-patterns.rs:23:22: 23:25
    let mut _27: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:28:10: 28:29
    let mut _28: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:28:10: 28:29
    let mut _29: bool;                   // in scope 0 at ui/binding/match-byte-array-patterns.rs:28:10: 28:29
    let mut _30: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:27:10: 27:13
    let mut _31: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:27:10: 27:13
    let mut _32: bool;                   // in scope 0 at ui/binding/match-byte-array-patterns.rs:27:10: 27:13
    let mut _33: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:26:10: 26:22
    let mut _34: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:26:10: 26:22
    let mut _35: bool;                   // in scope 0 at ui/binding/match-byte-array-patterns.rs:26:10: 26:22
    let mut _36: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _37: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _38: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _39: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _40: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:34:9: 34:16
    let mut _41: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:34:9: 34:16
    let mut _42: bool;                   // in scope 0 at ui/binding/match-byte-array-patterns.rs:34:9: 34:16
    let mut _43: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _44: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _45: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:40:9: 40:16
    let mut _46: usize;                  // in scope 0 at ui/binding/match-byte-array-patterns.rs:40:9: 40:16
    let mut _47: bool;                   // in scope 0 at ui/binding/match-byte-array-patterns.rs:40:9: 40:16
    let mut _48: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _50: (&u8, &u8);             // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _51: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _52: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _55: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _56: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _57: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _58: u8;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _60: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _61: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _62: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _63: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _64: &u8;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _65: &u8;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _66: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _67: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
    let mut _70: &[u8; 4];               // in scope 0 at ui/binding/match-byte-array-patterns.rs:4:15: 4:24
    scope 1 {
        debug buf => _1;                 // in scope 1 at ui/binding/match-byte-array-patterns.rs:4:9: 4:12
        let _6: u8;                      // in scope 1 at ui/binding/match-byte-array-patterns.rs:19:14: 19:15
        let _25: &[u8];                  // in scope 1 at ui/binding/match-byte-array-patterns.rs:23:9: 23:12
        scope 2 {
            debug x => _6;               // in scope 2 at ui/binding/match-byte-array-patterns.rs:19:14: 19:15
            let _10: &u8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _11: &u8;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _69: &u8;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _10;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _11;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _16: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _16;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
        scope 5 {
            debug buf => _25;            // in scope 5 at ui/binding/match-byte-array-patterns.rs:23:9: 23:12
            let _49: u8;                 // in scope 5 at ui/binding/match-byte-array-patterns.rs:41:14: 41:15
            scope 6 {
                debug x => _49;          // in scope 6 at ui/binding/match-byte-array-patterns.rs:41:14: 41:15
                let _53: &u8;            // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _54: &u8;            // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _68: &u8;        // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 7 {
                    debug left_val => _53; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _54; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _59: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 8 {
                        debug kind => _59; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }

    bb0: {
        _70 = const _;                   // scope 0 at ui/binding/match-byte-array-patterns.rs:4:15: 4:24
                                         // mir::Constant
                                         // + span: ui/binding/match-byte-array-patterns.rs:4:15: 4:24
                                         // + literal: Const { ty: &[u8; 4], val: Unevaluated(main, [], Some(promoted[2])) }
        _1 = _70;                        // scope 0 at ui/binding/match-byte-array-patterns.rs:4:15: 4:24
        switchInt((*_1)[1 of 4]) -> [1: bb1, otherwise: bb3]; // scope 1 at ui/binding/match-byte-array-patterns.rs:5:5: 5:14
    }

    bb1: {
        switchInt((*_1)[2 of 4]) -> [0: bb2, otherwise: bb3]; // scope 1 at ui/binding/match-byte-array-patterns.rs:5:5: 5:14
    }

    bb2: {
        switchInt((*_1)[3 of 4]) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/binding/match-byte-array-patterns.rs:5:5: 5:14
    }

    bb3: {
        switchInt((*_1)[0 of 4]) -> [116: bb5, 0: bb9, otherwise: bb8]; // scope 1 at ui/binding/match-byte-array-patterns.rs:11:5: 11:14
    }

    bb4: {
        _2 = core::panicking::panic(const "not implemented"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb5: {
        switchInt((*_1)[1 of 4]) -> [114: bb6, otherwise: bb8]; // scope 1 at ui/binding/match-byte-array-patterns.rs:11:5: 11:14
    }

    bb6: {
        switchInt((*_1)[2 of 4]) -> [117: bb7, otherwise: bb8]; // scope 1 at ui/binding/match-byte-array-patterns.rs:11:5: 11:14
    }

    bb7: {
        switchInt((*_1)[3 of 4]) -> [101: bb12, otherwise: bb8]; // scope 1 at ui/binding/match-byte-array-patterns.rs:11:5: 11:14
    }

    bb8: {
        switchInt((*_1)[0 of 4]) -> [116: bb14, 0: bb18, otherwise: bb17]; // scope 1 at ui/binding/match-byte-array-patterns.rs:17:5: 17:14
    }

    bb9: {
        switchInt((*_1)[1 of 4]) -> [1: bb10, otherwise: bb8]; // scope 1 at ui/binding/match-byte-array-patterns.rs:11:5: 11:14
    }

    bb10: {
        switchInt((*_1)[2 of 4]) -> [0: bb11, otherwise: bb8]; // scope 1 at ui/binding/match-byte-array-patterns.rs:11:5: 11:14
    }

    bb11: {
        switchInt((*_1)[3 of 4]) -> [0: bb13, otherwise: bb8]; // scope 1 at ui/binding/match-byte-array-patterns.rs:11:5: 11:14
    }

    bb12: {
        _3 = core::panicking::panic(const "not implemented"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb13: {
        _4 = core::panicking::panic(const "not implemented"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb14: {
        switchInt((*_1)[1 of 4]) -> [114: bb15, otherwise: bb17]; // scope 1 at ui/binding/match-byte-array-patterns.rs:17:5: 17:14
    }

    bb15: {
        switchInt((*_1)[2 of 4]) -> [117: bb16, otherwise: bb17]; // scope 1 at ui/binding/match-byte-array-patterns.rs:17:5: 17:14
    }

    bb16: {
        switchInt((*_1)[3 of 4]) -> [101: bb20, otherwise: bb17]; // scope 1 at ui/binding/match-byte-array-patterns.rs:17:5: 17:14
    }

    bb17: {
        _24 = core::panicking::panic(const "not implemented"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb18: {
        switchInt((*_1)[2 of 4]) -> [0: bb19, otherwise: bb17]; // scope 1 at ui/binding/match-byte-array-patterns.rs:17:5: 17:14
    }

    bb19: {
        switchInt((*_1)[3 of 4]) -> [0: bb21, otherwise: bb17]; // scope 1 at ui/binding/match-byte-array-patterns.rs:17:5: 17:14
    }

    bb20: {
        _5 = core::panicking::panic(const "not implemented"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb21: {
        _6 = (*_1)[1 of 4];              // scope 1 at ui/binding/match-byte-array-patterns.rs:19:14: 19:15
        _8 = &_6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _69 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[1])) }
        _9 = _69;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _7 = (move _8, move _9);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _10 = (_7.0: &u8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _11 = (_7.1: &u8);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _14 = (*_10);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _15 = const 0_u8;                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _13 = Eq(move _14, move _15);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _12 = Not(move _13);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _12) -> [0: bb23, otherwise: bb22]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb22: {
        _16 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _18 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = _10;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _22 = _11;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _21 = _22;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _17 = core::panicking::assert_failed::<u8, u8>(move _18, move _19, move _21, move _23); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb23: {
        _26 = _1;                        // scope 1 at ui/binding/match-byte-array-patterns.rs:23:22: 23:25
        _25 = move _26 as &[u8] (Pointer(Unsize)); // scope 1 at ui/binding/match-byte-array-patterns.rs:23:22: 23:25
        _33 = Len((*_25));               // scope 5 at ui/binding/match-byte-array-patterns.rs:26:10: 26:22
        _34 = const 4_usize;             // scope 5 at ui/binding/match-byte-array-patterns.rs:26:10: 26:22
        _35 = Eq(move _33, move _34);    // scope 5 at ui/binding/match-byte-array-patterns.rs:26:10: 26:22
        switchInt(move _35) -> [0: bb32, otherwise: bb24]; // scope 5 at ui/binding/match-byte-array-patterns.rs:26:10: 26:22
    }

    bb24: {
        switchInt((*_25)[0 of 4]) -> [0: bb25, 116: bb29, otherwise: bb28]; // scope 5 at ui/binding/match-byte-array-patterns.rs:25:5: 25:14
    }

    bb25: {
        switchInt((*_25)[1 of 4]) -> [1: bb26, otherwise: bb28]; // scope 5 at ui/binding/match-byte-array-patterns.rs:25:5: 25:14
    }

    bb26: {
        switchInt((*_25)[2 of 4]) -> [0: bb27, otherwise: bb28]; // scope 5 at ui/binding/match-byte-array-patterns.rs:25:5: 25:14
    }

    bb27: {
        switchInt((*_25)[3 of 4]) -> [0: bb34, otherwise: bb28]; // scope 5 at ui/binding/match-byte-array-patterns.rs:25:5: 25:14
    }

    bb28: {
        _40 = Len((*_25));               // scope 5 at ui/binding/match-byte-array-patterns.rs:34:9: 34:16
        _41 = const 4_usize;             // scope 5 at ui/binding/match-byte-array-patterns.rs:34:9: 34:16
        _42 = Eq(move _40, move _41);    // scope 5 at ui/binding/match-byte-array-patterns.rs:34:9: 34:16
        switchInt(move _42) -> [0: bb42, otherwise: bb38]; // scope 5 at ui/binding/match-byte-array-patterns.rs:34:9: 34:16
    }

    bb29: {
        switchInt((*_25)[1 of 4]) -> [114: bb30, otherwise: bb28]; // scope 5 at ui/binding/match-byte-array-patterns.rs:25:5: 25:14
    }

    bb30: {
        switchInt((*_25)[2 of 4]) -> [117: bb31, otherwise: bb28]; // scope 5 at ui/binding/match-byte-array-patterns.rs:25:5: 25:14
    }

    bb31: {
        switchInt((*_25)[3 of 4]) -> [101: bb37, otherwise: bb28]; // scope 5 at ui/binding/match-byte-array-patterns.rs:25:5: 25:14
    }

    bb32: {
        _30 = Len((*_25));               // scope 5 at ui/binding/match-byte-array-patterns.rs:27:10: 27:13
        _31 = const 1_usize;             // scope 5 at ui/binding/match-byte-array-patterns.rs:27:10: 27:13
        _32 = Eq(move _30, move _31);    // scope 5 at ui/binding/match-byte-array-patterns.rs:27:10: 27:13
        switchInt(move _32) -> [0: bb33, otherwise: bb35]; // scope 5 at ui/binding/match-byte-array-patterns.rs:27:10: 27:13
    }

    bb33: {
        _27 = Len((*_25));               // scope 5 at ui/binding/match-byte-array-patterns.rs:28:10: 28:29
        _28 = const 5_usize;             // scope 5 at ui/binding/match-byte-array-patterns.rs:28:10: 28:29
        _29 = Ge(move _27, move _28);    // scope 5 at ui/binding/match-byte-array-patterns.rs:28:10: 28:29
        switchInt(move _29) -> [0: bb28, otherwise: bb36]; // scope 5 at ui/binding/match-byte-array-patterns.rs:28:10: 28:29
    }

    bb34: {
        _36 = core::panicking::panic(const "not implemented"); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb35: {
        _37 = core::panicking::panic(const "not implemented"); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb36: {
        _38 = core::panicking::panic(const "not implemented"); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb37: {
        _39 = core::panicking::panic(const "not implemented"); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb38: {
        switchInt((*_25)[0 of 4]) -> [116: bb39, 0: bb43, otherwise: bb42]; // scope 5 at ui/binding/match-byte-array-patterns.rs:33:5: 33:14
    }

    bb39: {
        switchInt((*_25)[1 of 4]) -> [114: bb40, otherwise: bb42]; // scope 5 at ui/binding/match-byte-array-patterns.rs:33:5: 33:14
    }

    bb40: {
        switchInt((*_25)[2 of 4]) -> [117: bb41, otherwise: bb42]; // scope 5 at ui/binding/match-byte-array-patterns.rs:33:5: 33:14
    }

    bb41: {
        switchInt((*_25)[3 of 4]) -> [101: bb46, otherwise: bb42]; // scope 5 at ui/binding/match-byte-array-patterns.rs:33:5: 33:14
    }

    bb42: {
        _45 = Len((*_25));               // scope 5 at ui/binding/match-byte-array-patterns.rs:40:9: 40:16
        _46 = const 4_usize;             // scope 5 at ui/binding/match-byte-array-patterns.rs:40:9: 40:16
        _47 = Eq(move _45, move _46);    // scope 5 at ui/binding/match-byte-array-patterns.rs:40:9: 40:16
        switchInt(move _47) -> [0: bb52, otherwise: bb48]; // scope 5 at ui/binding/match-byte-array-patterns.rs:40:9: 40:16
    }

    bb43: {
        switchInt((*_25)[1 of 4]) -> [1: bb44, otherwise: bb42]; // scope 5 at ui/binding/match-byte-array-patterns.rs:33:5: 33:14
    }

    bb44: {
        switchInt((*_25)[2 of 4]) -> [0: bb45, otherwise: bb42]; // scope 5 at ui/binding/match-byte-array-patterns.rs:33:5: 33:14
    }

    bb45: {
        switchInt((*_25)[3 of 4]) -> [0: bb47, otherwise: bb42]; // scope 5 at ui/binding/match-byte-array-patterns.rs:33:5: 33:14
    }

    bb46: {
        _43 = core::panicking::panic(const "not implemented"); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb47: {
        _44 = core::panicking::panic(const "not implemented"); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb48: {
        switchInt((*_25)[0 of 4]) -> [116: bb49, 0: bb53, otherwise: bb52]; // scope 5 at ui/binding/match-byte-array-patterns.rs:39:5: 39:14
    }

    bb49: {
        switchInt((*_25)[1 of 4]) -> [114: bb50, otherwise: bb52]; // scope 5 at ui/binding/match-byte-array-patterns.rs:39:5: 39:14
    }

    bb50: {
        switchInt((*_25)[2 of 4]) -> [117: bb51, otherwise: bb52]; // scope 5 at ui/binding/match-byte-array-patterns.rs:39:5: 39:14
    }

    bb51: {
        switchInt((*_25)[3 of 4]) -> [101: bb55, otherwise: bb52]; // scope 5 at ui/binding/match-byte-array-patterns.rs:39:5: 39:14
    }

    bb52: {
        _67 = core::panicking::panic(const "not implemented"); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb53: {
        switchInt((*_25)[2 of 4]) -> [0: bb54, otherwise: bb52]; // scope 5 at ui/binding/match-byte-array-patterns.rs:39:5: 39:14
    }

    bb54: {
        switchInt((*_25)[3 of 4]) -> [0: bb56, otherwise: bb52]; // scope 5 at ui/binding/match-byte-array-patterns.rs:39:5: 39:14
    }

    bb55: {
        _48 = core::panicking::panic(const "not implemented"); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:52
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:9: 706:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:706:34: 706:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb56: {
        _49 = (*_25)[1 of 4];            // scope 5 at ui/binding/match-byte-array-patterns.rs:41:14: 41:15
        _51 = &_49;                      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _68 = const _;                   // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u8, val: Unevaluated(main, [], Some(promoted[0])) }
        _52 = _68;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _50 = (move _51, move _52);      // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _53 = (_50.0: &u8);              // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _54 = (_50.1: &u8);              // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _57 = (*_53);                    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _58 = const 0_u8;                // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _56 = Eq(move _57, move _58);    // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _55 = Not(move _56);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _55) -> [0: bb58, otherwise: bb57]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb57: {
        _59 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _61 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _63 = _53;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _62 = _63;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _65 = _54;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _64 = _65;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _66 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _60 = core::panicking::assert_failed::<u8, u8>(move _61, move _62, move _64, move _66); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u8, &'b u8, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u8, u8>}, val: Value(<ZST>) }
    }

    bb58: {
        return;                          // scope 0 at ui/binding/match-byte-array-patterns.rs:44:2: 44:2
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/binding/match-byte-array-patterns.rs:41:40: 41:41

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/binding/match-byte-array-patterns.rs:41:40: 41:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;                     // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u8;                      // in scope 0 at ui/binding/match-byte-array-patterns.rs:19:40: 19:41

    bb0: {
        _1 = const 0_u8;                 // scope 0 at ui/binding/match-byte-array-patterns.rs:19:40: 19:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[2] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];                // return place in scope 0 at ui/binding/match-byte-array-patterns.rs:4:15: 4:24
    let mut _1: [u8; 4];                 // in scope 0 at ui/binding/match-byte-array-patterns.rs:4:16: 4:24

    bb0: {
        _1 = [const 0_u8; 4];            // scope 0 at ui/binding/match-byte-array-patterns.rs:4:16: 4:24
        _0 = &_1;                        // scope 0 at ui/binding/match-byte-array-patterns.rs:4:15: 4:24
        return;                          // scope 0 at ui/binding/match-byte-array-patterns.rs:4:15: 4:24
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/binding/match-byte-array-patterns.rs:4:22: 4:23

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/binding/match-byte-array-patterns.rs:4:22: 4:23
        return;                          // scope 0 at ui/binding/match-byte-array-patterns.rs:4:22: 4:23
    }
}
