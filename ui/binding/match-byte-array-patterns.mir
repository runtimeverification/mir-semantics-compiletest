// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: !;
    let mut _2: !;
    let mut _3: !;
    let mut _4: !;
    let mut _5: !;
    let mut _7: (&u8, &u8);
    let mut _8: &u8;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: u8;
    let mut _14: u8;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _18: !;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _26: usize;
    let mut _27: usize;
    let mut _28: bool;
    let mut _29: !;
    let mut _30: !;
    let mut _31: !;
    let mut _32: !;
    let mut _33: usize;
    let mut _34: usize;
    let mut _35: bool;
    let mut _36: !;
    let mut _37: !;
    let mut _38: usize;
    let mut _39: usize;
    let mut _40: bool;
    let mut _41: !;
    let mut _43: (&u8, &u8);
    let mut _44: &u8;
    let mut _47: bool;
    let mut _48: bool;
    let mut _49: u8;
    let mut _50: u8;
    let _52: !;
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _54: !;
    let mut _57: &[u8; 4];
    scope 1 {
        debug buf => const _;
        let _6: u8;
        let _19: &[u8];
        scope 2 {
            debug x => _6;
            let _9: &u8;
            let _10: &u8;
            let mut _56: &u8;
            scope 3 {
                debug left_val => _9;
                debug right_val => _10;
                let _15: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _15;
                }
            }
        }
        scope 5 {
            debug buf => _19;
            let _42: u8;
            scope 6 {
                debug x => _42;
                let _45: &u8;
                let _46: &u8;
                let mut _55: &u8;
                scope 7 {
                    debug left_val => _45;
                    debug right_val => _46;
                    let _51: core::panicking::AssertKind;
                    scope 8 {
                        debug kind => _51;
                    }
                }
            }
        }
    }

    bb0: {
        _57 = const _;
        switchInt((*_57)[0 of 4]) -> [0: bb1, 116: bb5, otherwise: bb4];
    }

    bb1: {
        switchInt((*_57)[1 of 4]) -> [1: bb2, otherwise: bb4];
    }

    bb2: {
        switchInt((*_57)[2 of 4]) -> [0: bb3, otherwise: bb4];
    }

    bb3: {
        switchInt((*_57)[3 of 4]) -> [0: bb8, otherwise: bb4];
    }

    bb4: {
        switchInt((*_57)[0 of 4]) -> [116: bb10, 0: bb14, otherwise: bb13];
    }

    bb5: {
        switchInt((*_57)[1 of 4]) -> [114: bb6, otherwise: bb4];
    }

    bb6: {
        switchInt((*_57)[2 of 4]) -> [117: bb7, otherwise: bb4];
    }

    bb7: {
        switchInt((*_57)[3 of 4]) -> [101: bb9, otherwise: bb4];
    }

    bb8: {
        _1 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb9: {
        _2 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb10: {
        switchInt((*_57)[1 of 4]) -> [114: bb11, otherwise: bb13];
    }

    bb11: {
        switchInt((*_57)[2 of 4]) -> [117: bb12, otherwise: bb13];
    }

    bb12: {
        switchInt((*_57)[3 of 4]) -> [101: bb17, otherwise: bb13];
    }

    bb13: {
        switchInt((*_57)[0 of 4]) -> [116: bb19, 0: bb23, otherwise: bb22];
    }

    bb14: {
        switchInt((*_57)[1 of 4]) -> [1: bb15, otherwise: bb13];
    }

    bb15: {
        switchInt((*_57)[2 of 4]) -> [0: bb16, otherwise: bb13];
    }

    bb16: {
        switchInt((*_57)[3 of 4]) -> [0: bb18, otherwise: bb13];
    }

    bb17: {
        _3 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb18: {
        _4 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb19: {
        switchInt((*_57)[1 of 4]) -> [114: bb20, otherwise: bb22];
    }

    bb20: {
        switchInt((*_57)[2 of 4]) -> [117: bb21, otherwise: bb22];
    }

    bb21: {
        switchInt((*_57)[3 of 4]) -> [101: bb25, otherwise: bb22];
    }

    bb22: {
        _18 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb23: {
        switchInt((*_57)[2 of 4]) -> [0: bb24, otherwise: bb22];
    }

    bb24: {
        switchInt((*_57)[3 of 4]) -> [0: bb26, otherwise: bb22];
    }

    bb25: {
        _5 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb26: {
        _6 = (*_57)[1 of 4];
        _8 = &_6;
        _56 = const _;
        _7 = (move _8, _56);
        _9 = (_7.0: &u8);
        _10 = (_7.1: &u8);
        _13 = (*_9);
        _14 = (*_10);
        _12 = Eq(move _13, move _14);
        _11 = Not(move _12);
        switchInt(move _11) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<u8, u8>(move _15, _9, _10, move _17) -> unwind continue;
    }

    bb28: {
        _19 = _57 as &[u8] (Pointer(Unsize));
        _26 = Len((*_19));
        _27 = const 4_usize;
        _28 = Eq(move _26, move _27);
        switchInt(move _28) -> [0: bb37, otherwise: bb29];
    }

    bb29: {
        switchInt((*_19)[0 of 4]) -> [0: bb30, 116: bb34, otherwise: bb33];
    }

    bb30: {
        switchInt((*_19)[1 of 4]) -> [1: bb31, otherwise: bb33];
    }

    bb31: {
        switchInt((*_19)[2 of 4]) -> [0: bb32, otherwise: bb33];
    }

    bb32: {
        switchInt((*_19)[3 of 4]) -> [0: bb39, otherwise: bb33];
    }

    bb33: {
        _33 = Len((*_19));
        _34 = const 4_usize;
        _35 = Eq(move _33, move _34);
        switchInt(move _35) -> [0: bb47, otherwise: bb43];
    }

    bb34: {
        switchInt((*_19)[1 of 4]) -> [114: bb35, otherwise: bb33];
    }

    bb35: {
        switchInt((*_19)[2 of 4]) -> [117: bb36, otherwise: bb33];
    }

    bb36: {
        switchInt((*_19)[3 of 4]) -> [101: bb42, otherwise: bb33];
    }

    bb37: {
        _23 = Len((*_19));
        _24 = const 1_usize;
        _25 = Eq(move _23, move _24);
        switchInt(move _25) -> [0: bb38, otherwise: bb40];
    }

    bb38: {
        _20 = Len((*_19));
        _21 = const 5_usize;
        _22 = Ge(move _20, move _21);
        switchInt(move _22) -> [0: bb33, otherwise: bb41];
    }

    bb39: {
        _29 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb40: {
        _30 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb41: {
        _31 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb42: {
        _32 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb43: {
        switchInt((*_19)[0 of 4]) -> [116: bb44, 0: bb48, otherwise: bb47];
    }

    bb44: {
        switchInt((*_19)[1 of 4]) -> [114: bb45, otherwise: bb47];
    }

    bb45: {
        switchInt((*_19)[2 of 4]) -> [117: bb46, otherwise: bb47];
    }

    bb46: {
        switchInt((*_19)[3 of 4]) -> [101: bb51, otherwise: bb47];
    }

    bb47: {
        _38 = Len((*_19));
        _39 = const 4_usize;
        _40 = Eq(move _38, move _39);
        switchInt(move _40) -> [0: bb57, otherwise: bb53];
    }

    bb48: {
        switchInt((*_19)[1 of 4]) -> [1: bb49, otherwise: bb47];
    }

    bb49: {
        switchInt((*_19)[2 of 4]) -> [0: bb50, otherwise: bb47];
    }

    bb50: {
        switchInt((*_19)[3 of 4]) -> [0: bb52, otherwise: bb47];
    }

    bb51: {
        _36 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb52: {
        _37 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb53: {
        switchInt((*_19)[0 of 4]) -> [116: bb54, 0: bb58, otherwise: bb57];
    }

    bb54: {
        switchInt((*_19)[1 of 4]) -> [114: bb55, otherwise: bb57];
    }

    bb55: {
        switchInt((*_19)[2 of 4]) -> [117: bb56, otherwise: bb57];
    }

    bb56: {
        switchInt((*_19)[3 of 4]) -> [101: bb60, otherwise: bb57];
    }

    bb57: {
        _54 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb58: {
        switchInt((*_19)[2 of 4]) -> [0: bb59, otherwise: bb57];
    }

    bb59: {
        switchInt((*_19)[3 of 4]) -> [0: bb61, otherwise: bb57];
    }

    bb60: {
        _41 = core::panicking::panic(const "not implemented") -> unwind continue;
    }

    bb61: {
        _42 = (*_19)[1 of 4];
        _44 = &_42;
        _55 = const _;
        _43 = (move _44, _55);
        _45 = (_43.0: &u8);
        _46 = (_43.1: &u8);
        _49 = (*_45);
        _50 = (*_46);
        _48 = Eq(move _49, move _50);
        _47 = Not(move _48);
        switchInt(move _47) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _51 = core::panicking::AssertKind::Eq;
        _53 = Option::<Arguments<'_>>::None;
        _52 = core::panicking::assert_failed::<u8, u8>(move _51, _45, _46, move _53) -> unwind continue;
    }

    bb63: {
        return;
    }
}

promoted[0] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 0_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[u8; 4] = {
    let mut _0: &[u8; 4];
    let mut _1: [u8; 4];

    bb0: {
        _1 = [const 0_u8; 4];
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 4_usize;
        return;
    }
}
