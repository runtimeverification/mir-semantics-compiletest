// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: [closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37];
    let _2: ();
    let mut _3: &[closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37];
    let mut _4: ((isize, isize),);
    let mut _5: (isize, isize);
    scope 1 {
        debug f => const ZeroSized: [closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37];
    }

    bb0: {
        _3 = &_1;
        _5 = (const 1_isize, const 2_isize);
        _4 = (move _5,);
        _2 = <[closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37] as Fn<((isize, isize),)>>::call(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main::{closure#0}(_1: &[closure@ui/binding/fn-pattern-expected-type.rs:4:13: 4:37], _2: (isize, isize)) -> () {
    let mut _0: ();
    let _3: isize;
    let _4: isize;
    let mut _5: (&isize, &isize);
    let mut _6: &isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let mut _20: bool;
    let mut _21: bool;
    let mut _22: isize;
    let mut _23: isize;
    let _25: !;
    let mut _26: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _3;
        debug y => _4;
        let _7: &isize;
        let _8: &isize;
        let _18: &isize;
        let _19: &isize;
        let mut _27: &isize;
        let mut _28: &isize;
        scope 2 {
            debug left_val => _7;
            debug right_val => _8;
            let _13: core::panicking::AssertKind;
            scope 3 {
                debug kind => _13;
            }
        }
        scope 4 {
            debug left_val => _18;
            debug right_val => _19;
            let _24: core::panicking::AssertKind;
            scope 5 {
                debug kind => _24;
            }
        }
    }

    bb0: {
        _3 = (_2.0: isize);
        _4 = (_2.1: isize);
        _6 = &_3;
        _28 = const _;
        _5 = (move _6, _28);
        _7 = (_5.0: &isize);
        _8 = (_5.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb2: {
        _17 = &_4;
        _27 = const _;
        _16 = (move _17, _27);
        _18 = (_16.0: &isize);
        _19 = (_16.1: &isize);
        _22 = (*_18);
        _23 = (*_19);
        _21 = Eq(move _22, move _23);
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _24 = core::panicking::AssertKind::Eq;
        _26 = Option::<Arguments<'_>>::None;
        _25 = core::panicking::assert_failed::<isize, isize>(move _24, _18, _19, move _26) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main::{closure#0}: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}
