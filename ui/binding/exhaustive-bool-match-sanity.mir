// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: bool, _2: bool) -> u32 {
    debug x => _1;
    debug y => _2;
    let mut _0: u32;
    let mut _3: (bool, bool);

    bb0: {
        _3 = (_1, _2);
        switchInt((_3.0: bool)) -> [0: bb5, otherwise: bb1];
    }

    bb1: {
        switchInt((_3.1: bool)) -> [0: bb6, otherwise: bb2];
    }

    bb2: {
        switchInt((_3.0: bool)) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _0 = const 2_u32;
        goto -> bb7;
    }

    bb4: {
        unreachable;
    }

    bb5: {
        _0 = const 0_u32;
        goto -> bb7;
    }

    bb6: {
        _0 = const 1_u32;
        goto -> bb7;
    }

    bb7: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&u32, &u32);
    let mut _2: &u32;
    let _3: u32;
    let _4: &u32;
    let _5: &u32;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: u32;
    let mut _9: u32;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&u32, &u32);
    let mut _14: &u32;
    let _15: u32;
    let _16: &u32;
    let _17: &u32;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: u32;
    let mut _21: u32;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&u32, &u32);
    let mut _26: &u32;
    let _27: u32;
    let _28: &u32;
    let _29: &u32;
    let mut _30: bool;
    let mut _31: bool;
    let mut _32: u32;
    let mut _33: u32;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&u32, &u32);
    let mut _38: &u32;
    let _39: u32;
    let _40: &u32;
    let _41: &u32;
    let mut _42: bool;
    let mut _43: bool;
    let mut _44: u32;
    let mut _45: u32;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: &u32;
    let mut _50: &u32;
    let mut _51: &u32;
    let mut _52: &u32;
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _28;
        debug right_val => _29;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _40;
        debug right_val => _41;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }

    bb0: {
        _3 = foo(const false, const true) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _52 = const _;
        _1 = (move _2, _52);
        _4 = (_1.0: &u32);
        _5 = (_1.1: &u32);
        _8 = (*_4);
        _9 = (*_5);
        _7 = Eq(move _8, move _9);
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<u32, u32>(move _10, _4, _5, move _12) -> unwind continue;
    }

    bb3: {
        _15 = foo(const false, const false) -> [return: bb4, unwind continue];
    }

    bb4: {
        _14 = &_15;
        _51 = const _;
        _13 = (move _14, _51);
        _16 = (_13.0: &u32);
        _17 = (_13.1: &u32);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<u32, u32>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb6: {
        _27 = foo(const true, const false) -> [return: bb7, unwind continue];
    }

    bb7: {
        _26 = &_27;
        _50 = const _;
        _25 = (move _26, _50);
        _28 = (_25.0: &u32);
        _29 = (_25.1: &u32);
        _32 = (*_28);
        _33 = (*_29);
        _31 = Eq(move _32, move _33);
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<u32, u32>(move _34, _28, _29, move _36) -> unwind continue;
    }

    bb9: {
        _39 = foo(const true, const true) -> [return: bb10, unwind continue];
    }

    bb10: {
        _38 = &_39;
        _49 = const _;
        _37 = (move _38, _49);
        _40 = (_37.0: &u32);
        _41 = (_37.1: &u32);
        _44 = (*_40);
        _45 = (*_41);
        _43 = Eq(move _44, move _45);
        _42 = Not(move _43);
        switchInt(move _42) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<u32, u32>(move _46, _40, _41, move _48) -> unwind continue;
    }

    bb12: {
        return;
    }
}

promoted[0] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 2_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 1_u32;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}
