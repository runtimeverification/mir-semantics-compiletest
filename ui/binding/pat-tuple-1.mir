// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn tuple() -> () {
    let mut _0: ();
    let _1: (i32, i32, i32);
    let mut _4: (&i32, &i32);
    let mut _5: &i32;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: i32;
    let mut _11: i32;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&i32, &i32);
    let mut _16: &i32;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: i32;
    let mut _22: i32;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&i32, &i32);
    let mut _29: &i32;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: i32;
    let mut _35: i32;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&i32, &i32);
    let mut _40: &i32;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: i32;
    let mut _46: i32;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&i32, &i32);
    let mut _53: &i32;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: i32;
    let mut _59: i32;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&i32, &i32);
    let mut _64: &i32;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: i32;
    let mut _70: i32;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&i32, &i32);
    let mut _78: &i32;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: i32;
    let mut _84: i32;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _88: (&i32, &i32);
    let mut _89: &i32;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: i32;
    let mut _95: i32;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&i32, &i32);
    let mut _100: &i32;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: i32;
    let mut _106: i32;
    let _108: !;
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&i32, &i32);
    let mut _114: &i32;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: i32;
    let mut _120: i32;
    let _122: !;
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: (&i32, &i32);
    let mut _125: &i32;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: i32;
    let mut _131: i32;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: (&i32, &i32);
    let mut _136: &i32;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: i32;
    let mut _142: i32;
    let _144: !;
    let mut _145: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _149: (&i32, &i32);
    let mut _150: &i32;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: i32;
    let mut _156: i32;
    let _158: !;
    let mut _159: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _160: (&i32, &i32);
    let mut _161: &i32;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: i32;
    let mut _167: i32;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _171: (&i32, &i32);
    let mut _172: &i32;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: i32;
    let mut _178: i32;
    let _180: !;
    let mut _181: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: i32;
        let _3: i32;
        let _26: i32;
        let _27: i32;
        let _50: i32;
        let _51: i32;
        let _74: i32;
        let _75: i32;
        let _76: i32;
        let _110: i32;
        let _111: i32;
        let _112: i32;
        let _146: i32;
        let _147: i32;
        let _148: i32;
        scope 2 {
            debug a => _2;
            debug b => _3;
            let _6: &i32;
            let _7: &i32;
            let _17: &i32;
            let _18: &i32;
            let mut _195: &i32;
            let mut _196: &i32;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
        }
        scope 7 {
            debug b => _26;
            debug c => _27;
            let _30: &i32;
            let _31: &i32;
            let _41: &i32;
            let _42: &i32;
            let mut _193: &i32;
            let mut _194: &i32;
            scope 8 {
                debug left_val => _30;
                debug right_val => _31;
                let _36: core::panicking::AssertKind;
                scope 9 {
                    debug kind => _36;
                }
            }
            scope 10 {
                debug left_val => _41;
                debug right_val => _42;
                let _47: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _47;
                }
            }
        }
        scope 12 {
            debug a => _50;
            debug c => _51;
            let _54: &i32;
            let _55: &i32;
            let _65: &i32;
            let _66: &i32;
            let mut _191: &i32;
            let mut _192: &i32;
            scope 13 {
                debug left_val => _54;
                debug right_val => _55;
                let _60: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _60;
                }
            }
            scope 15 {
                debug left_val => _65;
                debug right_val => _66;
                let _71: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _71;
                }
            }
        }
        scope 17 {
            debug a => _74;
            debug b => _75;
            debug c => _76;
            let _79: &i32;
            let _80: &i32;
            let _90: &i32;
            let _91: &i32;
            let _101: &i32;
            let _102: &i32;
            let mut _188: &i32;
            let mut _189: &i32;
            let mut _190: &i32;
            scope 18 {
                debug left_val => _79;
                debug right_val => _80;
                let _85: core::panicking::AssertKind;
                scope 19 {
                    debug kind => _85;
                }
            }
            scope 20 {
                debug left_val => _90;
                debug right_val => _91;
                let _96: core::panicking::AssertKind;
                scope 21 {
                    debug kind => _96;
                }
            }
            scope 22 {
                debug left_val => _101;
                debug right_val => _102;
                let _107: core::panicking::AssertKind;
                scope 23 {
                    debug kind => _107;
                }
            }
        }
        scope 24 {
            debug a => _110;
            debug b => _111;
            debug c => _112;
            let _115: &i32;
            let _116: &i32;
            let _126: &i32;
            let _127: &i32;
            let _137: &i32;
            let _138: &i32;
            let mut _185: &i32;
            let mut _186: &i32;
            let mut _187: &i32;
            scope 25 {
                debug left_val => _115;
                debug right_val => _116;
                let _121: core::panicking::AssertKind;
                scope 26 {
                    debug kind => _121;
                }
            }
            scope 27 {
                debug left_val => _126;
                debug right_val => _127;
                let _132: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _132;
                }
            }
            scope 29 {
                debug left_val => _137;
                debug right_val => _138;
                let _143: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _143;
                }
            }
        }
        scope 31 {
            debug a => _146;
            debug b => _147;
            debug c => _148;
            let _151: &i32;
            let _152: &i32;
            let _162: &i32;
            let _163: &i32;
            let _173: &i32;
            let _174: &i32;
            let mut _182: &i32;
            let mut _183: &i32;
            let mut _184: &i32;
            scope 32 {
                debug left_val => _151;
                debug right_val => _152;
                let _157: core::panicking::AssertKind;
                scope 33 {
                    debug kind => _157;
                }
            }
            scope 34 {
                debug left_val => _162;
                debug right_val => _163;
                let _168: core::panicking::AssertKind;
                scope 35 {
                    debug kind => _168;
                }
            }
            scope 36 {
                debug left_val => _173;
                debug right_val => _174;
                let _179: core::panicking::AssertKind;
                scope 37 {
                    debug kind => _179;
                }
            }
        }
    }

    bb0: {
        _1 = (const 1_i32, const 2_i32, const 3_i32);
        _2 = (_1.0: i32);
        _3 = (_1.1: i32);
        _5 = &_2;
        _196 = const _;
        _4 = (move _5, _196);
        _6 = (_4.0: &i32);
        _7 = (_4.1: &i32);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<i32, i32>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _16 = &_3;
        _195 = const _;
        _15 = (move _16, _195);
        _17 = (_15.0: &i32);
        _18 = (_15.1: &i32);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<i32, i32>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb4: {
        _26 = (_1.1: i32);
        _27 = (_1.2: i32);
        _29 = &_26;
        _194 = const _;
        _28 = (move _29, _194);
        _30 = (_28.0: &i32);
        _31 = (_28.1: &i32);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<i32, i32>(move _36, _30, _31, move _38) -> unwind continue;
    }

    bb6: {
        _40 = &_27;
        _193 = const _;
        _39 = (move _40, _193);
        _41 = (_39.0: &i32);
        _42 = (_39.1: &i32);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<i32, i32>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb8: {
        _50 = (_1.0: i32);
        _51 = (_1.2: i32);
        _53 = &_50;
        _192 = const _;
        _52 = (move _53, _192);
        _54 = (_52.0: &i32);
        _55 = (_52.1: &i32);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<i32, i32>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb10: {
        _64 = &_51;
        _191 = const _;
        _63 = (move _64, _191);
        _65 = (_63.0: &i32);
        _66 = (_63.1: &i32);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<i32, i32>(move _71, _65, _66, move _73) -> unwind continue;
    }

    bb12: {
        _74 = (_1.0: i32);
        _75 = (_1.1: i32);
        _76 = (_1.2: i32);
        _78 = &_74;
        _190 = const _;
        _77 = (move _78, _190);
        _79 = (_77.0: &i32);
        _80 = (_77.1: &i32);
        _83 = (*_79);
        _84 = (*_80);
        _82 = Eq(move _83, move _84);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<i32, i32>(move _85, _79, _80, move _87) -> unwind continue;
    }

    bb14: {
        _89 = &_75;
        _189 = const _;
        _88 = (move _89, _189);
        _90 = (_88.0: &i32);
        _91 = (_88.1: &i32);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<i32, i32>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb16: {
        _100 = &_76;
        _188 = const _;
        _99 = (move _100, _188);
        _101 = (_99.0: &i32);
        _102 = (_99.1: &i32);
        _105 = (*_101);
        _106 = (*_102);
        _104 = Eq(move _105, move _106);
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _107 = core::panicking::AssertKind::Eq;
        _109 = Option::<Arguments<'_>>::None;
        _108 = core::panicking::assert_failed::<i32, i32>(move _107, _101, _102, move _109) -> unwind continue;
    }

    bb18: {
        _110 = (_1.0: i32);
        _111 = (_1.1: i32);
        _112 = (_1.2: i32);
        _114 = &_110;
        _187 = const _;
        _113 = (move _114, _187);
        _115 = (_113.0: &i32);
        _116 = (_113.1: &i32);
        _119 = (*_115);
        _120 = (*_116);
        _118 = Eq(move _119, move _120);
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _121 = core::panicking::AssertKind::Eq;
        _123 = Option::<Arguments<'_>>::None;
        _122 = core::panicking::assert_failed::<i32, i32>(move _121, _115, _116, move _123) -> unwind continue;
    }

    bb20: {
        _125 = &_111;
        _186 = const _;
        _124 = (move _125, _186);
        _126 = (_124.0: &i32);
        _127 = (_124.1: &i32);
        _130 = (*_126);
        _131 = (*_127);
        _129 = Eq(move _130, move _131);
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<i32, i32>(move _132, _126, _127, move _134) -> unwind continue;
    }

    bb22: {
        _136 = &_112;
        _185 = const _;
        _135 = (move _136, _185);
        _137 = (_135.0: &i32);
        _138 = (_135.1: &i32);
        _141 = (*_137);
        _142 = (*_138);
        _140 = Eq(move _141, move _142);
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _143 = core::panicking::AssertKind::Eq;
        _145 = Option::<Arguments<'_>>::None;
        _144 = core::panicking::assert_failed::<i32, i32>(move _143, _137, _138, move _145) -> unwind continue;
    }

    bb24: {
        _146 = (_1.0: i32);
        _147 = (_1.1: i32);
        _148 = (_1.2: i32);
        _150 = &_146;
        _184 = const _;
        _149 = (move _150, _184);
        _151 = (_149.0: &i32);
        _152 = (_149.1: &i32);
        _155 = (*_151);
        _156 = (*_152);
        _154 = Eq(move _155, move _156);
        _153 = Not(move _154);
        switchInt(move _153) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _157 = core::panicking::AssertKind::Eq;
        _159 = Option::<Arguments<'_>>::None;
        _158 = core::panicking::assert_failed::<i32, i32>(move _157, _151, _152, move _159) -> unwind continue;
    }

    bb26: {
        _161 = &_147;
        _183 = const _;
        _160 = (move _161, _183);
        _162 = (_160.0: &i32);
        _163 = (_160.1: &i32);
        _166 = (*_162);
        _167 = (*_163);
        _165 = Eq(move _166, move _167);
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<i32, i32>(move _168, _162, _163, move _170) -> unwind continue;
    }

    bb28: {
        _172 = &_148;
        _182 = const _;
        _171 = (move _172, _182);
        _173 = (_171.0: &i32);
        _174 = (_171.1: &i32);
        _177 = (*_173);
        _178 = (*_174);
        _176 = Eq(move _177, move _178);
        _175 = Not(move _176);
        switchInt(move _175) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _179 = core::panicking::AssertKind::Eq;
        _181 = Option::<Arguments<'_>>::None;
        _180 = core::panicking::assert_failed::<i32, i32>(move _179, _173, _174, move _181) -> unwind continue;
    }

    bb30: {
        return;
    }
}

promoted[0] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[2] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[4] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[5] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[6] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[7] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[8] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[9] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[10] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

promoted[11] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[12] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[13] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 2_i32;
        _0 = &_1;
        return;
    }
}

promoted[14] in tuple: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 1_i32;
        _0 = &_1;
        return;
    }
}

fn tuple_struct() -> () {
    let mut _0: ();
    let _1: tuple_struct::S;
    let mut _4: (&u8, &u8);
    let mut _5: &u8;
    let mut _8: bool;
    let mut _9: bool;
    let mut _10: u8;
    let mut _11: u8;
    let _13: !;
    let mut _14: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _15: (&u8, &u8);
    let mut _16: &u8;
    let mut _19: bool;
    let mut _20: bool;
    let mut _21: u8;
    let mut _22: u8;
    let _24: !;
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&u8, &u8);
    let mut _29: &u8;
    let mut _32: bool;
    let mut _33: bool;
    let mut _34: u8;
    let mut _35: u8;
    let _37: !;
    let mut _38: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _39: (&u8, &u8);
    let mut _40: &u8;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: u8;
    let mut _46: u8;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _52: (&u8, &u8);
    let mut _53: &u8;
    let mut _56: bool;
    let mut _57: bool;
    let mut _58: u8;
    let mut _59: u8;
    let _61: !;
    let mut _62: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: (&u8, &u8);
    let mut _64: &u8;
    let mut _67: bool;
    let mut _68: bool;
    let mut _69: u8;
    let mut _70: u8;
    let _72: !;
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _77: (&u8, &u8);
    let mut _78: &u8;
    let mut _81: bool;
    let mut _82: bool;
    let mut _83: u8;
    let mut _84: u8;
    let _86: !;
    let mut _87: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _88: (&u8, &u8);
    let mut _89: &u8;
    let mut _92: bool;
    let mut _93: bool;
    let mut _94: u8;
    let mut _95: u8;
    let _97: !;
    let mut _98: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _99: (&u8, &u8);
    let mut _100: &u8;
    let mut _103: bool;
    let mut _104: bool;
    let mut _105: u8;
    let mut _106: u8;
    let _108: !;
    let mut _109: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _113: (&u8, &u8);
    let mut _114: &u8;
    let mut _117: bool;
    let mut _118: bool;
    let mut _119: u8;
    let mut _120: u8;
    let _122: !;
    let mut _123: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _124: (&u8, &u8);
    let mut _125: &u8;
    let mut _128: bool;
    let mut _129: bool;
    let mut _130: u8;
    let mut _131: u8;
    let _133: !;
    let mut _134: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _135: (&u8, &u8);
    let mut _136: &u8;
    let mut _139: bool;
    let mut _140: bool;
    let mut _141: u8;
    let mut _142: u8;
    let _144: !;
    let mut _145: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _149: (&u8, &u8);
    let mut _150: &u8;
    let mut _153: bool;
    let mut _154: bool;
    let mut _155: u8;
    let mut _156: u8;
    let _158: !;
    let mut _159: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _160: (&u8, &u8);
    let mut _161: &u8;
    let mut _164: bool;
    let mut _165: bool;
    let mut _166: u8;
    let mut _167: u8;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _171: (&u8, &u8);
    let mut _172: &u8;
    let mut _175: bool;
    let mut _176: bool;
    let mut _177: u8;
    let mut _178: u8;
    let _180: !;
    let mut _181: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _2: u8;
        let _3: u8;
        let _26: u8;
        let _27: u8;
        let _50: u8;
        let _51: u8;
        let _74: u8;
        let _75: u8;
        let _76: u8;
        let _110: u8;
        let _111: u8;
        let _112: u8;
        let _146: u8;
        let _147: u8;
        let _148: u8;
        scope 2 {
            debug a => _2;
            debug b => _3;
            let _6: &u8;
            let _7: &u8;
            let _17: &u8;
            let _18: &u8;
            let mut _195: &u8;
            let mut _196: &u8;
            scope 3 {
                debug left_val => _6;
                debug right_val => _7;
                let _12: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _12;
                }
            }
            scope 5 {
                debug left_val => _17;
                debug right_val => _18;
                let _23: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _23;
                }
            }
        }
        scope 7 {
            debug b => _26;
            debug c => _27;
            let _30: &u8;
            let _31: &u8;
            let _41: &u8;
            let _42: &u8;
            let mut _193: &u8;
            let mut _194: &u8;
            scope 8 {
                debug left_val => _30;
                debug right_val => _31;
                let _36: core::panicking::AssertKind;
                scope 9 {
                    debug kind => _36;
                }
            }
            scope 10 {
                debug left_val => _41;
                debug right_val => _42;
                let _47: core::panicking::AssertKind;
                scope 11 {
                    debug kind => _47;
                }
            }
        }
        scope 12 {
            debug a => _50;
            debug c => _51;
            let _54: &u8;
            let _55: &u8;
            let _65: &u8;
            let _66: &u8;
            let mut _191: &u8;
            let mut _192: &u8;
            scope 13 {
                debug left_val => _54;
                debug right_val => _55;
                let _60: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _60;
                }
            }
            scope 15 {
                debug left_val => _65;
                debug right_val => _66;
                let _71: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _71;
                }
            }
        }
        scope 17 {
            debug a => _74;
            debug b => _75;
            debug c => _76;
            let _79: &u8;
            let _80: &u8;
            let _90: &u8;
            let _91: &u8;
            let _101: &u8;
            let _102: &u8;
            let mut _188: &u8;
            let mut _189: &u8;
            let mut _190: &u8;
            scope 18 {
                debug left_val => _79;
                debug right_val => _80;
                let _85: core::panicking::AssertKind;
                scope 19 {
                    debug kind => _85;
                }
            }
            scope 20 {
                debug left_val => _90;
                debug right_val => _91;
                let _96: core::panicking::AssertKind;
                scope 21 {
                    debug kind => _96;
                }
            }
            scope 22 {
                debug left_val => _101;
                debug right_val => _102;
                let _107: core::panicking::AssertKind;
                scope 23 {
                    debug kind => _107;
                }
            }
        }
        scope 24 {
            debug a => _110;
            debug b => _111;
            debug c => _112;
            let _115: &u8;
            let _116: &u8;
            let _126: &u8;
            let _127: &u8;
            let _137: &u8;
            let _138: &u8;
            let mut _185: &u8;
            let mut _186: &u8;
            let mut _187: &u8;
            scope 25 {
                debug left_val => _115;
                debug right_val => _116;
                let _121: core::panicking::AssertKind;
                scope 26 {
                    debug kind => _121;
                }
            }
            scope 27 {
                debug left_val => _126;
                debug right_val => _127;
                let _132: core::panicking::AssertKind;
                scope 28 {
                    debug kind => _132;
                }
            }
            scope 29 {
                debug left_val => _137;
                debug right_val => _138;
                let _143: core::panicking::AssertKind;
                scope 30 {
                    debug kind => _143;
                }
            }
        }
        scope 31 {
            debug a => _146;
            debug b => _147;
            debug c => _148;
            let _151: &u8;
            let _152: &u8;
            let _162: &u8;
            let _163: &u8;
            let _173: &u8;
            let _174: &u8;
            let mut _182: &u8;
            let mut _183: &u8;
            let mut _184: &u8;
            scope 32 {
                debug left_val => _151;
                debug right_val => _152;
                let _157: core::panicking::AssertKind;
                scope 33 {
                    debug kind => _157;
                }
            }
            scope 34 {
                debug left_val => _162;
                debug right_val => _163;
                let _168: core::panicking::AssertKind;
                scope 35 {
                    debug kind => _168;
                }
            }
            scope 36 {
                debug left_val => _173;
                debug right_val => _174;
                let _179: core::panicking::AssertKind;
                scope 37 {
                    debug kind => _179;
                }
            }
        }
    }

    bb0: {
        _1 = S(const 1_u8, const 2_u8, const 3_u8);
        _2 = (_1.0: u8);
        _3 = (_1.1: u8);
        _5 = &_2;
        _196 = const _;
        _4 = (move _5, _196);
        _6 = (_4.0: &u8);
        _7 = (_4.1: &u8);
        _10 = (*_6);
        _11 = (*_7);
        _9 = Eq(move _10, move _11);
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _12 = core::panicking::AssertKind::Eq;
        _14 = Option::<Arguments<'_>>::None;
        _13 = core::panicking::assert_failed::<u8, u8>(move _12, _6, _7, move _14) -> unwind continue;
    }

    bb2: {
        _16 = &_3;
        _195 = const _;
        _15 = (move _16, _195);
        _17 = (_15.0: &u8);
        _18 = (_15.1: &u8);
        _21 = (*_17);
        _22 = (*_18);
        _20 = Eq(move _21, move _22);
        _19 = Not(move _20);
        switchInt(move _19) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _23 = core::panicking::AssertKind::Eq;
        _25 = Option::<Arguments<'_>>::None;
        _24 = core::panicking::assert_failed::<u8, u8>(move _23, _17, _18, move _25) -> unwind continue;
    }

    bb4: {
        _26 = (_1.1: u8);
        _27 = (_1.2: u8);
        _29 = &_26;
        _194 = const _;
        _28 = (move _29, _194);
        _30 = (_28.0: &u8);
        _31 = (_28.1: &u8);
        _34 = (*_30);
        _35 = (*_31);
        _33 = Eq(move _34, move _35);
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _36 = core::panicking::AssertKind::Eq;
        _38 = Option::<Arguments<'_>>::None;
        _37 = core::panicking::assert_failed::<u8, u8>(move _36, _30, _31, move _38) -> unwind continue;
    }

    bb6: {
        _40 = &_27;
        _193 = const _;
        _39 = (move _40, _193);
        _41 = (_39.0: &u8);
        _42 = (_39.1: &u8);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<u8, u8>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb8: {
        _50 = (_1.0: u8);
        _51 = (_1.2: u8);
        _53 = &_50;
        _192 = const _;
        _52 = (move _53, _192);
        _54 = (_52.0: &u8);
        _55 = (_52.1: &u8);
        _58 = (*_54);
        _59 = (*_55);
        _57 = Eq(move _58, move _59);
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _60 = core::panicking::AssertKind::Eq;
        _62 = Option::<Arguments<'_>>::None;
        _61 = core::panicking::assert_failed::<u8, u8>(move _60, _54, _55, move _62) -> unwind continue;
    }

    bb10: {
        _64 = &_51;
        _191 = const _;
        _63 = (move _64, _191);
        _65 = (_63.0: &u8);
        _66 = (_63.1: &u8);
        _69 = (*_65);
        _70 = (*_66);
        _68 = Eq(move _69, move _70);
        _67 = Not(move _68);
        switchInt(move _67) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _71 = core::panicking::AssertKind::Eq;
        _73 = Option::<Arguments<'_>>::None;
        _72 = core::panicking::assert_failed::<u8, u8>(move _71, _65, _66, move _73) -> unwind continue;
    }

    bb12: {
        _74 = (_1.0: u8);
        _75 = (_1.1: u8);
        _76 = (_1.2: u8);
        _78 = &_74;
        _190 = const _;
        _77 = (move _78, _190);
        _79 = (_77.0: &u8);
        _80 = (_77.1: &u8);
        _83 = (*_79);
        _84 = (*_80);
        _82 = Eq(move _83, move _84);
        _81 = Not(move _82);
        switchInt(move _81) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _85 = core::panicking::AssertKind::Eq;
        _87 = Option::<Arguments<'_>>::None;
        _86 = core::panicking::assert_failed::<u8, u8>(move _85, _79, _80, move _87) -> unwind continue;
    }

    bb14: {
        _89 = &_75;
        _189 = const _;
        _88 = (move _89, _189);
        _90 = (_88.0: &u8);
        _91 = (_88.1: &u8);
        _94 = (*_90);
        _95 = (*_91);
        _93 = Eq(move _94, move _95);
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _96 = core::panicking::AssertKind::Eq;
        _98 = Option::<Arguments<'_>>::None;
        _97 = core::panicking::assert_failed::<u8, u8>(move _96, _90, _91, move _98) -> unwind continue;
    }

    bb16: {
        _100 = &_76;
        _188 = const _;
        _99 = (move _100, _188);
        _101 = (_99.0: &u8);
        _102 = (_99.1: &u8);
        _105 = (*_101);
        _106 = (*_102);
        _104 = Eq(move _105, move _106);
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _107 = core::panicking::AssertKind::Eq;
        _109 = Option::<Arguments<'_>>::None;
        _108 = core::panicking::assert_failed::<u8, u8>(move _107, _101, _102, move _109) -> unwind continue;
    }

    bb18: {
        _110 = (_1.0: u8);
        _111 = (_1.1: u8);
        _112 = (_1.2: u8);
        _114 = &_110;
        _187 = const _;
        _113 = (move _114, _187);
        _115 = (_113.0: &u8);
        _116 = (_113.1: &u8);
        _119 = (*_115);
        _120 = (*_116);
        _118 = Eq(move _119, move _120);
        _117 = Not(move _118);
        switchInt(move _117) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _121 = core::panicking::AssertKind::Eq;
        _123 = Option::<Arguments<'_>>::None;
        _122 = core::panicking::assert_failed::<u8, u8>(move _121, _115, _116, move _123) -> unwind continue;
    }

    bb20: {
        _125 = &_111;
        _186 = const _;
        _124 = (move _125, _186);
        _126 = (_124.0: &u8);
        _127 = (_124.1: &u8);
        _130 = (*_126);
        _131 = (*_127);
        _129 = Eq(move _130, move _131);
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _132 = core::panicking::AssertKind::Eq;
        _134 = Option::<Arguments<'_>>::None;
        _133 = core::panicking::assert_failed::<u8, u8>(move _132, _126, _127, move _134) -> unwind continue;
    }

    bb22: {
        _136 = &_112;
        _185 = const _;
        _135 = (move _136, _185);
        _137 = (_135.0: &u8);
        _138 = (_135.1: &u8);
        _141 = (*_137);
        _142 = (*_138);
        _140 = Eq(move _141, move _142);
        _139 = Not(move _140);
        switchInt(move _139) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _143 = core::panicking::AssertKind::Eq;
        _145 = Option::<Arguments<'_>>::None;
        _144 = core::panicking::assert_failed::<u8, u8>(move _143, _137, _138, move _145) -> unwind continue;
    }

    bb24: {
        _146 = (_1.0: u8);
        _147 = (_1.1: u8);
        _148 = (_1.2: u8);
        _150 = &_146;
        _184 = const _;
        _149 = (move _150, _184);
        _151 = (_149.0: &u8);
        _152 = (_149.1: &u8);
        _155 = (*_151);
        _156 = (*_152);
        _154 = Eq(move _155, move _156);
        _153 = Not(move _154);
        switchInt(move _153) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _157 = core::panicking::AssertKind::Eq;
        _159 = Option::<Arguments<'_>>::None;
        _158 = core::panicking::assert_failed::<u8, u8>(move _157, _151, _152, move _159) -> unwind continue;
    }

    bb26: {
        _161 = &_147;
        _183 = const _;
        _160 = (move _161, _183);
        _162 = (_160.0: &u8);
        _163 = (_160.1: &u8);
        _166 = (*_162);
        _167 = (*_163);
        _165 = Eq(move _166, move _167);
        _164 = Not(move _165);
        switchInt(move _164) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<u8, u8>(move _168, _162, _163, move _170) -> unwind continue;
    }

    bb28: {
        _172 = &_148;
        _182 = const _;
        _171 = (move _172, _182);
        _173 = (_171.0: &u8);
        _174 = (_171.1: &u8);
        _177 = (*_173);
        _178 = (*_174);
        _176 = Eq(move _177, move _178);
        _175 = Not(move _176);
        switchInt(move _175) -> [0: bb30, otherwise: bb29];
    }

    bb29: {
        _179 = core::panicking::AssertKind::Eq;
        _181 = Option::<Arguments<'_>>::None;
        _180 = core::panicking::assert_failed::<u8, u8>(move _179, _173, _174, move _181) -> unwind continue;
    }

    bb30: {
        return;
    }
}

promoted[0] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[1] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[2] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[3] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[4] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[5] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[6] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[7] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[8] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[9] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[10] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

promoted[11] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 3_u8;
        _0 = &_1;
        return;
    }
}

promoted[12] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[13] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 2_u8;
        _0 = &_1;
        return;
    }
}

promoted[14] in tuple_struct: &u8 = {
    let mut _0: &u8;
    let mut _1: u8;

    bb0: {
        _1 = const 1_u8;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = tuple() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = tuple_struct() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn S(_1: u8, _2: u8, _3: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn S(_1: u8, _2: u8, _3: u8) -> S {
    let mut _0: tuple_struct::S;

    bb0: {
        _0 = S(move _1, move _2, move _3);
        return;
    }
}
