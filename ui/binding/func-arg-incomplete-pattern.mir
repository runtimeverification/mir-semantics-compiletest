// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Foo) -> *const usize {
    let _2: std::boxed::Box<usize>;      // in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:11:13: 11:14
    let _3: &usize;                      // in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:12:30: 12:33
    let mut _4: *const usize;            // in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:11:13: 11:14
    scope 1 {
        debug x => _2;                   // in scope 1 at ui/binding/func-arg-incomplete-pattern.rs:11:13: 11:14
        let mut _0: *const usize;        // return place in scope 1 at ui/binding/func-arg-incomplete-pattern.rs:12:9: 12:13
        scope 2 {
            debug addr => _0;            // in scope 2 at ui/binding/func-arg-incomplete-pattern.rs:12:9: 12:13
        }
    }

    bb0: {
        _2 = move (_1.0: std::boxed::Box<usize>); // scope 0 at ui/binding/func-arg-incomplete-pattern.rs:11:13: 11:14
        _4 = (((_2.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at ui/binding/func-arg-incomplete-pattern.rs:12:30: 12:33
        _3 = &(*_4);                     // scope 1 at ui/binding/func-arg-incomplete-pattern.rs:12:30: 12:33
        _0 = &raw const (*_3);           // scope 1 at ui/binding/func-arg-incomplete-pattern.rs:12:30: 12:33
        drop(_2) -> [return: bb1, unwind: bb4]; // scope 0 at ui/binding/func-arg-incomplete-pattern.rs:14:1: 14:2
    }

    bb1: {
        drop((_1.1: std::boxed::Box<usize>)) -> bb3; // scope 0 at ui/binding/func-arg-incomplete-pattern.rs:14:1: 14:2
    }

    bb2 (cleanup): {
        resume;                          // scope 0 at ui/binding/func-arg-incomplete-pattern.rs:11:1: 14:2
    }

    bb3: {
        return;                          // scope 0 at ui/binding/func-arg-incomplete-pattern.rs:14:2: 14:2
    }

    bb4 (cleanup): {
        drop((_1.1: std::boxed::Box<usize>)) -> bb2; // scope 0 at ui/binding/func-arg-incomplete-pattern.rs:14:1: 14:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:16:15: 16:15
    let _1: std::boxed::Box<usize>;      // in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:17:9: 17:12
    let _3: &usize;                      // in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:18:32: 18:37
    let mut _5: std::boxed::Box<usize>;  // in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:19:22: 19:25
    let mut _6: std::boxed::Box<usize>;  // in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:19:30: 19:41
    let mut _8: Foo;                     // in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:20:20: 20:21
    let mut _9: (&*const usize, &*const usize); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _10: &*const usize;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _11: &*const usize;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _15: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _16: *const usize;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _17: *const usize;           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _19: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _20: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _21: &*const usize;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _22: &*const usize;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _23: &*const usize;          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _24: &*const usize;              // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _25: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _26: *const usize;           // in scope 0 at ui/binding/func-arg-incomplete-pattern.rs:17:9: 17:12
    scope 1 {
        debug obj => _1;                 // in scope 1 at ui/binding/func-arg-incomplete-pattern.rs:17:9: 17:12
        let _2: *const usize;            // in scope 1 at ui/binding/func-arg-incomplete-pattern.rs:18:9: 18:15
        scope 2 {
            debug objptr => _2;          // in scope 2 at ui/binding/func-arg-incomplete-pattern.rs:18:9: 18:15
            let _4: Foo;                 // in scope 2 at ui/binding/func-arg-incomplete-pattern.rs:19:9: 19:10
            scope 3 {
                debug f => _4;           // in scope 3 at ui/binding/func-arg-incomplete-pattern.rs:19:9: 19:10
                let _7: *const usize;    // in scope 3 at ui/binding/func-arg-incomplete-pattern.rs:20:9: 20:13
                scope 4 {
                    debug xptr => _7;    // in scope 4 at ui/binding/func-arg-incomplete-pattern.rs:20:9: 20:13
                    let _12: &*const usize; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _13: &*const usize; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    scope 5 {
                        debug left_val => _12; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _13; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _18: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 6 {
                            debug kind => _18; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = Box::<usize>::new(const 1_usize) -> bb1; // scope 0 at ui/binding/func-arg-incomplete-pattern.rs:17:23: 17:34
                                         // mir::Constant
                                         // + span: ui/binding/func-arg-incomplete-pattern.rs:17:23: 17:31
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _26 = (((_1.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 1 at ui/binding/func-arg-incomplete-pattern.rs:18:32: 18:37
        _3 = &(*_26);                    // scope 1 at ui/binding/func-arg-incomplete-pattern.rs:18:32: 18:37
        _2 = &raw const (*_3);           // scope 1 at ui/binding/func-arg-incomplete-pattern.rs:18:32: 18:37
        _5 = move _1;                    // scope 2 at ui/binding/func-arg-incomplete-pattern.rs:19:22: 19:25
        _6 = Box::<usize>::new(const 2_usize) -> [return: bb2, unwind: bb6]; // scope 2 at ui/binding/func-arg-incomplete-pattern.rs:19:30: 19:41
                                         // mir::Constant
                                         // + span: ui/binding/func-arg-incomplete-pattern.rs:19:30: 19:38
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = Foo { x: move _5, y: move _6 }; // scope 2 at ui/binding/func-arg-incomplete-pattern.rs:19:13: 19:43
        _8 = move _4;                    // scope 3 at ui/binding/func-arg-incomplete-pattern.rs:20:20: 20:21
        _7 = foo(move _8) -> bb3;        // scope 3 at ui/binding/func-arg-incomplete-pattern.rs:20:16: 20:22
                                         // mir::Constant
                                         // + span: ui/binding/func-arg-incomplete-pattern.rs:20:16: 20:19
                                         // + literal: Const { ty: fn(Foo) -> *const usize {foo}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = &_2;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _11 = &_7;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _9 = (move _10, move _11);       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _12 = (_9.0: &*const usize);     // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _13 = (_9.1: &*const usize);     // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _16 = (*_12);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _17 = (*_13);                    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _15 = Eq(move _16, move _17);    // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _14 = Not(move _15);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _14) -> [0: bb5, otherwise: bb4]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb4: {
        _18 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _20 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _22 = _12;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _21 = _22;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _24 = _13;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _23 = _24;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _25 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _19 = core::panicking::assert_failed::<*const usize, *const usize>(move _20, move _21, move _23, move _25); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a *const usize, &'b *const usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<*const usize, *const usize>}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/binding/func-arg-incomplete-pattern.rs:22:2: 22:2
    }

    bb6 (cleanup): {
        drop(_5) -> bb7;                 // scope 2 at ui/binding/func-arg-incomplete-pattern.rs:19:42: 19:43
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/binding/func-arg-incomplete-pattern.rs:16:1: 22:2
    }
}
