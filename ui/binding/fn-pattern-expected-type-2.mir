// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:2:15: 2:15
    let _1: &[(isize, isize)];           // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:9: 3:10
    let mut _2: &[(isize, isize); 3];    // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
    let _3: &[(isize, isize); 3];        // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
    let mut _4: std::slice::Iter<'_, (isize, isize)>; // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
    let mut _5: &[(isize, isize)];       // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
    let mut _7: std::option::Option<&(isize, isize)>; // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
    let mut _8: &mut std::slice::Iter<'_, (isize, isize)>; // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
    let mut _9: &mut std::slice::Iter<'_, (isize, isize)>; // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
    let mut _10: isize;                  // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:4:5: 7:6
    let _13: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _15: &[&str];                // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
    let mut _16: &[&str; 2];             // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
    let _17: &[&str; 2];                 // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _21: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:24: 5:25
    let mut _23: &isize;                 // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:24: 5:25
    let _24: &isize;                     // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:24: 5:25
    let _25: ();                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _26: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _27: &[&str];                // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
    let mut _28: &[&str; 2];             // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
    let _29: &[&str; 2];                 // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
    let mut _30: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _31: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _32: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _33: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _34: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:24: 6:25
    let mut _35: &isize;                 // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:24: 6:25
    let _36: &isize;                     // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:24: 6:25
    let mut _39: &[(isize, isize); 3];   // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
    let mut _40: &(isize, isize);        // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
    let mut _41: &(isize, isize);        // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/binding/fn-pattern-expected-type-2.rs:3:9: 3:10
        let mut _6: std::slice::Iter<'_, (isize, isize)>; // in scope 1 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
        scope 2 {
            debug iter => _6;            // in scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
            let _11: isize;              // in scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:11: 4:12
            let _12: isize;              // in scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:14: 4:15
            scope 3 {
                debug x => _11;          // in scope 3 at ui/binding/fn-pattern-expected-type-2.rs:4:11: 4:12
                debug y => _12;          // in scope 3 at ui/binding/fn-pattern-expected-type-2.rs:4:14: 4:15
                let mut _37: &[&str; 2]; // in scope 3 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
                let mut _38: &[&str; 2]; // in scope 3 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
            }
        }
    }

    bb0: {
        _39 = const _;                   // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
                                         // + literal: Const { ty: &[(isize, isize); 3], val: Unevaluated(main, [], Some(promoted[2])) }
        _3 = _39;                        // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
        _2 = _3;                         // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
        _1 = move _2 as &[(isize, isize)] (Pointer(Unsize)); // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
        _5 = _1;                         // scope 1 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
        _4 = <&[(isize, isize)] as IntoIterator>::into_iter(move _5) -> bb1; // scope 1 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
                                         // + literal: Const { ty: fn(&[(isize, isize)]) -> <&[(isize, isize)] as IntoIterator>::IntoIter {<&[(isize, isize)] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _6 = move _4;                    // scope 1 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
        goto -> bb2;                     // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:5: 7:6
    }

    bb2: {
        _9 = &mut _6;                    // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
        _8 = &mut (*_9);                 // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
        _7 = <std::slice::Iter<'_, (isize, isize)> as Iterator>::next(move _8) -> bb3; // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, (isize, isize)>) -> Option<<std::slice::Iter<'_, (isize, isize)> as Iterator>::Item> {<std::slice::Iter<'_, (isize, isize)> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = discriminant(_7);          // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
        switchInt(move _10) -> [0: bb6, 1: bb4, otherwise: bb5]; // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
    }

    bb4: {
        _40 = deref_copy ((_7 as Some).0: &(isize, isize)); // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:11: 4:12
        _11 = ((*_40).0: isize);         // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:11: 4:12
        _41 = deref_copy ((_7 as Some).0: &(isize, isize)); // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:14: 4:15
        _12 = ((*_41).1: isize);         // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:14: 4:15
        _38 = const _;                   // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[1])) }
        _17 = _38;                       // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
        _16 = _17;                       // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
        _15 = move _16 as &[&str] (Pointer(Unsize)); // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
        _24 = &_12;                      // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:5:24: 5:25
        _23 = _24;                       // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:5:24: 5:25
        _22 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _23) -> bb7; // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:5:24: 5:25
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:5:24: 5:25
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb5: {
        unreachable;                     // scope 2 at ui/binding/fn-pattern-expected-type-2.rs:4:20: 4:21
    }

    bb6: {
        return;                          // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:8:2: 8:2
    }

    bb7: {
        _21 = [move _22];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _20 = &_21;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _19 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _18 = move _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> bb8; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _13 = _print(move _14) -> bb9;   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb9: {
        _37 = const _;                   // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _29 = _37;                       // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
        _28 = _29;                       // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
        _27 = move _28 as &[&str] (Pointer(Unsize)); // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
        _36 = &_11;                      // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:6:24: 6:25
        _35 = _36;                       // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:6:24: 6:25
        _34 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _35) -> bb10; // scope 3 at ui/binding/fn-pattern-expected-type-2.rs:6:24: 6:25
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:6:24: 6:25
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb10: {
        _33 = [move _34];                // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _32 = &_33;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _31 = _32;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _30 = move _31 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _26 = Arguments::<'_>::new_v1(move _27, move _30) -> bb11; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb11: {
        _25 = _print(move _26) -> bb2;   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
        return;                          // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:6:18: 6:22
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
        return;                          // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:5:18: 5:22
    }
}

promoted[2] in main: &[(isize, isize); 3] = {
    let mut _0: &[(isize, isize); 3];    // return place in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
    let mut _1: [(isize, isize); 3];     // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:33: 3:59
    let mut _2: (isize, isize);          // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:35: 3:41
    let mut _3: (isize, isize);          // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:43: 3:49
    let mut _4: (isize, isize);          // in scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:51: 3:57

    bb0: {
        _2 = (const 1_isize, const 2_isize); // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:35: 3:41
        _3 = (const 3_isize, const 4_isize); // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:43: 3:49
        _4 = (const 5_isize, const 6_isize); // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:51: 3:57
        _1 = [move _2, move _3, move _4]; // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:33: 3:59
        _0 = &_1;                        // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
        return;                          // scope 0 at ui/binding/fn-pattern-expected-type-2.rs:3:32: 3:59
    }
}
