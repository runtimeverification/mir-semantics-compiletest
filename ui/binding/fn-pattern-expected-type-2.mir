// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let _1: &[(isize, isize)];
    let mut _2: std::slice::Iter<'_, (isize, isize)>;
    let mut _4: std::option::Option<&(isize, isize)>;
    let mut _5: &mut std::slice::Iter<'_, (isize, isize)>;
    let mut _6: isize;
    let _9: ();
    let mut _10: std::fmt::Arguments<'_>;
    let mut _11: &[&str];
    let mut _12: &[core::fmt::rt::Argument<'_>];
    let _13: &[core::fmt::rt::Argument<'_>; 1];
    let _14: [core::fmt::rt::Argument<'_>; 1];
    let mut _15: core::fmt::rt::Argument<'_>;
    let _16: &isize;
    let _17: ();
    let mut _18: std::fmt::Arguments<'_>;
    let mut _19: &[&str];
    let mut _20: &[core::fmt::rt::Argument<'_>];
    let _21: &[core::fmt::rt::Argument<'_>; 1];
    let _22: [core::fmt::rt::Argument<'_>; 1];
    let mut _23: core::fmt::rt::Argument<'_>;
    let _24: &isize;
    let mut _27: &[(isize, isize); 3];
    let mut _28: &(isize, isize);
    let mut _29: &(isize, isize);
    scope 1 {
        debug v => _1;
        let mut _3: std::slice::Iter<'_, (isize, isize)>;
        scope 2 {
            debug iter => _3;
            let _7: isize;
            let _8: isize;
            scope 3 {
                debug x => _7;
                debug y => _8;
                let mut _25: &[&str; 2];
                let mut _26: &[&str; 2];
            }
        }
    }

    bb0: {
        _27 = const _;
        _1 = _27 as &[(isize, isize)] (Pointer(Unsize));
        _2 = <&[(isize, isize)] as IntoIterator>::into_iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = move _2;
        goto -> bb2;
    }

    bb2: {
        _5 = &mut _3;
        _4 = <std::slice::Iter<'_, (isize, isize)> as Iterator>::next(_5) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = discriminant(_4);
        switchInt(move _6) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _28 = deref_copy ((_4 as Some).0: &(isize, isize));
        _7 = ((*_28).0: isize);
        _29 = deref_copy ((_4 as Some).0: &(isize, isize));
        _8 = ((*_29).1: isize);
        _26 = const _;
        _11 = _26 as &[&str] (Pointer(Unsize));
        _16 = &_8;
        _15 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_16) -> [return: bb7, unwind continue];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _14 = [move _15];
        _13 = &_14;
        _12 = _13 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _10 = Arguments::<'_>::new_v1(move _11, move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        _9 = _print(move _10) -> [return: bb9, unwind continue];
    }

    bb9: {
        _25 = const _;
        _19 = _25 as &[&str] (Pointer(Unsize));
        _24 = &_7;
        _23 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_24) -> [return: bb10, unwind continue];
    }

    bb10: {
        _22 = [move _23];
        _21 = &_22;
        _20 = _21 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _18 = Arguments::<'_>::new_v1(move _19, move _20) -> [return: bb11, unwind continue];
    }

    bb11: {
        _17 = _print(move _18) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[(isize, isize); 3] = {
    let mut _0: &[(isize, isize); 3];
    let mut _1: [(isize, isize); 3];
    let mut _2: (isize, isize);
    let mut _3: (isize, isize);
    let mut _4: (isize, isize);

    bb0: {
        _2 = (const 1_isize, const 2_isize);
        _3 = (const 3_isize, const 4_isize);
        _4 = (const 5_isize, const 6_isize);
        _1 = [move _2, move _3, move _4];
        _0 = &_1;
        return;
    }
}
