// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const VALUE: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:4:14: 4:19

    bb0: {
        _0 = const 21_usize;             // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:4:22: 4:24
        return;                          // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:4:1: 4:25
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:6:15: 6:15
    let mut _1: std::boxed::Box<i32>;    // in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:15:11: 15:23
    let _2: !;                           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    let mut _3: std::boxed::Box<usize>;  // in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:19:11: 19:23
    let _4: !;                           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
    let mut _5: *const i32;              // in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:15:11: 15:23
    let mut _6: *const usize;            // in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:19:11: 19:23

    bb0: {
        _1 = Box::<i32>::new(const 18_i32) -> bb1; // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:15:11: 15:23
                                         // mir::Constant
                                         // + span: ui/binding/range-inclusive-pattern-precedence.rs:15:11: 15:19
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = (((_1.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32); // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:15:5: 15:23
        switchInt((*_5)) -> [18: bb3, otherwise: bb2]; // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:15:5: 15:23
    }

    bb2: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code") -> bb10; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:18:5: 18:6
    }

    bb4: {
        _3 = Box::<usize>::new(const 21_usize) -> bb5; // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:19:11: 19:23
                                         // mir::Constant
                                         // + span: ui/binding/range-inclusive-pattern-precedence.rs:19:11: 19:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(usize) -> Box<usize> {Box::<usize>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _6 = (((_3.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize); // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:19:5: 19:23
        switchInt((*_6)) -> [21: bb7, otherwise: bb6]; // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:19:5: 19:23
    }

    bb6: {
        _4 = core::panicking::panic(const "internal error: entered unreachable code") -> bb9; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:77
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:9: 68:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/panic.rs:68:34: 68:76
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb7: {
        drop(_3) -> bb8;                 // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:23:1: 23:2
    }

    bb8: {
        return;                          // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:23:2: 23:2
    }

    bb9 (cleanup): {
        drop(_3) -> bb11;                // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:23:1: 23:2
    }

    bb10 (cleanup): {
        drop(_1) -> bb11;                // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:18:5: 18:6
    }

    bb11 (cleanup): {
        resume;                          // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:6:1: 23:2
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:11:11: 11:14
    let mut _1: usize;                   // in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:11:12: 11:14

    bb0: {
        _1 = const 21_usize;             // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:11:12: 11:14
        _0 = &_1;                        // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:11:11: 11:14
        return;                          // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:11:11: 11:14
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:7:11: 7:14
    let mut _1: i32;                     // in scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:7:12: 7:14

    bb0: {
        _1 = const 18_i32;               // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:7:12: 7:14
        _0 = &_1;                        // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:7:11: 7:14
        return;                          // scope 0 at ui/binding/range-inclusive-pattern-precedence.rs:7:11: 7:14
    }
}
