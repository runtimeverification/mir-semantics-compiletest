// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const VALUE: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 21_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: !;
    let _2: !;
    let mut _3: std::boxed::Box<i32>;
    let _4: !;
    let mut _5: std::boxed::Box<usize>;
    let _6: !;
    let mut _7: &usize;
    let mut _8: &i32;
    let mut _9: *const i32;
    let mut _10: *const usize;

    bb0: {
        _8 = const _;
        switchInt((*_8)) -> [18: bb2, otherwise: bb1];
    }

    bb1: {
        _1 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb2: {
        _7 = const _;
        switchInt((*_7)) -> [21: bb4, otherwise: bb3];
    }

    bb3: {
        _2 = core::panicking::panic(const "internal error: entered unreachable code") -> unwind continue;
    }

    bb4: {
        _3 = Box::<i32>::new(const 18_i32) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = (((_3.0: std::ptr::Unique<i32>).0: std::ptr::NonNull<i32>).0: *const i32);
        switchInt((*_9)) -> [18: bb7, otherwise: bb6];
    }

    bb6: {
        _4 = core::panicking::panic(const "internal error: entered unreachable code") -> bb14;
    }

    bb7: {
        drop(_3) -> [return: bb8, unwind continue];
    }

    bb8: {
        _5 = Box::<usize>::new(const 21_usize) -> [return: bb9, unwind continue];
    }

    bb9: {
        _10 = (((_5.0: std::ptr::Unique<usize>).0: std::ptr::NonNull<usize>).0: *const usize);
        switchInt((*_10)) -> [21: bb11, otherwise: bb10];
    }

    bb10: {
        _6 = core::panicking::panic(const "internal error: entered unreachable code") -> bb13;
    }

    bb11: {
        drop(_5) -> [return: bb12, unwind continue];
    }

    bb12: {
        return;
    }

    bb13 (cleanup): {
        drop(_5) -> [return: bb15, unwind terminate];
    }

    bb14 (cleanup): {
        drop(_3) -> [return: bb15, unwind terminate];
    }

    bb15 (cleanup): {
        resume;
    }
}

promoted[0] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 21_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 18_i32;
        _0 = &_1;
        return;
    }
}
