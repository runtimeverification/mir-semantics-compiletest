// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn test_generic(_1: T, _2: fn(T, T) -> bool) -> () {
    debug expected => _1;                // in scope 0 at ui/binding/expr-match-generic.rs:6:26: 6:34
    debug eq => _2;                      // in scope 0 at ui/binding/expr-match-generic.rs:6:39: 6:41
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic.rs:6:55: 6:55
    let _3: T;                           // in scope 0 at ui/binding/expr-match-generic.rs:7:7: 7:13
    let mut _4: &T;                      // in scope 0 at ui/binding/expr-match-generic.rs:7:42: 7:58
    let mut _5: bool;                    // in scope 0 at ui/binding/expr-match-generic.rs:8:5: 8:36
    let mut _6: bool;                    // in scope 0 at ui/binding/expr-match-generic.rs:8:13: 8:35
    let mut _7: fn(T, T) -> bool;        // in scope 0 at ui/binding/expr-match-generic.rs:8:14: 8:16
    let mut _8: T;                       // in scope 0 at ui/binding/expr-match-generic.rs:8:17: 8:25
    let mut _9: T;                       // in scope 0 at ui/binding/expr-match-generic.rs:8:27: 8:33
    let mut _10: !;                      // in scope 0 at ui/binding/expr-match-generic.rs:8:5: 8:36
    let mut _11: bool;                   // in scope 0 at ui/binding/expr-match-generic.rs:9:1: 9:2
    scope 1 {
        debug actual => _3;              // in scope 1 at ui/binding/expr-match-generic.rs:7:7: 7:13
    }

    bb0: {
        _11 = const false;               // scope 0 at ui/binding/expr-match-generic.rs:7:7: 7:13
        _11 = const true;                // scope 0 at ui/binding/expr-match-generic.rs:7:7: 7:13
        _4 = &_1;                        // scope 0 at ui/binding/expr-match-generic.rs:7:42: 7:58
        _3 = <T as Clone>::clone(move _4) -> [return: bb1, unwind: bb7]; // scope 0 at ui/binding/expr-match-generic.rs:7:42: 7:58
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic.rs:7:51: 7:56
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = _2;                         // scope 1 at ui/binding/expr-match-generic.rs:8:14: 8:16
        _11 = const false;               // scope 1 at ui/binding/expr-match-generic.rs:8:17: 8:25
        _8 = move _1;                    // scope 1 at ui/binding/expr-match-generic.rs:8:17: 8:25
        _9 = move _3;                    // scope 1 at ui/binding/expr-match-generic.rs:8:27: 8:33
        _6 = move _7(move _8, move _9) -> [return: bb2, unwind: bb7]; // scope 1 at ui/binding/expr-match-generic.rs:8:13: 8:35
    }

    bb2: {
        _5 = Not(move _6);               // scope 1 at ui/binding/expr-match-generic.rs:8:5: 8:36
        switchInt(move _5) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/binding/expr-match-generic.rs:8:5: 8:36
    }

    bb3: {
        _10 = core::panicking::panic(const "assertion failed: (eq(expected, actual))") -> bb7; // scope 1 at ui/binding/expr-match-generic.rs:8:5: 8:36
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic.rs:8:5: 8:36
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        return;                          // scope 0 at ui/binding/expr-match-generic.rs:9:2: 9:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/binding/expr-match-generic.rs:6:1: 9:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/binding/expr-match-generic.rs:9:1: 9:2
    }

    bb7 (cleanup): {
        switchInt(_11) -> [0: bb5, otherwise: bb6]; // scope 0 at ui/binding/expr-match-generic.rs:9:1: 9:2
    }
}

fn test_bool() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic.rs:11:16: 11:16
    let _1: ();                          // in scope 0 at ui/binding/expr-match-generic.rs:13:5: 13:45
    let mut _2: fn(bool, bool) -> bool;  // in scope 0 at ui/binding/expr-match-generic.rs:13:32: 13:44

    bb0: {
        _2 = compare_bool as fn(bool, bool) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/binding/expr-match-generic.rs:13:32: 13:44
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic.rs:13:32: 13:44
                                         // + literal: Const { ty: fn(bool, bool) -> bool {compare_bool}, val: Value(<ZST>) }
        _1 = test_generic::<bool>(const true, move _2) -> bb1; // scope 0 at ui/binding/expr-match-generic.rs:13:5: 13:45
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic.rs:13:5: 13:25
                                         // + literal: Const { ty: fn(bool, fn(bool, bool) -> bool) {test_generic::<bool>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/expr-match-generic.rs:14:2: 14:2
    }
}

fn compare_bool(_1: bool, _2: bool) -> bool {
    debug b1 => _1;                      // in scope 0 at ui/binding/expr-match-generic.rs:12:21: 12:23
    debug b2 => _2;                      // in scope 0 at ui/binding/expr-match-generic.rs:12:31: 12:33
    let mut _0: bool;                    // return place in scope 0 at ui/binding/expr-match-generic.rs:12:44: 12:48
    let mut _3: bool;                    // in scope 0 at ui/binding/expr-match-generic.rs:12:58: 12:60
    let mut _4: bool;                    // in scope 0 at ui/binding/expr-match-generic.rs:12:64: 12:66

    bb0: {
        _3 = _1;                         // scope 0 at ui/binding/expr-match-generic.rs:12:58: 12:60
        _4 = _2;                         // scope 0 at ui/binding/expr-match-generic.rs:12:64: 12:66
        _0 = Eq(move _3, move _4);       // scope 0 at ui/binding/expr-match-generic.rs:12:58: 12:66
        return;                          // scope 0 at ui/binding/expr-match-generic.rs:12:69: 12:69
    }
}

fn <impl at ui/binding/expr-match-generic.rs:16:10: 16:15>::clone(_1: &Pair) -> Pair {
    debug self => _1;                    // in scope 0 at ui/binding/expr-match-generic.rs:16:10: 16:15
    let mut _0: Pair;                    // return place in scope 0 at ui/binding/expr-match-generic.rs:16:10: 16:15
    let mut _2: isize;                   // in scope 0 at ui/binding/expr-match-generic.rs:18:5: 18:13
    let mut _3: &isize;                  // in scope 0 at ui/binding/expr-match-generic.rs:18:5: 18:13
    let _4: &isize;                      // in scope 0 at ui/binding/expr-match-generic.rs:18:5: 18:13
    let mut _5: isize;                   // in scope 0 at ui/binding/expr-match-generic.rs:19:5: 19:13
    let mut _6: &isize;                  // in scope 0 at ui/binding/expr-match-generic.rs:19:5: 19:13
    let _7: &isize;                      // in scope 0 at ui/binding/expr-match-generic.rs:19:5: 19:13

    bb0: {
        _4 = &((*_1).0: isize);          // scope 0 at ui/binding/expr-match-generic.rs:18:5: 18:13
        _3 = _4;                         // scope 0 at ui/binding/expr-match-generic.rs:18:5: 18:13
        _2 = (*_3);                      // scope 0 at ui/binding/expr-match-generic.rs:18:5: 18:13
        _7 = &((*_1).1: isize);          // scope 0 at ui/binding/expr-match-generic.rs:19:5: 19:13
        _6 = _7;                         // scope 0 at ui/binding/expr-match-generic.rs:19:5: 19:13
        _5 = (*_6);                      // scope 0 at ui/binding/expr-match-generic.rs:19:5: 19:13
        _0 = Pair { a: move _2, b: move _5 }; // scope 0 at ui/binding/expr-match-generic.rs:16:10: 16:15
        return;                          // scope 0 at ui/binding/expr-match-generic.rs:16:15: 16:15
    }
}

fn test_rec() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic.rs:22:15: 22:15
    let _1: ();                          // in scope 0 at ui/binding/expr-match-generic.rs:26:5: 26:57
    let mut _2: Pair;                    // in scope 0 at ui/binding/expr-match-generic.rs:26:26: 26:43
    let mut _3: fn(Pair, Pair) -> bool;  // in scope 0 at ui/binding/expr-match-generic.rs:26:45: 26:56

    bb0: {
        _2 = Pair { a: const 1_isize, b: const 2_isize }; // scope 0 at ui/binding/expr-match-generic.rs:26:26: 26:43
        _3 = compare_rec as fn(Pair, Pair) -> bool (Pointer(ReifyFnPointer)); // scope 0 at ui/binding/expr-match-generic.rs:26:45: 26:56
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic.rs:26:45: 26:56
                                         // + literal: Const { ty: fn(Pair, Pair) -> bool {compare_rec}, val: Value(<ZST>) }
        _1 = test_generic::<Pair>(move _2, move _3) -> bb1; // scope 0 at ui/binding/expr-match-generic.rs:26:5: 26:57
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic.rs:26:5: 26:25
                                         // + literal: Const { ty: fn(Pair, fn(Pair, Pair) -> bool) {test_generic::<Pair>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/binding/expr-match-generic.rs:27:2: 27:2
    }
}

fn compare_rec(_1: Pair, _2: Pair) -> bool {
    debug t1 => _1;                      // in scope 0 at ui/binding/expr-match-generic.rs:23:20: 23:22
    debug t2 => _2;                      // in scope 0 at ui/binding/expr-match-generic.rs:23:30: 23:32
    let mut _0: bool;                    // return place in scope 0 at ui/binding/expr-match-generic.rs:23:43: 23:47
    let mut _3: bool;                    // in scope 0 at ui/binding/expr-match-generic.rs:24:9: 24:21
    let mut _4: isize;                   // in scope 0 at ui/binding/expr-match-generic.rs:24:9: 24:13
    let mut _5: isize;                   // in scope 0 at ui/binding/expr-match-generic.rs:24:17: 24:21
    let mut _6: bool;                    // in scope 0 at ui/binding/expr-match-generic.rs:24:25: 24:37
    let mut _7: isize;                   // in scope 0 at ui/binding/expr-match-generic.rs:24:25: 24:29
    let mut _8: isize;                   // in scope 0 at ui/binding/expr-match-generic.rs:24:33: 24:37

    bb0: {
        _4 = (_1.0: isize);              // scope 0 at ui/binding/expr-match-generic.rs:24:9: 24:13
        _5 = (_2.0: isize);              // scope 0 at ui/binding/expr-match-generic.rs:24:17: 24:21
        _3 = Eq(move _4, move _5);       // scope 0 at ui/binding/expr-match-generic.rs:24:9: 24:21
        switchInt(move _3) -> [0: bb1, otherwise: bb2]; // scope 0 at ui/binding/expr-match-generic.rs:24:9: 24:37
    }

    bb1: {
        _0 = const false;                // scope 0 at ui/binding/expr-match-generic.rs:24:9: 24:37
        goto -> bb3;                     // scope 0 at ui/binding/expr-match-generic.rs:24:9: 24:37
    }

    bb2: {
        _7 = (_1.1: isize);              // scope 0 at ui/binding/expr-match-generic.rs:24:25: 24:29
        _8 = (_2.1: isize);              // scope 0 at ui/binding/expr-match-generic.rs:24:33: 24:37
        _6 = Eq(move _7, move _8);       // scope 0 at ui/binding/expr-match-generic.rs:24:25: 24:37
        _0 = move _6;                    // scope 0 at ui/binding/expr-match-generic.rs:24:9: 24:37
        goto -> bb3;                     // scope 0 at ui/binding/expr-match-generic.rs:24:9: 24:37
    }

    bb3: {
        return;                          // scope 0 at ui/binding/expr-match-generic.rs:25:6: 25:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/expr-match-generic.rs:29:15: 29:15
    let _1: ();                          // in scope 0 at ui/binding/expr-match-generic.rs:29:17: 29:28
    let _2: ();                          // in scope 0 at ui/binding/expr-match-generic.rs:29:30: 29:40

    bb0: {
        _1 = test_bool() -> bb1;         // scope 0 at ui/binding/expr-match-generic.rs:29:17: 29:28
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic.rs:29:17: 29:26
                                         // + literal: Const { ty: fn() {test_bool}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = test_rec() -> bb2;          // scope 0 at ui/binding/expr-match-generic.rs:29:30: 29:40
                                         // mir::Constant
                                         // + span: ui/binding/expr-match-generic.rs:29:30: 29:38
                                         // + literal: Const { ty: fn() {test_rec}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/binding/expr-match-generic.rs:29:43: 29:43
    }
}
