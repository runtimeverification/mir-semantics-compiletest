// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: std::slice::Iter<'_, Foo>;
    let mut _2: std::slice::Iter<'_, Foo>;
    let mut _3: std::option::Option<&Foo>;
    let mut _4: &mut std::slice::Iter<'_, Foo>;
    let mut _5: isize;
    let mut _7: isize;
    let _8: ();
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _11: bool;
    let mut _12: bool;
    let _13: ();
    let mut _14: std::fmt::Arguments<'_>;
    let mut _15: &[&str];
    let mut _18: &[Foo; 5];
    scope 1 {
        debug iter => _2;
        let _6: &Foo;
        scope 2 {
            debug foo => _6;
            let mut _16: &[&str; 1];
            let mut _17: &[&str; 1];
        }
    }

    bb0: {
        _18 = const _;
        _1 = <&[Foo; 5] as IntoIterator>::into_iter(_18) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = move _1;
        goto -> bb2;
    }

    bb2: {
        _4 = &mut _2;
        _3 = <std::slice::Iter<'_, Foo> as Iterator>::next(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = discriminant(_3);
        switchInt(move _5) -> [0: bb6, 1: bb4, otherwise: bb5];
    }

    bb4: {
        _6 = ((_3 as Some).0: &Foo);
        _7 = discriminant((*_6));
        switchInt(move _7) -> [0: bb7, 1: bb10, 2: bb11, otherwise: bb2];
    }

    bb5: {
        unreachable;
    }

    bb6: {
        return;
    }

    bb7: {
        _17 = const _;
        _10 = _17 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb8, unwind continue];
    }

    bb8: {
        _8 = _print(move _9) -> [return: bb2, unwind continue];
    }

    bb9: {
        _16 = const _;
        _15 = _16 as &[&str] (Pointer(Unsize));
        _14 = Arguments::<'_>::new_const(move _15) -> [return: bb12, unwind continue];
    }

    bb10: {
        _11 = Lt(const 1_i32, const 2_i32);
        switchInt(move _11) -> [0: bb2, otherwise: bb9];
    }

    bb11: {
        _12 = Lt(const 1_i32, const 2_i32);
        switchInt(move _12) -> [0: bb2, otherwise: bb9];
    }

    bb12: {
        _13 = _print(move _14) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "BC!\n"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "A\n"];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[Foo; 5] = {
    let mut _0: &[Foo; 5];
    let mut _1: [Foo; 5];
    let mut _2: Foo;
    let mut _3: Foo;
    let mut _4: Foo;
    let mut _5: Foo;
    let mut _6: Foo;

    bb0: {
        _2 = Foo::A;
        _3 = Foo::B;
        _4 = Foo::C;
        _5 = Foo::D;
        _6 = Foo::E;
        _1 = [move _2, move _3, move _4, move _5, move _6];
        _0 = &_1;
        return;
    }
}
