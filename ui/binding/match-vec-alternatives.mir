// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn match_vecs(_1: &[T], _2: &[T]) -> &str {
    debug l1 => _1;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:3:22: 3:24
    debug l2 => _2;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:3:35: 3:37
    let mut _0: &str;                    // return place in scope 0 at ui/binding/match-vec-alternatives.rs:3:51: 3:63
    let mut _3: (&[T], &[T]);            // in scope 0 at ui/binding/match-vec-alternatives.rs:4:11: 4:19
    let mut _4: &[T];                    // in scope 0 at ui/binding/match-vec-alternatives.rs:4:12: 4:14
    let mut _5: &[T];                    // in scope 0 at ui/binding/match-vec-alternatives.rs:4:16: 4:18
    let mut _6: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:5:16: 5:18
    let mut _7: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:5:16: 5:18
    let mut _8: bool;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:5:16: 5:18
    let mut _9: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:6:33: 6:35
    let mut _10: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:6:33: 6:35
    let mut _11: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:6:33: 6:35
    let mut _12: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:5:11: 5:13
    let mut _13: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:5:11: 5:13
    let mut _14: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:5:11: 5:13
    let mut _15: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:4:11: 4:19
    let mut _16: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:4:11: 4:19
    let mut _17: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:4:11: 4:19

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-vec-alternatives.rs:4:12: 4:14
        _5 = _2;                         // scope 0 at ui/binding/match-vec-alternatives.rs:4:16: 4:18
        _3 = (move _4, move _5);         // scope 0 at ui/binding/match-vec-alternatives.rs:4:11: 4:19
        _15 = deref_copy (_3.0: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:5:11: 5:13
        _12 = Len((*_15));               // scope 0 at ui/binding/match-vec-alternatives.rs:5:11: 5:13
        _13 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:5:11: 5:13
        _14 = Eq(move _12, move _13);    // scope 0 at ui/binding/match-vec-alternatives.rs:5:11: 5:13
        switchInt(move _14) -> [0: bb2, otherwise: bb1]; // scope 0 at ui/binding/match-vec-alternatives.rs:5:11: 5:13
    }

    bb1: {
        _16 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:5:16: 5:18
        _6 = Len((*_16));                // scope 0 at ui/binding/match-vec-alternatives.rs:5:16: 5:18
        _7 = const 0_usize;              // scope 0 at ui/binding/match-vec-alternatives.rs:5:16: 5:18
        _8 = Eq(move _6, move _7);       // scope 0 at ui/binding/match-vec-alternatives.rs:5:16: 5:18
        switchInt(move _8) -> [0: bb5, otherwise: bb4]; // scope 0 at ui/binding/match-vec-alternatives.rs:5:16: 5:18
    }

    bb2: {
        _17 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:6:33: 6:35
        _9 = Len((*_17));                // scope 0 at ui/binding/match-vec-alternatives.rs:6:33: 6:35
        _10 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:6:33: 6:35
        _11 = Eq(move _9, move _10);     // scope 0 at ui/binding/match-vec-alternatives.rs:6:33: 6:35
        switchInt(move _11) -> [0: bb3, otherwise: bb5]; // scope 0 at ui/binding/match-vec-alternatives.rs:6:33: 6:35
    }

    bb3: {
        _0 = const "both non-empty";     // scope 0 at ui/binding/match-vec-alternatives.rs:7:27: 7:43
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:7:27: 7:43
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb6;                     // scope 0 at ui/binding/match-vec-alternatives.rs:7:27: 7:43
    }

    bb4: {
        _0 = const "both empty";         // scope 0 at ui/binding/match-vec-alternatives.rs:5:23: 5:35
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:5:23: 5:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb6;                     // scope 0 at ui/binding/match-vec-alternatives.rs:5:23: 5:35
    }

    bb5: {
        _0 = const "one empty";          // scope 0 at ui/binding/match-vec-alternatives.rs:6:40: 6:51
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:6:40: 6:51
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb6;                     // scope 0 at ui/binding/match-vec-alternatives.rs:6:40: 6:51
    }

    bb6: {
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:9:2: 9:2
    }
}

fn match_vecs_cons(_1: &[T], _2: &[T]) -> &str {
    debug l1 => _1;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:11:27: 11:29
    debug l2 => _2;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:11:40: 11:42
    let mut _0: &str;                    // return place in scope 0 at ui/binding/match-vec-alternatives.rs:11:56: 11:68
    let mut _3: (&[T], &[T]);            // in scope 0 at ui/binding/match-vec-alternatives.rs:12:11: 12:19
    let mut _4: &[T];                    // in scope 0 at ui/binding/match-vec-alternatives.rs:12:12: 12:14
    let mut _5: &[T];                    // in scope 0 at ui/binding/match-vec-alternatives.rs:12:16: 12:18
    let mut _6: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:14:16: 14:23
    let mut _7: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:14:16: 14:23
    let mut _8: bool;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:14:16: 14:23
    let mut _9: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:13:16: 13:18
    let mut _10: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:13:16: 13:18
    let mut _11: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:13:16: 13:18
    let mut _12: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:15:21: 15:28
    let mut _13: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:15:21: 15:28
    let mut _14: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:15:21: 15:28
    let mut _15: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:14:39: 14:41
    let mut _16: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:14:39: 14:41
    let mut _17: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:14:39: 14:41
    let mut _18: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:14:29: 14:36
    let mut _19: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:14:29: 14:36
    let mut _20: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:14:29: 14:36
    let mut _21: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:13:11: 13:13
    let mut _22: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:13:11: 13:13
    let mut _23: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:13:11: 13:13
    let mut _24: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:12:11: 12:19
    let mut _25: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:12:11: 12:19
    let mut _26: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:12:11: 12:19
    let mut _27: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:12:11: 12:19
    let mut _28: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:12:11: 12:19
    let mut _29: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:12:11: 12:19

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-vec-alternatives.rs:12:12: 12:14
        _5 = _2;                         // scope 0 at ui/binding/match-vec-alternatives.rs:12:16: 12:18
        _3 = (move _4, move _5);         // scope 0 at ui/binding/match-vec-alternatives.rs:12:11: 12:19
        _24 = deref_copy (_3.0: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:13:11: 13:13
        _21 = Len((*_24));               // scope 0 at ui/binding/match-vec-alternatives.rs:13:11: 13:13
        _22 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:13:11: 13:13
        _23 = Eq(move _21, move _22);    // scope 0 at ui/binding/match-vec-alternatives.rs:13:11: 13:13
        switchInt(move _23) -> [0: bb4, otherwise: bb1]; // scope 0 at ui/binding/match-vec-alternatives.rs:13:11: 13:13
    }

    bb1: {
        _25 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:13:16: 13:18
        _9 = Len((*_25));                // scope 0 at ui/binding/match-vec-alternatives.rs:13:16: 13:18
        _10 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:13:16: 13:18
        _11 = Eq(move _9, move _10);     // scope 0 at ui/binding/match-vec-alternatives.rs:13:16: 13:18
        switchInt(move _11) -> [0: bb2, otherwise: bb8]; // scope 0 at ui/binding/match-vec-alternatives.rs:13:16: 13:18
    }

    bb2: {
        _26 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:14:16: 14:23
        _6 = Len((*_26));                // scope 0 at ui/binding/match-vec-alternatives.rs:14:16: 14:23
        _7 = const 1_usize;              // scope 0 at ui/binding/match-vec-alternatives.rs:14:16: 14:23
        _8 = Ge(move _6, move _7);       // scope 0 at ui/binding/match-vec-alternatives.rs:14:16: 14:23
        switchInt(move _8) -> [0: bb3, otherwise: bb9]; // scope 0 at ui/binding/match-vec-alternatives.rs:14:16: 14:23
    }

    bb3: {
        unreachable;                     // scope 0 at ui/binding/match-vec-alternatives.rs:12:11: 12:19
    }

    bb4: {
        _27 = deref_copy (_3.0: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:14:29: 14:36
        _18 = Len((*_27));               // scope 0 at ui/binding/match-vec-alternatives.rs:14:29: 14:36
        _19 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:14:29: 14:36
        _20 = Ge(move _18, move _19);    // scope 0 at ui/binding/match-vec-alternatives.rs:14:29: 14:36
        switchInt(move _20) -> [0: bb3, otherwise: bb5]; // scope 0 at ui/binding/match-vec-alternatives.rs:14:29: 14:36
    }

    bb5: {
        _28 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:14:39: 14:41
        _15 = Len((*_28));               // scope 0 at ui/binding/match-vec-alternatives.rs:14:39: 14:41
        _16 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:14:39: 14:41
        _17 = Eq(move _15, move _16);    // scope 0 at ui/binding/match-vec-alternatives.rs:14:39: 14:41
        switchInt(move _17) -> [0: bb6, otherwise: bb9]; // scope 0 at ui/binding/match-vec-alternatives.rs:14:39: 14:41
    }

    bb6: {
        _29 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:15:21: 15:28
        _12 = Len((*_29));               // scope 0 at ui/binding/match-vec-alternatives.rs:15:21: 15:28
        _13 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:15:21: 15:28
        _14 = Ge(move _12, move _13);    // scope 0 at ui/binding/match-vec-alternatives.rs:15:21: 15:28
        switchInt(move _14) -> [0: bb3, otherwise: bb7]; // scope 0 at ui/binding/match-vec-alternatives.rs:15:21: 15:28
    }

    bb7: {
        _0 = const "both non-empty";     // scope 0 at ui/binding/match-vec-alternatives.rs:15:33: 15:49
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:15:33: 15:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb10;                    // scope 0 at ui/binding/match-vec-alternatives.rs:15:33: 15:49
    }

    bb8: {
        _0 = const "both empty";         // scope 0 at ui/binding/match-vec-alternatives.rs:13:23: 13:35
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:13:23: 13:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb10;                    // scope 0 at ui/binding/match-vec-alternatives.rs:13:23: 13:35
    }

    bb9: {
        _0 = const "one empty";          // scope 0 at ui/binding/match-vec-alternatives.rs:14:46: 14:57
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:14:46: 14:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb10;                    // scope 0 at ui/binding/match-vec-alternatives.rs:14:46: 14:57
    }

    bb10: {
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:17:2: 17:2
    }
}

fn match_vecs_snoc(_1: &[T], _2: &[T]) -> &str {
    debug l1 => _1;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:19:27: 19:29
    debug l2 => _2;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:19:40: 19:42
    let mut _0: &str;                    // return place in scope 0 at ui/binding/match-vec-alternatives.rs:19:56: 19:68
    let mut _3: (&[T], &[T]);            // in scope 0 at ui/binding/match-vec-alternatives.rs:20:11: 20:19
    let mut _4: &[T];                    // in scope 0 at ui/binding/match-vec-alternatives.rs:20:12: 20:14
    let mut _5: &[T];                    // in scope 0 at ui/binding/match-vec-alternatives.rs:20:16: 20:18
    let mut _6: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:22:16: 22:23
    let mut _7: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:22:16: 22:23
    let mut _8: bool;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:22:16: 22:23
    let mut _9: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:21:16: 21:18
    let mut _10: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:21:16: 21:18
    let mut _11: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:21:16: 21:18
    let mut _12: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:23:21: 23:28
    let mut _13: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:23:21: 23:28
    let mut _14: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:23:21: 23:28
    let mut _15: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:22:39: 22:41
    let mut _16: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:22:39: 22:41
    let mut _17: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:22:39: 22:41
    let mut _18: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:22:29: 22:36
    let mut _19: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:22:29: 22:36
    let mut _20: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:22:29: 22:36
    let mut _21: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:21:11: 21:13
    let mut _22: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:21:11: 21:13
    let mut _23: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:21:11: 21:13
    let mut _24: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:20:11: 20:19
    let mut _25: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:20:11: 20:19
    let mut _26: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:20:11: 20:19
    let mut _27: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:20:11: 20:19
    let mut _28: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:20:11: 20:19
    let mut _29: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:20:11: 20:19

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-vec-alternatives.rs:20:12: 20:14
        _5 = _2;                         // scope 0 at ui/binding/match-vec-alternatives.rs:20:16: 20:18
        _3 = (move _4, move _5);         // scope 0 at ui/binding/match-vec-alternatives.rs:20:11: 20:19
        _24 = deref_copy (_3.0: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:21:11: 21:13
        _21 = Len((*_24));               // scope 0 at ui/binding/match-vec-alternatives.rs:21:11: 21:13
        _22 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:21:11: 21:13
        _23 = Eq(move _21, move _22);    // scope 0 at ui/binding/match-vec-alternatives.rs:21:11: 21:13
        switchInt(move _23) -> [0: bb4, otherwise: bb1]; // scope 0 at ui/binding/match-vec-alternatives.rs:21:11: 21:13
    }

    bb1: {
        _25 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:21:16: 21:18
        _9 = Len((*_25));                // scope 0 at ui/binding/match-vec-alternatives.rs:21:16: 21:18
        _10 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:21:16: 21:18
        _11 = Eq(move _9, move _10);     // scope 0 at ui/binding/match-vec-alternatives.rs:21:16: 21:18
        switchInt(move _11) -> [0: bb2, otherwise: bb8]; // scope 0 at ui/binding/match-vec-alternatives.rs:21:16: 21:18
    }

    bb2: {
        _26 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:22:16: 22:23
        _6 = Len((*_26));                // scope 0 at ui/binding/match-vec-alternatives.rs:22:16: 22:23
        _7 = const 1_usize;              // scope 0 at ui/binding/match-vec-alternatives.rs:22:16: 22:23
        _8 = Ge(move _6, move _7);       // scope 0 at ui/binding/match-vec-alternatives.rs:22:16: 22:23
        switchInt(move _8) -> [0: bb3, otherwise: bb9]; // scope 0 at ui/binding/match-vec-alternatives.rs:22:16: 22:23
    }

    bb3: {
        unreachable;                     // scope 0 at ui/binding/match-vec-alternatives.rs:20:11: 20:19
    }

    bb4: {
        _27 = deref_copy (_3.0: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:22:29: 22:36
        _18 = Len((*_27));               // scope 0 at ui/binding/match-vec-alternatives.rs:22:29: 22:36
        _19 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:22:29: 22:36
        _20 = Ge(move _18, move _19);    // scope 0 at ui/binding/match-vec-alternatives.rs:22:29: 22:36
        switchInt(move _20) -> [0: bb3, otherwise: bb5]; // scope 0 at ui/binding/match-vec-alternatives.rs:22:29: 22:36
    }

    bb5: {
        _28 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:22:39: 22:41
        _15 = Len((*_28));               // scope 0 at ui/binding/match-vec-alternatives.rs:22:39: 22:41
        _16 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:22:39: 22:41
        _17 = Eq(move _15, move _16);    // scope 0 at ui/binding/match-vec-alternatives.rs:22:39: 22:41
        switchInt(move _17) -> [0: bb6, otherwise: bb9]; // scope 0 at ui/binding/match-vec-alternatives.rs:22:39: 22:41
    }

    bb6: {
        _29 = deref_copy (_3.1: &[T]);   // scope 0 at ui/binding/match-vec-alternatives.rs:23:21: 23:28
        _12 = Len((*_29));               // scope 0 at ui/binding/match-vec-alternatives.rs:23:21: 23:28
        _13 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:23:21: 23:28
        _14 = Ge(move _12, move _13);    // scope 0 at ui/binding/match-vec-alternatives.rs:23:21: 23:28
        switchInt(move _14) -> [0: bb3, otherwise: bb7]; // scope 0 at ui/binding/match-vec-alternatives.rs:23:21: 23:28
    }

    bb7: {
        _0 = const "both non-empty";     // scope 0 at ui/binding/match-vec-alternatives.rs:23:33: 23:49
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:23:33: 23:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb10;                    // scope 0 at ui/binding/match-vec-alternatives.rs:23:33: 23:49
    }

    bb8: {
        _0 = const "both empty";         // scope 0 at ui/binding/match-vec-alternatives.rs:21:23: 21:35
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:21:23: 21:35
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb10;                    // scope 0 at ui/binding/match-vec-alternatives.rs:21:23: 21:35
    }

    bb9: {
        _0 = const "one empty";          // scope 0 at ui/binding/match-vec-alternatives.rs:22:46: 22:57
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:22:46: 22:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb10;                    // scope 0 at ui/binding/match-vec-alternatives.rs:22:46: 22:57
    }

    bb10: {
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:25:2: 25:2
    }
}

fn match_nested_vecs_cons(_1: Option<&[T]>, _2: Result<&[T], ()>) -> &str {
    debug l1 => _1;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:27:34: 27:36
    debug l2 => _2;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:27:55: 27:57
    let mut _0: &str;                    // return place in scope 0 at ui/binding/match-vec-alternatives.rs:27:83: 27:95
    let mut _3: (std::option::Option<&[T]>, std::result::Result<&[T], ()>); // in scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
    let mut _4: std::option::Option<&[T]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:28:12: 28:14
    let mut _5: std::result::Result<&[T], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:28:16: 28:18
    let mut _6: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:32:20: 32:30
    let mut _7: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:32:20: 32:30
    let mut _8: bool;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:32:20: 32:30
    let mut _9: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:31:56: 31:59
    let mut _10: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:31:56: 31:59
    let mut _11: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:31:56: 31:59
    let mut _12: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:31:20: 31:22
    let mut _13: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:31:20: 31:22
    let mut _14: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:31:20: 31:22
    let mut _15: isize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:31:16: 31:23
    let mut _16: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:29:25: 29:27
    let mut _17: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:29:25: 29:27
    let mut _18: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:29:25: 29:27
    let mut _19: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:30:16: 30:23
    let mut _20: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:30:16: 30:23
    let mut _21: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:30:16: 30:23
    let mut _22: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:29:16: 29:18
    let mut _23: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:29:16: 29:18
    let mut _24: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:29:16: 29:18
    let mut _25: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:30:42: 30:49
    let mut _26: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:30:42: 30:49
    let mut _27: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:30:42: 30:49
    let mut _28: isize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:29:21: 29:28
    let mut _29: isize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:29:10: 29:19
    let mut _30: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
    let mut _31: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
    let mut _32: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
    let mut _33: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
    let mut _34: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
    let mut _35: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
    let mut _36: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-vec-alternatives.rs:28:12: 28:14
        _5 = _2;                         // scope 0 at ui/binding/match-vec-alternatives.rs:28:16: 28:18
        _3 = (move _4, move _5);         // scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
        _29 = discriminant((_3.0: std::option::Option<&[T]>)); // scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
        switchInt(move _29) -> [0: bb1, 1: bb6, otherwise: bb16]; // scope 0 at ui/binding/match-vec-alternatives.rs:28:5: 28:19
    }

    bb1: {
        _15 = discriminant((_3.1: std::result::Result<&[T], ()>)); // scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
        switchInt(move _15) -> [0: bb2, 1: bb13, otherwise: bb17]; // scope 0 at ui/binding/match-vec-alternatives.rs:28:5: 28:19
    }

    bb2: {
        _30 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:31:20: 31:22
        _12 = Len((*_30));               // scope 0 at ui/binding/match-vec-alternatives.rs:31:20: 31:22
        _13 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:31:20: 31:22
        _14 = Eq(move _12, move _13);    // scope 0 at ui/binding/match-vec-alternatives.rs:31:20: 31:22
        switchInt(move _14) -> [0: bb3, otherwise: bb13]; // scope 0 at ui/binding/match-vec-alternatives.rs:31:20: 31:22
    }

    bb3: {
        _31 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:31:56: 31:59
        _9 = Len((*_31));                // scope 0 at ui/binding/match-vec-alternatives.rs:31:56: 31:59
        _10 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:31:56: 31:59
        _11 = Eq(move _9, move _10);     // scope 0 at ui/binding/match-vec-alternatives.rs:31:56: 31:59
        switchInt(move _11) -> [0: bb4, otherwise: bb13]; // scope 0 at ui/binding/match-vec-alternatives.rs:31:56: 31:59
    }

    bb4: {
        _32 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:32:20: 32:30
        _6 = Len((*_32));                // scope 0 at ui/binding/match-vec-alternatives.rs:32:20: 32:30
        _7 = const 2_usize;              // scope 0 at ui/binding/match-vec-alternatives.rs:32:20: 32:30
        _8 = Ge(move _6, move _7);       // scope 0 at ui/binding/match-vec-alternatives.rs:32:20: 32:30
        switchInt(move _8) -> [0: bb5, otherwise: bb14]; // scope 0 at ui/binding/match-vec-alternatives.rs:32:20: 32:30
    }

    bb5: {
        _0 = const "other";              // scope 0 at ui/binding/match-vec-alternatives.rs:33:14: 33:21
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:33:14: 33:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:33:14: 33:21
    }

    bb6: {
        _28 = discriminant((_3.1: std::result::Result<&[T], ()>)); // scope 0 at ui/binding/match-vec-alternatives.rs:28:11: 28:19
        switchInt(move _28) -> [0: bb7, 1: bb10, otherwise: bb18]; // scope 0 at ui/binding/match-vec-alternatives.rs:28:5: 28:19
    }

    bb7: {
        _33 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:29:16: 29:18
        _22 = Len((*_33));               // scope 0 at ui/binding/match-vec-alternatives.rs:29:16: 29:18
        _23 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:29:16: 29:18
        _24 = Eq(move _22, move _23);    // scope 0 at ui/binding/match-vec-alternatives.rs:29:16: 29:18
        switchInt(move _24) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/binding/match-vec-alternatives.rs:29:16: 29:18
    }

    bb8: {
        _34 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:29:25: 29:27
        _16 = Len((*_34));               // scope 0 at ui/binding/match-vec-alternatives.rs:29:25: 29:27
        _17 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:29:25: 29:27
        _18 = Eq(move _16, move _17);    // scope 0 at ui/binding/match-vec-alternatives.rs:29:25: 29:27
        switchInt(move _18) -> [0: bb5, otherwise: bb11]; // scope 0 at ui/binding/match-vec-alternatives.rs:29:25: 29:27
    }

    bb9: {
        _35 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:30:16: 30:23
        _19 = Len((*_35));               // scope 0 at ui/binding/match-vec-alternatives.rs:30:16: 30:23
        _20 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:30:16: 30:23
        _21 = Ge(move _19, move _20);    // scope 0 at ui/binding/match-vec-alternatives.rs:30:16: 30:23
        switchInt(move _21) -> [0: bb5, otherwise: bb12]; // scope 0 at ui/binding/match-vec-alternatives.rs:30:16: 30:23
    }

    bb10: {
        _36 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:30:42: 30:49
        _25 = Len((*_36));               // scope 0 at ui/binding/match-vec-alternatives.rs:30:42: 30:49
        _26 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:30:42: 30:49
        _27 = Ge(move _25, move _26);    // scope 0 at ui/binding/match-vec-alternatives.rs:30:42: 30:49
        switchInt(move _27) -> [0: bb5, otherwise: bb12]; // scope 0 at ui/binding/match-vec-alternatives.rs:30:42: 30:49
    }

    bb11: {
        _0 = const "Some(empty), Ok(empty)"; // scope 0 at ui/binding/match-vec-alternatives.rs:29:33: 29:57
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:29:33: 29:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:29:33: 29:57
    }

    bb12: {
        _0 = const "Some(non-empty), any"; // scope 0 at ui/binding/match-vec-alternatives.rs:30:64: 30:86
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:30:64: 30:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:30:64: 30:86
    }

    bb13: {
        _0 = const "None, Ok(less than one element)"; // scope 0 at ui/binding/match-vec-alternatives.rs:31:65: 31:98
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:31:65: 31:98
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:31:65: 31:98
    }

    bb14: {
        _0 = const "None, Ok(at least two elements)"; // scope 0 at ui/binding/match-vec-alternatives.rs:32:36: 32:69
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:32:36: 32:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:32:36: 32:69
    }

    bb15: {
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:35:2: 35:2
    }

    bb16: {
        unreachable;                     // scope 0 at ui/binding/match-vec-alternatives.rs:33:14: 33:21
    }

    bb17: {
        unreachable;                     // scope 0 at ui/binding/match-vec-alternatives.rs:33:14: 33:21
    }

    bb18: {
        unreachable;                     // scope 0 at ui/binding/match-vec-alternatives.rs:33:14: 33:21
    }
}

fn match_nested_vecs_snoc(_1: Option<&[T]>, _2: Result<&[T], ()>) -> &str {
    debug l1 => _1;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:37:34: 37:36
    debug l2 => _2;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:37:55: 37:57
    let mut _0: &str;                    // return place in scope 0 at ui/binding/match-vec-alternatives.rs:37:83: 37:95
    let mut _3: (std::option::Option<&[T]>, std::result::Result<&[T], ()>); // in scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
    let mut _4: std::option::Option<&[T]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:38:12: 38:14
    let mut _5: std::result::Result<&[T], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:38:16: 38:18
    let mut _6: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:42:20: 42:30
    let mut _7: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:42:20: 42:30
    let mut _8: bool;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:42:20: 42:30
    let mut _9: usize;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:41:56: 41:59
    let mut _10: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:41:56: 41:59
    let mut _11: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:41:56: 41:59
    let mut _12: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:41:20: 41:22
    let mut _13: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:41:20: 41:22
    let mut _14: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:41:20: 41:22
    let mut _15: isize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:41:16: 41:23
    let mut _16: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:39:25: 39:27
    let mut _17: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:39:25: 39:27
    let mut _18: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:39:25: 39:27
    let mut _19: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:40:16: 40:23
    let mut _20: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:40:16: 40:23
    let mut _21: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:40:16: 40:23
    let mut _22: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:39:16: 39:18
    let mut _23: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:39:16: 39:18
    let mut _24: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:39:16: 39:18
    let mut _25: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:40:42: 40:49
    let mut _26: usize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:40:42: 40:49
    let mut _27: bool;                   // in scope 0 at ui/binding/match-vec-alternatives.rs:40:42: 40:49
    let mut _28: isize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:39:21: 39:28
    let mut _29: isize;                  // in scope 0 at ui/binding/match-vec-alternatives.rs:39:10: 39:19
    let mut _30: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
    let mut _31: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
    let mut _32: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
    let mut _33: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
    let mut _34: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
    let mut _35: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
    let mut _36: &[T];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19

    bb0: {
        _4 = _1;                         // scope 0 at ui/binding/match-vec-alternatives.rs:38:12: 38:14
        _5 = _2;                         // scope 0 at ui/binding/match-vec-alternatives.rs:38:16: 38:18
        _3 = (move _4, move _5);         // scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
        _29 = discriminant((_3.0: std::option::Option<&[T]>)); // scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
        switchInt(move _29) -> [0: bb1, 1: bb6, otherwise: bb16]; // scope 0 at ui/binding/match-vec-alternatives.rs:38:5: 38:19
    }

    bb1: {
        _15 = discriminant((_3.1: std::result::Result<&[T], ()>)); // scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
        switchInt(move _15) -> [0: bb2, 1: bb13, otherwise: bb17]; // scope 0 at ui/binding/match-vec-alternatives.rs:38:5: 38:19
    }

    bb2: {
        _30 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:41:20: 41:22
        _12 = Len((*_30));               // scope 0 at ui/binding/match-vec-alternatives.rs:41:20: 41:22
        _13 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:41:20: 41:22
        _14 = Eq(move _12, move _13);    // scope 0 at ui/binding/match-vec-alternatives.rs:41:20: 41:22
        switchInt(move _14) -> [0: bb3, otherwise: bb13]; // scope 0 at ui/binding/match-vec-alternatives.rs:41:20: 41:22
    }

    bb3: {
        _31 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:41:56: 41:59
        _9 = Len((*_31));                // scope 0 at ui/binding/match-vec-alternatives.rs:41:56: 41:59
        _10 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:41:56: 41:59
        _11 = Eq(move _9, move _10);     // scope 0 at ui/binding/match-vec-alternatives.rs:41:56: 41:59
        switchInt(move _11) -> [0: bb4, otherwise: bb13]; // scope 0 at ui/binding/match-vec-alternatives.rs:41:56: 41:59
    }

    bb4: {
        _32 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:42:20: 42:30
        _6 = Len((*_32));                // scope 0 at ui/binding/match-vec-alternatives.rs:42:20: 42:30
        _7 = const 2_usize;              // scope 0 at ui/binding/match-vec-alternatives.rs:42:20: 42:30
        _8 = Ge(move _6, move _7);       // scope 0 at ui/binding/match-vec-alternatives.rs:42:20: 42:30
        switchInt(move _8) -> [0: bb5, otherwise: bb14]; // scope 0 at ui/binding/match-vec-alternatives.rs:42:20: 42:30
    }

    bb5: {
        _0 = const "other";              // scope 0 at ui/binding/match-vec-alternatives.rs:43:14: 43:21
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:43:14: 43:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:43:14: 43:21
    }

    bb6: {
        _28 = discriminant((_3.1: std::result::Result<&[T], ()>)); // scope 0 at ui/binding/match-vec-alternatives.rs:38:11: 38:19
        switchInt(move _28) -> [0: bb7, 1: bb10, otherwise: bb18]; // scope 0 at ui/binding/match-vec-alternatives.rs:38:5: 38:19
    }

    bb7: {
        _33 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:39:16: 39:18
        _22 = Len((*_33));               // scope 0 at ui/binding/match-vec-alternatives.rs:39:16: 39:18
        _23 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:39:16: 39:18
        _24 = Eq(move _22, move _23);    // scope 0 at ui/binding/match-vec-alternatives.rs:39:16: 39:18
        switchInt(move _24) -> [0: bb9, otherwise: bb8]; // scope 0 at ui/binding/match-vec-alternatives.rs:39:16: 39:18
    }

    bb8: {
        _34 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:39:25: 39:27
        _16 = Len((*_34));               // scope 0 at ui/binding/match-vec-alternatives.rs:39:25: 39:27
        _17 = const 0_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:39:25: 39:27
        _18 = Eq(move _16, move _17);    // scope 0 at ui/binding/match-vec-alternatives.rs:39:25: 39:27
        switchInt(move _18) -> [0: bb5, otherwise: bb11]; // scope 0 at ui/binding/match-vec-alternatives.rs:39:25: 39:27
    }

    bb9: {
        _35 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:40:16: 40:23
        _19 = Len((*_35));               // scope 0 at ui/binding/match-vec-alternatives.rs:40:16: 40:23
        _20 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:40:16: 40:23
        _21 = Ge(move _19, move _20);    // scope 0 at ui/binding/match-vec-alternatives.rs:40:16: 40:23
        switchInt(move _21) -> [0: bb5, otherwise: bb12]; // scope 0 at ui/binding/match-vec-alternatives.rs:40:16: 40:23
    }

    bb10: {
        _36 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]); // scope 0 at ui/binding/match-vec-alternatives.rs:40:42: 40:49
        _25 = Len((*_36));               // scope 0 at ui/binding/match-vec-alternatives.rs:40:42: 40:49
        _26 = const 1_usize;             // scope 0 at ui/binding/match-vec-alternatives.rs:40:42: 40:49
        _27 = Ge(move _25, move _26);    // scope 0 at ui/binding/match-vec-alternatives.rs:40:42: 40:49
        switchInt(move _27) -> [0: bb5, otherwise: bb12]; // scope 0 at ui/binding/match-vec-alternatives.rs:40:42: 40:49
    }

    bb11: {
        _0 = const "Some(empty), Ok(empty)"; // scope 0 at ui/binding/match-vec-alternatives.rs:39:33: 39:57
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:39:33: 39:57
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:39:33: 39:57
    }

    bb12: {
        _0 = const "Some(non-empty), any"; // scope 0 at ui/binding/match-vec-alternatives.rs:40:64: 40:86
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:40:64: 40:86
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:40:64: 40:86
    }

    bb13: {
        _0 = const "None, Ok(less than one element)"; // scope 0 at ui/binding/match-vec-alternatives.rs:41:65: 41:98
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:41:65: 41:98
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:41:65: 41:98
    }

    bb14: {
        _0 = const "None, Ok(at least two elements)"; // scope 0 at ui/binding/match-vec-alternatives.rs:42:36: 42:69
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:42:36: 42:69
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        goto -> bb15;                    // scope 0 at ui/binding/match-vec-alternatives.rs:42:36: 42:69
    }

    bb15: {
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:45:2: 45:2
    }

    bb16: {
        unreachable;                     // scope 0 at ui/binding/match-vec-alternatives.rs:43:14: 43:21
    }

    bb17: {
        unreachable;                     // scope 0 at ui/binding/match-vec-alternatives.rs:43:14: 43:21
    }

    bb18: {
        unreachable;                     // scope 0 at ui/binding/match-vec-alternatives.rs:43:14: 43:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/match-vec-alternatives.rs:47:11: 47:11
    let mut _1: (&&str, &&str);          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &&str;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: &str;                        // in scope 0 at ui/binding/match-vec-alternatives.rs:48:16: 48:44
    let mut _4: &[i32];                  // in scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
    let mut _5: &[i32; 2];               // in scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
    let _6: &[i32; 2];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
    let mut _7: &[i32];                  // in scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
    let mut _8: &[i32; 2];               // in scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
    let _9: &[i32; 2];                   // in scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
    let mut _10: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _12: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _13: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _14: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _15: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _16: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _18: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _19: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _20: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _21: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _22: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _23: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _25: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _26: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _27: &str;                       // in scope 0 at ui/binding/match-vec-alternatives.rs:49:16: 49:46
    let mut _28: &[i32];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
    let mut _29: &[i32; 0];              // in scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
    let _30: &[i32; 0];                  // in scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
    let mut _31: &[i32];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
    let mut _32: &[i32; 4];              // in scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
    let _33: &[i32; 4];                  // in scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
    let mut _34: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _35: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _36: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _37: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _38: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _39: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _40: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _42: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _43: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _44: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _45: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _46: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _47: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _49: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _50: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _51: &str;                       // in scope 0 at ui/binding/match-vec-alternatives.rs:50:16: 50:45
    let mut _52: &[usize];               // in scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
    let mut _53: &[usize; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
    let _54: &[usize; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
    let mut _55: &[usize];               // in scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
    let mut _56: &[usize; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
    let _57: &[usize; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
    let mut _58: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _59: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _60: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _63: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _64: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _66: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _67: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _68: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _69: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _70: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _71: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _73: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _74: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _75: &str;                       // in scope 0 at ui/binding/match-vec-alternatives.rs:51:16: 51:43
    let mut _76: &[i32];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
    let mut _77: &[i32; 3];              // in scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
    let _78: &[i32; 3];                  // in scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
    let mut _79: &[i32];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
    let mut _80: &[i32; 0];              // in scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
    let _81: &[i32; 0];                  // in scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
    let mut _82: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _83: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _84: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _85: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _86: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _87: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _88: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _90: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _91: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _92: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _93: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _94: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _95: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _97: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _98: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _99: &str;                       // in scope 0 at ui/binding/match-vec-alternatives.rs:53:16: 53:49
    let mut _100: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
    let mut _101: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
    let _102: &[i32; 2];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
    let mut _103: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
    let mut _104: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
    let _105: &[i32; 2];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
    let mut _106: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _107: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _108: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _109: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _110: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _111: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _112: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _114: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _115: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _116: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _117: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _118: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _119: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _121: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _122: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _123: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:54:16: 54:51
    let mut _124: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
    let mut _125: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
    let _126: &[i32; 0];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
    let mut _127: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
    let mut _128: &[i32; 4];             // in scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
    let _129: &[i32; 4];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
    let mut _130: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _131: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _132: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _133: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _134: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _135: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _136: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _138: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _139: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _140: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _141: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _142: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _143: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _145: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _146: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _147: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:55:16: 55:50
    let mut _148: &[usize];              // in scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
    let mut _149: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
    let _150: &[usize; 0];               // in scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
    let mut _151: &[usize];              // in scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
    let mut _152: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
    let _153: &[usize; 0];               // in scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
    let mut _154: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _155: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _156: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _157: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _158: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _159: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _160: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _162: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _163: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _164: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _165: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _166: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _167: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _168: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _169: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _170: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _171: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:56:16: 56:48
    let mut _172: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
    let mut _173: &[i32; 3];             // in scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
    let _174: &[i32; 3];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
    let mut _175: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
    let mut _176: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
    let _177: &[i32; 0];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
    let mut _178: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _179: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _180: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _181: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _182: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _183: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _184: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _186: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _187: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _188: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _189: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _190: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _191: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _192: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _193: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _194: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _195: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:58:16: 58:49
    let mut _196: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
    let mut _197: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
    let _198: &[i32; 2];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
    let mut _199: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
    let mut _200: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
    let _201: &[i32; 2];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
    let mut _202: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _203: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _204: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _205: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _206: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _207: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _208: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _210: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _211: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _212: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _213: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _214: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _215: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _216: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _217: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _218: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _219: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:59:16: 59:51
    let mut _220: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
    let mut _221: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
    let _222: &[i32; 0];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
    let mut _223: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
    let mut _224: &[i32; 4];             // in scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
    let _225: &[i32; 4];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
    let mut _226: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _227: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _228: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _229: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _230: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _231: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _232: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _234: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _235: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _236: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _237: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _238: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _239: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _240: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _241: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _242: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _243: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:60:16: 60:50
    let mut _244: &[usize];              // in scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
    let mut _245: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
    let _246: &[usize; 0];               // in scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
    let mut _247: &[usize];              // in scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
    let mut _248: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
    let _249: &[usize; 0];               // in scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
    let mut _250: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _251: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _252: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _253: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _254: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _255: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _256: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _258: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _259: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _260: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _261: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _262: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _263: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _264: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _265: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _266: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _267: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:61:16: 61:48
    let mut _268: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
    let mut _269: &[i32; 3];             // in scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
    let _270: &[i32; 3];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
    let mut _271: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
    let mut _272: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
    let _273: &[i32; 0];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
    let mut _274: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _275: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _276: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _277: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _278: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _279: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _280: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _282: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _283: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _284: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _285: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _286: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _287: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _288: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _289: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _290: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _291: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:63:16: 63:81
    let mut _292: std::option::Option<&[usize]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:63:39: 63:43
    let mut _293: std::result::Result<&[usize], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:63:45: 63:80
    let mut _294: &[usize];              // in scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
    let mut _295: &[usize; 2];           // in scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
    let _296: &[usize; 2];               // in scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
    let mut _297: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _298: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _299: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _300: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _301: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _302: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _303: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _305: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _306: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _307: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _308: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _309: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _310: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _311: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _312: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _313: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _314: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:65:16: 65:62
    let mut _315: std::option::Option<&[usize]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:65:48: 65:52
    let mut _316: std::result::Result<&[usize], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:65:54: 65:61
    let mut _317: ();                    // in scope 0 at ui/binding/match-vec-alternatives.rs:65:58: 65:60
    let mut _318: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _319: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _320: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _321: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _322: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _323: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _324: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _326: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _327: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _328: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _329: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _330: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _331: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _332: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _333: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _334: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _335: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:66:16: 66:86
    let mut _336: std::option::Option<&[bool]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:66:47: 66:64
    let mut _337: &[bool];               // in scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
    let mut _338: &[bool; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
    let _339: &[bool; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
    let mut _340: std::result::Result<&[bool], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:66:66: 66:85
    let mut _341: &[bool];               // in scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
    let mut _342: &[bool; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
    let _343: &[bool; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
    let mut _344: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _345: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _346: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _347: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _348: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _349: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _350: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _352: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _353: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _354: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _355: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _356: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _357: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _358: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _359: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _360: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _361: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:68:16: 68:67
    let mut _362: std::option::Option<&[i32]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:68:39: 68:57
    let mut _363: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
    let mut _364: &[i32; 1];             // in scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
    let _365: &[i32; 1];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
    let mut _366: std::result::Result<&[i32], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:68:59: 68:66
    let mut _367: ();                    // in scope 0 at ui/binding/match-vec-alternatives.rs:68:63: 68:65
    let mut _368: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _369: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _370: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _371: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _372: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _373: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _374: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _376: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _377: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _378: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _379: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _380: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _381: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _382: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _383: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _384: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _385: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:69:16: 69:93
    let mut _386: std::option::Option<&[(i32, ())]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:69:39: 69:64
    let mut _387: &[(i32, ())];          // in scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
    let mut _388: &[(i32, ()); 1];       // in scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
    let _389: &[(i32, ()); 1];           // in scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
    let mut _390: std::result::Result<&[(i32, ())], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:69:66: 69:92
    let mut _391: &[(i32, ())];          // in scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
    let mut _392: &[(i32, ()); 1];       // in scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
    let _393: &[(i32, ()); 1];           // in scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
    let mut _394: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _395: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _396: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _397: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _398: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _399: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _400: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _402: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _403: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _404: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _405: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _406: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _407: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _408: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _409: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _410: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _411: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:72:16: 72:81
    let mut _412: std::option::Option<&[usize]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:72:39: 72:43
    let mut _413: std::result::Result<&[usize], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:72:45: 72:80
    let mut _414: &[usize];              // in scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
    let mut _415: &[usize; 2];           // in scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
    let _416: &[usize; 2];               // in scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
    let mut _417: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _418: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _419: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _420: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _421: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _422: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _423: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _425: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _426: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _427: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _428: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _429: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _430: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _431: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _432: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _433: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _434: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:74:16: 74:62
    let mut _435: std::option::Option<&[usize]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:74:48: 74:52
    let mut _436: std::result::Result<&[usize], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:74:54: 74:61
    let mut _437: ();                    // in scope 0 at ui/binding/match-vec-alternatives.rs:74:58: 74:60
    let mut _438: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _439: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _440: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _441: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _442: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _443: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _444: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _446: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _447: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _448: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _449: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _450: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _451: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _452: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _453: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _454: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _455: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:75:16: 75:86
    let mut _456: std::option::Option<&[bool]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:75:47: 75:64
    let mut _457: &[bool];               // in scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
    let mut _458: &[bool; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
    let _459: &[bool; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
    let mut _460: std::result::Result<&[bool], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:75:66: 75:85
    let mut _461: &[bool];               // in scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
    let mut _462: &[bool; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
    let _463: &[bool; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
    let mut _464: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _465: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _466: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _467: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _468: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _469: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _470: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _472: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _473: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _474: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _475: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _476: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _477: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _478: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _479: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _480: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _481: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:77:16: 77:67
    let mut _482: std::option::Option<&[i32]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:77:39: 77:57
    let mut _483: &[i32];                // in scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
    let mut _484: &[i32; 1];             // in scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
    let _485: &[i32; 1];                 // in scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
    let mut _486: std::result::Result<&[i32], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:77:59: 77:66
    let mut _487: ();                    // in scope 0 at ui/binding/match-vec-alternatives.rs:77:63: 77:65
    let mut _488: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _489: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _490: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _491: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _492: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _493: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _494: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _496: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _497: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _498: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _499: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _500: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _501: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _502: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _503: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _504: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _505: &str;                      // in scope 0 at ui/binding/match-vec-alternatives.rs:78:16: 78:93
    let mut _506: std::option::Option<&[(i32, ())]>; // in scope 0 at ui/binding/match-vec-alternatives.rs:78:39: 78:64
    let mut _507: &[(i32, ())];          // in scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
    let mut _508: &[(i32, ()); 1];       // in scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
    let _509: &[(i32, ()); 1];           // in scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
    let mut _510: std::result::Result<&[(i32, ())], ()>; // in scope 0 at ui/binding/match-vec-alternatives.rs:78:66: 78:92
    let mut _511: &[(i32, ())];          // in scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
    let mut _512: &[(i32, ()); 1];       // in scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
    let _513: &[(i32, ()); 1];           // in scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
    let mut _514: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _515: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _516: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _517: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _518: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _519: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _520: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _522: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _523: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _524: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _525: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _526: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _527: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _528: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _529: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _530: &[(i32, ()); 1];       // in scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
    let mut _531: &[(i32, ()); 1];       // in scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
    let mut _532: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _533: &[i32; 1];             // in scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
    let mut _534: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _535: &[bool; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
    let mut _536: &[bool; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
    let mut _537: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _538: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _539: &[usize; 2];           // in scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
    let mut _540: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _541: &[(i32, ()); 1];       // in scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
    let mut _542: &[(i32, ()); 1];       // in scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
    let mut _543: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _544: &[i32; 1];             // in scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
    let mut _545: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _546: &[bool; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
    let mut _547: &[bool; 0];            // in scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
    let mut _548: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _549: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _550: &[usize; 2];           // in scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
    let mut _551: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _552: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
    let mut _553: &[i32; 3];             // in scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
    let mut _554: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _555: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
    let mut _556: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
    let mut _557: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _558: &[i32; 4];             // in scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
    let mut _559: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
    let mut _560: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _561: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
    let mut _562: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
    let mut _563: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _564: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
    let mut _565: &[i32; 3];             // in scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
    let mut _566: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _567: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
    let mut _568: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
    let mut _569: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _570: &[i32; 4];             // in scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
    let mut _571: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
    let mut _572: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _573: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
    let mut _574: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
    let mut _575: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _576: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
    let mut _577: &[i32; 3];             // in scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
    let mut _578: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _579: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
    let mut _580: &[usize; 0];           // in scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
    let mut _581: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _582: &[i32; 4];             // in scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
    let mut _583: &[i32; 0];             // in scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
    let mut _584: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _585: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
    let mut _586: &[i32; 2];             // in scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
    scope 1 {
        debug left_val => _11;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _12;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _17: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _17;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _35;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _36;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _41: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _41;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 5 {
        debug left_val => _59;           // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _60;          // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _65: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 6 {
            debug kind => _65;           // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 7 {
        debug left_val => _83;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _84;          // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _89: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 8 {
            debug kind => _89;           // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 9 {
        debug left_val => _107;          // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _108;         // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _113: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 10 {
            debug kind => _113;          // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 11 {
        debug left_val => _131;          // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _132;         // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _137: core::panicking::AssertKind; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 12 {
            debug kind => _137;          // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 13 {
        debug left_val => _155;          // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _156;         // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _161: core::panicking::AssertKind; // in scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 14 {
            debug kind => _161;          // in scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 15 {
        debug left_val => _179;          // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _180;         // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _185: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 16 {
            debug kind => _185;          // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 17 {
        debug left_val => _203;          // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _204;         // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _209: core::panicking::AssertKind; // in scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 18 {
            debug kind => _209;          // in scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 19 {
        debug left_val => _227;          // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _228;         // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _233: core::panicking::AssertKind; // in scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 20 {
            debug kind => _233;          // in scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 21 {
        debug left_val => _251;          // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _252;         // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _257: core::panicking::AssertKind; // in scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 22 {
            debug kind => _257;          // in scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 23 {
        debug left_val => _275;          // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _276;         // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _281: core::panicking::AssertKind; // in scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 24 {
            debug kind => _281;          // in scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 25 {
        debug left_val => _298;          // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _299;         // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _304: core::panicking::AssertKind; // in scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 26 {
            debug kind => _304;          // in scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 27 {
        debug left_val => _319;          // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _320;         // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _325: core::panicking::AssertKind; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 28 {
            debug kind => _325;          // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 29 {
        debug left_val => _345;          // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _346;         // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _351: core::panicking::AssertKind; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 30 {
            debug kind => _351;          // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 31 {
        debug left_val => _369;          // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _370;         // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _375: core::panicking::AssertKind; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 32 {
            debug kind => _375;          // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 33 {
        debug left_val => _395;          // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _396;         // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _401: core::panicking::AssertKind; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 34 {
            debug kind => _401;          // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 35 {
        debug left_val => _418;          // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _419;         // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _424: core::panicking::AssertKind; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 36 {
            debug kind => _424;          // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 37 {
        debug left_val => _439;          // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _440;         // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _445: core::panicking::AssertKind; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 38 {
            debug kind => _445;          // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 39 {
        debug left_val => _465;          // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _466;         // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _471: core::panicking::AssertKind; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 40 {
            debug kind => _471;          // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 41 {
        debug left_val => _489;          // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _490;         // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _495: core::panicking::AssertKind; // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 42 {
            debug kind => _495;          // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 43 {
        debug left_val => _515;          // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _516;         // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _521: core::panicking::AssertKind; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 44 {
            debug kind => _521;          // in scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _586 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:48:27: 48:34
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[57])) }
        _6 = _586;                       // scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
        _5 = _6;                         // scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
        _4 = move _5 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
        _585 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:48:36: 48:43
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[56])) }
        _9 = _585;                       // scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
        _8 = _9;                         // scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
        _7 = move _8 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
        _3 = match_vecs::<i32>(move _4, move _7) -> bb1; // scope 0 at ui/binding/match-vec-alternatives.rs:48:16: 48:44
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:48:16: 48:26
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], &'a [i32]) -> &'static str {match_vecs::<i32>}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _584 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[55])) }
        _10 = _584;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _10);        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _11 = (_1.0: &&str);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _12 = (_1.1: &&str);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _15 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _16 = _12;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _14 = <&str as PartialEq>::eq(move _15, move _16) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = Not(move _14);             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _13) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _17 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _19 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _21 = _11;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _20 = _21;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _23 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _22 = _23;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _24 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _18 = core::panicking::assert_failed::<&str, &str>(move _19, move _20, move _22, move _24); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb4: {
        _583 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:49:27: 49:30
                                         // + literal: Const { ty: &[i32; 0], val: Unevaluated(main, [], Some(promoted[54])) }
        _30 = _583;                      // scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
        _29 = _30;                       // scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
        _28 = move _29 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
        _582 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:49:32: 49:45
                                         // + literal: Const { ty: &[i32; 4], val: Unevaluated(main, [], Some(promoted[53])) }
        _33 = _582;                      // scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
        _32 = _33;                       // scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
        _31 = move _32 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
        _27 = match_vecs::<i32>(move _28, move _31) -> bb5; // scope 0 at ui/binding/match-vec-alternatives.rs:49:16: 49:46
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:49:16: 49:26
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], &'a [i32]) -> &'static str {match_vecs::<i32>}, val: Value(<ZST>) }
    }

    bb5: {
        _26 = &_27;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _581 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[52])) }
        _34 = _581;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _25 = (move _26, move _34);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _35 = (_25.0: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _36 = (_25.1: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _39 = _35;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _40 = _36;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _38 = <&str as PartialEq>::eq(move _39, move _40) -> bb6; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _37 = Not(move _38);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _37) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _41 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _43 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _45 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _44 = _45;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _47 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _46 = _47;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _48 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _42 = core::panicking::assert_failed::<&str, &str>(move _43, move _44, move _46, move _48); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb8: {
        _580 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:50:36: 50:39
                                         // + literal: Const { ty: &[usize; 0], val: Unevaluated(main, [], Some(promoted[51])) }
        _54 = _580;                      // scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
        _53 = _54;                       // scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
        _52 = move _53 as &[usize] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
        _579 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:50:41: 50:44
                                         // + literal: Const { ty: &[usize; 0], val: Unevaluated(main, [], Some(promoted[50])) }
        _57 = _579;                      // scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
        _56 = _57;                       // scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
        _55 = move _56 as &[usize] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
        _51 = match_vecs::<usize>(move _52, move _55) -> bb9; // scope 0 at ui/binding/match-vec-alternatives.rs:50:16: 50:45
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:50:16: 50:35
                                         // + literal: Const { ty: for<'a> fn(&'a [usize], &'a [usize]) -> &'static str {match_vecs::<usize>}, val: Value(<ZST>) }
    }

    bb9: {
        _50 = &_51;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _578 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[49])) }
        _58 = _578;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _49 = (move _50, move _58);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _59 = (_49.0: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _60 = (_49.1: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _63 = _59;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _64 = _60;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _62 = <&str as PartialEq>::eq(move _63, move _64) -> bb10; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb10: {
        _61 = Not(move _62);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _61) -> [0: bb12, otherwise: bb11]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb11: {
        _65 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _67 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _69 = _59;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _68 = _69;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _71 = _60;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _70 = _71;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _72 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _66 = core::panicking::assert_failed::<&str, &str>(move _67, move _68, move _70, move _72); // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb12: {
        _577 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:51:27: 51:37
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[48])) }
        _78 = _577;                      // scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
        _77 = _78;                       // scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
        _76 = move _77 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
        _576 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:51:39: 51:42
                                         // + literal: Const { ty: &[i32; 0], val: Unevaluated(main, [], Some(promoted[47])) }
        _81 = _576;                      // scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
        _80 = _81;                       // scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
        _79 = move _80 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
        _75 = match_vecs::<i32>(move _76, move _79) -> bb13; // scope 0 at ui/binding/match-vec-alternatives.rs:51:16: 51:43
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:51:16: 51:26
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], &'a [i32]) -> &'static str {match_vecs::<i32>}, val: Value(<ZST>) }
    }

    bb13: {
        _74 = &_75;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _575 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[46])) }
        _82 = _575;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _73 = (move _74, move _82);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _83 = (_73.0: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _84 = (_73.1: &&str);            // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _87 = _83;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _88 = _84;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _86 = <&str as PartialEq>::eq(move _87, move _88) -> bb14; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _85 = Not(move _86);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _85) -> [0: bb16, otherwise: bb15]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _89 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _91 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _93 = _83;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _92 = _93;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _95 = _84;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _94 = _95;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _96 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _90 = core::panicking::assert_failed::<&str, &str>(move _91, move _92, move _94, move _96); // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb16: {
        _574 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:53:32: 53:39
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[45])) }
        _102 = _574;                     // scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
        _101 = _102;                     // scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
        _100 = move _101 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
        _573 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:53:41: 53:48
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[44])) }
        _105 = _573;                     // scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
        _104 = _105;                     // scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
        _103 = move _104 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
        _99 = match_vecs_cons::<i32>(move _100, move _103) -> bb17; // scope 0 at ui/binding/match-vec-alternatives.rs:53:16: 53:49
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:53:16: 53:31
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], &'a [i32]) -> &'static str {match_vecs_cons::<i32>}, val: Value(<ZST>) }
    }

    bb17: {
        _98 = &_99;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _572 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[43])) }
        _106 = _572;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _97 = (move _98, move _106);     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _107 = (_97.0: &&str);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _108 = (_97.1: &&str);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _111 = _107;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _112 = _108;                     // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _110 = <&str as PartialEq>::eq(move _111, move _112) -> bb18; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb18: {
        _109 = Not(move _110);           // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _109) -> [0: bb20, otherwise: bb19]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb19: {
        _113 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _115 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _117 = _107;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _116 = _117;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _119 = _108;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _118 = _119;                     // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _120 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _114 = core::panicking::assert_failed::<&str, &str>(move _115, move _116, move _118, move _120); // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb20: {
        _571 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:54:32: 54:35
                                         // + literal: Const { ty: &[i32; 0], val: Unevaluated(main, [], Some(promoted[42])) }
        _126 = _571;                     // scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
        _125 = _126;                     // scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
        _124 = move _125 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
        _570 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:54:37: 54:50
                                         // + literal: Const { ty: &[i32; 4], val: Unevaluated(main, [], Some(promoted[41])) }
        _129 = _570;                     // scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
        _128 = _129;                     // scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
        _127 = move _128 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
        _123 = match_vecs_cons::<i32>(move _124, move _127) -> bb21; // scope 0 at ui/binding/match-vec-alternatives.rs:54:16: 54:51
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:54:16: 54:31
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], &'a [i32]) -> &'static str {match_vecs_cons::<i32>}, val: Value(<ZST>) }
    }

    bb21: {
        _122 = &_123;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _569 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[40])) }
        _130 = _569;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _121 = (move _122, move _130);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _131 = (_121.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _132 = (_121.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _135 = _131;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _136 = _132;                     // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _134 = <&str as PartialEq>::eq(move _135, move _136) -> bb22; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb22: {
        _133 = Not(move _134);           // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _133) -> [0: bb24, otherwise: bb23]; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _137 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _139 = const core::panicking::AssertKind::Eq; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _141 = _131;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _140 = _141;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _143 = _132;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _142 = _143;                     // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _144 = Option::<Arguments<'_>>::None; // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _138 = core::panicking::assert_failed::<&str, &str>(move _139, move _140, move _142, move _144); // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb24: {
        _568 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:55:41: 55:44
                                         // + literal: Const { ty: &[usize; 0], val: Unevaluated(main, [], Some(promoted[39])) }
        _150 = _568;                     // scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
        _149 = _150;                     // scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
        _148 = move _149 as &[usize] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
        _567 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:55:46: 55:49
                                         // + literal: Const { ty: &[usize; 0], val: Unevaluated(main, [], Some(promoted[38])) }
        _153 = _567;                     // scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
        _152 = _153;                     // scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
        _151 = move _152 as &[usize] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
        _147 = match_vecs_cons::<usize>(move _148, move _151) -> bb25; // scope 0 at ui/binding/match-vec-alternatives.rs:55:16: 55:50
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:55:16: 55:40
                                         // + literal: Const { ty: for<'a> fn(&'a [usize], &'a [usize]) -> &'static str {match_vecs_cons::<usize>}, val: Value(<ZST>) }
    }

    bb25: {
        _146 = &_147;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _566 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[37])) }
        _154 = _566;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _145 = (move _146, move _154);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _155 = (_145.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _156 = (_145.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _159 = _155;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _160 = _156;                     // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _158 = <&str as PartialEq>::eq(move _159, move _160) -> bb26; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb26: {
        _157 = Not(move _158);           // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _157) -> [0: bb28, otherwise: bb27]; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb27: {
        _161 = const core::panicking::AssertKind::Eq; // scope 13 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _163 = const core::panicking::AssertKind::Eq; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _165 = _155;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _164 = _165;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _167 = _156;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _166 = _167;                     // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _168 = Option::<Arguments<'_>>::None; // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _162 = core::panicking::assert_failed::<&str, &str>(move _163, move _164, move _166, move _168); // scope 14 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb28: {
        _565 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:56:32: 56:42
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[36])) }
        _174 = _565;                     // scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
        _173 = _174;                     // scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
        _172 = move _173 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
        _564 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:56:44: 56:47
                                         // + literal: Const { ty: &[i32; 0], val: Unevaluated(main, [], Some(promoted[35])) }
        _177 = _564;                     // scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
        _176 = _177;                     // scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
        _175 = move _176 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
        _171 = match_vecs_cons::<i32>(move _172, move _175) -> bb29; // scope 0 at ui/binding/match-vec-alternatives.rs:56:16: 56:48
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:56:16: 56:31
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], &'a [i32]) -> &'static str {match_vecs_cons::<i32>}, val: Value(<ZST>) }
    }

    bb29: {
        _170 = &_171;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _563 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[34])) }
        _178 = _563;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _169 = (move _170, move _178);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _179 = (_169.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _180 = (_169.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _183 = _179;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _184 = _180;                     // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _182 = <&str as PartialEq>::eq(move _183, move _184) -> bb30; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb30: {
        _181 = Not(move _182);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _181) -> [0: bb32, otherwise: bb31]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb31: {
        _185 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _187 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _189 = _179;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _188 = _189;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _191 = _180;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _190 = _191;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _192 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _186 = core::panicking::assert_failed::<&str, &str>(move _187, move _188, move _190, move _192); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb32: {
        _562 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:58:32: 58:39
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[33])) }
        _198 = _562;                     // scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
        _197 = _198;                     // scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
        _196 = move _197 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
        _561 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:58:41: 58:48
                                         // + literal: Const { ty: &[i32; 2], val: Unevaluated(main, [], Some(promoted[32])) }
        _201 = _561;                     // scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
        _200 = _201;                     // scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
        _199 = move _200 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
        _195 = match_vecs_snoc::<i32>(move _196, move _199) -> bb33; // scope 0 at ui/binding/match-vec-alternatives.rs:58:16: 58:49
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:58:16: 58:31
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], &'a [i32]) -> &'static str {match_vecs_snoc::<i32>}, val: Value(<ZST>) }
    }

    bb33: {
        _194 = &_195;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _560 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[31])) }
        _202 = _560;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _193 = (move _194, move _202);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _203 = (_193.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _204 = (_193.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _207 = _203;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _208 = _204;                     // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _206 = <&str as PartialEq>::eq(move _207, move _208) -> bb34; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb34: {
        _205 = Not(move _206);           // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _205) -> [0: bb36, otherwise: bb35]; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb35: {
        _209 = const core::panicking::AssertKind::Eq; // scope 17 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _211 = const core::panicking::AssertKind::Eq; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _213 = _203;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _212 = _213;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _215 = _204;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _214 = _215;                     // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _216 = Option::<Arguments<'_>>::None; // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _210 = core::panicking::assert_failed::<&str, &str>(move _211, move _212, move _214, move _216); // scope 18 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb36: {
        _559 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:59:32: 59:35
                                         // + literal: Const { ty: &[i32; 0], val: Unevaluated(main, [], Some(promoted[30])) }
        _222 = _559;                     // scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
        _221 = _222;                     // scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
        _220 = move _221 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
        _558 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:59:37: 59:50
                                         // + literal: Const { ty: &[i32; 4], val: Unevaluated(main, [], Some(promoted[29])) }
        _225 = _558;                     // scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
        _224 = _225;                     // scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
        _223 = move _224 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
        _219 = match_vecs_snoc::<i32>(move _220, move _223) -> bb37; // scope 0 at ui/binding/match-vec-alternatives.rs:59:16: 59:51
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:59:16: 59:31
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], &'a [i32]) -> &'static str {match_vecs_snoc::<i32>}, val: Value(<ZST>) }
    }

    bb37: {
        _218 = &_219;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _557 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[28])) }
        _226 = _557;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _217 = (move _218, move _226);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _227 = (_217.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _228 = (_217.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _231 = _227;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _232 = _228;                     // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _230 = <&str as PartialEq>::eq(move _231, move _232) -> bb38; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb38: {
        _229 = Not(move _230);           // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _229) -> [0: bb40, otherwise: bb39]; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb39: {
        _233 = const core::panicking::AssertKind::Eq; // scope 19 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _235 = const core::panicking::AssertKind::Eq; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _237 = _227;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _236 = _237;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _239 = _228;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _238 = _239;                     // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _240 = Option::<Arguments<'_>>::None; // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _234 = core::panicking::assert_failed::<&str, &str>(move _235, move _236, move _238, move _240); // scope 20 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb40: {
        _556 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:60:41: 60:44
                                         // + literal: Const { ty: &[usize; 0], val: Unevaluated(main, [], Some(promoted[27])) }
        _246 = _556;                     // scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
        _245 = _246;                     // scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
        _244 = move _245 as &[usize] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
        _555 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:60:46: 60:49
                                         // + literal: Const { ty: &[usize; 0], val: Unevaluated(main, [], Some(promoted[26])) }
        _249 = _555;                     // scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
        _248 = _249;                     // scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
        _247 = move _248 as &[usize] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
        _243 = match_vecs_snoc::<usize>(move _244, move _247) -> bb41; // scope 0 at ui/binding/match-vec-alternatives.rs:60:16: 60:50
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:60:16: 60:40
                                         // + literal: Const { ty: for<'a> fn(&'a [usize], &'a [usize]) -> &'static str {match_vecs_snoc::<usize>}, val: Value(<ZST>) }
    }

    bb41: {
        _242 = &_243;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _554 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[25])) }
        _250 = _554;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _241 = (move _242, move _250);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _251 = (_241.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _252 = (_241.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _255 = _251;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _256 = _252;                     // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _254 = <&str as PartialEq>::eq(move _255, move _256) -> bb42; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb42: {
        _253 = Not(move _254);           // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _253) -> [0: bb44, otherwise: bb43]; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb43: {
        _257 = const core::panicking::AssertKind::Eq; // scope 21 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _259 = const core::panicking::AssertKind::Eq; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _261 = _251;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _260 = _261;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _263 = _252;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _262 = _263;                     // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _264 = Option::<Arguments<'_>>::None; // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _258 = core::panicking::assert_failed::<&str, &str>(move _259, move _260, move _262, move _264); // scope 22 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb44: {
        _553 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:61:32: 61:42
                                         // + literal: Const { ty: &[i32; 3], val: Unevaluated(main, [], Some(promoted[24])) }
        _270 = _553;                     // scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
        _269 = _270;                     // scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
        _268 = move _269 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
        _552 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:61:44: 61:47
                                         // + literal: Const { ty: &[i32; 0], val: Unevaluated(main, [], Some(promoted[23])) }
        _273 = _552;                     // scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
        _272 = _273;                     // scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
        _271 = move _272 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
        _267 = match_vecs_snoc::<i32>(move _268, move _271) -> bb45; // scope 0 at ui/binding/match-vec-alternatives.rs:61:16: 61:48
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:61:16: 61:31
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], &'a [i32]) -> &'static str {match_vecs_snoc::<i32>}, val: Value(<ZST>) }
    }

    bb45: {
        _266 = &_267;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _551 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[22])) }
        _274 = _551;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _265 = (move _266, move _274);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _275 = (_265.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _276 = (_265.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _279 = _275;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _280 = _276;                     // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _278 = <&str as PartialEq>::eq(move _279, move _280) -> bb46; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb46: {
        _277 = Not(move _278);           // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _277) -> [0: bb48, otherwise: bb47]; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb47: {
        _281 = const core::panicking::AssertKind::Eq; // scope 23 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _283 = const core::panicking::AssertKind::Eq; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _285 = _275;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _284 = _285;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _287 = _276;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _286 = _287;                     // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _288 = Option::<Arguments<'_>>::None; // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _282 = core::panicking::assert_failed::<&str, &str>(move _283, move _284, move _286, move _288); // scope 24 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb48: {
        _292 = Option::<&[usize]>::None; // scope 0 at ui/binding/match-vec-alternatives.rs:63:39: 63:43
        _550 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:63:60: 63:79
                                         // + literal: Const { ty: &[usize; 2], val: Unevaluated(main, [], Some(promoted[21])) }
        _296 = _550;                     // scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
        _295 = _296;                     // scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
        _294 = move _295 as &[usize] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
        _293 = Result::<&[usize], ()>::Ok(move _294); // scope 0 at ui/binding/match-vec-alternatives.rs:63:45: 63:80
                                         // adt
                                         // + user_ty: UserType(0)
        _291 = match_nested_vecs_cons::<usize>(move _292, move _293) -> bb49; // scope 0 at ui/binding/match-vec-alternatives.rs:63:16: 63:81
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:63:16: 63:38
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [usize]>, Result<&'a [usize], ()>) -> &'static str {match_nested_vecs_cons::<usize>}, val: Value(<ZST>) }
    }

    bb49: {
        _290 = &_291;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _549 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[20])) }
        _297 = _549;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _289 = (move _290, move _297);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _298 = (_289.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _299 = (_289.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _302 = _298;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _303 = _299;                     // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _301 = <&str as PartialEq>::eq(move _302, move _303) -> bb50; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb50: {
        _300 = Not(move _301);           // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _300) -> [0: bb52, otherwise: bb51]; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb51: {
        _304 = const core::panicking::AssertKind::Eq; // scope 25 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _306 = const core::panicking::AssertKind::Eq; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _308 = _298;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _307 = _308;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _310 = _299;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _309 = _310;                     // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _311 = Option::<Arguments<'_>>::None; // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _305 = core::panicking::assert_failed::<&str, &str>(move _306, move _307, move _309, move _311); // scope 26 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb52: {
        _315 = Option::<&[usize]>::None; // scope 0 at ui/binding/match-vec-alternatives.rs:65:48: 65:52
        _316 = Result::<&[usize], ()>::Err(move _317); // scope 0 at ui/binding/match-vec-alternatives.rs:65:54: 65:61
        _314 = match_nested_vecs_cons::<usize>(move _315, move _316) -> bb53; // scope 0 at ui/binding/match-vec-alternatives.rs:65:16: 65:62
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:65:16: 65:47
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [usize]>, Result<&'a [usize], ()>) -> &'static str {match_nested_vecs_cons::<usize>}, val: Value(<ZST>) }
    }

    bb53: {
        _313 = &_314;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _548 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[19])) }
        _318 = _548;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _312 = (move _313, move _318);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _319 = (_312.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _320 = (_312.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _323 = _319;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _324 = _320;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _322 = <&str as PartialEq>::eq(move _323, move _324) -> bb54; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb54: {
        _321 = Not(move _322);           // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _321) -> [0: bb56, otherwise: bb55]; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb55: {
        _325 = const core::panicking::AssertKind::Eq; // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _327 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _329 = _319;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _328 = _329;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _331 = _320;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _330 = _331;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _332 = Option::<Arguments<'_>>::None; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _326 = core::panicking::assert_failed::<&str, &str>(move _327, move _328, move _330, move _332); // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb56: {
        _547 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:66:60: 66:63
                                         // + literal: Const { ty: &[bool; 0], val: Unevaluated(main, [], Some(promoted[18])) }
        _339 = _547;                     // scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
        _338 = _339;                     // scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
        _337 = move _338 as &[bool] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
        _336 = Option::<&[bool]>::Some(move _337); // scope 0 at ui/binding/match-vec-alternatives.rs:66:47: 66:64
                                         // adt
                                         // + user_ty: UserType(1)
        _546 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:66:81: 66:84
                                         // + literal: Const { ty: &[bool; 0], val: Unevaluated(main, [], Some(promoted[17])) }
        _343 = _546;                     // scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
        _342 = _343;                     // scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
        _341 = move _342 as &[bool] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
        _340 = Result::<&[bool], ()>::Ok(move _341); // scope 0 at ui/binding/match-vec-alternatives.rs:66:66: 66:85
                                         // adt
                                         // + user_ty: UserType(2)
        _335 = match_nested_vecs_cons::<bool>(move _336, move _340) -> bb57; // scope 0 at ui/binding/match-vec-alternatives.rs:66:16: 66:86
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:66:16: 66:46
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [bool]>, Result<&'a [bool], ()>) -> &'static str {match_nested_vecs_cons::<bool>}, val: Value(<ZST>) }
    }

    bb57: {
        _334 = &_335;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _545 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[16])) }
        _344 = _545;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _333 = (move _334, move _344);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _345 = (_333.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _346 = (_333.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _349 = _345;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _350 = _346;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _348 = <&str as PartialEq>::eq(move _349, move _350) -> bb58; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb58: {
        _347 = Not(move _348);           // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _347) -> [0: bb60, otherwise: bb59]; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb59: {
        _351 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _353 = const core::panicking::AssertKind::Eq; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _355 = _345;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _354 = _355;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _357 = _346;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _356 = _357;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _358 = Option::<Arguments<'_>>::None; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _352 = core::panicking::assert_failed::<&str, &str>(move _353, move _354, move _356, move _358); // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb60: {
        _544 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:68:52: 68:56
                                         // + literal: Const { ty: &[i32; 1], val: Unevaluated(main, [], Some(promoted[15])) }
        _365 = _544;                     // scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
        _364 = _365;                     // scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
        _363 = move _364 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
        _362 = Option::<&[i32]>::Some(move _363); // scope 0 at ui/binding/match-vec-alternatives.rs:68:39: 68:57
                                         // adt
                                         // + user_ty: UserType(3)
        _366 = Result::<&[i32], ()>::Err(move _367); // scope 0 at ui/binding/match-vec-alternatives.rs:68:59: 68:66
        _361 = match_nested_vecs_cons::<i32>(move _362, move _366) -> bb61; // scope 0 at ui/binding/match-vec-alternatives.rs:68:16: 68:67
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:68:16: 68:38
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [i32]>, Result<&'a [i32], ()>) -> &'static str {match_nested_vecs_cons::<i32>}, val: Value(<ZST>) }
    }

    bb61: {
        _360 = &_361;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _543 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[14])) }
        _368 = _543;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _359 = (move _360, move _368);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _369 = (_359.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _370 = (_359.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _373 = _369;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _374 = _370;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _372 = <&str as PartialEq>::eq(move _373, move _374) -> bb62; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb62: {
        _371 = Not(move _372);           // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _371) -> [0: bb64, otherwise: bb63]; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb63: {
        _375 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _377 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _379 = _369;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _378 = _379;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _381 = _370;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _380 = _381;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _382 = Option::<Arguments<'_>>::None; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _376 = core::panicking::assert_failed::<&str, &str>(move _377, move _378, move _380, move _382); // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb64: {
        _542 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:69:52: 69:63
                                         // + literal: Const { ty: &[(i32, ()); 1], val: Unevaluated(main, [], Some(promoted[13])) }
        _389 = _542;                     // scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
        _388 = _389;                     // scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
        _387 = move _388 as &[(i32, ())] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
        _386 = Option::<&[(i32, ())]>::Some(move _387); // scope 0 at ui/binding/match-vec-alternatives.rs:69:39: 69:64
                                         // adt
                                         // + user_ty: UserType(4)
        _541 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:69:81: 69:91
                                         // + literal: Const { ty: &[(i32, ()); 1], val: Unevaluated(main, [], Some(promoted[12])) }
        _393 = _541;                     // scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
        _392 = _393;                     // scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
        _391 = move _392 as &[(i32, ())] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
        _390 = Result::<&[(i32, ())], ()>::Ok(move _391); // scope 0 at ui/binding/match-vec-alternatives.rs:69:66: 69:92
                                         // adt
                                         // + user_ty: UserType(5)
        _385 = match_nested_vecs_cons::<(i32, ())>(move _386, move _390) -> bb65; // scope 0 at ui/binding/match-vec-alternatives.rs:69:16: 69:93
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:69:16: 69:38
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [(i32, ())]>, Result<&'a [(i32, ())], ()>) -> &'static str {match_nested_vecs_cons::<(i32, ())>}, val: Value(<ZST>) }
    }

    bb65: {
        _384 = &_385;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _540 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[11])) }
        _394 = _540;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _383 = (move _384, move _394);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _395 = (_383.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _396 = (_383.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _399 = _395;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _400 = _396;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _398 = <&str as PartialEq>::eq(move _399, move _400) -> bb66; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb66: {
        _397 = Not(move _398);           // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _397) -> [0: bb68, otherwise: bb67]; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb67: {
        _401 = const core::panicking::AssertKind::Eq; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _403 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _405 = _395;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _404 = _405;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _407 = _396;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _406 = _407;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _408 = Option::<Arguments<'_>>::None; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _402 = core::panicking::assert_failed::<&str, &str>(move _403, move _404, move _406, move _408); // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb68: {
        _412 = Option::<&[usize]>::None; // scope 0 at ui/binding/match-vec-alternatives.rs:72:39: 72:43
        _539 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:72:60: 72:79
                                         // + literal: Const { ty: &[usize; 2], val: Unevaluated(main, [], Some(promoted[10])) }
        _416 = _539;                     // scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
        _415 = _416;                     // scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
        _414 = move _415 as &[usize] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
        _413 = Result::<&[usize], ()>::Ok(move _414); // scope 0 at ui/binding/match-vec-alternatives.rs:72:45: 72:80
                                         // adt
                                         // + user_ty: UserType(6)
        _411 = match_nested_vecs_snoc::<usize>(move _412, move _413) -> bb69; // scope 0 at ui/binding/match-vec-alternatives.rs:72:16: 72:81
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:72:16: 72:38
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [usize]>, Result<&'a [usize], ()>) -> &'static str {match_nested_vecs_snoc::<usize>}, val: Value(<ZST>) }
    }

    bb69: {
        _410 = &_411;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _538 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[9])) }
        _417 = _538;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _409 = (move _410, move _417);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _418 = (_409.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _419 = (_409.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _422 = _418;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _423 = _419;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _421 = <&str as PartialEq>::eq(move _422, move _423) -> bb70; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb70: {
        _420 = Not(move _421);           // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _420) -> [0: bb72, otherwise: bb71]; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb71: {
        _424 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _426 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _428 = _418;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _427 = _428;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _430 = _419;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _429 = _430;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _431 = Option::<Arguments<'_>>::None; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _425 = core::panicking::assert_failed::<&str, &str>(move _426, move _427, move _429, move _431); // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb72: {
        _435 = Option::<&[usize]>::None; // scope 0 at ui/binding/match-vec-alternatives.rs:74:48: 74:52
        _436 = Result::<&[usize], ()>::Err(move _437); // scope 0 at ui/binding/match-vec-alternatives.rs:74:54: 74:61
        _434 = match_nested_vecs_snoc::<usize>(move _435, move _436) -> bb73; // scope 0 at ui/binding/match-vec-alternatives.rs:74:16: 74:62
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:74:16: 74:47
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [usize]>, Result<&'a [usize], ()>) -> &'static str {match_nested_vecs_snoc::<usize>}, val: Value(<ZST>) }
    }

    bb73: {
        _433 = &_434;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _537 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[8])) }
        _438 = _537;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _432 = (move _433, move _438);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _439 = (_432.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _440 = (_432.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _443 = _439;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _444 = _440;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _442 = <&str as PartialEq>::eq(move _443, move _444) -> bb74; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb74: {
        _441 = Not(move _442);           // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _441) -> [0: bb76, otherwise: bb75]; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb75: {
        _445 = const core::panicking::AssertKind::Eq; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _447 = const core::panicking::AssertKind::Eq; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _449 = _439;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _448 = _449;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _451 = _440;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _450 = _451;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _452 = Option::<Arguments<'_>>::None; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _446 = core::panicking::assert_failed::<&str, &str>(move _447, move _448, move _450, move _452); // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb76: {
        _536 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:75:60: 75:63
                                         // + literal: Const { ty: &[bool; 0], val: Unevaluated(main, [], Some(promoted[7])) }
        _459 = _536;                     // scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
        _458 = _459;                     // scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
        _457 = move _458 as &[bool] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
        _456 = Option::<&[bool]>::Some(move _457); // scope 0 at ui/binding/match-vec-alternatives.rs:75:47: 75:64
                                         // adt
                                         // + user_ty: UserType(7)
        _535 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:75:81: 75:84
                                         // + literal: Const { ty: &[bool; 0], val: Unevaluated(main, [], Some(promoted[6])) }
        _463 = _535;                     // scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
        _462 = _463;                     // scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
        _461 = move _462 as &[bool] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
        _460 = Result::<&[bool], ()>::Ok(move _461); // scope 0 at ui/binding/match-vec-alternatives.rs:75:66: 75:85
                                         // adt
                                         // + user_ty: UserType(8)
        _455 = match_nested_vecs_snoc::<bool>(move _456, move _460) -> bb77; // scope 0 at ui/binding/match-vec-alternatives.rs:75:16: 75:86
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:75:16: 75:46
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [bool]>, Result<&'a [bool], ()>) -> &'static str {match_nested_vecs_snoc::<bool>}, val: Value(<ZST>) }
    }

    bb77: {
        _454 = &_455;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _534 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[5])) }
        _464 = _534;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _453 = (move _454, move _464);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _465 = (_453.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _466 = (_453.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _469 = _465;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _470 = _466;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _468 = <&str as PartialEq>::eq(move _469, move _470) -> bb78; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb78: {
        _467 = Not(move _468);           // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _467) -> [0: bb80, otherwise: bb79]; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb79: {
        _471 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _473 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _475 = _465;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _474 = _475;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _477 = _466;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _476 = _477;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _478 = Option::<Arguments<'_>>::None; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _472 = core::panicking::assert_failed::<&str, &str>(move _473, move _474, move _476, move _478); // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb80: {
        _533 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:77:52: 77:56
                                         // + literal: Const { ty: &[i32; 1], val: Unevaluated(main, [], Some(promoted[4])) }
        _485 = _533;                     // scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
        _484 = _485;                     // scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
        _483 = move _484 as &[i32] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
        _482 = Option::<&[i32]>::Some(move _483); // scope 0 at ui/binding/match-vec-alternatives.rs:77:39: 77:57
                                         // adt
                                         // + user_ty: UserType(9)
        _486 = Result::<&[i32], ()>::Err(move _487); // scope 0 at ui/binding/match-vec-alternatives.rs:77:59: 77:66
        _481 = match_nested_vecs_snoc::<i32>(move _482, move _486) -> bb81; // scope 0 at ui/binding/match-vec-alternatives.rs:77:16: 77:67
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:77:16: 77:38
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [i32]>, Result<&'a [i32], ()>) -> &'static str {match_nested_vecs_snoc::<i32>}, val: Value(<ZST>) }
    }

    bb81: {
        _480 = &_481;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _532 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[3])) }
        _488 = _532;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _479 = (move _480, move _488);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _489 = (_479.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _490 = (_479.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _493 = _489;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _494 = _490;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _492 = <&str as PartialEq>::eq(move _493, move _494) -> bb82; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb82: {
        _491 = Not(move _492);           // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _491) -> [0: bb84, otherwise: bb83]; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb83: {
        _495 = const core::panicking::AssertKind::Eq; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _497 = const core::panicking::AssertKind::Eq; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _499 = _489;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _498 = _499;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _501 = _490;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _500 = _501;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _502 = Option::<Arguments<'_>>::None; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _496 = core::panicking::assert_failed::<&str, &str>(move _497, move _498, move _500, move _502); // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb84: {
        _531 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:78:52: 78:63
                                         // + literal: Const { ty: &[(i32, ()); 1], val: Unevaluated(main, [], Some(promoted[2])) }
        _509 = _531;                     // scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
        _508 = _509;                     // scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
        _507 = move _508 as &[(i32, ())] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
        _506 = Option::<&[(i32, ())]>::Some(move _507); // scope 0 at ui/binding/match-vec-alternatives.rs:78:39: 78:64
                                         // adt
                                         // + user_ty: UserType(10)
        _530 = const _;                  // scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:78:81: 78:91
                                         // + literal: Const { ty: &[(i32, ()); 1], val: Unevaluated(main, [], Some(promoted[1])) }
        _513 = _530;                     // scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
        _512 = _513;                     // scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
        _511 = move _512 as &[(i32, ())] (Pointer(Unsize)); // scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
        _510 = Result::<&[(i32, ())], ()>::Ok(move _511); // scope 0 at ui/binding/match-vec-alternatives.rs:78:66: 78:92
                                         // adt
                                         // + user_ty: UserType(11)
        _505 = match_nested_vecs_snoc::<(i32, ())>(move _506, move _510) -> bb85; // scope 0 at ui/binding/match-vec-alternatives.rs:78:16: 78:93
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:78:16: 78:38
                                         // + literal: Const { ty: for<'a> fn(Option<&'a [(i32, ())]>, Result<&'a [(i32, ())], ()>) -> &'static str {match_nested_vecs_snoc::<(i32, ())>}, val: Value(<ZST>) }
    }

    bb85: {
        _504 = &_505;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _529 = const _;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _514 = _529;                     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _503 = (move _504, move _514);   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _515 = (_503.0: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _516 = (_503.1: &&str);          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _519 = _515;                     // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _520 = _516;                     // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _518 = <&str as PartialEq>::eq(move _519, move _520) -> bb86; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb86: {
        _517 = Not(move _518);           // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _517) -> [0: bb88, otherwise: bb87]; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb87: {
        _521 = const core::panicking::AssertKind::Eq; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _523 = const core::panicking::AssertKind::Eq; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _525 = _515;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _524 = _525;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _527 = _516;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _526 = _527;                     // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _528 = Option::<Arguments<'_>>::None; // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _522 = core::panicking::assert_failed::<&str, &str>(move _523, move _524, move _526, move _528); // scope 44 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb88: {
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:80:2: 80:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:79:16: 79:38

    bb0: {
        _1 = const "Some(non-empty), any"; // scope 0 at ui/binding/match-vec-alternatives.rs:79:16: 79:38
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:79:16: 79:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[(i32, ()); 1] = {
    let mut _0: &[(i32, ()); 1];         // return place in scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
    let mut _1: [(i32, ()); 1];          // in scope 0 at ui/binding/match-vec-alternatives.rs:78:82: 78:91
    let mut _2: (i32, ());               // in scope 0 at ui/binding/match-vec-alternatives.rs:78:83: 78:90
    let mut _3: ();                      // in scope 0 at ui/binding/match-vec-alternatives.rs:78:87: 78:89

    bb0: {
        _3 = ();                         // scope 0 at ui/binding/match-vec-alternatives.rs:78:87: 78:89
        _2 = (const 1_i32, move _3);     // scope 0 at ui/binding/match-vec-alternatives.rs:78:83: 78:90
        _1 = [move _2];                  // scope 0 at ui/binding/match-vec-alternatives.rs:78:82: 78:91
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:78:81: 78:91
    }
}

promoted[2] in main: &[(i32, ()); 1] = {
    let mut _0: &[(i32, ()); 1];         // return place in scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
    let mut _1: [(i32, ()); 1];          // in scope 0 at ui/binding/match-vec-alternatives.rs:78:53: 78:63
    let mut _2: (i32, ());               // in scope 0 at ui/binding/match-vec-alternatives.rs:78:54: 78:62
    let mut _3: ();                      // in scope 0 at ui/binding/match-vec-alternatives.rs:78:59: 78:61

    bb0: {
        _3 = ();                         // scope 0 at ui/binding/match-vec-alternatives.rs:78:59: 78:61
        _2 = (const 42_i32, move _3);    // scope 0 at ui/binding/match-vec-alternatives.rs:78:54: 78:62
        _1 = [move _2];                  // scope 0 at ui/binding/match-vec-alternatives.rs:78:53: 78:63
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:78:52: 78:63
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:77:69: 77:91

    bb0: {
        _1 = const "Some(non-empty), any"; // scope 0 at ui/binding/match-vec-alternatives.rs:77:69: 77:91
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:77:69: 77:91
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &[i32; 1] = {
    let mut _0: &[i32; 1];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
    let mut _1: [i32; 1];                // in scope 0 at ui/binding/match-vec-alternatives.rs:77:53: 77:56

    bb0: {
        _1 = [const 1_i32];              // scope 0 at ui/binding/match-vec-alternatives.rs:77:53: 77:56
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:77:52: 77:56
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:76:16: 76:40

    bb0: {
        _1 = const "Some(empty), Ok(empty)"; // scope 0 at ui/binding/match-vec-alternatives.rs:76:16: 76:40
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:76:16: 76:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[6] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];              // return place in scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
    let mut _1: [bool; 0];               // in scope 0 at ui/binding/match-vec-alternatives.rs:75:82: 75:84

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:75:82: 75:84
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:75:81: 75:84
    }
}

promoted[7] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];              // return place in scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
    let mut _1: [bool; 0];               // in scope 0 at ui/binding/match-vec-alternatives.rs:75:61: 75:63

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:75:61: 75:63
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:75:60: 75:63
    }
}

promoted[8] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:74:64: 74:97

    bb0: {
        _1 = const "None, Ok(less than one element)"; // scope 0 at ui/binding/match-vec-alternatives.rs:74:64: 74:97
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:74:64: 74:97
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[9] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:73:16: 73:49

    bb0: {
        _1 = const "None, Ok(at least two elements)"; // scope 0 at ui/binding/match-vec-alternatives.rs:73:16: 73:49
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:73:16: 73:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[10] in main: &[usize; 2] = {
    let mut _0: &[usize; 2];             // return place in scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
    let mut _1: [usize; 2];              // in scope 0 at ui/binding/match-vec-alternatives.rs:72:61: 72:79

    bb0: {
        _1 = [const 4_usize, const 2_usize]; // scope 0 at ui/binding/match-vec-alternatives.rs:72:61: 72:79
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:72:60: 72:79
    }
}

promoted[11] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:70:16: 70:38

    bb0: {
        _1 = const "Some(non-empty), any"; // scope 0 at ui/binding/match-vec-alternatives.rs:70:16: 70:38
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:70:16: 70:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[12] in main: &[(i32, ()); 1] = {
    let mut _0: &[(i32, ()); 1];         // return place in scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
    let mut _1: [(i32, ()); 1];          // in scope 0 at ui/binding/match-vec-alternatives.rs:69:82: 69:91
    let mut _2: (i32, ());               // in scope 0 at ui/binding/match-vec-alternatives.rs:69:83: 69:90
    let mut _3: ();                      // in scope 0 at ui/binding/match-vec-alternatives.rs:69:87: 69:89

    bb0: {
        _3 = ();                         // scope 0 at ui/binding/match-vec-alternatives.rs:69:87: 69:89
        _2 = (const 1_i32, move _3);     // scope 0 at ui/binding/match-vec-alternatives.rs:69:83: 69:90
        _1 = [move _2];                  // scope 0 at ui/binding/match-vec-alternatives.rs:69:82: 69:91
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:69:81: 69:91
    }
}

promoted[13] in main: &[(i32, ()); 1] = {
    let mut _0: &[(i32, ()); 1];         // return place in scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
    let mut _1: [(i32, ()); 1];          // in scope 0 at ui/binding/match-vec-alternatives.rs:69:53: 69:63
    let mut _2: (i32, ());               // in scope 0 at ui/binding/match-vec-alternatives.rs:69:54: 69:62
    let mut _3: ();                      // in scope 0 at ui/binding/match-vec-alternatives.rs:69:59: 69:61

    bb0: {
        _3 = ();                         // scope 0 at ui/binding/match-vec-alternatives.rs:69:59: 69:61
        _2 = (const 42_i32, move _3);    // scope 0 at ui/binding/match-vec-alternatives.rs:69:54: 69:62
        _1 = [move _2];                  // scope 0 at ui/binding/match-vec-alternatives.rs:69:53: 69:63
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:69:52: 69:63
    }
}

promoted[14] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:68:69: 68:91

    bb0: {
        _1 = const "Some(non-empty), any"; // scope 0 at ui/binding/match-vec-alternatives.rs:68:69: 68:91
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:68:69: 68:91
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[15] in main: &[i32; 1] = {
    let mut _0: &[i32; 1];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
    let mut _1: [i32; 1];                // in scope 0 at ui/binding/match-vec-alternatives.rs:68:53: 68:56

    bb0: {
        _1 = [const 1_i32];              // scope 0 at ui/binding/match-vec-alternatives.rs:68:53: 68:56
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:68:52: 68:56
    }
}

promoted[16] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:67:16: 67:40

    bb0: {
        _1 = const "Some(empty), Ok(empty)"; // scope 0 at ui/binding/match-vec-alternatives.rs:67:16: 67:40
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:67:16: 67:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[17] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];              // return place in scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
    let mut _1: [bool; 0];               // in scope 0 at ui/binding/match-vec-alternatives.rs:66:82: 66:84

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:66:82: 66:84
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:66:81: 66:84
    }
}

promoted[18] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];              // return place in scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
    let mut _1: [bool; 0];               // in scope 0 at ui/binding/match-vec-alternatives.rs:66:61: 66:63

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:66:61: 66:63
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:66:60: 66:63
    }
}

promoted[19] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:65:64: 65:97

    bb0: {
        _1 = const "None, Ok(less than one element)"; // scope 0 at ui/binding/match-vec-alternatives.rs:65:64: 65:97
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:65:64: 65:97
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[20] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:64:16: 64:49

    bb0: {
        _1 = const "None, Ok(at least two elements)"; // scope 0 at ui/binding/match-vec-alternatives.rs:64:16: 64:49
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:64:16: 64:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[21] in main: &[usize; 2] = {
    let mut _0: &[usize; 2];             // return place in scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
    let mut _1: [usize; 2];              // in scope 0 at ui/binding/match-vec-alternatives.rs:63:61: 63:79

    bb0: {
        _1 = [const 4_usize, const 2_usize]; // scope 0 at ui/binding/match-vec-alternatives.rs:63:61: 63:79
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:63:60: 63:79
    }
}

promoted[22] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:61:50: 61:61

    bb0: {
        _1 = const "one empty";          // scope 0 at ui/binding/match-vec-alternatives.rs:61:50: 61:61
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:61:50: 61:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[23] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
    let mut _1: [i32; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:61:45: 61:47

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:61:45: 61:47
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:61:44: 61:47
    }
}

promoted[24] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
    let mut _1: [i32; 3];                // in scope 0 at ui/binding/match-vec-alternatives.rs:61:33: 61:42

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:61:33: 61:42
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:61:32: 61:42
    }
}

promoted[25] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:60:52: 60:64

    bb0: {
        _1 = const "both empty";         // scope 0 at ui/binding/match-vec-alternatives.rs:60:52: 60:64
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:60:52: 60:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[26] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];             // return place in scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
    let mut _1: [usize; 0];              // in scope 0 at ui/binding/match-vec-alternatives.rs:60:47: 60:49

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:60:47: 60:49
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:60:46: 60:49
    }
}

promoted[27] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];             // return place in scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
    let mut _1: [usize; 0];              // in scope 0 at ui/binding/match-vec-alternatives.rs:60:42: 60:44

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:60:42: 60:44
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:60:41: 60:44
    }
}

promoted[28] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:59:53: 59:64

    bb0: {
        _1 = const "one empty";          // scope 0 at ui/binding/match-vec-alternatives.rs:59:53: 59:64
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:59:53: 59:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[29] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
    let mut _1: [i32; 4];                // in scope 0 at ui/binding/match-vec-alternatives.rs:59:38: 59:50

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:59:38: 59:50
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:59:37: 59:50
    }
}

promoted[30] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
    let mut _1: [i32; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:59:33: 59:35

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:59:33: 59:35
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:59:32: 59:35
    }
}

promoted[31] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:58:51: 58:67

    bb0: {
        _1 = const "both non-empty";     // scope 0 at ui/binding/match-vec-alternatives.rs:58:51: 58:67
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:58:51: 58:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[32] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
    let mut _1: [i32; 2];                // in scope 0 at ui/binding/match-vec-alternatives.rs:58:42: 58:48

    bb0: {
        _1 = [const 2_i32, const 3_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:58:42: 58:48
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:58:41: 58:48
    }
}

promoted[33] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
    let mut _1: [i32; 2];                // in scope 0 at ui/binding/match-vec-alternatives.rs:58:33: 58:39

    bb0: {
        _1 = [const 1_i32, const 2_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:58:33: 58:39
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:58:32: 58:39
    }
}

promoted[34] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:56:50: 56:61

    bb0: {
        _1 = const "one empty";          // scope 0 at ui/binding/match-vec-alternatives.rs:56:50: 56:61
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:56:50: 56:61
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[35] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
    let mut _1: [i32; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:56:45: 56:47

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:56:45: 56:47
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:56:44: 56:47
    }
}

promoted[36] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
    let mut _1: [i32; 3];                // in scope 0 at ui/binding/match-vec-alternatives.rs:56:33: 56:42

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:56:33: 56:42
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:56:32: 56:42
    }
}

promoted[37] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:55:52: 55:64

    bb0: {
        _1 = const "both empty";         // scope 0 at ui/binding/match-vec-alternatives.rs:55:52: 55:64
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:55:52: 55:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[38] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];             // return place in scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
    let mut _1: [usize; 0];              // in scope 0 at ui/binding/match-vec-alternatives.rs:55:47: 55:49

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:55:47: 55:49
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:55:46: 55:49
    }
}

promoted[39] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];             // return place in scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
    let mut _1: [usize; 0];              // in scope 0 at ui/binding/match-vec-alternatives.rs:55:42: 55:44

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:55:42: 55:44
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:55:41: 55:44
    }
}

promoted[40] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:54:53: 54:64

    bb0: {
        _1 = const "one empty";          // scope 0 at ui/binding/match-vec-alternatives.rs:54:53: 54:64
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:54:53: 54:64
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[41] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
    let mut _1: [i32; 4];                // in scope 0 at ui/binding/match-vec-alternatives.rs:54:38: 54:50

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:54:38: 54:50
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:54:37: 54:50
    }
}

promoted[42] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
    let mut _1: [i32; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:54:33: 54:35

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:54:33: 54:35
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:54:32: 54:35
    }
}

promoted[43] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:53:51: 53:67

    bb0: {
        _1 = const "both non-empty";     // scope 0 at ui/binding/match-vec-alternatives.rs:53:51: 53:67
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:53:51: 53:67
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[44] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
    let mut _1: [i32; 2];                // in scope 0 at ui/binding/match-vec-alternatives.rs:53:42: 53:48

    bb0: {
        _1 = [const 2_i32, const 3_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:53:42: 53:48
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:53:41: 53:48
    }
}

promoted[45] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
    let mut _1: [i32; 2];                // in scope 0 at ui/binding/match-vec-alternatives.rs:53:33: 53:39

    bb0: {
        _1 = [const 1_i32, const 2_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:53:33: 53:39
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:53:32: 53:39
    }
}

promoted[46] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:51:45: 51:56

    bb0: {
        _1 = const "one empty";          // scope 0 at ui/binding/match-vec-alternatives.rs:51:45: 51:56
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:51:45: 51:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[47] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
    let mut _1: [i32; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:51:40: 51:42

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:51:40: 51:42
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:51:39: 51:42
    }
}

promoted[48] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
    let mut _1: [i32; 3];                // in scope 0 at ui/binding/match-vec-alternatives.rs:51:28: 51:37

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:51:28: 51:37
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:51:27: 51:37
    }
}

promoted[49] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:50:47: 50:59

    bb0: {
        _1 = const "both empty";         // scope 0 at ui/binding/match-vec-alternatives.rs:50:47: 50:59
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:50:47: 50:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[50] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];             // return place in scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
    let mut _1: [usize; 0];              // in scope 0 at ui/binding/match-vec-alternatives.rs:50:42: 50:44

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:50:42: 50:44
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:50:41: 50:44
    }
}

promoted[51] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];             // return place in scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
    let mut _1: [usize; 0];              // in scope 0 at ui/binding/match-vec-alternatives.rs:50:37: 50:39

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:50:37: 50:39
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:50:36: 50:39
    }
}

promoted[52] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:49:48: 49:59

    bb0: {
        _1 = const "one empty";          // scope 0 at ui/binding/match-vec-alternatives.rs:49:48: 49:59
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:49:48: 49:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[53] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
    let mut _1: [i32; 4];                // in scope 0 at ui/binding/match-vec-alternatives.rs:49:33: 49:45

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:49:33: 49:45
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:49:32: 49:45
    }
}

promoted[54] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
    let mut _1: [i32; 0];                // in scope 0 at ui/binding/match-vec-alternatives.rs:49:28: 49:30

    bb0: {
        _1 = [];                         // scope 0 at ui/binding/match-vec-alternatives.rs:49:28: 49:30
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:49:27: 49:30
    }
}

promoted[55] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/binding/match-vec-alternatives.rs:48:46: 48:62

    bb0: {
        _1 = const "both non-empty";     // scope 0 at ui/binding/match-vec-alternatives.rs:48:46: 48:62
                                         // mir::Constant
                                         // + span: ui/binding/match-vec-alternatives.rs:48:46: 48:62
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[56] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
    let mut _1: [i32; 2];                // in scope 0 at ui/binding/match-vec-alternatives.rs:48:37: 48:43

    bb0: {
        _1 = [const 2_i32, const 3_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:48:37: 48:43
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:48:36: 48:43
    }
}

promoted[57] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];               // return place in scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
    let mut _1: [i32; 2];                // in scope 0 at ui/binding/match-vec-alternatives.rs:48:28: 48:34

    bb0: {
        _1 = [const 1_i32, const 2_i32]; // scope 0 at ui/binding/match-vec-alternatives.rs:48:28: 48:34
        _0 = &_1;                        // scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
        return;                          // scope 0 at ui/binding/match-vec-alternatives.rs:48:27: 48:34
    }
}
