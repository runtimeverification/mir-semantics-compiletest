// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn match_vecs(_1: &[T], _2: &[T]) -> &str {
    debug l1 => _1;
    debug l2 => _2;
    let mut _0: &str;
    let mut _3: (&[T], &[T]);
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: &[T];
    let mut _14: &[T];
    let mut _15: &[T];

    bb0: {
        _3 = (_1, _2);
        _13 = deref_copy (_3.0: &[T]);
        _10 = Len((*_13));
        _11 = const 0_usize;
        _12 = Eq(move _10, move _11);
        switchInt(move _12) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _14 = deref_copy (_3.1: &[T]);
        _4 = Len((*_14));
        _5 = const 0_usize;
        _6 = Eq(move _4, move _5);
        switchInt(move _6) -> [0: bb5, otherwise: bb4];
    }

    bb2: {
        _15 = deref_copy (_3.1: &[T]);
        _7 = Len((*_15));
        _8 = const 0_usize;
        _9 = Eq(move _7, move _8);
        switchInt(move _9) -> [0: bb3, otherwise: bb5];
    }

    bb3: {
        _0 = const "both non-empty";
        goto -> bb6;
    }

    bb4: {
        _0 = const "both empty";
        goto -> bb6;
    }

    bb5: {
        _0 = const "one empty";
        goto -> bb6;
    }

    bb6: {
        return;
    }
}

fn match_vecs_cons(_1: &[T], _2: &[T]) -> &str {
    debug l1 => _1;
    debug l2 => _2;
    let mut _0: &str;
    let mut _3: (&[T], &[T]);
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: &[T];
    let mut _23: &[T];
    let mut _24: &[T];
    let mut _25: &[T];
    let mut _26: &[T];
    let mut _27: &[T];

    bb0: {
        _3 = (_1, _2);
        _22 = deref_copy (_3.0: &[T]);
        _19 = Len((*_22));
        _20 = const 0_usize;
        _21 = Eq(move _19, move _20);
        switchInt(move _21) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        _23 = deref_copy (_3.1: &[T]);
        _7 = Len((*_23));
        _8 = const 0_usize;
        _9 = Eq(move _7, move _8);
        switchInt(move _9) -> [0: bb2, otherwise: bb8];
    }

    bb2: {
        _24 = deref_copy (_3.1: &[T]);
        _4 = Len((*_24));
        _5 = const 1_usize;
        _6 = Ge(move _4, move _5);
        switchInt(move _6) -> [0: bb3, otherwise: bb9];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _25 = deref_copy (_3.0: &[T]);
        _16 = Len((*_25));
        _17 = const 1_usize;
        _18 = Ge(move _16, move _17);
        switchInt(move _18) -> [0: bb3, otherwise: bb5];
    }

    bb5: {
        _26 = deref_copy (_3.1: &[T]);
        _13 = Len((*_26));
        _14 = const 0_usize;
        _15 = Eq(move _13, move _14);
        switchInt(move _15) -> [0: bb6, otherwise: bb9];
    }

    bb6: {
        _27 = deref_copy (_3.1: &[T]);
        _10 = Len((*_27));
        _11 = const 1_usize;
        _12 = Ge(move _10, move _11);
        switchInt(move _12) -> [0: bb3, otherwise: bb7];
    }

    bb7: {
        _0 = const "both non-empty";
        goto -> bb10;
    }

    bb8: {
        _0 = const "both empty";
        goto -> bb10;
    }

    bb9: {
        _0 = const "one empty";
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn match_vecs_snoc(_1: &[T], _2: &[T]) -> &str {
    debug l1 => _1;
    debug l2 => _2;
    let mut _0: &str;
    let mut _3: (&[T], &[T]);
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: usize;
    let mut _14: usize;
    let mut _15: bool;
    let mut _16: usize;
    let mut _17: usize;
    let mut _18: bool;
    let mut _19: usize;
    let mut _20: usize;
    let mut _21: bool;
    let mut _22: &[T];
    let mut _23: &[T];
    let mut _24: &[T];
    let mut _25: &[T];
    let mut _26: &[T];
    let mut _27: &[T];

    bb0: {
        _3 = (_1, _2);
        _22 = deref_copy (_3.0: &[T]);
        _19 = Len((*_22));
        _20 = const 0_usize;
        _21 = Eq(move _19, move _20);
        switchInt(move _21) -> [0: bb4, otherwise: bb1];
    }

    bb1: {
        _23 = deref_copy (_3.1: &[T]);
        _7 = Len((*_23));
        _8 = const 0_usize;
        _9 = Eq(move _7, move _8);
        switchInt(move _9) -> [0: bb2, otherwise: bb8];
    }

    bb2: {
        _24 = deref_copy (_3.1: &[T]);
        _4 = Len((*_24));
        _5 = const 1_usize;
        _6 = Ge(move _4, move _5);
        switchInt(move _6) -> [0: bb3, otherwise: bb9];
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _25 = deref_copy (_3.0: &[T]);
        _16 = Len((*_25));
        _17 = const 1_usize;
        _18 = Ge(move _16, move _17);
        switchInt(move _18) -> [0: bb3, otherwise: bb5];
    }

    bb5: {
        _26 = deref_copy (_3.1: &[T]);
        _13 = Len((*_26));
        _14 = const 0_usize;
        _15 = Eq(move _13, move _14);
        switchInt(move _15) -> [0: bb6, otherwise: bb9];
    }

    bb6: {
        _27 = deref_copy (_3.1: &[T]);
        _10 = Len((*_27));
        _11 = const 1_usize;
        _12 = Ge(move _10, move _11);
        switchInt(move _12) -> [0: bb3, otherwise: bb7];
    }

    bb7: {
        _0 = const "both non-empty";
        goto -> bb10;
    }

    bb8: {
        _0 = const "both empty";
        goto -> bb10;
    }

    bb9: {
        _0 = const "one empty";
        goto -> bb10;
    }

    bb10: {
        return;
    }
}

fn match_nested_vecs_cons(_1: Option<&[T]>, _2: Result<&[T], ()>) -> &str {
    debug l1 => _1;
    debug l2 => _2;
    let mut _0: &str;
    let mut _3: (std::option::Option<&[T]>, std::result::Result<&[T], ()>);
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: &[T];
    let mut _29: &[T];
    let mut _30: &[T];
    let mut _31: &[T];
    let mut _32: &[T];
    let mut _33: &[T];
    let mut _34: &[T];

    bb0: {
        _3 = (_1, _2);
        _27 = discriminant((_3.0: std::option::Option<&[T]>));
        switchInt(move _27) -> [0: bb1, 1: bb6, otherwise: bb16];
    }

    bb1: {
        _13 = discriminant((_3.1: std::result::Result<&[T], ()>));
        switchInt(move _13) -> [0: bb2, 1: bb13, otherwise: bb16];
    }

    bb2: {
        _28 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]);
        _10 = Len((*_28));
        _11 = const 0_usize;
        _12 = Eq(move _10, move _11);
        switchInt(move _12) -> [0: bb3, otherwise: bb13];
    }

    bb3: {
        _29 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]);
        _7 = Len((*_29));
        _8 = const 1_usize;
        _9 = Eq(move _7, move _8);
        switchInt(move _9) -> [0: bb4, otherwise: bb13];
    }

    bb4: {
        _30 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]);
        _4 = Len((*_30));
        _5 = const 2_usize;
        _6 = Ge(move _4, move _5);
        switchInt(move _6) -> [0: bb5, otherwise: bb14];
    }

    bb5: {
        _0 = const "other";
        goto -> bb15;
    }

    bb6: {
        _26 = discriminant((_3.1: std::result::Result<&[T], ()>));
        switchInt(move _26) -> [0: bb7, 1: bb10, otherwise: bb16];
    }

    bb7: {
        _31 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]);
        _20 = Len((*_31));
        _21 = const 0_usize;
        _22 = Eq(move _20, move _21);
        switchInt(move _22) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _32 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]);
        _14 = Len((*_32));
        _15 = const 0_usize;
        _16 = Eq(move _14, move _15);
        switchInt(move _16) -> [0: bb5, otherwise: bb11];
    }

    bb9: {
        _33 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]);
        _17 = Len((*_33));
        _18 = const 1_usize;
        _19 = Ge(move _17, move _18);
        switchInt(move _19) -> [0: bb5, otherwise: bb12];
    }

    bb10: {
        _34 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]);
        _23 = Len((*_34));
        _24 = const 1_usize;
        _25 = Ge(move _23, move _24);
        switchInt(move _25) -> [0: bb5, otherwise: bb12];
    }

    bb11: {
        _0 = const "Some(empty), Ok(empty)";
        goto -> bb15;
    }

    bb12: {
        _0 = const "Some(non-empty), any";
        goto -> bb15;
    }

    bb13: {
        _0 = const "None, Ok(less than one element)";
        goto -> bb15;
    }

    bb14: {
        _0 = const "None, Ok(at least two elements)";
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16: {
        unreachable;
    }
}

fn match_nested_vecs_snoc(_1: Option<&[T]>, _2: Result<&[T], ()>) -> &str {
    debug l1 => _1;
    debug l2 => _2;
    let mut _0: &str;
    let mut _3: (std::option::Option<&[T]>, std::result::Result<&[T], ()>);
    let mut _4: usize;
    let mut _5: usize;
    let mut _6: bool;
    let mut _7: usize;
    let mut _8: usize;
    let mut _9: bool;
    let mut _10: usize;
    let mut _11: usize;
    let mut _12: bool;
    let mut _13: isize;
    let mut _14: usize;
    let mut _15: usize;
    let mut _16: bool;
    let mut _17: usize;
    let mut _18: usize;
    let mut _19: bool;
    let mut _20: usize;
    let mut _21: usize;
    let mut _22: bool;
    let mut _23: usize;
    let mut _24: usize;
    let mut _25: bool;
    let mut _26: isize;
    let mut _27: isize;
    let mut _28: &[T];
    let mut _29: &[T];
    let mut _30: &[T];
    let mut _31: &[T];
    let mut _32: &[T];
    let mut _33: &[T];
    let mut _34: &[T];

    bb0: {
        _3 = (_1, _2);
        _27 = discriminant((_3.0: std::option::Option<&[T]>));
        switchInt(move _27) -> [0: bb1, 1: bb6, otherwise: bb16];
    }

    bb1: {
        _13 = discriminant((_3.1: std::result::Result<&[T], ()>));
        switchInt(move _13) -> [0: bb2, 1: bb13, otherwise: bb16];
    }

    bb2: {
        _28 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]);
        _10 = Len((*_28));
        _11 = const 0_usize;
        _12 = Eq(move _10, move _11);
        switchInt(move _12) -> [0: bb3, otherwise: bb13];
    }

    bb3: {
        _29 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]);
        _7 = Len((*_29));
        _8 = const 1_usize;
        _9 = Eq(move _7, move _8);
        switchInt(move _9) -> [0: bb4, otherwise: bb13];
    }

    bb4: {
        _30 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]);
        _4 = Len((*_30));
        _5 = const 2_usize;
        _6 = Ge(move _4, move _5);
        switchInt(move _6) -> [0: bb5, otherwise: bb14];
    }

    bb5: {
        _0 = const "other";
        goto -> bb15;
    }

    bb6: {
        _26 = discriminant((_3.1: std::result::Result<&[T], ()>));
        switchInt(move _26) -> [0: bb7, 1: bb10, otherwise: bb16];
    }

    bb7: {
        _31 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]);
        _20 = Len((*_31));
        _21 = const 0_usize;
        _22 = Eq(move _20, move _21);
        switchInt(move _22) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _32 = deref_copy (((_3.1: std::result::Result<&[T], ()>) as Ok).0: &[T]);
        _14 = Len((*_32));
        _15 = const 0_usize;
        _16 = Eq(move _14, move _15);
        switchInt(move _16) -> [0: bb5, otherwise: bb11];
    }

    bb9: {
        _33 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]);
        _17 = Len((*_33));
        _18 = const 1_usize;
        _19 = Ge(move _17, move _18);
        switchInt(move _19) -> [0: bb5, otherwise: bb12];
    }

    bb10: {
        _34 = deref_copy (((_3.0: std::option::Option<&[T]>) as Some).0: &[T]);
        _23 = Len((*_34));
        _24 = const 1_usize;
        _25 = Ge(move _23, move _24);
        switchInt(move _25) -> [0: bb5, otherwise: bb12];
    }

    bb11: {
        _0 = const "Some(empty), Ok(empty)";
        goto -> bb15;
    }

    bb12: {
        _0 = const "Some(non-empty), any";
        goto -> bb15;
    }

    bb13: {
        _0 = const "None, Ok(less than one element)";
        goto -> bb15;
    }

    bb14: {
        _0 = const "None, Ok(at least two elements)";
        goto -> bb15;
    }

    bb15: {
        return;
    }

    bb16: {
        unreachable;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&&str, &&str);
    let mut _2: &&str;
    let _3: &str;
    let mut _4: &[i32];
    let mut _5: &[i32];
    let _6: &&str;
    let _7: &&str;
    let mut _8: bool;
    let mut _9: bool;
    let _11: !;
    let mut _12: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _13: (&&str, &&str);
    let mut _14: &&str;
    let _15: &str;
    let mut _16: &[i32];
    let mut _17: &[i32];
    let _18: &&str;
    let _19: &&str;
    let mut _20: bool;
    let mut _21: bool;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _25: (&&str, &&str);
    let mut _26: &&str;
    let _27: &str;
    let mut _28: &[usize];
    let mut _29: &[usize];
    let _30: &&str;
    let _31: &&str;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&&str, &&str);
    let mut _38: &&str;
    let _39: &str;
    let mut _40: &[i32];
    let mut _41: &[i32];
    let _42: &&str;
    let _43: &&str;
    let mut _44: bool;
    let mut _45: bool;
    let _47: !;
    let mut _48: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _49: (&&str, &&str);
    let mut _50: &&str;
    let _51: &str;
    let mut _52: &[i32];
    let mut _53: &[i32];
    let _54: &&str;
    let _55: &&str;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _61: (&&str, &&str);
    let mut _62: &&str;
    let _63: &str;
    let mut _64: &[i32];
    let mut _65: &[i32];
    let _66: &&str;
    let _67: &&str;
    let mut _68: bool;
    let mut _69: bool;
    let _71: !;
    let mut _72: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _73: (&&str, &&str);
    let mut _74: &&str;
    let _75: &str;
    let mut _76: &[usize];
    let mut _77: &[usize];
    let _78: &&str;
    let _79: &&str;
    let mut _80: bool;
    let mut _81: bool;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&&str, &&str);
    let mut _86: &&str;
    let _87: &str;
    let mut _88: &[i32];
    let mut _89: &[i32];
    let _90: &&str;
    let _91: &&str;
    let mut _92: bool;
    let mut _93: bool;
    let _95: !;
    let mut _96: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _97: (&&str, &&str);
    let mut _98: &&str;
    let _99: &str;
    let mut _100: &[i32];
    let mut _101: &[i32];
    let _102: &&str;
    let _103: &&str;
    let mut _104: bool;
    let mut _105: bool;
    let _107: !;
    let mut _108: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _109: (&&str, &&str);
    let mut _110: &&str;
    let _111: &str;
    let mut _112: &[i32];
    let mut _113: &[i32];
    let _114: &&str;
    let _115: &&str;
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&&str, &&str);
    let mut _122: &&str;
    let _123: &str;
    let mut _124: &[usize];
    let mut _125: &[usize];
    let _126: &&str;
    let _127: &&str;
    let mut _128: bool;
    let mut _129: bool;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&&str, &&str);
    let mut _134: &&str;
    let _135: &str;
    let mut _136: &[i32];
    let mut _137: &[i32];
    let _138: &&str;
    let _139: &&str;
    let mut _140: bool;
    let mut _141: bool;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&&str, &&str);
    let mut _146: &&str;
    let _147: &str;
    let mut _148: std::option::Option<&[usize]>;
    let mut _149: std::result::Result<&[usize], ()>;
    let mut _150: &[usize];
    let _151: &&str;
    let _152: &&str;
    let mut _153: bool;
    let mut _154: bool;
    let _156: !;
    let mut _157: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _158: (&&str, &&str);
    let mut _159: &&str;
    let _160: &str;
    let mut _161: std::option::Option<&[usize]>;
    let mut _162: std::result::Result<&[usize], ()>;
    let _163: &&str;
    let _164: &&str;
    let mut _165: bool;
    let mut _166: bool;
    let _168: !;
    let mut _169: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _170: (&&str, &&str);
    let mut _171: &&str;
    let _172: &str;
    let mut _173: std::option::Option<&[bool]>;
    let mut _174: &[bool];
    let mut _175: std::result::Result<&[bool], ()>;
    let mut _176: &[bool];
    let _177: &&str;
    let _178: &&str;
    let mut _179: bool;
    let mut _180: bool;
    let _182: !;
    let mut _183: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _184: (&&str, &&str);
    let mut _185: &&str;
    let _186: &str;
    let mut _187: std::option::Option<&[i32]>;
    let mut _188: &[i32];
    let mut _189: std::result::Result<&[i32], ()>;
    let _190: &&str;
    let _191: &&str;
    let mut _192: bool;
    let mut _193: bool;
    let _195: !;
    let mut _196: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _197: (&&str, &&str);
    let mut _198: &&str;
    let _199: &str;
    let mut _200: std::option::Option<&[(i32, ())]>;
    let mut _201: &[(i32, ())];
    let mut _202: std::result::Result<&[(i32, ())], ()>;
    let mut _203: &[(i32, ())];
    let _204: &&str;
    let _205: &&str;
    let mut _206: bool;
    let mut _207: bool;
    let _209: !;
    let mut _210: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _211: (&&str, &&str);
    let mut _212: &&str;
    let _213: &str;
    let mut _214: std::option::Option<&[usize]>;
    let mut _215: std::result::Result<&[usize], ()>;
    let mut _216: &[usize];
    let _217: &&str;
    let _218: &&str;
    let mut _219: bool;
    let mut _220: bool;
    let _222: !;
    let mut _223: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _224: (&&str, &&str);
    let mut _225: &&str;
    let _226: &str;
    let mut _227: std::option::Option<&[usize]>;
    let mut _228: std::result::Result<&[usize], ()>;
    let _229: &&str;
    let _230: &&str;
    let mut _231: bool;
    let mut _232: bool;
    let _234: !;
    let mut _235: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _236: (&&str, &&str);
    let mut _237: &&str;
    let _238: &str;
    let mut _239: std::option::Option<&[bool]>;
    let mut _240: &[bool];
    let mut _241: std::result::Result<&[bool], ()>;
    let mut _242: &[bool];
    let _243: &&str;
    let _244: &&str;
    let mut _245: bool;
    let mut _246: bool;
    let _248: !;
    let mut _249: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _250: (&&str, &&str);
    let mut _251: &&str;
    let _252: &str;
    let mut _253: std::option::Option<&[i32]>;
    let mut _254: &[i32];
    let mut _255: std::result::Result<&[i32], ()>;
    let _256: &&str;
    let _257: &&str;
    let mut _258: bool;
    let mut _259: bool;
    let _261: !;
    let mut _262: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _263: (&&str, &&str);
    let mut _264: &&str;
    let _265: &str;
    let mut _266: std::option::Option<&[(i32, ())]>;
    let mut _267: &[(i32, ())];
    let mut _268: std::result::Result<&[(i32, ())], ()>;
    let mut _269: &[(i32, ())];
    let _270: &&str;
    let _271: &&str;
    let mut _272: bool;
    let mut _273: bool;
    let _275: !;
    let mut _276: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _277: &&str;
    let mut _278: &[(i32, ()); 1];
    let mut _279: &[(i32, ()); 1];
    let mut _280: &&str;
    let mut _281: &[i32; 1];
    let mut _282: &&str;
    let mut _283: &[bool; 0];
    let mut _284: &[bool; 0];
    let mut _285: &&str;
    let mut _286: &&str;
    let mut _287: &[usize; 2];
    let mut _288: &&str;
    let mut _289: &[(i32, ()); 1];
    let mut _290: &[(i32, ()); 1];
    let mut _291: &&str;
    let mut _292: &[i32; 1];
    let mut _293: &&str;
    let mut _294: &[bool; 0];
    let mut _295: &[bool; 0];
    let mut _296: &&str;
    let mut _297: &&str;
    let mut _298: &[usize; 2];
    let mut _299: &&str;
    let mut _300: &[i32; 0];
    let mut _301: &[i32; 3];
    let mut _302: &&str;
    let mut _303: &[usize; 0];
    let mut _304: &[usize; 0];
    let mut _305: &&str;
    let mut _306: &[i32; 4];
    let mut _307: &[i32; 0];
    let mut _308: &&str;
    let mut _309: &[i32; 2];
    let mut _310: &[i32; 2];
    let mut _311: &&str;
    let mut _312: &[i32; 0];
    let mut _313: &[i32; 3];
    let mut _314: &&str;
    let mut _315: &[usize; 0];
    let mut _316: &[usize; 0];
    let mut _317: &&str;
    let mut _318: &[i32; 4];
    let mut _319: &[i32; 0];
    let mut _320: &&str;
    let mut _321: &[i32; 2];
    let mut _322: &[i32; 2];
    let mut _323: &&str;
    let mut _324: &[i32; 0];
    let mut _325: &[i32; 3];
    let mut _326: &&str;
    let mut _327: &[usize; 0];
    let mut _328: &[usize; 0];
    let mut _329: &&str;
    let mut _330: &[i32; 4];
    let mut _331: &[i32; 0];
    let mut _332: &&str;
    let mut _333: &[i32; 2];
    let mut _334: &[i32; 2];
    scope 1 {
        debug left_val => _6;
        debug right_val => _7;
        let _10: core::panicking::AssertKind;
        scope 2 {
            debug kind => _10;
        }
    }
    scope 3 {
        debug left_val => _18;
        debug right_val => _19;
        let _22: core::panicking::AssertKind;
        scope 4 {
            debug kind => _22;
        }
    }
    scope 5 {
        debug left_val => _30;
        debug right_val => _31;
        let _34: core::panicking::AssertKind;
        scope 6 {
            debug kind => _34;
        }
    }
    scope 7 {
        debug left_val => _42;
        debug right_val => _43;
        let _46: core::panicking::AssertKind;
        scope 8 {
            debug kind => _46;
        }
    }
    scope 9 {
        debug left_val => _54;
        debug right_val => _55;
        let _58: core::panicking::AssertKind;
        scope 10 {
            debug kind => _58;
        }
    }
    scope 11 {
        debug left_val => _66;
        debug right_val => _67;
        let _70: core::panicking::AssertKind;
        scope 12 {
            debug kind => _70;
        }
    }
    scope 13 {
        debug left_val => _78;
        debug right_val => _79;
        let _82: core::panicking::AssertKind;
        scope 14 {
            debug kind => _82;
        }
    }
    scope 15 {
        debug left_val => _90;
        debug right_val => _91;
        let _94: core::panicking::AssertKind;
        scope 16 {
            debug kind => _94;
        }
    }
    scope 17 {
        debug left_val => _102;
        debug right_val => _103;
        let _106: core::panicking::AssertKind;
        scope 18 {
            debug kind => _106;
        }
    }
    scope 19 {
        debug left_val => _114;
        debug right_val => _115;
        let _118: core::panicking::AssertKind;
        scope 20 {
            debug kind => _118;
        }
    }
    scope 21 {
        debug left_val => _126;
        debug right_val => _127;
        let _130: core::panicking::AssertKind;
        scope 22 {
            debug kind => _130;
        }
    }
    scope 23 {
        debug left_val => _138;
        debug right_val => _139;
        let _142: core::panicking::AssertKind;
        scope 24 {
            debug kind => _142;
        }
    }
    scope 25 {
        debug left_val => _151;
        debug right_val => _152;
        let _155: core::panicking::AssertKind;
        scope 26 {
            debug kind => _155;
        }
    }
    scope 27 {
        debug left_val => _163;
        debug right_val => _164;
        let _167: core::panicking::AssertKind;
        scope 28 {
            debug kind => _167;
        }
    }
    scope 29 {
        debug left_val => _177;
        debug right_val => _178;
        let _181: core::panicking::AssertKind;
        scope 30 {
            debug kind => _181;
        }
    }
    scope 31 {
        debug left_val => _190;
        debug right_val => _191;
        let _194: core::panicking::AssertKind;
        scope 32 {
            debug kind => _194;
        }
    }
    scope 33 {
        debug left_val => _204;
        debug right_val => _205;
        let _208: core::panicking::AssertKind;
        scope 34 {
            debug kind => _208;
        }
    }
    scope 35 {
        debug left_val => _217;
        debug right_val => _218;
        let _221: core::panicking::AssertKind;
        scope 36 {
            debug kind => _221;
        }
    }
    scope 37 {
        debug left_val => _229;
        debug right_val => _230;
        let _233: core::panicking::AssertKind;
        scope 38 {
            debug kind => _233;
        }
    }
    scope 39 {
        debug left_val => _243;
        debug right_val => _244;
        let _247: core::panicking::AssertKind;
        scope 40 {
            debug kind => _247;
        }
    }
    scope 41 {
        debug left_val => _256;
        debug right_val => _257;
        let _260: core::panicking::AssertKind;
        scope 42 {
            debug kind => _260;
        }
    }
    scope 43 {
        debug left_val => _270;
        debug right_val => _271;
        let _274: core::panicking::AssertKind;
        scope 44 {
            debug kind => _274;
        }
    }

    bb0: {
        _334 = const _;
        _4 = _334 as &[i32] (Pointer(Unsize));
        _333 = const _;
        _5 = _333 as &[i32] (Pointer(Unsize));
        _3 = match_vecs::<i32>(move _4, move _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _332 = const _;
        _1 = (move _2, _332);
        _6 = (_1.0: &&str);
        _7 = (_1.1: &&str);
        _9 = <&str as PartialEq>::eq(_6, _7) -> [return: bb2, unwind continue];
    }

    bb2: {
        _8 = Not(move _9);
        switchInt(move _8) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _10 = core::panicking::AssertKind::Eq;
        _12 = Option::<Arguments<'_>>::None;
        _11 = core::panicking::assert_failed::<&str, &str>(move _10, _6, _7, move _12) -> unwind continue;
    }

    bb4: {
        _331 = const _;
        _16 = _331 as &[i32] (Pointer(Unsize));
        _330 = const _;
        _17 = _330 as &[i32] (Pointer(Unsize));
        _15 = match_vecs::<i32>(move _16, move _17) -> [return: bb5, unwind continue];
    }

    bb5: {
        _14 = &_15;
        _329 = const _;
        _13 = (move _14, _329);
        _18 = (_13.0: &&str);
        _19 = (_13.1: &&str);
        _21 = <&str as PartialEq>::eq(_18, _19) -> [return: bb6, unwind continue];
    }

    bb6: {
        _20 = Not(move _21);
        switchInt(move _20) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<&str, &str>(move _22, _18, _19, move _24) -> unwind continue;
    }

    bb8: {
        _328 = const _;
        _28 = _328 as &[usize] (Pointer(Unsize));
        _327 = const _;
        _29 = _327 as &[usize] (Pointer(Unsize));
        _27 = match_vecs::<usize>(move _28, move _29) -> [return: bb9, unwind continue];
    }

    bb9: {
        _26 = &_27;
        _326 = const _;
        _25 = (move _26, _326);
        _30 = (_25.0: &&str);
        _31 = (_25.1: &&str);
        _33 = <&str as PartialEq>::eq(_30, _31) -> [return: bb10, unwind continue];
    }

    bb10: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<&str, &str>(move _34, _30, _31, move _36) -> unwind continue;
    }

    bb12: {
        _325 = const _;
        _40 = _325 as &[i32] (Pointer(Unsize));
        _324 = const _;
        _41 = _324 as &[i32] (Pointer(Unsize));
        _39 = match_vecs::<i32>(move _40, move _41) -> [return: bb13, unwind continue];
    }

    bb13: {
        _38 = &_39;
        _323 = const _;
        _37 = (move _38, _323);
        _42 = (_37.0: &&str);
        _43 = (_37.1: &&str);
        _45 = <&str as PartialEq>::eq(_42, _43) -> [return: bb14, unwind continue];
    }

    bb14: {
        _44 = Not(move _45);
        switchInt(move _44) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _46 = core::panicking::AssertKind::Eq;
        _48 = Option::<Arguments<'_>>::None;
        _47 = core::panicking::assert_failed::<&str, &str>(move _46, _42, _43, move _48) -> unwind continue;
    }

    bb16: {
        _322 = const _;
        _52 = _322 as &[i32] (Pointer(Unsize));
        _321 = const _;
        _53 = _321 as &[i32] (Pointer(Unsize));
        _51 = match_vecs_cons::<i32>(move _52, move _53) -> [return: bb17, unwind continue];
    }

    bb17: {
        _50 = &_51;
        _320 = const _;
        _49 = (move _50, _320);
        _54 = (_49.0: &&str);
        _55 = (_49.1: &&str);
        _57 = <&str as PartialEq>::eq(_54, _55) -> [return: bb18, unwind continue];
    }

    bb18: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<&str, &str>(move _58, _54, _55, move _60) -> unwind continue;
    }

    bb20: {
        _319 = const _;
        _64 = _319 as &[i32] (Pointer(Unsize));
        _318 = const _;
        _65 = _318 as &[i32] (Pointer(Unsize));
        _63 = match_vecs_cons::<i32>(move _64, move _65) -> [return: bb21, unwind continue];
    }

    bb21: {
        _62 = &_63;
        _317 = const _;
        _61 = (move _62, _317);
        _66 = (_61.0: &&str);
        _67 = (_61.1: &&str);
        _69 = <&str as PartialEq>::eq(_66, _67) -> [return: bb22, unwind continue];
    }

    bb22: {
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb24, otherwise: bb23];
    }

    bb23: {
        _70 = core::panicking::AssertKind::Eq;
        _72 = Option::<Arguments<'_>>::None;
        _71 = core::panicking::assert_failed::<&str, &str>(move _70, _66, _67, move _72) -> unwind continue;
    }

    bb24: {
        _316 = const _;
        _76 = _316 as &[usize] (Pointer(Unsize));
        _315 = const _;
        _77 = _315 as &[usize] (Pointer(Unsize));
        _75 = match_vecs_cons::<usize>(move _76, move _77) -> [return: bb25, unwind continue];
    }

    bb25: {
        _74 = &_75;
        _314 = const _;
        _73 = (move _74, _314);
        _78 = (_73.0: &&str);
        _79 = (_73.1: &&str);
        _81 = <&str as PartialEq>::eq(_78, _79) -> [return: bb26, unwind continue];
    }

    bb26: {
        _80 = Not(move _81);
        switchInt(move _80) -> [0: bb28, otherwise: bb27];
    }

    bb27: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<&str, &str>(move _82, _78, _79, move _84) -> unwind continue;
    }

    bb28: {
        _313 = const _;
        _88 = _313 as &[i32] (Pointer(Unsize));
        _312 = const _;
        _89 = _312 as &[i32] (Pointer(Unsize));
        _87 = match_vecs_cons::<i32>(move _88, move _89) -> [return: bb29, unwind continue];
    }

    bb29: {
        _86 = &_87;
        _311 = const _;
        _85 = (move _86, _311);
        _90 = (_85.0: &&str);
        _91 = (_85.1: &&str);
        _93 = <&str as PartialEq>::eq(_90, _91) -> [return: bb30, unwind continue];
    }

    bb30: {
        _92 = Not(move _93);
        switchInt(move _92) -> [0: bb32, otherwise: bb31];
    }

    bb31: {
        _94 = core::panicking::AssertKind::Eq;
        _96 = Option::<Arguments<'_>>::None;
        _95 = core::panicking::assert_failed::<&str, &str>(move _94, _90, _91, move _96) -> unwind continue;
    }

    bb32: {
        _310 = const _;
        _100 = _310 as &[i32] (Pointer(Unsize));
        _309 = const _;
        _101 = _309 as &[i32] (Pointer(Unsize));
        _99 = match_vecs_snoc::<i32>(move _100, move _101) -> [return: bb33, unwind continue];
    }

    bb33: {
        _98 = &_99;
        _308 = const _;
        _97 = (move _98, _308);
        _102 = (_97.0: &&str);
        _103 = (_97.1: &&str);
        _105 = <&str as PartialEq>::eq(_102, _103) -> [return: bb34, unwind continue];
    }

    bb34: {
        _104 = Not(move _105);
        switchInt(move _104) -> [0: bb36, otherwise: bb35];
    }

    bb35: {
        _106 = core::panicking::AssertKind::Eq;
        _108 = Option::<Arguments<'_>>::None;
        _107 = core::panicking::assert_failed::<&str, &str>(move _106, _102, _103, move _108) -> unwind continue;
    }

    bb36: {
        _307 = const _;
        _112 = _307 as &[i32] (Pointer(Unsize));
        _306 = const _;
        _113 = _306 as &[i32] (Pointer(Unsize));
        _111 = match_vecs_snoc::<i32>(move _112, move _113) -> [return: bb37, unwind continue];
    }

    bb37: {
        _110 = &_111;
        _305 = const _;
        _109 = (move _110, _305);
        _114 = (_109.0: &&str);
        _115 = (_109.1: &&str);
        _117 = <&str as PartialEq>::eq(_114, _115) -> [return: bb38, unwind continue];
    }

    bb38: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb40, otherwise: bb39];
    }

    bb39: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<&str, &str>(move _118, _114, _115, move _120) -> unwind continue;
    }

    bb40: {
        _304 = const _;
        _124 = _304 as &[usize] (Pointer(Unsize));
        _303 = const _;
        _125 = _303 as &[usize] (Pointer(Unsize));
        _123 = match_vecs_snoc::<usize>(move _124, move _125) -> [return: bb41, unwind continue];
    }

    bb41: {
        _122 = &_123;
        _302 = const _;
        _121 = (move _122, _302);
        _126 = (_121.0: &&str);
        _127 = (_121.1: &&str);
        _129 = <&str as PartialEq>::eq(_126, _127) -> [return: bb42, unwind continue];
    }

    bb42: {
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb44, otherwise: bb43];
    }

    bb43: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<&str, &str>(move _130, _126, _127, move _132) -> unwind continue;
    }

    bb44: {
        _301 = const _;
        _136 = _301 as &[i32] (Pointer(Unsize));
        _300 = const _;
        _137 = _300 as &[i32] (Pointer(Unsize));
        _135 = match_vecs_snoc::<i32>(move _136, move _137) -> [return: bb45, unwind continue];
    }

    bb45: {
        _134 = &_135;
        _299 = const _;
        _133 = (move _134, _299);
        _138 = (_133.0: &&str);
        _139 = (_133.1: &&str);
        _141 = <&str as PartialEq>::eq(_138, _139) -> [return: bb46, unwind continue];
    }

    bb46: {
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb48, otherwise: bb47];
    }

    bb47: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<&str, &str>(move _142, _138, _139, move _144) -> unwind continue;
    }

    bb48: {
        _148 = Option::<&[usize]>::None;
        _298 = const _;
        _150 = _298 as &[usize] (Pointer(Unsize));
        _149 = Result::<&[usize], ()>::Ok(move _150);
        _147 = match_nested_vecs_cons::<usize>(move _148, move _149) -> [return: bb49, unwind continue];
    }

    bb49: {
        _146 = &_147;
        _297 = const _;
        _145 = (move _146, _297);
        _151 = (_145.0: &&str);
        _152 = (_145.1: &&str);
        _154 = <&str as PartialEq>::eq(_151, _152) -> [return: bb50, unwind continue];
    }

    bb50: {
        _153 = Not(move _154);
        switchInt(move _153) -> [0: bb52, otherwise: bb51];
    }

    bb51: {
        _155 = core::panicking::AssertKind::Eq;
        _157 = Option::<Arguments<'_>>::None;
        _156 = core::panicking::assert_failed::<&str, &str>(move _155, _151, _152, move _157) -> unwind continue;
    }

    bb52: {
        _161 = Option::<&[usize]>::None;
        _162 = Result::<&[usize], ()>::Err(const ());
        _160 = match_nested_vecs_cons::<usize>(move _161, move _162) -> [return: bb53, unwind continue];
    }

    bb53: {
        _159 = &_160;
        _296 = const _;
        _158 = (move _159, _296);
        _163 = (_158.0: &&str);
        _164 = (_158.1: &&str);
        _166 = <&str as PartialEq>::eq(_163, _164) -> [return: bb54, unwind continue];
    }

    bb54: {
        _165 = Not(move _166);
        switchInt(move _165) -> [0: bb56, otherwise: bb55];
    }

    bb55: {
        _167 = core::panicking::AssertKind::Eq;
        _169 = Option::<Arguments<'_>>::None;
        _168 = core::panicking::assert_failed::<&str, &str>(move _167, _163, _164, move _169) -> unwind continue;
    }

    bb56: {
        _295 = const _;
        _174 = _295 as &[bool] (Pointer(Unsize));
        _173 = Option::<&[bool]>::Some(move _174);
        _294 = const _;
        _176 = _294 as &[bool] (Pointer(Unsize));
        _175 = Result::<&[bool], ()>::Ok(move _176);
        _172 = match_nested_vecs_cons::<bool>(move _173, move _175) -> [return: bb57, unwind continue];
    }

    bb57: {
        _171 = &_172;
        _293 = const _;
        _170 = (move _171, _293);
        _177 = (_170.0: &&str);
        _178 = (_170.1: &&str);
        _180 = <&str as PartialEq>::eq(_177, _178) -> [return: bb58, unwind continue];
    }

    bb58: {
        _179 = Not(move _180);
        switchInt(move _179) -> [0: bb60, otherwise: bb59];
    }

    bb59: {
        _181 = core::panicking::AssertKind::Eq;
        _183 = Option::<Arguments<'_>>::None;
        _182 = core::panicking::assert_failed::<&str, &str>(move _181, _177, _178, move _183) -> unwind continue;
    }

    bb60: {
        _292 = const _;
        _188 = _292 as &[i32] (Pointer(Unsize));
        _187 = Option::<&[i32]>::Some(move _188);
        _189 = Result::<&[i32], ()>::Err(const ());
        _186 = match_nested_vecs_cons::<i32>(move _187, move _189) -> [return: bb61, unwind continue];
    }

    bb61: {
        _185 = &_186;
        _291 = const _;
        _184 = (move _185, _291);
        _190 = (_184.0: &&str);
        _191 = (_184.1: &&str);
        _193 = <&str as PartialEq>::eq(_190, _191) -> [return: bb62, unwind continue];
    }

    bb62: {
        _192 = Not(move _193);
        switchInt(move _192) -> [0: bb64, otherwise: bb63];
    }

    bb63: {
        _194 = core::panicking::AssertKind::Eq;
        _196 = Option::<Arguments<'_>>::None;
        _195 = core::panicking::assert_failed::<&str, &str>(move _194, _190, _191, move _196) -> unwind continue;
    }

    bb64: {
        _290 = const _;
        _201 = _290 as &[(i32, ())] (Pointer(Unsize));
        _200 = Option::<&[(i32, ())]>::Some(move _201);
        _289 = const _;
        _203 = _289 as &[(i32, ())] (Pointer(Unsize));
        _202 = Result::<&[(i32, ())], ()>::Ok(move _203);
        _199 = match_nested_vecs_cons::<(i32, ())>(move _200, move _202) -> [return: bb65, unwind continue];
    }

    bb65: {
        _198 = &_199;
        _288 = const _;
        _197 = (move _198, _288);
        _204 = (_197.0: &&str);
        _205 = (_197.1: &&str);
        _207 = <&str as PartialEq>::eq(_204, _205) -> [return: bb66, unwind continue];
    }

    bb66: {
        _206 = Not(move _207);
        switchInt(move _206) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _208 = core::panicking::AssertKind::Eq;
        _210 = Option::<Arguments<'_>>::None;
        _209 = core::panicking::assert_failed::<&str, &str>(move _208, _204, _205, move _210) -> unwind continue;
    }

    bb68: {
        _214 = Option::<&[usize]>::None;
        _287 = const _;
        _216 = _287 as &[usize] (Pointer(Unsize));
        _215 = Result::<&[usize], ()>::Ok(move _216);
        _213 = match_nested_vecs_snoc::<usize>(move _214, move _215) -> [return: bb69, unwind continue];
    }

    bb69: {
        _212 = &_213;
        _286 = const _;
        _211 = (move _212, _286);
        _217 = (_211.0: &&str);
        _218 = (_211.1: &&str);
        _220 = <&str as PartialEq>::eq(_217, _218) -> [return: bb70, unwind continue];
    }

    bb70: {
        _219 = Not(move _220);
        switchInt(move _219) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _221 = core::panicking::AssertKind::Eq;
        _223 = Option::<Arguments<'_>>::None;
        _222 = core::panicking::assert_failed::<&str, &str>(move _221, _217, _218, move _223) -> unwind continue;
    }

    bb72: {
        _227 = Option::<&[usize]>::None;
        _228 = Result::<&[usize], ()>::Err(const ());
        _226 = match_nested_vecs_snoc::<usize>(move _227, move _228) -> [return: bb73, unwind continue];
    }

    bb73: {
        _225 = &_226;
        _285 = const _;
        _224 = (move _225, _285);
        _229 = (_224.0: &&str);
        _230 = (_224.1: &&str);
        _232 = <&str as PartialEq>::eq(_229, _230) -> [return: bb74, unwind continue];
    }

    bb74: {
        _231 = Not(move _232);
        switchInt(move _231) -> [0: bb76, otherwise: bb75];
    }

    bb75: {
        _233 = core::panicking::AssertKind::Eq;
        _235 = Option::<Arguments<'_>>::None;
        _234 = core::panicking::assert_failed::<&str, &str>(move _233, _229, _230, move _235) -> unwind continue;
    }

    bb76: {
        _284 = const _;
        _240 = _284 as &[bool] (Pointer(Unsize));
        _239 = Option::<&[bool]>::Some(move _240);
        _283 = const _;
        _242 = _283 as &[bool] (Pointer(Unsize));
        _241 = Result::<&[bool], ()>::Ok(move _242);
        _238 = match_nested_vecs_snoc::<bool>(move _239, move _241) -> [return: bb77, unwind continue];
    }

    bb77: {
        _237 = &_238;
        _282 = const _;
        _236 = (move _237, _282);
        _243 = (_236.0: &&str);
        _244 = (_236.1: &&str);
        _246 = <&str as PartialEq>::eq(_243, _244) -> [return: bb78, unwind continue];
    }

    bb78: {
        _245 = Not(move _246);
        switchInt(move _245) -> [0: bb80, otherwise: bb79];
    }

    bb79: {
        _247 = core::panicking::AssertKind::Eq;
        _249 = Option::<Arguments<'_>>::None;
        _248 = core::panicking::assert_failed::<&str, &str>(move _247, _243, _244, move _249) -> unwind continue;
    }

    bb80: {
        _281 = const _;
        _254 = _281 as &[i32] (Pointer(Unsize));
        _253 = Option::<&[i32]>::Some(move _254);
        _255 = Result::<&[i32], ()>::Err(const ());
        _252 = match_nested_vecs_snoc::<i32>(move _253, move _255) -> [return: bb81, unwind continue];
    }

    bb81: {
        _251 = &_252;
        _280 = const _;
        _250 = (move _251, _280);
        _256 = (_250.0: &&str);
        _257 = (_250.1: &&str);
        _259 = <&str as PartialEq>::eq(_256, _257) -> [return: bb82, unwind continue];
    }

    bb82: {
        _258 = Not(move _259);
        switchInt(move _258) -> [0: bb84, otherwise: bb83];
    }

    bb83: {
        _260 = core::panicking::AssertKind::Eq;
        _262 = Option::<Arguments<'_>>::None;
        _261 = core::panicking::assert_failed::<&str, &str>(move _260, _256, _257, move _262) -> unwind continue;
    }

    bb84: {
        _279 = const _;
        _267 = _279 as &[(i32, ())] (Pointer(Unsize));
        _266 = Option::<&[(i32, ())]>::Some(move _267);
        _278 = const _;
        _269 = _278 as &[(i32, ())] (Pointer(Unsize));
        _268 = Result::<&[(i32, ())], ()>::Ok(move _269);
        _265 = match_nested_vecs_snoc::<(i32, ())>(move _266, move _268) -> [return: bb85, unwind continue];
    }

    bb85: {
        _264 = &_265;
        _277 = const _;
        _263 = (move _264, _277);
        _270 = (_263.0: &&str);
        _271 = (_263.1: &&str);
        _273 = <&str as PartialEq>::eq(_270, _271) -> [return: bb86, unwind continue];
    }

    bb86: {
        _272 = Not(move _273);
        switchInt(move _272) -> [0: bb88, otherwise: bb87];
    }

    bb87: {
        _274 = core::panicking::AssertKind::Eq;
        _276 = Option::<Arguments<'_>>::None;
        _275 = core::panicking::assert_failed::<&str, &str>(move _274, _270, _271, move _276) -> unwind continue;
    }

    bb88: {
        return;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Some(non-empty), any";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[(i32, ()); 1] = {
    let mut _0: &[(i32, ()); 1];
    let mut _1: [(i32, ()); 1];
    let mut _2: (i32, ());
    let mut _3: ();

    bb0: {
        _3 = ();
        _2 = (const 1_i32, move _3);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[(i32, ()); 1] = {
    let mut _0: &[(i32, ()); 1];
    let mut _1: [(i32, ()); 1];
    let mut _2: (i32, ());
    let mut _3: ();

    bb0: {
        _3 = ();
        _2 = (const 42_i32, move _3);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Some(non-empty), any";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 1_i32];
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Some(empty), Ok(empty)";
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];
    let mut _1: [bool; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];
    let mut _1: [bool; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "None, Ok(less than one element)";
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "None, Ok(at least two elements)";
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &[usize; 2] = {
    let mut _0: &[usize; 2];
    let mut _1: [usize; 2];

    bb0: {
        _1 = [const 4_usize, const 2_usize];
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Some(non-empty), any";
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &[(i32, ()); 1] = {
    let mut _0: &[(i32, ()); 1];
    let mut _1: [(i32, ()); 1];
    let mut _2: (i32, ());
    let mut _3: ();

    bb0: {
        _3 = ();
        _2 = (const 1_i32, move _3);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &[(i32, ()); 1] = {
    let mut _0: &[(i32, ()); 1];
    let mut _1: [(i32, ()); 1];
    let mut _2: (i32, ());
    let mut _3: ();

    bb0: {
        _3 = ();
        _2 = (const 42_i32, move _3);
        _1 = [move _2];
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Some(non-empty), any";
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &[i32; 1] = {
    let mut _0: &[i32; 1];
    let mut _1: [i32; 1];

    bb0: {
        _1 = [const 1_i32];
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "Some(empty), Ok(empty)";
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];
    let mut _1: [bool; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &[bool; 0] = {
    let mut _0: &[bool; 0];
    let mut _1: [bool; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "None, Ok(less than one element)";
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "None, Ok(at least two elements)";
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &[usize; 2] = {
    let mut _0: &[usize; 2];
    let mut _1: [usize; 2];

    bb0: {
        _1 = [const 4_usize, const 2_usize];
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "one empty";
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];
    let mut _1: [i32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "both empty";
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];
    let mut _1: [usize; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];
    let mut _1: [usize; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "one empty";
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];
    let mut _1: [i32; 4];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];
    let mut _1: [i32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "both non-empty";
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "one empty";
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];
    let mut _1: [i32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "both empty";
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];
    let mut _1: [usize; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];
    let mut _1: [usize; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "one empty";
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];
    let mut _1: [i32; 4];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];
    let mut _1: [i32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "both non-empty";
        _0 = &_1;
        return;
    }
}

promoted[44] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[45] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}

promoted[46] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "one empty";
        _0 = &_1;
        return;
    }
}

promoted[47] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];
    let mut _1: [i32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[48] in main: &[i32; 3] = {
    let mut _0: &[i32; 3];
    let mut _1: [i32; 3];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[49] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "both empty";
        _0 = &_1;
        return;
    }
}

promoted[50] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];
    let mut _1: [usize; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[51] in main: &[usize; 0] = {
    let mut _0: &[usize; 0];
    let mut _1: [usize; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[52] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "one empty";
        _0 = &_1;
        return;
    }
}

promoted[53] in main: &[i32; 4] = {
    let mut _0: &[i32; 4];
    let mut _1: [i32; 4];

    bb0: {
        _1 = [const 1_i32, const 2_i32, const 3_i32, const 4_i32];
        _0 = &_1;
        return;
    }
}

promoted[54] in main: &[i32; 0] = {
    let mut _0: &[i32; 0];
    let mut _1: [i32; 0];

    bb0: {
        _1 = [];
        _0 = &_1;
        return;
    }
}

promoted[55] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "both non-empty";
        _0 = &_1;
        return;
    }
}

promoted[56] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 2_i32, const 3_i32];
        _0 = &_1;
        return;
    }
}

promoted[57] in main: &[i32; 2] = {
    let mut _0: &[i32; 2];
    let mut _1: [i32; 2];

    bb0: {
        _1 = [const 1_i32, const 2_i32];
        _0 = &_1;
        return;
    }
}
