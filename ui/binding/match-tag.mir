// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn process(_1: color) -> isize {
    debug c => _1;
    let mut _0: isize;
    let mut _2: isize;
    let mut _3: isize;
    scope 1 {
        debug x => _2;
        let _4: isize;
        let _5: isize;
        let _6: isize;
        scope 2 {
            debug r => _4;
        }
        scope 3 {
            debug a => _5;
        }
        scope 4 {
            debug s => _6;
        }
    }

    bb0: {
        _3 = discriminant(_1);
        switchInt(move _3) -> [0: bb3, 1: bb4, 2: bb1, otherwise: bb2];
    }

    bb1: {
        _6 = ((_1 as hsl).1: isize);
        _2 = _6;
        goto -> bb5;
    }

    bb2: {
        unreachable;
    }

    bb3: {
        _4 = ((_1 as rgb).0: isize);
        _2 = _4;
        goto -> bb5;
    }

    bb4: {
        _5 = ((_1 as rgba).3: isize);
        _2 = _5;
        goto -> bb5;
    }

    bb5: {
        _0 = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: color;
    let mut _4: (&isize, &isize);
    let mut _5: &isize;
    let _6: isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: isize;
    let mut _12: isize;
    let _14: !;
    let mut _15: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _16: (&isize, &isize);
    let mut _17: &isize;
    let _18: isize;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: isize;
    let mut _24: isize;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _28: (&isize, &isize);
    let mut _29: &isize;
    let _30: isize;
    let mut _33: bool;
    let mut _34: bool;
    let mut _35: isize;
    let mut _36: isize;
    let _38: !;
    let mut _39: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug gray => _1;
        let _2: color;
        scope 2 {
            debug clear => _2;
            let _3: color;
            scope 3 {
                debug red => _3;
                let _7: &isize;
                let _8: &isize;
                let _19: &isize;
                let _20: &isize;
                let _31: &isize;
                let _32: &isize;
                let mut _40: &isize;
                let mut _41: &isize;
                let mut _42: &isize;
                scope 4 {
                    debug left_val => _7;
                    debug right_val => _8;
                    let _13: core::panicking::AssertKind;
                    scope 5 {
                        debug kind => _13;
                    }
                }
                scope 6 {
                    debug left_val => _19;
                    debug right_val => _20;
                    let _25: core::panicking::AssertKind;
                    scope 7 {
                        debug kind => _25;
                    }
                }
                scope 8 {
                    debug left_val => _31;
                    debug right_val => _32;
                    let _37: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _37;
                    }
                }
            }
        }
    }

    bb0: {
        _1 = color::rgb(const 127_isize, const 127_isize, const 127_isize);
        _2 = color::rgba(const 50_isize, const 150_isize, const 250_isize, const 0_isize);
        _3 = color::hsl(const 0_isize, const 255_isize, const 255_isize);
        _6 = process(move _1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = &_6;
        _42 = const _;
        _4 = (move _5, _42);
        _7 = (_4.0: &isize);
        _8 = (_4.1: &isize);
        _11 = (*_7);
        _12 = (*_8);
        _10 = Eq(move _11, move _12);
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _13 = core::panicking::AssertKind::Eq;
        _15 = Option::<Arguments<'_>>::None;
        _14 = core::panicking::assert_failed::<isize, isize>(move _13, _7, _8, move _15) -> unwind continue;
    }

    bb3: {
        _18 = process(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        _17 = &_18;
        _41 = const _;
        _16 = (move _17, _41);
        _19 = (_16.0: &isize);
        _20 = (_16.1: &isize);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<isize, isize>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb6: {
        _30 = process(move _3) -> [return: bb7, unwind continue];
    }

    bb7: {
        _29 = &_30;
        _40 = const _;
        _28 = (move _29, _40);
        _31 = (_28.0: &isize);
        _32 = (_28.1: &isize);
        _35 = (*_31);
        _36 = (*_32);
        _34 = Eq(move _35, move _36);
        _33 = Not(move _34);
        switchInt(move _33) -> [0: bb9, otherwise: bb8];
    }

    bb8: {
        _37 = core::panicking::AssertKind::Eq;
        _39 = Option::<Arguments<'_>>::None;
        _38 = core::panicking::assert_failed::<isize, isize>(move _37, _31, _32, move _39) -> unwind continue;
    }

    bb9: {
        return;
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 255_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 0_isize;
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 127_isize;
        _0 = &_1;
        return;
    }
}

fn color::rgb(_1: isize, _2: isize, _3: isize) -> color {
    let mut _0: color;

    bb0: {
        _0 = color::rgb(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn color::rgb(_1: isize, _2: isize, _3: isize) -> color {
    let mut _0: color;

    bb0: {
        _0 = color::rgb(move _1, move _2, move _3);
        return;
    }
}

fn color::rgba(_1: isize, _2: isize, _3: isize, _4: isize) -> color {
    let mut _0: color;

    bb0: {
        _0 = color::rgba(move _1, move _2, move _3, move _4);
        return;
    }
}

// MIR FOR CTFE
fn color::rgba(_1: isize, _2: isize, _3: isize, _4: isize) -> color {
    let mut _0: color;

    bb0: {
        _0 = color::rgba(move _1, move _2, move _3, move _4);
        return;
    }
}

fn color::hsl(_1: isize, _2: isize, _3: isize) -> color {
    let mut _0: color;

    bb0: {
        _0 = color::hsl(move _1, move _2, move _3);
        return;
    }
}

// MIR FOR CTFE
fn color::hsl(_1: isize, _2: isize, _3: isize) -> color {
    let mut _0: color;

    bb0: {
        _0 = color::hsl(move _1, move _2, move _3);
        return;
    }
}
