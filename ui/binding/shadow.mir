// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo(_1: Vec<isize>) -> () {
    debug c => _1;                       // in scope 0 at ui/binding/shadow.rs:5:8: 5:9
    let mut _0: ();                      // return place in scope 0 at ui/binding/shadow.rs:5:24: 5:24
    let _2: isize;                       // in scope 0 at ui/binding/shadow.rs:6:9: 6:10
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/binding/shadow.rs:6:9: 6:10
        let mut _3: std::vec::Vec<isize>; // in scope 1 at ui/binding/shadow.rs:7:9: 7:14
        scope 2 {
            debug b => _3;               // in scope 2 at ui/binding/shadow.rs:7:9: 7:14
            let mut _4: std::slice::Iter<'_, isize>; // in scope 2 at ui/binding/shadow.rs:12:23: 12:25
            scope 3 {
                debug iter => _4;        // in scope 3 at ui/binding/shadow.rs:12:23: 12:25
                let _5: &isize;          // in scope 3 at ui/binding/shadow.rs:12:17: 12:19
                scope 4 {
                    debug _i => _5;      // in scope 4 at ui/binding/shadow.rs:12:17: 12:19
                    let _6: isize;       // in scope 4 at ui/binding/shadow.rs:14:21: 14:22
                    scope 5 {
                        debug a => _6;   // in scope 5 at ui/binding/shadow.rs:14:21: 14:22
                    }
                }
            }
        }
    }

    bb0: {
        _2 = const 5_isize;              // scope 0 at ui/binding/shadow.rs:6:20: 6:21
        _3 = Vec::<isize>::new() -> [return: bb1, unwind: bb4]; // scope 1 at ui/binding/shadow.rs:7:29: 7:39
                                         // mir::Constant
                                         // + span: ui/binding/shadow.rs:7:29: 7:37
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn() -> Vec<isize> {Vec::<isize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_3) -> [return: bb2, unwind: bb4]; // scope 1 at ui/binding/shadow.rs:20:1: 20:2
    }

    bb2: {
        drop(_1) -> bb3;                 // scope 0 at ui/binding/shadow.rs:20:1: 20:2
    }

    bb3: {
        return;                          // scope 0 at ui/binding/shadow.rs:20:2: 20:2
    }

    bb4 (cleanup): {
        drop(_1) -> bb5;                 // scope 0 at ui/binding/shadow.rs:20:1: 20:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/binding/shadow.rs:5:1: 20:2
    }
}

promoted[0] in foo: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/binding/shadow.rs:13:26: 13:30
    let mut _1: [&str; 2];               // in scope 0 at ui/binding/shadow.rs:13:26: 13:30

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/binding/shadow.rs:13:26: 13:30
                                         // mir::Constant
                                         // + span: ui/binding/shadow.rs:13:26: 13:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/binding/shadow.rs:13:26: 13:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/binding/shadow.rs:13:26: 13:30
        return;                          // scope 0 at ui/binding/shadow.rs:13:26: 13:30
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/binding/shadow.rs:24:15: 24:15
    let _1: i32;                         // in scope 0 at ui/binding/shadow.rs:24:21: 24:22
    let mut _3: (i32, bool);             // in scope 0 at ui/binding/shadow.rs:24:37: 24:43
    let mut _4: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _5: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _6: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _10: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _11: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _12: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _14: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _15: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _18: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _19: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _21: ();                         // in scope 0 at ui/binding/shadow.rs:24:64: 24:79
    let mut _22: std::vec::Vec<isize>;   // in scope 0 at ui/binding/shadow.rs:24:68: 24:78
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/binding/shadow.rs:24:21: 24:22
        let _2: i32;                     // in scope 1 at ui/binding/shadow.rs:24:33: 24:34
        scope 2 {
            debug x => _2;               // in scope 2 at ui/binding/shadow.rs:24:33: 24:34
            let _7: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _8: &i32;                // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _23: &i32;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _7;    // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _8;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _13: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _13;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _1 = const 10_i32;               // scope 0 at ui/binding/shadow.rs:24:25: 24:27
        _3 = const (30_i32, false);      // scope 1 at ui/binding/shadow.rs:24:37: 24:43
        _2 = move (_3.0: i32);           // scope 1 at ui/binding/shadow.rs:24:37: 24:43
        _5 = &_2;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _23 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _23;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _4 = (move _5, move _6);         // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _7 = (_4.0: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _8 = (_4.1: &i32);               // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _11 = (*_7);                     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _12 = const 30_i32;              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _10 = Eq(move _11, move _12);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _9 = Not(move _10);              // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _9) -> [0: bb2, otherwise: bb1]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb1: {
        _13 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _17 = _7;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _16 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _19 = _8;                        // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _20 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _14 = core::panicking::assert_failed::<i32, i32>(move _15, move _16, move _18, move _20); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb2: {
        _22 = Vec::<isize>::new() -> bb3; // scope 2 at ui/binding/shadow.rs:24:68: 24:78
                                         // mir::Constant
                                         // + span: ui/binding/shadow.rs:24:68: 24:76
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<isize> {Vec::<isize>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = foo(move _22) -> bb4;      // scope 2 at ui/binding/shadow.rs:24:64: 24:79
                                         // mir::Constant
                                         // + span: ui/binding/shadow.rs:24:64: 24:67
                                         // + literal: Const { ty: fn(Vec<isize>) {foo}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/binding/shadow.rs:24:82: 24:82
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/binding/shadow.rs:24:59: 24:61

    bb0: {
        _1 = const 30_i32;               // scope 0 at ui/binding/shadow.rs:24:59: 24:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn t::some(_1: T) -> t<T> {
    let mut _0: t<T>;                    // return place in scope 0 at ui/binding/shadow.rs:22:19: 22:23

    bb0: {
        _0 = t::<T>::some(move _1);      // scope 0 at ui/binding/shadow.rs:22:19: 22:23
        return;                          // scope 0 at ui/binding/shadow.rs:22:19: 22:23
    }
}

// MIR FOR CTFE
fn t::some(_1: T) -> t<T> {
    let mut _0: t<T>;                    // return place in scope 0 at ui/binding/shadow.rs:22:19: 22:23

    bb0: {
        _0 = t::<T>::some(move _1);      // scope 0 at ui/binding/shadow.rs:22:19: 22:23
        return;                          // scope 0 at ui/binding/shadow.rs:22:19: 22:23
    }
}
