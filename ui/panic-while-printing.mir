// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/panic-while-printing.rs:13:1: 13:19>::fmt(_1: &A, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug _f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let mut _3: !;

    bb0: {
        _3 = begin_panic::<&str>(const "explicit panic") -> unwind continue;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::option::Option<std::sync::Arc<std::sync::Mutex<std::vec::Vec<u8>>>>;
    let mut _2: std::option::Option<std::sync::Arc<std::sync::Mutex<std::vec::Vec<u8>>>>;
    let mut _3: std::sync::Arc<std::sync::Mutex<std::vec::Vec<u8>>>;
    let mut _4: std::sync::Mutex<std::vec::Vec<u8>>;
    let mut _5: std::vec::Vec<u8>;
    let mut _6: bool;
    let mut _7: bool;
    let mut _8: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let _9: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>;
    let mut _10: !;

    bb0: {
        _5 = Vec::<u8>::new() -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = Mutex::<Vec<u8>>::new(move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _3 = Arc::<Mutex<Vec<u8>>>::new(move _4) -> [return: bb3, unwind continue];
    }

    bb3: {
        _2 = Option::<Arc<Mutex<Vec<u8>>>>::Some(move _3);
        _1 = set_output_capture(move _2) -> [return: bb4, unwind continue];
    }

    bb4: {
        drop(_1) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = catch_unwind::<[closure@ui/panic-while-printing.rs:21:38: 21:40], ()>(const ZeroSized: [closure@ui/panic-while-printing.rs:21:38: 21:40]) -> [return: bb6, unwind continue];
    }

    bb6: {
        _8 = &_9;
        _7 = Result::<(), Box<dyn Any + Send>>::is_err(move _8) -> [return: bb7, unwind: bb11];
    }

    bb7: {
        _6 = Not(move _7);
        drop(_9) -> [return: bb8, unwind continue];
    }

    bb8: {
        switchInt(move _6) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _10 = core::panicking::panic(const "assertion failed: std::panic::catch_unwind(|| { eprintln!(\\\"{}\\\", A); }).is_err()") -> unwind continue;
    }

    bb10: {
        return;
    }

    bb11 (cleanup): {
        drop(_9) -> [return: bb12, unwind terminate];
    }

    bb12 (cleanup): {
        resume;
    }
}

fn main::{closure#0}(_1: [closure@ui/panic-while-printing.rs:21:38: 21:40]) -> () {
    let mut _0: ();
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &A;
    let mut _10: &[&str; 2];

    bb0: {
        _10 = const _;
        _4 = _10 as &[&str] (Pointer(Unsize));
        _9 = const _;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<A>(_9) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = _eprint(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main::{closure#0}: &A = {
    let mut _0: &A;
    let mut _1: A;

    bb0: {
        _1 = A;
        _0 = &_1;
        return;
    }
}

promoted[1] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}
