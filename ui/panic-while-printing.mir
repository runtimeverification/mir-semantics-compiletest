// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/panic-while-printing.rs:13:1: 13:19>::fmt(_1: &A, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/panic-while-printing.rs:14:12: 14:17
    debug _f => _2;                      // in scope 0 at ui/panic-while-printing.rs:14:19: 14:21
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/panic-while-printing.rs:14:46: 14:57
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _3 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/panic-while-printing.rs:19:11: 19:11
    let _1: std::option::Option<std::sync::Arc<std::sync::Mutex<std::vec::Vec<u8>>>>; // in scope 0 at ui/panic-while-printing.rs:20:5: 20:63
    let mut _2: std::option::Option<std::sync::Arc<std::sync::Mutex<std::vec::Vec<u8>>>>; // in scope 0 at ui/panic-while-printing.rs:20:24: 20:62
    let mut _3: std::sync::Arc<std::sync::Mutex<std::vec::Vec<u8>>>; // in scope 0 at ui/panic-while-printing.rs:20:29: 20:61
    let mut _4: std::sync::Mutex<std::vec::Vec<u8>>; // in scope 0 at ui/panic-while-printing.rs:20:38: 20:60
    let mut _5: std::vec::Vec<u8>;       // in scope 0 at ui/panic-while-printing.rs:20:49: 20:59
    let mut _6: bool;                    // in scope 0 at ui/panic-while-printing.rs:21:5: 24:15
    let mut _7: bool;                    // in scope 0 at ui/panic-while-printing.rs:21:13: 24:14
    let mut _8: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/panic-while-printing.rs:21:13: 24:14
    let _9: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/panic-while-printing.rs:21:13: 23:7
    let mut _10: [closure@ui/panic-while-printing.rs:21:38: 21:40]; // in scope 0 at ui/panic-while-printing.rs:21:38: 23:6
    let mut _11: !;                      // in scope 0 at ui/panic-while-printing.rs:21:5: 24:15

    bb0: {
        _5 = Vec::<u8>::new() -> bb1;    // scope 0 at ui/panic-while-printing.rs:20:49: 20:59
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:20:49: 20:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn() -> Vec<u8> {Vec::<u8>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = Mutex::<Vec<u8>>::new(move _5) -> bb2; // scope 0 at ui/panic-while-printing.rs:20:38: 20:60
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:20:38: 20:48
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Vec<u8>) -> Mutex<Vec<u8>> {Mutex::<Vec<u8>>::new}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Arc::<Mutex<Vec<u8>>>::new(move _4) -> bb3; // scope 0 at ui/panic-while-printing.rs:20:29: 20:61
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:20:29: 20:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Mutex<Vec<u8>>) -> Arc<Mutex<Vec<u8>>> {Arc::<Mutex<Vec<u8>>>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = Option::<Arc<Mutex<Vec<u8>>>>::Some(move _3); // scope 0 at ui/panic-while-printing.rs:20:24: 20:62
        _1 = set_output_capture(move _2) -> bb4; // scope 0 at ui/panic-while-printing.rs:20:5: 20:63
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:20:5: 20:23
                                         // + literal: Const { ty: fn(Option<Arc<Mutex<Vec<u8>>>>) -> Option<Arc<Mutex<Vec<u8>>>> {set_output_capture}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/panic-while-printing.rs:20:63: 20:64
    }

    bb5: {
        _9 = catch_unwind::<[closure@ui/panic-while-printing.rs:21:38: 21:40], ()>(move _10) -> bb6; // scope 0 at ui/panic-while-printing.rs:21:13: 23:7
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:21:13: 21:37
                                         // + literal: Const { ty: fn([closure@ui/panic-while-printing.rs:21:38: 21:40]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/panic-while-printing.rs:21:38: 21:40], ()>}, val: Value(<ZST>) }
    }

    bb6: {
        _8 = &_9;                        // scope 0 at ui/panic-while-printing.rs:21:13: 24:14
        _7 = Result::<(), Box<dyn Any + Send>>::is_err(move _8) -> [return: bb7, unwind: bb11]; // scope 0 at ui/panic-while-printing.rs:21:13: 24:14
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:24:6: 24:12
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb7: {
        _6 = Not(move _7);               // scope 0 at ui/panic-while-printing.rs:21:5: 24:15
        drop(_9) -> bb8;                 // scope 0 at ui/panic-while-printing.rs:24:14: 24:15
    }

    bb8: {
        switchInt(move _6) -> [0: bb10, otherwise: bb9]; // scope 0 at ui/panic-while-printing.rs:21:5: 24:15
    }

    bb9: {
        _11 = core::panicking::panic(const "assertion failed: std::panic::catch_unwind(|| { eprintln!(\\\"{}\\\", A); }).is_err()"); // scope 0 at ui/panic-while-printing.rs:21:5: 24:15
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:21:5: 24:15
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb10: {
        return;                          // scope 0 at ui/panic-while-printing.rs:25:2: 25:2
    }

    bb11 (cleanup): {
        drop(_9) -> bb12;                // scope 0 at ui/panic-while-printing.rs:24:14: 24:15
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/panic-while-printing.rs:19:1: 25:2
    }
}

fn main::{closure#0}(_1: [closure@ui/panic-while-printing.rs:21:38: 21:40]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/panic-while-printing.rs:21:41: 21:41
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _4: &[&str];                 // in scope 0 at ui/panic-while-printing.rs:22:19: 22:23
    let mut _5: &[&str; 2];              // in scope 0 at ui/panic-while-printing.rs:22:19: 22:23
    let _6: &[&str; 2];                  // in scope 0 at ui/panic-while-printing.rs:22:19: 22:23
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _9: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _10: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/panic-while-printing.rs:22:25: 22:26
    let mut _12: &A;                     // in scope 0 at ui/panic-while-printing.rs:22:25: 22:26
    let _13: &A;                         // in scope 0 at ui/panic-while-printing.rs:22:25: 22:26
    let mut _14: &A;                     // in scope 0 at ui/panic-while-printing.rs:22:25: 22:26
    let mut _15: &[&str; 2];             // in scope 0 at ui/panic-while-printing.rs:22:19: 22:23

    bb0: {
        _15 = const _;                   // scope 0 at ui/panic-while-printing.rs:22:19: 22:23
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:22:19: 22:23
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[1])) }
        _6 = _15;                        // scope 0 at ui/panic-while-printing.rs:22:19: 22:23
        _5 = _6;                         // scope 0 at ui/panic-while-printing.rs:22:19: 22:23
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 0 at ui/panic-while-printing.rs:22:19: 22:23
        _14 = const _;                   // scope 0 at ui/panic-while-printing.rs:22:25: 22:26
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:22:25: 22:26
                                         // + literal: Const { ty: &A, val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _13 = _14;                       // scope 0 at ui/panic-while-printing.rs:22:25: 22:26
        _12 = _13;                       // scope 0 at ui/panic-while-printing.rs:22:25: 22:26
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<A>(move _12) -> bb1; // scope 0 at ui/panic-while-printing.rs:22:25: 22:26
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:22:25: 22:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b A) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<A>}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = [move _11];                // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _9 = &_10;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = _eprint(move _3) -> bb3;    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:28
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_eprint}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/panic-while-printing.rs:23:6: 23:6
    }
}

promoted[0] in main::{closure#0}: &A = {
    let mut _0: &A;                      // return place in scope 0 at ui/panic-while-printing.rs:22:25: 22:26
    let mut _1: A;                       // in scope 0 at ui/panic-while-printing.rs:22:25: 22:26

    bb0: {
        _1 = A;                          // scope 0 at ui/panic-while-printing.rs:22:25: 22:26
        _0 = &_1;                        // scope 0 at ui/panic-while-printing.rs:22:25: 22:26
        return;                          // scope 0 at ui/panic-while-printing.rs:22:25: 22:26
    }
}

promoted[1] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/panic-while-printing.rs:22:19: 22:23
    let mut _1: [&str; 2];               // in scope 0 at ui/panic-while-printing.rs:22:19: 22:23

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/panic-while-printing.rs:22:19: 22:23
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:22:19: 22:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/panic-while-printing.rs:22:19: 22:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/panic-while-printing.rs:22:19: 22:23
        return;                          // scope 0 at ui/panic-while-printing.rs:22:19: 22:23
    }
}
