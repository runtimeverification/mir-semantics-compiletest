// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> isize {
    let mut _0: isize;                   // return place in scope 0 at ui/range_inclusive.rs:8:13: 8:18

    bb0: {
        _0 = const 42_isize;             // scope 0 at ui/range_inclusive.rs:8:21: 8:23
        return;                          // scope 0 at ui/range_inclusive.rs:8:25: 8:25
    }
}

fn return_range_to() -> RangeToInclusive<i32> {
    let mut _0: std::ops::RangeToInclusive<i32>; // return place in scope 0 at ui/range_inclusive.rs:11:29: 11:50

    bb0: {
        _0 = const RangeToInclusive::<i32> {{ end: 1_i32 }}; // scope 0 at ui/range_inclusive.rs:11:60: 11:64
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:11:60: 11:64
                                         // + literal: Const { ty: RangeToInclusive<i32>, val: Value(Scalar(0x00000001)) }
        return;                          // scope 0 at ui/range_inclusive.rs:11:67: 11:67
    }
}

fn <impl at ui/range_inclusive.rs:13:10: 13:15>::fmt(_1: &P, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/range_inclusive.rs:13:10: 13:15
    debug f => _2;                       // in scope 0 at ui/range_inclusive.rs:13:10: 13:15
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/range_inclusive.rs:13:10: 13:15
    let mut _3: &mut std::fmt::Formatter<'_>; // in scope 0 at ui/range_inclusive.rs:13:10: 13:15
    let mut _4: &str;                    // in scope 0 at ui/range_inclusive.rs:13:10: 13:15
    let _5: &str;                        // in scope 0 at ui/range_inclusive.rs:13:10: 13:15
    let mut _6: &dyn std::fmt::Debug;    // in scope 0 at ui/range_inclusive.rs:14:47: 14:49
    let mut _7: &&u8;                    // in scope 0 at ui/range_inclusive.rs:14:47: 14:49
    let _8: &&u8;                        // in scope 0 at ui/range_inclusive.rs:14:47: 14:49
    let _9: &u8;                         // in scope 0 at ui/range_inclusive.rs:14:47: 14:49

    bb0: {
        _3 = &mut (*_2);                 // scope 0 at ui/range_inclusive.rs:13:10: 13:15
        _5 = const "P";                  // scope 0 at ui/range_inclusive.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:13:10: 13:15
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = _5;                         // scope 0 at ui/range_inclusive.rs:13:10: 13:15
        _9 = &((*_1).0: u8);             // scope 0 at ui/range_inclusive.rs:14:47: 14:49
        _8 = &_9;                        // scope 0 at ui/range_inclusive.rs:14:47: 14:49
        _7 = _8;                         // scope 0 at ui/range_inclusive.rs:14:47: 14:49
        _6 = move _7 as &dyn std::fmt::Debug (Pointer(Unsize)); // scope 0 at ui/range_inclusive.rs:14:47: 14:49
        _0 = Formatter::<'_>::debug_tuple_field1_finish(move _3, move _4, move _6) -> bb1; // scope 0 at ui/range_inclusive.rs:13:10: 13:15
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:13:10: 13:15
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: for<'b, 'a, 'c> fn(&'b mut Formatter<'_>, &'a str, &'c (dyn Debug + 'c)) -> Result<(), std::fmt::Error> {Formatter::<'_>::debug_tuple_field1_finish}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/range_inclusive.rs:13:15: 13:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/range_inclusive.rs:16:15: 16:15
    let mut _1: usize;                   // in scope 0 at ui/range_inclusive.rs:17:9: 17:18
    let mut _2: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:18:14: 18:26
    let mut _3: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:18:14: 18:26
    let mut _5: std::option::Option<usize>; // in scope 0 at ui/range_inclusive.rs:18:14: 18:26
    let mut _6: &mut std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:18:14: 18:26
    let mut _7: &mut std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:18:14: 18:26
    let mut _8: isize;                   // in scope 0 at ui/range_inclusive.rs:18:5: 21:6
    let mut _10: bool;                   // in scope 0 at ui/range_inclusive.rs:19:9: 19:35
    let mut _11: bool;                   // in scope 0 at ui/range_inclusive.rs:19:17: 19:34
    let mut _12: bool;                   // in scope 0 at ui/range_inclusive.rs:19:17: 19:23
    let mut _13: usize;                  // in scope 0 at ui/range_inclusive.rs:19:17: 19:18
    let mut _14: bool;                   // in scope 0 at ui/range_inclusive.rs:19:27: 19:34
    let mut _15: usize;                  // in scope 0 at ui/range_inclusive.rs:19:27: 19:28
    let mut _16: !;                      // in scope 0 at ui/range_inclusive.rs:19:9: 19:35
    let mut _17: usize;                  // in scope 0 at ui/range_inclusive.rs:20:18: 20:19
    let mut _18: (usize, bool);          // in scope 0 at ui/range_inclusive.rs:20:9: 20:19
    let mut _19: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _21: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _24: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _26: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _27: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _29: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _30: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _31: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _32: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _33: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _34: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _35: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _38: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:26:14: 26:19
    let mut _39: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:26:14: 26:19
    let mut _41: std::option::Option<usize>; // in scope 0 at ui/range_inclusive.rs:26:14: 26:19
    let mut _42: &mut std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:26:14: 26:19
    let mut _43: &mut std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:26:14: 26:19
    let mut _44: isize;                  // in scope 0 at ui/range_inclusive.rs:26:5: 29:6
    let mut _46: bool;                   // in scope 0 at ui/range_inclusive.rs:27:9: 27:35
    let mut _47: bool;                   // in scope 0 at ui/range_inclusive.rs:27:17: 27:34
    let mut _48: bool;                   // in scope 0 at ui/range_inclusive.rs:27:17: 27:23
    let mut _49: usize;                  // in scope 0 at ui/range_inclusive.rs:27:17: 27:18
    let mut _50: bool;                   // in scope 0 at ui/range_inclusive.rs:27:27: 27:34
    let mut _51: usize;                  // in scope 0 at ui/range_inclusive.rs:27:27: 27:28
    let mut _52: !;                      // in scope 0 at ui/range_inclusive.rs:27:9: 27:35
    let mut _53: usize;                  // in scope 0 at ui/range_inclusive.rs:28:18: 28:19
    let mut _54: (usize, bool);          // in scope 0 at ui/range_inclusive.rs:28:9: 28:19
    let mut _55: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _56: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _57: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _60: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _61: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _62: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _63: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _65: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _66: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _67: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _68: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _69: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _70: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _71: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _73: std::iter::StepBy<std::ops::RangeInclusive<usize>>; // in scope 0 at ui/range_inclusive.rs:33:14: 33:39
    let mut _74: std::iter::StepBy<std::ops::RangeInclusive<usize>>; // in scope 0 at ui/range_inclusive.rs:33:14: 33:39
    let mut _75: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:33:14: 33:28
    let mut _77: std::option::Option<usize>; // in scope 0 at ui/range_inclusive.rs:33:14: 33:39
    let mut _78: &mut std::iter::StepBy<std::ops::RangeInclusive<usize>>; // in scope 0 at ui/range_inclusive.rs:33:14: 33:39
    let mut _79: &mut std::iter::StepBy<std::ops::RangeInclusive<usize>>; // in scope 0 at ui/range_inclusive.rs:33:14: 33:39
    let mut _80: isize;                  // in scope 0 at ui/range_inclusive.rs:33:5: 36:6
    let mut _82: bool;                   // in scope 0 at ui/range_inclusive.rs:34:9: 34:49
    let mut _83: bool;                   // in scope 0 at ui/range_inclusive.rs:34:17: 34:48
    let mut _84: bool;                   // in scope 0 at ui/range_inclusive.rs:34:17: 34:34
    let mut _85: bool;                   // in scope 0 at ui/range_inclusive.rs:34:17: 34:23
    let mut _86: usize;                  // in scope 0 at ui/range_inclusive.rs:34:17: 34:18
    let mut _87: bool;                   // in scope 0 at ui/range_inclusive.rs:34:27: 34:34
    let mut _88: usize;                  // in scope 0 at ui/range_inclusive.rs:34:27: 34:28
    let mut _89: bool;                   // in scope 0 at ui/range_inclusive.rs:34:38: 34:48
    let mut _90: usize;                  // in scope 0 at ui/range_inclusive.rs:34:38: 34:43
    let mut _91: usize;                  // in scope 0 at ui/range_inclusive.rs:34:38: 34:39
    let mut _92: !;                      // in scope 0 at ui/range_inclusive.rs:34:9: 34:49
    let mut _93: usize;                  // in scope 0 at ui/range_inclusive.rs:35:18: 35:19
    let mut _94: (usize, bool);          // in scope 0 at ui/range_inclusive.rs:35:9: 35:19
    let mut _95: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _96: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _97: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _100: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _101: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _102: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _103: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _105: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _106: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _107: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _108: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _109: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _110: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _111: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _112: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:39:13: 39:28
    let mut _113: usize;                 // in scope 0 at ui/range_inclusive.rs:39:23: 39:28
    let mut _114: std::ops::RangeInclusive<isize>; // in scope 0 at ui/range_inclusive.rs:40:13: 40:22
    let mut _115: isize;                 // in scope 0 at ui/range_inclusive.rs:40:17: 40:22
    let mut _116: std::ops::RangeInclusive<&i32>; // in scope 0 at ui/range_inclusive.rs:42:13: 42:27
    let mut _117: &i32;                  // in scope 0 at ui/range_inclusive.rs:42:15: 42:18
    let mut _118: &i32;                  // in scope 0 at ui/range_inclusive.rs:42:21: 42:25
    let _119: &i32;                      // in scope 0 at ui/range_inclusive.rs:42:21: 42:25
    let mut _122: std::ops::RangeInclusive<&i32>; // in scope 0 at ui/range_inclusive.rs:49:17: 49:23
    let mut _123: &i32;                  // in scope 0 at ui/range_inclusive.rs:49:17: 49:18
    let mut _124: &i32;                  // in scope 0 at ui/range_inclusive.rs:49:21: 49:23
    let _125: &i32;                      // in scope 0 at ui/range_inclusive.rs:49:21: 49:23
    let mut _127: std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:53:15: 53:23
    let _129: &[i32];                    // in scope 0 at ui/range_inclusive.rs:54:23: 54:28
    let _130: &[i32];                    // in scope 0 at ui/range_inclusive.rs:54:24: 54:28
    let mut _131: &std::vec::Vec<i32>;   // in scope 0 at ui/range_inclusive.rs:54:25: 54:28
    let mut _134: (&&[i32], &&[i32; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _135: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _136: &[i32];                    // in scope 0 at ui/range_inclusive.rs:58:16: 58:27
    let _137: &[i32];                    // in scope 0 at ui/range_inclusive.rs:58:17: 58:27
    let mut _138: &std::vec::Vec<i32>;   // in scope 0 at ui/range_inclusive.rs:58:17: 58:20
    let mut _139: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:58:21: 58:26
    let mut _140: &&[i32; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _143: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _144: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _145: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _146: &&[i32; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _148: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _149: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _150: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _151: &&[i32];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _152: &&[i32; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _153: &&[i32; 4];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _154: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _155: (&&[i32], &&[i32; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _156: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _157: &[i32];                    // in scope 0 at ui/range_inclusive.rs:59:16: 59:27
    let _158: &[i32];                    // in scope 0 at ui/range_inclusive.rs:59:17: 59:27
    let mut _159: &std::vec::Vec<i32>;   // in scope 0 at ui/range_inclusive.rs:59:17: 59:20
    let mut _160: std::ops::RangeToInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:59:22: 59:26
    let mut _161: &&[i32; 7];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _164: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _165: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _166: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _167: &&[i32; 7];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _169: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _170: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _171: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _172: &&[i32];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _173: &&[i32; 7];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _174: &&[i32; 7];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _175: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _176: (&&[i32], &&[i32; 4]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _177: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _178: &[i32];                    // in scope 0 at ui/range_inclusive.rs:61:16: 61:29
    let _179: &[i32];                    // in scope 0 at ui/range_inclusive.rs:61:17: 61:29
    let mut _180: &[i32];                // in scope 0 at ui/range_inclusive.rs:61:17: 61:22
    let mut _181: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:61:23: 61:28
    let mut _182: &&[i32; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _185: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _186: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _187: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _188: &&[i32; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _190: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _191: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _192: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _193: &&[i32];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _194: &&[i32; 4];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _195: &&[i32; 4];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _196: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _197: (&&[i32], &&[i32; 7]); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _198: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _199: &[i32];                    // in scope 0 at ui/range_inclusive.rs:62:16: 62:29
    let _200: &[i32];                    // in scope 0 at ui/range_inclusive.rs:62:17: 62:29
    let mut _201: &[i32];                // in scope 0 at ui/range_inclusive.rs:62:17: 62:22
    let mut _202: std::ops::RangeToInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:62:24: 62:28
    let mut _203: &&[i32; 7];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _206: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _207: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _208: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _209: &&[i32; 7];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _211: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _212: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _213: &&[i32];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _214: &&[i32];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _215: &&[i32; 7];            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _216: &&[i32; 7];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _217: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _218: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _219: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _220: &str;                      // in scope 0 at ui/range_inclusive.rs:64:16: 64:30
    let _221: &str;                      // in scope 0 at ui/range_inclusive.rs:64:17: 64:30
    let mut _222: &std::string::String;  // in scope 0 at ui/range_inclusive.rs:64:17: 64:23
    let mut _223: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:64:24: 64:29
    let mut _224: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _227: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _228: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _229: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _230: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _232: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _233: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _234: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _235: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _236: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _237: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _238: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _239: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _240: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _241: &str;                      // in scope 0 at ui/range_inclusive.rs:65:16: 65:30
    let _242: &str;                      // in scope 0 at ui/range_inclusive.rs:65:17: 65:30
    let mut _243: &std::string::String;  // in scope 0 at ui/range_inclusive.rs:65:17: 65:23
    let mut _244: std::ops::RangeToInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:65:25: 65:29
    let mut _245: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _248: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _249: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _250: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _251: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _253: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _254: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _255: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _256: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _257: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _258: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _259: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _260: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _261: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _262: &str;                      // in scope 0 at ui/range_inclusive.rs:67:16: 67:28
    let _263: &str;                      // in scope 0 at ui/range_inclusive.rs:67:17: 67:28
    let mut _264: &str;                  // in scope 0 at ui/range_inclusive.rs:67:17: 67:21
    let mut _265: std::ops::RangeInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:67:22: 67:27
    let mut _266: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _269: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _270: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _271: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _272: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _274: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _275: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _276: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _277: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _278: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _279: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _280: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _281: (&&str, &&str);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _282: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _283: &str;                      // in scope 0 at ui/range_inclusive.rs:68:16: 68:28
    let _284: &str;                      // in scope 0 at ui/range_inclusive.rs:68:17: 68:28
    let mut _285: &str;                  // in scope 0 at ui/range_inclusive.rs:68:17: 68:21
    let mut _286: std::ops::RangeToInclusive<usize>; // in scope 0 at ui/range_inclusive.rs:68:23: 68:27
    let mut _287: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _290: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _291: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _292: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _293: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _295: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _296: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _297: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _298: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _299: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _300: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _301: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _304: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _305: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _306: (usize, std::option::Option<usize>); // in scope 0 at ui/range_inclusive.rs:73:16: 73:32
    let mut _307: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:73:16: 73:32
    let mut _308: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _311: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _312: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _313: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _314: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _316: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _317: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _318: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _319: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _320: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _321: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _322: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _323: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _324: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _325: (usize, std::option::Option<usize>); // in scope 0 at ui/range_inclusive.rs:74:16: 74:33
    let mut _326: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:74:16: 74:33
    let mut _327: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _330: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _331: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _332: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _333: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _335: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _336: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _337: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _338: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _339: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _340: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _341: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let _342: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:75:5: 75:16
    let mut _343: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:75:5: 75:16
    let _344: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:76:5: 76:17
    let mut _345: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:76:5: 76:17
    let mut _346: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _347: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _348: (usize, std::option::Option<usize>); // in scope 0 at ui/range_inclusive.rs:77:16: 77:32
    let mut _349: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:77:16: 77:32
    let mut _350: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _353: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _354: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _355: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _356: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _358: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _359: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _360: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _361: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _362: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _363: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _364: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _365: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>)); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _366: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _367: (usize, std::option::Option<usize>); // in scope 0 at ui/range_inclusive.rs:78:16: 78:33
    let mut _368: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:78:16: 78:33
    let mut _369: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _372: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _373: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _374: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _375: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _377: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _378: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _379: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _380: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _381: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _382: &(usize, std::option::Option<usize>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _383: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _384: bool;                  // in scope 0 at ui/range_inclusive.rs:79:5: 79:30
    let mut _385: bool;                  // in scope 0 at ui/range_inclusive.rs:79:13: 79:29
    let mut _386: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:79:13: 79:29
    let mut _387: !;                     // in scope 0 at ui/range_inclusive.rs:79:5: 79:30
    let mut _388: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _389: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _390: usize;                     // in scope 0 at ui/range_inclusive.rs:81:16: 81:26
    let mut _391: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:81:16: 81:26
    let mut _392: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _395: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _396: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _397: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _398: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _400: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _401: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _402: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _403: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _404: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _405: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _406: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _407: (&usize, &usize);      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _408: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _409: usize;                     // in scope 0 at ui/range_inclusive.rs:82:16: 82:27
    let mut _410: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:82:16: 82:27
    let mut _411: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _414: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _415: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _416: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _417: usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _419: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _420: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _421: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _422: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _423: &usize;                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _424: &usize;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _425: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _426: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _427: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _428: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:85:16: 85:32
    let mut _429: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:85:16: 85:32
    let mut _430: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _433: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _434: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _435: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _436: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _438: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _439: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _440: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _441: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _442: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _443: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _444: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _445: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _446: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _447: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:86:16: 86:32
    let mut _448: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:86:16: 86:32
    let mut _449: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _452: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _453: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _454: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _455: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _457: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _458: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _459: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _460: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _461: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _462: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _463: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _464: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _465: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _466: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:87:16: 87:32
    let mut _467: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:87:16: 87:32
    let mut _468: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _471: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _472: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _473: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _474: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _476: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _477: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _478: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _479: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _480: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _481: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _482: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _483: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _484: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _485: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:88:16: 88:27
    let mut _486: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:88:16: 88:27
    let mut _487: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _490: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _491: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _492: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _493: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _495: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _496: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _497: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _498: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _499: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _500: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _501: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _502: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _503: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _504: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:89:16: 89:27
    let mut _505: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:89:16: 89:27
    let mut _506: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _509: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _510: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _511: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _512: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _514: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _515: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _516: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _517: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _518: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _519: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _520: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _521: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _522: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _523: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:90:16: 90:32
    let mut _524: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:90:16: 90:32
    let mut _525: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _528: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _529: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _530: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _531: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _533: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _534: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _535: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _536: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _537: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _538: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _539: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _540: std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:91:14: 91:21
    let mut _541: std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:91:14: 91:21
    let mut _543: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:91:14: 91:21
    let mut _544: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:91:14: 91:21
    let mut _545: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:91:14: 91:21
    let mut _546: isize;                 // in scope 0 at ui/range_inclusive.rs:91:5: 93:6
    let mut _548: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _549: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _550: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:92:20: 92:31
    let mut _551: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:92:20: 92:31
    let mut _552: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _553: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:92:33: 92:40
    let mut _554: u8;                    // in scope 0 at ui/range_inclusive.rs:92:38: 92:39
    let mut _557: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _558: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _559: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _560: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _562: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _563: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _564: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _565: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _566: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _567: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _568: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _569: bool;                  // in scope 0 at ui/range_inclusive.rs:94:5: 94:29
    let mut _570: bool;                  // in scope 0 at ui/range_inclusive.rs:94:13: 94:28
    let mut _571: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:94:13: 94:28
    let mut _572: !;                     // in scope 0 at ui/range_inclusive.rs:94:5: 94:29
    let mut _574: (&std::option::Option<i32>, &std::option::Option<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _575: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _576: std::option::Option<i32>;  // in scope 0 at ui/range_inclusive.rs:98:16: 98:34
    let mut _577: &mut std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:98:16: 98:34
    let mut _578: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _581: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _582: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _583: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _584: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _586: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _587: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _588: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _589: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _590: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _591: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _592: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _593: bool;                  // in scope 0 at ui/range_inclusive.rs:99:5: 99:31
    let mut _594: bool;                  // in scope 0 at ui/range_inclusive.rs:99:13: 99:30
    let mut _595: &std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:99:13: 99:30
    let mut _596: !;                     // in scope 0 at ui/range_inclusive.rs:99:5: 99:31
    let mut _598: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _599: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _600: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:101:16: 101:32
    let mut _601: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:101:16: 101:32
    let mut _602: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _605: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _606: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _607: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _608: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _610: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _611: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _612: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _613: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _614: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _615: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _616: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _617: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _618: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _619: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:102:16: 102:32
    let mut _620: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:102:16: 102:32
    let mut _621: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _624: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _625: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _626: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _627: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _629: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _630: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _631: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _632: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _633: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _634: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _635: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _636: bool;                  // in scope 0 at ui/range_inclusive.rs:103:5: 103:29
    let mut _637: bool;                  // in scope 0 at ui/range_inclusive.rs:103:13: 103:28
    let mut _638: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:103:13: 103:28
    let mut _639: !;                     // in scope 0 at ui/range_inclusive.rs:103:5: 103:29
    let mut _641: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _642: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _643: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:105:16: 105:32
    let mut _644: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:105:16: 105:32
    let mut _645: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _648: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _649: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _650: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _651: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _653: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _654: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _655: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _656: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _657: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _658: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _659: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _660: (&std::option::Option<u8>, &std::option::Option<u8>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _661: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _662: std::option::Option<u8>;   // in scope 0 at ui/range_inclusive.rs:106:16: 106:32
    let mut _663: &mut std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:106:16: 106:32
    let mut _664: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _667: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _668: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _669: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _670: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _672: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _673: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _674: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _675: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _676: &std::option::Option<u8>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _677: &std::option::Option<u8>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _678: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _679: bool;                  // in scope 0 at ui/range_inclusive.rs:107:5: 107:29
    let mut _680: bool;                  // in scope 0 at ui/range_inclusive.rs:107:13: 107:28
    let mut _681: &std::ops::RangeInclusive<u8>; // in scope 0 at ui/range_inclusive.rs:107:13: 107:28
    let mut _682: !;                     // in scope 0 at ui/range_inclusive.rs:107:5: 107:29
    let mut _684: (&std::option::Option<i32>, &std::option::Option<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _685: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _686: std::option::Option<i32>;  // in scope 0 at ui/range_inclusive.rs:111:16: 111:31
    let mut _687: &mut std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:111:16: 111:31
    let mut _688: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _691: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _692: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _693: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _694: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _696: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _697: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _698: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _699: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _700: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _701: &std::option::Option<i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _702: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _703: bool;                  // in scope 0 at ui/range_inclusive.rs:112:5: 112:33
    let mut _704: bool;                  // in scope 0 at ui/range_inclusive.rs:112:13: 112:32
    let mut _705: &std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:112:13: 112:32
    let mut _706: !;                     // in scope 0 at ui/range_inclusive.rs:112:5: 112:33
    let mut _707: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _708: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _709: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _711: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _712: &[&str];               // in scope 0 at ui/range_inclusive.rs:115:24: 115:30
    let mut _713: &[&str; 1];            // in scope 0 at ui/range_inclusive.rs:115:24: 115:30
    let _714: &[&str; 1];                // in scope 0 at ui/range_inclusive.rs:115:24: 115:30
    let mut _715: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _716: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _717: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _718: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _719: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/range_inclusive.rs:115:32: 115:38
    let mut _720: &std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:115:32: 115:38
    let _721: &std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:115:32: 115:38
    let mut _722: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _725: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _726: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _727: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _728: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _730: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _731: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _732: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _733: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _734: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _735: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _736: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _737: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _738: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _739: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _741: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _742: &[&str];               // in scope 0 at ui/range_inclusive.rs:116:24: 116:30
    let mut _743: &[&str; 1];            // in scope 0 at ui/range_inclusive.rs:116:24: 116:30
    let _744: &[&str; 1];                // in scope 0 at ui/range_inclusive.rs:116:24: 116:30
    let mut _745: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _746: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _747: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _748: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _749: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/range_inclusive.rs:116:32: 116:37
    let mut _750: &std::ops::RangeToInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:116:32: 116:37
    let _751: &std::ops::RangeToInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:116:32: 116:37
    let mut _752: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _755: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _756: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _757: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _758: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _760: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _761: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _762: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _763: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _764: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _765: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _766: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _767: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _768: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _769: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _771: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _772: &[&str];               // in scope 0 at ui/range_inclusive.rs:117:24: 117:30
    let mut _773: &[&str; 1];            // in scope 0 at ui/range_inclusive.rs:117:24: 117:30
    let _774: &[&str; 1];                // in scope 0 at ui/range_inclusive.rs:117:24: 117:30
    let mut _775: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _776: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _777: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _778: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _779: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/range_inclusive.rs:117:32: 117:37
    let mut _780: &std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:117:32: 117:37
    let _781: &std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:117:32: 117:37
    let mut _782: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _785: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _786: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _787: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _788: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _790: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _791: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _792: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _793: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _794: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _795: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _796: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _797: (&std::string::String, &&str); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _798: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _799: std::string::String;       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:117:23: 120:6
    let mut _801: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _802: &[&str];               // in scope 0 at ui/range_inclusive.rs:120:24: 120:30
    let mut _803: &[&str; 1];            // in scope 0 at ui/range_inclusive.rs:120:24: 120:30
    let _804: &[&str; 1];                // in scope 0 at ui/range_inclusive.rs:120:24: 120:30
    let mut _805: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _806: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _807: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let _808: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
    let mut _809: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/range_inclusive.rs:120:32: 120:43
    let mut _810: &std::ops::RangeInclusive<P>; // in scope 0 at ui/range_inclusive.rs:120:32: 120:43
    let _811: &std::ops::RangeInclusive<P>; // in scope 0 at ui/range_inclusive.rs:120:32: 120:43
    let mut _812: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _815: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _816: bool;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _817: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _818: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _820: !;                         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _821: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _822: &std::string::String;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _823: &std::string::String;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _824: &&str;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _825: &&str;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _826: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug count => _1;               // in scope 1 at ui/range_inclusive.rs:17:9: 17:18
        let mut _4: std::ops::RangeInclusive<usize>; // in scope 1 at ui/range_inclusive.rs:18:14: 18:26
        let _22: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _23: &usize;                 // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _36: usize;              // in scope 1 at ui/range_inclusive.rs:24:9: 24:18
        let mut _870: &usize;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug iter => _4;            // in scope 2 at ui/range_inclusive.rs:18:14: 18:26
            let _9: usize;               // in scope 2 at ui/range_inclusive.rs:18:9: 18:10
            scope 3 {
                debug i => _9;           // in scope 3 at ui/range_inclusive.rs:18:9: 18:10
            }
        }
        scope 4 {
            debug left_val => _22;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _23;      // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _28: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 5 {
                debug kind => _28;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 6 {
            debug count => _36;          // in scope 6 at ui/range_inclusive.rs:24:9: 24:18
            let _37: std::ops::RangeInclusive<usize>; // in scope 6 at ui/range_inclusive.rs:25:9: 25:14
            scope 7 {
                debug range => _37;      // in scope 7 at ui/range_inclusive.rs:25:9: 25:14
                let mut _40: std::ops::RangeInclusive<usize>; // in scope 7 at ui/range_inclusive.rs:26:14: 26:19
                let _58: &usize;         // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _59: &usize;         // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _72: usize;      // in scope 7 at ui/range_inclusive.rs:32:9: 32:18
                let mut _869: &usize;    // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 8 {
                    debug iter => _40;   // in scope 8 at ui/range_inclusive.rs:26:14: 26:19
                    let _45: usize;      // in scope 8 at ui/range_inclusive.rs:26:9: 26:10
                    scope 9 {
                        debug i => _45;  // in scope 9 at ui/range_inclusive.rs:26:9: 26:10
                    }
                }
                scope 10 {
                    debug left_val => _58; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _59; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _64: core::panicking::AssertKind; // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 11 {
                        debug kind => _64; // in scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
                scope 12 {
                    debug count => _72;  // in scope 12 at ui/range_inclusive.rs:32:9: 32:18
                    let mut _76: std::iter::StepBy<std::ops::RangeInclusive<usize>>; // in scope 12 at ui/range_inclusive.rs:33:14: 33:39
                    let _98: &usize;     // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    let _99: &usize;     // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let mut _868: &usize; // in scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                    scope 13 {
                        debug iter => _76; // in scope 13 at ui/range_inclusive.rs:33:14: 33:39
                        let _81: usize;  // in scope 13 at ui/range_inclusive.rs:33:9: 33:10
                        scope 14 {
                            debug i => _81; // in scope 14 at ui/range_inclusive.rs:33:9: 33:10
                        }
                    }
                    scope 15 {
                        debug left_val => _98; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                        debug right_val => _99; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                        let _104: core::panicking::AssertKind; // in scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        scope 16 {
                            debug kind => _104; // in scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                        }
                    }
                    scope 17 {
                        scope 18 {
                            let mut _866: &i32; // in scope 18 at ui/range_inclusive.rs:42:21: 42:25
                            let mut _867: &i32; // in scope 18 at ui/range_inclusive.rs:42:15: 42:18
                            scope 19 {
                                scope 20 {
                                    let _120: &i32; // in scope 20 at ui/range_inclusive.rs:46:9: 46:10
                                    let mut _865: &i32; // in scope 20 at ui/range_inclusive.rs:46:13: 46:16
                                    scope 21 {
                                        debug x => _120; // in scope 21 at ui/range_inclusive.rs:46:9: 46:10
                                        let _121: i32; // in scope 21 at ui/range_inclusive.rs:48:13: 48:14
                                        let _126: std::vec::Vec<i32>; // in scope 21 at ui/range_inclusive.rs:53:9: 53:12
                                        scope 22 {
                                            debug y => _121; // in scope 22 at ui/range_inclusive.rs:48:13: 48:14
                                            scope 23 {
                                            }
                                        }
                                        scope 24 {
                                            debug vec => _126; // in scope 24 at ui/range_inclusive.rs:53:9: 53:12
                                            let _128: &[i32]; // in scope 24 at ui/range_inclusive.rs:54:9: 54:14
                                            scope 25 {
                                                debug slice => _128; // in scope 25 at ui/range_inclusive.rs:54:9: 54:14
                                                let _132: std::string::String; // in scope 25 at ui/range_inclusive.rs:55:9: 55:15
                                                scope 26 {
                                                    debug string => _132; // in scope 26 at ui/range_inclusive.rs:55:9: 55:15
                                                    let _133: &str; // in scope 26 at ui/range_inclusive.rs:56:9: 56:13
                                                    scope 27 {
                                                        debug stir => _133; // in scope 27 at ui/range_inclusive.rs:56:9: 56:13
                                                        let _141: &&[i32]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _142: &&[i32; 4]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _162: &&[i32]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _163: &&[i32; 7]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _183: &&[i32]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _184: &&[i32; 4]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _204: &&[i32]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _205: &&[i32; 7]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _225: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _226: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _246: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _247: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _267: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _268: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let _288: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                        let _289: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                        let mut _302: std::ops::RangeInclusive<u8>; // in scope 27 at ui/range_inclusive.rs:71:9: 71:17
                                                        let mut _857: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        let mut _858: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        let mut _859: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        let mut _860: &&str; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        let mut _861: &&[i32; 7]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        let mut _862: &&[i32; 4]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        let mut _863: &&[i32; 7]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        let mut _864: &&[i32; 4]; // in scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                        scope 28 {
                                                            debug left_val => _141; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _142; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _147: core::panicking::AssertKind; // in scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 29 {
                                                                debug kind => _147; // in scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                        scope 30 {
                                                            debug left_val => _162; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _163; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _168: core::panicking::AssertKind; // in scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 31 {
                                                                debug kind => _168; // in scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                        scope 32 {
                                                            debug left_val => _183; // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _184; // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _189: core::panicking::AssertKind; // in scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 33 {
                                                                debug kind => _189; // in scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                        scope 34 {
                                                            debug left_val => _204; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _205; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _210: core::panicking::AssertKind; // in scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 35 {
                                                                debug kind => _210; // in scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                        scope 36 {
                                                            debug left_val => _225; // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _226; // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _231: core::panicking::AssertKind; // in scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 37 {
                                                                debug kind => _231; // in scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                        scope 38 {
                                                            debug left_val => _246; // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _247; // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _252: core::panicking::AssertKind; // in scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 39 {
                                                                debug kind => _252; // in scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                        scope 40 {
                                                            debug left_val => _267; // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _268; // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _273: core::panicking::AssertKind; // in scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 41 {
                                                                debug kind => _273; // in scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                        scope 42 {
                                                            debug left_val => _288; // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                            debug right_val => _289; // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                            let _294: core::panicking::AssertKind; // in scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            scope 43 {
                                                                debug kind => _294; // in scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                            }
                                                        }
                                                        scope 44 {
                                                            debug long => _302; // in scope 44 at ui/range_inclusive.rs:71:9: 71:17
                                                            let mut _303: std::ops::RangeInclusive<u8>; // in scope 44 at ui/range_inclusive.rs:72:9: 72:18
                                                            scope 45 {
                                                                debug short => _303; // in scope 45 at ui/range_inclusive.rs:72:9: 72:18
                                                                let _309: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _310: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _328: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _329: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _351: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _352: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _370: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _371: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _393: &usize; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _394: &usize; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _412: &usize; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _413: &usize; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _431: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _432: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _450: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _451: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _469: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _470: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _488: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _489: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _507: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _508: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let _526: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                let _527: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                let mut _542: std::ops::RangeInclusive<u8>; // in scope 45 at ui/range_inclusive.rs:91:14: 91:21
                                                                let mut _573: std::ops::RangeInclusive<i32>; // in scope 45 at ui/range_inclusive.rs:97:9: 97:19
                                                                let mut _845: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _846: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _847: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _848: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _849: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _850: &std::option::Option<u8>; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _851: &usize; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _852: &usize; // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _853: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _854: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _855: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                let mut _856: &(usize, std::option::Option<usize>); // in scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                scope 46 {
                                                                    debug left_val => _309; // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _310; // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _315: core::panicking::AssertKind; // in scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 47 {
                                                                        debug kind => _315; // in scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug left_val => _328; // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _329; // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _334: core::panicking::AssertKind; // in scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 49 {
                                                                        debug kind => _334; // in scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 50 {
                                                                    debug left_val => _351; // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _352; // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _357: core::panicking::AssertKind; // in scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 51 {
                                                                        debug kind => _357; // in scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 52 {
                                                                    debug left_val => _370; // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _371; // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _376: core::panicking::AssertKind; // in scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 53 {
                                                                        debug kind => _376; // in scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 54 {
                                                                    debug left_val => _393; // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _394; // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _399: core::panicking::AssertKind; // in scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 55 {
                                                                        debug kind => _399; // in scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 56 {
                                                                    debug left_val => _412; // in scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _413; // in scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _418: core::panicking::AssertKind; // in scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 57 {
                                                                        debug kind => _418; // in scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 58 {
                                                                    debug left_val => _431; // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _432; // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _437: core::panicking::AssertKind; // in scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 59 {
                                                                        debug kind => _437; // in scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 60 {
                                                                    debug left_val => _450; // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _451; // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _456: core::panicking::AssertKind; // in scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 61 {
                                                                        debug kind => _456; // in scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 62 {
                                                                    debug left_val => _469; // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _470; // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _475: core::panicking::AssertKind; // in scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 63 {
                                                                        debug kind => _475; // in scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 64 {
                                                                    debug left_val => _488; // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _489; // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _494: core::panicking::AssertKind; // in scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 65 {
                                                                        debug kind => _494; // in scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 66 {
                                                                    debug left_val => _507; // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _508; // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _513: core::panicking::AssertKind; // in scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 67 {
                                                                        debug kind => _513; // in scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 68 {
                                                                    debug left_val => _526; // in scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    debug right_val => _527; // in scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let _532: core::panicking::AssertKind; // in scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    scope 69 {
                                                                        debug kind => _532; // in scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                    }
                                                                }
                                                                scope 70 {
                                                                    debug iter => _542; // in scope 70 at ui/range_inclusive.rs:91:14: 91:21
                                                                    let _547: u8; // in scope 70 at ui/range_inclusive.rs:91:9: 91:10
                                                                    scope 71 {
                                                                        debug i => _547; // in scope 71 at ui/range_inclusive.rs:91:9: 91:10
                                                                        let _555: &std::option::Option<u8>; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        let _556: &std::option::Option<u8>; // in scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        scope 72 {
                                                                            debug left_val => _555; // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                            debug right_val => _556; // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                            let _561: core::panicking::AssertKind; // in scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                            scope 73 {
                                                                                debug kind => _561; // in scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 74 {
                                                                    debug narrow => _573; // in scope 74 at ui/range_inclusive.rs:97:9: 97:19
                                                                    let _579: &std::option::Option<i32>; // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                    let _580: &std::option::Option<i32>; // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                    let mut _597: std::ops::RangeInclusive<u8>; // in scope 74 at ui/range_inclusive.rs:100:9: 100:17
                                                                    let mut _844: &std::option::Option<i32>; // in scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                    scope 75 {
                                                                        debug left_val => _579; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        debug right_val => _580; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let _585: core::panicking::AssertKind; // in scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        scope 76 {
                                                                            debug kind => _585; // in scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                        }
                                                                    }
                                                                    scope 77 {
                                                                        debug zero => _597; // in scope 77 at ui/range_inclusive.rs:100:9: 100:17
                                                                        let _603: &std::option::Option<u8>; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        let _604: &std::option::Option<u8>; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let _622: &std::option::Option<u8>; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                        let _623: &std::option::Option<u8>; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                        let mut _640: std::ops::RangeInclusive<u8>; // in scope 77 at ui/range_inclusive.rs:104:9: 104:17
                                                                        let mut _842: &std::option::Option<u8>; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                        let mut _843: &std::option::Option<u8>; // in scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                        scope 78 {
                                                                            debug left_val => _603; // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                            debug right_val => _604; // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                            let _609: core::panicking::AssertKind; // in scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                            scope 79 {
                                                                                debug kind => _609; // in scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                            }
                                                                        }
                                                                        scope 80 {
                                                                            debug left_val => _622; // in scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                            debug right_val => _623; // in scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                            let _628: core::panicking::AssertKind; // in scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                            scope 81 {
                                                                                debug kind => _628; // in scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                            }
                                                                        }
                                                                        scope 82 {
                                                                            debug high => _640; // in scope 82 at ui/range_inclusive.rs:104:9: 104:17
                                                                            let _646: &std::option::Option<u8>; // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                            let _647: &std::option::Option<u8>; // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                            let _665: &std::option::Option<u8>; // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                            let _666: &std::option::Option<u8>; // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                            let mut _683: std::ops::RangeInclusive<i32>; // in scope 82 at ui/range_inclusive.rs:110:9: 110:21
                                                                            let mut _840: &std::option::Option<u8>; // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                            let mut _841: &std::option::Option<u8>; // in scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                            scope 83 {
                                                                                debug left_val => _646; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                debug right_val => _647; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                let _652: core::panicking::AssertKind; // in scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                scope 84 {
                                                                                    debug kind => _652; // in scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                }
                                                                            }
                                                                            scope 85 {
                                                                                debug left_val => _665; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                debug right_val => _666; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                let _671: core::panicking::AssertKind; // in scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                scope 86 {
                                                                                    debug kind => _671; // in scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                }
                                                                            }
                                                                            scope 87 {
                                                                                debug nonsense => _683; // in scope 87 at ui/range_inclusive.rs:110:9: 110:21
                                                                                let _689: &std::option::Option<i32>; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                let _690: &std::option::Option<i32>; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                let _710: std::string::String; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                                                let _723: &std::string::String; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                let _724: &&str; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                let _740: std::string::String; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                                                let _753: &std::string::String; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                let _754: &&str; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                let _770: std::string::String; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                                                let _783: &std::string::String; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                let _784: &&str; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                let _800: std::string::String; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                                                let _813: &std::string::String; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                let _814: &&str; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                let mut _827: &&str; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                                let mut _828: &std::ops::RangeInclusive<P>; // in scope 87 at ui/range_inclusive.rs:120:32: 120:43
                                                                                let mut _829: &[&str; 1]; // in scope 87 at ui/range_inclusive.rs:120:24: 120:30
                                                                                let mut _830: &&str; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                                let mut _831: &std::ops::RangeInclusive<i32>; // in scope 87 at ui/range_inclusive.rs:117:32: 117:37
                                                                                let mut _832: &[&str; 1]; // in scope 87 at ui/range_inclusive.rs:117:24: 117:30
                                                                                let mut _833: &&str; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                                let mut _834: &std::ops::RangeToInclusive<i32>; // in scope 87 at ui/range_inclusive.rs:116:32: 116:37
                                                                                let mut _835: &[&str; 1]; // in scope 87 at ui/range_inclusive.rs:116:24: 116:30
                                                                                let mut _836: &&str; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                                let mut _837: &std::ops::RangeInclusive<i32>; // in scope 87 at ui/range_inclusive.rs:115:32: 115:38
                                                                                let mut _838: &[&str; 1]; // in scope 87 at ui/range_inclusive.rs:115:24: 115:30
                                                                                let mut _839: &std::option::Option<i32>; // in scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                                                                scope 88 {
                                                                                    debug left_val => _689; // in scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                    debug right_val => _690; // in scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                    let _695: core::panicking::AssertKind; // in scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    scope 89 {
                                                                                        debug kind => _695; // in scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    }
                                                                                }
                                                                                scope 90 {
                                                                                    debug res => _710; // in scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                                                }
                                                                                scope 91 {
                                                                                    debug left_val => _723; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                    debug right_val => _724; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                    let _729: core::panicking::AssertKind; // in scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    scope 92 {
                                                                                        debug kind => _729; // in scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    }
                                                                                }
                                                                                scope 93 {
                                                                                    debug res => _740; // in scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                                                }
                                                                                scope 94 {
                                                                                    debug left_val => _753; // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                    debug right_val => _754; // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                    let _759: core::panicking::AssertKind; // in scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    scope 95 {
                                                                                        debug kind => _759; // in scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    }
                                                                                }
                                                                                scope 96 {
                                                                                    debug res => _770; // in scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                                                }
                                                                                scope 97 {
                                                                                    debug left_val => _783; // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                    debug right_val => _784; // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                    let _789: core::panicking::AssertKind; // in scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    scope 98 {
                                                                                        debug kind => _789; // in scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    }
                                                                                }
                                                                                scope 99 {
                                                                                    debug res => _800; // in scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:13: 118:16
                                                                                }
                                                                                scope 100 {
                                                                                    debug left_val => _813; // in scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                                                                                    debug right_val => _814; // in scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                                                                                    let _819: core::panicking::AssertKind; // in scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    scope 101 {
                                                                                        debug kind => _819; // in scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/range_inclusive.rs:17:21: 17:22
        _3 = RangeInclusive::<usize>::new(const 0_usize, const 10_usize) -> bb1; // scope 1 at ui/range_inclusive.rs:18:14: 18:26
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:18:14: 18:26
                                         // + literal: Const { ty: fn(usize, usize) -> RangeInclusive<usize> {RangeInclusive::<usize>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <RangeInclusive<usize> as IntoIterator>::into_iter(move _3) -> bb2; // scope 1 at ui/range_inclusive.rs:18:14: 18:26
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:18:14: 18:26
                                         // + literal: Const { ty: fn(RangeInclusive<usize>) -> <RangeInclusive<usize> as IntoIterator>::IntoIter {<RangeInclusive<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = move _2;                    // scope 1 at ui/range_inclusive.rs:18:14: 18:26
        goto -> bb3;                     // scope 2 at ui/range_inclusive.rs:18:5: 21:6
    }

    bb3: {
        _7 = &mut _4;                    // scope 2 at ui/range_inclusive.rs:18:14: 18:26
        _6 = &mut (*_7);                 // scope 2 at ui/range_inclusive.rs:18:14: 18:26
        _5 = <RangeInclusive<usize> as Iterator>::next(move _6) -> bb4; // scope 2 at ui/range_inclusive.rs:18:14: 18:26
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:18:14: 18:26
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<usize>) -> Option<<RangeInclusive<usize> as Iterator>::Item> {<RangeInclusive<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _8 = discriminant(_5);           // scope 2 at ui/range_inclusive.rs:18:14: 18:26
        switchInt(move _8) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 2 at ui/range_inclusive.rs:18:14: 18:26
    }

    bb5: {
        _9 = ((_5 as Some).0: usize);    // scope 2 at ui/range_inclusive.rs:18:9: 18:10
        _13 = _9;                        // scope 3 at ui/range_inclusive.rs:19:17: 19:18
        _12 = Ge(move _13, const 0_usize); // scope 3 at ui/range_inclusive.rs:19:17: 19:23
        switchInt(move _12) -> [0: bb8, otherwise: bb9]; // scope 3 at ui/range_inclusive.rs:19:17: 19:34
    }

    bb6: {
        unreachable;                     // scope 2 at ui/range_inclusive.rs:18:14: 18:26
    }

    bb7: {
        _20 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _870 = const _;                  // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[43])) }
        _21 = _870;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _21);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _22 = (_19.0: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _23 = (_19.1: &usize);           // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _26 = (*_22);                    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _27 = const 55_usize;            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _25 = Eq(move _26, move _27);    // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _24 = Not(move _25);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _24) -> [0: bb15, otherwise: bb14]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb8: {
        _11 = const false;               // scope 3 at ui/range_inclusive.rs:19:17: 19:34
        goto -> bb10;                    // scope 3 at ui/range_inclusive.rs:19:17: 19:34
    }

    bb9: {
        _15 = _9;                        // scope 3 at ui/range_inclusive.rs:19:27: 19:28
        _14 = Le(move _15, const 10_usize); // scope 3 at ui/range_inclusive.rs:19:27: 19:34
        _11 = move _14;                  // scope 3 at ui/range_inclusive.rs:19:17: 19:34
        goto -> bb10;                    // scope 3 at ui/range_inclusive.rs:19:17: 19:34
    }

    bb10: {
        _10 = Not(move _11);             // scope 3 at ui/range_inclusive.rs:19:9: 19:35
        switchInt(move _10) -> [0: bb12, otherwise: bb11]; // scope 3 at ui/range_inclusive.rs:19:9: 19:35
    }

    bb11: {
        _16 = core::panicking::panic(const "assertion failed: i >= 0 && i <= 10"); // scope 3 at ui/range_inclusive.rs:19:9: 19:35
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:19:9: 19:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb12: {
        _17 = _9;                        // scope 3 at ui/range_inclusive.rs:20:18: 20:19
        _18 = CheckedAdd(_1, _17);       // scope 3 at ui/range_inclusive.rs:20:9: 20:19
        assert(!move (_18.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, move _17) -> bb13; // scope 3 at ui/range_inclusive.rs:20:9: 20:19
    }

    bb13: {
        _1 = move (_18.0: usize);        // scope 3 at ui/range_inclusive.rs:20:9: 20:19
        goto -> bb3;                     // scope 2 at ui/range_inclusive.rs:18:5: 21:6
    }

    bb14: {
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = _22;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _31 = _32;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _34 = _23;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = _34;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _29 = core::panicking::assert_failed::<usize, usize>(move _30, move _31, move _33, move _35); // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb15: {
        _36 = const 0_usize;             // scope 1 at ui/range_inclusive.rs:24:21: 24:22
        _37 = RangeInclusive::<usize>::new(const 0_usize, const 10_usize) -> bb16; // scope 6 at ui/range_inclusive.rs:25:17: 25:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:25:17: 25:29
                                         // + literal: Const { ty: fn(usize, usize) -> RangeInclusive<usize> {RangeInclusive::<usize>::new}, val: Value(<ZST>) }
    }

    bb16: {
        _39 = move _37;                  // scope 7 at ui/range_inclusive.rs:26:14: 26:19
        _38 = <RangeInclusive<usize> as IntoIterator>::into_iter(move _39) -> bb17; // scope 7 at ui/range_inclusive.rs:26:14: 26:19
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:26:14: 26:19
                                         // + literal: Const { ty: fn(RangeInclusive<usize>) -> <RangeInclusive<usize> as IntoIterator>::IntoIter {<RangeInclusive<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb17: {
        _40 = move _38;                  // scope 7 at ui/range_inclusive.rs:26:14: 26:19
        goto -> bb18;                    // scope 8 at ui/range_inclusive.rs:26:5: 29:6
    }

    bb18: {
        _43 = &mut _40;                  // scope 8 at ui/range_inclusive.rs:26:14: 26:19
        _42 = &mut (*_43);               // scope 8 at ui/range_inclusive.rs:26:14: 26:19
        _41 = <RangeInclusive<usize> as Iterator>::next(move _42) -> bb19; // scope 8 at ui/range_inclusive.rs:26:14: 26:19
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:26:14: 26:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<usize>) -> Option<<RangeInclusive<usize> as Iterator>::Item> {<RangeInclusive<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb19: {
        _44 = discriminant(_41);         // scope 8 at ui/range_inclusive.rs:26:14: 26:19
        switchInt(move _44) -> [0: bb22, 1: bb20, otherwise: bb21]; // scope 8 at ui/range_inclusive.rs:26:14: 26:19
    }

    bb20: {
        _45 = ((_41 as Some).0: usize);  // scope 8 at ui/range_inclusive.rs:26:9: 26:10
        _49 = _45;                       // scope 9 at ui/range_inclusive.rs:27:17: 27:18
        _48 = Ge(move _49, const 0_usize); // scope 9 at ui/range_inclusive.rs:27:17: 27:23
        switchInt(move _48) -> [0: bb23, otherwise: bb24]; // scope 9 at ui/range_inclusive.rs:27:17: 27:34
    }

    bb21: {
        unreachable;                     // scope 8 at ui/range_inclusive.rs:26:14: 26:19
    }

    bb22: {
        _56 = &_36;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _869 = const _;                  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[42])) }
        _57 = _869;                      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _55 = (move _56, move _57);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _58 = (_55.0: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _59 = (_55.1: &usize);           // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _62 = (*_58);                    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _63 = const 55_usize;            // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _61 = Eq(move _62, move _63);    // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _60 = Not(move _61);             // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _60) -> [0: bb30, otherwise: bb29]; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb23: {
        _47 = const false;               // scope 9 at ui/range_inclusive.rs:27:17: 27:34
        goto -> bb25;                    // scope 9 at ui/range_inclusive.rs:27:17: 27:34
    }

    bb24: {
        _51 = _45;                       // scope 9 at ui/range_inclusive.rs:27:27: 27:28
        _50 = Le(move _51, const 10_usize); // scope 9 at ui/range_inclusive.rs:27:27: 27:34
        _47 = move _50;                  // scope 9 at ui/range_inclusive.rs:27:17: 27:34
        goto -> bb25;                    // scope 9 at ui/range_inclusive.rs:27:17: 27:34
    }

    bb25: {
        _46 = Not(move _47);             // scope 9 at ui/range_inclusive.rs:27:9: 27:35
        switchInt(move _46) -> [0: bb27, otherwise: bb26]; // scope 9 at ui/range_inclusive.rs:27:9: 27:35
    }

    bb26: {
        _52 = core::panicking::panic(const "assertion failed: i >= 0 && i <= 10"); // scope 9 at ui/range_inclusive.rs:27:9: 27:35
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:27:9: 27:35
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb27: {
        _53 = _45;                       // scope 9 at ui/range_inclusive.rs:28:18: 28:19
        _54 = CheckedAdd(_36, _53);      // scope 9 at ui/range_inclusive.rs:28:9: 28:19
        assert(!move (_54.1: bool), "attempt to compute `{} + {}`, which would overflow", _36, move _53) -> bb28; // scope 9 at ui/range_inclusive.rs:28:9: 28:19
    }

    bb28: {
        _36 = move (_54.0: usize);       // scope 9 at ui/range_inclusive.rs:28:9: 28:19
        goto -> bb18;                    // scope 8 at ui/range_inclusive.rs:26:5: 29:6
    }

    bb29: {
        _64 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _66 = const core::panicking::AssertKind::Eq; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _68 = _58;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _67 = _68;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _70 = _59;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _69 = _70;                       // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _71 = Option::<Arguments<'_>>::None; // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _65 = core::panicking::assert_failed::<usize, usize>(move _66, move _67, move _69, move _71); // scope 11 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb30: {
        _72 = const 0_usize;             // scope 7 at ui/range_inclusive.rs:32:21: 32:22
        _75 = RangeInclusive::<usize>::new(const 0_usize, const 10_usize) -> bb31; // scope 12 at ui/range_inclusive.rs:33:14: 33:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:33:15: 33:27
                                         // + literal: Const { ty: fn(usize, usize) -> RangeInclusive<usize> {RangeInclusive::<usize>::new}, val: Value(<ZST>) }
    }

    bb31: {
        _74 = <RangeInclusive<usize> as Iterator>::step_by(move _75, const 2_usize) -> bb32; // scope 12 at ui/range_inclusive.rs:33:14: 33:39
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:33:29: 33:36
                                         // + literal: Const { ty: fn(RangeInclusive<usize>, usize) -> StepBy<RangeInclusive<usize>> {<RangeInclusive<usize> as Iterator>::step_by}, val: Value(<ZST>) }
    }

    bb32: {
        _73 = <StepBy<RangeInclusive<usize>> as IntoIterator>::into_iter(move _74) -> bb33; // scope 12 at ui/range_inclusive.rs:33:14: 33:39
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:33:14: 33:39
                                         // + literal: Const { ty: fn(StepBy<RangeInclusive<usize>>) -> <StepBy<RangeInclusive<usize>> as IntoIterator>::IntoIter {<StepBy<RangeInclusive<usize>> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb33: {
        _76 = move _73;                  // scope 12 at ui/range_inclusive.rs:33:14: 33:39
        goto -> bb34;                    // scope 13 at ui/range_inclusive.rs:33:5: 36:6
    }

    bb34: {
        _79 = &mut _76;                  // scope 13 at ui/range_inclusive.rs:33:14: 33:39
        _78 = &mut (*_79);               // scope 13 at ui/range_inclusive.rs:33:14: 33:39
        _77 = <StepBy<RangeInclusive<usize>> as Iterator>::next(move _78) -> bb35; // scope 13 at ui/range_inclusive.rs:33:14: 33:39
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:33:14: 33:39
                                         // + literal: Const { ty: for<'a> fn(&'a mut StepBy<RangeInclusive<usize>>) -> Option<<StepBy<RangeInclusive<usize>> as Iterator>::Item> {<StepBy<RangeInclusive<usize>> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb35: {
        _80 = discriminant(_77);         // scope 13 at ui/range_inclusive.rs:33:14: 33:39
        switchInt(move _80) -> [0: bb38, 1: bb36, otherwise: bb37]; // scope 13 at ui/range_inclusive.rs:33:14: 33:39
    }

    bb36: {
        _81 = ((_77 as Some).0: usize);  // scope 13 at ui/range_inclusive.rs:33:9: 33:10
        _86 = _81;                       // scope 14 at ui/range_inclusive.rs:34:17: 34:18
        _85 = Ge(move _86, const 0_usize); // scope 14 at ui/range_inclusive.rs:34:17: 34:23
        switchInt(move _85) -> [0: bb42, otherwise: bb43]; // scope 14 at ui/range_inclusive.rs:34:17: 34:34
    }

    bb37: {
        unreachable;                     // scope 13 at ui/range_inclusive.rs:33:14: 33:39
    }

    bb38: {
        _96 = &_72;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _868 = const _;                  // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[41])) }
        _97 = _868;                      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _95 = (move _96, move _97);      // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _98 = (_95.0: &usize);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _99 = (_95.1: &usize);           // scope 12 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _102 = (*_98);                   // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _103 = const 30_usize;           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _101 = Eq(move _102, move _103); // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _100 = Not(move _101);           // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _100) -> [0: bb49, otherwise: bb48]; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb39: {
        _83 = const false;               // scope 14 at ui/range_inclusive.rs:34:17: 34:48
        goto -> bb41;                    // scope 14 at ui/range_inclusive.rs:34:17: 34:48
    }

    bb40: {
        _91 = _81;                       // scope 14 at ui/range_inclusive.rs:34:38: 34:39
        _90 = Rem(move _91, const 2_usize); // scope 14 at ui/range_inclusive.rs:34:38: 34:43
        _89 = Eq(move _90, const 0_usize); // scope 14 at ui/range_inclusive.rs:34:38: 34:48
        _83 = move _89;                  // scope 14 at ui/range_inclusive.rs:34:17: 34:48
        goto -> bb41;                    // scope 14 at ui/range_inclusive.rs:34:17: 34:48
    }

    bb41: {
        _82 = Not(move _83);             // scope 14 at ui/range_inclusive.rs:34:9: 34:49
        switchInt(move _82) -> [0: bb46, otherwise: bb45]; // scope 14 at ui/range_inclusive.rs:34:9: 34:49
    }

    bb42: {
        _84 = const false;               // scope 14 at ui/range_inclusive.rs:34:17: 34:34
        goto -> bb44;                    // scope 14 at ui/range_inclusive.rs:34:17: 34:34
    }

    bb43: {
        _88 = _81;                       // scope 14 at ui/range_inclusive.rs:34:27: 34:28
        _87 = Le(move _88, const 10_usize); // scope 14 at ui/range_inclusive.rs:34:27: 34:34
        _84 = move _87;                  // scope 14 at ui/range_inclusive.rs:34:17: 34:34
        goto -> bb44;                    // scope 14 at ui/range_inclusive.rs:34:17: 34:34
    }

    bb44: {
        switchInt(move _84) -> [0: bb39, otherwise: bb40]; // scope 14 at ui/range_inclusive.rs:34:17: 34:48
    }

    bb45: {
        _92 = core::panicking::panic(const "assertion failed: i >= 0 && i <= 10 && i % 2 == 0"); // scope 14 at ui/range_inclusive.rs:34:9: 34:49
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:34:9: 34:49
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb46: {
        _93 = _81;                       // scope 14 at ui/range_inclusive.rs:35:18: 35:19
        _94 = CheckedAdd(_72, _93);      // scope 14 at ui/range_inclusive.rs:35:9: 35:19
        assert(!move (_94.1: bool), "attempt to compute `{} + {}`, which would overflow", _72, move _93) -> bb47; // scope 14 at ui/range_inclusive.rs:35:9: 35:19
    }

    bb47: {
        _72 = move (_94.0: usize);       // scope 14 at ui/range_inclusive.rs:35:9: 35:19
        goto -> bb34;                    // scope 13 at ui/range_inclusive.rs:33:5: 36:6
    }

    bb48: {
        _104 = const core::panicking::AssertKind::Eq; // scope 15 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _106 = const core::panicking::AssertKind::Eq; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _108 = _98;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _107 = _108;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _110 = _99;                      // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _109 = _110;                     // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _111 = Option::<Arguments<'_>>::None; // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _105 = core::panicking::assert_failed::<usize, usize>(move _106, move _107, move _109, move _111); // scope 16 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb49: {
        _113 = const 5_usize;            // scope 12 at ui/range_inclusive.rs:39:23: 39:28
        _112 = RangeInclusive::<usize>::new(const 0_usize, move _113) -> bb50; // scope 12 at ui/range_inclusive.rs:39:13: 39:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:39:13: 39:28
                                         // + literal: Const { ty: fn(usize, usize) -> RangeInclusive<usize> {RangeInclusive::<usize>::new}, val: Value(<ZST>) }
    }

    bb50: {
        _115 = foo() -> bb51;            // scope 17 at ui/range_inclusive.rs:40:17: 40:22
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:40:17: 40:20
                                         // + literal: Const { ty: fn() -> isize {foo}, val: Value(<ZST>) }
    }

    bb51: {
        _114 = RangeInclusive::<isize>::new(const 0_isize, move _115) -> bb52; // scope 17 at ui/range_inclusive.rs:40:13: 40:22
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:40:13: 40:22
                                         // + literal: Const { ty: fn(isize, isize) -> RangeInclusive<isize> {RangeInclusive::<isize>::new}, val: Value(<ZST>) }
    }

    bb52: {
        _867 = const _;                  // scope 18 at ui/range_inclusive.rs:42:15: 42:18
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:42:15: 42:18
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[40])) }
        _117 = _867;                     // scope 18 at ui/range_inclusive.rs:42:15: 42:18
        _866 = const _;                  // scope 18 at ui/range_inclusive.rs:42:21: 42:25
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:42:21: 42:25
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[39])) }
        _119 = _866;                     // scope 18 at ui/range_inclusive.rs:42:21: 42:25
        _118 = _119;                     // scope 18 at ui/range_inclusive.rs:42:21: 42:25
        _116 = RangeInclusive::<&i32>::new(move _117, move _118) -> bb53; // scope 18 at ui/range_inclusive.rs:42:15: 42:25
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:42:15: 42:25
                                         // + literal: Const { ty: fn(&i32, &i32) -> RangeInclusive<&i32> {RangeInclusive::<&i32>::new}, val: Value(<ZST>) }
    }

    bb53: {
        _865 = const _;                  // scope 20 at ui/range_inclusive.rs:46:13: 46:16
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:46:13: 46:16
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[38])) }
        _120 = _865;                     // scope 20 at ui/range_inclusive.rs:46:13: 46:16
        _121 = const 42_i32;             // scope 21 at ui/range_inclusive.rs:48:17: 48:19
        _123 = _120;                     // scope 22 at ui/range_inclusive.rs:49:17: 49:18
        _125 = &_121;                    // scope 22 at ui/range_inclusive.rs:49:21: 49:23
        _124 = _125;                     // scope 22 at ui/range_inclusive.rs:49:21: 49:23
        _122 = RangeInclusive::<&i32>::new(move _123, move _124) -> bb54; // scope 22 at ui/range_inclusive.rs:49:17: 49:23
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:49:17: 49:23
                                         // + literal: Const { ty: fn(&i32, &i32) -> RangeInclusive<&i32> {RangeInclusive::<&i32>::new}, val: Value(<ZST>) }
    }

    bb54: {
        _127 = RangeInclusive::<i32>::new(const 0_i32, const 10_i32) -> bb55; // scope 21 at ui/range_inclusive.rs:53:15: 53:23
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:53:16: 53:22
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb55: {
        _126 = <RangeInclusive<i32> as Iterator>::collect::<Vec<i32>>(move _127) -> bb56; // scope 21 at ui/range_inclusive.rs:53:15: 53:43
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:53:24: 53:31
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(RangeInclusive<i32>) -> Vec<i32> {<RangeInclusive<i32> as Iterator>::collect::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb56: {
        _131 = &_126;                    // scope 24 at ui/range_inclusive.rs:54:25: 54:28
        _130 = <Vec<i32> as Deref>::deref(move _131) -> [return: bb57, unwind: bb236]; // scope 24 at ui/range_inclusive.rs:54:24: 54:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:54:24: 54:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> &'a <Vec<i32> as Deref>::Target {<Vec<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb57: {
        _129 = _130;                     // scope 24 at ui/range_inclusive.rs:54:23: 54:28
        _128 = _129;                     // scope 24 at ui/range_inclusive.rs:54:23: 54:28
        _132 = <String as From<&str>>::from(const "hello world") -> [return: bb58, unwind: bb236]; // scope 25 at ui/range_inclusive.rs:55:18: 55:45
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:55:18: 55:30
                                         // + user_ty: UserType(3)
                                         // + literal: Const { ty: fn(&str) -> String {<String as From<&str>>::from}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:55:31: 55:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb58: {
        _133 = const "hello world";      // scope 26 at ui/range_inclusive.rs:56:16: 56:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:56:16: 56:29
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _138 = &_126;                    // scope 27 at ui/range_inclusive.rs:58:17: 58:20
        _139 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb59, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:58:21: 58:26
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:58:21: 58:26
                                         // + literal: Const { ty: fn(usize, usize) -> RangeInclusive<usize> {RangeInclusive::<usize>::new}, val: Value(<ZST>) }
    }

    bb59: {
        _137 = <Vec<i32> as Index<RangeInclusive<usize>>>::index(move _138, move _139) -> [return: bb60, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:58:17: 58:27
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:58:17: 58:27
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, RangeInclusive<usize>) -> &'a <Vec<i32> as Index<RangeInclusive<usize>>>::Output {<Vec<i32> as Index<RangeInclusive<usize>>>::index}, val: Value(<ZST>) }
    }

    bb60: {
        _136 = _137;                     // scope 27 at ui/range_inclusive.rs:58:16: 58:27
        _135 = &_136;                    // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _864 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[i32; 4], val: Unevaluated(main, [], Some(promoted[37])) }
        _140 = _864;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _134 = (move _135, move _140);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _141 = (_134.0: &&[i32]);        // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _142 = (_134.1: &&[i32; 4]);     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _145 = _141;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _146 = _142;                     // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _144 = <&[i32] as PartialEq<&[i32; 4]>>::eq(move _145, move _146) -> [return: bb61, unwind: bb235]; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[i32], &'b &[i32; 4]) -> bool {<&[i32] as PartialEq<&[i32; 4]>>::eq}, val: Value(<ZST>) }
    }

    bb61: {
        _143 = Not(move _144);           // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _143) -> [0: bb63, otherwise: bb62]; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb62: {
        _147 = const core::panicking::AssertKind::Eq; // scope 28 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _149 = const core::panicking::AssertKind::Eq; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _151 = _141;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _150 = _151;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _153 = _142;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _152 = _153;                     // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _154 = Option::<Arguments<'_>>::None; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _148 = core::panicking::assert_failed::<&[i32], &[i32; 4]>(move _149, move _150, move _152, move _154) -> bb235; // scope 29 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[i32], &'b &[i32; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[i32], &[i32; 4]>}, val: Value(<ZST>) }
    }

    bb63: {
        _159 = &_126;                    // scope 27 at ui/range_inclusive.rs:59:17: 59:20
        _160 = const RangeToInclusive::<usize> {{ end: 6_usize }}; // scope 27 at ui/range_inclusive.rs:59:22: 59:26
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:59:22: 59:26
                                         // + literal: Const { ty: RangeToInclusive<usize>, val: Value(Scalar(0x0000000000000006)) }
        _158 = <Vec<i32> as Index<RangeToInclusive<usize>>>::index(move _159, move _160) -> [return: bb64, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:59:17: 59:27
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:59:17: 59:27
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>, RangeToInclusive<usize>) -> &'a <Vec<i32> as Index<RangeToInclusive<usize>>>::Output {<Vec<i32> as Index<RangeToInclusive<usize>>>::index}, val: Value(<ZST>) }
    }

    bb64: {
        _157 = _158;                     // scope 27 at ui/range_inclusive.rs:59:16: 59:27
        _156 = &_157;                    // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _863 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[i32; 7], val: Unevaluated(main, [], Some(promoted[36])) }
        _161 = _863;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _155 = (move _156, move _161);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _162 = (_155.0: &&[i32]);        // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _163 = (_155.1: &&[i32; 7]);     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _166 = _162;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _167 = _163;                     // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _165 = <&[i32] as PartialEq<&[i32; 7]>>::eq(move _166, move _167) -> [return: bb65, unwind: bb235]; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[i32], &'b &[i32; 7]) -> bool {<&[i32] as PartialEq<&[i32; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb65: {
        _164 = Not(move _165);           // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _164) -> [0: bb67, otherwise: bb66]; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb66: {
        _168 = const core::panicking::AssertKind::Eq; // scope 30 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _170 = const core::panicking::AssertKind::Eq; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _172 = _162;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _171 = _172;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _174 = _163;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _173 = _174;                     // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _175 = Option::<Arguments<'_>>::None; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _169 = core::panicking::assert_failed::<&[i32], &[i32; 7]>(move _170, move _171, move _173, move _175) -> bb235; // scope 31 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[i32], &'b &[i32; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[i32], &[i32; 7]>}, val: Value(<ZST>) }
    }

    bb67: {
        _180 = _128;                     // scope 27 at ui/range_inclusive.rs:61:17: 61:22
        _181 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb68, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:61:23: 61:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:61:23: 61:28
                                         // + literal: Const { ty: fn(usize, usize) -> RangeInclusive<usize> {RangeInclusive::<usize>::new}, val: Value(<ZST>) }
    }

    bb68: {
        _179 = <[i32] as Index<RangeInclusive<usize>>>::index(move _180, move _181) -> [return: bb69, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:61:17: 61:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:61:17: 61:29
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], RangeInclusive<usize>) -> &'a <[i32] as Index<RangeInclusive<usize>>>::Output {<[i32] as Index<RangeInclusive<usize>>>::index}, val: Value(<ZST>) }
    }

    bb69: {
        _178 = _179;                     // scope 27 at ui/range_inclusive.rs:61:16: 61:29
        _177 = &_178;                    // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _862 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[i32; 4], val: Unevaluated(main, [], Some(promoted[35])) }
        _182 = _862;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _176 = (move _177, move _182);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _183 = (_176.0: &&[i32]);        // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _184 = (_176.1: &&[i32; 4]);     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _187 = _183;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _188 = _184;                     // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _186 = <&[i32] as PartialEq<&[i32; 4]>>::eq(move _187, move _188) -> [return: bb70, unwind: bb235]; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[i32], &'b &[i32; 4]) -> bool {<&[i32] as PartialEq<&[i32; 4]>>::eq}, val: Value(<ZST>) }
    }

    bb70: {
        _185 = Not(move _186);           // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _185) -> [0: bb72, otherwise: bb71]; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb71: {
        _189 = const core::panicking::AssertKind::Eq; // scope 32 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _191 = const core::panicking::AssertKind::Eq; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _193 = _183;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _192 = _193;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _195 = _184;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _194 = _195;                     // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _196 = Option::<Arguments<'_>>::None; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _190 = core::panicking::assert_failed::<&[i32], &[i32; 4]>(move _191, move _192, move _194, move _196) -> bb235; // scope 33 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[i32], &'b &[i32; 4], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[i32], &[i32; 4]>}, val: Value(<ZST>) }
    }

    bb72: {
        _201 = _128;                     // scope 27 at ui/range_inclusive.rs:62:17: 62:22
        _202 = const RangeToInclusive::<usize> {{ end: 6_usize }}; // scope 27 at ui/range_inclusive.rs:62:24: 62:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:62:24: 62:28
                                         // + literal: Const { ty: RangeToInclusive<usize>, val: Value(Scalar(0x0000000000000006)) }
        _200 = <[i32] as Index<RangeToInclusive<usize>>>::index(move _201, move _202) -> [return: bb73, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:62:17: 62:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:62:17: 62:29
                                         // + literal: Const { ty: for<'a> fn(&'a [i32], RangeToInclusive<usize>) -> &'a <[i32] as Index<RangeToInclusive<usize>>>::Output {<[i32] as Index<RangeToInclusive<usize>>>::index}, val: Value(<ZST>) }
    }

    bb73: {
        _199 = _200;                     // scope 27 at ui/range_inclusive.rs:62:16: 62:29
        _198 = &_199;                    // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _861 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&[i32; 7], val: Unevaluated(main, [], Some(promoted[34])) }
        _203 = _861;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _197 = (move _198, move _203);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _204 = (_197.0: &&[i32]);        // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _205 = (_197.1: &&[i32; 7]);     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _208 = _204;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _209 = _205;                     // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _207 = <&[i32] as PartialEq<&[i32; 7]>>::eq(move _208, move _209) -> [return: bb74, unwind: bb235]; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &[i32], &'b &[i32; 7]) -> bool {<&[i32] as PartialEq<&[i32; 7]>>::eq}, val: Value(<ZST>) }
    }

    bb74: {
        _206 = Not(move _207);           // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _206) -> [0: bb76, otherwise: bb75]; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb75: {
        _210 = const core::panicking::AssertKind::Eq; // scope 34 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _212 = const core::panicking::AssertKind::Eq; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _214 = _204;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _213 = _214;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _216 = _205;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _215 = _216;                     // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _217 = Option::<Arguments<'_>>::None; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _211 = core::panicking::assert_failed::<&[i32], &[i32; 7]>(move _212, move _213, move _215, move _217) -> bb235; // scope 35 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &[i32], &'b &[i32; 7], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&[i32], &[i32; 7]>}, val: Value(<ZST>) }
    }

    bb76: {
        _222 = &_132;                    // scope 27 at ui/range_inclusive.rs:64:17: 64:23
        _223 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb77, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:64:24: 64:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:64:24: 64:29
                                         // + literal: Const { ty: fn(usize, usize) -> RangeInclusive<usize> {RangeInclusive::<usize>::new}, val: Value(<ZST>) }
    }

    bb77: {
        _221 = <String as Index<RangeInclusive<usize>>>::index(move _222, move _223) -> [return: bb78, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:64:17: 64:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:64:17: 64:30
                                         // + literal: Const { ty: for<'a> fn(&'a String, RangeInclusive<usize>) -> &'a <String as Index<RangeInclusive<usize>>>::Output {<String as Index<RangeInclusive<usize>>>::index}, val: Value(<ZST>) }
    }

    bb78: {
        _220 = _221;                     // scope 27 at ui/range_inclusive.rs:64:16: 64:30
        _219 = &_220;                    // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _860 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[33])) }
        _224 = _860;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _218 = (move _219, move _224);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _225 = (_218.0: &&str);          // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _226 = (_218.1: &&str);          // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _229 = _225;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _230 = _226;                     // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _228 = <&str as PartialEq>::eq(move _229, move _230) -> [return: bb79, unwind: bb235]; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb79: {
        _227 = Not(move _228);           // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _227) -> [0: bb81, otherwise: bb80]; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb80: {
        _231 = const core::panicking::AssertKind::Eq; // scope 36 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _233 = const core::panicking::AssertKind::Eq; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _235 = _225;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _234 = _235;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _237 = _226;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _236 = _237;                     // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _238 = Option::<Arguments<'_>>::None; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _232 = core::panicking::assert_failed::<&str, &str>(move _233, move _234, move _236, move _238) -> bb235; // scope 37 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb81: {
        _243 = &_132;                    // scope 27 at ui/range_inclusive.rs:65:17: 65:23
        _244 = const RangeToInclusive::<usize> {{ end: 6_usize }}; // scope 27 at ui/range_inclusive.rs:65:25: 65:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:65:25: 65:29
                                         // + literal: Const { ty: RangeToInclusive<usize>, val: Value(Scalar(0x0000000000000006)) }
        _242 = <String as Index<RangeToInclusive<usize>>>::index(move _243, move _244) -> [return: bb82, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:65:17: 65:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:65:17: 65:30
                                         // + literal: Const { ty: for<'a> fn(&'a String, RangeToInclusive<usize>) -> &'a <String as Index<RangeToInclusive<usize>>>::Output {<String as Index<RangeToInclusive<usize>>>::index}, val: Value(<ZST>) }
    }

    bb82: {
        _241 = _242;                     // scope 27 at ui/range_inclusive.rs:65:16: 65:30
        _240 = &_241;                    // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _859 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[32])) }
        _245 = _859;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _239 = (move _240, move _245);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _246 = (_239.0: &&str);          // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _247 = (_239.1: &&str);          // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _250 = _246;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _251 = _247;                     // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _249 = <&str as PartialEq>::eq(move _250, move _251) -> [return: bb83, unwind: bb235]; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb83: {
        _248 = Not(move _249);           // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _248) -> [0: bb85, otherwise: bb84]; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb84: {
        _252 = const core::panicking::AssertKind::Eq; // scope 38 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _254 = const core::panicking::AssertKind::Eq; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _256 = _246;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _255 = _256;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _258 = _247;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _257 = _258;                     // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _259 = Option::<Arguments<'_>>::None; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _253 = core::panicking::assert_failed::<&str, &str>(move _254, move _255, move _257, move _259) -> bb235; // scope 39 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb85: {
        _264 = _133;                     // scope 27 at ui/range_inclusive.rs:67:17: 67:21
        _265 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb86, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:67:22: 67:27
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:67:22: 67:27
                                         // + literal: Const { ty: fn(usize, usize) -> RangeInclusive<usize> {RangeInclusive::<usize>::new}, val: Value(<ZST>) }
    }

    bb86: {
        _263 = <str as Index<RangeInclusive<usize>>>::index(move _264, move _265) -> [return: bb87, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:67:17: 67:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:67:17: 67:28
                                         // + literal: Const { ty: for<'a> fn(&'a str, RangeInclusive<usize>) -> &'a <str as Index<RangeInclusive<usize>>>::Output {<str as Index<RangeInclusive<usize>>>::index}, val: Value(<ZST>) }
    }

    bb87: {
        _262 = _263;                     // scope 27 at ui/range_inclusive.rs:67:16: 67:28
        _261 = &_262;                    // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _858 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[31])) }
        _266 = _858;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _260 = (move _261, move _266);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _267 = (_260.0: &&str);          // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _268 = (_260.1: &&str);          // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _271 = _267;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _272 = _268;                     // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _270 = <&str as PartialEq>::eq(move _271, move _272) -> [return: bb88, unwind: bb235]; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb88: {
        _269 = Not(move _270);           // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _269) -> [0: bb90, otherwise: bb89]; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb89: {
        _273 = const core::panicking::AssertKind::Eq; // scope 40 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _275 = const core::panicking::AssertKind::Eq; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _277 = _267;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _276 = _277;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _279 = _268;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _278 = _279;                     // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _280 = Option::<Arguments<'_>>::None; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _274 = core::panicking::assert_failed::<&str, &str>(move _275, move _276, move _278, move _280) -> bb235; // scope 41 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb90: {
        _285 = _133;                     // scope 27 at ui/range_inclusive.rs:68:17: 68:21
        _286 = const RangeToInclusive::<usize> {{ end: 6_usize }}; // scope 27 at ui/range_inclusive.rs:68:23: 68:27
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:68:23: 68:27
                                         // + literal: Const { ty: RangeToInclusive<usize>, val: Value(Scalar(0x0000000000000006)) }
        _284 = <str as Index<RangeToInclusive<usize>>>::index(move _285, move _286) -> [return: bb91, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:68:17: 68:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:68:17: 68:28
                                         // + literal: Const { ty: for<'a> fn(&'a str, RangeToInclusive<usize>) -> &'a <str as Index<RangeToInclusive<usize>>>::Output {<str as Index<RangeToInclusive<usize>>>::index}, val: Value(<ZST>) }
    }

    bb91: {
        _283 = _284;                     // scope 27 at ui/range_inclusive.rs:68:16: 68:28
        _282 = &_283;                    // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _857 = const _;                  // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[30])) }
        _287 = _857;                     // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _281 = (move _282, move _287);   // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _288 = (_281.0: &&str);          // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _289 = (_281.1: &&str);          // scope 27 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _292 = _288;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _293 = _289;                     // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _291 = <&str as PartialEq>::eq(move _292, move _293) -> [return: bb92, unwind: bb235]; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb92: {
        _290 = Not(move _291);           // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _290) -> [0: bb94, otherwise: bb93]; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb93: {
        _294 = const core::panicking::AssertKind::Eq; // scope 42 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _296 = const core::panicking::AssertKind::Eq; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _298 = _288;                     // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _297 = _298;                     // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _300 = _289;                     // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _299 = _300;                     // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _301 = Option::<Arguments<'_>>::None; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _295 = core::panicking::assert_failed::<&str, &str>(move _296, move _297, move _299, move _301) -> bb235; // scope 43 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb94: {
        _302 = RangeInclusive::<u8>::new(const 0_u8, const u8::MAX) -> [return: bb95, unwind: bb235]; // scope 27 at ui/range_inclusive.rs:71:20: 71:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:71:20: 71:29
                                         // + literal: Const { ty: fn(u8, u8) -> RangeInclusive<u8> {RangeInclusive::<u8>::new}, val: Value(<ZST>) }
    }

    bb95: {
        _303 = RangeInclusive::<u8>::new(const 42_u8, const 42_u8) -> [return: bb96, unwind: bb235]; // scope 44 at ui/range_inclusive.rs:72:21: 72:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:72:21: 72:30
                                         // + literal: Const { ty: fn(u8, u8) -> RangeInclusive<u8> {RangeInclusive::<u8>::new}, val: Value(<ZST>) }
    }

    bb96: {
        _307 = &_302;                    // scope 45 at ui/range_inclusive.rs:73:16: 73:32
        _306 = <RangeInclusive<u8> as Iterator>::size_hint(move _307) -> [return: bb97, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:73:16: 73:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:73:21: 73:30
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> (usize, Option<usize>) {<RangeInclusive<u8> as Iterator>::size_hint}, val: Value(<ZST>) }
    }

    bb97: {
        _305 = &_306;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _856 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(usize, Option<usize>), val: Unevaluated(main, [], Some(promoted[29])) }
        _308 = _856;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _304 = (move _305, move _308);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _309 = (_304.0: &(usize, std::option::Option<usize>)); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _310 = (_304.1: &(usize, std::option::Option<usize>)); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _313 = _309;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _314 = _310;                     // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _312 = <(usize, Option<usize>) as PartialEq>::eq(move _313, move _314) -> [return: bb98, unwind: bb235]; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (usize, Option<usize>), &'b (usize, Option<usize>)) -> bool {<(usize, Option<usize>) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb98: {
        _311 = Not(move _312);           // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _311) -> [0: bb100, otherwise: bb99]; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb99: {
        _315 = const core::panicking::AssertKind::Eq; // scope 46 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _317 = const core::panicking::AssertKind::Eq; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _319 = _309;                     // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _318 = _319;                     // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _321 = _310;                     // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _320 = _321;                     // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _322 = Option::<Arguments<'_>>::None; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _316 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _317, move _318, move _320, move _322) -> bb235; // scope 47 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (usize, Option<usize>), &'b (usize, Option<usize>), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>}, val: Value(<ZST>) }
    }

    bb100: {
        _326 = &_303;                    // scope 45 at ui/range_inclusive.rs:74:16: 74:33
        _325 = <RangeInclusive<u8> as Iterator>::size_hint(move _326) -> [return: bb101, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:74:16: 74:33
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:74:22: 74:31
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> (usize, Option<usize>) {<RangeInclusive<u8> as Iterator>::size_hint}, val: Value(<ZST>) }
    }

    bb101: {
        _324 = &_325;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _855 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(usize, Option<usize>), val: Unevaluated(main, [], Some(promoted[28])) }
        _327 = _855;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _323 = (move _324, move _327);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _328 = (_323.0: &(usize, std::option::Option<usize>)); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _329 = (_323.1: &(usize, std::option::Option<usize>)); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _332 = _328;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _333 = _329;                     // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _331 = <(usize, Option<usize>) as PartialEq>::eq(move _332, move _333) -> [return: bb102, unwind: bb235]; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (usize, Option<usize>), &'b (usize, Option<usize>)) -> bool {<(usize, Option<usize>) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb102: {
        _330 = Not(move _331);           // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _330) -> [0: bb104, otherwise: bb103]; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb103: {
        _334 = const core::panicking::AssertKind::Eq; // scope 48 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _336 = const core::panicking::AssertKind::Eq; // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _338 = _328;                     // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _337 = _338;                     // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _340 = _329;                     // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _339 = _340;                     // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _341 = Option::<Arguments<'_>>::None; // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _335 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _336, move _337, move _339, move _341) -> bb235; // scope 49 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (usize, Option<usize>), &'b (usize, Option<usize>), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>}, val: Value(<ZST>) }
    }

    bb104: {
        _343 = &mut _302;                // scope 45 at ui/range_inclusive.rs:75:5: 75:16
        _342 = <RangeInclusive<u8> as Iterator>::next(move _343) -> [return: bb105, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:75:5: 75:16
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:75:10: 75:14
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb105: {
        _345 = &mut _303;                // scope 45 at ui/range_inclusive.rs:76:5: 76:17
        _344 = <RangeInclusive<u8> as Iterator>::next(move _345) -> [return: bb106, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:76:5: 76:17
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:76:11: 76:15
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb106: {
        _349 = &_302;                    // scope 45 at ui/range_inclusive.rs:77:16: 77:32
        _348 = <RangeInclusive<u8> as Iterator>::size_hint(move _349) -> [return: bb107, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:77:16: 77:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:77:21: 77:30
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> (usize, Option<usize>) {<RangeInclusive<u8> as Iterator>::size_hint}, val: Value(<ZST>) }
    }

    bb107: {
        _347 = &_348;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _854 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(usize, Option<usize>), val: Unevaluated(main, [], Some(promoted[27])) }
        _350 = _854;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _346 = (move _347, move _350);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _351 = (_346.0: &(usize, std::option::Option<usize>)); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _352 = (_346.1: &(usize, std::option::Option<usize>)); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _355 = _351;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _356 = _352;                     // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _354 = <(usize, Option<usize>) as PartialEq>::eq(move _355, move _356) -> [return: bb108, unwind: bb235]; // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (usize, Option<usize>), &'b (usize, Option<usize>)) -> bool {<(usize, Option<usize>) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb108: {
        _353 = Not(move _354);           // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _353) -> [0: bb110, otherwise: bb109]; // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb109: {
        _357 = const core::panicking::AssertKind::Eq; // scope 50 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _359 = const core::panicking::AssertKind::Eq; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _361 = _351;                     // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _360 = _361;                     // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _363 = _352;                     // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _362 = _363;                     // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _364 = Option::<Arguments<'_>>::None; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _358 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _359, move _360, move _362, move _364) -> bb235; // scope 51 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (usize, Option<usize>), &'b (usize, Option<usize>), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>}, val: Value(<ZST>) }
    }

    bb110: {
        _368 = &_303;                    // scope 45 at ui/range_inclusive.rs:78:16: 78:33
        _367 = <RangeInclusive<u8> as Iterator>::size_hint(move _368) -> [return: bb111, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:78:16: 78:33
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:78:22: 78:31
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> (usize, Option<usize>) {<RangeInclusive<u8> as Iterator>::size_hint}, val: Value(<ZST>) }
    }

    bb111: {
        _366 = &_367;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _853 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &(usize, Option<usize>), val: Unevaluated(main, [], Some(promoted[26])) }
        _369 = _853;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _365 = (move _366, move _369);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _370 = (_365.0: &(usize, std::option::Option<usize>)); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _371 = (_365.1: &(usize, std::option::Option<usize>)); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _374 = _370;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _375 = _371;                     // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _373 = <(usize, Option<usize>) as PartialEq>::eq(move _374, move _375) -> [return: bb112, unwind: bb235]; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a (usize, Option<usize>), &'b (usize, Option<usize>)) -> bool {<(usize, Option<usize>) as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb112: {
        _372 = Not(move _373);           // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _372) -> [0: bb114, otherwise: bb113]; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb113: {
        _376 = const core::panicking::AssertKind::Eq; // scope 52 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _378 = const core::panicking::AssertKind::Eq; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _380 = _370;                     // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _379 = _380;                     // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _382 = _371;                     // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _381 = _382;                     // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _383 = Option::<Arguments<'_>>::None; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _377 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _378, move _379, move _381, move _383) -> bb235; // scope 53 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a (usize, Option<usize>), &'b (usize, Option<usize>), Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>}, val: Value(<ZST>) }
    }

    bb114: {
        _386 = &_303;                    // scope 45 at ui/range_inclusive.rs:79:13: 79:29
        _385 = RangeInclusive::<u8>::is_empty(move _386) -> [return: bb115, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:79:13: 79:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:79:19: 79:27
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> bool {RangeInclusive::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb115: {
        _384 = Not(move _385);           // scope 45 at ui/range_inclusive.rs:79:5: 79:30
        switchInt(move _384) -> [0: bb117, otherwise: bb116]; // scope 45 at ui/range_inclusive.rs:79:5: 79:30
    }

    bb116: {
        _387 = core::panicking::panic(const "assertion failed: short.is_empty()") -> bb235; // scope 45 at ui/range_inclusive.rs:79:5: 79:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:79:5: 79:30
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb117: {
        _391 = &_302;                    // scope 45 at ui/range_inclusive.rs:81:16: 81:26
        _390 = <RangeInclusive<u8> as ExactSizeIterator>::len(move _391) -> [return: bb118, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:81:16: 81:26
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:81:21: 81:24
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> usize {<RangeInclusive<u8> as ExactSizeIterator>::len}, val: Value(<ZST>) }
    }

    bb118: {
        _389 = &_390;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _852 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[25])) }
        _392 = _852;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _388 = (move _389, move _392);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _393 = (_388.0: &usize);         // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _394 = (_388.1: &usize);         // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _397 = (*_393);                  // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _398 = const 255_usize;          // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _396 = Eq(move _397, move _398); // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _395 = Not(move _396);           // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _395) -> [0: bb120, otherwise: bb119]; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb119: {
        _399 = const core::panicking::AssertKind::Eq; // scope 54 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _401 = const core::panicking::AssertKind::Eq; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _403 = _393;                     // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _402 = _403;                     // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _405 = _394;                     // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _404 = _405;                     // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _406 = Option::<Arguments<'_>>::None; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _400 = core::panicking::assert_failed::<usize, usize>(move _401, move _402, move _404, move _406) -> bb235; // scope 55 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb120: {
        _410 = &_303;                    // scope 45 at ui/range_inclusive.rs:82:16: 82:27
        _409 = <RangeInclusive<u8> as ExactSizeIterator>::len(move _410) -> [return: bb121, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:82:16: 82:27
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:82:22: 82:25
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> usize {<RangeInclusive<u8> as ExactSizeIterator>::len}, val: Value(<ZST>) }
    }

    bb121: {
        _408 = &_409;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _851 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[24])) }
        _411 = _851;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _407 = (move _408, move _411);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _412 = (_407.0: &usize);         // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _413 = (_407.1: &usize);         // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _416 = (*_412);                  // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _417 = const 0_usize;            // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _415 = Eq(move _416, move _417); // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _414 = Not(move _415);           // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _414) -> [0: bb123, otherwise: bb122]; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb122: {
        _418 = const core::panicking::AssertKind::Eq; // scope 56 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _420 = const core::panicking::AssertKind::Eq; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _422 = _412;                     // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _421 = _422;                     // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _424 = _413;                     // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _423 = _424;                     // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _425 = Option::<Arguments<'_>>::None; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _419 = core::panicking::assert_failed::<usize, usize>(move _420, move _421, move _423, move _425) -> bb235; // scope 57 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb123: {
        _429 = &mut _302;                // scope 45 at ui/range_inclusive.rs:85:16: 85:32
        _428 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _429) -> [return: bb124, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:85:16: 85:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:85:21: 85:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb124: {
        _427 = &_428;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _850 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[23])) }
        _430 = _850;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _426 = (move _427, move _430);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _431 = (_426.0: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _432 = (_426.1: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _435 = _431;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _436 = _432;                     // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _434 = <Option<u8> as PartialEq>::eq(move _435, move _436) -> [return: bb125, unwind: bb235]; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb125: {
        _433 = Not(move _434);           // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _433) -> [0: bb127, otherwise: bb126]; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb126: {
        _437 = const core::panicking::AssertKind::Eq; // scope 58 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _439 = const core::panicking::AssertKind::Eq; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _441 = _431;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _440 = _441;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _443 = _432;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _442 = _443;                     // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _444 = Option::<Arguments<'_>>::None; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _438 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _439, move _440, move _442, move _444) -> bb235; // scope 59 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb127: {
        _448 = &mut _302;                // scope 45 at ui/range_inclusive.rs:86:16: 86:32
        _447 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _448) -> [return: bb128, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:86:16: 86:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:86:21: 86:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb128: {
        _446 = &_447;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _849 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[22])) }
        _449 = _849;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _445 = (move _446, move _449);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _450 = (_445.0: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _451 = (_445.1: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _454 = _450;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _455 = _451;                     // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _453 = <Option<u8> as PartialEq>::eq(move _454, move _455) -> [return: bb129, unwind: bb235]; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb129: {
        _452 = Not(move _453);           // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _452) -> [0: bb131, otherwise: bb130]; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb130: {
        _456 = const core::panicking::AssertKind::Eq; // scope 60 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _458 = const core::panicking::AssertKind::Eq; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _460 = _450;                     // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _459 = _460;                     // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _462 = _451;                     // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _461 = _462;                     // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _463 = Option::<Arguments<'_>>::None; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _457 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _458, move _459, move _461, move _463) -> bb235; // scope 61 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb131: {
        _467 = &mut _302;                // scope 45 at ui/range_inclusive.rs:87:16: 87:32
        _466 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _467) -> [return: bb132, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:87:16: 87:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:87:21: 87:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb132: {
        _465 = &_466;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _848 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[21])) }
        _468 = _848;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _464 = (move _465, move _468);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _469 = (_464.0: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _470 = (_464.1: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _473 = _469;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _474 = _470;                     // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _472 = <Option<u8> as PartialEq>::eq(move _473, move _474) -> [return: bb133, unwind: bb235]; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb133: {
        _471 = Not(move _472);           // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _471) -> [0: bb135, otherwise: bb134]; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb134: {
        _475 = const core::panicking::AssertKind::Eq; // scope 62 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _477 = const core::panicking::AssertKind::Eq; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _479 = _469;                     // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _478 = _479;                     // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _481 = _470;                     // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _480 = _481;                     // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _482 = Option::<Arguments<'_>>::None; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _476 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _477, move _478, move _480, move _482) -> bb235; // scope 63 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb135: {
        _486 = &mut _302;                // scope 45 at ui/range_inclusive.rs:88:16: 88:27
        _485 = <RangeInclusive<u8> as Iterator>::next(move _486) -> [return: bb136, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:88:16: 88:27
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:88:21: 88:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb136: {
        _484 = &_485;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _847 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[20])) }
        _487 = _847;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _483 = (move _484, move _487);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _488 = (_483.0: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _489 = (_483.1: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _492 = _488;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _493 = _489;                     // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _491 = <Option<u8> as PartialEq>::eq(move _492, move _493) -> [return: bb137, unwind: bb235]; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb137: {
        _490 = Not(move _491);           // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _490) -> [0: bb139, otherwise: bb138]; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb138: {
        _494 = const core::panicking::AssertKind::Eq; // scope 64 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _496 = const core::panicking::AssertKind::Eq; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _498 = _488;                     // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _497 = _498;                     // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _500 = _489;                     // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _499 = _500;                     // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _501 = Option::<Arguments<'_>>::None; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _495 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _496, move _497, move _499, move _501) -> bb235; // scope 65 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb139: {
        _505 = &mut _302;                // scope 45 at ui/range_inclusive.rs:89:16: 89:27
        _504 = <RangeInclusive<u8> as Iterator>::next(move _505) -> [return: bb140, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:89:16: 89:27
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:89:21: 89:25
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb140: {
        _503 = &_504;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _846 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[19])) }
        _506 = _846;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _502 = (move _503, move _506);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _507 = (_502.0: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _508 = (_502.1: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _511 = _507;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _512 = _508;                     // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _510 = <Option<u8> as PartialEq>::eq(move _511, move _512) -> [return: bb141, unwind: bb235]; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb141: {
        _509 = Not(move _510);           // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _509) -> [0: bb143, otherwise: bb142]; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb142: {
        _513 = const core::panicking::AssertKind::Eq; // scope 66 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _515 = const core::panicking::AssertKind::Eq; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _517 = _507;                     // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _516 = _517;                     // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _519 = _508;                     // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _518 = _519;                     // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _520 = Option::<Arguments<'_>>::None; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _514 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _515, move _516, move _518, move _520) -> bb235; // scope 67 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb143: {
        _524 = &mut _302;                // scope 45 at ui/range_inclusive.rs:90:16: 90:32
        _523 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _524) -> [return: bb144, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:90:16: 90:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:90:21: 90:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb144: {
        _522 = &_523;                    // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _845 = const _;                  // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[18])) }
        _525 = _845;                     // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _521 = (move _522, move _525);   // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _526 = (_521.0: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _527 = (_521.1: &std::option::Option<u8>); // scope 45 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _530 = _526;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _531 = _527;                     // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _529 = <Option<u8> as PartialEq>::eq(move _530, move _531) -> [return: bb145, unwind: bb235]; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb145: {
        _528 = Not(move _529);           // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _528) -> [0: bb147, otherwise: bb146]; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb146: {
        _532 = const core::panicking::AssertKind::Eq; // scope 68 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _534 = const core::panicking::AssertKind::Eq; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _536 = _526;                     // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _535 = _536;                     // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _538 = _527;                     // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _537 = _538;                     // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _539 = Option::<Arguments<'_>>::None; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _533 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _534, move _535, move _537, move _539) -> bb235; // scope 69 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb147: {
        _541 = RangeInclusive::<u8>::new(const 3_u8, const 251_u8) -> [return: bb148, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:91:14: 91:21
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:91:14: 91:21
                                         // + literal: Const { ty: fn(u8, u8) -> RangeInclusive<u8> {RangeInclusive::<u8>::new}, val: Value(<ZST>) }
    }

    bb148: {
        _540 = <RangeInclusive<u8> as IntoIterator>::into_iter(move _541) -> [return: bb149, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:91:14: 91:21
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:91:14: 91:21
                                         // + literal: Const { ty: fn(RangeInclusive<u8>) -> <RangeInclusive<u8> as IntoIterator>::IntoIter {<RangeInclusive<u8> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb149: {
        _542 = move _540;                // scope 45 at ui/range_inclusive.rs:91:14: 91:21
        goto -> bb150;                   // scope 70 at ui/range_inclusive.rs:91:5: 93:6
    }

    bb150: {
        _545 = &mut _542;                // scope 70 at ui/range_inclusive.rs:91:14: 91:21
        _544 = &mut (*_545);             // scope 70 at ui/range_inclusive.rs:91:14: 91:21
        _543 = <RangeInclusive<u8> as Iterator>::next(move _544) -> [return: bb151, unwind: bb235]; // scope 70 at ui/range_inclusive.rs:91:14: 91:21
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:91:14: 91:21
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb151: {
        _546 = discriminant(_543);       // scope 70 at ui/range_inclusive.rs:91:14: 91:21
        switchInt(move _546) -> [0: bb154, 1: bb152, otherwise: bb153]; // scope 70 at ui/range_inclusive.rs:91:14: 91:21
    }

    bb152: {
        _547 = ((_543 as Some).0: u8);   // scope 70 at ui/range_inclusive.rs:91:9: 91:10
        _551 = &mut _302;                // scope 71 at ui/range_inclusive.rs:92:20: 92:31
        _550 = <RangeInclusive<u8> as Iterator>::next(move _551) -> [return: bb155, unwind: bb235]; // scope 71 at ui/range_inclusive.rs:92:20: 92:31
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:92:25: 92:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb153: {
        unreachable;                     // scope 70 at ui/range_inclusive.rs:91:14: 91:21
    }

    bb154: {
        _571 = &_302;                    // scope 45 at ui/range_inclusive.rs:94:13: 94:28
        _570 = RangeInclusive::<u8>::is_empty(move _571) -> [return: bb158, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:94:13: 94:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:94:18: 94:26
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> bool {RangeInclusive::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb155: {
        _549 = &_550;                    // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _554 = _547;                     // scope 71 at ui/range_inclusive.rs:92:38: 92:39
        _553 = Option::<u8>::Some(move _554); // scope 71 at ui/range_inclusive.rs:92:33: 92:40
        _552 = &_553;                    // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _548 = (move _549, move _552);   // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _555 = (_548.0: &std::option::Option<u8>); // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _556 = (_548.1: &std::option::Option<u8>); // scope 71 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _559 = _555;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _560 = _556;                     // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _558 = <Option<u8> as PartialEq>::eq(move _559, move _560) -> [return: bb156, unwind: bb235]; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb156: {
        _557 = Not(move _558);           // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _557) -> [0: bb150, otherwise: bb157]; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb157: {
        _561 = const core::panicking::AssertKind::Eq; // scope 72 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _563 = const core::panicking::AssertKind::Eq; // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _565 = _555;                     // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _564 = _565;                     // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _567 = _556;                     // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _566 = _567;                     // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _568 = Option::<Arguments<'_>>::None; // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _562 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _563, move _564, move _566, move _568) -> bb235; // scope 73 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb158: {
        _569 = Not(move _570);           // scope 45 at ui/range_inclusive.rs:94:5: 94:29
        switchInt(move _569) -> [0: bb160, otherwise: bb159]; // scope 45 at ui/range_inclusive.rs:94:5: 94:29
    }

    bb159: {
        _572 = core::panicking::panic(const "assertion failed: long.is_empty()") -> bb235; // scope 45 at ui/range_inclusive.rs:94:5: 94:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:94:5: 94:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb160: {
        _573 = RangeInclusive::<i32>::new(const 1_i32, const 0_i32) -> [return: bb161, unwind: bb235]; // scope 45 at ui/range_inclusive.rs:97:22: 97:27
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:97:22: 97:27
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb161: {
        _577 = &mut _573;                // scope 74 at ui/range_inclusive.rs:98:16: 98:34
        _576 = <RangeInclusive<i32> as DoubleEndedIterator>::next_back(move _577) -> [return: bb162, unwind: bb235]; // scope 74 at ui/range_inclusive.rs:98:16: 98:34
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:98:23: 98:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<i32>) -> Option<<RangeInclusive<i32> as Iterator>::Item> {<RangeInclusive<i32> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb162: {
        _575 = &_576;                    // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _844 = const _;                  // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[17])) }
        _578 = _844;                     // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _574 = (move _575, move _578);   // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _579 = (_574.0: &std::option::Option<i32>); // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _580 = (_574.1: &std::option::Option<i32>); // scope 74 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _583 = _579;                     // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _584 = _580;                     // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _582 = <Option<i32> as PartialEq>::eq(move _583, move _584) -> [return: bb163, unwind: bb235]; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb163: {
        _581 = Not(move _582);           // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _581) -> [0: bb165, otherwise: bb164]; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb164: {
        _585 = const core::panicking::AssertKind::Eq; // scope 75 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _587 = const core::panicking::AssertKind::Eq; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _589 = _579;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _588 = _589;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _591 = _580;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _590 = _591;                     // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _592 = Option::<Arguments<'_>>::None; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _586 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _587, move _588, move _590, move _592) -> bb235; // scope 76 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<i32>, &'b Option<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<i32>, Option<i32>>}, val: Value(<ZST>) }
    }

    bb165: {
        _595 = &_573;                    // scope 74 at ui/range_inclusive.rs:99:13: 99:30
        _594 = RangeInclusive::<i32>::is_empty(move _595) -> [return: bb166, unwind: bb235]; // scope 74 at ui/range_inclusive.rs:99:13: 99:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:99:20: 99:28
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<i32>) -> bool {RangeInclusive::<i32>::is_empty}, val: Value(<ZST>) }
    }

    bb166: {
        _593 = Not(move _594);           // scope 74 at ui/range_inclusive.rs:99:5: 99:31
        switchInt(move _593) -> [0: bb168, otherwise: bb167]; // scope 74 at ui/range_inclusive.rs:99:5: 99:31
    }

    bb167: {
        _596 = core::panicking::panic(const "assertion failed: narrow.is_empty()") -> bb235; // scope 74 at ui/range_inclusive.rs:99:5: 99:31
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:99:5: 99:31
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb168: {
        _597 = RangeInclusive::<u8>::new(const 0_u8, const 0_u8) -> [return: bb169, unwind: bb235]; // scope 74 at ui/range_inclusive.rs:100:20: 100:27
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:100:20: 100:27
                                         // + literal: Const { ty: fn(u8, u8) -> RangeInclusive<u8> {RangeInclusive::<u8>::new}, val: Value(<ZST>) }
    }

    bb169: {
        _601 = &mut _597;                // scope 77 at ui/range_inclusive.rs:101:16: 101:32
        _600 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _601) -> [return: bb170, unwind: bb235]; // scope 77 at ui/range_inclusive.rs:101:16: 101:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:101:21: 101:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb170: {
        _599 = &_600;                    // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _843 = const _;                  // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[16])) }
        _602 = _843;                     // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _598 = (move _599, move _602);   // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _603 = (_598.0: &std::option::Option<u8>); // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _604 = (_598.1: &std::option::Option<u8>); // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _607 = _603;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _608 = _604;                     // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _606 = <Option<u8> as PartialEq>::eq(move _607, move _608) -> [return: bb171, unwind: bb235]; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb171: {
        _605 = Not(move _606);           // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _605) -> [0: bb173, otherwise: bb172]; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb172: {
        _609 = const core::panicking::AssertKind::Eq; // scope 78 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _611 = const core::panicking::AssertKind::Eq; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _613 = _603;                     // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _612 = _613;                     // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _615 = _604;                     // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _614 = _615;                     // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _616 = Option::<Arguments<'_>>::None; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _610 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _611, move _612, move _614, move _616) -> bb235; // scope 79 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb173: {
        _620 = &mut _597;                // scope 77 at ui/range_inclusive.rs:102:16: 102:32
        _619 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _620) -> [return: bb174, unwind: bb235]; // scope 77 at ui/range_inclusive.rs:102:16: 102:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:102:21: 102:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb174: {
        _618 = &_619;                    // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _842 = const _;                  // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[15])) }
        _621 = _842;                     // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _617 = (move _618, move _621);   // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _622 = (_617.0: &std::option::Option<u8>); // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _623 = (_617.1: &std::option::Option<u8>); // scope 77 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _626 = _622;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _627 = _623;                     // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _625 = <Option<u8> as PartialEq>::eq(move _626, move _627) -> [return: bb175, unwind: bb235]; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb175: {
        _624 = Not(move _625);           // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _624) -> [0: bb177, otherwise: bb176]; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb176: {
        _628 = const core::panicking::AssertKind::Eq; // scope 80 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _630 = const core::panicking::AssertKind::Eq; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _632 = _622;                     // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _631 = _632;                     // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _634 = _623;                     // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _633 = _634;                     // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _635 = Option::<Arguments<'_>>::None; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _629 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _630, move _631, move _633, move _635) -> bb235; // scope 81 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb177: {
        _638 = &_597;                    // scope 77 at ui/range_inclusive.rs:103:13: 103:28
        _637 = RangeInclusive::<u8>::is_empty(move _638) -> [return: bb178, unwind: bb235]; // scope 77 at ui/range_inclusive.rs:103:13: 103:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:103:18: 103:26
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> bool {RangeInclusive::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb178: {
        _636 = Not(move _637);           // scope 77 at ui/range_inclusive.rs:103:5: 103:29
        switchInt(move _636) -> [0: bb180, otherwise: bb179]; // scope 77 at ui/range_inclusive.rs:103:5: 103:29
    }

    bb179: {
        _639 = core::panicking::panic(const "assertion failed: zero.is_empty()") -> bb235; // scope 77 at ui/range_inclusive.rs:103:5: 103:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:103:5: 103:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb180: {
        _640 = RangeInclusive::<u8>::new(const u8::MAX, const u8::MAX) -> [return: bb181, unwind: bb235]; // scope 77 at ui/range_inclusive.rs:104:20: 104:31
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:104:20: 104:31
                                         // + literal: Const { ty: fn(u8, u8) -> RangeInclusive<u8> {RangeInclusive::<u8>::new}, val: Value(<ZST>) }
    }

    bb181: {
        _644 = &mut _640;                // scope 82 at ui/range_inclusive.rs:105:16: 105:32
        _643 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _644) -> [return: bb182, unwind: bb235]; // scope 82 at ui/range_inclusive.rs:105:16: 105:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:105:21: 105:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb182: {
        _642 = &_643;                    // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _841 = const _;                  // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[14])) }
        _645 = _841;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _641 = (move _642, move _645);   // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _646 = (_641.0: &std::option::Option<u8>); // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _647 = (_641.1: &std::option::Option<u8>); // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _650 = _646;                     // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _651 = _647;                     // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _649 = <Option<u8> as PartialEq>::eq(move _650, move _651) -> [return: bb183, unwind: bb235]; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb183: {
        _648 = Not(move _649);           // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _648) -> [0: bb185, otherwise: bb184]; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb184: {
        _652 = const core::panicking::AssertKind::Eq; // scope 83 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _654 = const core::panicking::AssertKind::Eq; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _656 = _646;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _655 = _656;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _658 = _647;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _657 = _658;                     // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _659 = Option::<Arguments<'_>>::None; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _653 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _654, move _655, move _657, move _659) -> bb235; // scope 84 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb185: {
        _663 = &mut _640;                // scope 82 at ui/range_inclusive.rs:106:16: 106:32
        _662 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _663) -> [return: bb186, unwind: bb235]; // scope 82 at ui/range_inclusive.rs:106:16: 106:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:106:21: 106:30
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<u8>) -> Option<<RangeInclusive<u8> as Iterator>::Item> {<RangeInclusive<u8> as DoubleEndedIterator>::next_back}, val: Value(<ZST>) }
    }

    bb186: {
        _661 = &_662;                    // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _840 = const _;                  // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<u8>, val: Unevaluated(main, [], Some(promoted[13])) }
        _664 = _840;                     // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _660 = (move _661, move _664);   // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _665 = (_660.0: &std::option::Option<u8>); // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _666 = (_660.1: &std::option::Option<u8>); // scope 82 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _669 = _665;                     // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _670 = _666;                     // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _668 = <Option<u8> as PartialEq>::eq(move _669, move _670) -> [return: bb187, unwind: bb235]; // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<u8>, &'b Option<u8>) -> bool {<Option<u8> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb187: {
        _667 = Not(move _668);           // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _667) -> [0: bb189, otherwise: bb188]; // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb188: {
        _671 = const core::panicking::AssertKind::Eq; // scope 85 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _673 = const core::panicking::AssertKind::Eq; // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _675 = _665;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _674 = _675;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _677 = _666;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _676 = _677;                     // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _678 = Option::<Arguments<'_>>::None; // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _672 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _673, move _674, move _676, move _678) -> bb235; // scope 86 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<u8>, &'b Option<u8>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<u8>, Option<u8>>}, val: Value(<ZST>) }
    }

    bb189: {
        _681 = &_640;                    // scope 82 at ui/range_inclusive.rs:107:13: 107:28
        _680 = RangeInclusive::<u8>::is_empty(move _681) -> [return: bb190, unwind: bb235]; // scope 82 at ui/range_inclusive.rs:107:13: 107:28
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:107:18: 107:26
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<u8>) -> bool {RangeInclusive::<u8>::is_empty}, val: Value(<ZST>) }
    }

    bb190: {
        _679 = Not(move _680);           // scope 82 at ui/range_inclusive.rs:107:5: 107:29
        switchInt(move _679) -> [0: bb192, otherwise: bb191]; // scope 82 at ui/range_inclusive.rs:107:5: 107:29
    }

    bb191: {
        _682 = core::panicking::panic(const "assertion failed: high.is_empty()") -> bb235; // scope 82 at ui/range_inclusive.rs:107:5: 107:29
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:107:5: 107:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb192: {
        _683 = RangeInclusive::<i32>::new(const 10_i32, const 5_i32) -> [return: bb193, unwind: bb235]; // scope 82 at ui/range_inclusive.rs:110:24: 110:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:110:24: 110:30
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb193: {
        _687 = &mut _683;                // scope 87 at ui/range_inclusive.rs:111:16: 111:31
        _686 = <RangeInclusive<i32> as Iterator>::next(move _687) -> [return: bb194, unwind: bb235]; // scope 87 at ui/range_inclusive.rs:111:16: 111:31
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:111:25: 111:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut RangeInclusive<i32>) -> Option<<RangeInclusive<i32> as Iterator>::Item> {<RangeInclusive<i32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb194: {
        _685 = &_686;                    // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _839 = const _;                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &Option<i32>, val: Unevaluated(main, [], Some(promoted[12])) }
        _688 = _839;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _684 = (move _685, move _688);   // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _689 = (_684.0: &std::option::Option<i32>); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _690 = (_684.1: &std::option::Option<i32>); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _693 = _689;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _694 = _690;                     // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _692 = <Option<i32> as PartialEq>::eq(move _693, move _694) -> [return: bb195, unwind: bb235]; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<i32>, &'b Option<i32>) -> bool {<Option<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb195: {
        _691 = Not(move _692);           // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _691) -> [0: bb197, otherwise: bb196]; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb196: {
        _695 = const core::panicking::AssertKind::Eq; // scope 88 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _697 = const core::panicking::AssertKind::Eq; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _699 = _689;                     // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _698 = _699;                     // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _701 = _690;                     // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _700 = _701;                     // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _702 = Option::<Arguments<'_>>::None; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _696 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _697, move _698, move _700, move _702) -> bb235; // scope 89 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<i32>, &'b Option<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<i32>, Option<i32>>}, val: Value(<ZST>) }
    }

    bb197: {
        _705 = &_683;                    // scope 87 at ui/range_inclusive.rs:112:13: 112:32
        _704 = RangeInclusive::<i32>::is_empty(move _705) -> [return: bb198, unwind: bb235]; // scope 87 at ui/range_inclusive.rs:112:13: 112:32
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:112:22: 112:30
                                         // + literal: Const { ty: for<'a> fn(&'a RangeInclusive<i32>) -> bool {RangeInclusive::<i32>::is_empty}, val: Value(<ZST>) }
    }

    bb198: {
        _703 = Not(move _704);           // scope 87 at ui/range_inclusive.rs:112:5: 112:33
        switchInt(move _703) -> [0: bb200, otherwise: bb199]; // scope 87 at ui/range_inclusive.rs:112:5: 112:33
    }

    bb199: {
        _706 = core::panicking::panic(const "assertion failed: nonsense.is_empty()") -> bb235; // scope 87 at ui/range_inclusive.rs:112:5: 112:33
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:112:5: 112:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb200: {
        _838 = const _;                  // scope 87 at ui/range_inclusive.rs:115:24: 115:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:115:24: 115:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[11])) }
        _714 = _838;                     // scope 87 at ui/range_inclusive.rs:115:24: 115:30
        _713 = _714;                     // scope 87 at ui/range_inclusive.rs:115:24: 115:30
        _712 = move _713 as &[&str] (Pointer(Unsize)); // scope 87 at ui/range_inclusive.rs:115:24: 115:30
        _837 = const _;                  // scope 87 at ui/range_inclusive.rs:115:32: 115:38
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:115:32: 115:38
                                         // + literal: Const { ty: &RangeInclusive<i32>, val: Unevaluated(main, [], Some(promoted[10])) }
        _721 = _837;                     // scope 87 at ui/range_inclusive.rs:115:32: 115:38
        _720 = _721;                     // scope 87 at ui/range_inclusive.rs:115:32: 115:38
        _719 = core::fmt::ArgumentV1::<'_>::new_debug::<RangeInclusive<i32>>(move _720) -> [return: bb201, unwind: bb235]; // scope 87 at ui/range_inclusive.rs:115:32: 115:38
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:115:32: 115:38
                                         // + user_ty: UserType(5)
                                         // + literal: Const { ty: for<'b> fn(&'b RangeInclusive<i32>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<RangeInclusive<i32>>}, val: Value(<ZST>) }
    }

    bb201: {
        _718 = [move _719];              // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _717 = &_718;                    // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _716 = _717;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _715 = move _716 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _711 = Arguments::<'_>::new_v1(move _712, move _715) -> [return: bb202, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb202: {
        _710 = format(move _711) -> [return: bb203, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb203: {
        _709 = move _710;                // scope 90 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _708 = &_709;                    // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _836 = const _;                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[9])) }
        _722 = _836;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _707 = (move _708, move _722);   // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _723 = (_707.0: &std::string::String); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _724 = (_707.1: &&str);          // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _727 = _723;                     // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _728 = _724;                     // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _726 = <String as PartialEq<&str>>::eq(move _727, move _728) -> [return: bb204, unwind: bb234]; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb204: {
        _725 = Not(move _726);           // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _725) -> [0: bb206, otherwise: bb205]; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb205: {
        _729 = const core::panicking::AssertKind::Eq; // scope 91 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _731 = const core::panicking::AssertKind::Eq; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _733 = _723;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _732 = _733;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _735 = _724;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _734 = _735;                     // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _736 = Option::<Arguments<'_>>::None; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _730 = core::panicking::assert_failed::<String, &str>(move _731, move _732, move _734, move _736) -> bb234; // scope 92 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb206: {
        drop(_709) -> [return: bb207, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb207: {
        _835 = const _;                  // scope 87 at ui/range_inclusive.rs:116:24: 116:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:116:24: 116:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[8])) }
        _744 = _835;                     // scope 87 at ui/range_inclusive.rs:116:24: 116:30
        _743 = _744;                     // scope 87 at ui/range_inclusive.rs:116:24: 116:30
        _742 = move _743 as &[&str] (Pointer(Unsize)); // scope 87 at ui/range_inclusive.rs:116:24: 116:30
        _834 = const _;                  // scope 87 at ui/range_inclusive.rs:116:32: 116:37
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:116:32: 116:37
                                         // + literal: Const { ty: &RangeToInclusive<i32>, val: Unevaluated(main, [], Some(promoted[7])) }
        _751 = _834;                     // scope 87 at ui/range_inclusive.rs:116:32: 116:37
        _750 = _751;                     // scope 87 at ui/range_inclusive.rs:116:32: 116:37
        _749 = core::fmt::ArgumentV1::<'_>::new_debug::<RangeToInclusive<i32>>(move _750) -> [return: bb208, unwind: bb235]; // scope 87 at ui/range_inclusive.rs:116:32: 116:37
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:116:32: 116:37
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: for<'b> fn(&'b RangeToInclusive<i32>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<RangeToInclusive<i32>>}, val: Value(<ZST>) }
    }

    bb208: {
        _748 = [move _749];              // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _747 = &_748;                    // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _746 = _747;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _745 = move _746 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _741 = Arguments::<'_>::new_v1(move _742, move _745) -> [return: bb209, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(6)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb209: {
        _740 = format(move _741) -> [return: bb210, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb210: {
        _739 = move _740;                // scope 93 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _738 = &_739;                    // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _833 = const _;                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[6])) }
        _752 = _833;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _737 = (move _738, move _752);   // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _753 = (_737.0: &std::string::String); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _754 = (_737.1: &&str);          // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _757 = _753;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _758 = _754;                     // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _756 = <String as PartialEq<&str>>::eq(move _757, move _758) -> [return: bb211, unwind: bb233]; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb211: {
        _755 = Not(move _756);           // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _755) -> [0: bb213, otherwise: bb212]; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb212: {
        _759 = const core::panicking::AssertKind::Eq; // scope 94 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _761 = const core::panicking::AssertKind::Eq; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _763 = _753;                     // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _762 = _763;                     // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _765 = _754;                     // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _764 = _765;                     // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _766 = Option::<Arguments<'_>>::None; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _760 = core::panicking::assert_failed::<String, &str>(move _761, move _762, move _764, move _766) -> bb233; // scope 95 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb213: {
        drop(_739) -> [return: bb214, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb214: {
        _832 = const _;                  // scope 87 at ui/range_inclusive.rs:117:24: 117:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:117:24: 117:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[5])) }
        _774 = _832;                     // scope 87 at ui/range_inclusive.rs:117:24: 117:30
        _773 = _774;                     // scope 87 at ui/range_inclusive.rs:117:24: 117:30
        _772 = move _773 as &[&str] (Pointer(Unsize)); // scope 87 at ui/range_inclusive.rs:117:24: 117:30
        _831 = const _;                  // scope 87 at ui/range_inclusive.rs:117:32: 117:37
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:117:32: 117:37
                                         // + literal: Const { ty: &RangeInclusive<i32>, val: Unevaluated(main, [], Some(promoted[4])) }
        _781 = _831;                     // scope 87 at ui/range_inclusive.rs:117:32: 117:37
        _780 = _781;                     // scope 87 at ui/range_inclusive.rs:117:32: 117:37
        _779 = core::fmt::ArgumentV1::<'_>::new_debug::<RangeInclusive<i32>>(move _780) -> [return: bb215, unwind: bb235]; // scope 87 at ui/range_inclusive.rs:117:32: 117:37
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:117:32: 117:37
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: for<'b> fn(&'b RangeInclusive<i32>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<RangeInclusive<i32>>}, val: Value(<ZST>) }
    }

    bb215: {
        _778 = [move _779];              // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _777 = &_778;                    // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _776 = _777;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _775 = move _776 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _771 = Arguments::<'_>::new_v1(move _772, move _775) -> [return: bb216, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(8)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb216: {
        _770 = format(move _771) -> [return: bb217, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb217: {
        _769 = move _770;                // scope 96 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _768 = &_769;                    // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _830 = const _;                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[3])) }
        _782 = _830;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _767 = (move _768, move _782);   // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _783 = (_767.0: &std::string::String); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _784 = (_767.1: &&str);          // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _787 = _783;                     // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _788 = _784;                     // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _786 = <String as PartialEq<&str>>::eq(move _787, move _788) -> [return: bb218, unwind: bb232]; // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb218: {
        _785 = Not(move _786);           // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _785) -> [0: bb220, otherwise: bb219]; // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb219: {
        _789 = const core::panicking::AssertKind::Eq; // scope 97 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _791 = const core::panicking::AssertKind::Eq; // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _793 = _783;                     // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _792 = _793;                     // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _795 = _784;                     // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _794 = _795;                     // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _796 = Option::<Arguments<'_>>::None; // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _790 = core::panicking::assert_failed::<String, &str>(move _791, move _792, move _794, move _796) -> bb232; // scope 98 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb220: {
        drop(_769) -> [return: bb221, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb221: {
        _829 = const _;                  // scope 87 at ui/range_inclusive.rs:120:24: 120:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:120:24: 120:30
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(main, [], Some(promoted[2])) }
        _804 = _829;                     // scope 87 at ui/range_inclusive.rs:120:24: 120:30
        _803 = _804;                     // scope 87 at ui/range_inclusive.rs:120:24: 120:30
        _802 = move _803 as &[&str] (Pointer(Unsize)); // scope 87 at ui/range_inclusive.rs:120:24: 120:30
        _828 = const _;                  // scope 87 at ui/range_inclusive.rs:120:32: 120:43
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:120:32: 120:43
                                         // + literal: Const { ty: &RangeInclusive<P>, val: Unevaluated(main, [], Some(promoted[1])) }
        _811 = _828;                     // scope 87 at ui/range_inclusive.rs:120:32: 120:43
        _810 = _811;                     // scope 87 at ui/range_inclusive.rs:120:32: 120:43
        _809 = core::fmt::ArgumentV1::<'_>::new_debug::<RangeInclusive<P>>(move _810) -> [return: bb222, unwind: bb235]; // scope 87 at ui/range_inclusive.rs:120:32: 120:43
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:120:32: 120:43
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: for<'b> fn(&'b RangeInclusive<P>) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_debug::<RangeInclusive<P>>}, val: Value(<ZST>) }
    }

    bb222: {
        _808 = [move _809];              // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _807 = &_808;                    // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _806 = _807;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _805 = move _806 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
        _801 = Arguments::<'_>::new_v1(move _802, move _805) -> [return: bb223, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:39: 118:79
                                         // + user_ty: UserType(10)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb223: {
        _800 = format(move _801) -> [return: bb224, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:80
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:118:19: 118:38
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> String {format}, val: Value(<ZST>) }
    }

    bb224: {
        _799 = move _800;                // scope 99 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:119:9: 119:12
        _798 = &_799;                    // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _827 = const _;                  // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _812 = _827;                     // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _797 = (move _798, move _812);   // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _813 = (_797.0: &std::string::String); // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _814 = (_797.1: &&str);          // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _817 = _813;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _818 = _814;                     // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _816 = <String as PartialEq<&str>>::eq(move _817, move _818) -> [return: bb225, unwind: bb231]; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb225: {
        _815 = Not(move _816);           // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _815) -> [0: bb227, otherwise: bb226]; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb226: {
        _819 = const core::panicking::AssertKind::Eq; // scope 100 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _821 = const core::panicking::AssertKind::Eq; // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _823 = _813;                     // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _822 = _823;                     // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _825 = _814;                     // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _824 = _825;                     // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _826 = Option::<Arguments<'_>>::None; // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _820 = core::panicking::assert_failed::<String, &str>(move _821, move _822, move _824, move _826) -> bb231; // scope 101 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a String, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<String, &str>}, val: Value(<ZST>) }
    }

    bb227: {
        drop(_799) -> [return: bb228, unwind: bb235]; // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb228: {
        drop(_132) -> [return: bb229, unwind: bb236]; // scope 25 at ui/range_inclusive.rs:121:1: 121:2
    }

    bb229: {
        drop(_126) -> bb230;             // scope 21 at ui/range_inclusive.rs:121:1: 121:2
    }

    bb230: {
        return;                          // scope 0 at ui/range_inclusive.rs:121:2: 121:2
    }

    bb231 (cleanup): {
        drop(_799) -> bb235;             // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb232 (cleanup): {
        drop(_769) -> bb235;             // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb233 (cleanup): {
        drop(_739) -> bb235;             // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb234 (cleanup): {
        drop(_709) -> bb235;             // scope 87 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb235 (cleanup): {
        drop(_132) -> bb236;             // scope 25 at ui/range_inclusive.rs:121:1: 121:2
    }

    bb236 (cleanup): {
        drop(_126) -> bb237;             // scope 21 at ui/range_inclusive.rs:121:1: 121:2
    }

    bb237 (cleanup): {
        resume;                          // scope 0 at ui/range_inclusive.rs:16:1: 121:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/range_inclusive.rs:120:46: 120:59

    bb0: {
        _1 = const "P(1)..=P(2)";        // scope 0 at ui/range_inclusive.rs:120:46: 120:59
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:120:46: 120:59
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &RangeInclusive<P> = {
    let mut _0: &std::ops::RangeInclusive<P>; // return place in scope 0 at ui/range_inclusive.rs:120:32: 120:43
    let mut _1: std::ops::RangeInclusive<P>; // in scope 0 at ui/range_inclusive.rs:120:32: 120:43
    let mut _2: P;                       // in scope 0 at ui/range_inclusive.rs:120:32: 120:36
    let mut _3: P;                       // in scope 0 at ui/range_inclusive.rs:120:39: 120:43

    bb0: {
        _2 = P(const 1_u8);              // scope 0 at ui/range_inclusive.rs:120:32: 120:36
        _3 = P(const 2_u8);              // scope 0 at ui/range_inclusive.rs:120:39: 120:43
        _1 = RangeInclusive::<P>::new(move _2, move _3) -> bb1; // scope 0 at ui/range_inclusive.rs:120:32: 120:43
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:120:32: 120:43
                                         // + literal: Const { ty: fn(P, P) -> RangeInclusive<P> {RangeInclusive::<P>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:120:32: 120:43
        return;                          // scope 0 at ui/range_inclusive.rs:120:32: 120:43
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/range_inclusive.rs:120:24: 120:30
    let mut _1: [&str; 1];               // in scope 0 at ui/range_inclusive.rs:120:24: 120:30

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/range_inclusive.rs:120:24: 120:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:120:24: 120:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:120:24: 120:30
        return;                          // scope 0 at ui/range_inclusive.rs:120:24: 120:30
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/range_inclusive.rs:117:40: 117:47

    bb0: {
        _1 = const "9..=6";              // scope 0 at ui/range_inclusive.rs:117:40: 117:47
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:117:40: 117:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[4] in main: &RangeInclusive<i32> = {
    let mut _0: &std::ops::RangeInclusive<i32>; // return place in scope 0 at ui/range_inclusive.rs:117:32: 117:37
    let mut _1: std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:117:32: 117:37

    bb0: {
        _1 = RangeInclusive::<i32>::new(const 9_i32, const 6_i32) -> bb1; // scope 0 at ui/range_inclusive.rs:117:32: 117:37
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:117:32: 117:37
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:117:32: 117:37
        return;                          // scope 0 at ui/range_inclusive.rs:117:32: 117:37
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/range_inclusive.rs:117:24: 117:30
    let mut _1: [&str; 1];               // in scope 0 at ui/range_inclusive.rs:117:24: 117:30

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/range_inclusive.rs:117:24: 117:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:117:24: 117:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:117:24: 117:30
        return;                          // scope 0 at ui/range_inclusive.rs:117:24: 117:30
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/range_inclusive.rs:116:40: 116:47

    bb0: {
        _1 = const "..=10";              // scope 0 at ui/range_inclusive.rs:116:40: 116:47
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:116:40: 116:47
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[7] in main: &RangeToInclusive<i32> = {
    let mut _0: &std::ops::RangeToInclusive<i32>; // return place in scope 0 at ui/range_inclusive.rs:116:32: 116:37
    let mut _1: std::ops::RangeToInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:116:32: 116:37

    bb0: {
        _1 = RangeToInclusive::<i32> { end: const 10_i32 }; // scope 0 at ui/range_inclusive.rs:116:32: 116:37
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:116:32: 116:37
        return;                          // scope 0 at ui/range_inclusive.rs:116:32: 116:37
    }
}

promoted[8] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/range_inclusive.rs:116:24: 116:30
    let mut _1: [&str; 1];               // in scope 0 at ui/range_inclusive.rs:116:24: 116:30

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/range_inclusive.rs:116:24: 116:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:116:24: 116:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:116:24: 116:30
        return;                          // scope 0 at ui/range_inclusive.rs:116:24: 116:30
    }
}

promoted[9] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/range_inclusive.rs:115:41: 115:49

    bb0: {
        _1 = const "0..=10";             // scope 0 at ui/range_inclusive.rs:115:41: 115:49
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:115:41: 115:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[10] in main: &RangeInclusive<i32> = {
    let mut _0: &std::ops::RangeInclusive<i32>; // return place in scope 0 at ui/range_inclusive.rs:115:32: 115:38
    let mut _1: std::ops::RangeInclusive<i32>; // in scope 0 at ui/range_inclusive.rs:115:32: 115:38

    bb0: {
        _1 = RangeInclusive::<i32>::new(const 0_i32, const 10_i32) -> bb1; // scope 0 at ui/range_inclusive.rs:115:32: 115:38
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:115:32: 115:38
                                         // + literal: Const { ty: fn(i32, i32) -> RangeInclusive<i32> {RangeInclusive::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:115:32: 115:38
        return;                          // scope 0 at ui/range_inclusive.rs:115:32: 115:38
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/range_inclusive.rs:115:24: 115:30
    let mut _1: [&str; 1];               // in scope 0 at ui/range_inclusive.rs:115:24: 115:30

    bb0: {
        _1 = [const ""];                 // scope 0 at ui/range_inclusive.rs:115:24: 115:30
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:115:24: 115:30
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:115:24: 115:30
        return;                          // scope 0 at ui/range_inclusive.rs:115:24: 115:30
    }
}

promoted[12] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/range_inclusive.rs:111:33: 111:37

    bb0: {
        _1 = Option::<i32>::None;        // scope 0 at ui/range_inclusive.rs:111:33: 111:37
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[13] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:106:34: 106:38

    bb0: {
        _1 = Option::<u8>::None;         // scope 0 at ui/range_inclusive.rs:106:34: 106:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[14] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:105:34: 105:43

    bb0: {
        _1 = Option::<u8>::Some(const u8::MAX); // scope 0 at ui/range_inclusive.rs:105:34: 105:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[15] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:102:34: 102:38

    bb0: {
        _1 = Option::<u8>::None;         // scope 0 at ui/range_inclusive.rs:102:34: 102:38
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[16] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:101:34: 101:41

    bb0: {
        _1 = Option::<u8>::Some(const 0_u8); // scope 0 at ui/range_inclusive.rs:101:34: 101:41
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[17] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<i32>; // in scope 0 at ui/range_inclusive.rs:98:36: 98:40

    bb0: {
        _1 = Option::<i32>::None;        // scope 0 at ui/range_inclusive.rs:98:36: 98:40
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[18] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:90:34: 90:43

    bb0: {
        _1 = Option::<u8>::Some(const 252_u8); // scope 0 at ui/range_inclusive.rs:90:34: 90:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[19] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:89:29: 89:36

    bb0: {
        _1 = Option::<u8>::Some(const 2_u8); // scope 0 at ui/range_inclusive.rs:89:29: 89:36
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[20] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:88:29: 88:36

    bb0: {
        _1 = Option::<u8>::Some(const 1_u8); // scope 0 at ui/range_inclusive.rs:88:29: 88:36
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[21] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:87:34: 87:43

    bb0: {
        _1 = Option::<u8>::Some(const 253_u8); // scope 0 at ui/range_inclusive.rs:87:34: 87:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[22] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:86:34: 86:43

    bb0: {
        _1 = Option::<u8>::Some(const 254_u8); // scope 0 at ui/range_inclusive.rs:86:34: 86:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[23] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: std::option::Option<u8>; // in scope 0 at ui/range_inclusive.rs:85:34: 85:43

    bb0: {
        _1 = Option::<u8>::Some(const u8::MAX); // scope 0 at ui/range_inclusive.rs:85:34: 85:43
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[24] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/range_inclusive.rs:82:29: 82:30

    bb0: {
        _1 = const 0_usize;              // scope 0 at ui/range_inclusive.rs:82:29: 82:30
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[25] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/range_inclusive.rs:81:28: 81:31

    bb0: {
        _1 = const 255_usize;            // scope 0 at ui/range_inclusive.rs:81:28: 81:31
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[26] in main: &(usize, Option<usize>) = {
    let mut _0: &(usize, std::option::Option<usize>); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (usize, std::option::Option<usize>); // in scope 0 at ui/range_inclusive.rs:78:35: 78:47
    let mut _2: std::option::Option<usize>; // in scope 0 at ui/range_inclusive.rs:78:39: 78:46

    bb0: {
        _2 = Option::<usize>::Some(const 0_usize); // scope 0 at ui/range_inclusive.rs:78:39: 78:46
        _1 = (const 0_usize, move _2);   // scope 0 at ui/range_inclusive.rs:78:35: 78:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[27] in main: &(usize, Option<usize>) = {
    let mut _0: &(usize, std::option::Option<usize>); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (usize, std::option::Option<usize>); // in scope 0 at ui/range_inclusive.rs:77:34: 77:50
    let mut _2: std::option::Option<usize>; // in scope 0 at ui/range_inclusive.rs:77:40: 77:49

    bb0: {
        _2 = Option::<usize>::Some(const 255_usize); // scope 0 at ui/range_inclusive.rs:77:40: 77:49
        _1 = (const 255_usize, move _2); // scope 0 at ui/range_inclusive.rs:77:34: 77:50
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[28] in main: &(usize, Option<usize>) = {
    let mut _0: &(usize, std::option::Option<usize>); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (usize, std::option::Option<usize>); // in scope 0 at ui/range_inclusive.rs:74:35: 74:47
    let mut _2: std::option::Option<usize>; // in scope 0 at ui/range_inclusive.rs:74:39: 74:46

    bb0: {
        _2 = Option::<usize>::Some(const 1_usize); // scope 0 at ui/range_inclusive.rs:74:39: 74:46
        _1 = (const 1_usize, move _2);   // scope 0 at ui/range_inclusive.rs:74:35: 74:47
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[29] in main: &(usize, Option<usize>) = {
    let mut _0: &(usize, std::option::Option<usize>); // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: (usize, std::option::Option<usize>); // in scope 0 at ui/range_inclusive.rs:73:34: 73:50
    let mut _2: std::option::Option<usize>; // in scope 0 at ui/range_inclusive.rs:73:40: 73:49

    bb0: {
        _2 = Option::<usize>::Some(const 256_usize); // scope 0 at ui/range_inclusive.rs:73:40: 73:49
        _1 = (const 256_usize, move _2); // scope 0 at ui/range_inclusive.rs:73:34: 73:50
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[30] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/range_inclusive.rs:68:30: 68:39

    bb0: {
        _1 = const "hello w";            // scope 0 at ui/range_inclusive.rs:68:30: 68:39
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:68:30: 68:39
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[31] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/range_inclusive.rs:67:30: 67:36

    bb0: {
        _1 = const "lo w";               // scope 0 at ui/range_inclusive.rs:67:30: 67:36
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:67:30: 67:36
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[32] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/range_inclusive.rs:65:32: 65:41

    bb0: {
        _1 = const "hello w";            // scope 0 at ui/range_inclusive.rs:65:32: 65:41
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:65:32: 65:41
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[33] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &str;                    // in scope 0 at ui/range_inclusive.rs:64:32: 64:38

    bb0: {
        _1 = const "lo w";               // scope 0 at ui/range_inclusive.rs:64:32: 64:38
                                         // mir::Constant
                                         // + span: ui/range_inclusive.rs:64:32: 64:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[34] in main: &&[i32; 7] = {
    let mut _0: &&[i32; 7];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[i32; 7];               // in scope 0 at ui/range_inclusive.rs:62:31: 62:53
    let mut _2: [i32; 7];                // in scope 0 at ui/range_inclusive.rs:62:32: 62:53

    bb0: {
        _2 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32]; // scope 0 at ui/range_inclusive.rs:62:32: 62:53
        _1 = &_2;                        // scope 0 at ui/range_inclusive.rs:62:31: 62:53
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[35] in main: &&[i32; 4] = {
    let mut _0: &&[i32; 4];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[i32; 4];               // in scope 0 at ui/range_inclusive.rs:61:31: 61:44
    let mut _2: [i32; 4];                // in scope 0 at ui/range_inclusive.rs:61:32: 61:44

    bb0: {
        _2 = [const 3_i32, const 4_i32, const 5_i32, const 6_i32]; // scope 0 at ui/range_inclusive.rs:61:32: 61:44
        _1 = &_2;                        // scope 0 at ui/range_inclusive.rs:61:31: 61:44
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[36] in main: &&[i32; 7] = {
    let mut _0: &&[i32; 7];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[i32; 7];               // in scope 0 at ui/range_inclusive.rs:59:29: 59:51
    let mut _2: [i32; 7];                // in scope 0 at ui/range_inclusive.rs:59:30: 59:51

    bb0: {
        _2 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32]; // scope 0 at ui/range_inclusive.rs:59:30: 59:51
        _1 = &_2;                        // scope 0 at ui/range_inclusive.rs:59:29: 59:51
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[37] in main: &&[i32; 4] = {
    let mut _0: &&[i32; 4];              // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: &[i32; 4];               // in scope 0 at ui/range_inclusive.rs:58:29: 58:42
    let mut _2: [i32; 4];                // in scope 0 at ui/range_inclusive.rs:58:30: 58:42

    bb0: {
        _2 = [const 3_i32, const 4_i32, const 5_i32, const 6_i32]; // scope 0 at ui/range_inclusive.rs:58:30: 58:42
        _1 = &_2;                        // scope 0 at ui/range_inclusive.rs:58:29: 58:42
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[38] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/range_inclusive.rs:46:13: 46:16
    let mut _1: i32;                     // in scope 0 at ui/range_inclusive.rs:46:14: 46:16

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/range_inclusive.rs:46:14: 46:16
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:46:13: 46:16
        return;                          // scope 0 at ui/range_inclusive.rs:46:13: 46:16
    }
}

promoted[39] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/range_inclusive.rs:42:21: 42:25
    let mut _1: i32;                     // in scope 0 at ui/range_inclusive.rs:42:22: 42:25

    bb0: {
        _1 = const 100_i32;              // scope 0 at ui/range_inclusive.rs:42:22: 42:25
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:42:21: 42:25
        return;                          // scope 0 at ui/range_inclusive.rs:42:21: 42:25
    }
}

promoted[40] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at ui/range_inclusive.rs:42:15: 42:18
    let mut _1: i32;                     // in scope 0 at ui/range_inclusive.rs:42:16: 42:18

    bb0: {
        _1 = const 42_i32;               // scope 0 at ui/range_inclusive.rs:42:16: 42:18
        _0 = &_1;                        // scope 0 at ui/range_inclusive.rs:42:15: 42:18
        return;                          // scope 0 at ui/range_inclusive.rs:42:15: 42:18
    }
}

promoted[41] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/range_inclusive.rs:37:23: 37:25

    bb0: {
        _1 = const 30_usize;             // scope 0 at ui/range_inclusive.rs:37:23: 37:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[42] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/range_inclusive.rs:30:23: 30:25

    bb0: {
        _1 = const 55_usize;             // scope 0 at ui/range_inclusive.rs:30:23: 30:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[43] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/range_inclusive.rs:22:23: 22:25

    bb0: {
        _1 = const 55_usize;             // scope 0 at ui/range_inclusive.rs:22:23: 22:25
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

fn P(_1: u8) -> P {
    let mut _0: P;                       // return place in scope 0 at ui/range_inclusive.rs:14:1: 14:9

    bb0: {
        _0 = P(move _1);                 // scope 0 at ui/range_inclusive.rs:14:1: 14:9
        return;                          // scope 0 at ui/range_inclusive.rs:14:1: 14:9
    }
}

// MIR FOR CTFE
fn P(_1: u8) -> P {
    let mut _0: P;                       // return place in scope 0 at ui/range_inclusive.rs:14:1: 14:9

    bb0: {
        _0 = P(move _1);                 // scope 0 at ui/range_inclusive.rs:14:1: 14:9
        return;                          // scope 0 at ui/range_inclusive.rs:14:1: 14:9
    }
}
