// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> isize {
    let mut _0: isize;

    bb0: {
        _0 = const 42_isize;
        return;
    }
}

fn return_range_to() -> RangeToInclusive<i32> {
    let mut _0: std::ops::RangeToInclusive<i32>;

    bb0: {
        _0 = RangeToInclusive::<i32> { end: const 1_i32 };
        return;
    }
}

fn <impl at ui/range_inclusive.rs:13:10: 13:15>::fmt(_1: &P, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;
    debug f => _2;
    let mut _0: std::result::Result<(), std::fmt::Error>;
    let _3: &str;
    let mut _4: &dyn std::fmt::Debug;
    let _5: &&u8;
    let _6: &u8;

    bb0: {
        _3 = const "P";
        _6 = &((*_1).0: u8);
        _5 = &_6;
        _4 = _5 as &dyn std::fmt::Debug (Pointer(Unsize));
        _0 = Formatter::<'_>::debug_tuple_field1_finish(_2, _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: usize;
    let mut _2: std::ops::RangeInclusive<usize>;
    let mut _3: std::ops::RangeInclusive<usize>;
    let mut _5: std::option::Option<usize>;
    let mut _6: &mut std::ops::RangeInclusive<usize>;
    let mut _7: isize;
    let mut _9: bool;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: bool;
    let mut _13: !;
    let mut _14: (&usize, &usize);
    let mut _15: &usize;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: usize;
    let mut _21: usize;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _27: std::ops::RangeInclusive<usize>;
    let mut _28: std::ops::RangeInclusive<usize>;
    let mut _30: std::option::Option<usize>;
    let mut _31: &mut std::ops::RangeInclusive<usize>;
    let mut _32: isize;
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: bool;
    let mut _37: bool;
    let mut _38: !;
    let mut _39: (&usize, &usize);
    let mut _40: &usize;
    let mut _43: bool;
    let mut _44: bool;
    let mut _45: usize;
    let mut _46: usize;
    let _48: !;
    let mut _49: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _51: std::iter::StepBy<std::ops::RangeInclusive<usize>>;
    let mut _52: std::iter::StepBy<std::ops::RangeInclusive<usize>>;
    let mut _53: std::ops::RangeInclusive<usize>;
    let mut _55: std::option::Option<usize>;
    let mut _56: &mut std::iter::StepBy<std::ops::RangeInclusive<usize>>;
    let mut _57: isize;
    let mut _59: bool;
    let mut _60: bool;
    let mut _61: bool;
    let mut _62: bool;
    let mut _63: bool;
    let mut _64: bool;
    let mut _65: usize;
    let mut _66: bool;
    let mut _67: !;
    let mut _68: (&usize, &usize);
    let mut _69: &usize;
    let mut _72: bool;
    let mut _73: bool;
    let mut _74: usize;
    let mut _75: usize;
    let _77: !;
    let mut _78: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _79: std::ops::RangeInclusive<usize>;
    let mut _80: usize;
    let mut _81: usize;
    let mut _82: std::ops::RangeInclusive<isize>;
    let mut _83: isize;
    let mut _84: std::ops::RangeInclusive<&i32>;
    let mut _86: std::ops::RangeInclusive<&i32>;
    let _87: &i32;
    let mut _89: std::ops::RangeInclusive<i32>;
    let _90: &[i32];
    let _91: &[i32];
    let mut _92: &std::vec::Vec<i32>;
    let mut _95: (&&[i32], &&[i32; 4]);
    let mut _96: &&[i32];
    let _97: &[i32];
    let _98: &[i32];
    let mut _99: &std::vec::Vec<i32>;
    let mut _100: std::ops::RangeInclusive<usize>;
    let mut _103: bool;
    let mut _104: bool;
    let _106: !;
    let mut _107: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _108: (&&[i32], &&[i32; 7]);
    let mut _109: &&[i32];
    let _110: &[i32];
    let _111: &[i32];
    let mut _112: &std::vec::Vec<i32>;
    let mut _113: std::ops::RangeToInclusive<usize>;
    let mut _116: bool;
    let mut _117: bool;
    let _119: !;
    let mut _120: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _121: (&&[i32], &&[i32; 4]);
    let mut _122: &&[i32];
    let _123: &[i32];
    let _124: &[i32];
    let mut _125: std::ops::RangeInclusive<usize>;
    let mut _128: bool;
    let mut _129: bool;
    let _131: !;
    let mut _132: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _133: (&&[i32], &&[i32; 7]);
    let mut _134: &&[i32];
    let _135: &[i32];
    let _136: &[i32];
    let mut _137: std::ops::RangeToInclusive<usize>;
    let mut _140: bool;
    let mut _141: bool;
    let _143: !;
    let mut _144: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _145: (&&str, &&str);
    let mut _146: &&str;
    let _147: &str;
    let _148: &str;
    let mut _149: &std::string::String;
    let mut _150: std::ops::RangeInclusive<usize>;
    let mut _153: bool;
    let mut _154: bool;
    let _156: !;
    let mut _157: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _158: (&&str, &&str);
    let mut _159: &&str;
    let _160: &str;
    let _161: &str;
    let mut _162: &std::string::String;
    let mut _163: std::ops::RangeToInclusive<usize>;
    let mut _166: bool;
    let mut _167: bool;
    let _169: !;
    let mut _170: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _171: (&&str, &&str);
    let mut _172: &&str;
    let _173: &str;
    let _174: &str;
    let mut _175: std::ops::RangeInclusive<usize>;
    let mut _178: bool;
    let mut _179: bool;
    let _181: !;
    let mut _182: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _183: (&&str, &&str);
    let mut _184: &&str;
    let _185: &str;
    let _186: &str;
    let mut _187: std::ops::RangeToInclusive<usize>;
    let mut _190: bool;
    let mut _191: bool;
    let _193: !;
    let mut _194: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _197: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>));
    let mut _198: &(usize, std::option::Option<usize>);
    let _199: (usize, std::option::Option<usize>);
    let mut _200: &std::ops::RangeInclusive<u8>;
    let mut _203: bool;
    let mut _204: bool;
    let _206: !;
    let mut _207: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _208: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>));
    let mut _209: &(usize, std::option::Option<usize>);
    let _210: (usize, std::option::Option<usize>);
    let mut _211: &std::ops::RangeInclusive<u8>;
    let mut _214: bool;
    let mut _215: bool;
    let _217: !;
    let mut _218: std::option::Option<std::fmt::Arguments<'_>>;
    let _219: std::option::Option<u8>;
    let mut _220: &mut std::ops::RangeInclusive<u8>;
    let _221: std::option::Option<u8>;
    let mut _222: &mut std::ops::RangeInclusive<u8>;
    let mut _223: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>));
    let mut _224: &(usize, std::option::Option<usize>);
    let _225: (usize, std::option::Option<usize>);
    let mut _226: &std::ops::RangeInclusive<u8>;
    let mut _229: bool;
    let mut _230: bool;
    let _232: !;
    let mut _233: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _234: (&(usize, std::option::Option<usize>), &(usize, std::option::Option<usize>));
    let mut _235: &(usize, std::option::Option<usize>);
    let _236: (usize, std::option::Option<usize>);
    let mut _237: &std::ops::RangeInclusive<u8>;
    let mut _240: bool;
    let mut _241: bool;
    let _243: !;
    let mut _244: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _245: bool;
    let mut _246: bool;
    let mut _247: &std::ops::RangeInclusive<u8>;
    let mut _248: !;
    let mut _249: (&usize, &usize);
    let mut _250: &usize;
    let _251: usize;
    let mut _252: &std::ops::RangeInclusive<u8>;
    let mut _255: bool;
    let mut _256: bool;
    let mut _257: usize;
    let mut _258: usize;
    let _260: !;
    let mut _261: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _262: (&usize, &usize);
    let mut _263: &usize;
    let _264: usize;
    let mut _265: &std::ops::RangeInclusive<u8>;
    let mut _268: bool;
    let mut _269: bool;
    let mut _270: usize;
    let mut _271: usize;
    let _273: !;
    let mut _274: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _275: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _276: &std::option::Option<u8>;
    let _277: std::option::Option<u8>;
    let mut _278: &mut std::ops::RangeInclusive<u8>;
    let mut _281: bool;
    let mut _282: bool;
    let _284: !;
    let mut _285: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _286: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _287: &std::option::Option<u8>;
    let _288: std::option::Option<u8>;
    let mut _289: &mut std::ops::RangeInclusive<u8>;
    let mut _292: bool;
    let mut _293: bool;
    let _295: !;
    let mut _296: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _297: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _298: &std::option::Option<u8>;
    let _299: std::option::Option<u8>;
    let mut _300: &mut std::ops::RangeInclusive<u8>;
    let mut _303: bool;
    let mut _304: bool;
    let _306: !;
    let mut _307: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _308: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _309: &std::option::Option<u8>;
    let _310: std::option::Option<u8>;
    let mut _311: &mut std::ops::RangeInclusive<u8>;
    let mut _314: bool;
    let mut _315: bool;
    let _317: !;
    let mut _318: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _319: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _320: &std::option::Option<u8>;
    let _321: std::option::Option<u8>;
    let mut _322: &mut std::ops::RangeInclusive<u8>;
    let mut _325: bool;
    let mut _326: bool;
    let _328: !;
    let mut _329: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _330: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _331: &std::option::Option<u8>;
    let _332: std::option::Option<u8>;
    let mut _333: &mut std::ops::RangeInclusive<u8>;
    let mut _336: bool;
    let mut _337: bool;
    let _339: !;
    let mut _340: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _341: std::ops::RangeInclusive<u8>;
    let mut _342: std::ops::RangeInclusive<u8>;
    let mut _344: std::option::Option<u8>;
    let mut _345: &mut std::ops::RangeInclusive<u8>;
    let mut _346: isize;
    let mut _348: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _349: &std::option::Option<u8>;
    let _350: std::option::Option<u8>;
    let mut _351: &mut std::ops::RangeInclusive<u8>;
    let mut _352: &std::option::Option<u8>;
    let _353: std::option::Option<u8>;
    let mut _356: bool;
    let mut _357: bool;
    let _359: !;
    let mut _360: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _361: bool;
    let mut _362: bool;
    let mut _363: &std::ops::RangeInclusive<u8>;
    let mut _364: !;
    let mut _366: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _367: &std::option::Option<i32>;
    let _368: std::option::Option<i32>;
    let mut _369: &mut std::ops::RangeInclusive<i32>;
    let mut _372: bool;
    let mut _373: bool;
    let _375: !;
    let mut _376: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _377: bool;
    let mut _378: bool;
    let mut _379: &std::ops::RangeInclusive<i32>;
    let mut _380: !;
    let mut _382: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _383: &std::option::Option<u8>;
    let _384: std::option::Option<u8>;
    let mut _385: &mut std::ops::RangeInclusive<u8>;
    let mut _388: bool;
    let mut _389: bool;
    let _391: !;
    let mut _392: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _393: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _394: &std::option::Option<u8>;
    let _395: std::option::Option<u8>;
    let mut _396: &mut std::ops::RangeInclusive<u8>;
    let mut _399: bool;
    let mut _400: bool;
    let _402: !;
    let mut _403: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _404: bool;
    let mut _405: bool;
    let mut _406: &std::ops::RangeInclusive<u8>;
    let mut _407: !;
    let mut _409: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _410: &std::option::Option<u8>;
    let _411: std::option::Option<u8>;
    let mut _412: &mut std::ops::RangeInclusive<u8>;
    let mut _415: bool;
    let mut _416: bool;
    let _418: !;
    let mut _419: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _420: (&std::option::Option<u8>, &std::option::Option<u8>);
    let mut _421: &std::option::Option<u8>;
    let _422: std::option::Option<u8>;
    let mut _423: &mut std::ops::RangeInclusive<u8>;
    let mut _426: bool;
    let mut _427: bool;
    let _429: !;
    let mut _430: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _431: bool;
    let mut _432: bool;
    let mut _433: &std::ops::RangeInclusive<u8>;
    let mut _434: !;
    let mut _436: (&std::option::Option<i32>, &std::option::Option<i32>);
    let mut _437: &std::option::Option<i32>;
    let _438: std::option::Option<i32>;
    let mut _439: &mut std::ops::RangeInclusive<i32>;
    let mut _442: bool;
    let mut _443: bool;
    let _445: !;
    let mut _446: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _447: bool;
    let mut _448: bool;
    let mut _449: &std::ops::RangeInclusive<i32>;
    let mut _450: !;
    let mut _451: (&std::string::String, &&str);
    let mut _452: &std::string::String;
    let _453: std::string::String;
    let mut _455: std::fmt::Arguments<'_>;
    let mut _456: &[&str];
    let mut _457: &[core::fmt::rt::Argument<'_>];
    let _458: &[core::fmt::rt::Argument<'_>; 1];
    let _459: [core::fmt::rt::Argument<'_>; 1];
    let mut _460: core::fmt::rt::Argument<'_>;
    let mut _463: bool;
    let mut _464: bool;
    let _466: !;
    let mut _467: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _468: (&std::string::String, &&str);
    let mut _469: &std::string::String;
    let _470: std::string::String;
    let mut _472: std::fmt::Arguments<'_>;
    let mut _473: &[&str];
    let mut _474: &[core::fmt::rt::Argument<'_>];
    let _475: &[core::fmt::rt::Argument<'_>; 1];
    let _476: [core::fmt::rt::Argument<'_>; 1];
    let mut _477: core::fmt::rt::Argument<'_>;
    let mut _480: bool;
    let mut _481: bool;
    let _483: !;
    let mut _484: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _485: (&std::string::String, &&str);
    let mut _486: &std::string::String;
    let _487: std::string::String;
    let mut _489: std::fmt::Arguments<'_>;
    let mut _490: &[&str];
    let mut _491: &[core::fmt::rt::Argument<'_>];
    let _492: &[core::fmt::rt::Argument<'_>; 1];
    let _493: [core::fmt::rt::Argument<'_>; 1];
    let mut _494: core::fmt::rt::Argument<'_>;
    let mut _497: bool;
    let mut _498: bool;
    let _500: !;
    let mut _501: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _502: (&std::string::String, &&str);
    let mut _503: &std::string::String;
    let _504: std::string::String;
    let mut _506: std::fmt::Arguments<'_>;
    let mut _507: &[&str];
    let mut _508: &[core::fmt::rt::Argument<'_>];
    let _509: &[core::fmt::rt::Argument<'_>; 1];
    let _510: [core::fmt::rt::Argument<'_>; 1];
    let mut _511: core::fmt::rt::Argument<'_>;
    let mut _514: bool;
    let mut _515: bool;
    let _517: !;
    let mut _518: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug count => _1;
        let mut _4: std::ops::RangeInclusive<usize>;
        let _16: &usize;
        let _17: &usize;
        let mut _25: usize;
        let mut _562: &usize;
        scope 2 {
            debug iter => _4;
            let _8: usize;
            scope 3 {
                debug i => _8;
            }
        }
        scope 4 {
            debug left_val => _16;
            debug right_val => _17;
            let _22: core::panicking::AssertKind;
            scope 5 {
                debug kind => _22;
            }
        }
        scope 6 {
            debug count => _25;
            let _26: std::ops::RangeInclusive<usize>;
            scope 7 {
                debug range => _26;
                let mut _29: std::ops::RangeInclusive<usize>;
                let _41: &usize;
                let _42: &usize;
                let mut _50: usize;
                let mut _561: &usize;
                scope 8 {
                    debug iter => _29;
                    let _33: usize;
                    scope 9 {
                        debug i => _33;
                    }
                }
                scope 10 {
                    debug left_val => _41;
                    debug right_val => _42;
                    let _47: core::panicking::AssertKind;
                    scope 11 {
                        debug kind => _47;
                    }
                }
                scope 12 {
                    debug count => _50;
                    let mut _54: std::iter::StepBy<std::ops::RangeInclusive<usize>>;
                    let _70: &usize;
                    let _71: &usize;
                    let mut _560: &usize;
                    scope 13 {
                        debug iter => _54;
                        let _58: usize;
                        scope 14 {
                            debug i => _58;
                        }
                    }
                    scope 15 {
                        debug left_val => _70;
                        debug right_val => _71;
                        let _76: core::panicking::AssertKind;
                        scope 16 {
                            debug kind => _76;
                        }
                    }
                    scope 17 {
                        scope 18 {
                            let mut _558: &i32;
                            let mut _559: &i32;
                            scope 19 {
                                scope 20 {
                                    let mut _557: &i32;
                                    scope 21 {
                                        debug x => const _;
                                        let _85: i32;
                                        let _88: std::vec::Vec<i32>;
                                        scope 22 {
                                            debug y => const 42_i32;
                                            scope 23 {
                                            }
                                        }
                                        scope 24 {
                                            debug vec => _88;
                                            scope 25 {
                                                debug slice => _90;
                                                let _93: std::string::String;
                                                scope 26 {
                                                    debug string => _93;
                                                    let _94: &str;
                                                    scope 27 {
                                                        debug stir => const "hello world";
                                                        let _101: &&[i32];
                                                        let _102: &&[i32; 4];
                                                        let _114: &&[i32];
                                                        let _115: &&[i32; 7];
                                                        let _126: &&[i32];
                                                        let _127: &&[i32; 4];
                                                        let _138: &&[i32];
                                                        let _139: &&[i32; 7];
                                                        let _151: &&str;
                                                        let _152: &&str;
                                                        let _164: &&str;
                                                        let _165: &&str;
                                                        let _176: &&str;
                                                        let _177: &&str;
                                                        let _188: &&str;
                                                        let _189: &&str;
                                                        let mut _195: std::ops::RangeInclusive<u8>;
                                                        let mut _549: &&str;
                                                        let mut _550: &&str;
                                                        let mut _551: &&str;
                                                        let mut _552: &&str;
                                                        let mut _553: &&[i32; 7];
                                                        let mut _554: &&[i32; 4];
                                                        let mut _555: &&[i32; 7];
                                                        let mut _556: &&[i32; 4];
                                                        scope 28 {
                                                            debug left_val => _101;
                                                            debug right_val => _102;
                                                            let _105: core::panicking::AssertKind;
                                                            scope 29 {
                                                                debug kind => _105;
                                                            }
                                                        }
                                                        scope 30 {
                                                            debug left_val => _114;
                                                            debug right_val => _115;
                                                            let _118: core::panicking::AssertKind;
                                                            scope 31 {
                                                                debug kind => _118;
                                                            }
                                                        }
                                                        scope 32 {
                                                            debug left_val => _126;
                                                            debug right_val => _127;
                                                            let _130: core::panicking::AssertKind;
                                                            scope 33 {
                                                                debug kind => _130;
                                                            }
                                                        }
                                                        scope 34 {
                                                            debug left_val => _138;
                                                            debug right_val => _139;
                                                            let _142: core::panicking::AssertKind;
                                                            scope 35 {
                                                                debug kind => _142;
                                                            }
                                                        }
                                                        scope 36 {
                                                            debug left_val => _151;
                                                            debug right_val => _152;
                                                            let _155: core::panicking::AssertKind;
                                                            scope 37 {
                                                                debug kind => _155;
                                                            }
                                                        }
                                                        scope 38 {
                                                            debug left_val => _164;
                                                            debug right_val => _165;
                                                            let _168: core::panicking::AssertKind;
                                                            scope 39 {
                                                                debug kind => _168;
                                                            }
                                                        }
                                                        scope 40 {
                                                            debug left_val => _176;
                                                            debug right_val => _177;
                                                            let _180: core::panicking::AssertKind;
                                                            scope 41 {
                                                                debug kind => _180;
                                                            }
                                                        }
                                                        scope 42 {
                                                            debug left_val => _188;
                                                            debug right_val => _189;
                                                            let _192: core::panicking::AssertKind;
                                                            scope 43 {
                                                                debug kind => _192;
                                                            }
                                                        }
                                                        scope 44 {
                                                            debug long => _195;
                                                            let mut _196: std::ops::RangeInclusive<u8>;
                                                            scope 45 {
                                                                debug short => _196;
                                                                let _201: &(usize, std::option::Option<usize>);
                                                                let _202: &(usize, std::option::Option<usize>);
                                                                let _212: &(usize, std::option::Option<usize>);
                                                                let _213: &(usize, std::option::Option<usize>);
                                                                let _227: &(usize, std::option::Option<usize>);
                                                                let _228: &(usize, std::option::Option<usize>);
                                                                let _238: &(usize, std::option::Option<usize>);
                                                                let _239: &(usize, std::option::Option<usize>);
                                                                let _253: &usize;
                                                                let _254: &usize;
                                                                let _266: &usize;
                                                                let _267: &usize;
                                                                let _279: &std::option::Option<u8>;
                                                                let _280: &std::option::Option<u8>;
                                                                let _290: &std::option::Option<u8>;
                                                                let _291: &std::option::Option<u8>;
                                                                let _301: &std::option::Option<u8>;
                                                                let _302: &std::option::Option<u8>;
                                                                let _312: &std::option::Option<u8>;
                                                                let _313: &std::option::Option<u8>;
                                                                let _323: &std::option::Option<u8>;
                                                                let _324: &std::option::Option<u8>;
                                                                let _334: &std::option::Option<u8>;
                                                                let _335: &std::option::Option<u8>;
                                                                let mut _343: std::ops::RangeInclusive<u8>;
                                                                let mut _365: std::ops::RangeInclusive<i32>;
                                                                let mut _537: &std::option::Option<u8>;
                                                                let mut _538: &std::option::Option<u8>;
                                                                let mut _539: &std::option::Option<u8>;
                                                                let mut _540: &std::option::Option<u8>;
                                                                let mut _541: &std::option::Option<u8>;
                                                                let mut _542: &std::option::Option<u8>;
                                                                let mut _543: &usize;
                                                                let mut _544: &usize;
                                                                let mut _545: &(usize, std::option::Option<usize>);
                                                                let mut _546: &(usize, std::option::Option<usize>);
                                                                let mut _547: &(usize, std::option::Option<usize>);
                                                                let mut _548: &(usize, std::option::Option<usize>);
                                                                scope 46 {
                                                                    debug left_val => _201;
                                                                    debug right_val => _202;
                                                                    let _205: core::panicking::AssertKind;
                                                                    scope 47 {
                                                                        debug kind => _205;
                                                                    }
                                                                }
                                                                scope 48 {
                                                                    debug left_val => _212;
                                                                    debug right_val => _213;
                                                                    let _216: core::panicking::AssertKind;
                                                                    scope 49 {
                                                                        debug kind => _216;
                                                                    }
                                                                }
                                                                scope 50 {
                                                                    debug left_val => _227;
                                                                    debug right_val => _228;
                                                                    let _231: core::panicking::AssertKind;
                                                                    scope 51 {
                                                                        debug kind => _231;
                                                                    }
                                                                }
                                                                scope 52 {
                                                                    debug left_val => _238;
                                                                    debug right_val => _239;
                                                                    let _242: core::panicking::AssertKind;
                                                                    scope 53 {
                                                                        debug kind => _242;
                                                                    }
                                                                }
                                                                scope 54 {
                                                                    debug left_val => _253;
                                                                    debug right_val => _254;
                                                                    let _259: core::panicking::AssertKind;
                                                                    scope 55 {
                                                                        debug kind => _259;
                                                                    }
                                                                }
                                                                scope 56 {
                                                                    debug left_val => _266;
                                                                    debug right_val => _267;
                                                                    let _272: core::panicking::AssertKind;
                                                                    scope 57 {
                                                                        debug kind => _272;
                                                                    }
                                                                }
                                                                scope 58 {
                                                                    debug left_val => _279;
                                                                    debug right_val => _280;
                                                                    let _283: core::panicking::AssertKind;
                                                                    scope 59 {
                                                                        debug kind => _283;
                                                                    }
                                                                }
                                                                scope 60 {
                                                                    debug left_val => _290;
                                                                    debug right_val => _291;
                                                                    let _294: core::panicking::AssertKind;
                                                                    scope 61 {
                                                                        debug kind => _294;
                                                                    }
                                                                }
                                                                scope 62 {
                                                                    debug left_val => _301;
                                                                    debug right_val => _302;
                                                                    let _305: core::panicking::AssertKind;
                                                                    scope 63 {
                                                                        debug kind => _305;
                                                                    }
                                                                }
                                                                scope 64 {
                                                                    debug left_val => _312;
                                                                    debug right_val => _313;
                                                                    let _316: core::panicking::AssertKind;
                                                                    scope 65 {
                                                                        debug kind => _316;
                                                                    }
                                                                }
                                                                scope 66 {
                                                                    debug left_val => _323;
                                                                    debug right_val => _324;
                                                                    let _327: core::panicking::AssertKind;
                                                                    scope 67 {
                                                                        debug kind => _327;
                                                                    }
                                                                }
                                                                scope 68 {
                                                                    debug left_val => _334;
                                                                    debug right_val => _335;
                                                                    let _338: core::panicking::AssertKind;
                                                                    scope 69 {
                                                                        debug kind => _338;
                                                                    }
                                                                }
                                                                scope 70 {
                                                                    debug iter => _343;
                                                                    let _347: u8;
                                                                    scope 71 {
                                                                        debug i => _347;
                                                                        let _354: &std::option::Option<u8>;
                                                                        let _355: &std::option::Option<u8>;
                                                                        scope 72 {
                                                                            debug left_val => _354;
                                                                            debug right_val => _355;
                                                                            let _358: core::panicking::AssertKind;
                                                                            scope 73 {
                                                                                debug kind => _358;
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                                scope 74 {
                                                                    debug narrow => _365;
                                                                    let _370: &std::option::Option<i32>;
                                                                    let _371: &std::option::Option<i32>;
                                                                    let mut _381: std::ops::RangeInclusive<u8>;
                                                                    let mut _536: &std::option::Option<i32>;
                                                                    scope 75 {
                                                                        debug left_val => _370;
                                                                        debug right_val => _371;
                                                                        let _374: core::panicking::AssertKind;
                                                                        scope 76 {
                                                                            debug kind => _374;
                                                                        }
                                                                    }
                                                                    scope 77 {
                                                                        debug zero => _381;
                                                                        let _386: &std::option::Option<u8>;
                                                                        let _387: &std::option::Option<u8>;
                                                                        let _397: &std::option::Option<u8>;
                                                                        let _398: &std::option::Option<u8>;
                                                                        let mut _408: std::ops::RangeInclusive<u8>;
                                                                        let mut _534: &std::option::Option<u8>;
                                                                        let mut _535: &std::option::Option<u8>;
                                                                        scope 78 {
                                                                            debug left_val => _386;
                                                                            debug right_val => _387;
                                                                            let _390: core::panicking::AssertKind;
                                                                            scope 79 {
                                                                                debug kind => _390;
                                                                            }
                                                                        }
                                                                        scope 80 {
                                                                            debug left_val => _397;
                                                                            debug right_val => _398;
                                                                            let _401: core::panicking::AssertKind;
                                                                            scope 81 {
                                                                                debug kind => _401;
                                                                            }
                                                                        }
                                                                        scope 82 {
                                                                            debug high => _408;
                                                                            let _413: &std::option::Option<u8>;
                                                                            let _414: &std::option::Option<u8>;
                                                                            let _424: &std::option::Option<u8>;
                                                                            let _425: &std::option::Option<u8>;
                                                                            let mut _435: std::ops::RangeInclusive<i32>;
                                                                            let mut _532: &std::option::Option<u8>;
                                                                            let mut _533: &std::option::Option<u8>;
                                                                            scope 83 {
                                                                                debug left_val => _413;
                                                                                debug right_val => _414;
                                                                                let _417: core::panicking::AssertKind;
                                                                                scope 84 {
                                                                                    debug kind => _417;
                                                                                }
                                                                            }
                                                                            scope 85 {
                                                                                debug left_val => _424;
                                                                                debug right_val => _425;
                                                                                let _428: core::panicking::AssertKind;
                                                                                scope 86 {
                                                                                    debug kind => _428;
                                                                                }
                                                                            }
                                                                            scope 87 {
                                                                                debug nonsense => _435;
                                                                                let _440: &std::option::Option<i32>;
                                                                                let _441: &std::option::Option<i32>;
                                                                                let _454: std::string::String;
                                                                                let _461: &std::string::String;
                                                                                let _462: &&str;
                                                                                let _471: std::string::String;
                                                                                let _478: &std::string::String;
                                                                                let _479: &&str;
                                                                                let _488: std::string::String;
                                                                                let _495: &std::string::String;
                                                                                let _496: &&str;
                                                                                let _505: std::string::String;
                                                                                let _512: &std::string::String;
                                                                                let _513: &&str;
                                                                                let mut _519: &&str;
                                                                                let mut _520: &std::ops::RangeInclusive<P>;
                                                                                let mut _521: &[&str; 1];
                                                                                let mut _522: &&str;
                                                                                let mut _523: &std::ops::RangeInclusive<i32>;
                                                                                let mut _524: &[&str; 1];
                                                                                let mut _525: &&str;
                                                                                let mut _526: &std::ops::RangeToInclusive<i32>;
                                                                                let mut _527: &[&str; 1];
                                                                                let mut _528: &&str;
                                                                                let mut _529: &std::ops::RangeInclusive<i32>;
                                                                                let mut _530: &[&str; 1];
                                                                                let mut _531: &std::option::Option<i32>;
                                                                                scope 88 {
                                                                                    debug left_val => _440;
                                                                                    debug right_val => _441;
                                                                                    let _444: core::panicking::AssertKind;
                                                                                    scope 89 {
                                                                                        debug kind => _444;
                                                                                    }
                                                                                }
                                                                                scope 90 {
                                                                                    debug res => _454;
                                                                                }
                                                                                scope 91 {
                                                                                    debug left_val => _461;
                                                                                    debug right_val => _462;
                                                                                    let _465: core::panicking::AssertKind;
                                                                                    scope 92 {
                                                                                        debug kind => _465;
                                                                                    }
                                                                                }
                                                                                scope 93 {
                                                                                    debug res => _471;
                                                                                }
                                                                                scope 94 {
                                                                                    debug left_val => _478;
                                                                                    debug right_val => _479;
                                                                                    let _482: core::panicking::AssertKind;
                                                                                    scope 95 {
                                                                                        debug kind => _482;
                                                                                    }
                                                                                }
                                                                                scope 96 {
                                                                                    debug res => _488;
                                                                                }
                                                                                scope 97 {
                                                                                    debug left_val => _495;
                                                                                    debug right_val => _496;
                                                                                    let _499: core::panicking::AssertKind;
                                                                                    scope 98 {
                                                                                        debug kind => _499;
                                                                                    }
                                                                                }
                                                                                scope 99 {
                                                                                    debug res => _505;
                                                                                }
                                                                                scope 100 {
                                                                                    debug left_val => _512;
                                                                                    debug right_val => _513;
                                                                                    let _516: core::panicking::AssertKind;
                                                                                    scope 101 {
                                                                                        debug kind => _516;
                                                                                    }
                                                                                }
                                                                            }
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    bb0: {
        _1 = const 0_usize;
        _3 = RangeInclusive::<usize>::new(const 0_usize, const 10_usize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = <RangeInclusive<usize> as IntoIterator>::into_iter(move _3) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = move _2;
        goto -> bb3;
    }

    bb3: {
        _6 = &mut _4;
        _5 = <RangeInclusive<usize> as Iterator>::next(_6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _7 = discriminant(_5);
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6];
    }

    bb5: {
        _8 = ((_5 as Some).0: usize);
        _11 = Ge(_8, const 0_usize);
        switchInt(move _11) -> [0: bb8, otherwise: bb9];
    }

    bb6: {
        unreachable;
    }

    bb7: {
        _15 = &_1;
        _562 = const _;
        _14 = (move _15, _562);
        _16 = (_14.0: &usize);
        _17 = (_14.1: &usize);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb14, otherwise: bb13];
    }

    bb8: {
        _10 = const false;
        goto -> bb10;
    }

    bb9: {
        _12 = Le(_8, const 10_usize);
        _10 = move _12;
        goto -> bb10;
    }

    bb10: {
        _9 = Not(move _10);
        switchInt(move _9) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _13 = core::panicking::panic(const "assertion failed: i >= 0 && i <= 10") -> unwind continue;
    }

    bb12: {
        _1 = Add(_1, _8);
        goto -> bb3;
    }

    bb13: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<usize, usize>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb14: {
        _25 = const 0_usize;
        _26 = RangeInclusive::<usize>::new(const 0_usize, const 10_usize) -> [return: bb15, unwind continue];
    }

    bb15: {
        _28 = move _26;
        _27 = <RangeInclusive<usize> as IntoIterator>::into_iter(move _28) -> [return: bb16, unwind continue];
    }

    bb16: {
        _29 = move _27;
        goto -> bb17;
    }

    bb17: {
        _31 = &mut _29;
        _30 = <RangeInclusive<usize> as Iterator>::next(_31) -> [return: bb18, unwind continue];
    }

    bb18: {
        _32 = discriminant(_30);
        switchInt(move _32) -> [0: bb20, 1: bb19, otherwise: bb6];
    }

    bb19: {
        _33 = ((_30 as Some).0: usize);
        _36 = Ge(_33, const 0_usize);
        switchInt(move _36) -> [0: bb21, otherwise: bb22];
    }

    bb20: {
        _40 = &_25;
        _561 = const _;
        _39 = (move _40, _561);
        _41 = (_39.0: &usize);
        _42 = (_39.1: &usize);
        _45 = (*_41);
        _46 = (*_42);
        _44 = Eq(move _45, move _46);
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb27, otherwise: bb26];
    }

    bb21: {
        _35 = const false;
        goto -> bb23;
    }

    bb22: {
        _37 = Le(_33, const 10_usize);
        _35 = move _37;
        goto -> bb23;
    }

    bb23: {
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb25, otherwise: bb24];
    }

    bb24: {
        _38 = core::panicking::panic(const "assertion failed: i >= 0 && i <= 10") -> unwind continue;
    }

    bb25: {
        _25 = Add(_25, _33);
        goto -> bb17;
    }

    bb26: {
        _47 = core::panicking::AssertKind::Eq;
        _49 = Option::<Arguments<'_>>::None;
        _48 = core::panicking::assert_failed::<usize, usize>(move _47, _41, _42, move _49) -> unwind continue;
    }

    bb27: {
        _50 = const 0_usize;
        _53 = RangeInclusive::<usize>::new(const 0_usize, const 10_usize) -> [return: bb28, unwind continue];
    }

    bb28: {
        _52 = <RangeInclusive<usize> as Iterator>::step_by(move _53, const 2_usize) -> [return: bb29, unwind continue];
    }

    bb29: {
        _51 = <StepBy<RangeInclusive<usize>> as IntoIterator>::into_iter(move _52) -> [return: bb30, unwind continue];
    }

    bb30: {
        _54 = move _51;
        goto -> bb31;
    }

    bb31: {
        _56 = &mut _54;
        _55 = <StepBy<RangeInclusive<usize>> as Iterator>::next(_56) -> [return: bb32, unwind continue];
    }

    bb32: {
        _57 = discriminant(_55);
        switchInt(move _57) -> [0: bb34, 1: bb33, otherwise: bb6];
    }

    bb33: {
        _58 = ((_55 as Some).0: usize);
        _62 = Ge(_58, const 0_usize);
        switchInt(move _62) -> [0: bb38, otherwise: bb39];
    }

    bb34: {
        _69 = &_50;
        _560 = const _;
        _68 = (move _69, _560);
        _70 = (_68.0: &usize);
        _71 = (_68.1: &usize);
        _74 = (*_70);
        _75 = (*_71);
        _73 = Eq(move _74, move _75);
        _72 = Not(move _73);
        switchInt(move _72) -> [0: bb45, otherwise: bb44];
    }

    bb35: {
        _60 = const false;
        goto -> bb37;
    }

    bb36: {
        _66 = Eq(const 2_usize, const 0_usize);
        assert(!move _66, "attempt to calculate the remainder of `{}` with a divisor of zero", _58) -> [success: bb41, unwind continue];
    }

    bb37: {
        _59 = Not(move _60);
        switchInt(move _59) -> [0: bb43, otherwise: bb42];
    }

    bb38: {
        _61 = const false;
        goto -> bb40;
    }

    bb39: {
        _63 = Le(_58, const 10_usize);
        _61 = move _63;
        goto -> bb40;
    }

    bb40: {
        switchInt(move _61) -> [0: bb35, otherwise: bb36];
    }

    bb41: {
        _65 = Rem(_58, const 2_usize);
        _64 = Eq(move _65, const 0_usize);
        _60 = move _64;
        goto -> bb37;
    }

    bb42: {
        _67 = core::panicking::panic(const "assertion failed: i >= 0 && i <= 10 && i % 2 == 0") -> unwind continue;
    }

    bb43: {
        _50 = Add(_50, _58);
        goto -> bb31;
    }

    bb44: {
        _76 = core::panicking::AssertKind::Eq;
        _78 = Option::<Arguments<'_>>::None;
        _77 = core::panicking::assert_failed::<usize, usize>(move _76, _70, _71, move _78) -> unwind continue;
    }

    bb45: {
        _81 = Add(const 4_usize, const 4_usize);
        _80 = Sub(move _81, const 3_usize);
        _79 = RangeInclusive::<usize>::new(const 0_usize, move _80) -> [return: bb46, unwind continue];
    }

    bb46: {
        _83 = foo() -> [return: bb47, unwind continue];
    }

    bb47: {
        _82 = RangeInclusive::<isize>::new(const 0_isize, move _83) -> [return: bb48, unwind continue];
    }

    bb48: {
        _559 = const _;
        _558 = const _;
        _84 = RangeInclusive::<&i32>::new(_559, _558) -> [return: bb49, unwind continue];
    }

    bb49: {
        _557 = const _;
        _85 = const 42_i32;
        _87 = &_85;
        _86 = RangeInclusive::<&i32>::new(_557, _87) -> [return: bb50, unwind continue];
    }

    bb50: {
        _89 = RangeInclusive::<i32>::new(const 0_i32, const 10_i32) -> [return: bb51, unwind continue];
    }

    bb51: {
        _88 = <RangeInclusive<i32> as Iterator>::collect::<Vec<i32>>(move _89) -> [return: bb52, unwind continue];
    }

    bb52: {
        _92 = &_88;
        _91 = <Vec<i32> as Deref>::deref(move _92) -> [return: bb53, unwind: bb231];
    }

    bb53: {
        _90 = _91;
        _93 = <String as From<&str>>::from(const "hello world") -> [return: bb54, unwind: bb231];
    }

    bb54: {
        _94 = const "hello world";
        _99 = &_88;
        _100 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb55, unwind: bb230];
    }

    bb55: {
        _98 = <Vec<i32> as Index<RangeInclusive<usize>>>::index(move _99, move _100) -> [return: bb56, unwind: bb230];
    }

    bb56: {
        _97 = _98;
        _96 = &_97;
        _556 = const _;
        _95 = (move _96, _556);
        _101 = (_95.0: &&[i32]);
        _102 = (_95.1: &&[i32; 4]);
        _104 = <&[i32] as PartialEq<&[i32; 4]>>::eq(_101, _102) -> [return: bb57, unwind: bb230];
    }

    bb57: {
        _103 = Not(move _104);
        switchInt(move _103) -> [0: bb59, otherwise: bb58];
    }

    bb58: {
        _105 = core::panicking::AssertKind::Eq;
        _107 = Option::<Arguments<'_>>::None;
        _106 = core::panicking::assert_failed::<&[i32], &[i32; 4]>(move _105, _101, _102, move _107) -> bb230;
    }

    bb59: {
        _112 = &_88;
        _113 = RangeToInclusive::<usize> { end: const 6_usize };
        _111 = <Vec<i32> as Index<RangeToInclusive<usize>>>::index(move _112, move _113) -> [return: bb60, unwind: bb230];
    }

    bb60: {
        _110 = _111;
        _109 = &_110;
        _555 = const _;
        _108 = (move _109, _555);
        _114 = (_108.0: &&[i32]);
        _115 = (_108.1: &&[i32; 7]);
        _117 = <&[i32] as PartialEq<&[i32; 7]>>::eq(_114, _115) -> [return: bb61, unwind: bb230];
    }

    bb61: {
        _116 = Not(move _117);
        switchInt(move _116) -> [0: bb63, otherwise: bb62];
    }

    bb62: {
        _118 = core::panicking::AssertKind::Eq;
        _120 = Option::<Arguments<'_>>::None;
        _119 = core::panicking::assert_failed::<&[i32], &[i32; 7]>(move _118, _114, _115, move _120) -> bb230;
    }

    bb63: {
        _125 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb64, unwind: bb230];
    }

    bb64: {
        _124 = <[i32] as Index<RangeInclusive<usize>>>::index(_90, move _125) -> [return: bb65, unwind: bb230];
    }

    bb65: {
        _123 = _124;
        _122 = &_123;
        _554 = const _;
        _121 = (move _122, _554);
        _126 = (_121.0: &&[i32]);
        _127 = (_121.1: &&[i32; 4]);
        _129 = <&[i32] as PartialEq<&[i32; 4]>>::eq(_126, _127) -> [return: bb66, unwind: bb230];
    }

    bb66: {
        _128 = Not(move _129);
        switchInt(move _128) -> [0: bb68, otherwise: bb67];
    }

    bb67: {
        _130 = core::panicking::AssertKind::Eq;
        _132 = Option::<Arguments<'_>>::None;
        _131 = core::panicking::assert_failed::<&[i32], &[i32; 4]>(move _130, _126, _127, move _132) -> bb230;
    }

    bb68: {
        _137 = RangeToInclusive::<usize> { end: const 6_usize };
        _136 = <[i32] as Index<RangeToInclusive<usize>>>::index(_90, move _137) -> [return: bb69, unwind: bb230];
    }

    bb69: {
        _135 = _136;
        _134 = &_135;
        _553 = const _;
        _133 = (move _134, _553);
        _138 = (_133.0: &&[i32]);
        _139 = (_133.1: &&[i32; 7]);
        _141 = <&[i32] as PartialEq<&[i32; 7]>>::eq(_138, _139) -> [return: bb70, unwind: bb230];
    }

    bb70: {
        _140 = Not(move _141);
        switchInt(move _140) -> [0: bb72, otherwise: bb71];
    }

    bb71: {
        _142 = core::panicking::AssertKind::Eq;
        _144 = Option::<Arguments<'_>>::None;
        _143 = core::panicking::assert_failed::<&[i32], &[i32; 7]>(move _142, _138, _139, move _144) -> bb230;
    }

    bb72: {
        _149 = &_93;
        _150 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb73, unwind: bb230];
    }

    bb73: {
        _148 = <String as Index<RangeInclusive<usize>>>::index(move _149, move _150) -> [return: bb74, unwind: bb230];
    }

    bb74: {
        _147 = _148;
        _146 = &_147;
        _552 = const _;
        _145 = (move _146, _552);
        _151 = (_145.0: &&str);
        _152 = (_145.1: &&str);
        _154 = <&str as PartialEq>::eq(_151, _152) -> [return: bb75, unwind: bb230];
    }

    bb75: {
        _153 = Not(move _154);
        switchInt(move _153) -> [0: bb77, otherwise: bb76];
    }

    bb76: {
        _155 = core::panicking::AssertKind::Eq;
        _157 = Option::<Arguments<'_>>::None;
        _156 = core::panicking::assert_failed::<&str, &str>(move _155, _151, _152, move _157) -> bb230;
    }

    bb77: {
        _162 = &_93;
        _163 = RangeToInclusive::<usize> { end: const 6_usize };
        _161 = <String as Index<RangeToInclusive<usize>>>::index(move _162, move _163) -> [return: bb78, unwind: bb230];
    }

    bb78: {
        _160 = _161;
        _159 = &_160;
        _551 = const _;
        _158 = (move _159, _551);
        _164 = (_158.0: &&str);
        _165 = (_158.1: &&str);
        _167 = <&str as PartialEq>::eq(_164, _165) -> [return: bb79, unwind: bb230];
    }

    bb79: {
        _166 = Not(move _167);
        switchInt(move _166) -> [0: bb81, otherwise: bb80];
    }

    bb80: {
        _168 = core::panicking::AssertKind::Eq;
        _170 = Option::<Arguments<'_>>::None;
        _169 = core::panicking::assert_failed::<&str, &str>(move _168, _164, _165, move _170) -> bb230;
    }

    bb81: {
        _175 = RangeInclusive::<usize>::new(const 3_usize, const 6_usize) -> [return: bb82, unwind: bb230];
    }

    bb82: {
        _174 = <str as Index<RangeInclusive<usize>>>::index(_94, move _175) -> [return: bb83, unwind: bb230];
    }

    bb83: {
        _173 = _174;
        _172 = &_173;
        _550 = const _;
        _171 = (move _172, _550);
        _176 = (_171.0: &&str);
        _177 = (_171.1: &&str);
        _179 = <&str as PartialEq>::eq(_176, _177) -> [return: bb84, unwind: bb230];
    }

    bb84: {
        _178 = Not(move _179);
        switchInt(move _178) -> [0: bb86, otherwise: bb85];
    }

    bb85: {
        _180 = core::panicking::AssertKind::Eq;
        _182 = Option::<Arguments<'_>>::None;
        _181 = core::panicking::assert_failed::<&str, &str>(move _180, _176, _177, move _182) -> bb230;
    }

    bb86: {
        _187 = RangeToInclusive::<usize> { end: const 6_usize };
        _186 = <str as Index<RangeToInclusive<usize>>>::index(_94, move _187) -> [return: bb87, unwind: bb230];
    }

    bb87: {
        _185 = _186;
        _184 = &_185;
        _549 = const _;
        _183 = (move _184, _549);
        _188 = (_183.0: &&str);
        _189 = (_183.1: &&str);
        _191 = <&str as PartialEq>::eq(_188, _189) -> [return: bb88, unwind: bb230];
    }

    bb88: {
        _190 = Not(move _191);
        switchInt(move _190) -> [0: bb90, otherwise: bb89];
    }

    bb89: {
        _192 = core::panicking::AssertKind::Eq;
        _194 = Option::<Arguments<'_>>::None;
        _193 = core::panicking::assert_failed::<&str, &str>(move _192, _188, _189, move _194) -> bb230;
    }

    bb90: {
        _195 = RangeInclusive::<u8>::new(const 0_u8, const u8::MAX) -> [return: bb91, unwind: bb230];
    }

    bb91: {
        _196 = RangeInclusive::<u8>::new(const 42_u8, const 42_u8) -> [return: bb92, unwind: bb230];
    }

    bb92: {
        _200 = &_195;
        _199 = <RangeInclusive<u8> as Iterator>::size_hint(move _200) -> [return: bb93, unwind: bb230];
    }

    bb93: {
        _198 = &_199;
        _548 = const _;
        _197 = (move _198, _548);
        _201 = (_197.0: &(usize, std::option::Option<usize>));
        _202 = (_197.1: &(usize, std::option::Option<usize>));
        _204 = <(usize, Option<usize>) as PartialEq>::eq(_201, _202) -> [return: bb94, unwind: bb230];
    }

    bb94: {
        _203 = Not(move _204);
        switchInt(move _203) -> [0: bb96, otherwise: bb95];
    }

    bb95: {
        _205 = core::panicking::AssertKind::Eq;
        _207 = Option::<Arguments<'_>>::None;
        _206 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _205, _201, _202, move _207) -> bb230;
    }

    bb96: {
        _211 = &_196;
        _210 = <RangeInclusive<u8> as Iterator>::size_hint(move _211) -> [return: bb97, unwind: bb230];
    }

    bb97: {
        _209 = &_210;
        _547 = const _;
        _208 = (move _209, _547);
        _212 = (_208.0: &(usize, std::option::Option<usize>));
        _213 = (_208.1: &(usize, std::option::Option<usize>));
        _215 = <(usize, Option<usize>) as PartialEq>::eq(_212, _213) -> [return: bb98, unwind: bb230];
    }

    bb98: {
        _214 = Not(move _215);
        switchInt(move _214) -> [0: bb100, otherwise: bb99];
    }

    bb99: {
        _216 = core::panicking::AssertKind::Eq;
        _218 = Option::<Arguments<'_>>::None;
        _217 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _216, _212, _213, move _218) -> bb230;
    }

    bb100: {
        _220 = &mut _195;
        _219 = <RangeInclusive<u8> as Iterator>::next(move _220) -> [return: bb101, unwind: bb230];
    }

    bb101: {
        _222 = &mut _196;
        _221 = <RangeInclusive<u8> as Iterator>::next(move _222) -> [return: bb102, unwind: bb230];
    }

    bb102: {
        _226 = &_195;
        _225 = <RangeInclusive<u8> as Iterator>::size_hint(move _226) -> [return: bb103, unwind: bb230];
    }

    bb103: {
        _224 = &_225;
        _546 = const _;
        _223 = (move _224, _546);
        _227 = (_223.0: &(usize, std::option::Option<usize>));
        _228 = (_223.1: &(usize, std::option::Option<usize>));
        _230 = <(usize, Option<usize>) as PartialEq>::eq(_227, _228) -> [return: bb104, unwind: bb230];
    }

    bb104: {
        _229 = Not(move _230);
        switchInt(move _229) -> [0: bb106, otherwise: bb105];
    }

    bb105: {
        _231 = core::panicking::AssertKind::Eq;
        _233 = Option::<Arguments<'_>>::None;
        _232 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _231, _227, _228, move _233) -> bb230;
    }

    bb106: {
        _237 = &_196;
        _236 = <RangeInclusive<u8> as Iterator>::size_hint(move _237) -> [return: bb107, unwind: bb230];
    }

    bb107: {
        _235 = &_236;
        _545 = const _;
        _234 = (move _235, _545);
        _238 = (_234.0: &(usize, std::option::Option<usize>));
        _239 = (_234.1: &(usize, std::option::Option<usize>));
        _241 = <(usize, Option<usize>) as PartialEq>::eq(_238, _239) -> [return: bb108, unwind: bb230];
    }

    bb108: {
        _240 = Not(move _241);
        switchInt(move _240) -> [0: bb110, otherwise: bb109];
    }

    bb109: {
        _242 = core::panicking::AssertKind::Eq;
        _244 = Option::<Arguments<'_>>::None;
        _243 = core::panicking::assert_failed::<(usize, Option<usize>), (usize, Option<usize>)>(move _242, _238, _239, move _244) -> bb230;
    }

    bb110: {
        _247 = &_196;
        _246 = RangeInclusive::<u8>::is_empty(move _247) -> [return: bb111, unwind: bb230];
    }

    bb111: {
        _245 = Not(move _246);
        switchInt(move _245) -> [0: bb113, otherwise: bb112];
    }

    bb112: {
        _248 = core::panicking::panic(const "assertion failed: short.is_empty()") -> bb230;
    }

    bb113: {
        _252 = &_195;
        _251 = <RangeInclusive<u8> as ExactSizeIterator>::len(move _252) -> [return: bb114, unwind: bb230];
    }

    bb114: {
        _250 = &_251;
        _544 = const _;
        _249 = (move _250, _544);
        _253 = (_249.0: &usize);
        _254 = (_249.1: &usize);
        _257 = (*_253);
        _258 = (*_254);
        _256 = Eq(move _257, move _258);
        _255 = Not(move _256);
        switchInt(move _255) -> [0: bb116, otherwise: bb115];
    }

    bb115: {
        _259 = core::panicking::AssertKind::Eq;
        _261 = Option::<Arguments<'_>>::None;
        _260 = core::panicking::assert_failed::<usize, usize>(move _259, _253, _254, move _261) -> bb230;
    }

    bb116: {
        _265 = &_196;
        _264 = <RangeInclusive<u8> as ExactSizeIterator>::len(move _265) -> [return: bb117, unwind: bb230];
    }

    bb117: {
        _263 = &_264;
        _543 = const _;
        _262 = (move _263, _543);
        _266 = (_262.0: &usize);
        _267 = (_262.1: &usize);
        _270 = (*_266);
        _271 = (*_267);
        _269 = Eq(move _270, move _271);
        _268 = Not(move _269);
        switchInt(move _268) -> [0: bb119, otherwise: bb118];
    }

    bb118: {
        _272 = core::panicking::AssertKind::Eq;
        _274 = Option::<Arguments<'_>>::None;
        _273 = core::panicking::assert_failed::<usize, usize>(move _272, _266, _267, move _274) -> bb230;
    }

    bb119: {
        _278 = &mut _195;
        _277 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _278) -> [return: bb120, unwind: bb230];
    }

    bb120: {
        _276 = &_277;
        _542 = const _;
        _275 = (move _276, _542);
        _279 = (_275.0: &std::option::Option<u8>);
        _280 = (_275.1: &std::option::Option<u8>);
        _282 = <Option<u8> as PartialEq>::eq(_279, _280) -> [return: bb121, unwind: bb230];
    }

    bb121: {
        _281 = Not(move _282);
        switchInt(move _281) -> [0: bb123, otherwise: bb122];
    }

    bb122: {
        _283 = core::panicking::AssertKind::Eq;
        _285 = Option::<Arguments<'_>>::None;
        _284 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _283, _279, _280, move _285) -> bb230;
    }

    bb123: {
        _289 = &mut _195;
        _288 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _289) -> [return: bb124, unwind: bb230];
    }

    bb124: {
        _287 = &_288;
        _541 = const _;
        _286 = (move _287, _541);
        _290 = (_286.0: &std::option::Option<u8>);
        _291 = (_286.1: &std::option::Option<u8>);
        _293 = <Option<u8> as PartialEq>::eq(_290, _291) -> [return: bb125, unwind: bb230];
    }

    bb125: {
        _292 = Not(move _293);
        switchInt(move _292) -> [0: bb127, otherwise: bb126];
    }

    bb126: {
        _294 = core::panicking::AssertKind::Eq;
        _296 = Option::<Arguments<'_>>::None;
        _295 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _294, _290, _291, move _296) -> bb230;
    }

    bb127: {
        _300 = &mut _195;
        _299 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _300) -> [return: bb128, unwind: bb230];
    }

    bb128: {
        _298 = &_299;
        _540 = const _;
        _297 = (move _298, _540);
        _301 = (_297.0: &std::option::Option<u8>);
        _302 = (_297.1: &std::option::Option<u8>);
        _304 = <Option<u8> as PartialEq>::eq(_301, _302) -> [return: bb129, unwind: bb230];
    }

    bb129: {
        _303 = Not(move _304);
        switchInt(move _303) -> [0: bb131, otherwise: bb130];
    }

    bb130: {
        _305 = core::panicking::AssertKind::Eq;
        _307 = Option::<Arguments<'_>>::None;
        _306 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _305, _301, _302, move _307) -> bb230;
    }

    bb131: {
        _311 = &mut _195;
        _310 = <RangeInclusive<u8> as Iterator>::next(move _311) -> [return: bb132, unwind: bb230];
    }

    bb132: {
        _309 = &_310;
        _539 = const _;
        _308 = (move _309, _539);
        _312 = (_308.0: &std::option::Option<u8>);
        _313 = (_308.1: &std::option::Option<u8>);
        _315 = <Option<u8> as PartialEq>::eq(_312, _313) -> [return: bb133, unwind: bb230];
    }

    bb133: {
        _314 = Not(move _315);
        switchInt(move _314) -> [0: bb135, otherwise: bb134];
    }

    bb134: {
        _316 = core::panicking::AssertKind::Eq;
        _318 = Option::<Arguments<'_>>::None;
        _317 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _316, _312, _313, move _318) -> bb230;
    }

    bb135: {
        _322 = &mut _195;
        _321 = <RangeInclusive<u8> as Iterator>::next(move _322) -> [return: bb136, unwind: bb230];
    }

    bb136: {
        _320 = &_321;
        _538 = const _;
        _319 = (move _320, _538);
        _323 = (_319.0: &std::option::Option<u8>);
        _324 = (_319.1: &std::option::Option<u8>);
        _326 = <Option<u8> as PartialEq>::eq(_323, _324) -> [return: bb137, unwind: bb230];
    }

    bb137: {
        _325 = Not(move _326);
        switchInt(move _325) -> [0: bb139, otherwise: bb138];
    }

    bb138: {
        _327 = core::panicking::AssertKind::Eq;
        _329 = Option::<Arguments<'_>>::None;
        _328 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _327, _323, _324, move _329) -> bb230;
    }

    bb139: {
        _333 = &mut _195;
        _332 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _333) -> [return: bb140, unwind: bb230];
    }

    bb140: {
        _331 = &_332;
        _537 = const _;
        _330 = (move _331, _537);
        _334 = (_330.0: &std::option::Option<u8>);
        _335 = (_330.1: &std::option::Option<u8>);
        _337 = <Option<u8> as PartialEq>::eq(_334, _335) -> [return: bb141, unwind: bb230];
    }

    bb141: {
        _336 = Not(move _337);
        switchInt(move _336) -> [0: bb143, otherwise: bb142];
    }

    bb142: {
        _338 = core::panicking::AssertKind::Eq;
        _340 = Option::<Arguments<'_>>::None;
        _339 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _338, _334, _335, move _340) -> bb230;
    }

    bb143: {
        _342 = RangeInclusive::<u8>::new(const 3_u8, const 251_u8) -> [return: bb144, unwind: bb230];
    }

    bb144: {
        _341 = <RangeInclusive<u8> as IntoIterator>::into_iter(move _342) -> [return: bb145, unwind: bb230];
    }

    bb145: {
        _343 = move _341;
        goto -> bb146;
    }

    bb146: {
        _345 = &mut _343;
        _344 = <RangeInclusive<u8> as Iterator>::next(_345) -> [return: bb147, unwind: bb230];
    }

    bb147: {
        _346 = discriminant(_344);
        switchInt(move _346) -> [0: bb149, 1: bb148, otherwise: bb6];
    }

    bb148: {
        _347 = ((_344 as Some).0: u8);
        _351 = &mut _195;
        _350 = <RangeInclusive<u8> as Iterator>::next(move _351) -> [return: bb150, unwind: bb230];
    }

    bb149: {
        _363 = &_195;
        _362 = RangeInclusive::<u8>::is_empty(move _363) -> [return: bb153, unwind: bb230];
    }

    bb150: {
        _349 = &_350;
        _353 = Option::<u8>::Some(_347);
        _352 = &_353;
        _348 = (move _349, move _352);
        _354 = (_348.0: &std::option::Option<u8>);
        _355 = (_348.1: &std::option::Option<u8>);
        _357 = <Option<u8> as PartialEq>::eq(_354, _355) -> [return: bb151, unwind: bb230];
    }

    bb151: {
        _356 = Not(move _357);
        switchInt(move _356) -> [0: bb146, otherwise: bb152];
    }

    bb152: {
        _358 = core::panicking::AssertKind::Eq;
        _360 = Option::<Arguments<'_>>::None;
        _359 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _358, _354, _355, move _360) -> bb230;
    }

    bb153: {
        _361 = Not(move _362);
        switchInt(move _361) -> [0: bb155, otherwise: bb154];
    }

    bb154: {
        _364 = core::panicking::panic(const "assertion failed: long.is_empty()") -> bb230;
    }

    bb155: {
        _365 = RangeInclusive::<i32>::new(const 1_i32, const 0_i32) -> [return: bb156, unwind: bb230];
    }

    bb156: {
        _369 = &mut _365;
        _368 = <RangeInclusive<i32> as DoubleEndedIterator>::next_back(move _369) -> [return: bb157, unwind: bb230];
    }

    bb157: {
        _367 = &_368;
        _536 = const _;
        _366 = (move _367, _536);
        _370 = (_366.0: &std::option::Option<i32>);
        _371 = (_366.1: &std::option::Option<i32>);
        _373 = <Option<i32> as PartialEq>::eq(_370, _371) -> [return: bb158, unwind: bb230];
    }

    bb158: {
        _372 = Not(move _373);
        switchInt(move _372) -> [0: bb160, otherwise: bb159];
    }

    bb159: {
        _374 = core::panicking::AssertKind::Eq;
        _376 = Option::<Arguments<'_>>::None;
        _375 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _374, _370, _371, move _376) -> bb230;
    }

    bb160: {
        _379 = &_365;
        _378 = RangeInclusive::<i32>::is_empty(move _379) -> [return: bb161, unwind: bb230];
    }

    bb161: {
        _377 = Not(move _378);
        switchInt(move _377) -> [0: bb163, otherwise: bb162];
    }

    bb162: {
        _380 = core::panicking::panic(const "assertion failed: narrow.is_empty()") -> bb230;
    }

    bb163: {
        _381 = RangeInclusive::<u8>::new(const 0_u8, const 0_u8) -> [return: bb164, unwind: bb230];
    }

    bb164: {
        _385 = &mut _381;
        _384 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _385) -> [return: bb165, unwind: bb230];
    }

    bb165: {
        _383 = &_384;
        _535 = const _;
        _382 = (move _383, _535);
        _386 = (_382.0: &std::option::Option<u8>);
        _387 = (_382.1: &std::option::Option<u8>);
        _389 = <Option<u8> as PartialEq>::eq(_386, _387) -> [return: bb166, unwind: bb230];
    }

    bb166: {
        _388 = Not(move _389);
        switchInt(move _388) -> [0: bb168, otherwise: bb167];
    }

    bb167: {
        _390 = core::panicking::AssertKind::Eq;
        _392 = Option::<Arguments<'_>>::None;
        _391 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _390, _386, _387, move _392) -> bb230;
    }

    bb168: {
        _396 = &mut _381;
        _395 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _396) -> [return: bb169, unwind: bb230];
    }

    bb169: {
        _394 = &_395;
        _534 = const _;
        _393 = (move _394, _534);
        _397 = (_393.0: &std::option::Option<u8>);
        _398 = (_393.1: &std::option::Option<u8>);
        _400 = <Option<u8> as PartialEq>::eq(_397, _398) -> [return: bb170, unwind: bb230];
    }

    bb170: {
        _399 = Not(move _400);
        switchInt(move _399) -> [0: bb172, otherwise: bb171];
    }

    bb171: {
        _401 = core::panicking::AssertKind::Eq;
        _403 = Option::<Arguments<'_>>::None;
        _402 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _401, _397, _398, move _403) -> bb230;
    }

    bb172: {
        _406 = &_381;
        _405 = RangeInclusive::<u8>::is_empty(move _406) -> [return: bb173, unwind: bb230];
    }

    bb173: {
        _404 = Not(move _405);
        switchInt(move _404) -> [0: bb175, otherwise: bb174];
    }

    bb174: {
        _407 = core::panicking::panic(const "assertion failed: zero.is_empty()") -> bb230;
    }

    bb175: {
        _408 = RangeInclusive::<u8>::new(const u8::MAX, const u8::MAX) -> [return: bb176, unwind: bb230];
    }

    bb176: {
        _412 = &mut _408;
        _411 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _412) -> [return: bb177, unwind: bb230];
    }

    bb177: {
        _410 = &_411;
        _533 = const _;
        _409 = (move _410, _533);
        _413 = (_409.0: &std::option::Option<u8>);
        _414 = (_409.1: &std::option::Option<u8>);
        _416 = <Option<u8> as PartialEq>::eq(_413, _414) -> [return: bb178, unwind: bb230];
    }

    bb178: {
        _415 = Not(move _416);
        switchInt(move _415) -> [0: bb180, otherwise: bb179];
    }

    bb179: {
        _417 = core::panicking::AssertKind::Eq;
        _419 = Option::<Arguments<'_>>::None;
        _418 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _417, _413, _414, move _419) -> bb230;
    }

    bb180: {
        _423 = &mut _408;
        _422 = <RangeInclusive<u8> as DoubleEndedIterator>::next_back(move _423) -> [return: bb181, unwind: bb230];
    }

    bb181: {
        _421 = &_422;
        _532 = const _;
        _420 = (move _421, _532);
        _424 = (_420.0: &std::option::Option<u8>);
        _425 = (_420.1: &std::option::Option<u8>);
        _427 = <Option<u8> as PartialEq>::eq(_424, _425) -> [return: bb182, unwind: bb230];
    }

    bb182: {
        _426 = Not(move _427);
        switchInt(move _426) -> [0: bb184, otherwise: bb183];
    }

    bb183: {
        _428 = core::panicking::AssertKind::Eq;
        _430 = Option::<Arguments<'_>>::None;
        _429 = core::panicking::assert_failed::<Option<u8>, Option<u8>>(move _428, _424, _425, move _430) -> bb230;
    }

    bb184: {
        _433 = &_408;
        _432 = RangeInclusive::<u8>::is_empty(move _433) -> [return: bb185, unwind: bb230];
    }

    bb185: {
        _431 = Not(move _432);
        switchInt(move _431) -> [0: bb187, otherwise: bb186];
    }

    bb186: {
        _434 = core::panicking::panic(const "assertion failed: high.is_empty()") -> bb230;
    }

    bb187: {
        _435 = RangeInclusive::<i32>::new(const 10_i32, const 5_i32) -> [return: bb188, unwind: bb230];
    }

    bb188: {
        _439 = &mut _435;
        _438 = <RangeInclusive<i32> as Iterator>::next(move _439) -> [return: bb189, unwind: bb230];
    }

    bb189: {
        _437 = &_438;
        _531 = const _;
        _436 = (move _437, _531);
        _440 = (_436.0: &std::option::Option<i32>);
        _441 = (_436.1: &std::option::Option<i32>);
        _443 = <Option<i32> as PartialEq>::eq(_440, _441) -> [return: bb190, unwind: bb230];
    }

    bb190: {
        _442 = Not(move _443);
        switchInt(move _442) -> [0: bb192, otherwise: bb191];
    }

    bb191: {
        _444 = core::panicking::AssertKind::Eq;
        _446 = Option::<Arguments<'_>>::None;
        _445 = core::panicking::assert_failed::<Option<i32>, Option<i32>>(move _444, _440, _441, move _446) -> bb230;
    }

    bb192: {
        _449 = &_435;
        _448 = RangeInclusive::<i32>::is_empty(move _449) -> [return: bb193, unwind: bb230];
    }

    bb193: {
        _447 = Not(move _448);
        switchInt(move _447) -> [0: bb195, otherwise: bb194];
    }

    bb194: {
        _450 = core::panicking::panic(const "assertion failed: nonsense.is_empty()") -> bb230;
    }

    bb195: {
        _530 = const _;
        _456 = _530 as &[&str] (Pointer(Unsize));
        _529 = const _;
        _460 = core::fmt::rt::Argument::<'_>::new_debug::<RangeInclusive<i32>>(_529) -> [return: bb196, unwind: bb230];
    }

    bb196: {
        _459 = [move _460];
        _458 = &_459;
        _457 = _458 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _455 = Arguments::<'_>::new_v1(move _456, move _457) -> [return: bb197, unwind: bb230];
    }

    bb197: {
        _454 = format(move _455) -> [return: bb198, unwind: bb230];
    }

    bb198: {
        _453 = move _454;
        _452 = &_453;
        _528 = const _;
        _451 = (move _452, _528);
        _461 = (_451.0: &std::string::String);
        _462 = (_451.1: &&str);
        _464 = <String as PartialEq<&str>>::eq(_461, _462) -> [return: bb199, unwind: bb229];
    }

    bb199: {
        _463 = Not(move _464);
        switchInt(move _463) -> [0: bb201, otherwise: bb200];
    }

    bb200: {
        _465 = core::panicking::AssertKind::Eq;
        _467 = Option::<Arguments<'_>>::None;
        _466 = core::panicking::assert_failed::<String, &str>(move _465, _461, _462, move _467) -> bb229;
    }

    bb201: {
        drop(_453) -> [return: bb202, unwind: bb230];
    }

    bb202: {
        _527 = const _;
        _473 = _527 as &[&str] (Pointer(Unsize));
        _526 = const _;
        _477 = core::fmt::rt::Argument::<'_>::new_debug::<RangeToInclusive<i32>>(_526) -> [return: bb203, unwind: bb230];
    }

    bb203: {
        _476 = [move _477];
        _475 = &_476;
        _474 = _475 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _472 = Arguments::<'_>::new_v1(move _473, move _474) -> [return: bb204, unwind: bb230];
    }

    bb204: {
        _471 = format(move _472) -> [return: bb205, unwind: bb230];
    }

    bb205: {
        _470 = move _471;
        _469 = &_470;
        _525 = const _;
        _468 = (move _469, _525);
        _478 = (_468.0: &std::string::String);
        _479 = (_468.1: &&str);
        _481 = <String as PartialEq<&str>>::eq(_478, _479) -> [return: bb206, unwind: bb228];
    }

    bb206: {
        _480 = Not(move _481);
        switchInt(move _480) -> [0: bb208, otherwise: bb207];
    }

    bb207: {
        _482 = core::panicking::AssertKind::Eq;
        _484 = Option::<Arguments<'_>>::None;
        _483 = core::panicking::assert_failed::<String, &str>(move _482, _478, _479, move _484) -> bb228;
    }

    bb208: {
        drop(_470) -> [return: bb209, unwind: bb230];
    }

    bb209: {
        _524 = const _;
        _490 = _524 as &[&str] (Pointer(Unsize));
        _523 = const _;
        _494 = core::fmt::rt::Argument::<'_>::new_debug::<RangeInclusive<i32>>(_523) -> [return: bb210, unwind: bb230];
    }

    bb210: {
        _493 = [move _494];
        _492 = &_493;
        _491 = _492 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _489 = Arguments::<'_>::new_v1(move _490, move _491) -> [return: bb211, unwind: bb230];
    }

    bb211: {
        _488 = format(move _489) -> [return: bb212, unwind: bb230];
    }

    bb212: {
        _487 = move _488;
        _486 = &_487;
        _522 = const _;
        _485 = (move _486, _522);
        _495 = (_485.0: &std::string::String);
        _496 = (_485.1: &&str);
        _498 = <String as PartialEq<&str>>::eq(_495, _496) -> [return: bb213, unwind: bb227];
    }

    bb213: {
        _497 = Not(move _498);
        switchInt(move _497) -> [0: bb215, otherwise: bb214];
    }

    bb214: {
        _499 = core::panicking::AssertKind::Eq;
        _501 = Option::<Arguments<'_>>::None;
        _500 = core::panicking::assert_failed::<String, &str>(move _499, _495, _496, move _501) -> bb227;
    }

    bb215: {
        drop(_487) -> [return: bb216, unwind: bb230];
    }

    bb216: {
        _521 = const _;
        _507 = _521 as &[&str] (Pointer(Unsize));
        _520 = const _;
        _511 = core::fmt::rt::Argument::<'_>::new_debug::<RangeInclusive<P>>(_520) -> [return: bb217, unwind: bb230];
    }

    bb217: {
        _510 = [move _511];
        _509 = &_510;
        _508 = _509 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _506 = Arguments::<'_>::new_v1(move _507, move _508) -> [return: bb218, unwind: bb230];
    }

    bb218: {
        _505 = format(move _506) -> [return: bb219, unwind: bb230];
    }

    bb219: {
        _504 = move _505;
        _503 = &_504;
        _519 = const _;
        _502 = (move _503, _519);
        _512 = (_502.0: &std::string::String);
        _513 = (_502.1: &&str);
        _515 = <String as PartialEq<&str>>::eq(_512, _513) -> [return: bb220, unwind: bb226];
    }

    bb220: {
        _514 = Not(move _515);
        switchInt(move _514) -> [0: bb222, otherwise: bb221];
    }

    bb221: {
        _516 = core::panicking::AssertKind::Eq;
        _518 = Option::<Arguments<'_>>::None;
        _517 = core::panicking::assert_failed::<String, &str>(move _516, _512, _513, move _518) -> bb226;
    }

    bb222: {
        drop(_504) -> [return: bb223, unwind: bb230];
    }

    bb223: {
        drop(_93) -> [return: bb224, unwind: bb231];
    }

    bb224: {
        drop(_88) -> [return: bb225, unwind continue];
    }

    bb225: {
        return;
    }

    bb226 (cleanup): {
        drop(_504) -> [return: bb230, unwind terminate];
    }

    bb227 (cleanup): {
        drop(_487) -> [return: bb230, unwind terminate];
    }

    bb228 (cleanup): {
        drop(_470) -> [return: bb230, unwind terminate];
    }

    bb229 (cleanup): {
        drop(_453) -> [return: bb230, unwind terminate];
    }

    bb230 (cleanup): {
        drop(_93) -> [return: bb231, unwind terminate];
    }

    bb231 (cleanup): {
        drop(_88) -> [return: bb232, unwind terminate];
    }

    bb232 (cleanup): {
        resume;
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "P(1)..=P(2)";
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &RangeInclusive<P> = {
    let mut _0: &std::ops::RangeInclusive<P>;
    let mut _1: std::ops::RangeInclusive<P>;
    let mut _2: P;
    let mut _3: P;

    bb0: {
        _2 = P(const 1_u8);
        _3 = P(const 2_u8);
        _1 = RangeInclusive::<P>::new(move _2, move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "9..=6";
        _0 = &_1;
        return;
    }
}

promoted[4] in main: &RangeInclusive<i32> = {
    let mut _0: &std::ops::RangeInclusive<i32>;
    let mut _1: std::ops::RangeInclusive<i32>;

    bb0: {
        _1 = RangeInclusive::<i32>::new(const 9_i32, const 6_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[5] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[6] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "..=10";
        _0 = &_1;
        return;
    }
}

promoted[7] in main: &RangeToInclusive<i32> = {
    let mut _0: &std::ops::RangeToInclusive<i32>;
    let mut _1: std::ops::RangeToInclusive<i32>;

    bb0: {
        _1 = RangeToInclusive::<i32> { end: const 10_i32 };
        _0 = &_1;
        return;
    }
}

promoted[8] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[9] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "0..=10";
        _0 = &_1;
        return;
    }
}

promoted[10] in main: &RangeInclusive<i32> = {
    let mut _0: &std::ops::RangeInclusive<i32>;
    let mut _1: std::ops::RangeInclusive<i32>;

    bb0: {
        _1 = RangeInclusive::<i32>::new(const 0_i32, const 10_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = &_1;
        return;
    }
}

promoted[11] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

promoted[12] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::None;
        _0 = &_1;
        return;
    }
}

promoted[13] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::None;
        _0 = &_1;
        return;
    }
}

promoted[14] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::Some(const u8::MAX);
        _0 = &_1;
        return;
    }
}

promoted[15] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::None;
        _0 = &_1;
        return;
    }
}

promoted[16] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::Some(const 0_u8);
        _0 = &_1;
        return;
    }
}

promoted[17] in main: &Option<i32> = {
    let mut _0: &std::option::Option<i32>;
    let mut _1: std::option::Option<i32>;

    bb0: {
        _1 = Option::<i32>::None;
        _0 = &_1;
        return;
    }
}

promoted[18] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::Some(const 252_u8);
        _0 = &_1;
        return;
    }
}

promoted[19] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::Some(const 2_u8);
        _0 = &_1;
        return;
    }
}

promoted[20] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::Some(const 1_u8);
        _0 = &_1;
        return;
    }
}

promoted[21] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::Some(const 253_u8);
        _0 = &_1;
        return;
    }
}

promoted[22] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::Some(const 254_u8);
        _0 = &_1;
        return;
    }
}

promoted[23] in main: &Option<u8> = {
    let mut _0: &std::option::Option<u8>;
    let mut _1: std::option::Option<u8>;

    bb0: {
        _1 = Option::<u8>::Some(const u8::MAX);
        _0 = &_1;
        return;
    }
}

promoted[24] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 0_usize;
        _0 = &_1;
        return;
    }
}

promoted[25] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 255_usize;
        _0 = &_1;
        return;
    }
}

promoted[26] in main: &(usize, Option<usize>) = {
    let mut _0: &(usize, std::option::Option<usize>);
    let mut _1: (usize, std::option::Option<usize>);
    let mut _2: std::option::Option<usize>;

    bb0: {
        _2 = Option::<usize>::Some(const 0_usize);
        _1 = (const 0_usize, move _2);
        _0 = &_1;
        return;
    }
}

promoted[27] in main: &(usize, Option<usize>) = {
    let mut _0: &(usize, std::option::Option<usize>);
    let mut _1: (usize, std::option::Option<usize>);
    let mut _2: std::option::Option<usize>;

    bb0: {
        _2 = Option::<usize>::Some(const 255_usize);
        _1 = (const 255_usize, move _2);
        _0 = &_1;
        return;
    }
}

promoted[28] in main: &(usize, Option<usize>) = {
    let mut _0: &(usize, std::option::Option<usize>);
    let mut _1: (usize, std::option::Option<usize>);
    let mut _2: std::option::Option<usize>;

    bb0: {
        _2 = Option::<usize>::Some(const 1_usize);
        _1 = (const 1_usize, move _2);
        _0 = &_1;
        return;
    }
}

promoted[29] in main: &(usize, Option<usize>) = {
    let mut _0: &(usize, std::option::Option<usize>);
    let mut _1: (usize, std::option::Option<usize>);
    let mut _2: std::option::Option<usize>;

    bb0: {
        _2 = Option::<usize>::Some(const 256_usize);
        _1 = (const 256_usize, move _2);
        _0 = &_1;
        return;
    }
}

promoted[30] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "hello w";
        _0 = &_1;
        return;
    }
}

promoted[31] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "lo w";
        _0 = &_1;
        return;
    }
}

promoted[32] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "hello w";
        _0 = &_1;
        return;
    }
}

promoted[33] in main: &&str = {
    let mut _0: &&str;
    let mut _1: &str;

    bb0: {
        _1 = const "lo w";
        _0 = &_1;
        return;
    }
}

promoted[34] in main: &&[i32; 7] = {
    let mut _0: &&[i32; 7];
    let mut _1: &[i32; 7];
    let mut _2: [i32; 7];

    bb0: {
        _2 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[35] in main: &&[i32; 4] = {
    let mut _0: &&[i32; 4];
    let mut _1: &[i32; 4];
    let mut _2: [i32; 4];

    bb0: {
        _2 = [const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[36] in main: &&[i32; 7] = {
    let mut _0: &&[i32; 7];
    let mut _1: &[i32; 7];
    let mut _2: [i32; 7];

    bb0: {
        _2 = [const 0_i32, const 1_i32, const 2_i32, const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[37] in main: &&[i32; 4] = {
    let mut _0: &&[i32; 4];
    let mut _1: &[i32; 4];
    let mut _2: [i32; 4];

    bb0: {
        _2 = [const 3_i32, const 4_i32, const 5_i32, const 6_i32];
        _1 = &_2;
        _0 = &_1;
        return;
    }
}

promoted[38] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[39] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 100_i32;
        _0 = &_1;
        return;
    }
}

promoted[40] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 42_i32;
        _0 = &_1;
        return;
    }
}

promoted[41] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 30_usize;
        _0 = &_1;
        return;
    }
}

promoted[42] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 55_usize;
        _0 = &_1;
        return;
    }
}

promoted[43] in main: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 55_usize;
        _0 = &_1;
        return;
    }
}

fn P(_1: u8) -> P {
    let mut _0: P;

    bb0: {
        _0 = P(move _1);
        return;
    }
}

// MIR FOR CTFE
fn P(_1: u8) -> P {
    let mut _0: P;

    bb0: {
        _0 = P(move _1);
        return;
    }
}
