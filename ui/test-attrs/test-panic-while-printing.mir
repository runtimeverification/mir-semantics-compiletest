// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/test-attrs/test-panic-while-printing.rs:10:1: 10:19>::fmt(_1: &A, _2: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    debug self => _1;                    // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:11:12: 11:17
    debug _f => _2;                      // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:11:19: 11:21
    let mut _0: std::result::Result<(), std::fmt::Error>; // return place in scope 0 at ui/test-attrs/test-panic-while-printing.rs:11:46: 11:57
    let mut _3: &u32;                    // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:12:9: 12:18
    let mut _4: &std::vec::Vec<u32>;     // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:12:9: 12:15

    bb0: {
        _4 = &((*_1).0: std::vec::Vec<u32>); // scope 0 at ui/test-attrs/test-panic-while-printing.rs:12:9: 12:15
        _3 = <Vec<u32> as Index<usize>>::index(move _4, const 0_usize) -> bb1; // scope 0 at ui/test-attrs/test-panic-while-printing.rs:12:9: 12:18
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:12:9: 12:18
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u32>, usize) -> &'a <Vec<u32> as Index<usize>>::Output {<Vec<u32> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = const Result::<(), std::fmt::Error>::Ok(()); // scope 0 at ui/test-attrs/test-panic-while-printing.rs:13:9: 13:15
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:13:9: 13:15
                                         // + literal: Const { ty: Result<(), std::fmt::Error>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:14:6: 14:6
    }
}

const main: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _8: [closure@ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2]; // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        _2 = StaticTestName(const "main"); // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        _8 = [closure@ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2]; // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
                                         // closure
                                         // + def_id: DefId(0:14 ~ test_panic_while_printing[99d1]::main::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
        return;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    }
}

fn main::{closure#0}(_1: &[closure@ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:11: 18:11

    bb0: {
        _2 = main() -> bb1;              // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:11: 18:11
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
                                         // + literal: Const { ty: fn() {main}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:18:11: 18:11
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:2: 24:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:11: 18:11
    let _1: std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:19:9: 19:15
    let mut _2: [closure@ui/test-attrs/test-panic-while-printing.rs:19:43: 19:45]; // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:19:43: 22:6
    let mut _3: bool;                    // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:23:5: 23:29
    let mut _4: bool;                    // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:23:13: 23:28
    let mut _5: &std::result::Result<(), std::boxed::Box<dyn std::any::Any + std::marker::Send>>; // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:23:13: 23:28
    let mut _6: !;                       // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:23:5: 23:29
    scope 1 {
        debug result => _1;              // in scope 1 at ui/test-attrs/test-panic-while-printing.rs:19:9: 19:15
    }

    bb0: {
        _1 = catch_unwind::<[closure@ui/test-attrs/test-panic-while-printing.rs:19:43: 19:45], ()>(move _2) -> bb1; // scope 0 at ui/test-attrs/test-panic-while-printing.rs:19:18: 22:7
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:19:18: 19:42
                                         // + literal: Const { ty: fn([closure@ui/test-attrs/test-panic-while-printing.rs:19:43: 19:45]) -> Result<(), Box<(dyn Any + Send + 'static)>> {catch_unwind::<[closure@ui/test-attrs/test-panic-while-printing.rs:19:43: 19:45], ()>}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = &_1;                        // scope 1 at ui/test-attrs/test-panic-while-printing.rs:23:13: 23:28
        _4 = Result::<(), Box<dyn Any + Send>>::is_err(move _5) -> [return: bb2, unwind: bb6]; // scope 1 at ui/test-attrs/test-panic-while-printing.rs:23:13: 23:28
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:23:20: 23:26
                                         // + literal: Const { ty: for<'a> fn(&'a Result<(), Box<dyn Any + Send>>) -> bool {Result::<(), Box<dyn Any + Send>>::is_err}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Not(move _4);               // scope 1 at ui/test-attrs/test-panic-while-printing.rs:23:5: 23:29
        switchInt(move _3) -> [0: bb4, otherwise: bb3]; // scope 1 at ui/test-attrs/test-panic-while-printing.rs:23:5: 23:29
    }

    bb3: {
        _6 = core::panicking::panic(const "assertion failed: result.is_err()") -> bb6; // scope 1 at ui/test-attrs/test-panic-while-printing.rs:23:5: 23:29
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:23:5: 23:29
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
    }

    bb5: {
        return;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:2: 24:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:24:1: 24:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    }
}

fn main::{closure#0}(_1: [closure@ui/test-attrs/test-panic-while-printing.rs:19:43: 19:45]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-panic-while-printing.rs:19:46: 19:46
    let _2: A;                           // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:20:13: 20:14
    let mut _3: std::vec::Vec<u32>;      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
    let _4: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
    let mut _5: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _6: &[&str];                 // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
    let mut _7: &[&str; 2];              // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
    let _8: &[&str; 2];                  // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
    let mut _9: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _10: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _11: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let _12: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
    let mut _13: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:25: 21:26
    let mut _14: &A;                     // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:25: 21:26
    let _15: &A;                         // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:25: 21:26
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/test-attrs/test-panic-while-printing.rs:20:13: 20:14
        let mut _16: &[&str; 2];         // in scope 1 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
    }

    bb0: {
        _3 = Vec::<u32>::new() -> bb1;   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:59
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:44:36: 44:57
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = A(move _3);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:20:17: 20:26
        _16 = const _;                   // scope 1 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main::{closure#0}, [<closure_kind>, <closure_signature>, <upvars>], Some(promoted[0])) }
        _8 = _16;                        // scope 1 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
        _7 = _8;                         // scope 1 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
        _6 = move _7 as &[&str] (Pointer(Unsize)); // scope 1 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
        _15 = &_2;                       // scope 1 at ui/test-attrs/test-panic-while-printing.rs:21:25: 21:26
        _14 = _15;                       // scope 1 at ui/test-attrs/test-panic-while-printing.rs:21:25: 21:26
        _13 = core::fmt::ArgumentV1::<'_>::new_display::<A>(move _14) -> [return: bb2, unwind: bb6]; // scope 1 at ui/test-attrs/test-panic-while-printing.rs:21:25: 21:26
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:21:25: 21:26
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b A) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<A>}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = [move _13];                // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _11 = &_12;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _10 = _11;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _9 = move _10 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
        _5 = Arguments::<'_>::new_v1(move _6, move _9) -> [return: bb3, unwind: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:29: 209:62
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _4 = _eprint(move _5) -> [return: bb4, unwind: bb6]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:63
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:209:9: 209:28
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_eprint}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_2) -> bb5;                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:22:5: 22:6
    }

    bb5: {
        return;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:22:6: 22:6
    }

    bb6 (cleanup): {
        drop(_2) -> bb7;                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:22:5: 22:6
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:19:43: 22:6
    }
}

promoted[0] in main::{closure#0}: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
    let mut _1: [&str; 2];               // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
        return;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:21:19: 21:23
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&test::TestDescAndFn; 1]; // in scope 0 at no-location
    let _3: &[&test::TestDescAndFn; 1];  // in scope 0 at no-location
    let mut _4: &[&test::TestDescAndFn; 1]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 1] = {
    let mut _0: &[&test::TestDescAndFn; 1]; // return place in scope 0 at no-location
    let mut _1: [&test::TestDescAndFn; 1]; // in scope 0 at no-location
    let mut _2: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _3: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
    let mut _4: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(main, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/test-panic-while-printing.rs:18:1: 24:2
        _1 = [move _2];                  // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}

fn A(_1: Vec<u32>) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/test-attrs/test-panic-while-printing.rs:8:1: 8:13

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:8:1: 8:13
        return;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:8:1: 8:13
    }
}

// MIR FOR CTFE
fn A(_1: Vec<u32>) -> A {
    let mut _0: A;                       // return place in scope 0 at ui/test-attrs/test-panic-while-printing.rs:8:1: 8:13

    bb0: {
        _0 = A(move _1);                 // scope 0 at ui/test-attrs/test-panic-while-printing.rs:8:1: 8:13
        return;                          // scope 0 at ui/test-attrs/test-panic-while-printing.rs:8:1: 8:13
    }
}
