// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const in_expression_position::panic: TestDescAndFn = {
    let mut _0: in_expression_position::test::TestDescAndFn; // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _1: in_expression_position::test::TestDesc; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _2: in_expression_position::test::TestName; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _4: in_expression_position::test::ShouldPanic; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _5: in_expression_position::test::TestType; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _6: in_expression_position::test::TestFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _8: [closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6]; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        StorageLive(_2);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        _2 = StaticTestName(const "in_expression_position::panic"); // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        StorageLive(_4);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        _4 = in_expression_position::test::ShouldPanic::No; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        StorageLive(_5);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        _5 = in_expression_position::test::TestType::Unknown; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        StorageDead(_5);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:5: 11:6
        StorageDead(_4);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:5: 11:6
        StorageDead(_3);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:5: 11:6
        StorageDead(_2);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:5: 11:6
        StorageLive(_6);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        StorageLive(_7);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        StorageLive(_8);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        _8 = [closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6]; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
                                         // closure
                                         // + def_id: DefId(0:9 ~ issue_53675_a_test_called_panic[3e01]::in_expression_position::panic::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        StorageDead(_8);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:5: 11:6
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        StorageDead(_7);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:5: 11:6
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        StorageDead(_6);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:5: 11:6
        StorageDead(_1);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:5: 11:6
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    }
}

fn in_expression_position::panic::{closure#0}(_1: &[closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _2: ();                      // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:16: 9:16

    bb0: {
        _2 = in_expression_position::panic() -> bb1; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:16: 9:16
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
                                         // + literal: Const { ty: fn() {in_expression_position::panic}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:9:16: 9:16
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:6: 11:6
    }
}

fn in_expression_position::panic() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:16: 9:16

    bb0: {
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:11:6: 11:6
    }
}

const in_statement_position::panic: TestDescAndFn = {
    let mut _0: in_expression_position::test::TestDescAndFn; // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _1: in_expression_position::test::TestDesc; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _2: in_expression_position::test::TestName; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _4: in_expression_position::test::ShouldPanic; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _5: in_expression_position::test::TestType; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _6: in_expression_position::test::TestFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _8: [closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6]; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        StorageLive(_2);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        _2 = StaticTestName(const "in_statement_position::panic"); // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        StorageLive(_4);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        _4 = in_expression_position::test::ShouldPanic::No; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        StorageLive(_5);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        _5 = in_expression_position::test::TestType::Unknown; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        StorageDead(_5);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:5: 18:6
        StorageDead(_4);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:5: 18:6
        StorageDead(_3);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:5: 18:6
        StorageDead(_2);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:5: 18:6
        StorageLive(_6);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        StorageLive(_7);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        StorageLive(_8);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        _8 = [closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6]; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
                                         // closure
                                         // + def_id: DefId(0:13 ~ issue_53675_a_test_called_panic[3e01]::in_statement_position::panic::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        StorageDead(_8);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:5: 18:6
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        StorageDead(_7);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:5: 18:6
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        StorageDead(_6);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:5: 18:6
        StorageDead(_1);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:5: 18:6
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    }
}

fn in_statement_position::panic::{closure#0}(_1: &[closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _2: ();                      // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:16: 16:16

    bb0: {
        _2 = in_statement_position::panic() -> bb1; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:16: 16:16
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
                                         // + literal: Const { ty: fn() {in_statement_position::panic}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:16:16: 16:16
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:6: 18:6
    }
}

fn in_statement_position::panic() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:16: 16:16

    bb0: {
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:18:6: 18:6
    }
}

const what_if_we_use_panic_directly_in_expr::panic: TestDescAndFn = {
    let mut _0: in_expression_position::test::TestDescAndFn; // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _1: in_expression_position::test::TestDesc; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _2: in_expression_position::test::TestName; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _4: in_expression_position::test::ShouldPanic; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _5: in_expression_position::test::TestType; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _6: in_expression_position::test::TestFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _8: [closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6]; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        StorageLive(_2);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        _2 = StaticTestName(const "what_if_we_use_panic_directly_in_expr::panic"); // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        StorageLive(_4);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        _4 = in_expression_position::test::ShouldPanic::Yes; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        StorageLive(_5);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        _5 = in_expression_position::test::TestType::Unknown; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        StorageDead(_5);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:26:5: 26:6
        StorageDead(_4);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:26:5: 26:6
        StorageDead(_3);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:26:5: 26:6
        StorageDead(_2);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:26:5: 26:6
        StorageLive(_6);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        StorageLive(_7);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        StorageLive(_8);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        _8 = [closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6]; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
                                         // closure
                                         // + def_id: DefId(0:17 ~ issue_53675_a_test_called_panic[3e01]::what_if_we_use_panic_directly_in_expr::panic::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        StorageDead(_8);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:26:5: 26:6
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        StorageDead(_7);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:26:5: 26:6
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        StorageDead(_6);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:26:5: 26:6
        StorageDead(_1);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:26:5: 26:6
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    }
}

fn what_if_we_use_panic_directly_in_expr::panic::{closure#0}(_1: &[closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _2: ();                      // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:16: 24:16

    bb0: {
        _2 = what_if_we_use_panic_directly_in_expr::panic() -> bb1; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:16: 24:16
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
                                         // + literal: Const { ty: fn() {what_if_we_use_panic_directly_in_expr::panic}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:24:16: 24:16
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:26:6: 26:6
    }
}

fn what_if_we_use_panic_directly_in_expr::panic() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:16: 24:16
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "in expr"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:25:16: 25:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

const what_if_we_use_panic_directly_in_stmt::panic: TestDescAndFn = {
    let mut _0: in_expression_position::test::TestDescAndFn; // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _1: in_expression_position::test::TestDesc; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _2: in_expression_position::test::TestName; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _4: in_expression_position::test::ShouldPanic; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _5: in_expression_position::test::TestType; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _6: in_expression_position::test::TestFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _8: [closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6]; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        StorageLive(_2);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        _2 = StaticTestName(const "what_if_we_use_panic_directly_in_stmt::panic"); // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        StorageLive(_4);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        _4 = in_expression_position::test::ShouldPanic::Yes; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        StorageLive(_5);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        _5 = in_expression_position::test::TestType::Unknown; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        StorageDead(_5);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:35:5: 35:6
        StorageDead(_4);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:35:5: 35:6
        StorageDead(_3);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:35:5: 35:6
        StorageDead(_2);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:35:5: 35:6
        StorageLive(_6);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        StorageLive(_7);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        StorageLive(_8);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        _8 = [closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6]; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
                                         // closure
                                         // + def_id: DefId(0:21 ~ issue_53675_a_test_called_panic[3e01]::what_if_we_use_panic_directly_in_stmt::panic::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        StorageDead(_8);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:35:5: 35:6
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        StorageDead(_7);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:35:5: 35:6
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        StorageDead(_6);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:35:5: 35:6
        StorageDead(_1);                 // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:35:5: 35:6
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    }
}

fn what_if_we_use_panic_directly_in_stmt::panic::{closure#0}(_1: &[closure@ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _2: ();                      // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:16: 33:16

    bb0: {
        _2 = what_if_we_use_panic_directly_in_stmt::panic() -> bb1; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:16: 33:16
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
                                         // + literal: Const { ty: fn() {what_if_we_use_panic_directly_in_stmt::panic}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:33:16: 33:16
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:35:6: 35:6
    }
}

fn what_if_we_use_panic_directly_in_stmt::panic() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:16: 33:16
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "in stmt"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:34:16: 34:25
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&in_expression_position::test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&in_expression_position::test::TestDescAndFn; 4]; // in scope 0 at no-location
    let _3: &[&in_expression_position::test::TestDescAndFn; 4]; // in scope 0 at no-location
    let mut _4: &[&in_expression_position::test::TestDescAndFn; 4]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 4], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&in_expression_position::test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 4] = {
    let mut _0: &[&in_expression_position::test::TestDescAndFn; 4]; // return place in scope 0 at no-location
    let mut _1: [&in_expression_position::test::TestDescAndFn; 4]; // in scope 0 at no-location
    let mut _2: &in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _3: &in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _4: in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
    let mut _5: &in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _6: &in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _7: in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
    let mut _8: &in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _9: &in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _10: in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
    let mut _11: &in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _12: &in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
    let mut _13: in_expression_position::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(in_expression_position::panic, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:9:5: 11:6
        _7 = const _;                    // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(in_statement_position::panic, [], None) }
        _6 = &_7;                        // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        _5 = &(*_6);                     // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:16:5: 18:6
        _10 = const _;                   // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(what_if_we_use_panic_directly_in_expr::panic, [], None) }
        _9 = &_10;                       // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        _8 = &(*_9);                     // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:24:5: 26:6
        _13 = const _;                   // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(what_if_we_use_panic_directly_in_stmt::panic, [], None) }
        _12 = &_13;                      // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        _11 = &(*_12);                   // scope 0 at ui/test-attrs/issue-53675-a-test-called-panic.rs:33:5: 35:6
        _1 = [move _2, move _5, move _8, move _11]; // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
