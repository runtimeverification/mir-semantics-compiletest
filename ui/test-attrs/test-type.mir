// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const test_ok: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _8: [closure@ui/test-attrs/test-type.rs:9:1: 11:2]; // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        _2 = StaticTestName(const "test_ok"); // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:9:1: 11:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-type.rs:11:1: 11:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-type.rs:11:1: 11:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-type.rs:11:1: 11:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-type.rs:11:1: 11:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        _8 = [closure@ui/test-attrs/test-type.rs:9:1: 11:2]; // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
                                         // closure
                                         // + def_id: DefId(0:6 ~ test_type[4f27]::test_ok::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-type.rs:11:1: 11:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-type.rs:11:1: 11:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-type.rs:11:1: 11:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-type.rs:11:1: 11:2
        return;                          // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    }
}

fn test_ok::{closure#0}(_1: &[closure@ui/test-attrs/test-type.rs:9:1: 11:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-type.rs:9:14: 9:14

    bb0: {
        _2 = test_ok() -> bb1;           // scope 0 at ui/test-attrs/test-type.rs:9:14: 9:14
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:9:1: 11:2
                                         // + literal: Const { ty: fn() {test_ok}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:9:14: 9:14
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-type.rs:11:2: 11:2
    }
}

fn test_ok() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-type.rs:9:14: 9:14
    let _1: bool;                        // in scope 0 at ui/test-attrs/test-type.rs:10:9: 10:11
    scope 1 {
        debug _a => _1;                  // in scope 1 at ui/test-attrs/test-type.rs:10:9: 10:11
    }

    bb0: {
        _1 = const true;                 // scope 0 at ui/test-attrs/test-type.rs:10:14: 10:18
        return;                          // scope 0 at ui/test-attrs/test-type.rs:11:2: 11:2
    }
}

const test_panic: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _8: [closure@ui/test-attrs/test-type.rs:15:1: 17:2]; // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        _2 = StaticTestName(const "test_panic"); // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:15:1: 17:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        _4 = test::ShouldPanic::Yes;     // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-type.rs:17:1: 17:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-type.rs:17:1: 17:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-type.rs:17:1: 17:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-type.rs:17:1: 17:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        _8 = [closure@ui/test-attrs/test-type.rs:15:1: 17:2]; // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
                                         // closure
                                         // + def_id: DefId(0:10 ~ test_type[4f27]::test_panic::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-type.rs:17:1: 17:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-type.rs:17:1: 17:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-type.rs:17:1: 17:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-type.rs:17:1: 17:2
        return;                          // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    }
}

fn test_panic::{closure#0}(_1: &[closure@ui/test-attrs/test-type.rs:15:1: 17:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-type.rs:15:17: 15:17

    bb0: {
        _2 = test_panic() -> bb1;        // scope 0 at ui/test-attrs/test-type.rs:15:17: 15:17
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:15:1: 17:2
                                         // + literal: Const { ty: fn() {test_panic}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:15:17: 15:17
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-type.rs:17:2: 17:2
    }
}

fn test_panic() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-type.rs:15:17: 15:17
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

const test_no_run: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _4: &str;                    // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let _5: &str;                        // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _6: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _7: test::TestType;          // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _8: test::TestFn;            // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _9: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _10: [closure@ui/test-attrs/test-type.rs:21:1: 25:2]; // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        _2 = StaticTestName(const "test_no_run"); // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:21:1: 25:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        _5 = const "msg";                // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:21:1: 25:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _4 = &(*_5);                     // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        _3 = Option::<&str>::Some(move _4); // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        _6 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        _7 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        _1 = TestDesc { name: move _2, ignore: const true, ignore_message: move _3, should_panic: move _6, compile_fail: const false, no_run: const false, test_type: move _7 }; // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageLive(_9);                 // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageLive(_10);                // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        _10 = [closure@ui/test-attrs/test-type.rs:21:1: 25:2]; // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
                                         // closure
                                         // + def_id: DefId(0:14 ~ test_type[4f27]::test_no_run::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _9 = move _10 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageDead(_10);                // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        _8 = StaticTestFn(move _9);      // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageDead(_9);                 // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _8 }; // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-type.rs:25:1: 25:2
        return;                          // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    }
}

fn test_no_run::{closure#0}(_1: &[closure@ui/test-attrs/test-type.rs:21:1: 25:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-type.rs:21:18: 21:18

    bb0: {
        _2 = test_no_run() -> bb1;       // scope 0 at ui/test-attrs/test-type.rs:21:18: 21:18
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:21:1: 25:2
                                         // + literal: Const { ty: fn() {test_no_run}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:21:18: 21:18
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-type.rs:25:2: 25:2
    }
}

fn test_no_run() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-type.rs:21:18: 21:18
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
    let mut _4: &[&str; 1];              // in scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
    let _5: &[&str; 1];                  // in scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _9: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _10: &[&str; 1];             // in scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32

    bb0: {
        goto -> bb1;                     // scope 0 at ui/test-attrs/test-type.rs:22:5: 24:6
    }

    bb1: {
        _10 = const _;                   // scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:23:18: 23:32
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(test_no_run, [], Some(promoted[1])) }
        _5 = _10;                        // scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
        _4 = _5;                         // scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
        _9 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(test_no_run, [], Some(promoted[0])) }
        _8 = _9;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = _print(move _2) -> bb1;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }
}

promoted[0] in test_no_run: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[1] in test_no_run: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
    let mut _1: [&str; 1];               // in scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32

    bb0: {
        _1 = [const "Hello, world\n"];   // scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:23:18: 23:32
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
        return;                          // scope 0 at ui/test-attrs/test-type.rs:23:18: 23:32
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-type.rs:27:11: 27:11

    bb0: {
        return;                          // scope 0 at ui/test-attrs/test-type.rs:27:13: 27:13
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&test::TestDescAndFn; 3]; // in scope 0 at no-location
    let _3: &[&test::TestDescAndFn; 3];  // in scope 0 at no-location
    let mut _4: &[&test::TestDescAndFn; 3]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 3] = {
    let mut _0: &[&test::TestDescAndFn; 3]; // return place in scope 0 at no-location
    let mut _1: [&test::TestDescAndFn; 3]; // in scope 0 at no-location
    let mut _2: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _3: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _4: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
    let mut _5: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _6: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _7: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
    let mut _8: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _9: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
    let mut _10: test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:21:1: 25:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test_no_run, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/test-type.rs:21:1: 25:2
        _7 = const _;                    // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:9:1: 11:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test_ok, [], None) }
        _6 = &_7;                        // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        _5 = &(*_6);                     // scope 0 at ui/test-attrs/test-type.rs:9:1: 11:2
        _10 = const _;                   // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-type.rs:15:1: 17:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test_panic, [], None) }
        _9 = &_10;                       // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        _8 = &(*_9);                     // scope 0 at ui/test-attrs/test-type.rs:15:1: 17:2
        _1 = [move _2, move _5, move _8]; // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
