// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const test1: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _8: [closure@ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2]; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        _2 = StaticTestName(const "test1"); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        _4 = YesWithMessage(const "foo"); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:8:1: 8:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:8:1: 8:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:8:1: 8:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:8:1: 8:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        _8 = [closure@ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2]; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
                                         // closure
                                         // + def_id: DefId(0:5 ~ test_should_panic_attr[3621]::test1::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:8:1: 8:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:8:1: 8:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:8:1: 8:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:8:1: 8:2
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    }
}

fn test1::{closure#0}(_1: &[closure@ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:12: 6:12

    bb0: {
        _2 = test1() -> bb1;             // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:12: 6:12
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
                                         // + literal: Const { ty: fn() {test1}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:6:12: 6:12
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:8:2: 8:2
    }
}

fn test1() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:12: 6:12
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

const test2: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _8: [closure@ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2]; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        _2 = StaticTestName(const "test2"); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        _4 = test::ShouldPanic::Yes;     // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:15:1: 15:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:15:1: 15:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:15:1: 15:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:15:1: 15:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        _8 = [closure@ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2]; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
                                         // closure
                                         // + def_id: DefId(0:9 ~ test_should_panic_attr[3621]::test2::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:15:1: 15:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:15:1: 15:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:15:1: 15:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:15:1: 15:2
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    }
}

fn test2::{closure#0}(_1: &[closure@ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:12: 13:12

    bb0: {
        _2 = test2() -> bb1;             // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:12: 13:12
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
                                         // + literal: Const { ty: fn() {test2}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:13:12: 13:12
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:15:2: 15:2
    }
}

fn test2() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:12: 13:12
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

const test3: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _8: [closure@ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2]; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        _2 = StaticTestName(const "test3"); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        _4 = test::ShouldPanic::Yes;     // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:22:1: 22:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:22:1: 22:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:22:1: 22:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:22:1: 22:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        _8 = [closure@ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2]; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
                                         // closure
                                         // + def_id: DefId(0:13 ~ test_should_panic_attr[3621]::test3::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:22:1: 22:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:22:1: 22:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:22:1: 22:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:22:1: 22:2
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    }
}

fn test3::{closure#0}(_1: &[closure@ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:12: 20:12

    bb0: {
        _2 = test3() -> bb1;             // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:12: 20:12
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
                                         // + literal: Const { ty: fn() {test3}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:20:12: 20:12
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:22:2: 22:2
    }
}

fn test3() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:12: 20:12
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

const test4: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _8: [closure@ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2]; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        _2 = StaticTestName(const "test4"); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        _4 = test::ShouldPanic::Yes;     // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:29:1: 29:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:29:1: 29:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:29:1: 29:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:29:1: 29:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        _8 = [closure@ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2]; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
                                         // closure
                                         // + def_id: DefId(0:17 ~ test_should_panic_attr[3621]::test4::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:29:1: 29:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:29:1: 29:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:29:1: 29:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:29:1: 29:2
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    }
}

fn test4::{closure#0}(_1: &[closure@ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:12: 27:12

    bb0: {
        _2 = test4() -> bb1;             // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:12: 27:12
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
                                         // + literal: Const { ty: fn() {test4}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:27:12: 27:12
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:29:2: 29:2
    }
}

fn test4() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:12: 27:12
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

const test5: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _8: [closure@ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2]; // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        _2 = StaticTestName(const "test5"); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        _4 = test::ShouldPanic::Yes;     // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:36:1: 36:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:36:1: 36:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:36:1: 36:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:36:1: 36:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        _8 = [closure@ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2]; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
                                         // closure
                                         // + def_id: DefId(0:21 ~ test_should_panic_attr[3621]::test5::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:36:1: 36:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:36:1: 36:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:36:1: 36:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-should-panic-attr.rs:36:1: 36:2
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    }
}

fn test5::{closure#0}(_1: &[closure@ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:12: 34:12

    bb0: {
        _2 = test5() -> bb1;             // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:12: 34:12
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
                                         // + literal: Const { ty: fn() {test5}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:34:12: 34:12
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-should-panic-attr.rs:36:2: 36:2
    }
}

fn test5() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:12: 34:12
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&test::TestDescAndFn; 5]; // in scope 0 at no-location
    let _3: &[&test::TestDescAndFn; 5];  // in scope 0 at no-location
    let mut _4: &[&test::TestDescAndFn; 5]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 5], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 5] = {
    let mut _0: &[&test::TestDescAndFn; 5]; // return place in scope 0 at no-location
    let mut _1: [&test::TestDescAndFn; 5]; // in scope 0 at no-location
    let mut _2: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _3: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _4: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
    let mut _5: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _6: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _7: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
    let mut _8: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _9: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _10: test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
    let mut _11: &test::TestDescAndFn;   // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _12: &test::TestDescAndFn;   // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _13: test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
    let mut _14: &test::TestDescAndFn;   // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _15: &test::TestDescAndFn;   // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
    let mut _16: test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test1, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/test-should-panic-attr.rs:6:1: 8:2
        _7 = const _;                    // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test2, [], None) }
        _6 = &_7;                        // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        _5 = &(*_6);                     // scope 0 at ui/test-attrs/test-should-panic-attr.rs:13:1: 15:2
        _10 = const _;                   // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test3, [], None) }
        _9 = &_10;                       // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        _8 = &(*_9);                     // scope 0 at ui/test-attrs/test-should-panic-attr.rs:20:1: 22:2
        _13 = const _;                   // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test4, [], None) }
        _12 = &_13;                      // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        _11 = &(*_12);                   // scope 0 at ui/test-attrs/test-should-panic-attr.rs:27:1: 29:2
        _16 = const _;                   // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test5, [], None) }
        _15 = &_16;                      // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        _14 = &(*_15);                   // scope 0 at ui/test-attrs/test-should-panic-attr.rs:34:1: 36:2
        _1 = [move _2, move _5, move _8, move _11, move _14]; // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
