// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn a::foo() -> bool {
    let mut _0: bool;                    // return place in scope 0 at ui/test-attrs/issue-52557.rs:10:21: 10:25

    bb0: {
        _0 = const true;                 // scope 0 at ui/test-attrs/issue-52557.rs:11:9: 11:13
        return;                          // scope 0 at ui/test-attrs/issue-52557.rs:12:6: 12:6
    }
}

const b::foo: TestDescAndFn = {
    let mut _0: b::test::TestDescAndFn;  // return place in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _1: b::test::TestDesc;       // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _2: b::test::TestName;       // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _4: b::test::ShouldPanic;    // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _5: b::test::TestType;       // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _6: b::test::TestFn;         // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _8: [closure@ui/test-attrs/issue-52557.rs:17:5: 19:6]; // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        StorageLive(_2);                 // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        _2 = StaticTestName(const "b::foo"); // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:17:5: 19:6
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        StorageLive(_4);                 // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        _4 = b::test::ShouldPanic::No;   // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        StorageLive(_5);                 // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        _5 = b::test::TestType::Unknown; // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        StorageDead(_5);                 // scope 0 at ui/test-attrs/issue-52557.rs:19:5: 19:6
        StorageDead(_4);                 // scope 0 at ui/test-attrs/issue-52557.rs:19:5: 19:6
        StorageDead(_3);                 // scope 0 at ui/test-attrs/issue-52557.rs:19:5: 19:6
        StorageDead(_2);                 // scope 0 at ui/test-attrs/issue-52557.rs:19:5: 19:6
        StorageLive(_6);                 // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        StorageLive(_7);                 // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        StorageLive(_8);                 // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        _8 = [closure@ui/test-attrs/issue-52557.rs:17:5: 19:6]; // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
                                         // closure
                                         // + def_id: DefId(0:11 ~ issue_52557[0e86]::b::foo::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        StorageDead(_8);                 // scope 0 at ui/test-attrs/issue-52557.rs:19:5: 19:6
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        StorageDead(_7);                 // scope 0 at ui/test-attrs/issue-52557.rs:19:5: 19:6
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        StorageDead(_6);                 // scope 0 at ui/test-attrs/issue-52557.rs:19:5: 19:6
        StorageDead(_1);                 // scope 0 at ui/test-attrs/issue-52557.rs:19:5: 19:6
        return;                          // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    }
}

fn b::foo::{closure#0}(_1: &[closure@ui/test-attrs/issue-52557.rs:17:5: 19:6]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _2: ();                      // in scope 0 at ui/test-attrs/issue-52557.rs:17:14: 17:14

    bb0: {
        _2 = b::foo() -> bb1;            // scope 0 at ui/test-attrs/issue-52557.rs:17:14: 17:14
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:17:5: 19:6
                                         // + literal: Const { ty: fn() {b::foo}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:17:14: 17:14
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/issue-52557.rs:19:6: 19:6
    }
}

fn b::foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/issue-52557.rs:17:14: 17:14
    let _1: ();                          // in scope 0 at ui/test-attrs/issue-52557.rs:18:9: 18:21

    bb0: {
        _1 = b::local_name() -> bb1;     // scope 0 at ui/test-attrs/issue-52557.rs:18:9: 18:21
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:18:9: 18:19
                                         // + literal: Const { ty: fn() {b::local_name}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/test-attrs/issue-52557.rs:19:6: 19:6
    }
}

const b::local_name: TestDescAndFn = {
    let mut _0: b::test::TestDescAndFn;  // return place in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _1: b::test::TestDesc;       // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _2: b::test::TestName;       // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _4: b::test::ShouldPanic;    // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _5: b::test::TestType;       // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _6: b::test::TestFn;         // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _8: [closure@ui/test-attrs/issue-52557.rs:22:5: 22:23]; // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        StorageLive(_2);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        _2 = StaticTestName(const "b::local_name"); // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:22:5: 22:23
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        StorageLive(_4);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        _4 = b::test::ShouldPanic::No;   // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        StorageLive(_5);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        _5 = b::test::TestType::Unknown; // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        StorageDead(_5);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:22: 22:23
        StorageDead(_4);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:22: 22:23
        StorageDead(_3);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:22: 22:23
        StorageDead(_2);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:22: 22:23
        StorageLive(_6);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        StorageLive(_7);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        StorageLive(_8);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        _8 = [closure@ui/test-attrs/issue-52557.rs:22:5: 22:23]; // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
                                         // closure
                                         // + def_id: DefId(0:15 ~ issue_52557[0e86]::b::local_name::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        StorageDead(_8);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:22: 22:23
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        StorageDead(_7);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:22: 22:23
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        StorageDead(_6);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:22: 22:23
        StorageDead(_1);                 // scope 0 at ui/test-attrs/issue-52557.rs:22:22: 22:23
        return;                          // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    }
}

fn b::local_name::{closure#0}(_1: &[closure@ui/test-attrs/issue-52557.rs:22:5: 22:23]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _2: ();                      // in scope 0 at ui/test-attrs/issue-52557.rs:22:21: 22:21

    bb0: {
        _2 = b::local_name() -> bb1;     // scope 0 at ui/test-attrs/issue-52557.rs:22:21: 22:21
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:22:5: 22:23
                                         // + literal: Const { ty: fn() {b::local_name}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:22:21: 22:21
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/issue-52557.rs:22:23: 22:23
    }
}

fn b::local_name() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/issue-52557.rs:22:21: 22:21

    bb0: {
        return;                          // scope 0 at ui/test-attrs/issue-52557.rs:22:23: 22:23
    }
}

fn conflict() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/issue-52557.rs:28:19: 28:19
    let mut _1: bool;                    // in scope 0 at ui/test-attrs/issue-52557.rs:29:19: 29:24
    scope 1 {
    }

    bb0: {
        _1 = a::foo() -> bb1;            // scope 0 at ui/test-attrs/issue-52557.rs:29:19: 29:24
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:29:19: 29:22
                                         // + literal: Const { ty: fn() -> bool {a::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/test-attrs/issue-52557.rs:30:2: 30:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&b::test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&b::test::TestDescAndFn; 2]; // in scope 0 at no-location
    let _3: &[&b::test::TestDescAndFn; 2]; // in scope 0 at no-location
    let mut _4: &[&b::test::TestDescAndFn; 2]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&b::test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 2] = {
    let mut _0: &[&b::test::TestDescAndFn; 2]; // return place in scope 0 at no-location
    let mut _1: [&b::test::TestDescAndFn; 2]; // in scope 0 at no-location
    let mut _2: &b::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _3: &b::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _4: b::test::TestDescAndFn;  // in scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
    let mut _5: &b::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _6: &b::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
    let mut _7: b::test::TestDescAndFn;  // in scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:17:5: 19:6
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(b::foo, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/issue-52557.rs:17:5: 19:6
        _7 = const _;                    // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-52557.rs:22:5: 22:23
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(b::local_name, [], None) }
        _6 = &_7;                        // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        _5 = &(*_6);                     // scope 0 at ui/test-attrs/issue-52557.rs:22:5: 22:23
        _1 = [move _2, move _5];         // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
