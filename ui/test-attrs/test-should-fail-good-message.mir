// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const test_foo: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _8: [closure@ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2]; // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        _2 = StaticTestName(const "test_foo"); // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        _4 = YesWithMessage(const "foo"); // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:8:1: 8:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:8:1: 8:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:8:1: 8:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:8:1: 8:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        _8 = [closure@ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2]; // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
                                         // closure
                                         // + def_id: DefId(0:5 ~ test_should_fail_good_message[ac1d]::test_foo::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:8:1: 8:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:8:1: 8:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:8:1: 8:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:8:1: 8:2
        return;                          // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    }
}

fn test_foo::{closure#0}(_1: &[closure@ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:19: 6:19

    bb0: {
        _2 = test_foo() -> bb1;          // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:19: 6:19
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
                                         // + literal: Const { ty: fn() {test_foo}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:6:19: 6:19
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:8:2: 8:2
    }
}

fn test_foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:19: 6:19
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "foo bar"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:7:12: 7:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

const test_foo_dynamic: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _8: [closure@ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2]; // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        _2 = StaticTestName(const "test_foo_dynamic"); // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        _4 = YesWithMessage(const "foo"); // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:14:1: 14:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:14:1: 14:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:14:1: 14:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:14:1: 14:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        _8 = [closure@ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2]; // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
                                         // closure
                                         // + def_id: DefId(0:9 ~ test_should_fail_good_message[ac1d]::test_foo_dynamic::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:14:1: 14:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:14:1: 14:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:14:1: 14:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:14:1: 14:2
        return;                          // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    }
}

fn test_foo_dynamic::{closure#0}(_1: &[closure@ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:27: 12:27

    bb0: {
        _2 = test_foo_dynamic() -> bb1;  // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:27: 12:27
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
                                         // + literal: Const { ty: fn() {test_foo_dynamic}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:12:27: 12:27
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:14:2: 14:2
    }
}

fn test_foo_dynamic() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:27: 12:27
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _3: &[&str];                 // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
    let mut _4: &[&str; 2];              // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
    let _5: &[&str; 2];                  // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _7: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _8: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _9: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _10: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
    let mut _11: &&str;                  // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
    let _12: &&str;                      // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
    let mut _13: &&str;                  // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
    let mut _14: &[&str; 2];             // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20

    bb0: {
        _14 = const _;                   // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(test_foo_dynamic, [], Some(promoted[1])) }
        _5 = _14;                        // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
        _4 = _5;                         // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
        _13 = const _;                   // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
                                         // + literal: Const { ty: &&str, val: Unevaluated(test_foo_dynamic, [], Some(promoted[0])) }
        _12 = _13;                       // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
        _11 = _12;                       // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
        _10 = core::fmt::ArgumentV1::<'_>::new_display::<&str>(move _11) -> bb1; // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b &str) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<&str>}, val: Value(<ZST>) }
    }

    bb1: {
        _9 = [move _10];                 // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _8 = &_9;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb2: {
        _1 = panic_fmt(move _2);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }
}

promoted[0] in test_foo_dynamic: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
    let mut _1: &str;                    // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27

    bb0: {
        _1 = const "foo";                // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
        return;                          // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:22: 13:27
    }
}

promoted[1] in test_foo_dynamic: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
    let mut _1: [&str; 2];               // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20

    bb0: {
        _1 = [const "", const " bar"];   // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
        return;                          // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:13:12: 13:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&test::TestDescAndFn; 2]; // in scope 0 at no-location
    let _3: &[&test::TestDescAndFn; 2];  // in scope 0 at no-location
    let mut _4: &[&test::TestDescAndFn; 2]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 2] = {
    let mut _0: &[&test::TestDescAndFn; 2]; // return place in scope 0 at no-location
    let mut _1: [&test::TestDescAndFn; 2]; // in scope 0 at no-location
    let mut _2: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _3: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _4: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
    let mut _5: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _6: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
    let mut _7: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test_foo, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:6:1: 8:2
        _7 = const _;                    // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test_foo_dynamic, [], None) }
        _6 = &_7;                        // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        _5 = &(*_6);                     // scope 0 at ui/test-attrs/test-should-fail-good-message.rs:12:1: 14:2
        _1 = [move _2, move _5];         // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
