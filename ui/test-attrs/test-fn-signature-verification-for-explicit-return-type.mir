// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const bench_explicit_return_type: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _7: for<'a> fn(&'a mut test::Bencher) -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _8: [closure@ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68]; // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        _2 = StaticTestName(const "bench_explicit_return_type"); // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:67: 10:68
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:67: 10:68
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:67: 10:68
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:67: 10:68
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        _8 = [closure@ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68]; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
                                         // closure
                                         // + def_id: DefId(0:6 ~ test_fn_signature_verification_for_explicit_return_type[6c11]::bench_explicit_return_type::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     for<'a> extern "rust-call" fn((&'a mut test::Bencher,)) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as for<'a> fn(&'a mut test::Bencher) -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:67: 10:68
        _6 = StaticBenchFn(move _7);     // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:67: 10:68
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:67: 10:68
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:67: 10:68
        return;                          // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    }
}

fn bench_explicit_return_type::{closure#0}(_1: &[closure@ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68], _2: &mut Bencher) -> Result<(), String> {
    debug b => _2;                       // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _3: ();                      // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:63: 10:65
    let mut _4: &mut test::Bencher;      // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68

    bb0: {
        _4 = &mut (*_2);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        _3 = bench_explicit_return_type(move _4) -> bb1; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:63: 10:65
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
                                         // + literal: Const { ty: for<'a> fn(&'a mut Bencher) {bench_explicit_return_type}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _3) -> bb2; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:63: 10:65
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:68: 10:68
    }
}

fn bench_explicit_return_type(_1: &mut Bencher) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:63: 10:65

    bb0: {
        return;                          // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:68: 10:68
    }
}

const test_explicit_return_type: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _8: [closure@ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44]; // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        _2 = StaticTestName(const "test_explicit_return_type"); // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:43: 13:44
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:43: 13:44
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:43: 13:44
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:43: 13:44
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        _8 = [closure@ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44]; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
                                         // closure
                                         // + def_id: DefId(0:10 ~ test_fn_signature_verification_for_explicit_return_type[6c11]::test_explicit_return_type::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:43: 13:44
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:43: 13:44
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:43: 13:44
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:43: 13:44
        return;                          // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    }
}

fn test_explicit_return_type::{closure#0}(_1: &[closure@ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:39: 13:41

    bb0: {
        _2 = test_explicit_return_type() -> bb1; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:39: 13:41
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
                                         // + literal: Const { ty: fn() {test_explicit_return_type}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:39: 13:41
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:44: 13:44
    }
}

fn test_explicit_return_type() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:39: 13:41

    bb0: {
        return;                          // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:44: 13:44
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&test::TestDescAndFn; 2]; // in scope 0 at no-location
    let _3: &[&test::TestDescAndFn; 2];  // in scope 0 at no-location
    let mut _4: &[&test::TestDescAndFn; 2]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 2] = {
    let mut _0: &[&test::TestDescAndFn; 2]; // return place in scope 0 at no-location
    let mut _1: [&test::TestDescAndFn; 2]; // in scope 0 at no-location
    let mut _2: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _3: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _4: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
    let mut _5: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _6: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
    let mut _7: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(bench_explicit_return_type, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:10:1: 10:68
        _7 = const _;                    // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(test_explicit_return_type, [], None) }
        _6 = &_7;                        // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        _5 = &(*_6);                     // scope 0 at ui/test-attrs/test-fn-signature-verification-for-explicit-return-type.rs:13:1: 13:44
        _1 = [move _2, move _5];         // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
