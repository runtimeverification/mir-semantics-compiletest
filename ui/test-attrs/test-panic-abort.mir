// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const it_works: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _8: [closure@ui/test-attrs/test-panic-abort.rs:19:1: 21:2]; // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        _2 = StaticTestName(const "it_works"); // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:19:1: 21:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:21:1: 21:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:21:1: 21:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:21:1: 21:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:21:1: 21:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        _8 = [closure@ui/test-attrs/test-panic-abort.rs:19:1: 21:2]; // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
                                         // closure
                                         // + def_id: DefId(0:7 ~ test_panic_abort[d134]::it_works::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:21:1: 21:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:21:1: 21:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:21:1: 21:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:21:1: 21:2
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    }
}

fn it_works::{closure#0}(_1: &[closure@ui/test-attrs/test-panic-abort.rs:19:1: 21:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:15: 19:15

    bb0: {
        _2 = it_works() -> bb1;          // scope 0 at ui/test-attrs/test-panic-abort.rs:19:15: 19:15
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:19:1: 21:2
                                         // + literal: Const { ty: fn() {it_works}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:19:15: 19:15
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:21:2: 21:2
    }
}

fn it_works() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:19:15: 19:15
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _8 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_works, [], Some(promoted[1])) }
        _2 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_works, [], Some(promoted[0])) }
        _3 = _7;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:21:2: 21:2
    }
}

promoted[0] in it_works: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-panic-abort.rs:20:23: 20:24

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/test-attrs/test-panic-abort.rs:20:23: 20:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in it_works: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-panic-abort.rs:20:16: 20:21
    let mut _2: (i32, bool);             // in scope 0 at ui/test-attrs/test-panic-abort.rs:20:16: 20:21

    bb0: {
        _2 = CheckedAdd(const 1_i32, const 1_i32); // scope 0 at ui/test-attrs/test-panic-abort.rs:20:16: 20:21
        _1 = move (_2.0: i32);           // scope 0 at ui/test-attrs/test-panic-abort.rs:20:16: 20:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

const it_panics: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _8: [closure@ui/test-attrs/test-panic-abort.rs:25:1: 27:2]; // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        _2 = StaticTestName(const "it_panics"); // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:25:1: 27:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        _4 = test::ShouldPanic::Yes;     // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:27:1: 27:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:27:1: 27:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:27:1: 27:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:27:1: 27:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        _8 = [closure@ui/test-attrs/test-panic-abort.rs:25:1: 27:2]; // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
                                         // closure
                                         // + def_id: DefId(0:11 ~ test_panic_abort[d134]::it_panics::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:27:1: 27:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:27:1: 27:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:27:1: 27:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:27:1: 27:2
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    }
}

fn it_panics::{closure#0}(_1: &[closure@ui/test-attrs/test-panic-abort.rs:25:1: 27:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:16: 25:16

    bb0: {
        _2 = it_panics() -> bb1;         // scope 0 at ui/test-attrs/test-panic-abort.rs:25:16: 25:16
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:25:1: 27:2
                                         // + literal: Const { ty: fn() {it_panics}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:25:16: 25:16
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:27:2: 27:2
    }
}

fn it_panics() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:25:16: 25:16
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let _7: !;                           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _8: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _9: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _10: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _11: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _12: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _13: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _15: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _15 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_panics, [], Some(promoted[1])) }
        _2 = _15;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _14 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_panics, [], Some(promoted[0])) }
        _3 = _14;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _6 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _8 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _10 = _4;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _9 = _10;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _12 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _11 = _12;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _13 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _7 = core::panicking::assert_failed::<i32, i32>(move _8, move _9, move _11, move _13); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }
}

promoted[0] in it_panics: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-panic-abort.rs:26:23: 26:24

    bb0: {
        _1 = const 4_i32;                // scope 0 at ui/test-attrs/test-panic-abort.rs:26:23: 26:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in it_panics: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-panic-abort.rs:26:16: 26:21
    let mut _2: (i32, bool);             // in scope 0 at ui/test-attrs/test-panic-abort.rs:26:16: 26:21

    bb0: {
        _2 = CheckedAdd(const 1_i32, const 1_i32); // scope 0 at ui/test-attrs/test-panic-abort.rs:26:16: 26:21
        _1 = move (_2.0: i32);           // scope 0 at ui/test-attrs/test-panic-abort.rs:26:16: 26:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

const it_fails: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _8: [closure@ui/test-attrs/test-panic-abort.rs:30:1: 35:2]; // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        _2 = StaticTestName(const "it_fails"); // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:30:1: 35:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:35:1: 35:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:35:1: 35:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:35:1: 35:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:35:1: 35:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        _8 = [closure@ui/test-attrs/test-panic-abort.rs:30:1: 35:2]; // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
                                         // closure
                                         // + def_id: DefId(0:15 ~ test_panic_abort[d134]::it_fails::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:35:1: 35:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:35:1: 35:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:35:1: 35:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:35:1: 35:2
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    }
}

fn it_fails::{closure#0}(_1: &[closure@ui/test-attrs/test-panic-abort.rs:30:1: 35:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:15: 30:15

    bb0: {
        _2 = it_fails() -> bb1;          // scope 0 at ui/test-attrs/test-panic-abort.rs:30:15: 30:15
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:30:1: 35:2
                                         // + literal: Const { ty: fn() {it_fails}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:30:15: 30:15
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:35:2: 35:2
    }
}

fn it_fails() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:30:15: 30:15
    let _1: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _2: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _3: &[&str];                 // in scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
    let mut _4: &[&str; 1];              // in scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
    let _5: &[&str; 1];                  // in scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
    let mut _6: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _7: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _8: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: ();                          // in scope 0 at ui/test-attrs/test-panic-abort.rs:32:5: 32:55
    let mut _10: std::result::Result<(), std::io::Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:9: 558:58
    let mut _11: &mut std::io::Stdout;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:9: 558:58
    let mut _12: std::io::Stdout;        // in scope 0 at ui/test-attrs/test-panic-abort.rs:32:14: 32:31
    let mut _13: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let mut _14: &[&str];                // in scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
    let mut _15: &[&str; 1];             // in scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
    let _16: &[&str; 1];                 // in scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
    let mut _17: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let mut _18: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let _19: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let _20: ();                         // in scope 0 at ui/test-attrs/test-panic-abort.rs:33:5: 33:55
    let mut _21: std::result::Result<(), std::io::Error>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:9: 558:58
    let mut _22: &mut std::io::Stderr;   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:9: 558:58
    let mut _23: std::io::Stderr;        // in scope 0 at ui/test-attrs/test-panic-abort.rs:33:14: 33:31
    let mut _24: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let mut _25: &[&str];                // in scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
    let mut _26: &[&str; 1];             // in scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
    let _27: &[&str; 1];                 // in scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
    let mut _28: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let mut _29: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let _30: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let mut _31: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _32: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _33: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _34: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _35: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let _37: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _38: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _39: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _40: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _41: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _42: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _43: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _44: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _45: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _46: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let mut _47: &[&str; 1];             // in scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
    let mut _48: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let mut _49: &[&str; 1];             // in scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
    let mut _50: &[core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _51: &[&str; 1];             // in scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
    scope 1 {
        debug left_val => _34;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _35;          // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _36: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _36;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _51 = const _;                   // scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:31:14: 31:28
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(it_fails, [], Some(promoted[7])) }
        _5 = _51;                        // scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
        _4 = _5;                         // scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
        _3 = move _4 as &[&str] (Pointer(Unsize)); // scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
        _50 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(it_fails, [], Some(promoted[6])) }
        _8 = _50;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _6 = move _7 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _2 = Arguments::<'_>::new_v1(move _3, move _6) -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = _print(move _2) -> bb2;     // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb2: {
        _12 = stdout() -> bb3;           // scope 0 at ui/test-attrs/test-panic-abort.rs:32:14: 32:31
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:32:14: 32:29
                                         // + literal: Const { ty: fn() -> Stdout {stdout}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = &mut _12;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:9: 558:58
        _49 = const _;                   // scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:32:33: 32:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(it_fails, [], Some(promoted[5])) }
        _16 = _49;                       // scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
        _15 = _16;                       // scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
        _14 = move _15 as &[&str] (Pointer(Unsize)); // scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
        _48 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(it_fails, [], Some(promoted[4])) }
        _19 = _48;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        _18 = _19;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        _17 = move _18 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        _13 = Arguments::<'_>::new_v1(move _14, move _17) -> bb4; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb4: {
        _10 = <Stdout as std::io::Write>::write_fmt(move _11, move _13) -> bb5; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:9: 558:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:14: 558:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Stdout, Arguments<'b>) -> Result<(), std::io::Error> {<Stdout as std::io::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = Result::<(), std::io::Error>::unwrap(move _10) -> bb6; // scope 0 at ui/test-attrs/test-panic-abort.rs:32:5: 32:55
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:32:47: 32:53
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>) {Result::<(), std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb6: {
        _23 = stderr() -> bb7;           // scope 0 at ui/test-attrs/test-panic-abort.rs:33:14: 33:31
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:33:14: 33:29
                                         // + literal: Const { ty: fn() -> Stderr {stderr}, val: Value(<ZST>) }
    }

    bb7: {
        _22 = &mut _23;                  // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:9: 558:58
        _47 = const _;                   // scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:33:33: 33:45
                                         // + literal: Const { ty: &[&str; 1], val: Unevaluated(it_fails, [], Some(promoted[3])) }
        _27 = _47;                       // scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
        _26 = _27;                       // scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
        _25 = move _26 as &[&str] (Pointer(Unsize)); // scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
        _46 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
                                         // + literal: Const { ty: &[core::fmt::ArgumentV1<'_>; 0], val: Unevaluated(it_fails, [], Some(promoted[2])) }
        _30 = _46;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        _29 = _30;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        _28 = move _29 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        _24 = Arguments::<'_>::new_v1(move _25, move _28) -> bb8; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb8: {
        _21 = <Stderr as std::io::Write>::write_fmt(move _22, move _24) -> bb9; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:9: 558:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:14: 558:23
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut Stderr, Arguments<'b>) -> Result<(), std::io::Error> {<Stderr as std::io::Write>::write_fmt}, val: Value(<ZST>) }
    }

    bb9: {
        _20 = Result::<(), std::io::Error>::unwrap(move _21) -> bb10; // scope 0 at ui/test-attrs/test-panic-abort.rs:33:5: 33:55
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:33:47: 33:53
                                         // + literal: Const { ty: fn(Result<(), std::io::Error>) {Result::<(), std::io::Error>::unwrap}, val: Value(<ZST>) }
    }

    bb10: {
        _45 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_fails, [], Some(promoted[1])) }
        _32 = _45;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _44 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_fails, [], Some(promoted[0])) }
        _33 = _44;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _31 = (move _32, move _33);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _34 = (_31.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _35 = (_31.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _36 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _38 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _40 = _34;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _40;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _42 = _35;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _41 = _42;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _43 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _37 = core::panicking::assert_failed::<i32, i32>(move _38, move _39, move _41, move _43); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }
}

promoted[0] in it_fails: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-panic-abort.rs:34:23: 34:24

    bb0: {
        _1 = const 5_i32;                // scope 0 at ui/test-attrs/test-panic-abort.rs:34:23: 34:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in it_fails: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-panic-abort.rs:34:16: 34:21
    let mut _2: (i32, bool);             // in scope 0 at ui/test-attrs/test-panic-abort.rs:34:16: 34:21

    bb0: {
        _2 = CheckedAdd(const 1_i32, const 1_i32); // scope 0 at ui/test-attrs/test-panic-abort.rs:34:16: 34:21
        _1 = move (_2.0: i32);           // scope 0 at ui/test-attrs/test-panic-abort.rs:34:16: 34:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[2] in it_fails: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    }
}

promoted[3] in it_fails: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
    let mut _1: [&str; 1];               // in scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45

    bb0: {
        _1 = [const "testing321\n"];     // scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:33:33: 33:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:33:33: 33:45
    }
}

promoted[4] in it_fails: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:558:24: 558:57
    }
}

promoted[5] in it_fails: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
    let mut _1: [&str; 1];               // in scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45

    bb0: {
        _1 = [const "testing123\n"];     // scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:32:33: 32:45
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:32:33: 32:45
    }
}

promoted[6] in it_fails: &[core::fmt::ArgumentV1<'_>; 0] = {
    let mut _0: &[core::fmt::ArgumentV1<'_>; 0]; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _1: [core::fmt::ArgumentV1<'_>; 0]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61

    bb0: {
        _1 = [];                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    }
}

promoted[7] in it_fails: &[&str; 1] = {
    let mut _0: &[&str; 1];              // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
    let mut _1: [&str; 1];               // in scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28

    bb0: {
        _1 = [const "hello, world\n"];   // scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:31:14: 31:28
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:31:14: 31:28
    }
}

const it_exits: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _8: [closure@ui/test-attrs/test-panic-abort.rs:38:1: 40:2]; // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        _2 = StaticTestName(const "it_exits"); // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:38:1: 40:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:40:1: 40:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:40:1: 40:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:40:1: 40:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:40:1: 40:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        _8 = [closure@ui/test-attrs/test-panic-abort.rs:38:1: 40:2]; // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
                                         // closure
                                         // + def_id: DefId(0:19 ~ test_panic_abort[d134]::it_exits::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:40:1: 40:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:40:1: 40:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:40:1: 40:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:40:1: 40:2
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    }
}

fn it_exits::{closure#0}(_1: &[closure@ui/test-attrs/test-panic-abort.rs:38:1: 40:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:15: 38:15

    bb0: {
        _2 = it_exits() -> bb1;          // scope 0 at ui/test-attrs/test-panic-abort.rs:38:15: 38:15
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:38:1: 40:2
                                         // + literal: Const { ty: fn() {it_exits}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:38:15: 38:15
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:40:2: 40:2
    }
}

fn it_exits() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:38:15: 38:15
    let _1: !;                           // in scope 0 at ui/test-attrs/test-panic-abort.rs:39:5: 39:28

    bb0: {
        _1 = exit(const 123_i32);        // scope 0 at ui/test-attrs/test-panic-abort.rs:39:5: 39:28
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:39:5: 39:23
                                         // + literal: Const { ty: fn(i32) -> ! {exit}, val: Value(<ZST>) }
    }
}

const no_residual_environment: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _8: [closure@ui/test-attrs/test-panic-abort.rs:43:1: 50:2]; // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        _2 = StaticTestName(const "no_residual_environment"); // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:43:1: 50:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:50:1: 50:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:50:1: 50:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:50:1: 50:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:50:1: 50:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        _8 = [closure@ui/test-attrs/test-panic-abort.rs:43:1: 50:2]; // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
                                         // closure
                                         // + def_id: DefId(0:23 ~ test_panic_abort[d134]::no_residual_environment::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:50:1: 50:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:50:1: 50:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:50:1: 50:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-panic-abort.rs:50:1: 50:2
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    }
}

fn no_residual_environment::{closure#0}(_1: &[closure@ui/test-attrs/test-panic-abort.rs:43:1: 50:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:30: 43:30

    bb0: {
        _2 = no_residual_environment() -> bb1; // scope 0 at ui/test-attrs/test-panic-abort.rs:43:30: 43:30
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:43:1: 50:2
                                         // + literal: Const { ty: fn() {no_residual_environment}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:43:30: 43:30
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:50:2: 50:2
    }
}

fn no_residual_environment() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:43:30: 43:30
    let mut _1: std::env::Vars;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
    let mut _2: std::env::Vars;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
    let mut _3: std::env::Vars;          // in scope 0 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
    let mut _4: std::option::Option<(std::string::String, std::string::String)>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
    let mut _5: &mut std::env::Vars;     // in scope 0 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
    let mut _6: &mut std::env::Vars;     // in scope 0 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
    let mut _7: isize;                   // in scope 0 at ui/test-attrs/test-panic-abort.rs:44:5: 49:6
    let mut _9: bool;                    // in scope 0 at ui/test-attrs/test-panic-abort.rs:46:12: 46:39
    let mut _10: &str;                   // in scope 0 at ui/test-attrs/test-panic-abort.rs:46:12: 46:39
    let _11: &str;                       // in scope 0 at ui/test-attrs/test-panic-abort.rs:46:12: 46:39
    let mut _12: &std::string::String;   // in scope 0 at ui/test-attrs/test-panic-abort.rs:46:12: 46:39
    let mut _13: !;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
    let mut _14: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _15: &[&str];                // in scope 0 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
    let mut _16: &[&str; 2];             // in scope 0 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
    let _17: &[&str; 2];                 // in scope 0 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
    let mut _18: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _19: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _20: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let _21: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
    let mut _22: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/test-attrs/test-panic-abort.rs:47:58: 47:61
    let mut _23: &std::string::String;   // in scope 0 at ui/test-attrs/test-panic-abort.rs:47:58: 47:61
    let _24: &std::string::String;       // in scope 0 at ui/test-attrs/test-panic-abort.rs:47:58: 47:61
    let mut _26: isize;                  // in scope 0 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    let mut _27: isize;                  // in scope 0 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
        let _8: std::string::String;     // in scope 1 at ui/test-attrs/test-panic-abort.rs:44:10: 44:13
        scope 2 {
            debug key => _8;             // in scope 2 at ui/test-attrs/test-panic-abort.rs:44:10: 44:13
            let mut _25: &[&str; 2];     // in scope 2 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
        }
    }

    bb0: {
        _2 = vars() -> bb1;              // scope 0 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:44:21: 44:30
                                         // + literal: Const { ty: fn() -> Vars {vars}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Vars as IntoIterator>::into_iter(move _2) -> bb2; // scope 0 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:44:21: 44:32
                                         // + literal: Const { ty: fn(Vars) -> <Vars as IntoIterator>::IntoIter {<Vars as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = move _1;                    // scope 0 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
        goto -> bb3;                     // scope 1 at ui/test-attrs/test-panic-abort.rs:44:5: 49:6
    }

    bb3: {
        _6 = &mut _3;                    // scope 1 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
        _5 = &mut (*_6);                 // scope 1 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
        _4 = <Vars as Iterator>::next(move _5) -> [return: bb4, unwind: bb17]; // scope 1 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:44:21: 44:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vars) -> Option<<Vars as Iterator>::Item> {<Vars as Iterator>::next}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = discriminant(_4);           // scope 1 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
        switchInt(move _7) -> [0: bb7, 1: bb5, otherwise: bb6]; // scope 1 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
    }

    bb5: {
        _8 = move (((_4 as Some).0: (std::string::String, std::string::String)).0: std::string::String); // scope 1 at ui/test-attrs/test-panic-abort.rs:44:10: 44:13
        _12 = &_8;                       // scope 2 at ui/test-attrs/test-panic-abort.rs:46:12: 46:39
        _11 = <String as Deref>::deref(move _12) -> [return: bb8, unwind: bb16]; // scope 2 at ui/test-attrs/test-panic-abort.rs:46:12: 46:39
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:46:12: 46:39
                                         // + literal: Const { ty: for<'a> fn(&'a String) -> &'a <String as Deref>::Target {<String as Deref>::deref}, val: Value(<ZST>) }
    }

    bb6: {
        unreachable;                     // scope 1 at ui/test-attrs/test-panic-abort.rs:44:21: 44:32
    }

    bb7: {
        drop(_3) -> bb15;                // scope 0 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    }

    bb8: {
        _10 = _11;                       // scope 2 at ui/test-attrs/test-panic-abort.rs:46:12: 46:39
        _9 = core::str::<impl str>::contains::<'_, &str>(move _10, const "TEST_INVOKE") -> [return: bb9, unwind: bb16]; // scope 2 at ui/test-attrs/test-panic-abort.rs:46:12: 46:39
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:46:16: 46:24
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:46:25: 46:38
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb9: {
        switchInt(move _9) -> [0: bb13, otherwise: bb10]; // scope 2 at ui/test-attrs/test-panic-abort.rs:46:12: 46:39
    }

    bb10: {
        _25 = const _;                   // scope 2 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:47:20: 47:56
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(no_residual_environment, [], Some(promoted[0])) }
        _17 = _25;                       // scope 2 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
        _16 = _17;                       // scope 2 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
        _15 = move _16 as &[&str] (Pointer(Unsize)); // scope 2 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
        _24 = &_8;                       // scope 2 at ui/test-attrs/test-panic-abort.rs:47:58: 47:61
        _23 = _24;                       // scope 2 at ui/test-attrs/test-panic-abort.rs:47:58: 47:61
        _22 = core::fmt::ArgumentV1::<'_>::new_display::<String>(move _23) -> [return: bb11, unwind: bb16]; // scope 2 at ui/test-attrs/test-panic-abort.rs:47:58: 47:61
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:47:58: 47:61
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b String) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<String>}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = [move _22];                // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _20 = &_21;                      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _19 = _20;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _18 = move _19 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
        _14 = Arguments::<'_>::new_v1(move _15, move _18) -> [return: bb12, unwind: bb16]; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:31: 29:73
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb12: {
        _13 = panic_fmt(move _14) -> bb16; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:74
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:29:9: 29:30
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) -> ! {panic_fmt}, val: Value(<ZST>) }
    }

    bb13: {
        drop(_8) -> [return: bb14, unwind: bb21]; // scope 1 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    }

    bb14: {
        _26 = discriminant(_4);          // scope 1 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
        switchInt(move _26) -> [1: bb19, otherwise: bb3]; // scope 1 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    }

    bb15: {
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:50:2: 50:2
    }

    bb16 (cleanup): {
        drop(_8) -> bb21;                // scope 1 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    }

    bb17 (cleanup): {
        drop(_3) -> bb18;                // scope 0 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    }

    bb18 (cleanup): {
        resume;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    }

    bb19: {
        drop((((_4 as Some).0: (std::string::String, std::string::String)).1: std::string::String)) -> [return: bb3, unwind: bb17]; // scope 1 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    }

    bb20 (cleanup): {
        drop((((_4 as Some).0: (std::string::String, std::string::String)).1: std::string::String)) -> bb17; // scope 1 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    }

    bb21 (cleanup): {
        _27 = discriminant(_4);          // scope 1 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
        switchInt(move _27) -> [1: bb20, otherwise: bb17]; // scope 1 at ui/test-attrs/test-panic-abort.rs:49:5: 49:6
    }
}

promoted[0] in no_residual_environment: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
    let mut _1: [&str; 2];               // in scope 0 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56

    bb0: {
        _1 = [const "shouldn't have '", const "' in environment"]; // scope 0 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:47:20: 47:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:47:20: 47:56
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
        return;                          // scope 0 at ui/test-attrs/test-panic-abort.rs:47:20: 47:56
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&test::TestDescAndFn; 5]; // in scope 0 at no-location
    let _3: &[&test::TestDescAndFn; 5];  // in scope 0 at no-location
    let mut _4: &[&test::TestDescAndFn; 5]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 5], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 5] = {
    let mut _0: &[&test::TestDescAndFn; 5]; // return place in scope 0 at no-location
    let mut _1: [&test::TestDescAndFn; 5]; // in scope 0 at no-location
    let mut _2: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _3: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _4: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
    let mut _5: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _6: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _7: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
    let mut _8: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _9: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _10: test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
    let mut _11: &test::TestDescAndFn;   // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _12: &test::TestDescAndFn;   // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _13: test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
    let mut _14: &test::TestDescAndFn;   // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _15: &test::TestDescAndFn;   // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
    let mut _16: test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:38:1: 40:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(it_exits, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/test-panic-abort.rs:38:1: 40:2
        _7 = const _;                    // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:30:1: 35:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(it_fails, [], None) }
        _6 = &_7;                        // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        _5 = &(*_6);                     // scope 0 at ui/test-attrs/test-panic-abort.rs:30:1: 35:2
        _10 = const _;                   // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:25:1: 27:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(it_panics, [], None) }
        _9 = &_10;                       // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        _8 = &(*_9);                     // scope 0 at ui/test-attrs/test-panic-abort.rs:25:1: 27:2
        _13 = const _;                   // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:19:1: 21:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(it_works, [], None) }
        _12 = &_13;                      // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        _11 = &(*_12);                   // scope 0 at ui/test-attrs/test-panic-abort.rs:19:1: 21:2
        _16 = const _;                   // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-panic-abort.rs:43:1: 50:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(no_residual_environment, [], None) }
        _15 = &_16;                      // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        _14 = &(*_15);                   // scope 0 at ui/test-attrs/test-panic-abort.rs:43:1: 50:2
        _1 = [move _2, move _5, move _8, move _11, move _14]; // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
