// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const tests::test: TestDescAndFn = {
    let mut _0: tests::test::TestDescAndFn; // return place in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _1: tests::test::TestDesc;   // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _2: tests::test::TestName;   // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _4: tests::test::ShouldPanic; // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _5: tests::test::TestType;   // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _6: tests::test::TestFn;     // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _8: [closure@ui/test-attrs/issue-16597.rs:9:5: 9:20]; // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        StorageLive(_2);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        _2 = StaticTestName(const "tests::test"); // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-16597.rs:9:5: 9:20
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        StorageLive(_4);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        _4 = tests::test::ShouldPanic::No; // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        StorageLive(_5);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        _5 = tests::test::TestType::Unknown; // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        StorageDead(_5);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:19: 9:20
        StorageDead(_4);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:19: 9:20
        StorageDead(_3);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:19: 9:20
        StorageDead(_2);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:19: 9:20
        StorageLive(_6);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        StorageLive(_7);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        StorageLive(_8);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        _8 = [closure@ui/test-attrs/issue-16597.rs:9:5: 9:20]; // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
                                         // closure
                                         // + def_id: DefId(0:7 ~ issue_16597[c1be]::tests::test::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        StorageDead(_8);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:19: 9:20
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        StorageDead(_7);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:19: 9:20
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        StorageDead(_6);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:19: 9:20
        StorageDead(_1);                 // scope 0 at ui/test-attrs/issue-16597.rs:9:19: 9:20
        return;                          // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    }
}

fn tests::test::{closure#0}(_1: &[closure@ui/test-attrs/issue-16597.rs:9:5: 9:20]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _2: ();                      // in scope 0 at ui/test-attrs/issue-16597.rs:9:18: 9:18

    bb0: {
        _2 = tests::test() -> bb1;       // scope 0 at ui/test-attrs/issue-16597.rs:9:18: 9:18
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-16597.rs:9:5: 9:20
                                         // + literal: Const { ty: fn() {tests::test}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-16597.rs:9:18: 9:18
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/issue-16597.rs:9:20: 9:20
    }
}

fn tests::test() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/issue-16597.rs:9:18: 9:18

    bb0: {
        return;                          // scope 0 at ui/test-attrs/issue-16597.rs:9:20: 9:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&tests::test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&tests::test::TestDescAndFn; 1]; // in scope 0 at no-location
    let _3: &[&tests::test::TestDescAndFn; 1]; // in scope 0 at no-location
    let mut _4: &[&tests::test::TestDescAndFn; 1]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&tests::test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 1] = {
    let mut _0: &[&tests::test::TestDescAndFn; 1]; // return place in scope 0 at no-location
    let mut _1: [&tests::test::TestDescAndFn; 1]; // in scope 0 at no-location
    let mut _2: &tests::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _3: &tests::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
    let mut _4: tests::test::TestDescAndFn; // in scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
                                         // mir::Constant
                                         // + span: ui/test-attrs/issue-16597.rs:9:5: 9:20
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(tests::test, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/issue-16597.rs:9:5: 9:20
        _1 = [move _2];                  // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
