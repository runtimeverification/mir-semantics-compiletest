// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn b() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:9:12: 9:12
    let _1: ();                          // in scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:13
    let mut _2: &[closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12]; // in scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11
    let mut _3: ();                      // in scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:13
    let mut _4: &[closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12]; // in scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11
                                         // + literal: Const { ty: &[closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12], val: Unevaluated(b, [], Some(promoted[0])) }
        _2 = _4;                         // scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11
        _1 = <[closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12] as Fn<()>>::call(move _2, move _3) -> bb1; // scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:13
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11
                                         // + literal: Const { ty: for<'a> extern "rust-call" fn(&'a [closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12], ()) -> <[closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12] as FnOnce<()>>::Output {<[closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12] as Fn<()>>::call}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:14:6: 14:6
    }
}

promoted[0] in b: &[closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12] = {
    let mut _0: &[closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12]; // return place in scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11
    let mut _1: [closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12]; // in scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11

    bb0: {
        _1 = [closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12]; // scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11
                                         // closure
                                         // + def_id: DefId(0:5 ~ test_runner_hides_buried_main[08b5]::a::b::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()),
                                         //     (),
                                         // ]
        _0 = &_1;                        // scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11
        return;                          // scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:9: 13:11
    }
}

fn b::{closure#0}(_1: &[closure@ui/test-attrs/test-runner-hides-buried-main.rs:10:10: 10:12]) -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:10:13: 10:13

    bb0: {
        return;                          // scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:13:11: 13:11
    }
}

fn c() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-runner-hides-buried-main.rs:12:20: 12:20
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _1 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&test::TestDescAndFn; 0]; // in scope 0 at no-location
    let _3: &[&test::TestDescAndFn; 0];  // in scope 0 at no-location
    let mut _4: &[&test::TestDescAndFn; 0]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 0], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 0] = {
    let mut _0: &[&test::TestDescAndFn; 0]; // return place in scope 0 at no-location
    let mut _1: [&test::TestDescAndFn; 0]; // in scope 0 at no-location

    bb0: {
        _1 = [];                         // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
