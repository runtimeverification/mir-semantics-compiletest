// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
const it_works: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _8: [closure@ui/test-attrs/test-passed-wasm.rs:13:1: 15:2]; // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        _2 = StaticTestName(const "it_works"); // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:1: 15:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:1: 15:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:1: 15:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:1: 15:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        _8 = [closure@ui/test-attrs/test-passed-wasm.rs:13:1: 15:2]; // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
                                         // closure
                                         // + def_id: DefId(0:5 ~ test_passed_wasm[b3ee]::it_works::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:1: 15:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:1: 15:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:1: 15:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:1: 15:2
        return;                          // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    }
}

fn it_works::{closure#0}(_1: &[closure@ui/test-attrs/test-passed-wasm.rs:13:1: 15:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:15: 13:15

    bb0: {
        _2 = it_works() -> bb1;          // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:15: 13:15
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
                                         // + literal: Const { ty: fn() {it_works}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-passed-wasm.rs:13:15: 13:15
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:2: 15:2
    }
}

fn it_works() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:15: 13:15
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _8 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_works, [], Some(promoted[1])) }
        _2 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_works, [], Some(promoted[0])) }
        _3 = _7;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/test-attrs/test-passed-wasm.rs:15:2: 15:2
    }
}

promoted[0] in it_works: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-passed-wasm.rs:14:23: 14:24

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/test-attrs/test-passed-wasm.rs:14:23: 14:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in it_works: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-passed-wasm.rs:14:16: 14:21
    let mut _2: (i32, bool);             // in scope 0 at ui/test-attrs/test-passed-wasm.rs:14:16: 14:21

    bb0: {
        _2 = CheckedAdd(const 1_i32, const 1_i32); // scope 0 at ui/test-attrs/test-passed-wasm.rs:14:16: 14:21
        _1 = move (_2.0: i32);           // scope 0 at ui/test-attrs/test-passed-wasm.rs:14:16: 14:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

const it_works_too: TestDescAndFn = {
    let mut _0: test::TestDescAndFn;     // return place in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _1: test::TestDesc;          // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _2: test::TestName;          // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _4: test::ShouldPanic;       // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _5: test::TestType;          // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _6: test::TestFn;            // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _8: [closure@ui/test-attrs/test-passed-wasm.rs:18:1: 20:2]; // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        StorageLive(_2);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        _2 = StaticTestName(const "it_works_too"); // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        StorageLive(_4);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        _4 = test::ShouldPanic::No;      // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        StorageLive(_5);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        _5 = test::TestType::Unknown;    // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        StorageDead(_5);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:1: 20:2
        StorageDead(_4);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:1: 20:2
        StorageDead(_3);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:1: 20:2
        StorageDead(_2);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:1: 20:2
        StorageLive(_6);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        StorageLive(_7);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        StorageLive(_8);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        _8 = [closure@ui/test-attrs/test-passed-wasm.rs:18:1: 20:2]; // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
                                         // closure
                                         // + def_id: DefId(0:9 ~ test_passed_wasm[b3ee]::it_works_too::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        StorageDead(_8);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:1: 20:2
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        StorageDead(_7);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:1: 20:2
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        StorageDead(_6);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:1: 20:2
        StorageDead(_1);                 // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:1: 20:2
        return;                          // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    }
}

fn it_works_too::{closure#0}(_1: &[closure@ui/test-attrs/test-passed-wasm.rs:18:1: 20:2]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _2: ();                      // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:19: 18:19

    bb0: {
        _2 = it_works_too() -> bb1;      // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:19: 18:19
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
                                         // + literal: Const { ty: fn() {it_works_too}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-passed-wasm.rs:18:19: 18:19
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:2: 20:2
    }
}

fn it_works_too() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:19: 18:19
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _3: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _4: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _8: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    scope 1 {
        debug left_val => _4;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _5;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _6: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _6;            // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _8 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_works_too, [], Some(promoted[1])) }
        _2 = _8;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _7 = const _;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(it_works_too, [], Some(promoted[0])) }
        _3 = _7;                         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _3);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _4 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _5 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        return;                          // scope 0 at ui/test-attrs/test-passed-wasm.rs:20:2: 20:2
    }
}

promoted[0] in it_works_too: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-passed-wasm.rs:19:23: 19:24

    bb0: {
        _1 = const 0_i32;                // scope 0 at ui/test-attrs/test-passed-wasm.rs:19:23: 19:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in it_works_too: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: i32;                     // in scope 0 at ui/test-attrs/test-passed-wasm.rs:19:16: 19:21
    let mut _2: (i32, bool);             // in scope 0 at ui/test-attrs/test-passed-wasm.rs:19:16: 19:21

    bb0: {
        _2 = CheckedMul(const 1_i32, const 0_i32); // scope 0 at ui/test-attrs/test-passed-wasm.rs:19:16: 19:21
        _1 = move (_2.0: i32);           // scope 0 at ui/test-attrs/test-passed-wasm.rs:19:16: 19:21
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&test::TestDescAndFn; 2]; // in scope 0 at no-location
    let _3: &[&test::TestDescAndFn; 2];  // in scope 0 at no-location
    let mut _4: &[&test::TestDescAndFn; 2]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 2] = {
    let mut _0: &[&test::TestDescAndFn; 2]; // return place in scope 0 at no-location
    let mut _1: [&test::TestDescAndFn; 2]; // in scope 0 at no-location
    let mut _2: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _3: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _4: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
    let mut _5: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _6: &test::TestDescAndFn;    // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
    let mut _7: test::TestDescAndFn;     // in scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(it_works, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/test-passed-wasm.rs:13:1: 15:2
        _7 = const _;                    // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
                                         // mir::Constant
                                         // + span: ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(it_works_too, [], None) }
        _6 = &_7;                        // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        _5 = &(*_6);                     // scope 0 at ui/test-attrs/test-passed-wasm.rs:18:1: 20:2
        _1 = [move _2, move _5];         // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
