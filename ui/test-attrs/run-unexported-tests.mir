// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn exported() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/run-unexported-tests.rs:6:23: 6:23

    bb0: {
        return;                          // scope 0 at ui/test-attrs/run-unexported-tests.rs:6:25: 6:25
    }
}

const m::unexported: TestDescAndFn = {
    let mut _0: m::test::TestDescAndFn;  // return place in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _1: m::test::TestDesc;       // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _2: m::test::TestName;       // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _3: std::option::Option<&str>; // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _4: m::test::ShouldPanic;    // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _5: m::test::TestType;       // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _6: m::test::TestFn;         // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _7: fn() -> std::result::Result<(), std::string::String>; // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _8: [closure@ui/test-attrs/run-unexported-tests.rs:9:5: 11:6]; // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6

    bb0: {
        StorageLive(_1);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        StorageLive(_2);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        _2 = StaticTestName(const "m::unexported"); // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        StorageLive(_3);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        _3 = Option::<&str>::None;       // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        StorageLive(_4);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        _4 = m::test::ShouldPanic::No;   // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        StorageLive(_5);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        _5 = m::test::TestType::Unknown; // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        _1 = TestDesc { name: move _2, ignore: const false, ignore_message: move _3, should_panic: move _4, compile_fail: const false, no_run: const false, test_type: move _5 }; // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        StorageDead(_5);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:11:5: 11:6
        StorageDead(_4);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:11:5: 11:6
        StorageDead(_3);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:11:5: 11:6
        StorageDead(_2);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:11:5: 11:6
        StorageLive(_6);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        StorageLive(_7);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        StorageLive(_8);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        _8 = [closure@ui/test-attrs/run-unexported-tests.rs:9:5: 11:6]; // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
                                         // closure
                                         // + def_id: DefId(0:7 ~ run_unexported_tests[c2de]::m::unexported::{closure#0})
                                         // + substs: [
                                         //     i8,
                                         //     extern "rust-call" fn(()) -> std::result::Result<(), std::string::String>,
                                         //     (),
                                         // ]
        _7 = move _8 as fn() -> std::result::Result<(), std::string::String> (Pointer(ClosureFnPointer(Normal))); // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        StorageDead(_8);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:11:5: 11:6
        _6 = StaticTestFn(move _7);      // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        StorageDead(_7);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:11:5: 11:6
        _0 = TestDescAndFn { desc: move _1, testfn: move _6 }; // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        StorageDead(_6);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:11:5: 11:6
        StorageDead(_1);                 // scope 0 at ui/test-attrs/run-unexported-tests.rs:11:5: 11:6
        return;                          // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    }
}

fn m::unexported::{closure#0}(_1: &[closure@ui/test-attrs/run-unexported-tests.rs:9:5: 11:6]) -> Result<(), String> {
    let mut _0: std::result::Result<(), std::string::String>; // return place in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _2: ();                      // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:21: 9:21

    bb0: {
        _2 = m::unexported() -> bb1;     // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:21: 9:21
                                         // mir::Constant
                                         // + span: ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
                                         // + literal: Const { ty: fn() {m::unexported}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = assert_test_result::<()>(move _2) -> bb2; // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/run-unexported-tests.rs:9:21: 9:21
                                         // + literal: Const { ty: fn(()) -> Result<(), String> {assert_test_result::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/test-attrs/run-unexported-tests.rs:11:6: 11:6
    }
}

fn m::unexported() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:21: 9:21
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38

    bb0: {
        _1 = begin_panic::<&str>(const "ran an unexported test"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/test-attrs/run-unexported-tests.rs:10:16: 10:40
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at no-location
    let mut _1: &[&m::test::TestDescAndFn]; // in scope 0 at no-location
    let mut _2: &[&m::test::TestDescAndFn; 1]; // in scope 0 at no-location
    let _3: &[&m::test::TestDescAndFn; 1]; // in scope 0 at no-location
    let mut _4: &[&m::test::TestDescAndFn; 1]; // in scope 0 at no-location

    bb0: {
        _4 = const _;                    // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: &[&TestDescAndFn; 1], val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at no-location
        _2 = _3;                         // scope 0 at no-location
        _1 = move _2 as &[&m::test::TestDescAndFn] (Pointer(Unsize)); // scope 0 at no-location
        _0 = test_main_static(move _1) -> bb1; // scope 0 at no-location
                                         // mir::Constant
                                         // + span: no-location
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [&'b TestDescAndFn]) {test_main_static}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at no-location
    }
}

promoted[0] in main: &[&TestDescAndFn; 1] = {
    let mut _0: &[&m::test::TestDescAndFn; 1]; // return place in scope 0 at no-location
    let mut _1: [&m::test::TestDescAndFn; 1]; // in scope 0 at no-location
    let mut _2: &m::test::TestDescAndFn; // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _3: &m::test::TestDescAndFn; // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
    let mut _4: m::test::TestDescAndFn;  // in scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6

    bb0: {
        _4 = const _;                    // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
                                         // mir::Constant
                                         // + span: ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
                                         // + literal: Const { ty: TestDescAndFn, val: Unevaluated(m::unexported, [], None) }
        _3 = &_4;                        // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        _2 = &(*_3);                     // scope 0 at ui/test-attrs/run-unexported-tests.rs:9:5: 11:6
        _1 = [move _2];                  // scope 0 at no-location
        _0 = &_1;                        // scope 0 at no-location
        return;                          // scope 0 at no-location
    }
}
