// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn panic_fmt(_1: &PanicInfo<'_>) -> ! {
    let mut _0: !;                       // return place in scope 0 at ui/panic_implementation-closures.rs:7:51: 7:52

    bb0: {
        goto -> bb1;                     // scope 0 at ui/panic_implementation-closures.rs:9:5: 9:12
    }

    bb1: {
        goto -> bb1;                     // scope 0 at ui/panic_implementation-closures.rs:9:5: 9:12
    }
}

fn panic_fmt::{closure#0}(_1: &[closure@ui/panic_implementation-closures.rs:8:5: 8:12], _2: u8) -> u8 {
    debug x => _2;                       // in scope 0 at ui/panic_implementation-closures.rs:8:6: 8:7
    let mut _0: u8;                      // return place in scope 0 at ui/panic_implementation-closures.rs:8:13: 8:13

    bb0: {
        _0 = _2;                         // scope 0 at ui/panic_implementation-closures.rs:8:13: 8:14
        return;                          // scope 0 at ui/panic_implementation-closures.rs:8:14: 8:14
    }
}
