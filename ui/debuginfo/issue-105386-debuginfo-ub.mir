// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:4:11: 4:11
    let _1: ();                          // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:5:5: 5:28
    let mut _2: TranslatorI;             // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:5:5: 5:16

    bb0: {
        _1 = TranslatorI::visit_pre(move _2) -> bb1; // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:5:5: 5:28
                                         // mir::Constant
                                         // + span: ui/debuginfo/issue-105386-debuginfo-ub.rs:5:17: 5:26
                                         // + literal: Const { ty: fn(TranslatorI) {TranslatorI::visit_pre}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:6:2: 6:2
    }
}

fn <impl at ui/debuginfo/issue-105386-debuginfo-ub.rs:8:1: 8:17>::visit_pre(_1: TranslatorI) -> () {
    debug self => _1;                    // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:9:18: 9:22
    let mut _0: ();                      // return place in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:9:24: 9:24
    let _2: ();                          // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:10:9: 12:45
    let mut _3: std::option::Option<()>; // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:10:9: 11:35
    let mut _4: std::option::Option<()>; // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:10:9: 10:17
    let mut _5: [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21]; // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:34
    let mut _6: &TranslatorI;            // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:34
    let mut _7: [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31]; // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:44
    let mut _8: &TranslatorI;            // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:44

    bb0: {
        _4 = const Option::<()>::Some(()); // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:10:9: 10:17
                                         // mir::Constant
                                         // + span: ui/debuginfo/issue-105386-debuginfo-ub.rs:10:9: 10:17
                                         // + literal: Const { ty: Option<()>, val: Value(Scalar(0x01)) }
        _6 = &_1;                        // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:34
        _5 = [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21] { self: move _6 }; // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:34
                                         // closure
                                         // + def_id: DefId(0:6 ~ issue_105386_debuginfo_ub[f635]::{impl#0}::visit_pre::{closure#0})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(((),)),
                                         //     (&TranslatorI,),
                                         // ]
        _3 = Option::<()>::map::<(), [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21]>(move _4, move _5) -> bb1; // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:10:9: 11:35
                                         // mir::Constant
                                         // + span: ui/debuginfo/issue-105386-debuginfo-ub.rs:11:14: 11:17
                                         // + literal: Const { ty: fn(Option<()>, [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21]) -> Option<()> {Option::<()>::map::<(), [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21]>}, val: Value(<ZST>) }
    }

    bb1: {
        _8 = &_1;                        // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:44
        _7 = [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31] { self: move _8 }; // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:44
                                         // closure
                                         // + def_id: DefId(0:7 ~ issue_105386_debuginfo_ub[f635]::{impl#0}::visit_pre::{closure#1})
                                         // + substs: [
                                         //     i32,
                                         //     extern "rust-call" fn(()),
                                         //     (&TranslatorI,),
                                         // ]
        _2 = Option::<()>::unwrap_or_else::<[closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31]>(move _3, move _7) -> bb2; // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:10:9: 12:45
                                         // mir::Constant
                                         // + span: ui/debuginfo/issue-105386-debuginfo-ub.rs:12:14: 12:28
                                         // + literal: Const { ty: fn(Option<()>, [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31]) {Option::<()>::unwrap_or_else::<[closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31]>}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:13:6: 13:6
    }
}

fn <impl at ui/debuginfo/issue-105386-debuginfo-ub.rs:8:1: 8:17>::visit_pre::{closure#0}(_1: [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:21], _2: ()) -> () {
    debug self => (*(_1.0: &TranslatorI)); // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:9:18: 9:22
    let mut _0: ();                      // return place in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:22: 11:22
    let mut _3: &TranslatorI;            // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:22: 11:34
    let mut _4: &TranslatorI;            // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:18: 11:34

    bb0: {
        _4 = deref_copy (_1.0: &TranslatorI); // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:22: 11:34
        _3 = _4;                         // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:22: 11:34
        _0 = TranslatorI::flags(move _3) -> bb1; // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:22: 11:34
                                         // mir::Constant
                                         // + span: ui/debuginfo/issue-105386-debuginfo-ub.rs:11:27: 11:32
                                         // + literal: Const { ty: for<'a> fn(&'a TranslatorI) {TranslatorI::flags}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:11:34: 11:34
    }
}

fn <impl at ui/debuginfo/issue-105386-debuginfo-ub.rs:8:1: 8:17>::visit_pre::{closure#1}(_1: [closure@ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:31]) -> () {
    debug self => (*(_1.0: &TranslatorI)); // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:9:18: 9:22
    let mut _0: ();                      // return place in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:32: 12:32
    let mut _2: &TranslatorI;            // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:32: 12:44
    let mut _3: &TranslatorI;            // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:29: 12:44

    bb0: {
        _3 = deref_copy (_1.0: &TranslatorI); // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:32: 12:44
        _2 = _3;                         // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:32: 12:44
        _0 = TranslatorI::flags(move _2) -> bb1; // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:32: 12:44
                                         // mir::Constant
                                         // + span: ui/debuginfo/issue-105386-debuginfo-ub.rs:12:37: 12:42
                                         // + literal: Const { ty: for<'a> fn(&'a TranslatorI) {TranslatorI::flags}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:12:44: 12:44
    }
}

fn <impl at ui/debuginfo/issue-105386-debuginfo-ub.rs:18:1: 18:17>::flags(_1: &TranslatorI) -> () {
    debug self => _1;                    // in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:19:14: 19:19
    let mut _0: ();                      // return place in scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:19:21: 19:21

    bb0: {
        return;                          // scope 0 at ui/debuginfo/issue-105386-debuginfo-ub.rs:19:23: 19:23
    }
}
