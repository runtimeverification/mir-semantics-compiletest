// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs:7:15: 7:15
    let mut _1: std::boxed::Box<Foo<dyn FooTrait>>; // in scope 0 at ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs:8:13: 8:39
    scope 1 {
    }

    bb0: {
        _1 = Foo::<dyn FooTrait>::new() -> bb1; // scope 0 at ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs:8:13: 8:39
                                         // mir::Constant
                                         // + span: ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs:8:13: 8:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Box<Foo<dyn FooTrait>> {Foo::<dyn FooTrait>::new}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs:8:39: 8:40
    }

    bb2: {
        return;                          // scope 0 at ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs:9:2: 9:2
    }
}

fn <impl at ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs:16:1: 16:34>::new() -> Box<Foo<T>> {
    let mut _0: std::boxed::Box<Foo<T>>; // return place in scope 0 at ui/debuginfo/debuginfo_with_uninhabitable_field_and_unsized.rs:17:21: 17:32
    let mut _1: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _1 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}
