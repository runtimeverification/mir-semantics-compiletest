// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/debuginfo/debuginfo-box-with-large-allocator.rs:12:1: 12:31>::allocate(_1: &&ZST, _2: Layout) -> Result<NonNull<[u8]>, std::alloc::AllocError> {
    debug self => _1;
    debug layout => _2;
    let mut _0: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>;
    let mut _3: !;

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> unwind continue;
    }
}

fn <impl at ui/debuginfo/debuginfo-box-with-large-allocator.rs:12:1: 12:31>::deallocate(_1: &&ZST, _2: NonNull<u8>, _3: Layout) -> () {
    debug self => _1;
    debug ptr => _2;
    debug layout => _3;
    let mut _0: ();
    let mut _4: !;

    bb0: {
        _4 = core::panicking::panic(const "not yet implemented") -> unwind continue;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: std::boxed::Box<i32, &ZST>;
    let mut _2: &ZST;
    scope 1 {
    }

    bb0: {
        _2 = const _;
        _1 = Box::<i32, &ZST>::new_in(const 43_i32, _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        drop(_1) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

promoted[0] in main: &ZST = {
    let mut _0: &ZST;
    let mut _1: ZST;

    bb0: {
        _1 = ZST;
        _0 = &_1;
        return;
    }
}
