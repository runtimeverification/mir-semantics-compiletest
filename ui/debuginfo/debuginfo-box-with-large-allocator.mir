// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/debuginfo/debuginfo-box-with-large-allocator.rs:12:1: 12:31>::allocate(_1: &&ZST, _2: Layout) -> Result<NonNull<[u8]>, std::alloc::AllocError> {
    debug self => _1;                    // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:13:17: 13:22
    debug layout => _2;                  // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:13:24: 13:30
    let mut _0: std::result::Result<std::ptr::NonNull<[u8]>, std::alloc::AllocError>; // return place in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:13:43: 13:76
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn <impl at ui/debuginfo/debuginfo-box-with-large-allocator.rs:12:1: 12:31>::deallocate(_1: &&ZST, _2: NonNull<u8>, _3: Layout) -> () {
    debug self => _1;                    // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:16:26: 16:31
    debug ptr => _2;                     // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:16:33: 16:36
    debug layout => _3;                  // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:16:51: 16:57
    let mut _0: ();                      // return place in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:16:67: 16:67
    let mut _4: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _4 = core::panicking::panic(const "not yet implemented"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:21:11: 21:11
    let mut _1: std::boxed::Box<i32, &ZST>; // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:13: 22:47
    let mut _2: &ZST;                    // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
    let _3: &ZST;                        // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
    let mut _4: &ZST;                    // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
    scope 1 {
    }

    bb0: {
        _4 = const _;                    // scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
                                         // mir::Constant
                                         // + span: ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
                                         // + literal: Const { ty: &ZST, val: Unevaluated(main, [], Some(promoted[0])) }
        _3 = _4;                         // scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
        _2 = _3;                         // scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
        _1 = Box::<i32, &ZST>::new_in(const 43_i32, move _2) -> bb1; // scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:13: 22:47
                                         // mir::Constant
                                         // + span: ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:13: 22:37
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(i32, &ZST) -> Box<i32, &ZST> {Box::<i32, &ZST>::new_in}, val: Value(<ZST>) }
    }

    bb1: {
        drop(_1) -> bb2;                 // scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:47: 22:48
    }

    bb2: {
        return;                          // scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:23:2: 23:2
    }
}

promoted[0] in main: &ZST = {
    let mut _0: &ZST;                    // return place in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
    let mut _1: ZST;                     // in scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:43: 22:46

    bb0: {
        _1 = ZST;                        // scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:43: 22:46
        _0 = &_1;                        // scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
        return;                          // scope 0 at ui/debuginfo/debuginfo-box-with-large-allocator.rs:22:42: 22:46
    }
}
