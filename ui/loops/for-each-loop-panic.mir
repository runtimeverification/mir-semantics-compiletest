// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/loops/for-each-loop-panic.rs:5:11: 5:11
    let mut _1: std::ops::Range<usize>;  // in scope 0 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
    let mut _2: std::ops::Range<usize>;  // in scope 0 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
    let mut _3: std::ops::Range<usize>;  // in scope 0 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
    let mut _4: std::option::Option<usize>; // in scope 0 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
    let mut _5: &mut std::ops::Range<usize>; // in scope 0 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
    let mut _6: &mut std::ops::Range<usize>; // in scope 0 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
    let mut _7: isize;                   // in scope 0 at ui/loops/for-each-loop-panic.rs:6:5: 8:6
    let mut _8: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
    }

    bb0: {
        _2 = std::ops::Range::<usize> { start: const 0_usize, end: const 10_usize }; // scope 0 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
        _1 = <std::ops::Range<usize> as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
                                         // mir::Constant
                                         // + span: ui/loops/for-each-loop-panic.rs:6:14: 6:31
                                         // + literal: Const { ty: fn(std::ops::Range<usize>) -> <std::ops::Range<usize> as IntoIterator>::IntoIter {<std::ops::Range<usize> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
        _6 = &mut _3;                    // scope 1 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
        _5 = &mut (*_6);                 // scope 1 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
        _4 = <std::ops::Range<usize> as Iterator>::next(move _5) -> bb2; // scope 1 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
                                         // mir::Constant
                                         // + span: ui/loops/for-each-loop-panic.rs:6:14: 6:31
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::ops::Range<usize>) -> Option<<std::ops::Range<usize> as Iterator>::Item> {<std::ops::Range<usize> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = discriminant(_4);           // scope 1 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
        switchInt(move _7) -> [0: bb5, 1: bb3, otherwise: bb4]; // scope 1 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
    }

    bb3: {
        _8 = begin_panic::<&str>(const "moop"); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:38
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:22:9: 22:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/loops/for-each-loop-panic.rs:7:16: 7:22
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb4: {
        unreachable;                     // scope 1 at ui/loops/for-each-loop-panic.rs:6:14: 6:31
    }

    bb5: {
        return;                          // scope 0 at ui/loops/for-each-loop-panic.rs:9:2: 9:2
    }
}
