// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/loops/loop-break-unsize.rs:4:11: 4:11
    let mut _1: std::boxed::Box<dyn std::marker::Send>; // in scope 0 at ui/loops/loop-break-unsize.rs:5:13: 7:6
    let mut _2: std::boxed::Box<dyn std::marker::Send>; // in scope 0 at ui/loops/loop-break-unsize.rs:5:13: 7:6
    let mut _3: std::boxed::Box<dyn std::marker::Send>; // in scope 0 at ui/loops/loop-break-unsize.rs:6:15: 6:44
    let mut _4: std::boxed::Box<()>;     // in scope 0 at ui/loops/loop-break-unsize.rs:6:15: 6:27
    let mut _5: ();                      // in scope 0 at ui/loops/loop-break-unsize.rs:6:24: 6:26
    scope 1 {
    }

    bb0: {
        _4 = Box::<()>::new(move _5) -> bb1; // scope 0 at ui/loops/loop-break-unsize.rs:6:15: 6:27
                                         // mir::Constant
                                         // + span: ui/loops/loop-break-unsize.rs:6:15: 6:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(()) -> Box<()> {Box::<()>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _4 as std::boxed::Box<dyn std::marker::Send> (Pointer(Unsize)); // scope 0 at ui/loops/loop-break-unsize.rs:6:15: 6:27
        _2 = move _3;                    // scope 0 at ui/loops/loop-break-unsize.rs:6:15: 6:44
        _1 = move _2 as std::boxed::Box<dyn std::marker::Send> (Pointer(Unsize)); // scope 0 at ui/loops/loop-break-unsize.rs:5:13: 7:6
        drop(_1) -> bb2;                 // scope 0 at ui/loops/loop-break-unsize.rs:7:6: 7:7
    }

    bb2: {
        return;                          // scope 0 at ui/loops/loop-break-unsize.rs:8:2: 8:2
    }
}
