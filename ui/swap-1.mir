// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();
    let mut _1: i32;
    let _3: ();
    let mut _4: &mut i32;
    let mut _5: &mut i32;
    let mut _6: (&i32, &i32);
    let mut _7: &i32;
    let mut _10: bool;
    let mut _11: bool;
    let mut _12: i32;
    let mut _13: i32;
    let _15: !;
    let mut _16: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _17: (&i32, &i32);
    let mut _18: &i32;
    let mut _21: bool;
    let mut _22: bool;
    let mut _23: i32;
    let mut _24: i32;
    let _26: !;
    let mut _27: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let mut _2: i32;
        scope 2 {
            debug y => _2;
            let _8: &i32;
            let _9: &i32;
            let _19: &i32;
            let _20: &i32;
            let mut _28: &i32;
            let mut _29: &i32;
            scope 3 {
                debug left_val => _8;
                debug right_val => _9;
                let _14: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _14;
                }
            }
            scope 5 {
                debug left_val => _19;
                debug right_val => _20;
                let _25: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _25;
                }
            }
        }
    }

    bb0: {
        _1 = const 3_i32;
        _2 = const 7_i32;
        _4 = &mut _1;
        _5 = &mut _2;
        _3 = std::mem::swap::<i32>(_4, _5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = &_1;
        _29 = const _;
        _6 = (move _7, _29);
        _8 = (_6.0: &i32);
        _9 = (_6.1: &i32);
        _12 = (*_8);
        _13 = (*_9);
        _11 = Eq(move _12, move _13);
        _10 = Not(move _11);
        switchInt(move _10) -> [0: bb3, otherwise: bb2];
    }

    bb2: {
        _14 = core::panicking::AssertKind::Eq;
        _16 = Option::<Arguments<'_>>::None;
        _15 = core::panicking::assert_failed::<i32, i32>(move _14, _8, _9, move _16) -> unwind continue;
    }

    bb3: {
        _18 = &_2;
        _28 = const _;
        _17 = (move _18, _28);
        _19 = (_17.0: &i32);
        _20 = (_17.1: &i32);
        _23 = (*_19);
        _24 = (*_20);
        _22 = Eq(move _23, move _24);
        _21 = Not(move _22);
        switchInt(move _21) -> [0: bb5, otherwise: bb4];
    }

    bb4: {
        _25 = core::panicking::AssertKind::Eq;
        _27 = Option::<Arguments<'_>>::None;
        _26 = core::panicking::assert_failed::<i32, i32>(move _25, _19, _20, move _27) -> unwind continue;
    }

    bb5: {
        return;
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 3_i32;
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const 7_i32;
        _0 = &_1;
        return;
    }
}
