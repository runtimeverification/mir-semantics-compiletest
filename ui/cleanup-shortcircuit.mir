// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/cleanup-shortcircuit.rs:11:15: 11:15
    let _1: std::vec::Vec<std::string::String>; // in scope 0 at ui/cleanup-shortcircuit.rs:12:9: 12:13
    let mut _2: std::env::Args;          // in scope 0 at ui/cleanup-shortcircuit.rs:12:29: 12:40
    let mut _3: bool;                    // in scope 0 at ui/cleanup-shortcircuit.rs:20:8: 20:46
    let mut _4: bool;                    // in scope 0 at ui/cleanup-shortcircuit.rs:20:8: 20:23
    let mut _5: usize;                   // in scope 0 at ui/cleanup-shortcircuit.rs:20:8: 20:18
    let mut _6: &std::vec::Vec<std::string::String>; // in scope 0 at ui/cleanup-shortcircuit.rs:20:8: 20:18
    let mut _7: bool;                    // in scope 0 at ui/cleanup-shortcircuit.rs:20:27: 20:46
    let mut _8: &std::string::String;    // in scope 0 at ui/cleanup-shortcircuit.rs:20:27: 20:34
    let _9: &std::string::String;        // in scope 0 at ui/cleanup-shortcircuit.rs:20:27: 20:34
    let mut _10: &std::vec::Vec<std::string::String>; // in scope 0 at ui/cleanup-shortcircuit.rs:20:27: 20:31
    let mut _11: &&str;                  // in scope 0 at ui/cleanup-shortcircuit.rs:20:38: 20:46
    let mut _12: *mut isize;             // in scope 0 at ui/cleanup-shortcircuit.rs:22:19: 22:48
    scope 1 {
        debug args => _1;                // in scope 1 at ui/cleanup-shortcircuit.rs:12:9: 12:13
        let mut _13: &&str;              // in scope 1 at ui/cleanup-shortcircuit.rs:20:38: 20:46
        scope 2 {
        }
    }

    bb0: {
        _2 = args() -> bb1;              // scope 0 at ui/cleanup-shortcircuit.rs:12:29: 12:40
                                         // mir::Constant
                                         // + span: ui/cleanup-shortcircuit.rs:12:29: 12:38
                                         // + literal: Const { ty: fn() -> Args {args}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = <Args as Iterator>::collect::<Vec<String>>(move _2) -> bb2; // scope 0 at ui/cleanup-shortcircuit.rs:12:29: 12:50
                                         // mir::Constant
                                         // + span: ui/cleanup-shortcircuit.rs:12:41: 12:48
                                         // + literal: Const { ty: fn(Args) -> Vec<String> {<Args as Iterator>::collect::<Vec<String>>}, val: Value(<ZST>) }
    }

    bb2: {
        _6 = &_1;                        // scope 1 at ui/cleanup-shortcircuit.rs:20:8: 20:18
        _5 = Vec::<String>::len(move _6) -> [return: bb6, unwind: bb13]; // scope 1 at ui/cleanup-shortcircuit.rs:20:8: 20:18
                                         // mir::Constant
                                         // + span: ui/cleanup-shortcircuit.rs:20:13: 20:16
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>) -> usize {Vec::<String>::len}, val: Value(<ZST>) }
    }

    bb3: {
        _3 = const false;                // scope 1 at ui/cleanup-shortcircuit.rs:20:8: 20:46
        goto -> bb5;                     // scope 1 at ui/cleanup-shortcircuit.rs:20:8: 20:46
    }

    bb4: {
        _10 = &_1;                       // scope 1 at ui/cleanup-shortcircuit.rs:20:27: 20:31
        _9 = <Vec<String> as Index<usize>>::index(move _10, const 1_usize) -> [return: bb7, unwind: bb13]; // scope 1 at ui/cleanup-shortcircuit.rs:20:27: 20:34
                                         // mir::Constant
                                         // + span: ui/cleanup-shortcircuit.rs:20:27: 20:34
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<String>, usize) -> &'a <Vec<String> as Index<usize>>::Output {<Vec<String> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb5: {
        switchInt(move _3) -> [0: bb11, otherwise: bb9]; // scope 1 at ui/cleanup-shortcircuit.rs:20:8: 20:46
    }

    bb6: {
        _4 = Ge(move _5, const 2_usize); // scope 1 at ui/cleanup-shortcircuit.rs:20:8: 20:23
        switchInt(move _4) -> [0: bb3, otherwise: bb4]; // scope 1 at ui/cleanup-shortcircuit.rs:20:8: 20:46
    }

    bb7: {
        _8 = _9;                         // scope 1 at ui/cleanup-shortcircuit.rs:20:27: 20:34
        _13 = const _;                   // scope 1 at ui/cleanup-shortcircuit.rs:20:38: 20:46
                                         // mir::Constant
                                         // + span: ui/cleanup-shortcircuit.rs:20:38: 20:46
                                         // + literal: Const { ty: &&str, val: Unevaluated(main, [], Some(promoted[0])) }
        _11 = _13;                       // scope 1 at ui/cleanup-shortcircuit.rs:20:38: 20:46
        _7 = <String as PartialEq<&str>>::eq(move _8, move _11) -> [return: bb8, unwind: bb13]; // scope 1 at ui/cleanup-shortcircuit.rs:20:27: 20:46
                                         // mir::Constant
                                         // + span: ui/cleanup-shortcircuit.rs:20:27: 20:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a String, &'b &str) -> bool {<String as PartialEq<&str>>::eq}, val: Value(<ZST>) }
    }

    bb8: {
        _3 = move _7;                    // scope 1 at ui/cleanup-shortcircuit.rs:20:8: 20:46
        goto -> bb5;                     // scope 1 at ui/cleanup-shortcircuit.rs:20:8: 20:46
    }

    bb9: {
        _12 = null_mut::<isize>() -> [return: bb10, unwind: bb13]; // scope 2 at ui/cleanup-shortcircuit.rs:22:19: 22:48
                                         // mir::Constant
                                         // + span: ui/cleanup-shortcircuit.rs:22:19: 22:46
                                         // + literal: Const { ty: fn() -> *mut isize {null_mut::<isize>}, val: Value(<ZST>) }
    }

    bb10: {
        (*_12) = const 0_isize;          // scope 2 at ui/cleanup-shortcircuit.rs:22:18: 22:52
        goto -> bb11;                    // scope 1 at ui/cleanup-shortcircuit.rs:20:5: 23:6
    }

    bb11: {
        drop(_1) -> bb12;                // scope 0 at ui/cleanup-shortcircuit.rs:24:1: 24:2
    }

    bb12: {
        return;                          // scope 0 at ui/cleanup-shortcircuit.rs:24:2: 24:2
    }

    bb13 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/cleanup-shortcircuit.rs:24:1: 24:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/cleanup-shortcircuit.rs:11:1: 24:2
    }
}

promoted[0] in main: &&str = {
    let mut _0: &&str;                   // return place in scope 0 at ui/cleanup-shortcircuit.rs:20:38: 20:46
    let mut _1: &str;                    // in scope 0 at ui/cleanup-shortcircuit.rs:20:38: 20:46

    bb0: {
        _1 = const "signal";             // scope 0 at ui/cleanup-shortcircuit.rs:20:38: 20:46
                                         // mir::Constant
                                         // + span: ui/cleanup-shortcircuit.rs:20:38: 20:46
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/cleanup-shortcircuit.rs:20:38: 20:46
        return;                          // scope 0 at ui/cleanup-shortcircuit.rs:20:38: 20:46
    }
}
