// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/max-min-classes.rs:13:1: 13:9>::sum(_1: &Foo) -> isize {
    debug self => _1;                    // in scope 0 at ui/max-min-classes.rs:14:16: 14:21
    let mut _0: isize;                   // return place in scope 0 at ui/max-min-classes.rs:14:26: 14:31
    let mut _2: isize;                   // in scope 0 at ui/max-min-classes.rs:15:9: 15:15
    let mut _3: isize;                   // in scope 0 at ui/max-min-classes.rs:15:18: 15:24
    let mut _4: (isize, bool);           // in scope 0 at ui/max-min-classes.rs:15:9: 15:24

    bb0: {
        _2 = ((*_1).0: isize);           // scope 0 at ui/max-min-classes.rs:15:9: 15:15
        _3 = ((*_1).1: isize);           // scope 0 at ui/max-min-classes.rs:15:18: 15:24
        _4 = CheckedAdd(_2, _3);         // scope 0 at ui/max-min-classes.rs:15:9: 15:24
        assert(!move (_4.1: bool), "attempt to compute `{} + {}`, which would overflow", move _2, move _3) -> bb1; // scope 0 at ui/max-min-classes.rs:15:9: 15:24
    }

    bb1: {
        _0 = move (_4.0: isize);         // scope 0 at ui/max-min-classes.rs:15:9: 15:24
        return;                          // scope 0 at ui/max-min-classes.rs:16:6: 16:6
    }
}

fn <impl at ui/max-min-classes.rs:19:1: 19:21>::product(_1: &Foo) -> isize {
    debug self => _1;                    // in scope 0 at ui/max-min-classes.rs:20:16: 20:21
    let mut _0: isize;                   // return place in scope 0 at ui/max-min-classes.rs:20:26: 20:31
    let mut _2: isize;                   // in scope 0 at ui/max-min-classes.rs:21:9: 21:15
    let mut _3: isize;                   // in scope 0 at ui/max-min-classes.rs:21:18: 21:24
    let mut _4: (isize, bool);           // in scope 0 at ui/max-min-classes.rs:21:9: 21:24

    bb0: {
        _2 = ((*_1).0: isize);           // scope 0 at ui/max-min-classes.rs:21:9: 21:15
        _3 = ((*_1).1: isize);           // scope 0 at ui/max-min-classes.rs:21:18: 21:24
        _4 = CheckedMul(_2, _3);         // scope 0 at ui/max-min-classes.rs:21:9: 21:24
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", move _2, move _3) -> bb1; // scope 0 at ui/max-min-classes.rs:21:9: 21:24
    }

    bb1: {
        _0 = move (_4.0: isize);         // scope 0 at ui/max-min-classes.rs:21:9: 21:24
        return;                          // scope 0 at ui/max-min-classes.rs:22:6: 22:6
    }
}

fn Foo(_1: isize, _2: isize) -> Foo {
    debug x => _1;                       // in scope 0 at ui/max-min-classes.rs:25:8: 25:9
    debug y => _2;                       // in scope 0 at ui/max-min-classes.rs:25:18: 25:19
    let mut _0: Foo;                     // return place in scope 0 at ui/max-min-classes.rs:25:31: 25:34
    let mut _3: isize;                   // in scope 0 at ui/max-min-classes.rs:26:14: 26:15
    let mut _4: isize;                   // in scope 0 at ui/max-min-classes.rs:26:20: 26:21

    bb0: {
        _3 = _1;                         // scope 0 at ui/max-min-classes.rs:26:14: 26:15
        _4 = _2;                         // scope 0 at ui/max-min-classes.rs:26:20: 26:21
        _0 = Foo { x: move _3, y: move _4 }; // scope 0 at ui/max-min-classes.rs:26:5: 26:23
        return;                          // scope 0 at ui/max-min-classes.rs:27:2: 27:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/max-min-classes.rs:29:15: 29:15
    let _1: Foo;                         // in scope 0 at ui/max-min-classes.rs:30:9: 30:12
    let _2: ();                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at ui/max-min-classes.rs:31:14: 31:21
    let mut _5: &[&str; 3];              // in scope 0 at ui/max-min-classes.rs:31:14: 31:21
    let _6: &[&str; 3];                  // in scope 0 at ui/max-min-classes.rs:31:14: 31:21
    let mut _7: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _8: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _9: &[core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let _10: [core::fmt::ArgumentV1<'_>; 2]; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
    let mut _11: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/max-min-classes.rs:31:23: 31:32
    let mut _12: &isize;                 // in scope 0 at ui/max-min-classes.rs:31:23: 31:32
    let _13: &isize;                     // in scope 0 at ui/max-min-classes.rs:31:23: 31:32
    let _14: isize;                      // in scope 0 at ui/max-min-classes.rs:31:23: 31:32
    let mut _15: &Foo;                   // in scope 0 at ui/max-min-classes.rs:31:23: 31:32
    let mut _16: core::fmt::ArgumentV1<'_>; // in scope 0 at ui/max-min-classes.rs:31:34: 31:47
    let mut _17: &isize;                 // in scope 0 at ui/max-min-classes.rs:31:34: 31:47
    let _18: &isize;                     // in scope 0 at ui/max-min-classes.rs:31:34: 31:47
    let _19: isize;                      // in scope 0 at ui/max-min-classes.rs:31:34: 31:47
    let mut _20: &Foo;                   // in scope 0 at ui/max-min-classes.rs:31:34: 31:47
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/max-min-classes.rs:30:9: 30:12
        let mut _21: &[&str; 3];         // in scope 1 at ui/max-min-classes.rs:31:14: 31:21
    }

    bb0: {
        _1 = Foo(const 3_isize, const 20_isize) -> bb1; // scope 0 at ui/max-min-classes.rs:30:15: 30:25
                                         // mir::Constant
                                         // + span: ui/max-min-classes.rs:30:15: 30:18
                                         // + literal: Const { ty: fn(isize, isize) -> Foo {Foo}, val: Value(<ZST>) }
    }

    bb1: {
        _21 = const _;                   // scope 1 at ui/max-min-classes.rs:31:14: 31:21
                                         // mir::Constant
                                         // + span: ui/max-min-classes.rs:31:14: 31:21
                                         // + literal: Const { ty: &[&str; 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _6 = _21;                        // scope 1 at ui/max-min-classes.rs:31:14: 31:21
        _5 = _6;                         // scope 1 at ui/max-min-classes.rs:31:14: 31:21
        _4 = move _5 as &[&str] (Pointer(Unsize)); // scope 1 at ui/max-min-classes.rs:31:14: 31:21
        _15 = &_1;                       // scope 1 at ui/max-min-classes.rs:31:23: 31:32
        _14 = Foo::sum(move _15) -> bb2; // scope 1 at ui/max-min-classes.rs:31:23: 31:32
                                         // mir::Constant
                                         // + span: ui/max-min-classes.rs:31:27: 31:30
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> isize {Foo::sum}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = &_14;                      // scope 1 at ui/max-min-classes.rs:31:23: 31:32
        _12 = _13;                       // scope 1 at ui/max-min-classes.rs:31:23: 31:32
        _11 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _12) -> bb3; // scope 1 at ui/max-min-classes.rs:31:23: 31:32
                                         // mir::Constant
                                         // + span: ui/max-min-classes.rs:31:23: 31:32
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _20 = &_1;                       // scope 1 at ui/max-min-classes.rs:31:34: 31:47
        _19 = <Foo as Product>::product(move _20) -> bb4; // scope 1 at ui/max-min-classes.rs:31:34: 31:47
                                         // mir::Constant
                                         // + span: ui/max-min-classes.rs:31:38: 31:45
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) -> isize {<Foo as Product>::product}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = &_19;                      // scope 1 at ui/max-min-classes.rs:31:34: 31:47
        _17 = _18;                       // scope 1 at ui/max-min-classes.rs:31:34: 31:47
        _16 = core::fmt::ArgumentV1::<'_>::new_display::<isize>(move _17) -> bb5; // scope 1 at ui/max-min-classes.rs:31:34: 31:47
                                         // mir::Constant
                                         // + span: ui/max-min-classes.rs:31:34: 31:47
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: for<'b> fn(&'b isize) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<isize>}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = [move _11, move _16];      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _9 = &_10;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _8 = _9;                         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _7 = move _8 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _7) -> bb6; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb6: {
        _2 = _print(move _3) -> bb7;     // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/max-min-classes.rs:32:2: 32:2
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];              // return place in scope 0 at ui/max-min-classes.rs:31:14: 31:21
    let mut _1: [&str; 3];               // in scope 0 at ui/max-min-classes.rs:31:14: 31:21

    bb0: {
        _1 = [const "", const " ", const "\n"]; // scope 0 at ui/max-min-classes.rs:31:14: 31:21
                                         // mir::Constant
                                         // + span: ui/max-min-classes.rs:31:14: 31:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/max-min-classes.rs:31:14: 31:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: ui/max-min-classes.rs:31:14: 31:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at ui/max-min-classes.rs:31:14: 31:21
        return;                          // scope 0 at ui/max-min-classes.rs:31:14: 31:21
    }
}
