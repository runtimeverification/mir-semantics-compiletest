// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/max-min-classes.rs:13:1: 13:9>::sum(_1: &Foo) -> isize {
    debug self => _1;
    let mut _0: isize;
    let mut _2: isize;
    let mut _3: isize;

    bb0: {
        _2 = ((*_1).0: isize);
        _3 = ((*_1).1: isize);
        _0 = Add(move _2, move _3);
        return;
    }
}

fn <impl at ui/max-min-classes.rs:19:1: 19:21>::product(_1: &Foo) -> isize {
    debug self => _1;
    let mut _0: isize;
    let mut _2: isize;
    let mut _3: isize;

    bb0: {
        _2 = ((*_1).0: isize);
        _3 = ((*_1).1: isize);
        _0 = Mul(move _2, move _3);
        return;
    }
}

fn Foo(_1: isize, _2: isize) -> Foo {
    debug x => _1;
    debug y => _2;
    let mut _0: Foo;

    bb0: {
        _0 = Foo { x: _1, y: _2 };
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let _2: ();
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 2];
    let _7: [core::fmt::rt::Argument<'_>; 2];
    let mut _8: core::fmt::rt::Argument<'_>;
    let _9: &isize;
    let _10: isize;
    let mut _11: &Foo;
    let mut _12: core::fmt::rt::Argument<'_>;
    let _13: &isize;
    let _14: isize;
    let mut _15: &Foo;
    scope 1 {
        debug foo => _1;
        let mut _16: &[&str; 3];
    }

    bb0: {
        _1 = Foo(const 3_isize, const 20_isize) -> [return: bb1, unwind continue];
    }

    bb1: {
        _16 = const _;
        _4 = _16 as &[&str] (Pointer(Unsize));
        _11 = &_1;
        _10 = Foo::sum(move _11) -> [return: bb2, unwind continue];
    }

    bb2: {
        _9 = &_10;
        _8 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_9) -> [return: bb3, unwind continue];
    }

    bb3: {
        _15 = &_1;
        _14 = <Foo as Product>::product(move _15) -> [return: bb4, unwind continue];
    }

    bb4: {
        _13 = &_14;
        _12 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_13) -> [return: bb5, unwind continue];
    }

    bb5: {
        _7 = [move _8, move _12];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb6, unwind continue];
    }

    bb6: {
        _2 = _print(move _3) -> [return: bb7, unwind continue];
    }

    bb7: {
        return;
    }
}

promoted[0] in main: &[&str; 3] = {
    let mut _0: &[&str; 3];
    let mut _1: [&str; 3];

    bb0: {
        _1 = [const "", const " ", const "\n"];
        _0 = &_1;
        return;
    }
}
