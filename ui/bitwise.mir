// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn target() -> () {
    let mut _0: ();
    let mut _1: (&usize, &usize);
    let _2: &usize;
    let _3: &usize;
    let mut _4: bool;
    let mut _5: bool;
    let mut _6: usize;
    let mut _7: usize;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &usize;
    let mut _12: &usize;
    scope 1 {
        debug left_val => _2;
        debug right_val => _3;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _11 = const _;
        _1 = (_12, _11);
        _2 = (_1.0: &usize);
        _3 = (_1.1: &usize);
        _6 = (*_2);
        _7 = (*_3);
        _5 = Eq(move _6, move _7);
        _4 = Not(move _5);
        switchInt(move _4) -> [0: bb2, otherwise: bb1];
    }

    bb1: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<usize, usize>(move _8, _2, _3, move _10) -> unwind continue;
    }

    bb2: {
        return;
    }
}

promoted[0] in target: &usize = {
    let mut _0: &usize;
    let mut _1: usize;

    bb0: {
        _1 = const 2305843009213693827_usize;
        _0 = &_1;
        return;
    }
}

promoted[1] in target: &usize = {
    let mut _0: &usize;
    let mut _1: usize;
    let mut _2: usize;

    bb0: {
        _2 = const -1000_isize as usize (IntToInt);
        _1 = Shr(move _2, const 3_usize);
        _0 = &_1;
        return;
    }
}

fn general() -> () {
    let mut _0: ();
    let mut _1: isize;
    let mut _3: isize;
    let mut _4: isize;
    let mut _5: isize;
    let mut _6: isize;
    let _7: ();
    let mut _8: std::fmt::Arguments<'_>;
    let mut _9: &[&str];
    let mut _10: &[core::fmt::rt::Argument<'_>];
    let _11: &[core::fmt::rt::Argument<'_>; 1];
    let _12: [core::fmt::rt::Argument<'_>; 1];
    let mut _13: core::fmt::rt::Argument<'_>;
    let _14: &isize;
    let _15: ();
    let mut _16: std::fmt::Arguments<'_>;
    let mut _17: &[&str];
    let mut _18: &[core::fmt::rt::Argument<'_>];
    let _19: &[core::fmt::rt::Argument<'_>; 1];
    let _20: [core::fmt::rt::Argument<'_>; 1];
    let mut _21: core::fmt::rt::Argument<'_>;
    let _22: &isize;
    let mut _23: (&isize, &isize);
    let mut _24: &isize;
    let mut _27: bool;
    let mut _28: bool;
    let mut _29: isize;
    let mut _30: isize;
    let _32: !;
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _34: (&isize, &isize);
    let mut _35: &isize;
    let mut _38: bool;
    let mut _39: bool;
    let mut _40: isize;
    let mut _41: isize;
    let _43: !;
    let mut _44: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _45: (&isize, &isize);
    let mut _48: bool;
    let mut _49: bool;
    let mut _50: isize;
    let mut _51: isize;
    let _53: !;
    let mut _54: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _55: (&isize, &isize);
    let mut _58: bool;
    let mut _59: bool;
    let mut _60: isize;
    let mut _61: isize;
    let _63: !;
    let mut _64: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _65: (&isize, &isize);
    let mut _68: bool;
    let mut _69: bool;
    let mut _70: isize;
    let mut _71: isize;
    let _73: !;
    let mut _74: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _75: (&isize, &isize);
    let mut _78: bool;
    let mut _79: bool;
    let mut _80: isize;
    let mut _81: isize;
    let _83: !;
    let mut _84: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _85: (&i32, &i32);
    let mut _88: bool;
    let mut _89: bool;
    let mut _90: i32;
    let mut _91: i32;
    let _93: !;
    let mut _94: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _95: (&isize, &isize);
    let mut _98: bool;
    let mut _99: bool;
    let mut _100: isize;
    let mut _101: isize;
    let _103: !;
    let mut _104: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug a => _1;
        let mut _2: isize;
        scope 2 {
            debug b => _2;
            let _25: &isize;
            let _26: &isize;
            let _36: &isize;
            let _37: &isize;
            let _46: &isize;
            let _47: &isize;
            let _56: &isize;
            let _57: &isize;
            let _66: &isize;
            let _67: &isize;
            let _76: &isize;
            let _77: &isize;
            let _86: &i32;
            let _87: &i32;
            let _96: &isize;
            let _97: &isize;
            let mut _105: &isize;
            let mut _106: &isize;
            let mut _107: &i32;
            let mut _108: &i32;
            let mut _109: &isize;
            let mut _110: &isize;
            let mut _111: &isize;
            let mut _112: &isize;
            let mut _113: &isize;
            let mut _114: &isize;
            let mut _115: &isize;
            let mut _116: &isize;
            let mut _117: &isize;
            let mut _118: &isize;
            let mut _119: &[&str; 2];
            let mut _120: &[&str; 2];
            scope 3 {
                debug left_val => _25;
                debug right_val => _26;
                let _31: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _31;
                }
            }
            scope 5 {
                debug left_val => _36;
                debug right_val => _37;
                let _42: core::panicking::AssertKind;
                scope 6 {
                    debug kind => _42;
                }
            }
            scope 7 {
                debug left_val => _46;
                debug right_val => _47;
                let _52: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _52;
                }
            }
            scope 9 {
                debug left_val => _56;
                debug right_val => _57;
                let _62: core::panicking::AssertKind;
                scope 10 {
                    debug kind => _62;
                }
            }
            scope 11 {
                debug left_val => _66;
                debug right_val => _67;
                let _72: core::panicking::AssertKind;
                scope 12 {
                    debug kind => _72;
                }
            }
            scope 13 {
                debug left_val => _76;
                debug right_val => _77;
                let _82: core::panicking::AssertKind;
                scope 14 {
                    debug kind => _82;
                }
            }
            scope 15 {
                debug left_val => _86;
                debug right_val => _87;
                let _92: core::panicking::AssertKind;
                scope 16 {
                    debug kind => _92;
                }
            }
            scope 17 {
                debug left_val => _96;
                debug right_val => _97;
                let _102: core::panicking::AssertKind;
                scope 18 {
                    debug kind => _102;
                }
            }
        }
    }

    bb0: {
        _1 = const 1_isize;
        _2 = const 2_isize;
        _3 = _2;
        _1 = BitXor(_1, move _3);
        _4 = _1;
        _2 = BitXor(_2, move _4);
        _5 = _1;
        _6 = _2;
        _1 = BitXor(move _5, move _6);
        _120 = const _;
        _9 = _120 as &[&str] (Pointer(Unsize));
        _14 = &_1;
        _13 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_14) -> [return: bb1, unwind continue];
    }

    bb1: {
        _12 = [move _13];
        _11 = &_12;
        _10 = _11 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _8 = Arguments::<'_>::new_v1(move _9, move _10) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = _print(move _8) -> [return: bb3, unwind continue];
    }

    bb3: {
        _119 = const _;
        _17 = _119 as &[&str] (Pointer(Unsize));
        _22 = &_2;
        _21 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_22) -> [return: bb4, unwind continue];
    }

    bb4: {
        _20 = [move _21];
        _19 = &_20;
        _18 = _19 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _16 = Arguments::<'_>::new_v1(move _17, move _18) -> [return: bb5, unwind continue];
    }

    bb5: {
        _15 = _print(move _16) -> [return: bb6, unwind continue];
    }

    bb6: {
        _24 = &_2;
        _118 = const _;
        _23 = (move _24, _118);
        _25 = (_23.0: &isize);
        _26 = (_23.1: &isize);
        _29 = (*_25);
        _30 = (*_26);
        _28 = Eq(move _29, move _30);
        _27 = Not(move _28);
        switchInt(move _27) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _31 = core::panicking::AssertKind::Eq;
        _33 = Option::<Arguments<'_>>::None;
        _32 = core::panicking::assert_failed::<isize, isize>(move _31, _25, _26, move _33) -> unwind continue;
    }

    bb8: {
        _35 = &_1;
        _117 = const _;
        _34 = (move _35, _117);
        _36 = (_34.0: &isize);
        _37 = (_34.1: &isize);
        _40 = (*_36);
        _41 = (*_37);
        _39 = Eq(move _40, move _41);
        _38 = Not(move _39);
        switchInt(move _38) -> [0: bb10, otherwise: bb9];
    }

    bb9: {
        _42 = core::panicking::AssertKind::Eq;
        _44 = Option::<Arguments<'_>>::None;
        _43 = core::panicking::assert_failed::<isize, isize>(move _42, _36, _37, move _44) -> unwind continue;
    }

    bb10: {
        _116 = const _;
        _115 = const _;
        _45 = (_116, _115);
        _46 = (_45.0: &isize);
        _47 = (_45.1: &isize);
        _50 = (*_46);
        _51 = (*_47);
        _49 = Eq(move _50, move _51);
        _48 = Not(move _49);
        switchInt(move _48) -> [0: bb12, otherwise: bb11];
    }

    bb11: {
        _52 = core::panicking::AssertKind::Eq;
        _54 = Option::<Arguments<'_>>::None;
        _53 = core::panicking::assert_failed::<isize, isize>(move _52, _46, _47, move _54) -> unwind continue;
    }

    bb12: {
        _114 = const _;
        _113 = const _;
        _55 = (_114, _113);
        _56 = (_55.0: &isize);
        _57 = (_55.1: &isize);
        _60 = (*_56);
        _61 = (*_57);
        _59 = Eq(move _60, move _61);
        _58 = Not(move _59);
        switchInt(move _58) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _62 = core::panicking::AssertKind::Eq;
        _64 = Option::<Arguments<'_>>::None;
        _63 = core::panicking::assert_failed::<isize, isize>(move _62, _56, _57, move _64) -> unwind continue;
    }

    bb14: {
        _112 = const _;
        _111 = const _;
        _65 = (_112, _111);
        _66 = (_65.0: &isize);
        _67 = (_65.1: &isize);
        _70 = (*_66);
        _71 = (*_67);
        _69 = Eq(move _70, move _71);
        _68 = Not(move _69);
        switchInt(move _68) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _72 = core::panicking::AssertKind::Eq;
        _74 = Option::<Arguments<'_>>::None;
        _73 = core::panicking::assert_failed::<isize, isize>(move _72, _66, _67, move _74) -> unwind continue;
    }

    bb16: {
        _110 = const _;
        _109 = const _;
        _75 = (_110, _109);
        _76 = (_75.0: &isize);
        _77 = (_75.1: &isize);
        _80 = (*_76);
        _81 = (*_77);
        _79 = Eq(move _80, move _81);
        _78 = Not(move _79);
        switchInt(move _78) -> [0: bb18, otherwise: bb17];
    }

    bb17: {
        _82 = core::panicking::AssertKind::Eq;
        _84 = Option::<Arguments<'_>>::None;
        _83 = core::panicking::assert_failed::<isize, isize>(move _82, _76, _77, move _84) -> unwind continue;
    }

    bb18: {
        _108 = const _;
        _107 = const _;
        _85 = (_108, _107);
        _86 = (_85.0: &i32);
        _87 = (_85.1: &i32);
        _90 = (*_86);
        _91 = (*_87);
        _89 = Eq(move _90, move _91);
        _88 = Not(move _89);
        switchInt(move _88) -> [0: bb20, otherwise: bb19];
    }

    bb19: {
        _92 = core::panicking::AssertKind::Eq;
        _94 = Option::<Arguments<'_>>::None;
        _93 = core::panicking::assert_failed::<i32, i32>(move _92, _86, _87, move _94) -> unwind continue;
    }

    bb20: {
        _106 = const _;
        _105 = const _;
        _95 = (_106, _105);
        _96 = (_95.0: &isize);
        _97 = (_95.1: &isize);
        _100 = (*_96);
        _101 = (*_97);
        _99 = Eq(move _100, move _101);
        _98 = Not(move _99);
        switchInt(move _98) -> [0: bb22, otherwise: bb21];
    }

    bb21: {
        _102 = core::panicking::AssertKind::Eq;
        _104 = Option::<Arguments<'_>>::None;
        _103 = core::panicking::assert_failed::<isize, isize>(move _102, _96, _97, move _104) -> unwind continue;
    }

    bb22: {
        return;
    }
}

promoted[0] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 255_isize;
        _0 = &_1;
        return;
    }
}

promoted[1] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = BitOr(const 170_isize, const 85_isize);
        _0 = &_1;
        return;
    }
}

promoted[2] in general: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = const -4_i32;
        _0 = &_1;
        return;
    }
}

promoted[3] in general: &i32 = {
    let mut _0: &i32;
    let mut _1: i32;

    bb0: {
        _1 = Shr(const -16_i32, const 2_i32);
        _0 = &_1;
        return;
    }
}

promoted[4] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 15_isize;
        _0 = &_1;
        return;
    }
}

promoted[5] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = Shr(const 240_isize, const 4_i32);
        _0 = &_1;
        return;
    }
}

promoted[6] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 240_isize;
        _0 = &_1;
        return;
    }
}

promoted[7] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = Shl(const 15_isize, const 4_i32);
        _0 = &_1;
        return;
    }
}

promoted[8] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 255_isize;
        _0 = &_1;
        return;
    }
}

promoted[9] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = BitOr(const 240_isize, const 15_isize);
        _0 = &_1;
        return;
    }
}

promoted[10] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 15_isize;
        _0 = &_1;
        return;
    }
}

promoted[11] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;
    let mut _2: isize;

    bb0: {
        _2 = Not(const 240_isize);
        _1 = BitAnd(move _2, const 255_isize);
        _0 = &_1;
        return;
    }
}

promoted[12] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 2_isize;
        _0 = &_1;
        return;
    }
}

promoted[13] in general: &isize = {
    let mut _0: &isize;
    let mut _1: isize;

    bb0: {
        _1 = const 1_isize;
        _0 = &_1;
        return;
    }
}

promoted[14] in general: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

promoted[15] in general: &[&str; 2] = {
    let mut _0: &[&str; 2];
    let mut _1: [&str; 2];

    bb0: {
        _1 = [const "", const "\n"];
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let _2: ();

    bb0: {
        _1 = general() -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = target() -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}
