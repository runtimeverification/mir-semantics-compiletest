// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn foo() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/no-core-2.rs:12:10: 12:10
    let mut _1: std::slice::Iter<'_, ()>; // in scope 0 at ui/no-core-2.rs:13:14: 13:19
    let mut _2: &[(); 1];                // in scope 0 at ui/no-core-2.rs:13:14: 13:19
    let mut _3: std::slice::Iter<'_, ()>; // in scope 0 at ui/no-core-2.rs:13:14: 13:19
    let mut _4: std::option::Option<&()>; // in scope 0 at ui/no-core-2.rs:13:14: 13:19
    let mut _5: &mut std::slice::Iter<'_, ()>; // in scope 0 at ui/no-core-2.rs:13:14: 13:19
    let mut _6: &mut std::slice::Iter<'_, ()>; // in scope 0 at ui/no-core-2.rs:13:14: 13:19
    let mut _7: isize;                   // in scope 0 at ui/no-core-2.rs:13:5: 13:22
    let mut _8: &[(); 1];                // in scope 0 at ui/no-core-2.rs:13:14: 13:19
    scope 1 {
        debug iter => _3;                // in scope 1 at ui/no-core-2.rs:13:14: 13:19
    }

    bb0: {
        _8 = const _;                    // scope 0 at ui/no-core-2.rs:13:14: 13:19
                                         // mir::Constant
                                         // + span: ui/no-core-2.rs:13:14: 13:19
                                         // + literal: Const { ty: &[(); 1], val: Unevaluated(foo, [], Some(promoted[0])) }
        _2 = _8;                         // scope 0 at ui/no-core-2.rs:13:14: 13:19
        _1 = <&[(); 1] as IntoIterator>::into_iter(move _2) -> bb1; // scope 0 at ui/no-core-2.rs:13:14: 13:19
                                         // mir::Constant
                                         // + span: ui/no-core-2.rs:13:14: 13:19
                                         // + literal: Const { ty: fn(&[(); 1]) -> <&[(); 1] as IntoIterator>::IntoIter {<&[(); 1] as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = move _1;                    // scope 0 at ui/no-core-2.rs:13:14: 13:19
        goto -> bb2;                     // scope 1 at ui/no-core-2.rs:13:5: 13:22
    }

    bb2: {
        _6 = &mut _3;                    // scope 1 at ui/no-core-2.rs:13:14: 13:19
        _5 = &mut (*_6);                 // scope 1 at ui/no-core-2.rs:13:14: 13:19
        _4 = <std::slice::Iter<'_, ()> as Iterator>::next(move _5) -> bb3; // scope 1 at ui/no-core-2.rs:13:14: 13:19
                                         // mir::Constant
                                         // + span: ui/no-core-2.rs:13:14: 13:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, ()>) -> std::option::Option<<std::slice::Iter<'_, ()> as Iterator>::Item> {<std::slice::Iter<'_, ()> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = discriminant(_4);           // scope 1 at ui/no-core-2.rs:13:14: 13:19
        switchInt(move _7) -> [0: bb5, 1: bb2, otherwise: bb4]; // scope 1 at ui/no-core-2.rs:13:14: 13:19
    }

    bb4: {
        unreachable;                     // scope 1 at ui/no-core-2.rs:13:14: 13:19
    }

    bb5: {
        return;                          // scope 0 at ui/no-core-2.rs:14:2: 14:2
    }
}

promoted[0] in foo: &[(); 1] = {
    let mut _0: &[(); 1];                // return place in scope 0 at ui/no-core-2.rs:13:14: 13:19
    let mut _1: [(); 1];                 // in scope 0 at ui/no-core-2.rs:13:15: 13:19
    let mut _2: ();                      // in scope 0 at ui/no-core-2.rs:13:16: 13:18

    bb0: {
        _2 = ();                         // scope 0 at ui/no-core-2.rs:13:16: 13:18
        _1 = [move _2];                  // scope 0 at ui/no-core-2.rs:13:15: 13:19
        _0 = &_1;                        // scope 0 at ui/no-core-2.rs:13:14: 13:19
        return;                          // scope 0 at ui/no-core-2.rs:13:14: 13:19
    }
}

fn bar() -> std::option::Option<()> {
    let mut _0: std::option::Option<()>; // return place in scope 0 at ui/no-core-2.rs:16:13: 16:23
    let mut _1: std::ops::ControlFlow<std::option::Option<std::convert::Infallible>, std::option::Option<()>>; // in scope 0 at ui/no-core-2.rs:17:5: 17:10
    let mut _2: std::option::Option<std::option::Option<()>>; // in scope 0 at ui/no-core-2.rs:17:5: 17:9
    let mut _3: isize;                   // in scope 0 at ui/no-core-2.rs:17:9: 17:10
    let _4: std::option::Option<std::convert::Infallible>; // in scope 0 at ui/no-core-2.rs:17:9: 17:10
    let mut _5: std::option::Option<std::convert::Infallible>; // in scope 0 at ui/no-core-2.rs:17:9: 17:10
    let _6: std::option::Option<()>;     // in scope 0 at ui/no-core-2.rs:17:5: 17:10
    scope 1 {
        debug residual => _4;            // in scope 1 at ui/no-core-2.rs:17:9: 17:10
        scope 2 {
        }
    }
    scope 3 {
        debug val => _6;                 // in scope 3 at ui/no-core-2.rs:17:5: 17:10
        scope 4 {
        }
    }

    bb0: {
        _2 = const std::option::Option::<std::option::Option<()>>::None; // scope 0 at ui/no-core-2.rs:17:5: 17:9
                                         // mir::Constant
                                         // + span: ui/no-core-2.rs:17:5: 17:9
                                         // + literal: Const { ty: std::option::Option<std::option::Option<()>>, val: Value(Scalar(0x02)) }
        _1 = <std::option::Option<std::option::Option<()>> as Try>::branch(move _2) -> bb1; // scope 0 at ui/no-core-2.rs:17:5: 17:10
                                         // mir::Constant
                                         // + span: ui/no-core-2.rs:17:5: 17:10
                                         // + literal: Const { ty: fn(std::option::Option<std::option::Option<()>>) -> ControlFlow<<std::option::Option<std::option::Option<()>> as Try>::Residual, <std::option::Option<std::option::Option<()>> as Try>::Output> {<std::option::Option<std::option::Option<()>> as Try>::branch}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = discriminant(_1);           // scope 0 at ui/no-core-2.rs:17:5: 17:10
        switchInt(move _3) -> [0: bb2, 1: bb4, otherwise: bb3]; // scope 0 at ui/no-core-2.rs:17:5: 17:10
    }

    bb2: {
        _6 = ((_1 as Continue).0: std::option::Option<()>); // scope 0 at ui/no-core-2.rs:17:5: 17:10
        _0 = _6;                         // scope 4 at ui/no-core-2.rs:17:5: 17:10
        goto -> bb5;                     // scope 0 at ui/no-core-2.rs:18:2: 18:2
    }

    bb3: {
        unreachable;                     // scope 0 at ui/no-core-2.rs:17:5: 17:10
    }

    bb4: {
        _0 = <std::option::Option<()> as FromResidual<std::option::Option<Infallible>>>::from_residual(move _5) -> bb5; // scope 2 at ui/no-core-2.rs:17:5: 17:10
                                         // mir::Constant
                                         // + span: ui/no-core-2.rs:17:9: 17:10
                                         // + literal: Const { ty: fn(std::option::Option<Infallible>) -> std::option::Option<()> {<std::option::Option<()> as FromResidual<std::option::Option<Infallible>>>::from_residual}, val: Value(<ZST>) }
    }

    bb5: {
        return;                          // scope 0 at ui/no-core-2.rs:18:2: 18:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/no-core-2.rs:20:11: 20:11

    bb0: {
        return;                          // scope 0 at ui/no-core-2.rs:20:13: 20:13
    }
}
