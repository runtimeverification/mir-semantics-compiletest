// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/issue-89352.rs:16:1: 16:69>::iter(_1: &Wrapper<'_, T, A>) -> () {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/issue-89352.rs:21:17: 21:25
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/issue-89352.rs:21:30: 21:44
    let _2: <A as GenAssoc<T>>::Iter<'_>; // in scope 0 at ui/generic-associated-types/issue-89352.rs:22:13: 22:14
    let mut _3: <A as GenAssoc<T>>::Iter<'_>; // in scope 0 at ui/generic-associated-types/issue-89352.rs:22:40: 22:54
    let mut _4: &<A as GenAssoc<T>>::Iter<'_>; // in scope 0 at ui/generic-associated-types/issue-89352.rs:22:40: 22:54
    scope 1 {
        debug a => _2;                   // in scope 1 at ui/generic-associated-types/issue-89352.rs:22:13: 22:14
    }

    bb0: {
        _4 = &((*_1).0: <A as GenAssoc<T>>::Iter<'_>); // scope 0 at ui/generic-associated-types/issue-89352.rs:22:40: 22:54
        _3 = <<A as GenAssoc<T>>::Iter<'_> as Clone>::clone(move _4) -> bb1; // scope 0 at ui/generic-associated-types/issue-89352.rs:22:40: 22:54
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/issue-89352.rs:22:47: 22:52
                                         // + literal: Const { ty: for<'a> fn(&'a <A as GenAssoc<T>>::Iter<'_>) -> <A as GenAssoc<T>>::Iter<'_> {<<A as GenAssoc<T>>::Iter<'_> as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = <A as GenAssoc<T>>::reborrow::<'_, '_>(move _3) -> bb2; // scope 0 at ui/generic-associated-types/issue-89352.rs:22:17: 22:55
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/issue-89352.rs:22:17: 22:39
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(<A as GenAssoc<T>>::Iter<'_>) -> <A as GenAssoc<T>>::Iter<'_> {<A as GenAssoc<T>>::reborrow::<'_, '_>}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_2) -> bb3;                 // scope 0 at ui/generic-associated-types/issue-89352.rs:23:5: 23:6
    }

    bb3: {
        return;                          // scope 0 at ui/generic-associated-types/issue-89352.rs:23:6: 23:6
    }
}

fn <impl at ui/generic-associated-types/issue-89352.rs:16:1: 16:69>::reborrow(_1: ()) -> () {
    debug iter => _1;                    // in scope 0 at ui/generic-associated-types/issue-89352.rs:25:40: 25:44
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/issue-89352.rs:25:68: 25:86

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/issue-89352.rs:27:6: 27:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/issue-89352.rs:30:11: 30:11

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/issue-89352.rs:30:13: 30:13
    }
}
