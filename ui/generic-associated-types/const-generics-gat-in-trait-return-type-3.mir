// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:10:34: 10:35

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:10:34: 10:35
        return;                          // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:10:34: 10:35
    }
}

<impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:13:1: 13:16>::Assoc::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:14:39: 14:40

    bb0: {
        _0 = const N;                    // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:14:39: 14:40
        return;                          // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:14:39: 14:40
    }
}

fn <impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:17:1: 17:16>::foo(_1: &()) -> [(); 3] {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:18:12: 18:17
    let mut _0: [(); 3];                 // return place in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:18:22: 18:36

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:20:6: 20:6
    }
}

<impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:17:1: 17:16>::foo::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:18:34: 18:35

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:18:34: 18:35
        return;                          // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:18:34: 18:35
    }
}

<impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:17:1: 17:16>::foo::{constant#1}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:19:14: 19:15

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:19:14: 19:15
        return;                          // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:19:14: 19:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:23:11: 23:11
    let mut _1: (&[(); 3], &[(); 3]);    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &[(); 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: [(); 3];                     // in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
    let mut _4: &();                     // in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
    let mut _5: &[(); 3];                // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _6: &[(); 3];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _7: &[(); 3];                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _9: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _10: &[(); 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _11: &[(); 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _13: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _14: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _15: &[(); 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _16: &[(); 3];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _17: &[(); 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _18: &[(); 3];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _19: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _20: &[(); 3];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _21: &();                    // in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
    scope 1 {
        debug left_val => _6;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _7;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _12: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _12;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _21 = const _;                   // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _21;                        // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
        _3 = <() as Foo>::foo(move _4) -> bb1; // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:19: 24:22
                                         // + literal: Const { ty: for<'a> fn(&'a ()) -> <() as Bar>::Assoc<3> {<() as Foo>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _20 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[(); 3], val: Unevaluated(main, [], Some(promoted[0])) }
        _5 = _20;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _5);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _6 = (_1.0: &[(); 3]);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _7 = (_1.1: &[(); 3]);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _10 = _6;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _11 = _7;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _9 = <[(); 3] as PartialEq>::eq(move _10, move _11) -> bb2; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [(); 3], &'b [(); 3]) -> bool {<[(); 3] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Not(move _9);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _8) -> [0: bb4, otherwise: bb3]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb3: {
        _12 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _14 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _16 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _15 = _16;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _18 = _7;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _17 = _18;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _19 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _13 = core::panicking::assert_failed::<[(); 3], [(); 3]>(move _14, move _15, move _17, move _19); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [(); 3], &'b [(); 3], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[(); 3], [(); 3]>}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:25:2: 25:2
    }
}

promoted[0] in main: &[(); 3] = {
    let mut _0: &[(); 3];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [(); 3];                 // in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:26: 24:33
    let mut _2: ();                      // in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:27: 24:29

    bb0: {
        _2 = ();                         // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:27: 24:29
        _1 = [move _2; 3];               // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:26: 24:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
    let mut _1: ();                      // in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:18

    bb0: {
        _1 = ();                         // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:18
        _0 = &_1;                        // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
        return;                          // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:16: 24:24
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:31: 24:32

    bb0: {
        _0 = const 3_usize;              // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:31: 24:32
        return;                          // scope 0 at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:24:31: 24:32
    }
}
