// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
Foo::foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

<impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:13:1: 13:16>::Assoc::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const N;
        return;
    }
}

fn <impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:17:1: 17:16>::foo(_1: &()) -> [(); 3] {
    debug self => _1;
    let mut _0: [(); 3];

    bb0: {
        return;
    }
}

<impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:17:1: 17:16>::foo::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

<impl at ui/generic-associated-types/const-generics-gat-in-trait-return-type-3.rs:17:1: 17:16>::foo::{constant#1}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&[(); 3], &[(); 3]);
    let mut _2: &[(); 3];
    let _3: [(); 3];
    let _4: &[(); 3];
    let _5: &[(); 3];
    let mut _6: bool;
    let mut _7: bool;
    let _9: !;
    let mut _10: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _11: &[(); 3];
    let mut _12: &();
    scope 1 {
        debug left_val => _4;
        debug right_val => _5;
        let _8: core::panicking::AssertKind;
        scope 2 {
            debug kind => _8;
        }
    }

    bb0: {
        _12 = const _;
        _3 = <() as Foo>::foo(_12) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _11 = const _;
        _1 = (move _2, _11);
        _4 = (_1.0: &[(); 3]);
        _5 = (_1.1: &[(); 3]);
        _7 = <[(); 3] as PartialEq>::eq(_4, _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Not(move _7);
        switchInt(move _6) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _8 = core::panicking::AssertKind::Eq;
        _10 = Option::<Arguments<'_>>::None;
        _9 = core::panicking::assert_failed::<[(); 3], [(); 3]>(move _8, _4, _5, move _10) -> unwind continue;
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &[(); 3] = {
    let mut _0: &[(); 3];
    let mut _1: [(); 3];
    let mut _2: ();

    bb0: {
        _2 = ();
        _1 = [move _2; 3];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;

    bb0: {
        _0 = const 3_usize;
        return;
    }
}
