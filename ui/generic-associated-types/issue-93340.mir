// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn cmp_eq(_1: <A as Scalar>::RefType<'_>, _2: <B as Scalar>::RefType<'_>) -> O {
    debug a => _1;                       // in scope 0 at ui/generic-associated-types/issue-93340.rs:9:52: 9:53
    debug b => _2;                       // in scope 0 at ui/generic-associated-types/issue-93340.rs:9:71: 9:72
    let mut _0: O;                       // return place in scope 0 at ui/generic-associated-types/issue-93340.rs:9:93: 9:94
    let mut _3: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56

    bb0: {
        _3 = core::panicking::panic(const "not yet implemented") -> bb1; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:56
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:9: 773:33
                                         // + literal: Const { ty: fn(&'static str) -> ! {core::panicking::panic}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:773:34: 773:55
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }

    bb1 (cleanup): {
        drop(_2) -> bb2;                 // scope 0 at ui/generic-associated-types/issue-93340.rs:11:1: 11:2
    }

    bb2 (cleanup): {
        drop(_1) -> bb3;                 // scope 0 at ui/generic-associated-types/issue-93340.rs:11:1: 11:2
    }

    bb3 (cleanup): {
        resume;                          // scope 0 at ui/generic-associated-types/issue-93340.rs:9:1: 11:2
    }
}

fn build_expression() -> impl for<'a, 'b> Fn(<A as Scalar>::RefType<'a>, <B as Scalar>::RefType<'b>) -> O {
    let mut _0: impl for<'a, 'b> Fn(<A as Scalar>::RefType<'a>, <B as Scalar>::RefType<'b>) -> O; // return place in scope 0 at ui/generic-associated-types/issue-93340.rs:14:6: 14:50

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/issue-93340.rs:16:2: 16:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/issue-93340.rs:18:11: 18:11

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/issue-93340.rs:18:13: 18:13
    }
}
