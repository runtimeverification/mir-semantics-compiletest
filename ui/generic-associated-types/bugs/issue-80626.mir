// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/bugs/issue-80626.rs:12:11: 12:11

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/bugs/issue-80626.rs:12:13: 12:13
    }
}

fn LinkedList::Next(_1: <A as Allocator>::Allocated<LinkedList<A>>) -> LinkedList<A> {
    let mut _0: LinkedList<A>;           // return place in scope 0 at ui/generic-associated-types/bugs/issue-80626.rs:9:5: 9:9

    bb0: {
        _0 = LinkedList::<A>::Next(move _1); // scope 0 at ui/generic-associated-types/bugs/issue-80626.rs:9:5: 9:9
        return;                          // scope 0 at ui/generic-associated-types/bugs/issue-80626.rs:9:5: 9:9
    }
}

// MIR FOR CTFE
fn LinkedList::Next(_1: <A as Allocator>::Allocated<LinkedList<A>>) -> LinkedList<A> {
    let mut _0: LinkedList<A>;           // return place in scope 0 at ui/generic-associated-types/bugs/issue-80626.rs:9:5: 9:9

    bb0: {
        _0 = LinkedList::<A>::Next(move _1); // scope 0 at ui/generic-associated-types/bugs/issue-80626.rs:9:5: 9:9
        return;                          // scope 0 at ui/generic-associated-types/bugs/issue-80626.rs:9:5: 9:9
    }
}
