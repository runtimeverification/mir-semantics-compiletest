// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/issue-85921.rs:9:1: 9:18>::with_assoc(_1: impl FnOnce(Self::Assoc<'_>)) -> () {
    debug f => _1;                       // in scope 0 at ui/generic-associated-types/issue-85921.rs:12:19: 12:20
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/issue-85921.rs:12:52: 12:52
    let mut _2: impl FnOnce(Self::Assoc<'_>); // in scope 0 at ui/generic-associated-types/issue-85921.rs:13:9: 13:10
    let mut _3: (i32,);                  // in scope 0 at ui/generic-associated-types/issue-85921.rs:13:9: 13:16

    bb0: {
        _2 = move _1;                    // scope 0 at ui/generic-associated-types/issue-85921.rs:13:9: 13:10
        _3 = const (5_i32,);             // scope 0 at ui/generic-associated-types/issue-85921.rs:13:9: 13:16
        _0 = <impl FnOnce(Self::Assoc<'_>) as FnOnce<(i32,)>>::call_once(move _2, move _3) -> bb1; // scope 0 at ui/generic-associated-types/issue-85921.rs:13:9: 13:16
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/issue-85921.rs:13:9: 13:10
                                         // + literal: Const { ty: extern "rust-call" fn(impl FnOnce(Self::Assoc<'_>), (i32,)) -> <impl FnOnce(Self::Assoc<'_>) as FnOnce<(i32,)>>::Output {<impl FnOnce(Self::Assoc<'_>) as FnOnce<(i32,)>>::call_once}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/issue-85921.rs:14:6: 14:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/issue-85921.rs:17:11: 17:11

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/issue-85921.rs:17:13: 17:13
    }
}
