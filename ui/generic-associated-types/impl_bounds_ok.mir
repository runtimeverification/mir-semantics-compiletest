// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/impl_bounds_ok.rs:11:10: 11:15>::clone(_1: &Fooy) -> Fooy {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:11:10: 11:15
    let mut _0: Fooy;                    // return place in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:11:10: 11:15

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:11:15: 11:15
    }
}

fn <impl at ui/generic-associated-types/impl_bounds_ok.rs:20:10: 20:15>::clone(_1: &Fooer<T>) -> Fooer<T> {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:20:10: 20:15
    let mut _0: Fooer<T>;                // return place in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:20:10: 20:15
    let mut _2: T;                       // in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:17: 21:18
    let mut _3: &T;                      // in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:17: 21:18
    let _4: &T;                          // in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:17: 21:18

    bb0: {
        _4 = &((*_1).0: T);              // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:17: 21:18
        _3 = _4;                         // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:17: 21:18
        _2 = <T as Clone>::clone(move _3) -> bb1; // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:17: 21:18
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/impl_bounds_ok.rs:21:17: 21:18
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> T {<T as Clone>::clone}, val: Value(<ZST>) }
    }

    bb1: {
        _0 = Fooer::<T>(move _2);        // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:20:10: 20:15
        return;                          // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:20:15: 20:15
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:29:11: 29:11

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:29:13: 29:13
    }
}

fn Fooer(_1: T) -> Fooer<T> {
    let mut _0: Fooer<T>;                // return place in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:1: 21:16

    bb0: {
        _0 = Fooer::<T>(move _1);        // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:1: 21:16
        return;                          // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:1: 21:16
    }
}

// MIR FOR CTFE
fn Fooer(_1: T) -> Fooer<T> {
    let mut _0: Fooer<T>;                // return place in scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:1: 21:16

    bb0: {
        _0 = Fooer::<T>(move _1);        // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:1: 21:16
        return;                          // scope 0 at ui/generic-associated-types/impl_bounds_ok.rs:21:1: 21:16
    }
}
