// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn wrap(_1: &<T as Trait>::Ref<'_>) -> RefRef<'_, T> {
    debug reff => _1;                    // in scope 0 at ui/generic-associated-types/issue-81487.rs:13:23: 13:27
    let mut _0: RefRef<'_, T>;           // return place in scope 0 at ui/generic-associated-types/issue-81487.rs:13:59: 13:72
    let mut _2: &<T as Trait>::Ref<'_>;  // in scope 0 at ui/generic-associated-types/issue-81487.rs:14:12: 14:16

    bb0: {
        _2 = _1;                         // scope 0 at ui/generic-associated-types/issue-81487.rs:14:12: 14:16
        _0 = RefRef::<'_, T>(move _2);   // scope 0 at ui/generic-associated-types/issue-81487.rs:14:5: 14:17
        return;                          // scope 0 at ui/generic-associated-types/issue-81487.rs:15:2: 15:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/issue-81487.rs:17:11: 17:11

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/issue-81487.rs:17:13: 17:13
    }
}

fn RefRef(_1: &<T as Trait>::Ref<'_>) -> RefRef<'_, T> {
    let mut _0: RefRef<'_, T>;           // return place in scope 0 at ui/generic-associated-types/issue-81487.rs:11:1: 11:28

    bb0: {
        _0 = RefRef::<'_, T>(move _1);   // scope 0 at ui/generic-associated-types/issue-81487.rs:11:1: 11:28
        return;                          // scope 0 at ui/generic-associated-types/issue-81487.rs:11:1: 11:28
    }
}

// MIR FOR CTFE
fn RefRef(_1: &<T as Trait>::Ref<'_>) -> RefRef<'_, T> {
    let mut _0: RefRef<'_, T>;           // return place in scope 0 at ui/generic-associated-types/issue-81487.rs:11:1: 11:28

    bb0: {
        _0 = RefRef::<'_, T>(move _1);   // scope 0 at ui/generic-associated-types/issue-81487.rs:11:1: 11:28
        return;                          // scope 0 at ui/generic-associated-types/issue-81487.rs:11:1: 11:28
    }
}
