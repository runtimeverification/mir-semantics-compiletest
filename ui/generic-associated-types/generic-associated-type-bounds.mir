// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/generic-associated-type-bounds.rs:8:1: 8:14>::m(_1: &()) -> &() {
    debug self => _1;
    let mut _0: &();

    bb0: {
        _0 = _1;
        return;
    }
}

fn f(_1: &impl for<'a> X<Y<'a> = &'a ()>) -> &() {
    debug x => _1;
    let mut _0: &();
    let _2: &();

    bb0: {
        _2 = <impl for<'a> X<Y<'a> = &'a ()> as X>::m(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn g(_1: &T) -> &() {
    debug x => _1;
    let mut _0: &();
    let _2: &();

    bb0: {
        _2 = <T as X>::m(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn h(_1: &()) -> &() {
    debug x => _1;
    let mut _0: &();
    let _2: &();

    bb0: {
        _2 = <() as X>::m(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = _2;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: &();
    let _2: &();
    let _3: &();
    let mut _4: &();
    let mut _5: &();
    let mut _6: &();

    bb0: {
        _6 = const _;
        _1 = f::<()>(_6) -> [return: bb1, unwind continue];
    }

    bb1: {
        _5 = const _;
        _2 = g::<()>(_5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _4 = const _;
        _3 = h(_4) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }
}

promoted[0] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}
