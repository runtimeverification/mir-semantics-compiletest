// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/generic-associated-type-bounds.rs:8:1: 8:14>::m(_1: &()) -> &() {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:11:10: 11:15
    let mut _0: &();                     // return place in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:11:20: 11:31

    bb0: {
        _0 = _1;                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:12:9: 12:13
        return;                          // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:13:6: 13:6
    }
}

fn f(_1: &impl for<'a> X<Y<'a> = &'a ()>) -> &() {
    debug x => _1;                       // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:16:6: 16:7
    let mut _0: &();                     // return place in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:17:5: 17:10
    let mut _2: &impl for<'a> X<Y<'a> = &'a ()>; // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:17:5: 17:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:17:5: 17:10
        _0 = <impl for<'a> X<Y<'a> = &'a ()> as X>::m(move _2) -> bb1; // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:17:5: 17:10
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/generic-associated-type-bounds.rs:17:7: 17:8
                                         // + literal: Const { ty: for<'a> fn(&'a impl for<'a> X<Y<'a> = &'a ()>) -> <impl for<'a> X<Y<'a> = &'a ()> as X>::Y<'a> {<impl for<'a> X<Y<'a> = &'a ()> as X>::m}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:18:2: 18:2
    }
}

fn g(_1: &T) -> &() {
    debug x => _1;                       // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:20:36: 20:37
    let mut _0: &();                     // return place in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:21:5: 21:10
    let mut _2: &T;                      // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:21:5: 21:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:21:5: 21:10
        _0 = <T as X>::m(move _2) -> bb1; // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:21:5: 21:10
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/generic-associated-type-bounds.rs:21:7: 21:8
                                         // + literal: Const { ty: for<'a> fn(&'a T) -> <T as X>::Y<'a> {<T as X>::m}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:22:2: 22:2
    }
}

fn h(_1: &()) -> &() {
    debug x => _1;                       // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:24:6: 24:7
    let mut _0: &();                     // return place in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:25:5: 25:10
    let mut _2: &();                     // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:25:5: 25:10

    bb0: {
        _2 = _1;                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:25:5: 25:10
        _0 = <() as X>::m(move _2) -> bb1; // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:25:5: 25:10
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/generic-associated-type-bounds.rs:25:7: 25:8
                                         // + literal: Const { ty: for<'a> fn(&'a ()) -> <() as X>::Y<'a> {<() as X>::m}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:26:2: 26:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:28:11: 28:11
    let _1: &();                         // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:5: 29:11
    let mut _2: &();                     // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10
    let _3: &();                         // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10
    let _4: &();                         // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:5: 30:11
    let mut _5: &();                     // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
    let _6: &();                         // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
    let _7: &();                         // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:5: 31:11
    let mut _8: &();                     // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
    let _9: &();                         // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
    let mut _10: &();                    // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
    let mut _11: &();                    // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
    let mut _12: &();                    // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10

    bb0: {
        _12 = const _;                   // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[2])) }
        _3 = _12;                        // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10
        _2 = _3;                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10
        _1 = f::<()>(move _2) -> bb1;    // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:5: 29:11
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/generic-associated-type-bounds.rs:29:5: 29:6
                                         // + literal: Const { ty: for<'a> fn(&'a ()) -> &'a () {f::<()>}, val: Value(<ZST>) }
    }

    bb1: {
        _11 = const _;                   // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[1])) }
        _6 = _11;                        // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
        _5 = _6;                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
        _4 = g::<()>(move _5) -> bb2;    // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:5: 30:11
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/generic-associated-type-bounds.rs:30:5: 30:6
                                         // + literal: Const { ty: for<'a> fn(&'a ()) -> &'a () {g::<()>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = const _;                   // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
                                         // + literal: Const { ty: &(), val: Unevaluated(main, [], Some(promoted[0])) }
        _9 = _10;                        // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
        _8 = _9;                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
        _7 = h(move _8) -> bb3;          // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:5: 31:11
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/generic-associated-type-bounds.rs:31:5: 31:6
                                         // + literal: Const { ty: for<'a> fn(&'a ()) -> &'a () {h}, val: Value(<ZST>) }
    }

    bb3: {
        return;                          // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:32:2: 32:2
    }
}

promoted[0] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
    let mut _1: ();                      // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:8: 31:10

    bb0: {
        _1 = ();                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:8: 31:10
        _0 = &_1;                        // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
        return;                          // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:31:7: 31:10
    }
}

promoted[1] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
    let mut _1: ();                      // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:8: 30:10

    bb0: {
        _1 = ();                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:8: 30:10
        _0 = &_1;                        // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
        return;                          // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:30:7: 30:10
    }
}

promoted[2] in main: &() = {
    let mut _0: &();                     // return place in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10
    let mut _1: ();                      // in scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:8: 29:10

    bb0: {
        _1 = ();                         // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:8: 29:10
        _0 = &_1;                        // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10
        return;                          // scope 0 at ui/generic-associated-types/generic-associated-type-bounds.rs:29:7: 29:10
    }
}
