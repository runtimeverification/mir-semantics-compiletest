// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn str_contains(_1: &str, _2: &str) -> bool {
    debug a => _1;                       // in scope 0 at ui/generic-associated-types/issue-93342.rs:29:17: 29:18
    debug b => _2;                       // in scope 0 at ui/generic-associated-types/issue-93342.rs:29:26: 29:27
    let mut _0: bool;                    // return place in scope 0 at ui/generic-associated-types/issue-93342.rs:29:38: 29:42
    let mut _3: &str;                    // in scope 0 at ui/generic-associated-types/issue-93342.rs:30:5: 30:18
    let mut _4: &str;                    // in scope 0 at ui/generic-associated-types/issue-93342.rs:30:16: 30:17

    bb0: {
        _3 = _1;                         // scope 0 at ui/generic-associated-types/issue-93342.rs:30:5: 30:18
        _4 = _2;                         // scope 0 at ui/generic-associated-types/issue-93342.rs:30:16: 30:17
        _0 = core::str::<impl str>::contains::<'_, &str>(move _3, move _4) -> bb1; // scope 0 at ui/generic-associated-types/issue-93342.rs:30:5: 30:18
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/issue-93342.rs:30:7: 30:15
                                         // + literal: Const { ty: fn(&str, &str) -> bool {core::str::<impl str>::contains::<'_, &str>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/issue-93342.rs:31:2: 31:2
    }
}

fn <impl at ui/generic-associated-types/issue-93342.rs:41:1: 41:70>::new(_1: F) -> BinaryExpression<A, B, O, F> {
    debug f => _1;                       // in scope 0 at ui/generic-associated-types/issue-93342.rs:45:16: 45:17
    let mut _0: BinaryExpression<A, B, O, F>; // return place in scope 0 at ui/generic-associated-types/issue-93342.rs:45:25: 45:29
    let mut _2: F;                       // in scope 0 at ui/generic-associated-types/issue-93342.rs:47:13: 47:14
    let mut _3: std::marker::PhantomData<(A, B, O)>; // in scope 0 at ui/generic-associated-types/issue-93342.rs:48:23: 48:34

    bb0: {
        _2 = move _1;                    // scope 0 at ui/generic-associated-types/issue-93342.rs:47:13: 47:14
        _0 = BinaryExpression::<A, B, O, F> { f: move _2, _phantom: move _3 }; // scope 0 at ui/generic-associated-types/issue-93342.rs:46:9: 49:10
        return;                          // scope 0 at ui/generic-associated-types/issue-93342.rs:50:6: 50:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/issue-93342.rs:53:11: 53:11
    let _1: BinaryExpression<std::string::String, std::string::String, bool, for<'a, 'b> fn(&'a str, &'b str) -> bool {str_contains}>; // in scope 0 at ui/generic-associated-types/issue-93342.rs:54:5: 54:67

    bb0: {
        _1 = BinaryExpression::<String, String, bool, for<'a, 'b> fn(&'a str, &'b str) -> bool {str_contains}>::new(str_contains) -> bb1; // scope 0 at ui/generic-associated-types/issue-93342.rs:54:5: 54:67
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/issue-93342.rs:54:5: 54:53
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(for<'a, 'b> fn(&'a str, &'b str) -> bool {str_contains}) -> BinaryExpression<String, String, bool, for<'a, 'b> fn(&'a str, &'b str) -> bool {str_contains}> {BinaryExpression::<String, String, bool, for<'a, 'b> fn(&'a str, &'b str) -> bool {str_contains}>::new}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/issue-93342.rs:54:54: 54:66
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a str, &'b str) -> bool {str_contains}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/issue-93342.rs:55:2: 55:2
    }
}
