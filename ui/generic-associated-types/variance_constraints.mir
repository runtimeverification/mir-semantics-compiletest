// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/variance_constraints.rs:11:1: 11:13>::make_b(_1: &S) -> &S {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/variance_constraints.rs:13:19: 13:27
    let mut _0: &S;                      // return place in scope 0 at ui/generic-associated-types/variance_constraints.rs:13:32: 13:40

    bb0: {
        _0 = _1;                         // scope 0 at ui/generic-associated-types/variance_constraints.rs:14:9: 14:13
        return;                          // scope 0 at ui/generic-associated-types/variance_constraints.rs:15:6: 15:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/variance_constraints.rs:22:11: 22:11

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/variance_constraints.rs:22:13: 22:13
    }
}

fn E::S(_1: &S) -> E<'_> {
    let mut _0: E<'_>;                   // return place in scope 0 at ui/generic-associated-types/variance_constraints.rs:19:5: 19:6

    bb0: {
        _0 = E::<'_>::S(move _1);        // scope 0 at ui/generic-associated-types/variance_constraints.rs:19:5: 19:6
        return;                          // scope 0 at ui/generic-associated-types/variance_constraints.rs:19:5: 19:6
    }
}

// MIR FOR CTFE
fn E::S(_1: &S) -> E<'_> {
    let mut _0: E<'_>;                   // return place in scope 0 at ui/generic-associated-types/variance_constraints.rs:19:5: 19:6

    bb0: {
        _0 = E::<'_>::S(move _1);        // scope 0 at ui/generic-associated-types/variance_constraints.rs:19:5: 19:6
        return;                          // scope 0 at ui/generic-associated-types/variance_constraints.rs:19:5: 19:6
    }
}
