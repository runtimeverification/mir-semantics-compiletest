// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _foo(_1: T) -> () {
    debug _iter => _1;                   // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:20:12: 20:17
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/streaming_iterator.rs:20:22: 20:22

    bb0: {
        drop(_1) -> bb1;                 // scope 0 at ui/generic-associated-types/streaming_iterator.rs:20:91: 20:92
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:20:92: 20:92
    }
}

fn <impl at ui/generic-associated-types/streaming_iterator.rs:30:1: 30:68>::next(_1: &mut StreamEnumerate<I>) -> Option<(usize, <I as StreamingIterator>::Item<'_>)> {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:32:17: 32:29
    let mut _0: std::option::Option<(usize, <I as StreamingIterator>::Item<'_>)>; // return place in scope 0 at ui/generic-associated-types/streaming_iterator.rs:32:34: 32:56
    let mut _2: std::option::Option<<I as StreamingIterator>::Item<'_>>; // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:33:15: 33:31
    let mut _3: &mut I;                  // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:33:15: 33:31
    let mut _4: isize;                   // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:34:13: 34:17
    let _5: <I as StreamingIterator>::Item<'_>; // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:35:18: 35:21
    let mut _7: (usize, <I as StreamingIterator>::Item<'_>); // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:36:30: 36:47
    let mut _8: usize;                   // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:36:31: 36:41
    let mut _9: <I as StreamingIterator>::Item<'_>; // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:36:43: 36:46
    let mut _10: (usize, bool);          // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:37:17: 37:32
    scope 1 {
        debug val => _5;                 // in scope 1 at ui/generic-associated-types/streaming_iterator.rs:35:18: 35:21
        let _6: std::option::Option<(usize, <I as StreamingIterator>::Item<'_>)>; // in scope 1 at ui/generic-associated-types/streaming_iterator.rs:36:21: 36:22
        scope 2 {
            debug r => _6;               // in scope 2 at ui/generic-associated-types/streaming_iterator.rs:36:21: 36:22
        }
    }

    bb0: {
        _3 = &mut ((*_1).0: I);          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:33:15: 33:31
        _2 = <I as StreamingIterator>::next(move _3) -> bb1; // scope 0 at ui/generic-associated-types/streaming_iterator.rs:33:15: 33:31
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:33:25: 33:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut I) -> Option<<I as StreamingIterator>::Item<'a>> {<I as StreamingIterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = discriminant(_2);           // scope 0 at ui/generic-associated-types/streaming_iterator.rs:33:15: 33:31
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3]; // scope 0 at ui/generic-associated-types/streaming_iterator.rs:33:9: 33:31
    }

    bb2: {
        _5 = move ((_2 as Some).0: <I as StreamingIterator>::Item<'_>); // scope 0 at ui/generic-associated-types/streaming_iterator.rs:35:18: 35:21
        _8 = ((*_1).1: usize);           // scope 1 at ui/generic-associated-types/streaming_iterator.rs:36:31: 36:41
        _9 = move _5;                    // scope 1 at ui/generic-associated-types/streaming_iterator.rs:36:43: 36:46
        _7 = (move _8, move _9);         // scope 1 at ui/generic-associated-types/streaming_iterator.rs:36:30: 36:47
        _6 = Option::<(usize, <I as StreamingIterator>::Item<'_>)>::Some(move _7); // scope 1 at ui/generic-associated-types/streaming_iterator.rs:36:25: 36:48
        _10 = CheckedAdd(((*_1).1: usize), const 1_usize); // scope 2 at ui/generic-associated-types/streaming_iterator.rs:37:17: 37:32
        assert(!move (_10.1: bool), "attempt to compute `{} + {}`, which would overflow", ((*_1).1: usize), const 1_usize) -> [success: bb5, unwind: bb6]; // scope 2 at ui/generic-associated-types/streaming_iterator.rs:37:17: 37:32
    }

    bb3: {
        unreachable;                     // scope 0 at ui/generic-associated-types/streaming_iterator.rs:33:15: 33:31
    }

    bb4: {
        _0 = Option::<(usize, <I as StreamingIterator>::Item<'_>)>::None; // scope 0 at ui/generic-associated-types/streaming_iterator.rs:34:21: 34:25
        goto -> bb7;                     // scope 0 at ui/generic-associated-types/streaming_iterator.rs:34:21: 34:25
    }

    bb5: {
        ((*_1).1: usize) = move (_10.0: usize); // scope 2 at ui/generic-associated-types/streaming_iterator.rs:37:17: 37:32
        _0 = move _6;                    // scope 2 at ui/generic-associated-types/streaming_iterator.rs:38:17: 38:18
        goto -> bb7;                     // scope 0 at ui/generic-associated-types/streaming_iterator.rs:41:5: 41:6
    }

    bb6 (cleanup): {
        drop(_6) -> bb8;                 // scope 1 at ui/generic-associated-types/streaming_iterator.rs:39:13: 39:14
    }

    bb7: {
        return;                          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:41:6: 41:6
    }

    bb8 (cleanup): {
        resume;                          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:32:5: 41:6
    }
}

fn <impl at ui/generic-associated-types/streaming_iterator.rs:44:1: 44:42>::next(_1: &mut I) -> Option<<I as Iterator>::Item> {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:46:13: 46:22
    let mut _0: std::option::Option<<I as std::iter::Iterator>::Item>; // return place in scope 0 at ui/generic-associated-types/streaming_iterator.rs:46:27: 46:69
    let mut _2: &mut I;                  // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:47:24: 47:28

    bb0: {
        _2 = &mut (*_1);                 // scope 0 at ui/generic-associated-types/streaming_iterator.rs:47:24: 47:28
        _0 = <I as Iterator>::next(move _2) -> bb1; // scope 0 at ui/generic-associated-types/streaming_iterator.rs:47:9: 47:29
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:47:9: 47:23
                                         // + literal: Const { ty: for<'a> fn(&'a mut I) -> Option<<I as Iterator>::Item> {<I as Iterator>::next}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:48:6: 48:6
    }
}

fn <impl at ui/generic-associated-types/streaming_iterator.rs:51:1: 51:27>::new(_1: I) -> StreamEnumerate<I> {
    debug iter => _1;                    // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:52:16: 52:20
    let mut _0: StreamEnumerate<I>;      // return place in scope 0 at ui/generic-associated-types/streaming_iterator.rs:52:28: 52:32
    let mut _2: I;                       // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:55:13: 55:17

    bb0: {
        _2 = move _1;                    // scope 0 at ui/generic-associated-types/streaming_iterator.rs:55:13: 55:17
        _0 = StreamEnumerate::<I> { iter: move _2, count: const 0_usize }; // scope 0 at ui/generic-associated-types/streaming_iterator.rs:53:9: 56:10
        return;                          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:57:6: 57:6
    }
}

fn test_stream_enumerate() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/streaming_iterator.rs:60:28: 60:28
    let _1: std::vec::Vec<&str>;         // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:61:9: 61:10
    let mut _2: std::boxed::Box<[&str]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[&str; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[&str; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: &str;                    // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:61:23: 61:26
    let _9: &str;                        // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:61:23: 61:26
    let mut _10: &str;                   // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:61:28: 61:31
    let _11: &str;                       // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:61:28: 61:31
    let mut _13: std::slice::Iter<'_, &str>; // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:62:39: 62:47
    let mut _14: &[&str];                // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:62:39: 62:47
    let _15: &[&str];                    // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:62:39: 62:47
    let mut _16: &std::vec::Vec<&str>;   // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:62:39: 62:47
    let mut _17: std::option::Option<(usize, &&str)>; // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:63:28: 63:37
    let mut _18: &mut StreamEnumerate<std::slice::Iter<'_, &str>>; // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:63:28: 63:37
    let mut _19: isize;                  // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:63:15: 63:25
    let mut _21: (&&str, &&str);         // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _22: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _23: &&str;                      // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:64:20: 64:29
    let mut _24: &std::vec::Vec<&str>;   // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:64:20: 64:21
    let mut _25: usize;                  // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:64:22: 64:28
    let mut _26: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _29: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _30: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _31: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _32: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _34: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _35: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _36: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _37: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _38: &&str;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _39: &&str;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _42: &u32;                   // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
    let _43: &u32;                       // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
    let mut _44: (&u32, &u32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _45: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _46: &u32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _52: &&str;                  // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:63:20: 63:24
    let mut _53: &u32;                   // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:66:9: 66:10
    let mut _54: *const [&str; 3];       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/generic-associated-types/streaming_iterator.rs:61:9: 61:10
        let mut _12: StreamEnumerate<std::slice::Iter<'_, &str>>; // in scope 1 at ui/generic-associated-types/streaming_iterator.rs:62:9: 62:15
        scope 3 {
            debug se => _12;             // in scope 3 at ui/generic-associated-types/streaming_iterator.rs:62:9: 62:15
            let _41: Foo<std::slice::Iter<'_, u32>>; // in scope 3 at ui/generic-associated-types/streaming_iterator.rs:66:9: 66:10
            let mut _51: &u32;           // in scope 3 at ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
            scope 4 {
                debug item => _20;       // in scope 4 at ui/generic-associated-types/streaming_iterator.rs:63:20: 63:24
                let _20: (usize, &&str); // in scope 4 at ui/generic-associated-types/streaming_iterator.rs:63:20: 63:24
                let _27: &&str;          // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _28: &&str;          // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                scope 5 {
                    debug left_val => _27; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _28; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _33: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 6 {
                        debug kind => _33; // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
            scope 7 {
                debug x => _41;          // in scope 7 at ui/generic-associated-types/streaming_iterator.rs:66:9: 66:10
                let _47: &u32;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                let _48: &u32;           // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let mut _50: &u32;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                scope 8 {
                    debug left_val => _47; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                    debug right_val => _48; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                    let _49: core::panicking::AssertKind; // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    scope 9 {
                        debug kind => _49; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 48_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 8_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [&str; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _9 = const "b";                  // scope 0 at ui/generic-associated-types/streaming_iterator.rs:61:23: 61:26
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:61:23: 61:26
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _8 = _9;                         // scope 0 at ui/generic-associated-types/streaming_iterator.rs:61:23: 61:26
        _11 = const "c";                 // scope 0 at ui/generic-associated-types/streaming_iterator.rs:61:28: 61:31
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:61:28: 61:31
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _10 = _11;                       // scope 0 at ui/generic-associated-types/streaming_iterator.rs:61:28: 61:31
        _54 = (((_7.0: std::ptr::Unique<[&str; 3]>).0: std::ptr::NonNull<[&str; 3]>).0: *const [&str; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_54) = [const "a", move _8, move _10]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:61:18: 61:21
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[&str]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[&str]>) -> Vec<&str> {slice::<impl [&str]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _16 = &_1;                       // scope 1 at ui/generic-associated-types/streaming_iterator.rs:62:39: 62:47
        _15 = <Vec<&str> as Deref>::deref(move _16) -> [return: bb3, unwind: bb13]; // scope 1 at ui/generic-associated-types/streaming_iterator.rs:62:39: 62:47
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:62:39: 62:47
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<&str>) -> &'a <Vec<&str> as Deref>::Target {<Vec<&str> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb3: {
        _14 = _15;                       // scope 1 at ui/generic-associated-types/streaming_iterator.rs:62:39: 62:47
        _13 = core::slice::<impl [&str]>::iter(move _14) -> [return: bb4, unwind: bb13]; // scope 1 at ui/generic-associated-types/streaming_iterator.rs:62:39: 62:47
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:62:41: 62:45
                                         // + literal: Const { ty: for<'a> fn(&'a [&str]) -> std::slice::Iter<'a, &str> {core::slice::<impl [&str]>::iter}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = StreamEnumerate::<std::slice::Iter<'_, &str>>::new(move _13) -> [return: bb15, unwind: bb13]; // scope 1 at ui/generic-associated-types/streaming_iterator.rs:62:18: 62:48
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:62:18: 62:38
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, &str>) -> StreamEnumerate<std::slice::Iter<'_, &str>> {StreamEnumerate::<std::slice::Iter<'_, &str>>::new}, val: Value(<ZST>) }
    }

    bb5: {
        _18 = &mut _12;                  // scope 4 at ui/generic-associated-types/streaming_iterator.rs:63:28: 63:37
        _17 = <StreamEnumerate<std::slice::Iter<'_, &str>> as StreamingIterator>::next(move _18) -> [return: bb6, unwind: bb13]; // scope 4 at ui/generic-associated-types/streaming_iterator.rs:63:28: 63:37
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:63:31: 63:35
                                         // + literal: Const { ty: for<'a> fn(&'a mut StreamEnumerate<std::slice::Iter<'_, &str>>) -> Option<<StreamEnumerate<std::slice::Iter<'_, &str>> as StreamingIterator>::Item<'a>> {<StreamEnumerate<std::slice::Iter<'_, &str>> as StreamingIterator>::next}, val: Value(<ZST>) }
    }

    bb6: {
        _19 = discriminant(_17);         // scope 4 at ui/generic-associated-types/streaming_iterator.rs:63:15: 63:25
        switchInt(move _19) -> [1: bb7, otherwise: bb11]; // scope 4 at ui/generic-associated-types/streaming_iterator.rs:63:15: 63:25
    }

    bb7: {
        _20 = ((_17 as Some).0: (usize, &&str)); // scope 4 at ui/generic-associated-types/streaming_iterator.rs:63:20: 63:24
        _24 = &_1;                       // scope 4 at ui/generic-associated-types/streaming_iterator.rs:64:20: 64:21
        _25 = (_20.0: usize);            // scope 4 at ui/generic-associated-types/streaming_iterator.rs:64:22: 64:28
        _23 = <Vec<&str> as Index<usize>>::index(move _24, move _25) -> [return: bb8, unwind: bb13]; // scope 4 at ui/generic-associated-types/streaming_iterator.rs:64:20: 64:29
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:64:20: 64:29
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<&str>, usize) -> &'a <Vec<&str> as Index<usize>>::Output {<Vec<&str> as Index<usize>>::index}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _52 = deref_copy (_20.1: &&str); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _26 = _52;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _21 = (move _22, move _26);      // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _27 = (_21.0: &&str);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _28 = (_21.1: &&str);            // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _31 = _27;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _32 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _30 = <&str as PartialEq>::eq(move _31, move _32) -> [return: bb9, unwind: bb13]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a &str, &'b &str) -> bool {<&str as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb9: {
        _29 = Not(move _30);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _29) -> [0: bb5, otherwise: bb10]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _33 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _35 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _37 = _27;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _37;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _39 = _28;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _38 = _39;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _40 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _34 = core::panicking::assert_failed::<&str, &str>(move _35, move _36, move _38, move _40) -> bb13; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a &str, &'b &str, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<&str, &str>}, val: Value(<ZST>) }
    }

    bb11: {
        _51 = const _;                   // scope 3 at ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
                                         // + literal: Const { ty: &u32, val: Unevaluated(test_stream_enumerate, [], Some(promoted[1])) }
        _43 = _51;                       // scope 3 at ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
        _42 = _43;                       // scope 3 at ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
        _41 = Foo::<std::slice::Iter<'_, u32>> { bar: move _42 }; // scope 3 at ui/generic-associated-types/streaming_iterator.rs:66:13: 68:6
                                         // adt
                                         // + user_ty: UserType(2)
        _53 = deref_copy (_41.0: &u32);  // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _45 = _53;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _50 = const _;                   // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u32, val: Unevaluated(test_stream_enumerate, [], Some(promoted[0])) }
        _46 = _50;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _44 = (move _45, move _46);      // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _47 = (_44.0: &u32);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _48 = (_44.1: &u32);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        drop(_1) -> bb12;                // scope 0 at ui/generic-associated-types/streaming_iterator.rs:70:1: 70:2
    }

    bb12: {
        return;                          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:70:2: 70:2
    }

    bb13 (cleanup): {
        drop(_1) -> bb14;                // scope 0 at ui/generic-associated-types/streaming_iterator.rs:70:1: 70:2
    }

    bb14 (cleanup): {
        resume;                          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:60:1: 70:2
    }

    bb15: {
        goto -> bb5;                     // scope 1 at ui/generic-associated-types/streaming_iterator.rs:62:18: 62:48
    }
}

promoted[0] in test_stream_enumerate: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u32;                     // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:69:24: 69:28

    bb0: {
        _1 = const 0_u32;                // scope 0 at ui/generic-associated-types/streaming_iterator.rs:69:24: 69:28
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in test_stream_enumerate: &u32 = {
    let mut _0: &u32;                    // return place in scope 0 at ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
    let mut _1: u32;                     // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:67:15: 67:19

    bb0: {
        _1 = const 0_u32;                // scope 0 at ui/generic-associated-types/streaming_iterator.rs:67:15: 67:19
        _0 = &_1;                        // scope 0 at ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
        return;                          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:67:14: 67:19
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/streaming_iterator.rs:72:11: 72:11
    let _1: ();                          // in scope 0 at ui/generic-associated-types/streaming_iterator.rs:73:5: 73:28

    bb0: {
        _1 = test_stream_enumerate() -> bb1; // scope 0 at ui/generic-associated-types/streaming_iterator.rs:73:5: 73:28
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/streaming_iterator.rs:73:5: 73:26
                                         // + literal: Const { ty: fn() {test_stream_enumerate}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/streaming_iterator.rs:74:2: 74:2
    }
}
