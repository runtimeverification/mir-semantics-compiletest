// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn _foo(_1: T) -> () {
    debug _iter => _1;
    let mut _0: ();

    bb0: {
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generic-associated-types/streaming_iterator.rs:30:1: 30:68>::next(_1: &mut StreamEnumerate<I>) -> Option<(usize, <I as StreamingIterator>::Item<'_>)> {
    debug self => _1;
    let mut _0: std::option::Option<(usize, <I as StreamingIterator>::Item<'_>)>;
    let mut _2: std::option::Option<<I as StreamingIterator>::Item<'_>>;
    let mut _3: &mut I;
    let mut _4: isize;
    let _5: <I as StreamingIterator>::Item<'_>;
    let mut _7: (usize, <I as StreamingIterator>::Item<'_>);
    let mut _8: usize;
    scope 1 {
        debug val => _5;
        let _6: std::option::Option<(usize, <I as StreamingIterator>::Item<'_>)>;
        scope 2 {
            debug r => _6;
        }
    }

    bb0: {
        _3 = &mut ((*_1).0: I);
        _2 = <I as StreamingIterator>::next(move _3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = discriminant(_2);
        switchInt(move _4) -> [0: bb4, 1: bb2, otherwise: bb3];
    }

    bb2: {
        _5 = move ((_2 as Some).0: <I as StreamingIterator>::Item<'_>);
        _8 = ((*_1).1: usize);
        _7 = (move _8, move _5);
        _6 = Option::<(usize, <I as StreamingIterator>::Item<'_>)>::Some(move _7);
        ((*_1).1: usize) = Add(((*_1).1: usize), const 1_usize);
        _0 = move _6;
        goto -> bb5;
    }

    bb3: {
        unreachable;
    }

    bb4: {
        _0 = Option::<(usize, <I as StreamingIterator>::Item<'_>)>::None;
        goto -> bb5;
    }

    bb5: {
        return;
    }
}

fn <impl at ui/generic-associated-types/streaming_iterator.rs:44:1: 44:42>::next(_1: &mut I) -> Option<<I as Iterator>::Item> {
    debug self => _1;
    let mut _0: std::option::Option<<I as std::iter::Iterator>::Item>;

    bb0: {
        _0 = <I as Iterator>::next(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/generic-associated-types/streaming_iterator.rs:51:1: 51:27>::new(_1: I) -> StreamEnumerate<I> {
    debug iter => _1;
    let mut _0: StreamEnumerate<I>;

    bb0: {
        _0 = StreamEnumerate::<I> { iter: move _1, count: const 0_usize };
        return;
    }
}

fn test_stream_enumerate() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<&str>;
    let mut _2: std::boxed::Box<[&str]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[&str; 3]>;
    let _7: &str;
    let _8: &str;
    let mut _10: std::slice::Iter<'_, &str>;
    let mut _11: &[&str];
    let _12: &[&str];
    let mut _13: &std::vec::Vec<&str>;
    let mut _14: std::option::Option<(usize, &&str)>;
    let mut _15: &mut StreamEnumerate<std::slice::Iter<'_, &str>>;
    let mut _16: isize;
    let mut _18: (&&str, &&str);
    let mut _19: &&str;
    let _20: &&str;
    let mut _21: &std::vec::Vec<&str>;
    let mut _22: usize;
    let mut _25: bool;
    let mut _26: bool;
    let _28: !;
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _31: (&u32, &u32);
    let mut _34: bool;
    let mut _35: bool;
    let mut _36: u32;
    let mut _37: u32;
    let _39: !;
    let mut _40: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _43: &&str;
    let mut _44: &u32;
    let mut _45: *const [&str; 3];
    let mut _46: *const ();
    let mut _47: usize;
    let mut _48: usize;
    let mut _49: usize;
    let mut _50: usize;
    let mut _51: bool;
    scope 1 {
        debug v => _1;
        let mut _9: StreamEnumerate<std::slice::Iter<'_, &str>>;
        scope 3 {
            debug se => _9;
            let _30: Foo<std::slice::Iter<'_, u32>>;
            let mut _42: &u32;
            scope 4 {
                debug item => _17;
                let _17: (usize, &&str);
                let _23: &&str;
                let _24: &&str;
                scope 5 {
                    debug left_val => _23;
                    debug right_val => _24;
                    let _27: core::panicking::AssertKind;
                    scope 6 {
                        debug kind => _27;
                    }
                }
            }
            scope 7 {
                debug x => _30;
                let _32: &u32;
                let _33: &u32;
                let mut _41: &u32;
                scope 8 {
                    debug left_val => _32;
                    debug right_val => _33;
                    let _38: core::panicking::AssertKind;
                    scope 9 {
                        debug kind => _38;
                    }
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([&str; 3]);
        _4 = AlignOf([&str; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [&str; 3]);
        _7 = const "b";
        _8 = const "c";
        _45 = (((_6.0: std::ptr::Unique<[&str; 3]>).0: std::ptr::NonNull<[&str; 3]>).0: *const [&str; 3]);
        _46 = _45 as *const () (PtrToPtr);
        _47 = _46 as usize (Transmute);
        _48 = AlignOf(&str);
        _49 = Sub(_48, const 1_usize);
        _50 = BitAnd(_47, _49);
        _51 = Eq(_50, const 0_usize);
        assert(_51, "misaligned pointer dereference: address must be a multiple of {} but is {}", _48, _47) -> [success: bb17, unwind unreachable];
    }

    bb2: {
        _13 = &_1;
        _12 = <Vec<&str> as Deref>::deref(move _13) -> [return: bb3, unwind: bb15];
    }

    bb3: {
        _11 = _12;
        _10 = core::slice::<impl [&str]>::iter(move _11) -> [return: bb4, unwind: bb15];
    }

    bb4: {
        _9 = StreamEnumerate::<std::slice::Iter<'_, &str>>::new(move _10) -> [return: bb18, unwind: bb15];
    }

    bb5: {
        _15 = &mut _9;
        _14 = <StreamEnumerate<std::slice::Iter<'_, &str>> as StreamingIterator>::next(move _15) -> [return: bb6, unwind: bb15];
    }

    bb6: {
        _16 = discriminant(_14);
        switchInt(move _16) -> [1: bb7, otherwise: bb11];
    }

    bb7: {
        _17 = ((_14 as Some).0: (usize, &&str));
        _21 = &_1;
        _22 = (_17.0: usize);
        _20 = <Vec<&str> as Index<usize>>::index(move _21, move _22) -> [return: bb8, unwind: bb15];
    }

    bb8: {
        _19 = _20;
        _43 = deref_copy (_17.1: &&str);
        _18 = (move _19, _43);
        _23 = (_18.0: &&str);
        _24 = (_18.1: &&str);
        _26 = <&str as PartialEq>::eq(_23, _24) -> [return: bb9, unwind: bb15];
    }

    bb9: {
        _25 = Not(move _26);
        switchInt(move _25) -> [0: bb5, otherwise: bb10];
    }

    bb10: {
        _27 = core::panicking::AssertKind::Eq;
        _29 = Option::<Arguments<'_>>::None;
        _28 = core::panicking::assert_failed::<&str, &str>(move _27, _23, _24, move _29) -> bb15;
    }

    bb11: {
        _42 = const _;
        _30 = Foo::<std::slice::Iter<'_, u32>> { bar: _42 };
        _44 = deref_copy (_30.0: &u32);
        _41 = const _;
        _31 = (_44, _41);
        _32 = (_31.0: &u32);
        _33 = (_31.1: &u32);
        _36 = (*_32);
        _37 = (*_33);
        _35 = Eq(move _36, move _37);
        _34 = Not(move _35);
        switchInt(move _34) -> [0: bb13, otherwise: bb12];
    }

    bb12: {
        _38 = core::panicking::AssertKind::Eq;
        _40 = Option::<Arguments<'_>>::None;
        _39 = core::panicking::assert_failed::<u32, u32>(move _38, _32, _33, move _40) -> bb15;
    }

    bb13: {
        drop(_1) -> [return: bb14, unwind continue];
    }

    bb14: {
        return;
    }

    bb15 (cleanup): {
        drop(_1) -> [return: bb16, unwind terminate];
    }

    bb16 (cleanup): {
        resume;
    }

    bb17: {
        (*_45) = [const "a", _7, _8];
        _2 = move _6 as std::boxed::Box<[&str]> (Pointer(Unsize));
        _1 = slice::<impl [&str]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }

    bb18: {
        goto -> bb5;
    }
}

promoted[0] in test_stream_enumerate: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

promoted[1] in test_stream_enumerate: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 0_u32;
        _0 = &_1;
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();

    bb0: {
        _1 = test_stream_enumerate() -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}
