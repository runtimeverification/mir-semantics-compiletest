// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/collections.rs:33:1: 33:33>::empty() -> Vec<T> {
    let mut _0: std::vec::Vec<T>;        // return place in scope 0 at ui/generic-associated-types/collections.rs:37:19: 37:23

    bb0: {
        _0 = Vec::<T>::new() -> bb1;     // scope 0 at ui/generic-associated-types/collections.rs:38:9: 38:19
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:38:9: 38:17
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<T> {Vec::<T>::new}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/collections.rs:39:6: 39:6
    }
}

fn <impl at ui/generic-associated-types/collections.rs:33:1: 33:33>::add(_1: &mut Vec<T>, _2: T) -> () {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/collections.rs:41:12: 41:21
    debug value => _2;                   // in scope 0 at ui/generic-associated-types/collections.rs:41:23: 41:28
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/collections.rs:41:33: 41:33
    let mut _3: &mut std::vec::Vec<T>;   // in scope 0 at ui/generic-associated-types/collections.rs:42:9: 42:25
    let mut _4: T;                       // in scope 0 at ui/generic-associated-types/collections.rs:42:19: 42:24

    bb0: {
        _3 = &mut (*_1);                 // scope 0 at ui/generic-associated-types/collections.rs:42:9: 42:25
        _4 = move _2;                    // scope 0 at ui/generic-associated-types/collections.rs:42:19: 42:24
        _0 = Vec::<T>::push(move _3, move _4) -> bb1; // scope 0 at ui/generic-associated-types/collections.rs:42:9: 42:25
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:42:14: 42:18
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<T>, T) {Vec::<T>::push}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/collections.rs:43:6: 43:6
    }
}

fn <impl at ui/generic-associated-types/collections.rs:33:1: 33:33>::iterate(_1: &Vec<T>) -> std::slice::Iter<'_, T> {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/collections.rs:45:23: 45:34
    let mut _0: std::slice::Iter<'_, T>; // return place in scope 0 at ui/generic-associated-types/collections.rs:45:39: 45:56
    let mut _2: &[T];                    // in scope 0 at ui/generic-associated-types/collections.rs:46:9: 46:20
    let _3: &[T];                        // in scope 0 at ui/generic-associated-types/collections.rs:46:9: 46:20
    let mut _4: &std::vec::Vec<T>;       // in scope 0 at ui/generic-associated-types/collections.rs:46:9: 46:20

    bb0: {
        _4 = _1;                         // scope 0 at ui/generic-associated-types/collections.rs:46:9: 46:20
        _3 = <Vec<T> as Deref>::deref(move _4) -> bb1; // scope 0 at ui/generic-associated-types/collections.rs:46:9: 46:20
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:46:9: 46:20
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<T>) -> &'a <Vec<T> as Deref>::Target {<Vec<T> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/generic-associated-types/collections.rs:46:9: 46:20
        _0 = core::slice::<impl [T]>::iter(move _2) -> bb2; // scope 0 at ui/generic-associated-types/collections.rs:46:9: 46:20
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:46:14: 46:18
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> std::slice::Iter<'a, T> {core::slice::<impl [T]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generic-associated-types/collections.rs:47:6: 47:6
    }
}

fn floatify(_1: &C) -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32> {
    debug ints => _1;                    // in scope 0 at ui/generic-associated-types/collections.rs:50:16: 50:20
    let mut _0: <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>; // return place in scope 0 at ui/generic-associated-types/collections.rs:54:9: 54:16
    let mut _2: <C as Collection<i32>>::Iter<'_>; // in scope 0 at ui/generic-associated-types/collections.rs:55:15: 55:29
    let mut _3: <C as Collection<i32>>::Iter<'_>; // in scope 0 at ui/generic-associated-types/collections.rs:55:15: 55:29
    let mut _4: &C;                      // in scope 0 at ui/generic-associated-types/collections.rs:55:15: 55:29
    let mut _6: std::option::Option<&i32>; // in scope 0 at ui/generic-associated-types/collections.rs:55:15: 55:29
    let mut _7: &mut <C as Collection<i32>>::Iter<'_>; // in scope 0 at ui/generic-associated-types/collections.rs:55:15: 55:29
    let mut _8: &mut <C as Collection<i32>>::Iter<'_>; // in scope 0 at ui/generic-associated-types/collections.rs:55:15: 55:29
    let mut _9: isize;                   // in scope 0 at ui/generic-associated-types/collections.rs:55:5: 57:6
    let _11: ();                         // in scope 0 at ui/generic-associated-types/collections.rs:56:9: 56:26
    let mut _12: &mut <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>; // in scope 0 at ui/generic-associated-types/collections.rs:56:9: 56:26
    let mut _13: f32;                    // in scope 0 at ui/generic-associated-types/collections.rs:56:17: 56:25
    let mut _14: i32;                    // in scope 0 at ui/generic-associated-types/collections.rs:56:17: 56:18
    let mut _15: &i32;                   // in scope 0 at ui/generic-associated-types/collections.rs:55:15: 55:29
    scope 1 {
        debug res => _0;                 // in scope 1 at ui/generic-associated-types/collections.rs:54:9: 54:16
        let mut _5: <C as Collection<i32>>::Iter<'_>; // in scope 1 at ui/generic-associated-types/collections.rs:55:15: 55:29
        scope 2 {
            debug iter => _5;            // in scope 2 at ui/generic-associated-types/collections.rs:55:15: 55:29
            let _10: i32;                // in scope 2 at ui/generic-associated-types/collections.rs:55:10: 55:11
            scope 3 {
                debug v => _10;          // in scope 3 at ui/generic-associated-types/collections.rs:55:10: 55:11
            }
        }
    }

    bb0: {
        _0 = <<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32> as Collection<f32>>::empty() -> bb1; // scope 0 at ui/generic-associated-types/collections.rs:54:19: 54:74
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:54:19: 54:72
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32> {<<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32> as Collection<f32>>::empty}, val: Value(<ZST>) }
    }

    bb1: {
        _4 = _1;                         // scope 1 at ui/generic-associated-types/collections.rs:55:15: 55:29
        _3 = <C as Collection<i32>>::iterate(move _4) -> [return: bb2, unwind: bb11]; // scope 1 at ui/generic-associated-types/collections.rs:55:15: 55:29
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:55:20: 55:27
                                         // + literal: Const { ty: for<'iter> fn(&'iter C) -> <C as Collection<i32>>::Iter<'iter> {<C as Collection<i32>>::iterate}, val: Value(<ZST>) }
    }

    bb2: {
        _2 = <<C as Collection<i32>>::Iter<'_> as IntoIterator>::into_iter(move _3) -> [return: bb3, unwind: bb11]; // scope 1 at ui/generic-associated-types/collections.rs:55:15: 55:29
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:55:15: 55:29
                                         // + literal: Const { ty: fn(<C as Collection<i32>>::Iter<'_>) -> <<C as Collection<i32>>::Iter<'_> as IntoIterator>::IntoIter {<<C as Collection<i32>>::Iter<'_> as IntoIterator>::into_iter}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = move _2;                    // scope 1 at ui/generic-associated-types/collections.rs:55:15: 55:29
        goto -> bb4;                     // scope 2 at ui/generic-associated-types/collections.rs:55:5: 57:6
    }

    bb4: {
        _8 = &mut _5;                    // scope 2 at ui/generic-associated-types/collections.rs:55:15: 55:29
        _7 = &mut (*_8);                 // scope 2 at ui/generic-associated-types/collections.rs:55:15: 55:29
        _6 = <<C as Collection<i32>>::Iter<'_> as Iterator>::next(move _7) -> [return: bb5, unwind: bb10]; // scope 2 at ui/generic-associated-types/collections.rs:55:15: 55:29
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:55:15: 55:29
                                         // + literal: Const { ty: for<'a> fn(&'a mut <C as Collection<i32>>::Iter<'_>) -> Option<<<C as Collection<i32>>::Iter<'_> as Iterator>::Item> {<<C as Collection<i32>>::Iter<'_> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _9 = discriminant(_6);           // scope 2 at ui/generic-associated-types/collections.rs:55:15: 55:29
        switchInt(move _9) -> [0: bb8, 1: bb6, otherwise: bb7]; // scope 2 at ui/generic-associated-types/collections.rs:55:15: 55:29
    }

    bb6: {
        _15 = deref_copy ((_6 as Some).0: &i32); // scope 2 at ui/generic-associated-types/collections.rs:55:10: 55:11
        _10 = (*_15);                    // scope 2 at ui/generic-associated-types/collections.rs:55:10: 55:11
        _12 = &mut _0;                   // scope 3 at ui/generic-associated-types/collections.rs:56:9: 56:26
        _14 = _10;                       // scope 3 at ui/generic-associated-types/collections.rs:56:17: 56:18
        _13 = move _14 as f32 (IntToFloat); // scope 3 at ui/generic-associated-types/collections.rs:56:17: 56:25
        _11 = <<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32> as Collection<f32>>::add(move _12, move _13) -> [return: bb13, unwind: bb10]; // scope 3 at ui/generic-associated-types/collections.rs:56:9: 56:26
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:56:13: 56:16
                                         // + literal: Const { ty: for<'a> fn(&'a mut <<C as Collection<i32>>::Family as CollectionFamily>::Member<f32>, f32) {<<<C as Collection<i32>>::Family as CollectionFamily>::Member<f32> as Collection<f32>>::add}, val: Value(<ZST>) }
    }

    bb7: {
        unreachable;                     // scope 2 at ui/generic-associated-types/collections.rs:55:15: 55:29
    }

    bb8: {
        drop(_5) -> [return: bb9, unwind: bb11]; // scope 1 at ui/generic-associated-types/collections.rs:57:5: 57:6
    }

    bb9: {
        return;                          // scope 0 at ui/generic-associated-types/collections.rs:59:2: 59:2
    }

    bb10 (cleanup): {
        drop(_5) -> bb11;                // scope 1 at ui/generic-associated-types/collections.rs:57:5: 57:6
    }

    bb11 (cleanup): {
        drop(_0) -> bb12;                // scope 0 at ui/generic-associated-types/collections.rs:59:1: 59:2
    }

    bb12 (cleanup): {
        resume;                          // scope 0 at ui/generic-associated-types/collections.rs:50:1: 59:2
    }

    bb13: {
        goto -> bb4;                     // scope 3 at ui/generic-associated-types/collections.rs:56:9: 56:26
    }
}

fn use_floatify() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/collections.rs:61:19: 61:19
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/generic-associated-types/collections.rs:62:9: 62:10
    let mut _2: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _9: &std::vec::Vec<i32>;     // in scope 0 at ui/generic-associated-types/collections.rs:63:22: 63:24
    let _10: &std::vec::Vec<i32>;        // in scope 0 at ui/generic-associated-types/collections.rs:63:22: 63:24
    let mut _11: (&std::option::Option<&f32>, &std::option::Option<&f32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _12: &std::option::Option<&f32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _13: &std::option::Option<&f32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _14: std::option::Option<&f32>;  // in scope 0 at ui/generic-associated-types/collections.rs:64:28: 64:46
    let mut _15: &mut std::slice::Iter<'_, f32>; // in scope 0 at ui/generic-associated-types/collections.rs:64:28: 64:46
    let mut _16: std::slice::Iter<'_, f32>; // in scope 0 at ui/generic-associated-types/collections.rs:64:28: 64:39
    let mut _17: &std::vec::Vec<f32>;    // in scope 0 at ui/generic-associated-types/collections.rs:64:28: 64:39
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _22: &std::option::Option<&f32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _23: &std::option::Option<&f32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _25: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _26: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _27: &std::option::Option<&f32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _28: &std::option::Option<&f32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _29: &std::option::Option<&f32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _30: &std::option::Option<&f32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _33: *const [i32; 3];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug a => _1;                   // in scope 1 at ui/generic-associated-types/collections.rs:62:9: 62:10
        let _8: std::vec::Vec<f32>;      // in scope 1 at ui/generic-associated-types/collections.rs:63:9: 63:10
        scope 3 {
            debug b => _8;               // in scope 3 at ui/generic-associated-types/collections.rs:63:9: 63:10
            let _18: &std::option::Option<&f32>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _19: &std::option::Option<&f32>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _32: &std::option::Option<&f32>; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
            scope 4 {
                debug left_val => _18;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _19;  // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _24: core::panicking::AssertKind; // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 5 {
                    debug kind => _24;   // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 12_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _33 = (((_7.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_33) = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _10 = &_1;                       // scope 1 at ui/generic-associated-types/collections.rs:63:22: 63:24
        _9 = _10;                        // scope 1 at ui/generic-associated-types/collections.rs:63:22: 63:24
        _8 = floatify::<Vec<i32>>(move _9) -> [return: bb3, unwind: bb12]; // scope 1 at ui/generic-associated-types/collections.rs:63:13: 63:25
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:63:13: 63:21
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> <<Vec<i32> as Collection<i32>>::Family as CollectionFamily>::Member<f32> {floatify::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb3: {
        _32 = const _;                   // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&f32>, val: Unevaluated(use_floatify, [], Some(promoted[0])) }
        _12 = _32;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _17 = &_8;                       // scope 3 at ui/generic-associated-types/collections.rs:64:28: 64:39
        _16 = <Vec<f32> as Collection<f32>>::iterate(move _17) -> [return: bb4, unwind: bb11]; // scope 3 at ui/generic-associated-types/collections.rs:64:28: 64:39
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:64:30: 64:37
                                         // + literal: Const { ty: for<'iter> fn(&'iter Vec<f32>) -> <Vec<f32> as Collection<f32>>::Iter<'iter> {<Vec<f32> as Collection<f32>>::iterate}, val: Value(<ZST>) }
    }

    bb4: {
        _15 = &mut _16;                  // scope 3 at ui/generic-associated-types/collections.rs:64:28: 64:46
        _14 = <std::slice::Iter<'_, f32> as Iterator>::next(move _15) -> [return: bb5, unwind: bb11]; // scope 3 at ui/generic-associated-types/collections.rs:64:28: 64:46
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:64:40: 64:44
                                         // + literal: Const { ty: for<'a> fn(&'a mut std::slice::Iter<'_, f32>) -> Option<<std::slice::Iter<'_, f32> as Iterator>::Item> {<std::slice::Iter<'_, f32> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = &_14;                      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _11 = (move _12, move _13);      // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _18 = (_11.0: &std::option::Option<&f32>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _19 = (_11.1: &std::option::Option<&f32>); // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _22 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _23 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _21 = <Option<&f32> as PartialEq>::eq(move _22, move _23) -> [return: bb6, unwind: bb11]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&f32>, &'b Option<&f32>) -> bool {<Option<&f32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _20 = Not(move _21);             // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _20) -> [0: bb8, otherwise: bb7]; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = _18;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _28;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _19;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = _30;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = Option::<Arguments<'_>>::None; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _25 = core::panicking::assert_failed::<Option<&f32>, Option<&f32>>(move _26, move _27, move _29, move _31) -> bb11; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&f32>, &'b Option<&f32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&f32>, Option<&f32>>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_8) -> [return: bb9, unwind: bb12]; // scope 1 at ui/generic-associated-types/collections.rs:65:1: 65:2
    }

    bb9: {
        drop(_1) -> bb10;                // scope 0 at ui/generic-associated-types/collections.rs:65:1: 65:2
    }

    bb10: {
        return;                          // scope 0 at ui/generic-associated-types/collections.rs:65:2: 65:2
    }

    bb11 (cleanup): {
        drop(_8) -> bb12;                // scope 1 at ui/generic-associated-types/collections.rs:65:1: 65:2
    }

    bb12 (cleanup): {
        drop(_1) -> bb13;                // scope 0 at ui/generic-associated-types/collections.rs:65:1: 65:2
    }

    bb13 (cleanup): {
        resume;                          // scope 0 at ui/generic-associated-types/collections.rs:61:1: 65:2
    }
}

promoted[0] in use_floatify: &Option<&f32> = {
    let mut _0: &std::option::Option<&f32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&f32>; // in scope 0 at ui/generic-associated-types/collections.rs:64:16: 64:26
    let mut _2: &f32;                    // in scope 0 at ui/generic-associated-types/collections.rs:64:21: 64:25
    let mut _3: f32;                     // in scope 0 at ui/generic-associated-types/collections.rs:64:22: 64:25

    bb0: {
        _3 = const 1f32;                 // scope 0 at ui/generic-associated-types/collections.rs:64:22: 64:25
        _2 = &_3;                        // scope 0 at ui/generic-associated-types/collections.rs:64:21: 64:25
        _1 = Option::<&f32>::Some(move _2); // scope 0 at ui/generic-associated-types/collections.rs:64:16: 64:26
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/collections.rs:67:11: 67:11
    let _1: ();                          // in scope 0 at ui/generic-associated-types/collections.rs:68:5: 68:19

    bb0: {
        _1 = use_floatify() -> bb1;      // scope 0 at ui/generic-associated-types/collections.rs:68:5: 68:19
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/collections.rs:68:5: 68:17
                                         // + literal: Const { ty: fn() {use_floatify}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/collections.rs:69:2: 69:2
    }
}
