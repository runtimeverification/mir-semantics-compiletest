// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
<impl at ui/generic-associated-types/anonymize-bound-vars.rs:9:1: 9:16>::Assoc::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/generic-associated-types/anonymize-bound-vars.rs:10:25: 10:28
    let mut _1: (usize, bool);           // in scope 0 at ui/generic-associated-types/anonymize-bound-vars.rs:10:25: 10:28

    bb0: {
        _1 = CheckedMul(const 2_usize, const 2_usize); // scope 0 at ui/generic-associated-types/anonymize-bound-vars.rs:10:25: 10:28
        assert(!move (_1.1: bool), "attempt to compute `{} * {}`, which would overflow", const 2_usize, const 2_usize) -> bb1; // scope 0 at ui/generic-associated-types/anonymize-bound-vars.rs:10:25: 10:28
    }

    bb1: {
        _0 = move (_1.0: usize);         // scope 0 at ui/generic-associated-types/anonymize-bound-vars.rs:10:25: 10:28
        return;                          // scope 0 at ui/generic-associated-types/anonymize-bound-vars.rs:10:25: 10:28
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/anonymize-bound-vars.rs:13:11: 13:11

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/anonymize-bound-vars.rs:13:13: 13:13
    }
}
