// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/iterable.rs:11:1: 11:28>::iter(_1: &Vec<T>) -> std::slice::Iter<'_, T> {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/iterable.rs:15:17: 15:25
    let mut _0: std::slice::Iter<'_, T>; // return place in scope 0 at ui/generic-associated-types/iterable.rs:15:30: 15:44
    let mut _2: &[T];                    // in scope 0 at ui/generic-associated-types/iterable.rs:16:9: 16:24
    let _3: &[T];                        // in scope 0 at ui/generic-associated-types/iterable.rs:16:9: 16:17
    let mut _4: &std::vec::Vec<T>;       // in scope 0 at ui/generic-associated-types/iterable.rs:16:9: 16:13
    let mut _5: std::ops::RangeFull;     // in scope 0 at ui/generic-associated-types/iterable.rs:16:14: 16:16

    bb0: {
        _4 = _1;                         // scope 0 at ui/generic-associated-types/iterable.rs:16:9: 16:13
        _3 = <Vec<T> as Index<RangeFull>>::index(move _4, move _5) -> bb1; // scope 0 at ui/generic-associated-types/iterable.rs:16:9: 16:17
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:16:9: 16:17
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<T>, RangeFull) -> &'a <Vec<T> as Index<RangeFull>>::Output {<Vec<T> as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = _3;                         // scope 0 at ui/generic-associated-types/iterable.rs:16:9: 16:24
        _0 = core::slice::<impl [T]>::iter(move _2) -> bb2; // scope 0 at ui/generic-associated-types/iterable.rs:16:9: 16:24
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:16:18: 16:22
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> std::slice::Iter<'a, T> {core::slice::<impl [T]>::iter}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/generic-associated-types/iterable.rs:17:6: 17:6
    }
}

fn <impl at ui/generic-associated-types/iterable.rs:21:1: 21:25>::iter(_1: &[T]) -> std::slice::Iter<'_, T> {
    debug self => _1;                    // in scope 0 at ui/generic-associated-types/iterable.rs:25:17: 25:25
    let mut _0: std::slice::Iter<'_, T>; // return place in scope 0 at ui/generic-associated-types/iterable.rs:25:30: 25:44
    let mut _2: &[T];                    // in scope 0 at ui/generic-associated-types/iterable.rs:26:9: 26:20

    bb0: {
        _2 = _1;                         // scope 0 at ui/generic-associated-types/iterable.rs:26:9: 26:20
        _0 = core::slice::<impl [T]>::iter(move _2) -> bb1; // scope 0 at ui/generic-associated-types/iterable.rs:26:9: 26:20
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:26:14: 26:18
                                         // + literal: Const { ty: for<'a> fn(&'a [T]) -> std::slice::Iter<'a, T> {core::slice::<impl [T]>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/iterable.rs:27:6: 27:6
    }
}

fn make_iter(_1: &I) -> <I as Iterable>::Iter<'_> {
    debug it => _1;                      // in scope 0 at ui/generic-associated-types/iterable.rs:30:40: 30:42
    let mut _0: <I as Iterable>::Iter<'_>; // return place in scope 0 at ui/generic-associated-types/iterable.rs:30:54: 30:65
    let mut _2: &I;                      // in scope 0 at ui/generic-associated-types/iterable.rs:31:5: 31:14

    bb0: {
        _2 = _1;                         // scope 0 at ui/generic-associated-types/iterable.rs:31:5: 31:14
        _0 = <I as Iterable>::iter(move _2) -> bb1; // scope 0 at ui/generic-associated-types/iterable.rs:31:5: 31:14
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:31:8: 31:12
                                         // + literal: Const { ty: for<'a> fn(&'a I) -> <I as Iterable>::Iter<'a> {<I as Iterable>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/generic-associated-types/iterable.rs:32:2: 32:2
    }
}

fn get_first(_1: &I) -> Option<<I as Iterable>::Item<'_>> {
    debug it => _1;                      // in scope 0 at ui/generic-associated-types/iterable.rs:34:40: 34:42
    let mut _0: std::option::Option<<I as Iterable>::Item<'_>>; // return place in scope 0 at ui/generic-associated-types/iterable.rs:34:54: 34:73
    let mut _2: &mut <I as Iterable>::Iter<'_>; // in scope 0 at ui/generic-associated-types/iterable.rs:35:5: 35:21
    let mut _3: <I as Iterable>::Iter<'_>; // in scope 0 at ui/generic-associated-types/iterable.rs:35:5: 35:14
    let mut _4: &I;                      // in scope 0 at ui/generic-associated-types/iterable.rs:35:5: 35:14

    bb0: {
        _4 = _1;                         // scope 0 at ui/generic-associated-types/iterable.rs:35:5: 35:14
        _3 = <I as Iterable>::iter(move _4) -> bb1; // scope 0 at ui/generic-associated-types/iterable.rs:35:5: 35:14
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:35:8: 35:12
                                         // + literal: Const { ty: for<'a> fn(&'a I) -> <I as Iterable>::Iter<'a> {<I as Iterable>::iter}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &mut _3;                    // scope 0 at ui/generic-associated-types/iterable.rs:35:5: 35:21
        _0 = <<I as Iterable>::Iter<'_> as Iterator>::next(move _2) -> [return: bb2, unwind: bb4]; // scope 0 at ui/generic-associated-types/iterable.rs:35:5: 35:21
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:35:15: 35:19
                                         // + literal: Const { ty: for<'a> fn(&'a mut <I as Iterable>::Iter<'_>) -> Option<<<I as Iterable>::Iter<'_> as Iterator>::Item> {<<I as Iterable>::Iter<'_> as Iterator>::next}, val: Value(<ZST>) }
    }

    bb2: {
        drop(_3) -> bb3;                 // scope 0 at ui/generic-associated-types/iterable.rs:36:1: 36:2
    }

    bb3: {
        return;                          // scope 0 at ui/generic-associated-types/iterable.rs:36:2: 36:2
    }

    bb4 (cleanup): {
        drop(_3) -> bb5;                 // scope 0 at ui/generic-associated-types/iterable.rs:36:1: 36:2
    }

    bb5 (cleanup): {
        resume;                          // scope 0 at ui/generic-associated-types/iterable.rs:34:1: 36:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/iterable.rs:38:11: 38:11
    let _1: std::vec::Vec<i32>;          // in scope 0 at ui/generic-associated-types/iterable.rs:39:9: 39:10
    let mut _2: std::boxed::Box<[i32]>;  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _3: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _4: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _5: usize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _6: *mut u8;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _7: std::boxed::Box<[i32; 3]>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    let mut _8: (&std::vec::Vec<i32>, &std::vec::Vec<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _9: &std::vec::Vec<i32>;     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _10: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _11: std::vec::Vec<i32>;         // in scope 0 at ui/generic-associated-types/iterable.rs:40:19: 40:61
    let mut _12: std::iter::Copied<std::slice::Iter<'_, i32>>; // in scope 0 at ui/generic-associated-types/iterable.rs:40:19: 40:41
    let mut _13: std::slice::Iter<'_, i32>; // in scope 0 at ui/generic-associated-types/iterable.rs:40:19: 40:32
    let mut _14: &std::vec::Vec<i32>;    // in scope 0 at ui/generic-associated-types/iterable.rs:40:29: 40:31
    let _15: &std::vec::Vec<i32>;        // in scope 0 at ui/generic-associated-types/iterable.rs:40:29: 40:31
    let mut _18: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _19: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _20: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _21: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _23: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _24: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _25: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _26: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _27: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _28: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _29: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _30: (&std::vec::Vec<i32>, &std::vec::Vec<i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _31: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _32: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _33: std::vec::Vec<i32>;         // in scope 0 at ui/generic-associated-types/iterable.rs:41:19: 41:62
    let mut _34: std::iter::Copied<std::slice::Iter<'_, i32>>; // in scope 0 at ui/generic-associated-types/iterable.rs:41:19: 41:42
    let mut _35: std::slice::Iter<'_, i32>; // in scope 0 at ui/generic-associated-types/iterable.rs:41:19: 41:33
    let mut _36: &[i32];                 // in scope 0 at ui/generic-associated-types/iterable.rs:41:29: 41:32
    let _37: &[i32];                     // in scope 0 at ui/generic-associated-types/iterable.rs:41:29: 41:32
    let _38: &[i32];                     // in scope 0 at ui/generic-associated-types/iterable.rs:41:30: 41:32
    let mut _39: &std::vec::Vec<i32>;    // in scope 0 at ui/generic-associated-types/iterable.rs:41:31: 41:32
    let mut _42: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _43: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _44: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _45: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _47: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _48: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _49: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _50: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _51: &std::vec::Vec<i32>;    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _52: &std::vec::Vec<i32>;        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _53: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _54: (&std::option::Option<&i32>, &std::option::Option<&i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _55: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _56: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _57: std::option::Option<&i32>;  // in scope 0 at ui/generic-associated-types/iterable.rs:42:26: 42:39
    let mut _58: &std::vec::Vec<i32>;    // in scope 0 at ui/generic-associated-types/iterable.rs:42:36: 42:38
    let _59: &std::vec::Vec<i32>;        // in scope 0 at ui/generic-associated-types/iterable.rs:42:36: 42:38
    let mut _62: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _63: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _64: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _65: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _67: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _68: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _69: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _70: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _71: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _72: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _73: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _74: (&std::option::Option<&i32>, &std::option::Option<&i32>); // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _75: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _76: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _77: std::option::Option<&i32>;  // in scope 0 at ui/generic-associated-types/iterable.rs:43:26: 43:40
    let mut _78: &[i32];                 // in scope 0 at ui/generic-associated-types/iterable.rs:43:36: 43:39
    let _79: &[i32];                     // in scope 0 at ui/generic-associated-types/iterable.rs:43:36: 43:39
    let _80: &[i32];                     // in scope 0 at ui/generic-associated-types/iterable.rs:43:37: 43:39
    let mut _81: &std::vec::Vec<i32>;    // in scope 0 at ui/generic-associated-types/iterable.rs:43:38: 43:39
    let mut _84: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _85: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _86: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _87: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _89: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _90: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _91: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _92: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _93: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _94: &std::option::Option<&i32>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _95: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _98: *const [i32; 3];        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
    scope 1 {
        debug v => _1;                   // in scope 1 at ui/generic-associated-types/iterable.rs:39:9: 39:10
        let _16: &std::vec::Vec<i32>;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _17: &std::vec::Vec<i32>;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _40: &std::vec::Vec<i32>;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _41: &std::vec::Vec<i32>;    // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _60: &std::option::Option<&i32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _61: &std::option::Option<&i32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _82: &std::option::Option<&i32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _83: &std::option::Option<&i32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _96: &std::option::Option<&i32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        let mut _97: &std::option::Option<&i32>; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        scope 3 {
            debug left_val => _16;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _17;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _22: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _22;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 5 {
            debug left_val => _40;       // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _41;      // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _46: core::panicking::AssertKind; // in scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 6 {
                debug kind => _46;       // in scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 7 {
            debug left_val => _60;       // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _61;      // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _66: core::panicking::AssertKind; // in scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 8 {
                debug kind => _66;       // in scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
        scope 9 {
            debug left_val => _82;       // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _83;      // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _88: core::panicking::AssertKind; // in scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 10 {
                debug kind => _88;       // in scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _4 = const 12_usize;             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _5 = const 4_usize;              // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _6 = alloc::alloc::exchange_malloc(move _4, move _5) -> bb1; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
                                         // + literal: Const { ty: unsafe fn(usize, usize) -> *mut u8 {alloc::alloc::exchange_malloc}, val: Value(<ZST>) }
    }

    bb1: {
        _7 = ShallowInitBox(move _6, [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _98 = (((_7.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        (*_98) = [const 1_i32, const 2_i32, const 3_i32]; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:37: 52:46
        _3 = move _7;                    // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _2 = move _3 as std::boxed::Box<[i32]> (Pointer(Unsize)); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:52:13: 52:47
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> bb2; // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 53:10
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/alloc/src/macros.rs:50:36: 50:51
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Box<[i32]>) -> Vec<i32> {slice::<impl [i32]>::into_vec::<std::alloc::Global>}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &_1;                        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _15 = &_1;                       // scope 1 at ui/generic-associated-types/iterable.rs:40:29: 40:31
        _14 = _15;                       // scope 1 at ui/generic-associated-types/iterable.rs:40:29: 40:31
        _13 = make_iter::<Vec<i32>>(move _14) -> [return: bb3, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:40:19: 40:32
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:40:19: 40:28
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> <Vec<i32> as Iterable>::Iter<'a> {make_iter::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb3: {
        _12 = <std::slice::Iter<'_, i32> as Iterator>::copied::<'_, i32>(move _13) -> [return: bb4, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:40:19: 40:41
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:40:33: 40:39
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i32>) -> Copied<std::slice::Iter<'_, i32>> {<std::slice::Iter<'_, i32> as Iterator>::copied::<'_, i32>}, val: Value(<ZST>) }
    }

    bb4: {
        _11 = <Copied<std::slice::Iter<'_, i32>> as Iterator>::collect::<Vec<i32>>(move _12) -> [return: bb5, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:40:19: 40:61
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:40:42: 40:49
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Copied<std::slice::Iter<'_, i32>>) -> Vec<i32> {<Copied<std::slice::Iter<'_, i32>> as Iterator>::collect::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb5: {
        _10 = &_11;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _8 = (move _9, move _10);        // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _16 = (_8.0: &std::vec::Vec<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _17 = (_8.1: &std::vec::Vec<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _20 = _16;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _21 = _17;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _19 = <Vec<i32> as PartialEq>::eq(move _20, move _21) -> [return: bb6, unwind: bb29]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b Vec<i32>) -> bool {<Vec<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb6: {
        _18 = Not(move _19);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _18) -> [0: bb8, otherwise: bb7]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb7: {
        _22 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _24 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = _16;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _25 = _26;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _28 = _17;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _23 = core::panicking::assert_failed::<Vec<i32>, Vec<i32>>(move _24, move _25, move _27, move _29) -> bb29; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b Vec<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, Vec<i32>>}, val: Value(<ZST>) }
    }

    bb8: {
        drop(_11) -> [return: bb9, unwind: bb30]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb9: {
        _31 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _39 = &_1;                       // scope 1 at ui/generic-associated-types/iterable.rs:41:31: 41:32
        _38 = <Vec<i32> as Deref>::deref(move _39) -> [return: bb10, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:41:30: 41:32
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:41:30: 41:32
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> &'a <Vec<i32> as Deref>::Target {<Vec<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb10: {
        _37 = _38;                       // scope 1 at ui/generic-associated-types/iterable.rs:41:29: 41:32
        _36 = _37;                       // scope 1 at ui/generic-associated-types/iterable.rs:41:29: 41:32
        _35 = make_iter::<[i32]>(move _36) -> [return: bb11, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:41:19: 41:33
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:41:19: 41:28
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> <[i32] as Iterable>::Iter<'a> {make_iter::<[i32]>}, val: Value(<ZST>) }
    }

    bb11: {
        _34 = <std::slice::Iter<'_, i32> as Iterator>::copied::<'_, i32>(move _35) -> [return: bb12, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:41:19: 41:42
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:41:34: 41:40
                                         // + literal: Const { ty: fn(std::slice::Iter<'_, i32>) -> Copied<std::slice::Iter<'_, i32>> {<std::slice::Iter<'_, i32> as Iterator>::copied::<'_, i32>}, val: Value(<ZST>) }
    }

    bb12: {
        _33 = <Copied<std::slice::Iter<'_, i32>> as Iterator>::collect::<Vec<i32>>(move _34) -> [return: bb13, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:41:19: 41:62
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:41:43: 41:50
                                         // + user_ty: UserType(2)
                                         // + literal: Const { ty: fn(Copied<std::slice::Iter<'_, i32>>) -> Vec<i32> {<Copied<std::slice::Iter<'_, i32>> as Iterator>::collect::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb13: {
        _32 = &_33;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _30 = (move _31, move _32);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _40 = (_30.0: &std::vec::Vec<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _41 = (_30.1: &std::vec::Vec<i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _44 = _40;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _45 = _41;                       // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _43 = <Vec<i32> as PartialEq>::eq(move _44, move _45) -> [return: bb14, unwind: bb28]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Vec<i32>, &'b Vec<i32>) -> bool {<Vec<i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb14: {
        _42 = Not(move _43);             // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _42) -> [0: bb16, otherwise: bb15]; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb15: {
        _46 = const core::panicking::AssertKind::Eq; // scope 5 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _48 = const core::panicking::AssertKind::Eq; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _50 = _40;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _49 = _50;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _52 = _41;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _51 = _52;                       // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _53 = Option::<Arguments<'_>>::None; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _47 = core::panicking::assert_failed::<Vec<i32>, Vec<i32>>(move _48, move _49, move _51, move _53) -> bb28; // scope 6 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Vec<i32>, &'b Vec<i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Vec<i32>, Vec<i32>>}, val: Value(<ZST>) }
    }

    bb16: {
        drop(_33) -> [return: bb17, unwind: bb30]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb17: {
        _97 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&i32>, val: Unevaluated(main, [], Some(promoted[1])) }
        _55 = _97;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _59 = &_1;                       // scope 1 at ui/generic-associated-types/iterable.rs:42:36: 42:38
        _58 = _59;                       // scope 1 at ui/generic-associated-types/iterable.rs:42:36: 42:38
        _57 = get_first::<Vec<i32>>(move _58) -> [return: bb18, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:42:26: 42:39
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:42:26: 42:35
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> Option<<Vec<i32> as Iterable>::Item<'a>> {get_first::<Vec<i32>>}, val: Value(<ZST>) }
    }

    bb18: {
        _56 = &_57;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _54 = (move _55, move _56);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _60 = (_54.0: &std::option::Option<&i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _61 = (_54.1: &std::option::Option<&i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _64 = _60;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _65 = _61;                       // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _63 = <Option<&i32> as PartialEq>::eq(move _64, move _65) -> [return: bb19, unwind: bb30]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&i32>, &'b Option<&i32>) -> bool {<Option<&i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb19: {
        _62 = Not(move _63);             // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _62) -> [0: bb21, otherwise: bb20]; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb20: {
        _66 = const core::panicking::AssertKind::Eq; // scope 7 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _68 = const core::panicking::AssertKind::Eq; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _70 = _60;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _69 = _70;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _72 = _61;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _71 = _72;                       // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _73 = Option::<Arguments<'_>>::None; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _67 = core::panicking::assert_failed::<Option<&i32>, Option<&i32>>(move _68, move _69, move _71, move _73) -> bb30; // scope 8 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&i32>, &'b Option<&i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&i32>, Option<&i32>>}, val: Value(<ZST>) }
    }

    bb21: {
        _96 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
                                         // + literal: Const { ty: &Option<&i32>, val: Unevaluated(main, [], Some(promoted[0])) }
        _75 = _96;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _81 = &_1;                       // scope 1 at ui/generic-associated-types/iterable.rs:43:38: 43:39
        _80 = <Vec<i32> as Deref>::deref(move _81) -> [return: bb22, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:43:37: 43:39
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:43:37: 43:39
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> &'a <Vec<i32> as Deref>::Target {<Vec<i32> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb22: {
        _79 = _80;                       // scope 1 at ui/generic-associated-types/iterable.rs:43:36: 43:39
        _78 = _79;                       // scope 1 at ui/generic-associated-types/iterable.rs:43:36: 43:39
        _77 = get_first::<[i32]>(move _78) -> [return: bb23, unwind: bb30]; // scope 1 at ui/generic-associated-types/iterable.rs:43:26: 43:40
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/iterable.rs:43:26: 43:35
                                         // + literal: Const { ty: for<'a> fn(&'a [i32]) -> Option<<[i32] as Iterable>::Item<'a>> {get_first::<[i32]>}, val: Value(<ZST>) }
    }

    bb23: {
        _76 = &_77;                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _74 = (move _75, move _76);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _82 = (_74.0: &std::option::Option<&i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _83 = (_74.1: &std::option::Option<&i32>); // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _86 = _82;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _87 = _83;                       // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _85 = <Option<&i32> as PartialEq>::eq(move _86, move _87) -> [return: bb24, unwind: bb30]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a Option<&i32>, &'b Option<&i32>) -> bool {<Option<&i32> as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb24: {
        _84 = Not(move _85);             // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _84) -> [0: bb26, otherwise: bb25]; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb25: {
        _88 = const core::panicking::AssertKind::Eq; // scope 9 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _90 = const core::panicking::AssertKind::Eq; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _92 = _82;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _91 = _92;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _94 = _83;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _93 = _94;                       // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _95 = Option::<Arguments<'_>>::None; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _89 = core::panicking::assert_failed::<Option<&i32>, Option<&i32>>(move _90, move _91, move _93, move _95) -> bb30; // scope 10 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a Option<&i32>, &'b Option<&i32>, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<Option<&i32>, Option<&i32>>}, val: Value(<ZST>) }
    }

    bb26: {
        drop(_1) -> bb27;                // scope 0 at ui/generic-associated-types/iterable.rs:44:1: 44:2
    }

    bb27: {
        return;                          // scope 0 at ui/generic-associated-types/iterable.rs:44:2: 44:2
    }

    bb28 (cleanup): {
        drop(_33) -> bb30;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb29 (cleanup): {
        drop(_11) -> bb30;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:48:9: 48:10
    }

    bb30 (cleanup): {
        drop(_1) -> bb31;                // scope 0 at ui/generic-associated-types/iterable.rs:44:1: 44:2
    }

    bb31 (cleanup): {
        resume;                          // scope 0 at ui/generic-associated-types/iterable.rs:38:1: 44:2
    }
}

promoted[0] in main: &Option<&i32> = {
    let mut _0: &std::option::Option<&i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&i32>; // in scope 0 at ui/generic-associated-types/iterable.rs:43:16: 43:24
    let mut _2: &i32;                    // in scope 0 at ui/generic-associated-types/iterable.rs:43:21: 43:23
    let mut _3: i32;                     // in scope 0 at ui/generic-associated-types/iterable.rs:43:22: 43:23

    bb0: {
        _3 = const 1_i32;                // scope 0 at ui/generic-associated-types/iterable.rs:43:22: 43:23
        _2 = &_3;                        // scope 0 at ui/generic-associated-types/iterable.rs:43:21: 43:23
        _1 = Option::<&i32>::Some(move _2); // scope 0 at ui/generic-associated-types/iterable.rs:43:16: 43:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}

promoted[1] in main: &Option<&i32> = {
    let mut _0: &std::option::Option<&i32>; // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _1: std::option::Option<&i32>; // in scope 0 at ui/generic-associated-types/iterable.rs:42:16: 42:24
    let mut _2: &i32;                    // in scope 0 at ui/generic-associated-types/iterable.rs:42:21: 42:23
    let mut _3: i32;                     // in scope 0 at ui/generic-associated-types/iterable.rs:42:22: 42:23

    bb0: {
        _3 = const 1_i32;                // scope 0 at ui/generic-associated-types/iterable.rs:42:22: 42:23
        _2 = &_3;                        // scope 0 at ui/generic-associated-types/iterable.rs:42:21: 42:23
        _1 = Option::<&i32>::Some(move _2); // scope 0 at ui/generic-associated-types/iterable.rs:42:16: 42:24
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    }
}
