// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/generic-associated-types/iterable.rs:11:1: 11:28>::iter(_1: &Vec<T>) -> std::slice::Iter<'_, T> {
    debug self => _1;
    let mut _0: std::slice::Iter<'_, T>;
    let mut _2: &[T];
    let _3: &[T];

    bb0: {
        _3 = <Vec<T> as Index<RangeFull>>::index(_1, const RangeFull) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _3;
        _0 = core::slice::<impl [T]>::iter(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn <impl at ui/generic-associated-types/iterable.rs:21:1: 21:25>::iter(_1: &[T]) -> std::slice::Iter<'_, T> {
    debug self => _1;
    let mut _0: std::slice::Iter<'_, T>;

    bb0: {
        _0 = core::slice::<impl [T]>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn make_iter(_1: &I) -> <I as Iterable>::Iter<'_> {
    debug it => _1;
    let mut _0: <I as Iterable>::Iter<'_>;

    bb0: {
        _0 = <I as Iterable>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn get_first(_1: &I) -> Option<<I as Iterable>::Item<'_>> {
    debug it => _1;
    let mut _0: std::option::Option<<I as Iterable>::Item<'_>>;
    let mut _2: &mut <I as Iterable>::Iter<'_>;
    let mut _3: <I as Iterable>::Iter<'_>;

    bb0: {
        _3 = <I as Iterable>::iter(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &mut _3;
        _0 = <<I as Iterable>::Iter<'_> as Iterator>::next(move _2) -> [return: bb2, unwind: bb4];
    }

    bb2: {
        drop(_3) -> [return: bb3, unwind continue];
    }

    bb3: {
        return;
    }

    bb4 (cleanup): {
        drop(_3) -> [return: bb5, unwind terminate];
    }

    bb5 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: std::vec::Vec<i32>;
    let mut _2: std::boxed::Box<[i32]>;
    let mut _3: usize;
    let mut _4: usize;
    let mut _5: *mut u8;
    let mut _6: std::boxed::Box<[i32; 3]>;
    let mut _7: (&std::vec::Vec<i32>, &std::vec::Vec<i32>);
    let mut _8: &std::vec::Vec<i32>;
    let mut _9: &std::vec::Vec<i32>;
    let _10: std::vec::Vec<i32>;
    let mut _11: std::iter::Copied<std::slice::Iter<'_, i32>>;
    let mut _12: std::slice::Iter<'_, i32>;
    let _13: &std::vec::Vec<i32>;
    let mut _16: bool;
    let mut _17: bool;
    let _19: !;
    let mut _20: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _21: (&std::vec::Vec<i32>, &std::vec::Vec<i32>);
    let mut _22: &std::vec::Vec<i32>;
    let mut _23: &std::vec::Vec<i32>;
    let _24: std::vec::Vec<i32>;
    let mut _25: std::iter::Copied<std::slice::Iter<'_, i32>>;
    let mut _26: std::slice::Iter<'_, i32>;
    let _27: &[i32];
    let _28: &[i32];
    let mut _29: &std::vec::Vec<i32>;
    let mut _32: bool;
    let mut _33: bool;
    let _35: !;
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _37: (&std::option::Option<&i32>, &std::option::Option<&i32>);
    let mut _38: &std::option::Option<&i32>;
    let _39: std::option::Option<&i32>;
    let _40: &std::vec::Vec<i32>;
    let mut _43: bool;
    let mut _44: bool;
    let _46: !;
    let mut _47: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _48: (&std::option::Option<&i32>, &std::option::Option<&i32>);
    let mut _49: &std::option::Option<&i32>;
    let _50: std::option::Option<&i32>;
    let _51: &[i32];
    let _52: &[i32];
    let mut _53: &std::vec::Vec<i32>;
    let mut _56: bool;
    let mut _57: bool;
    let _59: !;
    let mut _60: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _63: *const [i32; 3];
    let mut _64: *const ();
    let mut _65: usize;
    let mut _66: usize;
    let mut _67: usize;
    let mut _68: usize;
    let mut _69: bool;
    scope 1 {
        debug v => _1;
        let _14: &std::vec::Vec<i32>;
        let _15: &std::vec::Vec<i32>;
        let _30: &std::vec::Vec<i32>;
        let _31: &std::vec::Vec<i32>;
        let _41: &std::option::Option<&i32>;
        let _42: &std::option::Option<&i32>;
        let _54: &std::option::Option<&i32>;
        let _55: &std::option::Option<&i32>;
        let mut _61: &std::option::Option<&i32>;
        let mut _62: &std::option::Option<&i32>;
        scope 3 {
            debug left_val => _14;
            debug right_val => _15;
            let _18: core::panicking::AssertKind;
            scope 4 {
                debug kind => _18;
            }
        }
        scope 5 {
            debug left_val => _30;
            debug right_val => _31;
            let _34: core::panicking::AssertKind;
            scope 6 {
                debug kind => _34;
            }
        }
        scope 7 {
            debug left_val => _41;
            debug right_val => _42;
            let _45: core::panicking::AssertKind;
            scope 8 {
                debug kind => _45;
            }
        }
        scope 9 {
            debug left_val => _54;
            debug right_val => _55;
            let _58: core::panicking::AssertKind;
            scope 10 {
                debug kind => _58;
            }
        }
    }
    scope 2 {
    }

    bb0: {
        _3 = SizeOf([i32; 3]);
        _4 = AlignOf([i32; 3]);
        _5 = alloc::alloc::exchange_malloc(move _3, move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _6 = ShallowInitBox(move _5, [i32; 3]);
        _63 = (((_6.0: std::ptr::Unique<[i32; 3]>).0: std::ptr::NonNull<[i32; 3]>).0: *const [i32; 3]);
        _64 = _63 as *const () (PtrToPtr);
        _65 = _64 as usize (Transmute);
        _66 = AlignOf(i32);
        _67 = Sub(_66, const 1_usize);
        _68 = BitAnd(_65, _67);
        _69 = Eq(_68, const 0_usize);
        assert(_69, "misaligned pointer dereference: address must be a multiple of {} but is {}", _66, _65) -> [success: bb32, unwind unreachable];
    }

    bb2: {
        _8 = &_1;
        _13 = &_1;
        _12 = make_iter::<Vec<i32>>(_13) -> [return: bb3, unwind: bb30];
    }

    bb3: {
        _11 = <std::slice::Iter<'_, i32> as Iterator>::copied::<'_, i32>(move _12) -> [return: bb4, unwind: bb30];
    }

    bb4: {
        _10 = <Copied<std::slice::Iter<'_, i32>> as Iterator>::collect::<Vec<i32>>(move _11) -> [return: bb5, unwind: bb30];
    }

    bb5: {
        _9 = &_10;
        _7 = (move _8, move _9);
        _14 = (_7.0: &std::vec::Vec<i32>);
        _15 = (_7.1: &std::vec::Vec<i32>);
        _17 = <Vec<i32> as PartialEq>::eq(_14, _15) -> [return: bb6, unwind: bb29];
    }

    bb6: {
        _16 = Not(move _17);
        switchInt(move _16) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _18 = core::panicking::AssertKind::Eq;
        _20 = Option::<Arguments<'_>>::None;
        _19 = core::panicking::assert_failed::<Vec<i32>, Vec<i32>>(move _18, _14, _15, move _20) -> bb29;
    }

    bb8: {
        drop(_10) -> [return: bb9, unwind: bb30];
    }

    bb9: {
        _22 = &_1;
        _29 = &_1;
        _28 = <Vec<i32> as Deref>::deref(move _29) -> [return: bb10, unwind: bb30];
    }

    bb10: {
        _27 = _28;
        _26 = make_iter::<[i32]>(_27) -> [return: bb11, unwind: bb30];
    }

    bb11: {
        _25 = <std::slice::Iter<'_, i32> as Iterator>::copied::<'_, i32>(move _26) -> [return: bb12, unwind: bb30];
    }

    bb12: {
        _24 = <Copied<std::slice::Iter<'_, i32>> as Iterator>::collect::<Vec<i32>>(move _25) -> [return: bb13, unwind: bb30];
    }

    bb13: {
        _23 = &_24;
        _21 = (move _22, move _23);
        _30 = (_21.0: &std::vec::Vec<i32>);
        _31 = (_21.1: &std::vec::Vec<i32>);
        _33 = <Vec<i32> as PartialEq>::eq(_30, _31) -> [return: bb14, unwind: bb28];
    }

    bb14: {
        _32 = Not(move _33);
        switchInt(move _32) -> [0: bb16, otherwise: bb15];
    }

    bb15: {
        _34 = core::panicking::AssertKind::Eq;
        _36 = Option::<Arguments<'_>>::None;
        _35 = core::panicking::assert_failed::<Vec<i32>, Vec<i32>>(move _34, _30, _31, move _36) -> bb28;
    }

    bb16: {
        drop(_24) -> [return: bb17, unwind: bb30];
    }

    bb17: {
        _62 = const _;
        _40 = &_1;
        _39 = get_first::<Vec<i32>>(_40) -> [return: bb18, unwind: bb30];
    }

    bb18: {
        _38 = &_39;
        _37 = (_62, move _38);
        _41 = (_37.0: &std::option::Option<&i32>);
        _42 = (_37.1: &std::option::Option<&i32>);
        _44 = <Option<&i32> as PartialEq>::eq(_41, _42) -> [return: bb19, unwind: bb30];
    }

    bb19: {
        _43 = Not(move _44);
        switchInt(move _43) -> [0: bb21, otherwise: bb20];
    }

    bb20: {
        _45 = core::panicking::AssertKind::Eq;
        _47 = Option::<Arguments<'_>>::None;
        _46 = core::panicking::assert_failed::<Option<&i32>, Option<&i32>>(move _45, _41, _42, move _47) -> bb30;
    }

    bb21: {
        _61 = const _;
        _53 = &_1;
        _52 = <Vec<i32> as Deref>::deref(move _53) -> [return: bb22, unwind: bb30];
    }

    bb22: {
        _51 = _52;
        _50 = get_first::<[i32]>(_51) -> [return: bb23, unwind: bb30];
    }

    bb23: {
        _49 = &_50;
        _48 = (_61, move _49);
        _54 = (_48.0: &std::option::Option<&i32>);
        _55 = (_48.1: &std::option::Option<&i32>);
        _57 = <Option<&i32> as PartialEq>::eq(_54, _55) -> [return: bb24, unwind: bb30];
    }

    bb24: {
        _56 = Not(move _57);
        switchInt(move _56) -> [0: bb26, otherwise: bb25];
    }

    bb25: {
        _58 = core::panicking::AssertKind::Eq;
        _60 = Option::<Arguments<'_>>::None;
        _59 = core::panicking::assert_failed::<Option<&i32>, Option<&i32>>(move _58, _54, _55, move _60) -> bb30;
    }

    bb26: {
        drop(_1) -> [return: bb27, unwind continue];
    }

    bb27: {
        return;
    }

    bb28 (cleanup): {
        drop(_24) -> [return: bb30, unwind terminate];
    }

    bb29 (cleanup): {
        drop(_10) -> [return: bb30, unwind terminate];
    }

    bb30 (cleanup): {
        drop(_1) -> [return: bb31, unwind terminate];
    }

    bb31 (cleanup): {
        resume;
    }

    bb32: {
        (*_63) = [const 1_i32, const 2_i32, const 3_i32];
        _2 = move _6 as std::boxed::Box<[i32]> (Pointer(Unsize));
        _1 = slice::<impl [i32]>::into_vec::<std::alloc::Global>(move _2) -> [return: bb2, unwind continue];
    }
}

promoted[0] in main: &Option<&i32> = {
    let mut _0: &std::option::Option<&i32>;
    let mut _1: std::option::Option<&i32>;
    let mut _2: &i32;
    let mut _3: i32;

    bb0: {
        _3 = const 1_i32;
        _2 = &_3;
        _1 = Option::<&i32>::Some(move _2);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &Option<&i32> = {
    let mut _0: &std::option::Option<&i32>;
    let mut _1: std::option::Option<&i32>;
    let mut _2: &i32;
    let mut _3: i32;

    bb0: {
        _3 = const 1_i32;
        _2 = &_3;
        _1 = Option::<&i32>::Some(move _2);
        _0 = &_1;
        return;
    }
}
