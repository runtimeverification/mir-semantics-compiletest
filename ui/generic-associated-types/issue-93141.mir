// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn tuple() -> (Option<T>,) {
    let mut _0: (std::option::Option<T>,); // return place in scope 0 at ui/generic-associated-types/issue-93141.rs:9:18: 9:30
    let mut _1: std::option::Option<T>;  // in scope 0 at ui/generic-associated-types/issue-93141.rs:9:34: 9:46

    bb0: {
        _1 = Option::<T>::None;          // scope 0 at ui/generic-associated-types/issue-93141.rs:9:34: 9:46
        _0 = (move _1,);                 // scope 0 at ui/generic-associated-types/issue-93141.rs:9:33: 9:48
        return;                          // scope 0 at ui/generic-associated-types/issue-93141.rs:9:50: 9:50
    }
}

fn <impl at ui/generic-associated-types/issue-93141.rs:16:1: 16:13>::fail1() -> Handle<FooImpl> {
    let mut _0: Handle<FooImpl>;         // return place in scope 0 at ui/generic-associated-types/issue-93141.rs:17:23: 17:35
    let _1: std::option::Option<std::boxed::Box<dyn for<'a, 'c> std::ops::Fn(&'a mut <FooImpl as Fooey>::Context<'c>)>>; // in scope 0 at ui/generic-associated-types/issue-93141.rs:18:14: 18:16
    let mut _2: (std::option::Option<std::boxed::Box<dyn for<'a, 'c> std::ops::Fn(&'a mut &'c ())>>,); // in scope 0 at ui/generic-associated-types/issue-93141.rs:18:21: 18:28
    let mut _3: std::option::Option<std::boxed::Box<dyn for<'a, 'c> std::ops::Fn(&'a mut <FooImpl as Fooey>::Context<'c>)>>; // in scope 0 at ui/generic-associated-types/issue-93141.rs:19:16: 19:18
    scope 1 {
        debug tx => _1;                  // in scope 1 at ui/generic-associated-types/issue-93141.rs:18:14: 18:16
    }

    bb0: {
        _2 = tuple::<Box<dyn for<'a, 'c> Fn(&'a mut &'c ())>>() -> bb1; // scope 0 at ui/generic-associated-types/issue-93141.rs:18:21: 18:28
                                         // mir::Constant
                                         // + span: ui/generic-associated-types/issue-93141.rs:18:21: 18:26
                                         // + literal: Const { ty: fn() -> (Option<Box<dyn for<'a, 'c> Fn(&'a mut &'c ())>>,) {tuple::<Box<dyn for<'a, 'c> Fn(&'a mut &'c ())>>}, val: Value(<ZST>) }
    }

    bb1: {
        _1 = move (_2.0: std::option::Option<std::boxed::Box<dyn for<'a, 'c> std::ops::Fn(&'a mut <FooImpl as Fooey>::Context<'c>)>>); // scope 0 at ui/generic-associated-types/issue-93141.rs:18:14: 18:16
        _3 = move _1;                    // scope 1 at ui/generic-associated-types/issue-93141.rs:19:16: 19:18
        _0 = Handle::<FooImpl>(move _3); // scope 1 at ui/generic-associated-types/issue-93141.rs:19:9: 19:19
        return;                          // scope 0 at ui/generic-associated-types/issue-93141.rs:20:6: 20:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/generic-associated-types/issue-93141.rs:23:11: 23:11

    bb0: {
        return;                          // scope 0 at ui/generic-associated-types/issue-93141.rs:23:13: 23:13
    }
}

fn Handle(_1: Option<Box<dyn for<'a, 'b> Fn(&'a mut <E as Fooey>::Context<'b>)>>) -> Handle<E> {
    let mut _0: Handle<E>;               // return place in scope 0 at ui/generic-associated-types/issue-93141.rs:7:1: 7:28

    bb0: {
        _0 = Handle::<E>(move _1);       // scope 0 at ui/generic-associated-types/issue-93141.rs:7:1: 7:28
        return;                          // scope 0 at ui/generic-associated-types/issue-93141.rs:7:1: 7:28
    }
}

// MIR FOR CTFE
fn Handle(_1: Option<Box<dyn for<'a, 'b> Fn(&'a mut <E as Fooey>::Context<'b>)>>) -> Handle<E> {
    let mut _0: Handle<E>;               // return place in scope 0 at ui/generic-associated-types/issue-93141.rs:7:1: 7:28

    bb0: {
        _0 = Handle::<E>(move _1);       // scope 0 at ui/generic-associated-types/issue-93141.rs:7:1: 7:28
        return;                          // scope 0 at ui/generic-associated-types/issue-93141.rs:7:1: 7:28
    }
}
