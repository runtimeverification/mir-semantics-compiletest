// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-two-trait-defer-resolution-1.rs:12:1: 12:22>::foo(_1: &Vec<u32>) -> i32 {
    debug self => _1;                    // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:13:12: 13:17
    let mut _0: i32;                     // return place in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:13:22: 13:25

    bb0: {
        _0 = const 1_i32;                // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:13:27: 13:28
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:13:29: 13:29
    }
}

fn <impl at ui/methods/method-two-trait-defer-resolution-1.rs:16:1: 16:22>::foo(_1: &Vec<i32>) -> i32 {
    debug self => _1;                    // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:17:12: 17:17
    let mut _0: i32;                     // return place in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:17:22: 17:25

    bb0: {
        _0 = const 2_i32;                // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:17:27: 17:28
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:17:29: 17:29
    }
}

fn call_foo_uint() -> i32 {
    let mut _1: std::vec::Vec<u32>;      // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:21:9: 21:14
    let mut _2: &std::vec::Vec<u32>;     // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:22:13: 22:20
    let _3: ();                          // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:23:5: 23:17
    let mut _4: &mut std::vec::Vec<u32>; // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:23:5: 23:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/methods/method-two-trait-defer-resolution-1.rs:21:9: 21:14
        let mut _0: i32;                 // return place in scope 1 at ui/methods/method-two-trait-defer-resolution-1.rs:22:9: 22:10
        scope 2 {
            debug y => _0;               // in scope 2 at ui/methods/method-two-trait-defer-resolution-1.rs:22:9: 22:10
        }
    }

    bb0: {
        _1 = Vec::<u32>::new() -> bb1;   // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:21:17: 21:27
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-1.rs:21:17: 21:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<u32> {Vec::<u32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_1;                        // scope 1 at ui/methods/method-two-trait-defer-resolution-1.rs:22:13: 22:20
        _0 = <Vec<u32> as foo>::foo(move _2) -> [return: bb2, unwind: bb5]; // scope 1 at ui/methods/method-two-trait-defer-resolution-1.rs:22:13: 22:20
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-1.rs:22:15: 22:18
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<u32>) -> i32 {<Vec<u32> as foo>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut _1;                    // scope 2 at ui/methods/method-two-trait-defer-resolution-1.rs:23:5: 23:17
        _3 = Vec::<u32>::push(move _4, const 0_u32) -> [return: bb3, unwind: bb5]; // scope 2 at ui/methods/method-two-trait-defer-resolution-1.rs:23:5: 23:17
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-1.rs:23:7: 23:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<u32>, u32) {Vec::<u32>::push}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:25:1: 25:2
    }

    bb4: {
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:25:2: 25:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:25:1: 25:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:20:1: 25:2
    }
}

fn call_foo_int() -> i32 {
    let mut _1: std::vec::Vec<i32>;      // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:28:9: 28:14
    let mut _2: &std::vec::Vec<i32>;     // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:29:13: 29:20
    let _3: ();                          // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:30:5: 30:17
    let mut _4: &mut std::vec::Vec<i32>; // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:30:5: 30:17
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/methods/method-two-trait-defer-resolution-1.rs:28:9: 28:14
        let mut _0: i32;                 // return place in scope 1 at ui/methods/method-two-trait-defer-resolution-1.rs:29:9: 29:10
        scope 2 {
            debug y => _0;               // in scope 2 at ui/methods/method-two-trait-defer-resolution-1.rs:29:9: 29:10
        }
    }

    bb0: {
        _1 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:28:17: 28:27
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-1.rs:28:17: 28:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_1;                        // scope 1 at ui/methods/method-two-trait-defer-resolution-1.rs:29:13: 29:20
        _0 = <Vec<i32> as foo>::foo(move _2) -> [return: bb2, unwind: bb5]; // scope 1 at ui/methods/method-two-trait-defer-resolution-1.rs:29:13: 29:20
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-1.rs:29:15: 29:18
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> i32 {<Vec<i32> as foo>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut _1;                    // scope 2 at ui/methods/method-two-trait-defer-resolution-1.rs:30:5: 30:17
        _3 = Vec::<i32>::push(move _4, const 0_i32) -> [return: bb3, unwind: bb5]; // scope 2 at ui/methods/method-two-trait-defer-resolution-1.rs:30:5: 30:17
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-1.rs:30:7: 30:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:32:1: 32:2
    }

    bb4: {
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:32:2: 32:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:32:1: 32:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:27:1: 32:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:34:11: 34:11
    let mut _1: (&i32, &i32);            // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: i32;                         // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:35:16: 35:31
    let mut _4: &i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &i32;                        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: i32;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&i32, &i32);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: i32;                        // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:36:16: 36:30
    let mut _22: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _23: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: i32;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &i32;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: &i32;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = call_foo_uint() -> bb1;     // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:35:16: 35:31
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-1.rs:35:16: 35:29
                                         // + literal: Const { ty: fn() -> i32 {call_foo_uint}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _38 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _38;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &i32);               // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 1_i32;               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<i32, i32>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = call_foo_int() -> bb4;     // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:36:16: 36:30
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-1.rs:36:16: 36:28
                                         // + literal: Const { ty: fn() -> i32 {call_foo_int}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _37 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &i32, val: Unevaluated(main, [], Some(promoted[0])) }
        _22 = _37;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _22);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &i32);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = (*_23);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = const 2_i32;               // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = Eq(move _27, move _28);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<i32, i32>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a i32, &'b i32, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<i32, i32>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:37:2: 37:2
    }
}

promoted[0] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:36:32: 36:33

    bb0: {
        _1 = const 2_i32;                // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:36:32: 36:33
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &i32 = {
    let mut _0: &i32;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: i32;                     // in scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:35:33: 35:34

    bb0: {
        _1 = const 1_i32;                // scope 0 at ui/methods/method-two-trait-defer-resolution-1.rs:35:33: 35:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
