// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn MyTrait1::my_fn(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:13:14: 13:19
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:13:21: 13:21

    bb0: {
        return;                          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:13:23: 13:23
    }
}

fn <impl at ui/methods/method-probe-no-guessing-dyn-trait.rs:20:1: 20:23>::deref(_1: &Foo<()>) -> &dyn MyTrait1 {
    debug self => _1;                    // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:22:14: 22:19
    let mut _0: &dyn MyTrait1;           // return place in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:22:24: 22:49
    let mut _2: !;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50

    bb0: {
        _2 = begin_panic::<&str>(const "explicit panic"); // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:50
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:9: 19:32
                                         // + literal: Const { ty: fn(&str) -> ! {begin_panic::<&str>}, val: Value(<ZST>) }
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/std/src/panic.rs:19:33: 19:49
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
    }
}

fn MyTrait2::my_fn2(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:32:15: 32:20
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:32:22: 32:22

    bb0: {
        return;                          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:32:24: 32:24
    }
}

fn <impl at ui/methods/method-probe-no-guessing-dyn-trait.rs:37:1: 37:23>::deref(_1: &Bar<u8>) -> &dyn MyTrait2 {
    debug self => _1;                    // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:39:14: 39:19
    let mut _0: &dyn MyTrait2;           // return place in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:39:24: 39:49
    let mut _2: &dyn MyTrait2;           // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:40:9: 40:16
    let _3: &dyn MyTrait2;               // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:40:9: 40:16
    let mut _4: &u32;                    // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:40:9: 40:16
    let _5: &u32;                        // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:40:9: 40:16

    bb0: {
        _5 = &((*_1).1: u32);            // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:40:9: 40:16
        _4 = _5;                         // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:40:9: 40:16
        _3 = move _4 as &dyn MyTrait2 (Pointer(Unsize)); // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:40:9: 40:16
        _2 = _3;                         // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:40:9: 40:16
        _0 = move _2 as &dyn MyTrait2 (Pointer(Unsize)); // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:40:9: 40:16
        return;                          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:41:6: 41:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:46:11: 46:11
    let mut _1: std::option::Option<Foo<u32>>; // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:47:9: 47:16
    let mut _4: bool;                    // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:51:12: 51:23
    let mut _5: bool;                    // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:51:13: 51:23
    let _6: ();                          // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:42
    let mut _7: &Foo<u32>;               // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:42
    let _8: &Foo<u32>;                   // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:34
    let mut _9: std::option::Option<&Foo<u32>>; // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:25
    let mut _10: &std::option::Option<Foo<u32>>; // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:25
    let _11: ();                         // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:43
    let mut _12: &dyn MyTrait2;          // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:43
    let _13: &dyn MyTrait2;              // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:43
    let mut _14: &Bar<u8>;               // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:43
    let _15: &Bar<u8>;                   // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:34
    let mut _16: std::option::Option<&Bar<u8>>; // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:25
    let mut _17: &std::option::Option<Bar<u8>>; // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:25
    let mut _18: std::option::Option<Foo<u32>>; // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:56:15: 56:27
    let mut _19: Foo<u32>;               // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:56:20: 56:26
    let mut _20: std::option::Option<Bar<u8>>; // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:57:15: 57:47
    let mut _21: Bar<u8>;                // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:57:20: 57:46
    let mut _22: u8;                     // in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:57:24: 57:42
    scope 1 {
        debug foo => _1;                 // in scope 1 at ui/methods/method-probe-no-guessing-dyn-trait.rs:47:9: 47:16
        let mut _2: std::option::Option<Bar<u8>>; // in scope 1 at ui/methods/method-probe-no-guessing-dyn-trait.rs:48:9: 48:16
        scope 2 {
            debug bar => _2;             // in scope 2 at ui/methods/method-probe-no-guessing-dyn-trait.rs:48:9: 48:16
            let mut _3: bool;            // in scope 2 at ui/methods/method-probe-no-guessing-dyn-trait.rs:49:9: 49:23
            scope 3 {
                debug first_iter => _3;  // in scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:49:9: 49:23
            }
        }
    }

    bb0: {
        _1 = Option::<Foo<u32>>::None;   // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:47:35: 47:39
        _2 = Option::<Bar<u8>>::None;    // scope 1 at ui/methods/method-probe-no-guessing-dyn-trait.rs:48:35: 48:39
        _3 = const true;                 // scope 2 at ui/methods/method-probe-no-guessing-dyn-trait.rs:49:26: 49:30
        goto -> bb1;                     // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:50:5: 59:6
    }

    bb1: {
        _5 = _3;                         // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:51:13: 51:23
        _4 = Not(move _5);               // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:51:12: 51:23
        switchInt(move _4) -> [0: bb10, otherwise: bb2]; // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:51:12: 51:23
    }

    bb2: {
        _10 = &_1;                       // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:25
        _9 = Option::<Foo<u32>>::as_ref(move _10) -> bb3; // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:25
                                         // mir::Constant
                                         // + span: ui/methods/method-probe-no-guessing-dyn-trait.rs:52:17: 52:23
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Foo<u32>>) -> Option<&'a Foo<u32>> {Option::<Foo<u32>>::as_ref}, val: Value(<ZST>) }
    }

    bb3: {
        _8 = Option::<&Foo<u32>>::unwrap(move _9) -> bb4; // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:34
                                         // mir::Constant
                                         // + span: ui/methods/method-probe-no-guessing-dyn-trait.rs:52:26: 52:32
                                         // + literal: Const { ty: fn(Option<&Foo<u32>>) -> &Foo<u32> {Option::<&Foo<u32>>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _7 = _8;                         // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:42
        _6 = <Foo<u32> as MyTrait1>::my_fn(move _7) -> bb5; // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:52:13: 52:42
                                         // mir::Constant
                                         // + span: ui/methods/method-probe-no-guessing-dyn-trait.rs:52:35: 52:40
                                         // + literal: Const { ty: for<'a> fn(&'a Foo<u32>) {<Foo<u32> as MyTrait1>::my_fn}, val: Value(<ZST>) }
    }

    bb5: {
        _17 = &_2;                       // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:25
        _16 = Option::<Bar<u8>>::as_ref(move _17) -> bb6; // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:25
                                         // mir::Constant
                                         // + span: ui/methods/method-probe-no-guessing-dyn-trait.rs:53:17: 53:23
                                         // + literal: Const { ty: for<'a> fn(&'a Option<Bar<u8>>) -> Option<&'a Bar<u8>> {Option::<Bar<u8>>::as_ref}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = Option::<&Bar<u8>>::unwrap(move _16) -> bb7; // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:34
                                         // mir::Constant
                                         // + span: ui/methods/method-probe-no-guessing-dyn-trait.rs:53:26: 53:32
                                         // + literal: Const { ty: fn(Option<&Bar<u8>>) -> &Bar<u8> {Option::<&Bar<u8>>::unwrap}, val: Value(<ZST>) }
    }

    bb7: {
        _14 = _15;                       // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:43
        _13 = <Bar<u8> as Deref>::deref(move _14) -> bb8; // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:43
                                         // mir::Constant
                                         // + span: ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:43
                                         // + literal: Const { ty: for<'a> fn(&'a Bar<u8>) -> &'a <Bar<u8> as Deref>::Target {<Bar<u8> as Deref>::deref}, val: Value(<ZST>) }
    }

    bb8: {
        _12 = _13;                       // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:43
        _11 = <dyn MyTrait2 as MyTrait2>::my_fn2(move _12) -> bb9; // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:53:13: 53:43
                                         // mir::Constant
                                         // + span: ui/methods/method-probe-no-guessing-dyn-trait.rs:53:35: 53:41
                                         // + literal: Const { ty: for<'a> fn(&'a dyn MyTrait2) {<dyn MyTrait2 as MyTrait2>::my_fn2}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:60:2: 60:2
    }

    bb10: {
        _19 = const Foo::<u32>(0_u32);   // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:56:20: 56:26
                                         // mir::Constant
                                         // + span: ui/methods/method-probe-no-guessing-dyn-trait.rs:56:20: 56:26
                                         // + literal: Const { ty: Foo<u32>, val: Value(Scalar(0x00000000)) }
        _18 = Option::<Foo<u32>>::Some(move _19); // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:56:15: 56:27
        _1 = move _18;                   // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:56:9: 56:27
        _22 = <u8 as Default>::default() -> bb11; // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:57:24: 57:42
                                         // mir::Constant
                                         // + span: ui/methods/method-probe-no-guessing-dyn-trait.rs:57:24: 57:40
                                         // + literal: Const { ty: fn() -> u8 {<u8 as Default>::default}, val: Value(<ZST>) }
    }

    bb11: {
        _21 = Bar::<u8>(move _22, const 0_u32); // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:57:20: 57:46
        _20 = Option::<Bar<u8>>::Some(move _21); // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:57:15: 57:47
        _2 = move _20;                   // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:57:9: 57:47
        _3 = const false;                // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:58:9: 58:27
        goto -> bb1;                     // scope 3 at ui/methods/method-probe-no-guessing-dyn-trait.rs:50:5: 59:6
    }
}

fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:18:1: 18:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:18:1: 18:14
        return;                          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:18:1: 18:14
    }
}

// MIR FOR CTFE
fn Foo(_1: T) -> Foo<T> {
    let mut _0: Foo<T>;                  // return place in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:18:1: 18:14

    bb0: {
        _0 = Foo::<T>(move _1);          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:18:1: 18:14
        return;                          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:18:1: 18:14
    }
}

fn Bar(_1: T, _2: u32) -> Bar<T> {
    let mut _0: Bar<T>;                  // return place in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:36:1: 36:14

    bb0: {
        _0 = Bar::<T>(move _1, move _2); // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:36:1: 36:14
        return;                          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:36:1: 36:14
    }
}

// MIR FOR CTFE
fn Bar(_1: T, _2: u32) -> Bar<T> {
    let mut _0: Bar<T>;                  // return place in scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:36:1: 36:14

    bb0: {
        _0 = Bar::<T>(move _1, move _2); // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:36:1: 36:14
        return;                          // scope 0 at ui/methods/method-probe-no-guessing-dyn-trait.rs:36:1: 36:14
    }
}
