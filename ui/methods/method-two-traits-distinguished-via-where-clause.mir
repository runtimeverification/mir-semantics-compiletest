// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-two-traits-distinguished-via-where-clause.rs:15:1: 15:30>::foo(_1: *const T) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:16:12: 16:16
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:16:18: 16:18

    bb0: {
        return;                          // scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:16:20: 16:20
    }
}

fn <impl at ui/methods/method-two-traits-distinguished-via-where-clause.rs:19:1: 19:25>::foo(_1: *const [T]) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:20:12: 20:16
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:20:18: 20:18

    bb0: {
        return;                          // scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:20:20: 20:20
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:23:11: 23:11
    let _1: [isize; 4];                  // in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:24:9: 24:10
    let _3: &[isize];                    // in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:16: 25:22
    let _4: &[isize];                    // in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:17: 25:22
    let mut _5: &[isize; 4];             // in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:17: 25:18
    let mut _6: std::ops::RangeFull;     // in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:19: 25:21
    let _7: ();                          // in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:26:5: 26:15
    let mut _8: *const [isize];          // in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:26:5: 26:9
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:24:9: 24:10
        let _2: *const [isize];          // in scope 1 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:9: 25:13
        scope 2 {
            debug xptr => _2;            // in scope 2 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:9: 25:13
        }
    }

    bb0: {
        _1 = [const 1_isize, const 2_isize, const 3_isize, const 4_isize]; // scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:24:25: 24:34
        _5 = &_1;                        // scope 1 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:17: 25:18
        _4 = <[isize; 4] as Index<RangeFull>>::index(move _5, move _6) -> bb1; // scope 1 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:17: 25:22
                                         // mir::Constant
                                         // + span: ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:17: 25:22
                                         // + literal: Const { ty: for<'a> fn(&'a [isize; 4], RangeFull) -> &'a <[isize; 4] as Index<RangeFull>>::Output {<[isize; 4] as Index<RangeFull>>::index}, val: Value(<ZST>) }
    }

    bb1: {
        _3 = _4;                         // scope 1 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:16: 25:22
        _2 = &raw const (*_3);           // scope 1 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:25:16: 25:22
        _8 = _2;                         // scope 2 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:26:5: 26:9
        _7 = <*const [isize] as B>::foo(move _8) -> bb2; // scope 2 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:26:5: 26:15
                                         // mir::Constant
                                         // + span: ui/methods/method-two-traits-distinguished-via-where-clause.rs:26:10: 26:13
                                         // + literal: Const { ty: fn(*const [isize]) {<*const [isize] as B>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        return;                          // scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:27:2: 27:2
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:24:20: 24:21

    bb0: {
        _0 = const 4_usize;              // scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:24:20: 24:21
        return;                          // scope 0 at ui/methods/method-two-traits-distinguished-via-where-clause.rs:24:20: 24:21
    }
}
