// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-early-bound-lifetimes-on-self.rs:21:1: 21:41>::init_cursor(_1: &SimpleNavigator, _2: &mut Cursor<'_>) -> bool {
    debug self => _1;                    // in scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:22:32: 22:40
    debug _cursor => _2;                 // in scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:22:42: 22:49
    let mut _0: bool;                    // return place in scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:22:71: 22:75

    bb0: {
        _0 = const false;                // scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:23:9: 23:14
        return;                          // scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:24:6: 24:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:27:11: 27:11
    let mut _1: Cursor<'_>;              // in scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:28:9: 28:14
    let _3: bool;                        // in scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:30:5: 30:26
    let mut _4: &SimpleNavigator;        // in scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:30:5: 30:26
    let mut _5: &mut Cursor<'_>;         // in scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:30:19: 30:25
    let mut _6: &mut Cursor<'_>;         // in scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:30:19: 30:25
    scope 1 {
        debug c => _1;                   // in scope 1 at ui/methods/method-early-bound-lifetimes-on-self.rs:28:9: 28:14
        let _2: SimpleNavigator;         // in scope 1 at ui/methods/method-early-bound-lifetimes-on-self.rs:29:9: 29:10
        scope 2 {
            debug n => _2;               // in scope 2 at ui/methods/method-early-bound-lifetimes-on-self.rs:29:9: 29:10
        }
    }

    bb0: {
        _4 = &_2;                        // scope 2 at ui/methods/method-early-bound-lifetimes-on-self.rs:30:5: 30:26
        _6 = &mut _1;                    // scope 2 at ui/methods/method-early-bound-lifetimes-on-self.rs:30:19: 30:25
        _5 = &mut (*_6);                 // scope 2 at ui/methods/method-early-bound-lifetimes-on-self.rs:30:19: 30:25
        _3 = <SimpleNavigator as CursorNavigator>::init_cursor::<'_, '_>(move _4, move _5) -> bb1; // scope 2 at ui/methods/method-early-bound-lifetimes-on-self.rs:30:5: 30:26
                                         // mir::Constant
                                         // + span: ui/methods/method-early-bound-lifetimes-on-self.rs:30:7: 30:18
                                         // + literal: Const { ty: for<'a> fn(&SimpleNavigator, &'a mut Cursor<'_>) -> bool {<SimpleNavigator as CursorNavigator>::init_cursor::<'_, '_>}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/methods/method-early-bound-lifetimes-on-self.rs:31:2: 31:2
    }
}
