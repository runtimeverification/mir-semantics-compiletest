// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-recursive-blanket-impl.rs:18:1: 18:22>::foo(_1: &[u8], _2: u8) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:19:12: 19:17
    debug a => _2;                       // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:19:19: 19:20
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-recursive-blanket-impl.rs:19:26: 19:26

    bb0: {
        return;                          // scope 0 at ui/methods/method-recursive-blanket-impl.rs:19:28: 19:28
    }
}

fn <impl at ui/methods/method-recursive-blanket-impl.rs:22:1: 22:32>::foo(_1: &&T, _2: A) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:23:12: 23:17
    debug a => _2;                       // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:23:19: 23:20
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-recursive-blanket-impl.rs:23:25: 23:25
    let mut _3: &T;                      // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:24:18: 24:23
    let mut _4: A;                       // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:24:25: 24:26
    let mut _5: &T;                      // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:23:12: 23:17

    bb0: {
        _5 = deref_copy (*_1);           // scope 0 at ui/methods/method-recursive-blanket-impl.rs:24:18: 24:23
        _3 = _5;                         // scope 0 at ui/methods/method-recursive-blanket-impl.rs:24:18: 24:23
        _4 = move _2;                    // scope 0 at ui/methods/method-recursive-blanket-impl.rs:24:25: 24:26
        _0 = <T as Foo<A>>::foo(move _3, move _4) -> bb1; // scope 0 at ui/methods/method-recursive-blanket-impl.rs:24:9: 24:27
                                         // mir::Constant
                                         // + span: ui/methods/method-recursive-blanket-impl.rs:24:9: 24:17
                                         // + literal: Const { ty: for<'a> fn(&'a T, A) {<T as Foo<A>>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/methods/method-recursive-blanket-impl.rs:25:6: 25:6
    }
}

fn <impl at ui/methods/method-recursive-blanket-impl.rs:34:1: 34:20>::foo(_1: &MyType) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:35:12: 35:17
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-recursive-blanket-impl.rs:35:19: 35:19

    bb0: {
        return;                          // scope 0 at ui/methods/method-recursive-blanket-impl.rs:35:21: 35:21
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-recursive-blanket-impl.rs:38:11: 38:11
    let mut _1: MyType;                  // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:39:9: 39:14
    let mut _2: &MyType;                 // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:40:5: 40:19
    let _3: &mut MyType;                 // in scope 0 at ui/methods/method-recursive-blanket-impl.rs:40:5: 40:13
    scope 1 {
        debug m => _1;                   // in scope 1 at ui/methods/method-recursive-blanket-impl.rs:39:9: 39:14
    }

    bb0: {
        _3 = &mut _1;                    // scope 1 at ui/methods/method-recursive-blanket-impl.rs:40:5: 40:13
        _2 = &(*_3);                     // scope 1 at ui/methods/method-recursive-blanket-impl.rs:40:5: 40:19
        _0 = <MyType as Bar>::foo(move _2) -> bb1; // scope 1 at ui/methods/method-recursive-blanket-impl.rs:40:5: 40:19
                                         // mir::Constant
                                         // + span: ui/methods/method-recursive-blanket-impl.rs:40:14: 40:17
                                         // + literal: Const { ty: for<'a> fn(&'a MyType) {<MyType as Bar>::foo}, val: Value(<ZST>) }
    }

    bb1: {
        return;                          // scope 0 at ui/methods/method-recursive-blanket-impl.rs:41:2: 41:2
    }
}
