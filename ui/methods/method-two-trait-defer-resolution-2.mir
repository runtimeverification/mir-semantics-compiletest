// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn MyCopy::foo(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:17:23: 17:28
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:17:30: 17:30

    bb0: {
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:17:33: 17:33
    }
}

fn <impl at ui/methods/method-two-trait-defer-resolution-2.rs:20:1: 20:30>::foo(_1: &Vec<T>) -> isize {
    debug self => _1;                    // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:21:12: 21:17
    let mut _0: isize;                   // return place in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:21:22: 21:27

    bb0: {
        _0 = const 1_isize;              // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:21:29: 21:30
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:21:31: 21:31
    }
}

fn <impl at ui/methods/method-two-trait-defer-resolution-2.rs:24:1: 24:27>::foo(_1: &Vec<Box<i32>>) -> isize {
    debug self => _1;                    // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:25:12: 25:17
    let mut _0: isize;                   // return place in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:25:22: 25:27

    bb0: {
        _0 = const 2_isize;              // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:25:29: 25:30
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:25:31: 25:31
    }
}

fn call_foo_copy() -> isize {
    let mut _1: std::vec::Vec<i32>;      // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:29:9: 29:14
    let mut _2: &std::vec::Vec<i32>;     // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:30:13: 30:20
    let _3: ();                          // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:31:5: 31:18
    let mut _4: &mut std::vec::Vec<i32>; // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:31:5: 31:18
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/methods/method-two-trait-defer-resolution-2.rs:29:9: 29:14
        let mut _0: isize;               // return place in scope 1 at ui/methods/method-two-trait-defer-resolution-2.rs:30:9: 30:10
        scope 2 {
            debug y => _0;               // in scope 2 at ui/methods/method-two-trait-defer-resolution-2.rs:30:9: 30:10
        }
    }

    bb0: {
        _1 = Vec::<i32>::new() -> bb1;   // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:29:17: 29:27
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-2.rs:29:17: 29:25
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn() -> Vec<i32> {Vec::<i32>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_1;                        // scope 1 at ui/methods/method-two-trait-defer-resolution-2.rs:30:13: 30:20
        _0 = <Vec<i32> as Foo>::foo(move _2) -> [return: bb2, unwind: bb5]; // scope 1 at ui/methods/method-two-trait-defer-resolution-2.rs:30:13: 30:20
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-2.rs:30:15: 30:18
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<i32>) -> isize {<Vec<i32> as Foo>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _4 = &mut _1;                    // scope 2 at ui/methods/method-two-trait-defer-resolution-2.rs:31:5: 31:18
        _3 = Vec::<i32>::push(move _4, const 0_i32) -> [return: bb3, unwind: bb5]; // scope 2 at ui/methods/method-two-trait-defer-resolution-2.rs:31:5: 31:18
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-2.rs:31:7: 31:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<i32>, i32) {Vec::<i32>::push}, val: Value(<ZST>) }
    }

    bb3: {
        drop(_1) -> bb4;                 // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:33:1: 33:2
    }

    bb4: {
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:33:2: 33:2
    }

    bb5 (cleanup): {
        drop(_1) -> bb6;                 // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:33:1: 33:2
    }

    bb6 (cleanup): {
        resume;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:28:1: 33:2
    }
}

fn call_foo_other() -> isize {
    let mut _1: std::vec::Vec<std::boxed::Box<i32>>; // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:36:9: 36:14
    let mut _2: &std::vec::Vec<std::boxed::Box<i32>>; // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:37:13: 37:20
    let _4: ();                          // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:39:5: 39:14
    let mut _5: &mut std::vec::Vec<std::boxed::Box<i32>>; // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:39:5: 39:14
    let mut _6: std::boxed::Box<i32>;    // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:39:12: 39:13
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/methods/method-two-trait-defer-resolution-2.rs:36:9: 36:14
        let mut _0: isize;               // return place in scope 1 at ui/methods/method-two-trait-defer-resolution-2.rs:37:9: 37:10
        scope 2 {
            debug y => _0;               // in scope 2 at ui/methods/method-two-trait-defer-resolution-2.rs:37:9: 37:10
            let _3: std::boxed::Box<i32>; // in scope 2 at ui/methods/method-two-trait-defer-resolution-2.rs:38:9: 38:10
            scope 3 {
                debug z => _3;           // in scope 3 at ui/methods/method-two-trait-defer-resolution-2.rs:38:9: 38:10
            }
        }
    }

    bb0: {
        _1 = Vec::<Box<i32>>::new() -> bb1; // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:36:25: 36:35
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-2.rs:36:25: 36:33
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn() -> Vec<Box<i32>> {Vec::<Box<i32>>::new}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_1;                        // scope 1 at ui/methods/method-two-trait-defer-resolution-2.rs:37:13: 37:20
        _0 = <Vec<Box<i32>> as Foo>::foo(move _2) -> [return: bb2, unwind: bb6]; // scope 1 at ui/methods/method-two-trait-defer-resolution-2.rs:37:13: 37:20
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-2.rs:37:15: 37:18
                                         // + literal: Const { ty: for<'a> fn(&'a Vec<Box<i32>>) -> isize {<Vec<Box<i32>> as Foo>::foo}, val: Value(<ZST>) }
    }

    bb2: {
        _3 = Box::<i32>::new(const 0_i32) -> [return: bb3, unwind: bb6]; // scope 2 at ui/methods/method-two-trait-defer-resolution-2.rs:38:23: 38:34
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-2.rs:38:23: 38:31
                                         // + user_ty: UserType(4)
                                         // + literal: Const { ty: fn(i32) -> Box<i32> {Box::<i32>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _5 = &mut _1;                    // scope 3 at ui/methods/method-two-trait-defer-resolution-2.rs:39:5: 39:14
        _6 = move _3;                    // scope 3 at ui/methods/method-two-trait-defer-resolution-2.rs:39:12: 39:13
        _4 = Vec::<Box<i32>>::push(move _5, move _6) -> [return: bb4, unwind: bb6]; // scope 3 at ui/methods/method-two-trait-defer-resolution-2.rs:39:5: 39:14
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-2.rs:39:7: 39:11
                                         // + literal: Const { ty: for<'a> fn(&'a mut Vec<Box<i32>>, Box<i32>) {Vec::<Box<i32>>::push}, val: Value(<ZST>) }
    }

    bb4: {
        drop(_1) -> bb5;                 // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:41:1: 41:2
    }

    bb5: {
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:41:2: 41:2
    }

    bb6 (cleanup): {
        drop(_1) -> bb7;                 // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:41:1: 41:2
    }

    bb7 (cleanup): {
        resume;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:35:1: 41:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:43:11: 43:11
    let mut _1: (&isize, &isize);        // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _2: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _3: isize;                       // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:44:16: 44:31
    let mut _4: &isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _5: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _6: &isize;                      // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _7: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _8: bool;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _9: isize;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _10: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _12: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _13: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _14: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _15: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _16: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _17: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _18: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _19: (&isize, &isize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _20: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _21: isize;                      // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:45:16: 45:32
    let mut _22: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let _23: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
    let _24: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
    let mut _25: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _27: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _28: isize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _30: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _31: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _32: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _33: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _34: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _35: &isize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _36: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    let mut _37: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _38: &isize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    scope 1 {
        debug left_val => _5;            // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _6;           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _11: core::panicking::AssertKind; // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 2 {
            debug kind => _11;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }
    scope 3 {
        debug left_val => _23;           // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        debug right_val => _24;          // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let _29: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        scope 4 {
            debug kind => _29;           // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
        }
    }

    bb0: {
        _3 = call_foo_copy() -> bb1;     // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:44:16: 44:31
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-2.rs:44:16: 44:29
                                         // + literal: Const { ty: fn() -> isize {call_foo_copy}, val: Value(<ZST>) }
    }

    bb1: {
        _2 = &_3;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _38 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[1])) }
        _4 = _38;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _1 = (move _2, move _4);         // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _5 = (_1.0: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _6 = (_1.1: &isize);             // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _9 = (*_5);                      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _10 = const 1_isize;             // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _8 = Eq(move _9, move _10);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _7 = Not(move _8);               // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _7) -> [0: bb3, otherwise: bb2]; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb2: {
        _11 = const core::panicking::AssertKind::Eq; // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _13 = const core::panicking::AssertKind::Eq; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _15 = _5;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _14 = _15;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _17 = _6;                        // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _16 = _17;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _18 = Option::<Arguments<'_>>::None; // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _12 = core::panicking::assert_failed::<isize, isize>(move _13, move _14, move _16, move _18); // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb3: {
        _21 = call_foo_other() -> bb4;   // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:45:16: 45:32
                                         // mir::Constant
                                         // + span: ui/methods/method-two-trait-defer-resolution-2.rs:45:16: 45:30
                                         // + literal: Const { ty: fn() -> isize {call_foo_other}, val: Value(<ZST>) }
    }

    bb4: {
        _20 = &_21;                      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _37 = const _;                   // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &isize, val: Unevaluated(main, [], Some(promoted[0])) }
        _22 = _37;                       // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _19 = (move _20, move _22);      // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _23 = (_19.0: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _24 = (_19.1: &isize);           // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _27 = (*_23);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _28 = const 2_isize;             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _26 = Eq(move _27, move _28);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _25 = Not(move _26);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _25) -> [0: bb6, otherwise: bb5]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb5: {
        _29 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _31 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _33 = _23;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _33;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _35 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _34 = _35;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _36 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _30 = core::panicking::assert_failed::<isize, isize>(move _31, move _32, move _34, move _36); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a isize, &'b isize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<isize, isize>}, val: Value(<ZST>) }
    }

    bb6: {
        return;                          // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:46:2: 46:2
    }
}

promoted[0] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:45:34: 45:35

    bb0: {
        _1 = const 2_isize;              // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:45:34: 45:35
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &isize = {
    let mut _0: &isize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: isize;                   // in scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:44:33: 44:34

    bb0: {
        _1 = const 1_isize;              // scope 0 at ui/methods/method-two-trait-defer-resolution-2.rs:44:33: 44:34
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
