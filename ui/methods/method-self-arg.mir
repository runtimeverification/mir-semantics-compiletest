// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut COUNT: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/methods/method-self-arg.rs:4:19: 4:24

    bb0: {
        _0 = const 1_usize;              // scope 0 at ui/methods/method-self-arg.rs:4:27: 4:28
        return;                          // scope 0 at ui/methods/method-self-arg.rs:4:1: 4:29
    }
}

fn <impl at ui/methods/method-self-arg.rs:6:16: 6:21>::clone(_1: &Foo) -> Foo {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg.rs:6:16: 6:21
    let mut _0: Foo;                     // return place in scope 0 at ui/methods/method-self-arg.rs:6:16: 6:21

    bb0: {
        return;                          // scope 0 at ui/methods/method-self-arg.rs:6:21: 6:21
    }
}

fn <impl at ui/methods/method-self-arg.rs:9:1: 9:9>::foo(_1: Foo, _2: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg.rs:10:12: 10:16
    debug x => _2;                       // in scope 0 at ui/methods/method-self-arg.rs:10:18: 10:19
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg.rs:10:27: 10:27
    let mut _3: *mut usize;              // in scope 0 at ui/methods/method-self-arg.rs:11:18: 11:23
    let mut _4: (usize, bool);           // in scope 0 at ui/methods/method-self-arg.rs:11:18: 11:28
    let _5: ();                          // in scope 0 at ui/methods/method-self-arg.rs:13:9: 13:24
    let mut _6: &Foo;                    // in scope 0 at ui/methods/method-self-arg.rs:13:18: 13:23
    let _7: &Foo;                        // in scope 0 at ui/methods/method-self-arg.rs:13:18: 13:23
    let _8: ();                          // in scope 0 at ui/methods/method-self-arg.rs:14:9: 14:20
    let mut _9: &Foo;                    // in scope 0 at ui/methods/method-self-arg.rs:14:18: 14:19
    let _10: ();                         // in scope 0 at ui/methods/method-self-arg.rs:16:9: 16:23
    let mut _11: Foo;                    // in scope 0 at ui/methods/method-self-arg.rs:16:18: 16:22
    let _12: ();                         // in scope 0 at ui/methods/method-self-arg.rs:17:9: 17:21
    let mut _13: Foo;                    // in scope 0 at ui/methods/method-self-arg.rs:17:18: 17:20
    let _14: ();                         // in scope 0 at ui/methods/method-self-arg.rs:19:9: 19:33
    let mut _15: std::boxed::Box<Foo>;   // in scope 0 at ui/methods/method-self-arg.rs:19:18: 19:32
    let mut _16: Foo;                    // in scope 0 at ui/methods/method-self-arg.rs:19:27: 19:31
    let _17: ();                         // in scope 0 at ui/methods/method-self-arg.rs:20:9: 20:31
    let mut _18: std::boxed::Box<Foo>;   // in scope 0 at ui/methods/method-self-arg.rs:20:18: 20:30
    let mut _19: Foo;                    // in scope 0 at ui/methods/method-self-arg.rs:20:27: 20:29
    scope 1 {
    }

    bb0: {
        _3 = const {alloc1: *mut usize}; // scope 1 at ui/methods/method-self-arg.rs:11:18: 11:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:11:18: 11:23
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _4 = CheckedMul((*_3), const 2_usize); // scope 1 at ui/methods/method-self-arg.rs:11:18: 11:28
        assert(!move (_4.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_3), const 2_usize) -> bb1; // scope 1 at ui/methods/method-self-arg.rs:11:18: 11:28
    }

    bb1: {
        (*_3) = move (_4.0: usize);      // scope 1 at ui/methods/method-self-arg.rs:11:18: 11:28
        _7 = &_1;                        // scope 0 at ui/methods/method-self-arg.rs:13:18: 13:23
        _6 = _7;                         // scope 0 at ui/methods/method-self-arg.rs:13:18: 13:23
        _5 = Foo::bar(move _6) -> bb2;   // scope 0 at ui/methods/method-self-arg.rs:13:9: 13:24
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:13:9: 13:17
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {Foo::bar}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = _2;                         // scope 0 at ui/methods/method-self-arg.rs:14:18: 14:19
        _8 = Foo::bar(move _9) -> bb3;   // scope 0 at ui/methods/method-self-arg.rs:14:9: 14:20
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:14:9: 14:17
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {Foo::bar}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Foo::baz(move _11) -> bb4; // scope 0 at ui/methods/method-self-arg.rs:16:9: 16:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:16:9: 16:17
                                         // + literal: Const { ty: fn(Foo) {Foo::baz}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = Foo::baz(move _13) -> bb5; // scope 0 at ui/methods/method-self-arg.rs:17:9: 17:21
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:17:9: 17:17
                                         // + literal: Const { ty: fn(Foo) {Foo::baz}, val: Value(<ZST>) }
    }

    bb5: {
        _15 = Box::<Foo>::new(move _16) -> bb6; // scope 0 at ui/methods/method-self-arg.rs:19:18: 19:32
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:19:18: 19:26
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb6: {
        _14 = Foo::qux(move _15) -> bb7; // scope 0 at ui/methods/method-self-arg.rs:19:9: 19:33
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:19:9: 19:17
                                         // + literal: Const { ty: fn(Box<Foo>) {Foo::qux}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = Box::<Foo>::new(move _19) -> bb8; // scope 0 at ui/methods/method-self-arg.rs:20:18: 20:30
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:20:18: 20:26
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = Foo::qux(move _18) -> bb9; // scope 0 at ui/methods/method-self-arg.rs:20:9: 20:31
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:20:9: 20:17
                                         // + literal: Const { ty: fn(Box<Foo>) {Foo::qux}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/methods/method-self-arg.rs:21:6: 21:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg.rs:9:1: 9:9>::bar(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg.rs:23:12: 23:17
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg.rs:23:19: 23:19
    let mut _2: *mut usize;              // in scope 0 at ui/methods/method-self-arg.rs:24:18: 24:23
    let mut _3: (usize, bool);           // in scope 0 at ui/methods/method-self-arg.rs:24:18: 24:28
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut usize}; // scope 1 at ui/methods/method-self-arg.rs:24:18: 24:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:24:18: 24:23
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 3_usize); // scope 1 at ui/methods/method-self-arg.rs:24:18: 24:28
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 3_usize) -> bb1; // scope 1 at ui/methods/method-self-arg.rs:24:18: 24:28
    }

    bb1: {
        (*_2) = move (_3.0: usize);      // scope 1 at ui/methods/method-self-arg.rs:24:18: 24:28
        return;                          // scope 0 at ui/methods/method-self-arg.rs:25:6: 25:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg.rs:9:1: 9:9>::baz(_1: Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg.rs:27:12: 27:16
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg.rs:27:18: 27:18
    let mut _2: *mut usize;              // in scope 0 at ui/methods/method-self-arg.rs:28:18: 28:23
    let mut _3: (usize, bool);           // in scope 0 at ui/methods/method-self-arg.rs:28:18: 28:28
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut usize}; // scope 1 at ui/methods/method-self-arg.rs:28:18: 28:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:28:18: 28:23
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 5_usize); // scope 1 at ui/methods/method-self-arg.rs:28:18: 28:28
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 5_usize) -> bb1; // scope 1 at ui/methods/method-self-arg.rs:28:18: 28:28
    }

    bb1: {
        (*_2) = move (_3.0: usize);      // scope 1 at ui/methods/method-self-arg.rs:28:18: 28:28
        return;                          // scope 0 at ui/methods/method-self-arg.rs:29:6: 29:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg.rs:9:1: 9:9>::qux(_1: Box<Foo>) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg.rs:31:12: 31:16
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg.rs:31:28: 31:28
    let mut _2: *mut usize;              // in scope 0 at ui/methods/method-self-arg.rs:32:18: 32:23
    let mut _3: (usize, bool);           // in scope 0 at ui/methods/method-self-arg.rs:32:18: 32:28
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut usize}; // scope 1 at ui/methods/method-self-arg.rs:32:18: 32:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:32:18: 32:23
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 7_usize); // scope 1 at ui/methods/method-self-arg.rs:32:18: 32:28
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 7_usize) -> [success: bb1, unwind: bb3]; // scope 1 at ui/methods/method-self-arg.rs:32:18: 32:28
    }

    bb1: {
        (*_2) = move (_3.0: usize);      // scope 1 at ui/methods/method-self-arg.rs:32:18: 32:28
        drop(_1) -> bb2;                 // scope 0 at ui/methods/method-self-arg.rs:33:5: 33:6
    }

    bb2: {
        return;                          // scope 0 at ui/methods/method-self-arg.rs:33:6: 33:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/methods/method-self-arg.rs:33:5: 33:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/methods/method-self-arg.rs:31:5: 33:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg.rs:36:11: 36:11
    let _1: Foo;                         // in scope 0 at ui/methods/method-self-arg.rs:37:9: 37:10
    let _2: ();                          // in scope 0 at ui/methods/method-self-arg.rs:39:5: 39:17
    let mut _3: &Foo;                    // in scope 0 at ui/methods/method-self-arg.rs:39:14: 39:16
    let _4: &Foo;                        // in scope 0 at ui/methods/method-self-arg.rs:39:14: 39:16
    let _5: ();                          // in scope 0 at ui/methods/method-self-arg.rs:40:5: 40:16
    let mut _6: Foo;                     // in scope 0 at ui/methods/method-self-arg.rs:40:14: 40:15
    let _7: ();                          // in scope 0 at ui/methods/method-self-arg.rs:41:5: 41:26
    let mut _8: std::boxed::Box<Foo>;    // in scope 0 at ui/methods/method-self-arg.rs:41:14: 41:25
    let mut _9: Foo;                     // in scope 0 at ui/methods/method-self-arg.rs:41:23: 41:24
    let _10: ();                         // in scope 0 at ui/methods/method-self-arg.rs:43:5: 43:14
    let mut _11: Foo;                    // in scope 0 at ui/methods/method-self-arg.rs:43:5: 43:6
    let mut _12: &Foo;                   // in scope 0 at ui/methods/method-self-arg.rs:43:11: 43:13
    let _13: &Foo;                       // in scope 0 at ui/methods/method-self-arg.rs:43:11: 43:13
    let mut _14: (&usize, &usize);       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _15: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _16: *mut usize;                 // in scope 0 at ui/methods/method-self-arg.rs:45:25: 45:30
    let mut _17: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _20: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _21: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _22: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _23: usize;                  // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _25: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _26: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _27: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _28: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _29: &usize;                 // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _30: &usize;                     // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _31: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/methods/method-self-arg.rs:37:9: 37:10
        scope 2 {
            let _18: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _19: &usize;             // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _32: &usize;         // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _18;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _19;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _24: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _24;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = &_1;                        // scope 1 at ui/methods/method-self-arg.rs:39:14: 39:16
        _3 = _4;                         // scope 1 at ui/methods/method-self-arg.rs:39:14: 39:16
        _2 = Foo::bar(move _3) -> bb1;   // scope 1 at ui/methods/method-self-arg.rs:39:5: 39:17
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:39:5: 39:13
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {Foo::bar}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Foo::baz(move _6) -> bb2;   // scope 1 at ui/methods/method-self-arg.rs:40:5: 40:16
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:40:5: 40:13
                                         // + literal: Const { ty: fn(Foo) {Foo::baz}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Box::<Foo>::new(move _9) -> bb3; // scope 1 at ui/methods/method-self-arg.rs:41:14: 41:25
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:41:14: 41:22
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = Foo::qux(move _8) -> bb4;   // scope 1 at ui/methods/method-self-arg.rs:41:5: 41:26
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:41:5: 41:13
                                         // + literal: Const { ty: fn(Box<Foo>) {Foo::qux}, val: Value(<ZST>) }
    }

    bb4: {
        _13 = &_1;                       // scope 1 at ui/methods/method-self-arg.rs:43:11: 43:13
        _12 = _13;                       // scope 1 at ui/methods/method-self-arg.rs:43:11: 43:13
        _10 = Foo::foo(move _11, move _12) -> bb5; // scope 1 at ui/methods/method-self-arg.rs:43:5: 43:14
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:43:7: 43:10
                                         // + literal: Const { ty: for<'a> fn(Foo, &'a Foo) {Foo::foo}, val: Value(<ZST>) }
    }

    bb5: {
        _16 = const {alloc1: *mut usize}; // scope 2 at ui/methods/method-self-arg.rs:45:25: 45:30
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg.rs:45:25: 45:30
                                         // + literal: Const { ty: *mut usize, val: Value(Scalar(alloc1)) }
        _15 = &(*_16);                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _32 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &usize, val: Unevaluated(main, [], Some(promoted[0])) }
        _17 = _32;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _14 = (move _15, move _17);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _18 = (_14.0: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _19 = (_14.1: &usize);           // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _22 = (*_18);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _23 = const 2315250_usize;       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _21 = Eq(move _22, move _23);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _20 = Not(move _21);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _20) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _24 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _26 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = _18;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _27 = _28;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _30 = _19;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _25 = core::panicking::assert_failed::<usize, usize>(move _26, move _27, move _29, move _31); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a usize, &'b usize, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<usize, usize>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/methods/method-self-arg.rs:46:2: 46:2
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &usize = {
    let mut _0: &usize;                  // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: usize;                   // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:51
    let mut _2: (usize, bool);           // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:51
    let mut _3: usize;                   // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:49
    let mut _4: (usize, bool);           // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:49
    let mut _5: usize;                   // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:47
    let mut _6: (usize, bool);           // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:47
    let mut _7: usize;                   // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:45
    let mut _8: (usize, bool);           // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:45
    let mut _9: usize;                   // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:43
    let mut _10: (usize, bool);          // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:43
    let mut _11: usize;                  // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:41
    let mut _12: (usize, bool);          // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:41
    let mut _13: usize;                  // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:39
    let mut _14: (usize, bool);          // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:39
    let mut _15: usize;                  // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:37
    let mut _16: (usize, bool);          // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:37
    let mut _17: usize;                  // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:35
    let mut _18: (usize, bool);          // in scope 0 at ui/methods/method-self-arg.rs:45:32: 45:35

    bb0: {
        _18 = CheckedMul(const 2_usize, const 3_usize); // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:35
        _17 = move (_18.0: usize);       // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:35
        _16 = CheckedMul(_17, const 3_usize); // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:37
        _15 = move (_16.0: usize);       // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:37
        _14 = CheckedMul(_15, const 3_usize); // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:39
        _13 = move (_14.0: usize);       // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:39
        _12 = CheckedMul(_13, const 5_usize); // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:41
        _11 = move (_12.0: usize);       // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:41
        _10 = CheckedMul(_11, const 5_usize); // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:43
        _9 = move (_10.0: usize);        // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:43
        _8 = CheckedMul(_9, const 5_usize); // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:45
        _7 = move (_8.0: usize);         // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:45
        _6 = CheckedMul(_7, const 7_usize); // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:47
        _5 = move (_6.0: usize);         // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:47
        _4 = CheckedMul(_5, const 7_usize); // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:49
        _3 = move (_4.0: usize);         // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:49
        _2 = CheckedMul(_3, const 7_usize); // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:51
        _1 = move (_2.0: usize);         // scope 0 at ui/methods/method-self-arg.rs:45:32: 45:51
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
