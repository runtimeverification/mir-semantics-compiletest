// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut COUNT: u64 = {
    let mut _0: u64;

    bb0: {
        _0 = const 1_u64;
        return;
    }
}

fn <impl at ui/methods/method-self-arg-trait.rs:6:16: 6:21>::clone(_1: &Foo) -> Foo {
    debug self => _1;
    let mut _0: Foo;

    bb0: {
        return;
    }
}

fn Bar::bar1(_1: &Self) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u64;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut u64};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(u64);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Mul((*_2), const 7_u64);
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u64);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn Bar::bar2(_1: Self) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u64;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut u64};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(u64);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        (*_2) = Mul((*_2), const 11_u64);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb3: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u64);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn Bar::bar3(_1: Box<Self>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u64;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut u64};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(u64);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        (*_2) = Mul((*_2), const 13_u64);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb3: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u64);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg-trait.rs:25:1: 25:17>::foo1(_1: &Foo) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u64;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut u64};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(u64);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Mul((*_2), const 2_u64);
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u64);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg-trait.rs:25:1: 25:17>::foo2(_1: Foo) -> () {
    debug self => const Foo;
    let mut _0: ();
    let mut _2: *mut u64;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut u64};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(u64);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb2, unwind unreachable];
    }

    bb1: {
        (*_2) = Mul((*_2), const 3_u64);
        return;
    }

    bb2: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u64);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb1, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg-trait.rs:25:1: 25:17>::foo3(_1: Box<Foo>) -> () {
    debug self => _1;
    let mut _0: ();
    let mut _2: *mut u64;
    scope 1 {
        let mut _3: *const ();
        let mut _4: usize;
        let mut _5: usize;
        let mut _6: usize;
        let mut _7: usize;
        let mut _8: bool;
        let mut _9: *const ();
        let mut _10: usize;
        let mut _11: usize;
        let mut _12: usize;
        let mut _13: usize;
        let mut _14: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut u64};
        _9 = _2 as *const () (PtrToPtr);
        _10 = _9 as usize (Transmute);
        _11 = AlignOf(u64);
        _12 = Sub(_11, const 1_usize);
        _13 = BitAnd(_10, _12);
        _14 = Eq(_13, const 0_usize);
        assert(_14, "misaligned pointer dereference: address must be a multiple of {} but is {}", _11, _10) -> [success: bb3, unwind unreachable];
    }

    bb1: {
        return;
    }

    bb2: {
        (*_2) = Mul((*_2), const 5_u64);
        drop(_1) -> [return: bb1, unwind continue];
    }

    bb3: {
        _3 = _2 as *const () (PtrToPtr);
        _4 = _3 as usize (Transmute);
        _5 = AlignOf(u64);
        _6 = Sub(_5, const 1_usize);
        _7 = BitAnd(_4, _6);
        _8 = Eq(_7, const 0_usize);
        assert(_8, "misaligned pointer dereference: address must be a multiple of {} but is {}", _5, _4) -> [success: bb2, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg-trait.rs:39:1: 39:9>::baz(_1: Foo) -> () {
    debug self => const Foo;
    let mut _0: ();
    let mut _2: *mut u64;
    let _3: ();
    let _4: &Foo;
    let _5: ();
    let _6: ();
    let mut _7: std::boxed::Box<Foo>;
    let _8: ();
    let _9: &Foo;
    let _10: ();
    let _11: ();
    let mut _12: std::boxed::Box<Foo>;
    scope 1 {
        let mut _13: *const ();
        let mut _14: usize;
        let mut _15: usize;
        let mut _16: usize;
        let mut _17: usize;
        let mut _18: bool;
        let mut _19: *const ();
        let mut _20: usize;
        let mut _21: usize;
        let mut _22: usize;
        let mut _23: usize;
        let mut _24: bool;
    }

    bb0: {
        _2 = const {alloc1: *mut u64};
        _19 = _2 as *const () (PtrToPtr);
        _20 = _19 as usize (Transmute);
        _21 = AlignOf(u64);
        _22 = Sub(_21, const 1_usize);
        _23 = BitAnd(_20, _22);
        _24 = Eq(_23, const 0_usize);
        assert(_24, "misaligned pointer dereference: address must be a multiple of {} but is {}", _21, _20) -> [success: bb10, unwind unreachable];
    }

    bb1: {
        _5 = <Foo as Bar>::foo2(const Foo) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = Box::<Foo>::new(const Foo) -> [return: bb3, unwind continue];
    }

    bb3: {
        _6 = <Foo as Bar>::foo3(move _7) -> [return: bb4, unwind continue];
    }

    bb4: {
        _9 = &_1;
        _8 = <Foo as Bar>::bar1(_9) -> [return: bb5, unwind continue];
    }

    bb5: {
        _10 = <Foo as Bar>::bar2(const Foo) -> [return: bb6, unwind continue];
    }

    bb6: {
        _12 = Box::<Foo>::new(const Foo) -> [return: bb7, unwind continue];
    }

    bb7: {
        _11 = <Foo as Bar>::bar3(move _12) -> [return: bb8, unwind continue];
    }

    bb8: {
        return;
    }

    bb9: {
        (*_2) = Mul((*_2), const 17_u64);
        _4 = &_1;
        _3 = <Foo as Bar>::foo1(_4) -> [return: bb1, unwind continue];
    }

    bb10: {
        _13 = _2 as *const () (PtrToPtr);
        _14 = _13 as usize (Transmute);
        _15 = AlignOf(u64);
        _16 = Sub(_15, const 1_usize);
        _17 = BitAnd(_14, _16);
        _18 = Eq(_17, const 0_usize);
        assert(_18, "misaligned pointer dereference: address must be a multiple of {} but is {}", _15, _14) -> [success: bb9, unwind unreachable];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();
    let _1: Foo;
    let _2: ();
    let _3: &Foo;
    let _4: ();
    let _5: ();
    let mut _6: std::boxed::Box<Foo>;
    let _7: ();
    let _8: &Foo;
    let _9: ();
    let _10: ();
    let mut _11: std::boxed::Box<Foo>;
    let _12: ();
    let mut _13: (&u64, &u64);
    let mut _14: &u64;
    let _15: *mut u64;
    let mut _18: bool;
    let mut _19: bool;
    let mut _20: u64;
    let mut _21: u64;
    let _23: !;
    let mut _24: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => const Foo;
        scope 2 {
            let _16: &u64;
            let _17: &u64;
            let mut _25: &u64;
            let mut _26: *const ();
            let mut _27: usize;
            let mut _28: usize;
            let mut _29: usize;
            let mut _30: usize;
            let mut _31: bool;
            scope 3 {
                debug left_val => _16;
                debug right_val => _17;
                let _22: core::panicking::AssertKind;
                scope 4 {
                    debug kind => _22;
                }
            }
        }
    }

    bb0: {
        _3 = &_1;
        _2 = <Foo as Bar>::foo1(_3) -> [return: bb1, unwind continue];
    }

    bb1: {
        _4 = <Foo as Bar>::foo2(const Foo) -> [return: bb2, unwind continue];
    }

    bb2: {
        _6 = Box::<Foo>::new(const Foo) -> [return: bb3, unwind continue];
    }

    bb3: {
        _5 = <Foo as Bar>::foo3(move _6) -> [return: bb4, unwind continue];
    }

    bb4: {
        _8 = &_1;
        _7 = <Foo as Bar>::bar1(_8) -> [return: bb5, unwind continue];
    }

    bb5: {
        _9 = <Foo as Bar>::bar2(const Foo) -> [return: bb6, unwind continue];
    }

    bb6: {
        _11 = Box::<Foo>::new(const Foo) -> [return: bb7, unwind continue];
    }

    bb7: {
        _10 = <Foo as Bar>::bar3(move _11) -> [return: bb8, unwind continue];
    }

    bb8: {
        _12 = Foo::baz(const Foo) -> [return: bb9, unwind continue];
    }

    bb9: {
        _15 = const {alloc1: *mut u64};
        _26 = _15 as *const () (PtrToPtr);
        _27 = _26 as usize (Transmute);
        _28 = AlignOf(u64);
        _29 = Sub(_28, const 1_usize);
        _30 = BitAnd(_27, _29);
        _31 = Eq(_30, const 0_usize);
        assert(_31, "misaligned pointer dereference: address must be a multiple of {} but is {}", _28, _27) -> [success: bb12, unwind unreachable];
    }

    bb10: {
        _22 = core::panicking::AssertKind::Eq;
        _24 = Option::<Arguments<'_>>::None;
        _23 = core::panicking::assert_failed::<u64, u64>(move _22, _16, _17, move _24) -> unwind continue;
    }

    bb11: {
        return;
    }

    bb12: {
        _14 = &(*_15);
        _25 = const _;
        _13 = (move _14, _25);
        _16 = (_13.0: &u64);
        _17 = (_13.1: &u64);
        _20 = (*_16);
        _21 = (*_17);
        _19 = Eq(move _20, move _21);
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb11, otherwise: bb10];
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &u64 = {
    let mut _0: &u64;
    let mut _1: u64;
    let mut _2: u64;
    let mut _3: u64;
    let mut _4: u64;
    let mut _5: u64;
    let mut _6: u64;
    let mut _7: u64;
    let mut _8: u64;
    let mut _9: u64;
    let mut _10: u64;
    let mut _11: u64;
    let mut _12: u64;

    bb0: {
        _12 = Mul(const 2_u64, const 2_u64);
        _11 = Mul(move _12, const 3_u64);
        _10 = Mul(move _11, const 3_u64);
        _9 = Mul(move _10, const 5_u64);
        _8 = Mul(move _9, const 5_u64);
        _7 = Mul(move _8, const 7_u64);
        _6 = Mul(move _7, const 7_u64);
        _5 = Mul(move _6, const 11_u64);
        _4 = Mul(move _5, const 11_u64);
        _3 = Mul(move _4, const 13_u64);
        _2 = Mul(move _3, const 13_u64);
        _1 = Mul(move _2, const 17_u64);
        _0 = &_1;
        return;
    }
}
