// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
static mut COUNT: u64 = {
    let mut _0: u64;                     // return place in scope 0 at ui/methods/method-self-arg-trait.rs:4:19: 4:22

    bb0: {
        _0 = const 1_u64;                // scope 0 at ui/methods/method-self-arg-trait.rs:4:25: 4:26
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:4:1: 4:27
    }
}

fn <impl at ui/methods/method-self-arg-trait.rs:6:16: 6:21>::clone(_1: &Foo) -> Foo {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:6:16: 6:21
    let mut _0: Foo;                     // return place in scope 0 at ui/methods/method-self-arg-trait.rs:6:16: 6:21

    bb0: {
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:6:21: 6:21
    }
}

fn Bar::bar1(_1: &Self) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:14:13: 14:18
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg-trait.rs:14:20: 14:20
    let mut _2: *mut u64;                // in scope 0 at ui/methods/method-self-arg-trait.rs:15:18: 15:23
    let mut _3: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:15:18: 15:28
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u64};   // scope 1 at ui/methods/method-self-arg-trait.rs:15:18: 15:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:15:18: 15:23
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 7_u64); // scope 1 at ui/methods/method-self-arg-trait.rs:15:18: 15:28
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 7_u64) -> bb1; // scope 1 at ui/methods/method-self-arg-trait.rs:15:18: 15:28
    }

    bb1: {
        (*_2) = move (_3.0: u64);        // scope 1 at ui/methods/method-self-arg-trait.rs:15:18: 15:28
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:16:6: 16:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn Bar::bar2(_1: Self) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:17:13: 17:17
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg-trait.rs:17:19: 17:19
    let mut _2: *mut u64;                // in scope 0 at ui/methods/method-self-arg-trait.rs:18:18: 18:23
    let mut _3: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:18:18: 18:29
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u64};   // scope 1 at ui/methods/method-self-arg-trait.rs:18:18: 18:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:18:18: 18:23
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 11_u64); // scope 1 at ui/methods/method-self-arg-trait.rs:18:18: 18:29
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 11_u64) -> [success: bb1, unwind: bb3]; // scope 1 at ui/methods/method-self-arg-trait.rs:18:18: 18:29
    }

    bb1: {
        (*_2) = move (_3.0: u64);        // scope 1 at ui/methods/method-self-arg-trait.rs:18:18: 18:29
        drop(_1) -> bb2;                 // scope 0 at ui/methods/method-self-arg-trait.rs:19:5: 19:6
    }

    bb2: {
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:19:6: 19:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/methods/method-self-arg-trait.rs:19:5: 19:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/methods/method-self-arg-trait.rs:17:5: 19:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn Bar::bar3(_1: Box<Self>) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:20:13: 20:17
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg-trait.rs:20:30: 20:30
    let mut _2: *mut u64;                // in scope 0 at ui/methods/method-self-arg-trait.rs:21:18: 21:23
    let mut _3: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:21:18: 21:29
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u64};   // scope 1 at ui/methods/method-self-arg-trait.rs:21:18: 21:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:21:18: 21:23
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 13_u64); // scope 1 at ui/methods/method-self-arg-trait.rs:21:18: 21:29
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 13_u64) -> [success: bb1, unwind: bb3]; // scope 1 at ui/methods/method-self-arg-trait.rs:21:18: 21:29
    }

    bb1: {
        (*_2) = move (_3.0: u64);        // scope 1 at ui/methods/method-self-arg-trait.rs:21:18: 21:29
        drop(_1) -> bb2;                 // scope 0 at ui/methods/method-self-arg-trait.rs:22:5: 22:6
    }

    bb2: {
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:22:6: 22:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/methods/method-self-arg-trait.rs:22:5: 22:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/methods/method-self-arg-trait.rs:20:5: 22:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg-trait.rs:25:1: 25:17>::foo1(_1: &Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:26:13: 26:18
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg-trait.rs:26:20: 26:20
    let mut _2: *mut u64;                // in scope 0 at ui/methods/method-self-arg-trait.rs:27:18: 27:23
    let mut _3: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:27:18: 27:28
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u64};   // scope 1 at ui/methods/method-self-arg-trait.rs:27:18: 27:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:27:18: 27:23
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 2_u64); // scope 1 at ui/methods/method-self-arg-trait.rs:27:18: 27:28
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 2_u64) -> bb1; // scope 1 at ui/methods/method-self-arg-trait.rs:27:18: 27:28
    }

    bb1: {
        (*_2) = move (_3.0: u64);        // scope 1 at ui/methods/method-self-arg-trait.rs:27:18: 27:28
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:28:6: 28:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg-trait.rs:25:1: 25:17>::foo2(_1: Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:30:13: 30:17
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg-trait.rs:30:19: 30:19
    let mut _2: *mut u64;                // in scope 0 at ui/methods/method-self-arg-trait.rs:31:18: 31:23
    let mut _3: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:31:18: 31:28
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u64};   // scope 1 at ui/methods/method-self-arg-trait.rs:31:18: 31:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:31:18: 31:23
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 3_u64); // scope 1 at ui/methods/method-self-arg-trait.rs:31:18: 31:28
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 3_u64) -> bb1; // scope 1 at ui/methods/method-self-arg-trait.rs:31:18: 31:28
    }

    bb1: {
        (*_2) = move (_3.0: u64);        // scope 1 at ui/methods/method-self-arg-trait.rs:31:18: 31:28
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:32:6: 32:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg-trait.rs:25:1: 25:17>::foo3(_1: Box<Foo>) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:34:13: 34:17
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg-trait.rs:34:29: 34:29
    let mut _2: *mut u64;                // in scope 0 at ui/methods/method-self-arg-trait.rs:35:18: 35:23
    let mut _3: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:35:18: 35:28
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u64};   // scope 1 at ui/methods/method-self-arg-trait.rs:35:18: 35:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:35:18: 35:23
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 5_u64); // scope 1 at ui/methods/method-self-arg-trait.rs:35:18: 35:28
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 5_u64) -> [success: bb1, unwind: bb3]; // scope 1 at ui/methods/method-self-arg-trait.rs:35:18: 35:28
    }

    bb1: {
        (*_2) = move (_3.0: u64);        // scope 1 at ui/methods/method-self-arg-trait.rs:35:18: 35:28
        drop(_1) -> bb2;                 // scope 0 at ui/methods/method-self-arg-trait.rs:36:5: 36:6
    }

    bb2: {
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:36:6: 36:6
    }

    bb3 (cleanup): {
        drop(_1) -> bb4;                 // scope 0 at ui/methods/method-self-arg-trait.rs:36:5: 36:6
    }

    bb4 (cleanup): {
        resume;                          // scope 0 at ui/methods/method-self-arg-trait.rs:34:5: 36:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn <impl at ui/methods/method-self-arg-trait.rs:39:1: 39:9>::baz(_1: Foo) -> () {
    debug self => _1;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:40:12: 40:16
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg-trait.rs:40:18: 40:18
    let mut _2: *mut u64;                // in scope 0 at ui/methods/method-self-arg-trait.rs:41:18: 41:23
    let mut _3: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:41:18: 41:29
    let _4: ();                          // in scope 0 at ui/methods/method-self-arg-trait.rs:43:9: 43:25
    let mut _5: &Foo;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:43:19: 43:24
    let _6: &Foo;                        // in scope 0 at ui/methods/method-self-arg-trait.rs:43:19: 43:24
    let _7: ();                          // in scope 0 at ui/methods/method-self-arg-trait.rs:44:9: 44:24
    let mut _8: Foo;                     // in scope 0 at ui/methods/method-self-arg-trait.rs:44:19: 44:23
    let _9: ();                          // in scope 0 at ui/methods/method-self-arg-trait.rs:45:9: 45:34
    let mut _10: std::boxed::Box<Foo>;   // in scope 0 at ui/methods/method-self-arg-trait.rs:45:19: 45:33
    let mut _11: Foo;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:45:28: 45:32
    let _12: ();                         // in scope 0 at ui/methods/method-self-arg-trait.rs:47:9: 47:25
    let mut _13: &Foo;                   // in scope 0 at ui/methods/method-self-arg-trait.rs:47:19: 47:24
    let _14: &Foo;                       // in scope 0 at ui/methods/method-self-arg-trait.rs:47:19: 47:24
    let _15: ();                         // in scope 0 at ui/methods/method-self-arg-trait.rs:48:9: 48:24
    let mut _16: Foo;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:48:19: 48:23
    let _17: ();                         // in scope 0 at ui/methods/method-self-arg-trait.rs:49:9: 49:34
    let mut _18: std::boxed::Box<Foo>;   // in scope 0 at ui/methods/method-self-arg-trait.rs:49:19: 49:33
    let mut _19: Foo;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:49:28: 49:32
    scope 1 {
    }

    bb0: {
        _2 = const {alloc1: *mut u64};   // scope 1 at ui/methods/method-self-arg-trait.rs:41:18: 41:23
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:41:18: 41:23
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _3 = CheckedMul((*_2), const 17_u64); // scope 1 at ui/methods/method-self-arg-trait.rs:41:18: 41:29
        assert(!move (_3.1: bool), "attempt to compute `{} * {}`, which would overflow", (*_2), const 17_u64) -> bb1; // scope 1 at ui/methods/method-self-arg-trait.rs:41:18: 41:29
    }

    bb1: {
        (*_2) = move (_3.0: u64);        // scope 1 at ui/methods/method-self-arg-trait.rs:41:18: 41:29
        _6 = &_1;                        // scope 0 at ui/methods/method-self-arg-trait.rs:43:19: 43:24
        _5 = _6;                         // scope 0 at ui/methods/method-self-arg-trait.rs:43:19: 43:24
        _4 = <Foo as Bar>::foo1(move _5) -> bb2; // scope 0 at ui/methods/method-self-arg-trait.rs:43:9: 43:25
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:43:9: 43:18
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {<Foo as Bar>::foo1}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = <Foo as Bar>::foo2(move _8) -> bb3; // scope 0 at ui/methods/method-self-arg-trait.rs:44:9: 44:24
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:44:9: 44:18
                                         // + literal: Const { ty: fn(Foo) {<Foo as Bar>::foo2}, val: Value(<ZST>) }
    }

    bb3: {
        _10 = Box::<Foo>::new(move _11) -> bb4; // scope 0 at ui/methods/method-self-arg-trait.rs:45:19: 45:33
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:45:19: 45:27
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb4: {
        _9 = <Foo as Bar>::foo3(move _10) -> bb5; // scope 0 at ui/methods/method-self-arg-trait.rs:45:9: 45:34
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:45:9: 45:18
                                         // + literal: Const { ty: fn(Box<Foo>) {<Foo as Bar>::foo3}, val: Value(<ZST>) }
    }

    bb5: {
        _14 = &_1;                       // scope 0 at ui/methods/method-self-arg-trait.rs:47:19: 47:24
        _13 = _14;                       // scope 0 at ui/methods/method-self-arg-trait.rs:47:19: 47:24
        _12 = <Foo as Bar>::bar1(move _13) -> bb6; // scope 0 at ui/methods/method-self-arg-trait.rs:47:9: 47:25
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:47:9: 47:18
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {<Foo as Bar>::bar1}, val: Value(<ZST>) }
    }

    bb6: {
        _15 = <Foo as Bar>::bar2(move _16) -> bb7; // scope 0 at ui/methods/method-self-arg-trait.rs:48:9: 48:24
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:48:9: 48:18
                                         // + literal: Const { ty: fn(Foo) {<Foo as Bar>::bar2}, val: Value(<ZST>) }
    }

    bb7: {
        _18 = Box::<Foo>::new(move _19) -> bb8; // scope 0 at ui/methods/method-self-arg-trait.rs:49:19: 49:33
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:49:19: 49:27
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb8: {
        _17 = <Foo as Bar>::bar3(move _18) -> bb9; // scope 0 at ui/methods/method-self-arg-trait.rs:49:9: 49:34
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:49:9: 49:18
                                         // + literal: Const { ty: fn(Box<Foo>) {<Foo as Bar>::bar3}, val: Value(<ZST>) }
    }

    bb9: {
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:50:6: 50:6
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-self-arg-trait.rs:53:11: 53:11
    let _1: Foo;                         // in scope 0 at ui/methods/method-self-arg-trait.rs:54:9: 54:10
    let _2: ();                          // in scope 0 at ui/methods/method-self-arg-trait.rs:56:5: 56:18
    let mut _3: &Foo;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:56:15: 56:17
    let _4: &Foo;                        // in scope 0 at ui/methods/method-self-arg-trait.rs:56:15: 56:17
    let _5: ();                          // in scope 0 at ui/methods/method-self-arg-trait.rs:57:5: 57:17
    let mut _6: Foo;                     // in scope 0 at ui/methods/method-self-arg-trait.rs:57:15: 57:16
    let _7: ();                          // in scope 0 at ui/methods/method-self-arg-trait.rs:58:5: 58:27
    let mut _8: std::boxed::Box<Foo>;    // in scope 0 at ui/methods/method-self-arg-trait.rs:58:15: 58:26
    let mut _9: Foo;                     // in scope 0 at ui/methods/method-self-arg-trait.rs:58:24: 58:25
    let _10: ();                         // in scope 0 at ui/methods/method-self-arg-trait.rs:60:5: 60:18
    let mut _11: &Foo;                   // in scope 0 at ui/methods/method-self-arg-trait.rs:60:15: 60:17
    let _12: &Foo;                       // in scope 0 at ui/methods/method-self-arg-trait.rs:60:15: 60:17
    let _13: ();                         // in scope 0 at ui/methods/method-self-arg-trait.rs:61:5: 61:17
    let mut _14: Foo;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:61:15: 61:16
    let _15: ();                         // in scope 0 at ui/methods/method-self-arg-trait.rs:62:5: 62:27
    let mut _16: std::boxed::Box<Foo>;   // in scope 0 at ui/methods/method-self-arg-trait.rs:62:15: 62:26
    let mut _17: Foo;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:62:24: 62:25
    let _18: ();                         // in scope 0 at ui/methods/method-self-arg-trait.rs:64:5: 64:12
    let mut _19: Foo;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:64:5: 64:6
    let mut _20: (&u64, &u64);           // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _21: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let _22: *mut u64;                   // in scope 0 at ui/methods/method-self-arg-trait.rs:66:25: 66:30
    let mut _23: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _26: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _27: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _28: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _29: u64;                    // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _31: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _32: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _33: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _34: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _35: &u64;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _36: &u64;                       // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _37: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug x => _1;                   // in scope 1 at ui/methods/method-self-arg-trait.rs:54:9: 54:10
        scope 2 {
            let _24: &u64;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            let _25: &u64;               // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let mut _38: &u64;           // in scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
            scope 3 {
                debug left_val => _24;   // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
                debug right_val => _25;  // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
                let _30: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                scope 4 {
                    debug kind => _30;   // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
                }
            }
        }
    }

    bb0: {
        _4 = &_1;                        // scope 1 at ui/methods/method-self-arg-trait.rs:56:15: 56:17
        _3 = _4;                         // scope 1 at ui/methods/method-self-arg-trait.rs:56:15: 56:17
        _2 = <Foo as Bar>::foo1(move _3) -> bb1; // scope 1 at ui/methods/method-self-arg-trait.rs:56:5: 56:18
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:56:5: 56:14
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {<Foo as Bar>::foo1}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = <Foo as Bar>::foo2(move _6) -> bb2; // scope 1 at ui/methods/method-self-arg-trait.rs:57:5: 57:17
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:57:5: 57:14
                                         // + literal: Const { ty: fn(Foo) {<Foo as Bar>::foo2}, val: Value(<ZST>) }
    }

    bb2: {
        _8 = Box::<Foo>::new(move _9) -> bb3; // scope 1 at ui/methods/method-self-arg-trait.rs:58:15: 58:26
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:58:15: 58:23
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb3: {
        _7 = <Foo as Bar>::foo3(move _8) -> bb4; // scope 1 at ui/methods/method-self-arg-trait.rs:58:5: 58:27
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:58:5: 58:14
                                         // + literal: Const { ty: fn(Box<Foo>) {<Foo as Bar>::foo3}, val: Value(<ZST>) }
    }

    bb4: {
        _12 = &_1;                       // scope 1 at ui/methods/method-self-arg-trait.rs:60:15: 60:17
        _11 = _12;                       // scope 1 at ui/methods/method-self-arg-trait.rs:60:15: 60:17
        _10 = <Foo as Bar>::bar1(move _11) -> bb5; // scope 1 at ui/methods/method-self-arg-trait.rs:60:5: 60:18
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:60:5: 60:14
                                         // + literal: Const { ty: for<'a> fn(&'a Foo) {<Foo as Bar>::bar1}, val: Value(<ZST>) }
    }

    bb5: {
        _13 = <Foo as Bar>::bar2(move _14) -> bb6; // scope 1 at ui/methods/method-self-arg-trait.rs:61:5: 61:17
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:61:5: 61:14
                                         // + literal: Const { ty: fn(Foo) {<Foo as Bar>::bar2}, val: Value(<ZST>) }
    }

    bb6: {
        _16 = Box::<Foo>::new(move _17) -> bb7; // scope 1 at ui/methods/method-self-arg-trait.rs:62:15: 62:26
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:62:15: 62:23
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: fn(Foo) -> Box<Foo> {Box::<Foo>::new}, val: Value(<ZST>) }
    }

    bb7: {
        _15 = <Foo as Bar>::bar3(move _16) -> bb8; // scope 1 at ui/methods/method-self-arg-trait.rs:62:5: 62:27
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:62:5: 62:14
                                         // + literal: Const { ty: fn(Box<Foo>) {<Foo as Bar>::bar3}, val: Value(<ZST>) }
    }

    bb8: {
        _18 = Foo::baz(move _19) -> bb9; // scope 1 at ui/methods/method-self-arg-trait.rs:64:5: 64:12
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:64:7: 64:10
                                         // + literal: Const { ty: fn(Foo) {Foo::baz}, val: Value(<ZST>) }
    }

    bb9: {
        _22 = const {alloc1: *mut u64};  // scope 2 at ui/methods/method-self-arg-trait.rs:66:25: 66:30
                                         // mir::Constant
                                         // + span: ui/methods/method-self-arg-trait.rs:66:25: 66:30
                                         // + literal: Const { ty: *mut u64, val: Value(Scalar(alloc1)) }
        _21 = &(*_22);                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _38 = const _;                   // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &u64, val: Unevaluated(main, [], Some(promoted[0])) }
        _23 = _38;                       // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _20 = (move _21, move _23);      // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _24 = (_20.0: &u64);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _25 = (_20.1: &u64);             // scope 2 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _28 = (*_24);                    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _29 = const 15330615300_u64;     // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _27 = Eq(move _28, move _29);    // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
        _26 = Not(move _27);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _26) -> [0: bb11, otherwise: bb10]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb10: {
        _30 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _32 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _34 = _24;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _33 = _34;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _36 = _25;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _35 = _36;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _37 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _31 = core::panicking::assert_failed::<u64, u64>(move _32, move _33, move _35, move _37); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a u64, &'b u64, Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<u64, u64>}, val: Value(<ZST>) }
    }

    bb11: {
        return;                          // scope 0 at ui/methods/method-self-arg-trait.rs:67:2: 67:2
    }
}

alloc1 (static: COUNT, size: 8, align: 8) {
    01 00 00 00 00 00 00 00                         │ ........
}

promoted[0] in main: &u64 = {
    let mut _0: &u64;                    // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: u64;                     // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:62
    let mut _2: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:62
    let mut _3: u64;                     // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:59
    let mut _4: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:59
    let mut _5: u64;                     // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:56
    let mut _6: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:56
    let mut _7: u64;                     // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:53
    let mut _8: (u64, bool);             // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:53
    let mut _9: u64;                     // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:50
    let mut _10: (u64, bool);            // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:50
    let mut _11: u64;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:47
    let mut _12: (u64, bool);            // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:47
    let mut _13: u64;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:45
    let mut _14: (u64, bool);            // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:45
    let mut _15: u64;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:43
    let mut _16: (u64, bool);            // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:43
    let mut _17: u64;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:41
    let mut _18: (u64, bool);            // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:41
    let mut _19: u64;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:39
    let mut _20: (u64, bool);            // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:39
    let mut _21: u64;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:37
    let mut _22: (u64, bool);            // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:37
    let mut _23: u64;                    // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:35
    let mut _24: (u64, bool);            // in scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:35

    bb0: {
        _24 = CheckedMul(const 2_u64, const 2_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:35
        _23 = move (_24.0: u64);         // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:35
        _22 = CheckedMul(_23, const 3_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:37
        _21 = move (_22.0: u64);         // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:37
        _20 = CheckedMul(_21, const 3_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:39
        _19 = move (_20.0: u64);         // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:39
        _18 = CheckedMul(_19, const 5_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:41
        _17 = move (_18.0: u64);         // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:41
        _16 = CheckedMul(_17, const 5_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:43
        _15 = move (_16.0: u64);         // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:43
        _14 = CheckedMul(_15, const 7_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:45
        _13 = move (_14.0: u64);         // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:45
        _12 = CheckedMul(_13, const 7_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:47
        _11 = move (_12.0: u64);         // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:47
        _10 = CheckedMul(_11, const 11_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:50
        _9 = move (_10.0: u64);          // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:50
        _8 = CheckedMul(_9, const 11_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:53
        _7 = move (_8.0: u64);           // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:53
        _6 = CheckedMul(_7, const 13_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:56
        _5 = move (_6.0: u64);           // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:56
        _4 = CheckedMul(_5, const 13_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:59
        _3 = move (_4.0: u64);           // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:59
        _2 = CheckedMul(_3, const 17_u64); // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:62
        _1 = move (_2.0: u64);           // scope 0 at ui/methods/method-self-arg-trait.rs:66:32: 66:62
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}
