// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn internal::<impl at ui/methods/method-trait-object-with-hrtb.rs:13:5: 13:33>::foo(_1: &()) -> &u32 {
    debug self => _1;
    let mut _0: &u32;

    bb0: {
        _0 = const _;
        return;
    }
}

promoted[0] in internal::<impl at ui/methods/method-trait-object-with-hrtb.rs:13:5: 13:33>::foo: &u32 = {
    let mut _0: &u32;
    let mut _1: u32;

    bb0: {
        _1 = const 4_u32;
        _0 = &_1;
        return;
    }
}

fn t1(_1: &dyn for<'a> MyObject<'a, for<'a> Output = &'a u32>) -> () {
    debug d => _1;
    let mut _0: ();
    let _2: &u32;

    bb0: {
        _2 = <dyn for<'a> MyObject<'a, for<'a> Output = &'a u32> as MyObject<'_>>::foo(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn t2(_1: &dyn MyObject<'_, Output = &u32>) -> () {
    debug d => _1;
    let mut _0: ();
    let _2: &u32;

    bb0: {
        _2 = <dyn MyObject<'_, Output = &u32> as MyObject<'_>>::foo(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn t3(_1: &dyn for<'a> MyObject<'a, for<'a> Output = &'a u32> + Sync) -> () {
    debug d => _1;
    let mut _0: ();
    let _2: &u32;

    bb0: {
        _2 = <dyn for<'a> MyObject<'a, for<'a> Output = &'a u32> + Sync as MyObject<'_>>::foo(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn t4(_1: &dyn MyObject<'_, Output = &u32> + Sync) -> () {
    debug d => _1;
    let mut _0: ();
    let _2: &u32;

    bb0: {
        _2 = <dyn MyObject<'_, Output = &u32> + Sync as MyObject<'_>>::foo(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: ();
    let mut _2: &dyn for<'a> internal::MyObject<'a, for<'a> Output = &'a u32>;
    let _3: ();
    let mut _4: &dyn internal::MyObject<'_, Output = &u32>;
    let _5: ();
    let mut _6: &dyn for<'a> internal::MyObject<'a, for<'a> Output = &'a u32> + std::marker::Sync;
    let _7: ();
    let mut _8: &dyn internal::MyObject<'_, Output = &u32> + std::marker::Sync;
    let mut _9: &();
    let mut _10: &();
    let mut _11: &();
    let mut _12: &();

    bb0: {
        _12 = const _;
        _2 = _12 as &dyn for<'a> internal::MyObject<'a, for<'a> Output = &'a u32> (Pointer(Unsize));
        _1 = t1(move _2) -> [return: bb1, unwind continue];
    }

    bb1: {
        _11 = const _;
        _4 = _11 as &dyn internal::MyObject<'_, Output = &u32> (Pointer(Unsize));
        _3 = t2(move _4) -> [return: bb2, unwind continue];
    }

    bb2: {
        _10 = const _;
        _6 = _10 as &dyn for<'a> internal::MyObject<'a, for<'a> Output = &'a u32> + std::marker::Sync (Pointer(Unsize));
        _5 = t3(move _6) -> [return: bb3, unwind continue];
    }

    bb3: {
        _9 = const _;
        _8 = _9 as &dyn internal::MyObject<'_, Output = &u32> + std::marker::Sync (Pointer(Unsize));
        _7 = t4(move _8) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }
}

promoted[0] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[2] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}

promoted[3] in main: &() = {
    let mut _0: &();
    let mut _1: ();

    bb0: {
        _1 = ();
        _0 = &_1;
        return;
    }
}
