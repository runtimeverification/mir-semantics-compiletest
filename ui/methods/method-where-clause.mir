// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-where-clause.rs:10:1: 10:25>::foo(_1: &Option<i32>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: std::option::Option<i32>;

    bb0: {
        _2 = (*_1);
        _0 = Option::<i32>::unwrap_or(move _2, const 22_i32) -> [return: bb1, unwind continue];
    }

    bb1: {
        return;
    }
}

fn <impl at ui/methods/method-where-clause.rs:17:1: 17:25>::foo(_1: &Option<u32>) -> i32 {
    debug self => _1;
    let mut _0: i32;
    let mut _2: u32;
    let mut _3: std::option::Option<u32>;

    bb0: {
        _3 = (*_1);
        _2 = Option::<u32>::unwrap_or(move _3, const 22_u32) -> [return: bb1, unwind continue];
    }

    bb1: {
        _0 = move _2 as i32 (IntToInt);
        return;
    }
}

fn check(_1: Option<T>) -> (i32, i32) {
    debug x => _1;
    let mut _0: (i32, i32);
    let _2: std::option::Option<T>;
    let mut _3: i32;
    let mut _4: &std::option::Option<T>;
    let mut _5: i32;
    let mut _6: &std::option::Option<T>;
    scope 1 {
        debug y => _2;
    }

    bb0: {
        _2 = Option::<T>::None;
        _4 = &_1;
        _3 = <Option<T> as Foo>::foo(move _4) -> [return: bb1, unwind: bb5];
    }

    bb1: {
        _6 = &_2;
        _5 = <Option<T> as Foo>::foo(move _6) -> [return: bb2, unwind: bb5];
    }

    bb2: {
        _0 = (move _3, move _5);
        drop(_2) -> [return: bb3, unwind: bb6];
    }

    bb3: {
        drop(_1) -> [return: bb4, unwind continue];
    }

    bb4: {
        return;
    }

    bb5 (cleanup): {
        drop(_2) -> [return: bb6, unwind terminate];
    }

    bb6 (cleanup): {
        drop(_1) -> [return: bb7, unwind terminate];
    }

    bb7 (cleanup): {
        resume;
    }
}

fn main() -> () {
    let mut _0: ();
    let mut _1: (&(i32, i32), &(i32, i32));
    let mut _2: &(i32, i32);
    let _3: (i32, i32);
    let mut _4: std::option::Option<u32>;
    let _5: &(i32, i32);
    let _6: &(i32, i32);
    let mut _7: bool;
    let mut _8: bool;
    let _10: !;
    let mut _11: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _12: (&(i32, i32), &(i32, i32));
    let mut _13: &(i32, i32);
    let _14: (i32, i32);
    let mut _15: std::option::Option<i32>;
    let _16: &(i32, i32);
    let _17: &(i32, i32);
    let mut _18: bool;
    let mut _19: bool;
    let _21: !;
    let mut _22: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _23: &(i32, i32);
    let mut _24: &(i32, i32);
    scope 1 {
        debug left_val => _5;
        debug right_val => _6;
        let _9: core::panicking::AssertKind;
        scope 2 {
            debug kind => _9;
        }
    }
    scope 3 {
        debug left_val => _16;
        debug right_val => _17;
        let _20: core::panicking::AssertKind;
        scope 4 {
            debug kind => _20;
        }
    }

    bb0: {
        _4 = Option::<u32>::Some(const 23_u32);
        _3 = check::<u32>(move _4) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = &_3;
        _24 = const _;
        _1 = (move _2, _24);
        _5 = (_1.0: &(i32, i32));
        _6 = (_1.1: &(i32, i32));
        _8 = <(i32, i32) as PartialEq>::eq(_5, _6) -> [return: bb2, unwind continue];
    }

    bb2: {
        _7 = Not(move _8);
        switchInt(move _7) -> [0: bb4, otherwise: bb3];
    }

    bb3: {
        _9 = core::panicking::AssertKind::Eq;
        _11 = Option::<Arguments<'_>>::None;
        _10 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _9, _5, _6, move _11) -> unwind continue;
    }

    bb4: {
        _15 = Option::<i32>::Some(const 23_i32);
        _14 = check::<i32>(move _15) -> [return: bb5, unwind continue];
    }

    bb5: {
        _13 = &_14;
        _23 = const _;
        _12 = (move _13, _23);
        _16 = (_12.0: &(i32, i32));
        _17 = (_12.1: &(i32, i32));
        _19 = <(i32, i32) as PartialEq>::eq(_16, _17) -> [return: bb6, unwind continue];
    }

    bb6: {
        _18 = Not(move _19);
        switchInt(move _18) -> [0: bb8, otherwise: bb7];
    }

    bb7: {
        _20 = core::panicking::AssertKind::Eq;
        _22 = Option::<Arguments<'_>>::None;
        _21 = core::panicking::assert_failed::<(i32, i32), (i32, i32)>(move _20, _16, _17, move _22) -> unwind continue;
    }

    bb8: {
        return;
    }
}

promoted[0] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 23_i32, const 22_i32);
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &(i32, i32) = {
    let mut _0: &(i32, i32);
    let mut _1: (i32, i32);

    bb0: {
        _1 = (const 23_i32, const 22_i32);
        _0 = &_1;
        return;
    }
}
