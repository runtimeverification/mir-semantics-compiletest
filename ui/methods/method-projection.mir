// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-projection.rs:9:1: 9:26>::make_string(_1: &isize) -> String {
    debug self => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 1];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::new_display::<isize>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = move _2;
        return;
    }
}

promoted[0] in <impl at ui/methods/method-projection.rs:9:1: 9:26>::make_string: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn <impl at ui/methods/method-projection.rs:15:1: 15:26>::make_string(_1: &usize) -> String {
    debug self => _1;
    let mut _0: std::string::String;
    let _2: std::string::String;
    let mut _3: std::fmt::Arguments<'_>;
    let mut _4: &[&str];
    let mut _5: &[core::fmt::rt::Argument<'_>];
    let _6: &[core::fmt::rt::Argument<'_>; 1];
    let _7: [core::fmt::rt::Argument<'_>; 1];
    let mut _8: core::fmt::rt::Argument<'_>;
    let mut _9: &[&str; 1];
    scope 1 {
        debug res => _2;
    }

    bb0: {
        _9 = const _;
        _4 = _9 as &[&str] (Pointer(Unsize));
        _8 = core::fmt::rt::Argument::<'_>::new_display::<usize>(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _7 = [move _8];
        _6 = &_7;
        _5 = _6 as &[core::fmt::rt::Argument<'_>] (Pointer(Unsize));
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> [return: bb2, unwind continue];
    }

    bb2: {
        _2 = format(move _3) -> [return: bb3, unwind continue];
    }

    bb3: {
        _0 = move _2;
        return;
    }
}

promoted[0] in <impl at ui/methods/method-projection.rs:15:1: 15:26>::make_string: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const ""];
        _0 = &_1;
        return;
    }
}

fn foo(_1: &F) -> String {
    debug f => _1;
    let mut _0: std::string::String;
    let mut _2: &<F as Foo>::F;
    let _3: &<F as Foo>::F;

    bb0: {
        _3 = <F as Foo>::get(_1) -> [return: bb1, unwind continue];
    }

    bb1: {
        _2 = _3;
        _0 = <<F as Foo>::F as MakeString>::make_string(move _2) -> [return: bb2, unwind continue];
    }

    bb2: {
        return;
    }
}

fn <impl at ui/methods/method-projection.rs:35:1: 35:24>::get(_1: &SomeStruct) -> &isize {
    debug self => _1;
    let mut _0: &isize;

    bb0: {
        _0 = &((*_1).0: isize);
        return;
    }
}

fn <impl at ui/methods/method-projection.rs:47:1: 47:29>::get(_1: &SomeOtherStruct) -> &usize {
    debug self => _1;
    let mut _0: &usize;

    bb0: {
        _0 = &((*_1).0: usize);
        return;
    }
}

fn main() -> () {
    let mut _0: ();
    let _1: SomeStruct;
    let mut _2: (&std::string::String, &std::string::String);
    let mut _3: &std::string::String;
    let _4: std::string::String;
    let _5: &SomeStruct;
    let mut _6: &std::string::String;
    let _7: std::string::String;
    let mut _9: std::fmt::Arguments<'_>;
    let mut _10: &[&str];
    let mut _13: bool;
    let mut _14: bool;
    let _16: !;
    let mut _17: std::option::Option<std::fmt::Arguments<'_>>;
    let mut _19: (&std::string::String, &std::string::String);
    let mut _20: &std::string::String;
    let _21: std::string::String;
    let _22: &SomeOtherStruct;
    let mut _23: &std::string::String;
    let _24: std::string::String;
    let mut _26: std::fmt::Arguments<'_>;
    let mut _27: &[&str];
    let mut _30: bool;
    let mut _31: bool;
    let _33: !;
    let mut _34: std::option::Option<std::fmt::Arguments<'_>>;
    scope 1 {
        debug x => _1;
        let _8: std::string::String;
        let _11: &std::string::String;
        let _12: &std::string::String;
        let _18: SomeOtherStruct;
        let mut _36: &[&str; 1];
        scope 2 {
            debug res => _8;
        }
        scope 3 {
            debug left_val => _11;
            debug right_val => _12;
            let _15: core::panicking::AssertKind;
            scope 4 {
                debug kind => _15;
            }
        }
        scope 5 {
            debug x => _18;
            let _25: std::string::String;
            let _28: &std::string::String;
            let _29: &std::string::String;
            let mut _35: &[&str; 1];
            scope 6 {
                debug res => _25;
            }
            scope 7 {
                debug left_val => _28;
                debug right_val => _29;
                let _32: core::panicking::AssertKind;
                scope 8 {
                    debug kind => _32;
                }
            }
        }
    }

    bb0: {
        _1 = SomeStruct { field: const 22_isize };
        _5 = &_1;
        _4 = foo::<SomeStruct>(_5) -> [return: bb1, unwind continue];
    }

    bb1: {
        _3 = &_4;
        _36 = const _;
        _10 = _36 as &[&str] (Pointer(Unsize));
        _9 = Arguments::<'_>::new_const(move _10) -> [return: bb2, unwind: bb20];
    }

    bb2: {
        _8 = format(move _9) -> [return: bb3, unwind: bb20];
    }

    bb3: {
        _7 = move _8;
        _6 = &_7;
        _2 = (move _3, move _6);
        _11 = (_2.0: &std::string::String);
        _12 = (_2.1: &std::string::String);
        _14 = <String as PartialEq>::eq(_11, _12) -> [return: bb4, unwind: bb19];
    }

    bb4: {
        _13 = Not(move _14);
        switchInt(move _13) -> [0: bb6, otherwise: bb5];
    }

    bb5: {
        _15 = core::panicking::AssertKind::Eq;
        _17 = Option::<Arguments<'_>>::None;
        _16 = core::panicking::assert_failed::<String, String>(move _15, _11, _12, move _17) -> bb19;
    }

    bb6: {
        drop(_7) -> [return: bb7, unwind: bb20];
    }

    bb7: {
        drop(_4) -> [return: bb8, unwind continue];
    }

    bb8: {
        _18 = SomeOtherStruct { field: const 44_usize };
        _22 = &_18;
        _21 = foo::<SomeOtherStruct>(_22) -> [return: bb9, unwind continue];
    }

    bb9: {
        _20 = &_21;
        _35 = const _;
        _27 = _35 as &[&str] (Pointer(Unsize));
        _26 = Arguments::<'_>::new_const(move _27) -> [return: bb10, unwind: bb18];
    }

    bb10: {
        _25 = format(move _26) -> [return: bb11, unwind: bb18];
    }

    bb11: {
        _24 = move _25;
        _23 = &_24;
        _19 = (move _20, move _23);
        _28 = (_19.0: &std::string::String);
        _29 = (_19.1: &std::string::String);
        _31 = <String as PartialEq>::eq(_28, _29) -> [return: bb12, unwind: bb17];
    }

    bb12: {
        _30 = Not(move _31);
        switchInt(move _30) -> [0: bb14, otherwise: bb13];
    }

    bb13: {
        _32 = core::panicking::AssertKind::Eq;
        _34 = Option::<Arguments<'_>>::None;
        _33 = core::panicking::assert_failed::<String, String>(move _32, _28, _29, move _34) -> bb17;
    }

    bb14: {
        drop(_24) -> [return: bb15, unwind: bb18];
    }

    bb15: {
        drop(_21) -> [return: bb16, unwind continue];
    }

    bb16: {
        return;
    }

    bb17 (cleanup): {
        drop(_24) -> [return: bb18, unwind terminate];
    }

    bb18 (cleanup): {
        drop(_21) -> [return: bb21, unwind terminate];
    }

    bb19 (cleanup): {
        drop(_7) -> [return: bb20, unwind terminate];
    }

    bb20 (cleanup): {
        drop(_4) -> [return: bb21, unwind terminate];
    }

    bb21 (cleanup): {
        resume;
    }
}

promoted[0] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "44"];
        _0 = &_1;
        return;
    }
}

promoted[1] in main: &[&str; 1] = {
    let mut _0: &[&str; 1];
    let mut _1: [&str; 1];

    bb0: {
        _1 = [const "22"];
        _0 = &_1;
        return;
    }
}
