// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn <impl at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:13:1: 13:35>::my_write(_1: &mut &mut [u8], _2: &[u8]) -> Result<(), ()> {
    debug self => _1;                    // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:14:17: 14:26
    debug buf => _2;                     // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:14:28: 14:31
    let mut _0: std::result::Result<(), ()>; // return place in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:14:43: 14:57
    let _3: usize;                       // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:13: 15:16
    let mut _4: usize;                   // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:28: 15:38
    let mut _5: &[u8];                   // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:28: 15:38
    let mut _6: usize;                   // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:40: 15:49
    let mut _7: &[u8];                   // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:40: 15:49
    let _8: ();                          // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:50
    let mut _9: &mut [u8];               // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:50
    let mut _10: &mut [u8];              // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:20
    let mut _11: &mut [u8];              // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:13
    let mut _12: std::ops::RangeTo<usize>; // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:14: 16:19
    let mut _13: usize;                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:16: 16:19
    let mut _14: &[u8];                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:38: 16:49
    let _15: &[u8];                      // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:38: 16:49
    let _16: &[u8];                      // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:39: 16:49
    let mut _17: &[u8];                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:39: 16:42
    let mut _18: std::ops::RangeTo<usize>; // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:43: 16:48
    let mut _19: usize;                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:45: 16:48
    let mut _21: &[u8];                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:18:25: 18:34
    let mut _22: &mut [u8];              // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:20:21: 23:14
    let mut _23: &mut [u8];              // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:20:21: 23:14
    let mut _24: *mut u8;                // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:17: 21:49
    let mut _25: *mut u8;                // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:17: 21:34
    let mut _26: &mut [u8];              // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:17: 21:34
    let mut _27: usize;                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:39: 21:48
    let mut _28: usize;                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:39
    let mut _29: usize;                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:27
    let mut _30: &[u8];                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:27
    let mut _31: usize;                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:30: 22:39
    let mut _32: (usize, bool);          // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:39
    let mut _33: &mut [u8];              // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:14:17: 14:26
    let mut _34: &mut [u8];              // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:14:17: 14:26
    let mut _35: &mut [u8];              // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:14:17: 14:26
    let mut _36: &mut [u8];              // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:14:17: 14:26
    scope 1 {
        debug amt => _3;                 // in scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:13: 15:16
        let _20: usize;                  // in scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:18:13: 18:22
        scope 2 {
            debug write_len => _20;      // in scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:18:13: 18:22
            scope 3 {
            }
        }
    }

    bb0: {
        _33 = deref_copy (*_1);          // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:28: 15:38
        _5 = &(*_33);                    // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:28: 15:38
        _4 = Len((*_5));                 // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:28: 15:38
        _7 = _2;                         // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:40: 15:49
        _6 = Len((*_7));                 // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:40: 15:49
        _3 = std::cmp::min::<usize>(move _4, move _6) -> bb1; // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:19: 15:50
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:15:19: 15:27
                                         // + literal: Const { ty: fn(usize, usize) -> usize {std::cmp::min::<usize>}, val: Value(<ZST>) }
    }

    bb1: {
        _34 = deref_copy (*_1);          // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:13
        _11 = &mut (*_34);               // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:13
        _13 = _3;                        // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:16: 16:19
        _12 = RangeTo::<usize> { end: move _13 }; // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:14: 16:19
        _10 = <[u8] as IndexMut<RangeTo<usize>>>::index_mut(move _11, move _12) -> bb2; // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:20
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:20
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8], RangeTo<usize>) -> &'a mut <[u8] as Index<RangeTo<usize>>>::Output {<[u8] as IndexMut<RangeTo<usize>>>::index_mut}, val: Value(<ZST>) }
    }

    bb2: {
        _9 = &mut (*_10);                // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:50
        _17 = _2;                        // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:39: 16:42
        _19 = _3;                        // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:45: 16:48
        _18 = RangeTo::<usize> { end: move _19 }; // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:43: 16:48
        _16 = <[u8] as Index<RangeTo<usize>>>::index(move _17, move _18) -> bb3; // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:39: 16:49
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:39: 16:49
                                         // + literal: Const { ty: for<'a> fn(&'a [u8], RangeTo<usize>) -> &'a <[u8] as Index<RangeTo<usize>>>::Output {<[u8] as Index<RangeTo<usize>>>::index}, val: Value(<ZST>) }
    }

    bb3: {
        _15 = _16;                       // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:38: 16:49
        _14 = _15;                       // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:38: 16:49
        _8 = core::slice::<impl [u8]>::clone_from_slice(move _9, move _14) -> bb4; // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:9: 16:50
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:16:21: 16:37
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut [u8], &'b [u8]) {core::slice::<impl [u8]>::clone_from_slice}, val: Value(<ZST>) }
    }

    bb4: {
        _21 = _2;                        // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:18:25: 18:34
        _20 = Len((*_21));               // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:18:25: 18:34
        _35 = deref_copy (*_1);          // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:17: 21:34
        _26 = &mut (*_35);               // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:17: 21:34
        _25 = core::slice::<impl [u8]>::as_mut_ptr(move _26) -> bb5; // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:17: 21:34
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:22: 21:32
                                         // + literal: Const { ty: for<'a> fn(&'a mut [u8]) -> *mut u8 {core::slice::<impl [u8]>::as_mut_ptr}, val: Value(<ZST>) }
    }

    bb5: {
        _27 = _20;                       // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:39: 21:48
        _24 = ptr::mut_ptr::<impl *mut u8>::add(move _25, move _27) -> bb6; // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:17: 21:49
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:21:35: 21:38
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> *mut u8 {ptr::mut_ptr::<impl *mut u8>::add}, val: Value(<ZST>) }
    }

    bb6: {
        _36 = deref_copy (*_1);          // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:27
        _30 = &(*_36);                   // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:27
        _29 = Len((*_30));               // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:27
        _31 = _20;                       // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:30: 22:39
        _32 = CheckedSub(_29, _31);      // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:39
        assert(!move (_32.1: bool), "attempt to compute `{} - {}`, which would overflow", move _29, move _31) -> bb7; // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:39
    }

    bb7: {
        _28 = move (_32.0: usize);       // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:22:17: 22:39
        _23 = std::slice::from_raw_parts_mut::<'_, u8>(move _24, move _28) -> bb8; // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:20:21: 23:14
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:20:21: 20:46
                                         // + literal: Const { ty: unsafe fn(*mut u8, usize) -> &mut [u8] {std::slice::from_raw_parts_mut::<'_, u8>}, val: Value(<ZST>) }
    }

    bb8: {
        _22 = &mut (*_23);               // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:20:21: 23:14
        (*_1) = move _22;                // scope 3 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:20:13: 23:14
        _0 = const Result::<(), ()>::Ok(()); // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:26:9: 26:15
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:26:9: 26:15
                                         // + literal: Const { ty: Result<(), ()>, val: Value(Scalar(0x00)) }
        return;                          // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:27:6: 27:6
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:30:11: 30:11
    let mut _1: [u8; 6];                 // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:31:9: 31:16
    let mut _3: &mut [u8; 6];            // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:34:36: 34:44
    let mut _4: &mut [u8; 6];            // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:34:36: 34:44
    let _5: ();                          // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:9: 35:45
    let mut _6: std::result::Result<(), ()>; // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:9: 35:36
    let mut _7: &mut &mut [u8];          // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:9: 35:36
    let mut _8: &[u8];                   // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
    let mut _9: &[u8; 3];                // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
    let _10: &[u8; 3];                   // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
    let _11: ();                         // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:9: 36:45
    let mut _12: std::result::Result<(), ()>; // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:9: 36:36
    let mut _13: &mut &mut [u8];         // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:9: 36:36
    let mut _14: &[u8];                  // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
    let mut _15: &[u8; 3];               // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
    let _16: &[u8; 3];                   // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
    let mut _17: (&[u8; 6], &[u8; 6]);   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
    let mut _18: &[u8; 6];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
    let mut _19: &[u8; 6];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _22: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    let mut _23: bool;                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
    let mut _24: &[u8; 6];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
    let mut _25: &[u8; 6];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
    let _27: !;                          // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
    let mut _28: core::panicking::AssertKind; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
    let mut _29: &[u8; 6];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let _30: &[u8; 6];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
    let mut _31: &[u8; 6];               // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let _32: &[u8; 6];                   // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
    let mut _33: std::option::Option<std::fmt::Arguments<'_>>; // in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
    scope 1 {
        debug buf => _1;                 // in scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:31:9: 31:16
        let mut _2: &mut [u8];           // in scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:34:13: 34:23
        let _20: &[u8; 6];               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        let _21: &[u8; 6];               // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        let mut _34: &[u8; 6];           // in scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        scope 2 {
            debug writer => _2;          // in scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:34:13: 34:23
            let mut _35: &[u8; 3];       // in scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
            let mut _36: &[u8; 3];       // in scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
        }
        scope 3 {
            debug left_val => _20;       // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
            debug right_val => _21;      // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
            let _26: core::panicking::AssertKind; // in scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            scope 4 {
                debug kind => _26;       // in scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:25: 41:29
            }
        }
    }

    bb0: {
        _1 = [const 0_u8; 6];            // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:31:19: 31:25
        _4 = &mut _1;                    // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:34:36: 34:44
        _3 = &mut (*_4);                 // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:34:36: 34:44
        _2 = move _3 as &mut [u8] (Pointer(Unsize)); // scope 1 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:34:36: 34:44
        _7 = &mut _2;                    // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:9: 35:36
        _36 = const _;                   // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
                                         // + literal: Const { ty: &[u8; 3], val: Unevaluated(main, [], Some(promoted[2])) }
        _10 = _36;                       // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
        _9 = _10;                        // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
        _8 = move _9 as &[u8] (Pointer(Unsize)); // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
        _6 = <&mut [u8] as MyWriter>::my_write(move _7, move _8) -> bb1; // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:9: 35:36
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:16: 35:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &mut [u8], &'b [u8]) -> Result<(), ()> {<&mut [u8] as MyWriter>::my_write}, val: Value(<ZST>) }
    }

    bb1: {
        _5 = Result::<(), ()>::unwrap(move _6) -> bb2; // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:9: 35:45
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:37: 35:43
                                         // + literal: Const { ty: fn(Result<(), ()>) {Result::<(), ()>::unwrap}, val: Value(<ZST>) }
    }

    bb2: {
        _13 = &mut _2;                   // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:9: 36:36
        _35 = const _;                   // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
                                         // + literal: Const { ty: &[u8; 3], val: Unevaluated(main, [], Some(promoted[1])) }
        _16 = _35;                       // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
        _15 = _16;                       // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
        _14 = move _15 as &[u8] (Pointer(Unsize)); // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
        _12 = <&mut [u8] as MyWriter>::my_write(move _13, move _14) -> bb3; // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:9: 36:36
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:16: 36:24
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a mut &mut [u8], &'b [u8]) -> Result<(), ()> {<&mut [u8] as MyWriter>::my_write}, val: Value(<ZST>) }
    }

    bb3: {
        _11 = Result::<(), ()>::unwrap(move _12) -> bb4; // scope 2 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:9: 36:45
                                         // mir::Constant
                                         // + span: ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:37: 36:43
                                         // + literal: Const { ty: fn(Result<(), ()>) {Result::<(), ()>::unwrap}, val: Value(<ZST>) }
    }

    bb4: {
        _18 = &_1;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:16: 38:22
        _34 = const _;                   // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
                                         // + literal: Const { ty: &[u8; 6], val: Unevaluated(main, [], Some(promoted[0])) }
        _19 = _34;                       // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        _17 = (move _18, move _19);      // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:15: 38:32
        _20 = (_17.0: &[u8; 6]);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:14: 39:22
        _21 = (_17.1: &[u8; 6]);         // scope 1 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:39:24: 39:33
        _24 = _20;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:22: 40:31
        _25 = _21;                       // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:35: 40:45
        _23 = <[u8; 6] as PartialEq>::eq(move _24, move _25) -> bb5; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:21: 40:46
                                         // + literal: Const { ty: for<'a, 'b> fn(&'a [u8; 6], &'b [u8; 6]) -> bool {<[u8; 6] as PartialEq>::eq}, val: Value(<ZST>) }
    }

    bb5: {
        _22 = Not(move _23);             // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
        switchInt(move _22) -> [0: bb7, otherwise: bb6]; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:40:20: 40:46
    }

    bb6: {
        _26 = const core::panicking::AssertKind::Eq; // scope 3 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:41:32: 41:65
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _28 = const core::panicking::AssertKind::Eq; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:54: 45:58
                                         // + literal: Const { ty: core::panicking::AssertKind, val: Value(Scalar(0x00)) }
        _30 = _20;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _29 = _30;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:60: 45:70
        _32 = _21;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _31 = _32;                       // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:72: 45:83
        _33 = Option::<Arguments<'_>>::None; // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:85: 45:113
        _27 = core::panicking::assert_failed::<[u8; 6], [u8; 6]>(move _28, move _29, move _31, move _33); // scope 4 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:114
                                         // mir::Constant
                                         // + span: /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:45:21: 45:53
                                         // + literal: Const { ty: for<'a, 'b, 'c> fn(core::panicking::AssertKind, &'a [u8; 6], &'b [u8; 6], Option<Arguments<'c>>) -> ! {core::panicking::assert_failed::<[u8; 6], [u8; 6]>}, val: Value(<ZST>) }
    }

    bb7: {
        return;                          // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:44:2: 44:2
    }
}

promoted[0] in main: &[u8; 6] = {
    let mut _0: &[u8; 6];                // return place in scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    let mut _1: [u8; 6];                 // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:43:21: 43:39

    bb0: {
        _1 = [const 0_u8, const 1_u8, const 2_u8, const 3_u8, const 4_u8, const 5_u8]; // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:43:21: 43:39
        _0 = &_1;                        // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
        return;                          // scope 0 at /rustc/bd39bbb4bb92df439bf6d85470e296cc6a47ffbd/library/core/src/macros/mod.rs:38:24: 38:31
    }
}

promoted[1] in main: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
    let mut _1: [u8; 3];                 // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:26: 36:35

    bb0: {
        _1 = [const 3_u8, const 4_u8, const 5_u8]; // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:26: 36:35
        _0 = &_1;                        // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
        return;                          // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:36:25: 36:35
    }
}

promoted[2] in main: &[u8; 3] = {
    let mut _0: &[u8; 3];                // return place in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
    let mut _1: [u8; 3];                 // in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:26: 35:35

    bb0: {
        _1 = [const 0_u8, const 1_u8, const 2_u8]; // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:26: 35:35
        _0 = &_1;                        // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
        return;                          // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:35:25: 35:35
    }
}

main::{constant#0}: usize = {
    let mut _0: usize;                   // return place in scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:31:23: 31:24

    bb0: {
        _0 = const 6_usize;              // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:31:23: 31:24
        return;                          // scope 0 at ui/methods/method-mut-self-modifies-mut-slice-lvalue.rs:31:23: 31:24
    }
}
